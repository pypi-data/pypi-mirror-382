[project]
name = "swh.digestmap"
requires-python = ">=3.9"
readme = {file = "README.rst", content-type = "text/x-rst"}
license = "GPL-3.0"
authors = [
    {name="Software Heritage developers", email="swh-devel@inria.fr"},
]
classifiers = [
    "Programming Language :: Rust",
    "Intended Audience :: Developers",
    "Development Status :: 4 - Beta",
]
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
Homepage = "https://softwareheritage.org/"
Documentation = "https://docs.softwareheritage.org/devel/swh-digestmap/"
Repository = "https://gitlab.softwareheritage.org/swh/devel/swh-digestmap"

[tool.setuptools]
packages = ["swh", "swh.digestmap"]

[tool.setuptools.package-dir]
"swh.digestmap" = "pyo3"

[tool.setuptools.package-data]
"*" = ["*.pyi"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements-swh.txt"]}

[tool.setuptools.dynamic.optional-dependencies]
testing = {file = [
    "requirements-test.txt",
]}

[build-system]
requires = ["setuptools", "setuptools-rust", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project.entry-points."swh.storage.classes"]
"digestmap" = "swh.digestmap:DigestMap"

[[tool.setuptools-rust.ext-modules]]
path = "pyo3/Cargo.toml"
target = "swh.digestmap"
# ^-- The last part of the target name (e.g. "digestmap") should match lib.name in Cargo.toml,
#     but you can add a prefix to nest it inside of a parent Python package or namespace.
#     Note that lib.name may not be defined in the Cargo.toml, but you still
#     have to match the name of the function with the `#[pymodule]` attribute.
# See reference for RustExtension in https://setuptools-rust.readthedocs.io/en/latest/reference.html

[tool.setuptools_scm]
fallback_version = "0.0.1"

[tool.cibuildwheel.linux]
archs = ["x86_64"]
before-all = ["bash pyo3/install_wheel_build_deps.sh"]

[[tool.cibuildwheel.overrides]]
select = "*manylinux*"

# set some environment variables to ensure manylinux wheels can be built
environment.PATH = "$HOME/.cargo/bin:$PATH"

[tool.black]
target-version = ['py39', 'py310', 'py311', 'py312']

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
force_sort_within_sections = true
known_first_party = ['swh']

[tool.mypy]
namespace_packages = true
warn_unused_ignores = true
explicit_package_bases = true
# ^ Needed for mypy to detect py.typed from swh packages installed
# in editable mode

# 3rd party libraries without stubs (yet)
[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[tool.flake8]
select = ["C", "E", "F", "W", "B950"]
ignore = [
    "E203", # whitespaces before ':' <https://github.com/psf/black/issues/315>
    "E231", # missing whitespace after ','
    "E501", # line too long, use B950 warning from flake8-bugbear instead
    "W503" # line break before binary operator <https://github.com/psf/black/issues/52>
]
max-line-length = 88
extend-exclude = ["target/", "build/"]

[tool.pytest.ini_options]
norecursedirs = "build docs .*"
consider_namespace_packages = true
