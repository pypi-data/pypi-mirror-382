from __future__ import annotations

from typing import overload

import numpy as np

class CompressionType:
    NONE: "CompressionType"
    JPEG: "CompressionType"
    LZ4: "CompressionType"
    TEMP_FILE: "CompressionType"

class LoadingMode:
    SYNC: "LoadingMode"
    ASYNC: "LoadingMode"
    ON_DEMAND: "LoadingMode"

class BithumanRuntime:
    def __init__(self, audio_encoder_path: str = "", output_size: int = -1) -> None: ...
    def set_audio_encoder(self, audio_encoder_path: str) -> None: ...
    def getFingerprint(self) -> str: ...
    @overload
    def set_audio_feature(self, audio_feature_path: str) -> None: ...
    @overload
    def set_audio_feature(self, audio_feature: np.ndarray) -> None: ...
    def set_output_size(self, output_size: int) -> None: ...
    def add_video(
        self,
        video_name: str,
        video_path: str,
        video_data_path: str,
        avatar_data_path: str,
        compression_type: CompressionType = CompressionType.JPEG,
        loading_mode: LoadingMode = LoadingMode.ASYNC,
        thread_count: int = 0,
    ) -> None: ...
    def validate_token(self, token: str, verbose: bool = True) -> bool: ...
    def get_instance_id(self) -> str: ...
    def set_model_hash_from_file(self, model_path: str) -> str: ...
    def process_audio(
        self, mel_chunk: np.ndarray, video_name: str, frame_idx: int
    ) -> np.ndarray: ...
    def get_original_frame(self, video_name: str, frame_idx: int) -> np.ndarray: ...
    def get_num_frames(self, video_name: str) -> int: ...
    def is_token_validated(self) -> bool: ...
    def get_expiration_time(self) -> int: ...
