(()=>{"use strict";const e=StimulusModule;var t,a;!function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.NEEDS_MAJOR_IMPROVEMENT=1]="NEEDS_MAJOR_IMPROVEMENT",e[e.ADEQUATE=2]="ADEQUATE",e[e.EXCELLENT=3]="EXCELLENT"}(t||(t={})),function(e){e.IDLE="idle",e.LOADING="loading",e.ERROR="error",e.SUGGESTING="suggesting"}(a||(a={}));class n extends e.Controller{static targets=["feedback","feedbackItemTemplate","status","suggest","suggestions","suggestionItemTemplate"];static values={score:{default:t.UNKNOWN,type:Number},state:{default:a.IDLE,type:String},temperature:{default:1,type:Number},topK:{default:3,type:Number},url:{default:"",type:String}};static languageNames=new Intl.DisplayNames(["en"],{type:"language"});targetText="";abortController=null;suggestionFields={};#e=null;contentLanguage=document.documentElement.lang||"en";editorLanguage=document.documentElement.lang||"en";contentLanguageLabel=n.languageNames.of(this.contentLanguage);editorLanguageLabel=n.languageNames.of(this.editorLanguage);get session(){return"LanguageModel"in window?this.#e?this.#e:this.createModel():null}get schema(){return{type:"object",properties:{quality_score:{type:"integer",enum:[1,2,3],description:"Content quality score (1=needs major improvement, 2=adequate, 3=excellent)"},qualitative_feedback:{type:"array",items:{type:"string"},description:`3-5 bullet points of qualitative feedback in language: "${this.editorLanguageLabel}"`,minItems:3,maxItems:5},specific_improvements:{type:"array",items:{type:"object",properties:{original_text:{type:"string",description:"The original text that needs improvement"},suggested_text:{type:"string",description:`The suggested revised text. Translate the text to ${this.contentLanguageLabel} if necessary. The text MUST be in ${this.contentLanguageLabel}.`},explanation:{type:"string",description:`Brief explanation in ${this.editorLanguageLabel} of why this change improves the content.`}},additionalProperties:!1,required:["original_text","suggested_text","explanation"]},description:`Specific text improvements with original and suggested versions in ${this.contentLanguageLabel}.`,minItems:1}},additionalProperties:!1,required:["quality_score","qualitative_feedback","specific_improvements"]}}connect(){this.generate=this.generate.bind(this),this.scoreValue=t.UNKNOWN,this.stateValue=a.IDLE,this.form=document.querySelector("[data-edit-form]"),this.walker=this.createWalker()}createWalker(){return document.createTreeWalker(this.form,NodeFilter.SHOW_ELEMENT,(e=>(e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement||e.isContentEditable)&&"hidden"!==e.getAttribute("type")&&("value"in e?`${e.value}`:`${e.innerText}`).replace(/\s+/g," ").trim().includes(this.targetText)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP))}createModel(){const e=[{role:"system",content:"You are a helpful assistant that responds with structured data according to the provided schema. The language rules specified are IMPORTANT. Always ensure the feedback and improvements are in the correct language."},{role:"user",content:`Analyze the given content and provide:\n1. A quality score between 1 and 3 (1=needs major improvement, 2=adequate, 3=excellent)\n2. 3-5 bullet points of qualitative feedback highlighting strengths and areas for improvement in ${this.editorLanguageLabel}\n3. Specific text improvements with original text, suggested revised text in ${this.contentLanguageLabel}, and a brief explanation\n   in ${this.editorLanguageLabel} for why each change would improve the content\n\nThe language rules specified are IMPORTANT. Always ensure the feedback and improvements are in the correct language.\n\nReturn JSON with the provided structure WITHOUT the markdown code block. Start immediately with a { character and end with a } character.`}];return this.#e=window.LanguageModel.create({temperature:this.temperatureValue,topK:this.topKValue,initialPrompts:e,monitor:e=>{e.addEventListener("downloadprogress",(e=>{const t=this.suggestTarget.lastElementChild,{loaded:a,total:n}=e;if(a===n)return void(this.suggestTarget.disabled?t.textContent="Generating…":t.textContent="Generate suggestions");const i=Math.round(a/n*100);t.textContent=`Loading AI… ${i}%`}))}}),this.#e}temperatureValueChanged(e,t){t&&t!=e&&this.createModel()}topKValueChanged(e,t){t&&t!=e&&this.createModel()}scoreValueChanged(){let e="-";switch(this.scoreValue){case t.NEEDS_MAJOR_IMPROVEMENT:e=gettext("Quality: needs major improvement");break;case t.ADEQUATE:e=gettext("Quality: adequate");break;case t.EXCELLENT:e=gettext("Quality: excellent")}this.statusTarget.setAttribute("data-w-tooltip-content-value",e)}reset(){this.scoreValue=t.UNKNOWN,this.stateValue=a.IDLE,this.abortController?.abort("Cancelled by user"),this.feedbackTarget.innerHTML="",this.suggestionsTarget.innerHTML="",this.suggestionFields={}}dismissItem(e){e.target.closest("li").remove(),this.element.querySelector("li")||this.reset()}showSuggestion(e){const t=e.target.getAttribute("data-suggestion-id"),a=this.suggestionFields[t];a?.scrollIntoView({behavior:"smooth"})}async renderFeedback(e){const t=this.feedbackItemTemplateTarget.content.firstElementChild.cloneNode(!0);t.querySelector('[data-template-key="text"]').textContent=e,this.feedbackTarget.appendChild(t)}async renderSuggestion(e,t){const a=`suggestion-${t}`,n=this.suggestionItemTemplateTarget.content.firstElementChild.cloneNode(!0),i=n.querySelector('[data-template-key="suggested_text"]');for(i.name=a,i.textContent=e.suggested_text,i.setAttribute("data-w-tooltip-content-value",e.explanation),this.walker.currentNode=this.form,this.targetText=e.original_text;this.walker.nextNode();){const e=this.walker.currentNode;if(e){this.suggestionFields[a]=e;break}}const s=n.querySelector("[data-suggestion-id]");this.suggestionFields[a]?s.setAttribute("data-suggestion-id",a):s.hidden=!0,this.suggestionsTarget.appendChild(n),i.style.height=i.scrollHeight+"px"}async prompt(){const e=await async function(){const e=window.wagtail.app.queryController("w-preview");return e?(e.ready||(await e.checkAndUpdatePreview(),await new Promise((e=>{document.addEventListener("w-preview:loaded",e,{once:!0})}))),e.extractContent()):null}();if(!e)throw new Error("Unable to get page content for analysis.");const{innerText:t,innerHTML:a,lang:i}=e;if(this.contentLanguage=i,this.contentLanguageLabel=n.languageNames.of(this.contentLanguage),this.urlValue)try{const e=await fetch(this.urlValue,{method:"POST",headers:{[wagtailConfig.CSRF_HEADER_NAME]:wagtailConfig.CSRF_TOKEN},body:JSON.stringify({arguments:{content_text:t.trim(),content_html:a.trim(),content_language:this.contentLanguageLabel,editor_language:this.editorLanguageLabel}}),signal:this.abortController?.signal});if(!e.ok)throw new Error(`Error fetching AI response: ${e.status} ${e.statusText}`);return await e.json().then((({data:e})=>e))}catch(e){throw console.error("Error fetching AI response:",e),e}const s=await this.session;return await s.append([{role:"user",content:"Content to analyze and improve:\n\n"+t}]),JSON.parse(await s.prompt(t,{responseConstraint:this.schema,signal:this.abortController?.signal}))}async generate(){this.reset(),this.abortController=new AbortController,this.stateValue=a.LOADING;try{const e=await this.prompt();if(!e?.quality_score)throw new Error("Invalid response from AI model");this.scoreValue=e.quality_score,e.qualitative_feedback.forEach((e=>{this.renderFeedback(e)})),e.specific_improvements.forEach(((e,t)=>{this.renderSuggestion(e,t)}))}catch(e){return this.abortController?.signal.aborted?(this.stateValue=a.IDLE,void(this.abortController=null)):(console.error("Error parsing AI response:",e),void(this.stateValue=a.ERROR))}this.stateValue=a.SUGGESTING}}window.wagtail.app.register("wai-feedback",n)})();