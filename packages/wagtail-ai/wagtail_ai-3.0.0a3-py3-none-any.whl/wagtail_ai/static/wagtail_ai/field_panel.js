(()=>{"use strict";const t=StimulusModule;var e,i;async function n(){const t=window.wagtail.app.queryController("w-preview");return t?(t.ready||(await t.checkAndUpdatePreview(),await new Promise((t=>{document.addEventListener("w-preview:loaded",t,{once:!0})}))),t.extractContent()):null}!function(t){t.APPEND="append",t.REPLACE="replace"}(e||(e={})),function(t){t.IDLE="idle",t.LOADING="loading",t.ERROR="error",t.SUGGESTING="suggesting"}(i||(i={}));class r{static handlers={};static register(t,e){this.handlers[t]=e}static async get(t){const e={};return await Promise.allSettled(Object.entries(r.handlers).map((async([i,n])=>{if(!t.activePrompt?.prompt.includes(`{${i}}`))return;const r=await n.call(t);[null,void 0].includes(r)||(e[i]=r)}))),e}}class a extends t.Controller{static targets=["dropdown","prompt","suggestion"];static values={activePromptId:{type:String,default:""},dropdownTemplate:{type:String,default:"#wai-field-panel-dropdown-template"},imageInput:{type:String,default:""},mainInput:{type:String,default:""},prompts:{type:Array,default:[]},state:{type:String,default:i.IDLE},suggestion:{type:String,default:""},url:{type:String,default:window.wagtailAI.config.urls.BASIC_PROMPT}};activePrompt=null;abortController=null;imageInput=null;dropdownController=null;static defaultHandlers={content_html:async()=>(await n())?.innerHTML.trim(),content_text:async()=>(await n())?.innerText.trim(),async form_context_before(){return this.formContext.before},async form_context_after(){return this.formContext.after},async image(){return this.imageInput?.files?.[0]?new Promise(((t,e)=>{const i=new FileReader;i.onload=()=>t(i.result),i.onerror=e,i.readAsDataURL(this.imageInput.files[0])})):this.imageInput?.value||this.element.getAttribute(`data-${this.identifier}-image-id`)},async input(){return this.inputValue},async max_length(){return this.input.getAttribute("maxlength")}};static{Object.entries(this.defaultHandlers).forEach((([t,e])=>{r.register(t,e)}))}static inputsToText=t=>t.map((t=>"value"in t?t.value:t.innerText)).filter((t=>!!t.trim())).join("\n\n");connect(){if(this.#t||this.hasDropdownTarget)return;const t=this.fieldInput.querySelector("[data-comment-add]");t?this.fieldInput.insertBefore(this.template,t):this.fieldInput.appendChild(this.template)}get#t(){return this.element instanceof HTMLInputElement||this.element instanceof HTMLTextAreaElement||this.element.isContentEditable}get template(){const t=document.querySelector(this.dropdownTemplateValue)?.content?.firstElementChild;if(!t)throw new Error("Could not find dropdown template element.");const e=t.cloneNode(!0),i=e.querySelector('[data-w-dropdown-target="content"]').firstElementChild;return this.filteredPrompts.forEach((t=>{i.insertAdjacentHTML("beforebegin",this.getDropdownItemTemplate(t))})),e}#e(t){return"uuid"in t?t.uuid:t.name}getDropdownItemTemplate(t){return`\n      <button\n        type="button"\n        class="wai-dropdown__item"\n        data-action="click->wai-field-panel#prompt"\n        data-wai-field-panel-target="prompt"\n        data-wai-field-panel-prompt-id-param="${this.#e(t)}"\n      >\n        <div>${t.label}</div>\n        <div class="wai-dropdown__description">${t.description}</div>\n      </button>\n    `}dropdownTargetConnected(){setTimeout((()=>{this.dropdownController=window.wagtail.app.getControllerForElementAndIdentifier(this.dropdownTarget,"w-dropdown"),this.setDropdownTheme()}))}setDropdownTheme(){const{tippy:t}=this.dropdownController;t.setProps({arrow:!1,maxWidth:"none",theme:"assistant"})}imageInputValueChanged(){if(this.#t||!this.imageInputValue)return;const t=this.element.querySelector(this.imageInputValue)||this.form.querySelector(this.imageInputValue);this.imageInput=t}mainInputValueChanged(){if(this.#t){const t=this.element.closest("[data-field-wrapper]");Array.from(this.element.attributes).forEach((e=>{if("data-controller"===e.name){const i=new Set(t.getAttribute("data-controller")?.split(" ")||[]);i.add(this.identifier),t.setAttribute("data-controller",Array.from(i).join(" ")),this.element.setAttribute("data-controller",e.value.split(" ").filter((t=>t!==this.identifier)).join(" "))}e.name.startsWith(`data-${this.identifier}-`)&&t.setAttribute(e.name,e.value)}))}else if(this.mainInputValue){const t=this.element.querySelector(this.mainInputValue);if(!t)throw new Error(`Could not find input element matching selector "${this.mainInputValue}".`);this.input=t,this.fieldInput=this.input.closest("[data-field-input]")}else{this.fieldInput=this.element.querySelector("[data-field-input]");const t=this.fieldInput.querySelector("input, textarea");if(!t)throw new Error("Could not find input or textarea element.");this.input=t}}get textInputs(){return Array.from(this.form.querySelectorAll('input[type="text"], textarea, [role="textbox"]')).filter((t=>t!==this.input))}get textInputsContext(){return Object.groupBy(this.textInputs,(t=>this.input.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_PRECEDING?"before":"after"))}get formContext(){const{inputsToText:t}=a,{before:e,after:i}=this.textInputsContext;return{before:t(e),after:t(i)}}get form(){return this.input||this.mainInputValueChanged(),("form"in this.input?this.input.form:null)??this.input.closest("form")}get inputValue(){return"value"in this.input?this.input.value:this.input.innerText}set inputValue(t){"value"in this.input?this.input.value=t:this.input.innerText=t}promptsValueChanged(){const t=[].concat(window.wagtailAI.config.aiPrompts,window.wagtailAI.config.settingPrompts);this.promptsValue.length?this.filteredPrompts=t.filter((t=>"default_prompt_id"in t?!!t.default_prompt_id&&this.promptsValue.includes(t.default_prompt_id):this.promptsValue.includes(t.name))):this.filteredPrompts=t}activePromptIdValueChanged(){this.activePrompt=this.filteredPrompts.find((t=>this.#e(t)===this.activePromptIdValue))??null}async prompt(t){const{promptId:e=this.activePromptIdValue}={...t?.detail,...t?.params};this.stateValue=i.LOADING,this.activePromptIdValue=e,this.activePromptIdValueChanged();const n={context:await r.get(this),prompt:this.activePrompt.prompt};let a="";try{this.abortController=new AbortController;const t=await fetch(this.urlValue,{method:"POST",headers:{[wagtailConfig.CSRF_HEADER_NAME]:wagtailConfig.CSRF_TOKEN},body:JSON.stringify({arguments:n}),signal:this.abortController?.signal});if(!t.ok)throw new Error(`Error fetching AI response: ${t.status} ${t.statusText}`);a=await t.json().then((({data:t})=>t))}catch(t){if(this.abortController?.signal.aborted)return this.stateValue=i.IDLE,void(this.abortController=null);this.stateValue=i.ERROR,console.error(t)}a&&(this.stateValue=i.SUGGESTING,this.suggestionValue=a)}stateValueChanged(){const t=this.dropdownController?.toggleTarget,e=t?.querySelector("svg use");e?.setAttribute("href",this.stateValue===i.LOADING?"#icon-wand-animated":"#icon-wand"),this.togglePrompts(),this.stateValue===i.IDLE&&this.reset()}suggestionValueChanged(){this.hasSuggestionTarget&&(this.suggestionTarget.innerText=this.suggestionValue)}togglePrompts(){switch(this.stateValue){case i.LOADING:case i.ERROR:this.promptTargets.forEach((t=>t.hidden=!0));break;case i.SUGGESTING:this.promptTargets.forEach((t=>t.hidden=t.getAttribute("data-wai-field-panel-prompt-id-param")!==this.activePromptIdValue));break;case i.IDLE:default:this.promptTargets.forEach((t=>t.hidden=!1))}}useSuggestion(){this.activePrompt&&"method"in this.activePrompt&&this.activePrompt.method===e.APPEND?this.inputValue+=this.suggestionValue:this.inputValue=this.suggestionValue,this.input.dispatchEvent(new Event("input",{bubbles:!0})),this.input.dispatchEvent(new Event("change",{bubbles:!0}))}reset(){this.stateValue=i.IDLE,this.abortController?.abort("Cancelled by user"),this.suggestionValue="",this.activePromptIdValue=""}disconnect(){this.#t&&Array.from(this.element.attributes).forEach((t=>{("data-controller"===t.name&&!t.value||t.name.startsWith(`data-${this.identifier}-`))&&this.element.removeAttribute(t.name)}))}}window.wagtail.app.register("wai-field-panel",a),window.wagtailAI.ContextProvider=r})();