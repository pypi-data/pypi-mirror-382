name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: update
        run: |
          rustup update
          rustup component add clippy
          rustup install nightly

      - name: lint
        run: |
          cargo fmt -- --check
          cargo clippy -- -D warnings

      - name: test
        run: |
          cargo check
          cargo test --all

  test-python:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.10", "3.11", "3.12", "3.13", "3.14"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install the package and test dependencies
        run: |
          uv sync --all-extras --frozen

      - name: Run tests
        run: |
          python --version
          pytest

  build-manylinux:
    needs: [test-rust, test-python]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # https://github.com/PyO3/maturin-action/blob/main/src/index.ts#L217
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: ppc64le
          - runner: ubuntu-latest
            target: ppc64
        python: ["3.10", "3.11", "3.12", "3.13", "3.14"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter python${{ matrix.python }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux-${{ matrix.platform.target }}-${{ matrix.python }}
          path: dist
          if-no-files-found: error

  build-musllinux:
    needs: [test-rust, test-python]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # https://github.com/PyO3/maturin-action/blob/main/src/index.ts#L229
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: ppc64le
        python: ["3.10", "3.11", "3.12", "3.13", "3.14"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter python${{ matrix.python }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}-${{ matrix.python }}
          path: dist
          if-no-files-found: error

  build-windows:
    needs: [test-rust, test-python]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # https://github.com/PyO3/maturin-action/blob/main/src/index.ts#L240
          - runner: windows-latest
            target: x86_64
          - runner: windows-latest
            target: x86
          - runner: windows-11-arm
            target: aarch64
        python: ["3.10", "3.11", "3.12", "3.13", "3.14"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv (with cache)
        if: ${{ matrix.platform.runner != 'windows-11-arm' }}
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: ${{ matrix.python }}

      - name: Install uv (no cache)
        if: ${{ matrix.platform.runner == 'windows-11-arm' }}
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: false
          python-version: ${{ matrix.python }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter python${{ matrix.python }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}-${{ matrix.python }}
          path: dist
          if-no-files-found: error

  build-macos:
    needs: [test-rust, test-python]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # https://github.com/PyO3/maturin-action/blob/main/src/index.ts#L211
          - runner: macos-latest
            target: x86_64
          - runner: macos-latest
            target: aarch64
        python: ["3.10", "3.11", "3.12", "3.13", "3.14"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter python${{ matrix.python }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}-${{ matrix.python }}
          path: dist
          if-no-files-found: error

  build-sdist:
    needs: [test-rust, test-python]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
          if-no-files-found: error

  publish-release:
    needs: [build-manylinux, build-musllinux, build-windows, build-macos, build-sdist]
    name: Release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true # This one should `fail-fast`
    environment: pypi
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v5
        with:
          path: dist
          merge-multiple: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          skip-existing: true
          verbose: true
          packages-dir: 'dist'
