[project]
name = "palabra-ai"
version = "0.5.11"
description = "Client library for Palabra AI's real-time speech translation, dubbing, and voice synthesis APIs across 25+ languages."
readme = "README.md"
authors = [
    { name = "Andrei Kobyshev", email = "a.kobyshev@palabra.ai" }
]
requires-python = ">=3.11,<4.0"
dependencies = [
    "aiofile>=3.8,<4",
    "aiohttp>=3.9,<4",
    "aioshutdown>=0.0.4",
    "av>=13.0.0",
    "certifi>=2023.0.0",
    "environs>=14.1,<14.2",
    "httpx>=0.28.1",
    "jinja2>=3.1.0",
    "librosa>=0.10.2",
    "livekit>=0.17.5,<2",
    "loguru>=0.7.3",
    "numpy>=1.24",
    "orjson>=3.8,<4",
    "prettytable>=3.16.0",
    "pydantic>=2,<3",
    "pyloudnorm>=0.1.1",
    "sounddevice>=0.5.1,<1",
    "tqdm>=4.66.0",
    "uvloop>=0.17",
    "wat>=0.6.0",
    "websockets>=13,<16",
]
license = "MIT"
keywords = ["speech-translation", "dubbing", "voice-synthesis", "api-client", "palabra-ai"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications",
    "Topic :: Text Processing :: Linguistic"
]

[project.urls]
Homepage = "https://palabra.ai"
Repository = "https://github.com/PalabraAI/palabra-ai-python"
Documentation = "https://docs.palabra.ai"
Issues = "https://github.com/PalabraAI/palabra-ai-python/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "deepdiff>=8.5.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "ruff>=0.7.0",
    "pre-commit>=3.5.0",
    "rich>=14.0.0",
    "dictdiffer>=0.9.0",
    "wat-inspector>=0.4.3",
]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests", "src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
norecursedirs = [
    "experimental",
    "debug",
    "examples",
    "scripts",
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv"
]
addopts = [
    "--cov=palabra_ai",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-branch",
    "--cov-fail-under=50",
    "--doctest-modules",
    "--verbose",
    "--ignore=src/palabra_ai/experimental",
    "--ignore=src/palabra_ai/debug",
    "--ignore=src/palabra_ai/examples",
    "--ignore=src/palabra_ai/scripts",
    "--ignore=src/palabra_ai/benchmark"
]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

[tool.coverage.run]
source = ["palabra_ai"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/experimental/*",
    "*/debug/*",
    "*/examples/*",
    "*/scripts/*",
    "*/benchmark/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    "*/tests/*",
    "*/test_*.py",
    "*/experimental/*",
    "*/debug/*",
    "*/examples/*",
    "*/scripts/*",
    "*/benchmark/*",
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "UP007", # do not use `is` to compare with a literal
    "F821"   # undefined name (used in typings)
]
fixable = ["ALL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.hatch.build]
sources = ["src"]
