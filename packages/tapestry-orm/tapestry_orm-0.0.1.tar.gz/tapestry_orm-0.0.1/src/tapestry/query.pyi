from __future__ import annotations

from typing import TypeVar, Generic, Type, Union
from dataclasses import dataclass
from surrealdb import AsyncWsSurrealConnection, AsyncHttpSurrealConnection

from .base import Base
from .node import Node
from .edge import Edge
from .field import Traversal, Condition

T = TypeVar('T', bound=Base)

@dataclass
class Q(Generic[T]):
    table: Type[T]
    _select_fields: list[str]
    _where_clause: str | None
    _traversals: list[Traversal]
    _value_only: bool
    from_table: str

    def __init__(self, table: Type[T]) -> None: ...
    def __post_init__(self) -> None: ...
    def select(self, *fields: str) -> Q[T]: ...
    def value(self) -> Q[T]: ...
    def where(self, condition: Condition) -> Q[T]: ...
    def traverse(self, traversal: Traversal) -> Q[T]: ...
    def __rshift__(self, other: Union[Type[Edge], Type[Node], Traversal]) -> Q[T]: ...
    def __lshift__(self, other: Union[Type[Edge], Type[Node], Traversal]) -> Q[T]: ...
    def to_surreal(self) -> str: ...
    def _build_traversal_string(self) -> str: ...
    async def execute(self, con: AsyncWsSurrealConnection | AsyncHttpSurrealConnection) -> list[T]: ...
