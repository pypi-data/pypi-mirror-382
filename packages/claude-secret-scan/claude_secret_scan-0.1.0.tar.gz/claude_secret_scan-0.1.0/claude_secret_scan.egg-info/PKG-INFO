Metadata-Version: 2.4
Name: claude-secret-scan
Version: 0.1.0
Summary: Secret scanning hooks for Claude Code and Cursor with zero dependencies.
Author: Claude Secret Scanner Maintainers
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/mintmcp/secrets-scanner
Project-URL: Issues, https://github.com/mintmcp/secrets-scanner/issues
Project-URL: Source, https://github.com/mintmcp/secrets-scanner
Keywords: secrets,security,claude,cursor,hooks
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Security
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# 🔐 Secret Scanner Hooks for Claude Code & Cursor

[![Tests](https://img.shields.io/badge/tests-158%20passing-brightgreen)]() [![Python](https://img.shields.io/badge/python-3.7+-blue)]() [![License](https://img.shields.io/badge/license-Apache%202.0-blue)]()

A secret scanning hook that helps prevent sensitive credentials from being exposed to AI coding assistants. Works with both Claude Code and Cursor, with zero external dependencies.

## 🎯 Features

- **🛡️ Multi-Provider Detection** - Scans for 40+ secret types including AWS, GitHub, OpenAI, Stripe, Slack, and more
- **🔄 Dual Client Support** - Single codebase works with both Claude Code and Cursor
- **⚡ Real-time Protection** - Blocks secrets before file reads, command execution, and prompt submission
- **🧪 Thoroughly Tested** - 158 test cases covering edge cases, false positives, and both client formats
- **📦 Zero Dependencies** - Pure Python 3.7+ with no external packages required
- **🎨 Extensible** - Easy-to-modify regex patterns for custom secret detection

## 🚀 Quick Start

### Install

- Recommended (isolated): `pipx install claude-secret-scan`
- User-level install: `python3 -m pip install --user claude-secret-scan`
- Manual fallback: copy `secrets_scanner_hook.py` into the client config directory (see notes below).

Use `claude-secret-scan` (defaults to Claude Code formatting) and `cursor-secret-scan` to force Cursor formatting.

### Claude Code

1. **Add to `~/.claude/settings.json`:**
   ```json
   {
     "hooks": {
       "UserPromptSubmit": [{
         "hooks": [{
           "type": "command",
           "command": "claude-secret-scan --mode=pre"
         }]
       }],
       "PreToolUse": [{
         "matcher": "Read|read",
         "hooks": [{
           "type": "command",
           "command": "claude-secret-scan --mode=pre"
         }]
       }],
       "PostToolUse": [
         {
           "matcher": "Read|read",
           "hooks": [{
             "type": "command",
             "command": "claude-secret-scan --mode=post"
           }]
         },
         {
           "matcher": "Bash|bash",
           "hooks": [{
             "type": "command",
             "command": "claude-secret-scan --mode=post"
           }]
         }
       ]
     }
   }
   ```

### Cursor

1. **Create `~/.cursor/hooks.json`:**
   ```json
   {
      "version": 1,
      "hooks": {
        "beforeReadFile": [{
         "command": "cursor-secret-scan --mode=pre"
        }],
        "beforeSubmitPrompt": [{
         "command": "cursor-secret-scan --mode=pre"
        }]
      }
   }
   ```

2. **Restart Cursor** and verify hooks are loaded in Settings → Hooks

## 📋 How It Works

### Protection Layers

| Hook Event | When | Action | Client Support |
|------------|------|--------|----------------|
| **PreToolUse** / **beforeReadFile** | Before reading files | ❌ **Blocks** file access if secrets detected | Both |
| **UserPromptSubmit** / **beforeSubmitPrompt** | Before sending prompts | ❌ **Blocks** submission if secrets in prompt | Both |
| **PostToolUse** | After tool execution | ⚠️ **Warns** if secrets in output (cannot block) | Claude Code only |

### Detected Secret Types

**Cloud Providers (6 types)**
- AWS Access Keys (AKIA, ASIA, AIDA, AROA, etc.)
- AWS Secret Access Keys
- Google API Keys (AIza...)
- Google OAuth Tokens (ya29...)
- GCP Service Accounts
- Azure Storage Connection Strings & SAS Tokens

**Version Control (4 types)**
- GitHub Personal Access Tokens (ghp_, gho_, ghs_, ghu_, ghr_)
- GitHub Fine-Grained PATs
- GitLab Personal Access Tokens
- Bitbucket App Passwords

**Communication & Collaboration (4 types)**
- Slack Tokens (xoxb, xoxp, xoxe, etc.)
- Slack Webhooks
- Discord Bot Tokens & Webhooks
- Telegram Bot Tokens

**AI & ML Providers (2 types)**
- OpenAI API Keys (sk-, sk-proj-)
- Databricks Personal Access Tokens

**Payment & E-commerce (6 types)**
- Stripe Secret Keys (live & test)
- Stripe Publishable Keys
- Square Access Tokens
- Shopify Tokens

**Other Services (18+ types)**
- Twilio Account SIDs & Auth Tokens
- SendGrid API Keys
- npm Tokens
- PyPI Tokens
- JWT Tokens
- Private Keys (PEM, OpenSSH, PGP)
- And many more...

[**See full pattern list →**](secrets_scanner_hook.py#L75-L160)

## 🧪 Testing

Run the comprehensive test suite to verify detection:

```bash
# Run all tests (both client types, all scenarios)
python3 read_hook_test.py --suite all

# Quick provider coverage test
python3 read_hook_test.py --suite basic

# Extended edge cases & formatting tests
python3 read_hook_test.py --suite extended
```

### Test Coverage

- ✅ **158 test cases** covering both Claude Code and Cursor formats
- ✅ **40+ secret providers** with positive & negative cases
- ✅ **Edge cases**: whitespace, quotes, URLs, comments, multi-line, base64
- ✅ **False positive prevention**: short strings, prefixes only, similar patterns

### Manual Testing

Test specific scenarios:

```bash
# Test file read with secrets
echo '{"tool_input": {"file_path": "./test-env.txt"}}' | \
  python3 secrets_scanner_hook.py --mode=pre --client=claude_code

# Test Cursor format
echo '{"hook_event_name": "beforeReadFile", "file_path": "./test.env", "content": "OPENAI_API_KEY=sk-test"}' | \
  python3 secrets_scanner_hook.py --mode=pre --client=cursor

# Test command output scanning
echo '{"tool_result": "AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE"}' | \
  python3 secrets_scanner_hook.py --mode=post --client=claude_code
```

## 🔧 Configuration

### File Size Limits

Files are scanned up to **5MB**. Binary files are automatically skipped.

```python
MAX_SCAN_BYTES = 5 * 1024 * 1024  # Adjust in secrets_scanner_hook.py
```

### Custom Patterns

Add new secret patterns to the `PATTERNS` dict in `secrets_scanner_hook.py`:

```python
PATTERNS = {
    # ... existing patterns ...

    "My Custom API Key": re.compile(r"\bmy_api_[A-Za-z0-9]{32}\b"),
}
```

**After adding patterns, run tests:**
```bash
python3 read_hook_test.py --suite extended
```

### Manual Installation

If you prefer not to use `pip` or `pipx`, copy `secrets_scanner_hook.py` into the appropriate client directory and update the JSON examples above to point to `python3 ~/.claude/secrets_scanner_hook.py ...` (Claude Code) or `python3 ~/.cursor/secrets_scanner_hook.py ...` (Cursor).

### Tool Matchers (Claude Code)

Customize which tools trigger scanning by updating matchers in `settings.json`:

```json
{
  "PostToolUse": [{
    "matcher": "Read|Edit|Write|Bash",  // Add more tool names
    "hooks": [...]
  }]
}
```

## 📁 Project Structure

```
.
├── secrets_scanner_hook.py   # Main hook script (works with both clients)
├── settings.json              # Claude Code hook configuration
├── hooks.json                 # Cursor hook configuration
├── pyproject.toml             # Packaging metadata for PyPI
├── read_hook_test.py          # Comprehensive test suite
├── test-env.txt               # Test file with sample secrets
└── README.md                  # This file
```

## ⚠️ Important Notes

### Security Considerations

- **🚨 Regex Limitations**: Pattern matching has false positives and negatives. Use as a guardrail, not absolute protection.
- **🔄 Rotate Exposed Secrets**: If secrets are detected, rotate them immediately.
- **📦 Use Secret Managers**: Store credentials in AWS Secrets Manager, HashiCorp Vault, etc.
- **👁️ Post-Tool Warnings Only**: `PostToolUse` hooks can only warn (tool already executed).

### Performance

- Binary files and files >5MB are skipped automatically
- Regex scanning is optimized for speed
- Minimal overhead on hook execution (<100ms for most files)

### Compatibility

- **Python**: 3.7+ (no external dependencies)
- **Claude Code**: Latest version with hooks support
- **Cursor**: Hook system enabled

## 🚢 Publishing

1. Bump the version in both `pyproject.toml` and `secrets_scanner_hook.py` (`__version__`).
2. Run the test suites: `python3 read_hook_test.py --suite all`.
3. Build artifacts: `python3 -m pip install --upgrade build twine` then `python3 -m build`.
4. Verify packages: `python3 -m twine check dist/*` and optionally `pipx install --spec dist/claude_secret_scan-<version>-py3-none-any.whl --suffix test`.
5. Upload to PyPI: `python3 -m twine upload dist/*` (or push a `vX.Y.Z` tag to trigger the GitHub Actions publish job after storing `PYPI_API_TOKEN` in repo secrets).
6. Tag the release and attach the wheel/sdist to the GitHub release for checksum verification (`shasum -a 256 dist/*`).

## 🤝 Contributing

Contributions welcome! To add new secret patterns:

1. Add regex to `PATTERNS` dict in `secrets_scanner_hook.py`
2. Add test cases to `read_hook_test.py`
3. Run full test suite: `python3 read_hook_test.py --suite all`
4. Submit PR with pattern justification

## 📝 License

Apache License 2.0 - see LICENSE file for details

## 🙏 Acknowledgments

Built for safe AI-assisted development with Claude Code and Cursor.
