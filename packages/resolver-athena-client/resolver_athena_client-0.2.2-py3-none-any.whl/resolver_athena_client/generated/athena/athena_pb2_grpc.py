# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from resolver_athena_client.generated.athena import models_pb2 as athena_dot_models__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in athena/athena_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClassifierServiceStub(object):
    """The classifier service definition.
    Provides image classification capabilities with session-based streaming
    and client management functionality.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Classify = channel.stream_stream(
                '/athena.ClassifierService/Classify',
                request_serializer=athena_dot_models__pb2.ClassifyRequest.SerializeToString,
                response_deserializer=athena_dot_models__pb2.ClassifyResponse.FromString,
                _registered_method=True)
        self.ListDeployments = channel.unary_unary(
                '/athena.ClassifierService/ListDeployments',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=athena_dot_models__pb2.ListDeploymentsResponse.FromString,
                _registered_method=True)
        self.ClassifySingle = channel.unary_unary(
                '/athena.ClassifierService/ClassifySingle',
                request_serializer=athena_dot_models__pb2.ClassificationInput.SerializeToString,
                response_deserializer=athena_dot_models__pb2.ClassificationOutput.FromString,
                _registered_method=True)


class ClassifierServiceServicer(object):
    """The classifier service definition.
    Provides image classification capabilities with session-based streaming
    and client management functionality.
    """

    def Classify(self, request_iterator, context):
        """Classify images in a deployment-based streaming context
        Multiple affiliates can join the same deployment to share responses
        Supports bidirectional streaming for real-time classification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDeployments(self, request, context):
        """Retrieves a list of all active deployment IDs
        Returns the active deployment_id values that can be used in Classify requests
        Useful for monitoring and debugging active connections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClassifySingle(self, request, context):
        """Classifies a single image synchronously without deployment context
        Returns classification results immediately in a single request-response cycle
        Unlike the streaming Classify method, this operates independently of deployments
        and does not require session management or deployment coordination

        Use this for:
        - Low-throughput, low-latency classification scenarios
        - Simple one-off image classifications
        - Applications where immediate synchronous responses are preferred over streaming
        - Testing and debugging individual image classifications

        The response will contain either classification results or error information
        No deployment_id coordination is required or supported
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClassifierServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Classify': grpc.stream_stream_rpc_method_handler(
                    servicer.Classify,
                    request_deserializer=athena_dot_models__pb2.ClassifyRequest.FromString,
                    response_serializer=athena_dot_models__pb2.ClassifyResponse.SerializeToString,
            ),
            'ListDeployments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDeployments,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=athena_dot_models__pb2.ListDeploymentsResponse.SerializeToString,
            ),
            'ClassifySingle': grpc.unary_unary_rpc_method_handler(
                    servicer.ClassifySingle,
                    request_deserializer=athena_dot_models__pb2.ClassificationInput.FromString,
                    response_serializer=athena_dot_models__pb2.ClassificationOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'athena.ClassifierService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('athena.ClassifierService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClassifierService(object):
    """The classifier service definition.
    Provides image classification capabilities with session-based streaming
    and client management functionality.
    """

    @staticmethod
    def Classify(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/athena.ClassifierService/Classify',
            athena_dot_models__pb2.ClassifyRequest.SerializeToString,
            athena_dot_models__pb2.ClassifyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDeployments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/athena.ClassifierService/ListDeployments',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            athena_dot_models__pb2.ListDeploymentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClassifySingle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/athena.ClassifierService/ClassifySingle',
            athena_dot_models__pb2.ClassificationInput.SerializeToString,
            athena_dot_models__pb2.ClassificationOutput.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
