# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.ConnectionMonitor.Messages import ConnectorInformation_pb2 as openobd__protocol_dot_ConnectionMonitor_dot_Messages_dot_ConnectorInformation__pb2
from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2


class connectionMonitorStub(object):
    """
    These services are used to monitor the status of the connection and the connector in the session
    when diagnostic procedures are being carried out. It is to be used as reference data when problems
    arise during procedures due to faults in the internet connection, e.g. high latency or when the connector
    is offline.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getConnectorInformation = channel.unary_unary(
                '/openOBD.v1.connectionMonitor/getConnectorInformation',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_ConnectionMonitor_dot_Messages_dot_ConnectorInformation__pb2.ConnectorInformation.FromString,
                )
        self.openConnectorInformationStream = channel.unary_stream(
                '/openOBD.v1.connectionMonitor/openConnectorInformationStream',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_ConnectionMonitor_dot_Messages_dot_ConnectorInformation__pb2.ConnectorInformation.FromString,
                )


class connectionMonitorServicer(object):
    """
    These services are used to monitor the status of the connection and the connector in the session
    when diagnostic procedures are being carried out. It is to be used as reference data when problems
    arise during procedures due to faults in the internet connection, e.g. high latency or when the connector
    is offline.
    """

    def getConnectorInformation(self, request, context):
        """
        This service retrieves a single value, i.e., information about the connector at the requested time. This gives an idea of
        what the connector status is at the requested moment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openConnectorInformationStream(self, request, context):
        """
        This service retrieves a stream of values; multiple values about connector information. This allows the user to
        monitor the status of the connection and the connector during the diagnostic procedure and helps to find connection faults
        when a procedure may fail.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_connectionMonitorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getConnectorInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.getConnectorInformation,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_ConnectionMonitor_dot_Messages_dot_ConnectorInformation__pb2.ConnectorInformation.SerializeToString,
            ),
            'openConnectorInformationStream': grpc.unary_stream_rpc_method_handler(
                    servicer.openConnectorInformationStream,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_ConnectionMonitor_dot_Messages_dot_ConnectorInformation__pb2.ConnectorInformation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.connectionMonitor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class connectionMonitor(object):
    """
    These services are used to monitor the status of the connection and the connector in the session
    when diagnostic procedures are being carried out. It is to be used as reference data when problems
    arise during procedures due to faults in the internet connection, e.g. high latency or when the connector
    is offline.
    """

    @staticmethod
    def getConnectorInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.connectionMonitor/getConnectorInformation',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_ConnectionMonitor_dot_Messages_dot_ConnectorInformation__pb2.ConnectorInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openConnectorInformationStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openOBD.v1.connectionMonitor/openConnectorInformationStream',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_ConnectionMonitor_dot_Messages_dot_ConnectorInformation__pb2.ConnectorInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
