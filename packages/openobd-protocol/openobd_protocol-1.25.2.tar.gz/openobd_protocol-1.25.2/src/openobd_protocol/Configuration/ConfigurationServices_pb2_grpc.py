# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Configuration.Messages import BusConfiguration_pb2 as openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2
from openobd_protocol.Configuration.Messages import Configuration_pb2 as openobd__protocol_dot_Configuration_dot_Messages_dot_Configuration__pb2
from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2


class configStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.configureBus = channel.stream_unary(
                '/openOBD.v1.config/configureBus',
                request_serializer=openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2.BusConfiguration.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getConfiguration = channel.unary_unary(
                '/openOBD.v1.config/getConfiguration',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Configuration_dot_Messages_dot_Configuration__pb2.Configuration.FromString,
                )


class configServicer(object):
    """Missing associated documentation comment in .proto file."""

    def configureBus(self, request_iterator, context):
        """
        The `configureBus` rpc service opens an outgoing stream where `BusConfiguration` messages can be send. Depending on the hardware version
        up to four busses may be configured at a time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getConfiguration(self, request, context):
        """
        The `getConfiguration()` call will send all configured busses and channels in the openOBD session. Initially there will be no
        configurations present. But when a session has been initialized by another process, it is possible to obtain the current active configuration.
        This is useful when for some reason the gRPC connection is dropped and communication needs to be build up again with the openOBD session.
        <br/>
        Another use case is when one specialized function sets up the communication with a specific module, unlocks it, and then hands over the communication control to another function.
        The second process can then proceed coding once it received the configuration using this command.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_configServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'configureBus': grpc.stream_unary_rpc_method_handler(
                    servicer.configureBus,
                    request_deserializer=openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2.BusConfiguration.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.getConfiguration,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Configuration_dot_Messages_dot_Configuration__pb2.Configuration.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.config', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class config(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def configureBus(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/openOBD.v1.config/configureBus',
            openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2.BusConfiguration.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.config/getConfiguration',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Configuration_dot_Messages_dot_Configuration__pb2.Configuration.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
