# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Function.Messages import Function_pb2 as openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2
from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2


class functionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startFunctionContext = channel.unary_unary(
                '/openOBD.v1.function/startFunctionContext',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.FromString,
                )
        self.monitorFunctionContext = channel.unary_stream(
                '/openOBD.v1.function/monitorFunctionContext',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.SerializeToString,
                response_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.FromString,
                )
        self.registerFunctionDetails = channel.unary_unary(
                '/openOBD.v1.function/registerFunctionDetails',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionDetails.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getFunctionDetails = channel.unary_unary(
                '/openOBD.v1.function/getFunctionDetails',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionDetails.FromString,
                )
        self.setFunctionArgument = channel.unary_unary(
                '/openOBD.v1.function/setFunctionArgument',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getFunctionArgumentList = channel.unary_unary(
                '/openOBD.v1.function/getFunctionArgumentList',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.FromString,
                )
        self.setFunctionResult = channel.unary_unary(
                '/openOBD.v1.function/setFunctionResult',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getFunctionResultList = channel.unary_unary(
                '/openOBD.v1.function/getFunctionResultList',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.FromString,
                )
        self.getVariableList = channel.unary_unary(
                '/openOBD.v1.function/getVariableList',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableSelection.SerializeToString,
                response_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.FromString,
                )
        self.setVariable = channel.unary_unary(
                '/openOBD.v1.function/setVariable',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )
        self.getVariable = channel.unary_unary(
                '/openOBD.v1.function/getVariable',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.FromString,
                )
        self.deleteVariable = channel.unary_unary(
                '/openOBD.v1.function/deleteVariable',
                request_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )


class functionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def startFunctionContext(self, request, context):
        """
        The `startFunctionContext()` rpc call can be used to prepare the handover of an openOBD session to another service that may perform
        a diagnostic function.

        This function is executed within its own function context. The `FunctionCall` message contains the definition of the function id that
        will be executed. It will also get its own function instance id that is unique identifier that can be used to address this specific function execution.

        This rpc call can *only* be made within an openOBD session that is in the 'available' state. It is not possible to create a context on an openOBD session when it is in the 'active' state.
        The 'active' state needs to be released first using the `finish()` rpc call.

        !!! note

        The `startFunctionContext()` call is not required, i.e. it is possible to run operations that are not in the context of a an (external) function

        A successful call to this `startFunctionContext()` rpc will yield a monitor token (contained in FunctionContext message). This monitor token is exclusively used for calls to the `monitorFunctionContext()` service.
        This allows for monitoring the freshly created function context and informs the listener when the function context is being finished.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def monitorFunctionContext(self, request, context):
        """
        This function can be used to monitor the execution of a procedure in a function context. This procedure might be running on another host.

        A monitor token must be sent as bearer token in the header with every request. This monitor token is retrieved by the `startFunctionContext()` call.
        The incoming stream will provide the caller with regular updates on the state of the openOBD session.
        An update will contain (comparable to the `openSessionTokenStream()` rpc) a fresh monitor token. The caller needs to regularly
        update its monitor token for the `monitorFunctionContext()` function call. In case the connection is lost, a recent monitor token needs to be used to reconnect.

        A function context can be closed by calling the `finish()` rpc. The `finish()` call can only be made by the process that is authenticated to (i.e. activated) the openOBD session.
        The last FunctionContext received over the `monitorFunctionContext()` incoming stream will contain a fresh authentication token that can be used to resume operation on the openOBD session by the calling procedure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerFunctionDetails(self, request, context):
        """
        The `registerFunctionDetails()` call links the function details (like function id, name etc.) to the current function context. The function broker uses this information for correct administration of which functions are being called.
        When this call is repeated within the same function context it will:

        - Succeed when it uses the same function id
        - Fail when it uses a different function id

        The function broker ensures that the function id that is requested by a client matches the function id that is registered in the function context.
        If the function broker fails to successfully call the `registerFunctionDetails()` method, this will result in a failing function call.

        In the case that no function details have been registered yet, the first call to `registerFunctionDetails()` registers the function details like the id, name and description. This will always be successful.

        When the `authenticate()` call is made without first calling the `registerFunctionDetails()` method, then the registered function id will be set to match the uniquely created function context id.

        !!! note

        This function registers function details like name, description, version. It is however **NOT** required to initialize the function details before a `runFunction()` call.
        In the end, the function broker will always make the `registerFunctionDetails()` call before actually passing a function call to the function launcher.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFunctionDetails(self, request, context):
        """
        The `getFunctionDetails()` call retrieves the details of the active function in the current context. Values might be empty when no function details have been registered yet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFunctionArgument(self, request, context):
        """
        Set Function arguments for the newly created context
        The header bearer token identifies which session context the argument should be placed into
        This function can only be called as long as the target context did not authenticate() yet (is not in 'active' state)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFunctionArgumentList(self, request, context):
        """
        Get Function arguments set for the current context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFunctionResult(self, request, context):
        """
        Set Function results and store them in the current context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFunctionResultList(self, request, context):
        """
        Obtain Function results set by the calling context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVariableList(self, request, context):
        """
        Obtain the variables that were set by a particular session context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setVariable(self, request, context):
        """
        The `setVariable()` sets a Variable in the function context, session context.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVariable(self, request, context):
        """
        The `getVariable()` call retrieves a Variable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteVariable(self, request, context):
        """
        The `deleteVariable()` call can only be made on the current context or the global context.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_functionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startFunctionContext': grpc.unary_unary_rpc_method_handler(
                    servicer.startFunctionContext,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.SerializeToString,
            ),
            'monitorFunctionContext': grpc.unary_stream_rpc_method_handler(
                    servicer.monitorFunctionContext,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.FromString,
                    response_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.SerializeToString,
            ),
            'registerFunctionDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.registerFunctionDetails,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionDetails.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getFunctionDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.getFunctionDetails,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionDetails.SerializeToString,
            ),
            'setFunctionArgument': grpc.unary_unary_rpc_method_handler(
                    servicer.setFunctionArgument,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getFunctionArgumentList': grpc.unary_unary_rpc_method_handler(
                    servicer.getFunctionArgumentList,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.SerializeToString,
            ),
            'setFunctionResult': grpc.unary_unary_rpc_method_handler(
                    servicer.setFunctionResult,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getFunctionResultList': grpc.unary_unary_rpc_method_handler(
                    servicer.getFunctionResultList,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.SerializeToString,
            ),
            'getVariableList': grpc.unary_unary_rpc_method_handler(
                    servicer.getVariableList,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableSelection.FromString,
                    response_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.SerializeToString,
            ),
            'setVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.setVariable,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
            'getVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.getVariable,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
            ),
            'deleteVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteVariable,
                    request_deserializer=openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.function', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class function(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def startFunctionContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/startFunctionContext',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def monitorFunctionContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openOBD.v1.function/monitorFunctionContext',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.SerializeToString,
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionContext.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerFunctionDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/registerFunctionDetails',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionDetails.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFunctionDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/getFunctionDetails',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.FunctionDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFunctionArgument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/setFunctionArgument',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFunctionArgumentList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/getFunctionArgumentList',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFunctionResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/setFunctionResult',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFunctionResultList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/getFunctionResultList',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVariableList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/getVariableList',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableSelection.SerializeToString,
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.VariableList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/setVariable',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/getVariable',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.function/deleteVariable',
            openobd__protocol_dot_Function_dot_Messages_dot_Function__pb2.Variable.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
