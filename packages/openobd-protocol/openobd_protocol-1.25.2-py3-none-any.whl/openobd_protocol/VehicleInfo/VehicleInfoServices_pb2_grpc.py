# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2
from openobd_protocol.VehicleInfo.Messages import VehicleInfo_pb2 as openobd__protocol_dot_VehicleInfo_dot_Messages_dot_VehicleInfo__pb2


class vehicleInfoStub(object):
    """
    These services are used to retrieve information about the vehicle.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getEcuList = channel.unary_unary(
                '/openOBD.v1.vehicleInfo/getEcuList',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_VehicleInfo_dot_Messages_dot_VehicleInfo__pb2.EcuList.FromString,
                )


class vehicleInfoServicer(object):
    """
    These services are used to retrieve information about the vehicle.
    """

    def getEcuList(self, request, context):
        """
        This service returns a list of ECUs that have been found by the remote to be present in the vehicle.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_vehicleInfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getEcuList': grpc.unary_unary_rpc_method_handler(
                    servicer.getEcuList,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_VehicleInfo_dot_Messages_dot_VehicleInfo__pb2.EcuList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.vehicleInfo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class vehicleInfo(object):
    """
    These services are used to retrieve information about the vehicle.
    """

    @staticmethod
    def getEcuList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openOBD.v1.vehicleInfo/getEcuList',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_VehicleInfo_dot_Messages_dot_VehicleInfo__pb2.EcuList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
