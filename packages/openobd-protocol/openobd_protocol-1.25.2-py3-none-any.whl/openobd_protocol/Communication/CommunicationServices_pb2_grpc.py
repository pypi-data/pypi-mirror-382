# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Communication.Messages import Doip_pb2 as openobd__protocol_dot_Communication_dot_Messages_dot_Doip__pb2
from openobd_protocol.Communication.Messages import Isotp_pb2 as openobd__protocol_dot_Communication_dot_Messages_dot_Isotp__pb2
from openobd_protocol.Communication.Messages import Kline_pb2 as openobd__protocol_dot_Communication_dot_Messages_dot_Kline__pb2
from openobd_protocol.Communication.Messages import Raw_pb2 as openobd__protocol_dot_Communication_dot_Messages_dot_Raw__pb2
from openobd_protocol.Communication.Messages import Terminal15_pb2 as openobd__protocol_dot_Communication_dot_Messages_dot_Terminal15__pb2
from openobd_protocol.Communication.Messages import Tp20_pb2 as openobd__protocol_dot_Communication_dot_Messages_dot_Tp20__pb2
from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2


class canStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.openIsotpStream = channel.stream_stream(
                '/openOBD.v1.can/openIsotpStream',
                request_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Isotp__pb2.IsotpMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Isotp__pb2.IsotpMessage.FromString,
                )
        self.openRawStream = channel.stream_stream(
                '/openOBD.v1.can/openRawStream',
                request_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Raw__pb2.RawFrame.SerializeToString,
                response_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Raw__pb2.RawFrame.FromString,
                )
        self.openTp20Stream = channel.stream_stream(
                '/openOBD.v1.can/openTp20Stream',
                request_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Tp20__pb2.Tp20Message.SerializeToString,
                response_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Tp20__pb2.Tp20Message.FromString,
                )


class canServicer(object):
    """Missing associated documentation comment in .proto file."""

    def openIsotpStream(self, request_iterator, context):
        """
        The `openIsotpStream` RPC service opens a bidirectional stream of *IsotpMessage* messages. It is used in ISO-TP communication where
        the client can rely on openOBD to handle the ISO-TP frames. The client only needs to concern itself with the payload (e.g. UDS) that is being sent and received.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openRawStream(self, request_iterator, context):
        """
        The `openRawStream` RPC service opens a bidirectional stream of *RawFrame* messages. These messages can be used to send and receive raw CAN frames.
        This gives more control over the actual data that is being sent and received on the CAN bus. On the other hand, the client needs to implement more handling, as aspects such as multi-frames are not handled by openOBD.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openTp20Stream(self, request_iterator, context):
        """
        The `openTp20Stream` RPC service opens a bidirectional stream of *Tp20Message* messages. It is used in TP2.0 communication where the client can
        rely on openOBD to handle the data channel management. The client only needs to supply an initial address and any further payloads that will be sent and received
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_canServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'openIsotpStream': grpc.stream_stream_rpc_method_handler(
                    servicer.openIsotpStream,
                    request_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Isotp__pb2.IsotpMessage.FromString,
                    response_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Isotp__pb2.IsotpMessage.SerializeToString,
            ),
            'openRawStream': grpc.stream_stream_rpc_method_handler(
                    servicer.openRawStream,
                    request_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Raw__pb2.RawFrame.FromString,
                    response_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Raw__pb2.RawFrame.SerializeToString,
            ),
            'openTp20Stream': grpc.stream_stream_rpc_method_handler(
                    servicer.openTp20Stream,
                    request_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Tp20__pb2.Tp20Message.FromString,
                    response_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Tp20__pb2.Tp20Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.can', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class can(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def openIsotpStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/openOBD.v1.can/openIsotpStream',
            openobd__protocol_dot_Communication_dot_Messages_dot_Isotp__pb2.IsotpMessage.SerializeToString,
            openobd__protocol_dot_Communication_dot_Messages_dot_Isotp__pb2.IsotpMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openRawStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/openOBD.v1.can/openRawStream',
            openobd__protocol_dot_Communication_dot_Messages_dot_Raw__pb2.RawFrame.SerializeToString,
            openobd__protocol_dot_Communication_dot_Messages_dot_Raw__pb2.RawFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openTp20Stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/openOBD.v1.can/openTp20Stream',
            openobd__protocol_dot_Communication_dot_Messages_dot_Tp20__pb2.Tp20Message.SerializeToString,
            openobd__protocol_dot_Communication_dot_Messages_dot_Tp20__pb2.Tp20Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class klineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.openKlineStream = channel.stream_stream(
                '/openOBD.v1.kline/openKlineStream',
                request_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Kline__pb2.KlineMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Kline__pb2.KlineMessage.FromString,
                )


class klineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def openKlineStream(self, request_iterator, context):
        """
        Opens a bidirectional stream which enables communication with a K-Line ECU.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_klineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'openKlineStream': grpc.stream_stream_rpc_method_handler(
                    servicer.openKlineStream,
                    request_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Kline__pb2.KlineMessage.FromString,
                    response_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Kline__pb2.KlineMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.kline', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class kline(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def openKlineStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/openOBD.v1.kline/openKlineStream',
            openobd__protocol_dot_Communication_dot_Messages_dot_Kline__pb2.KlineMessage.SerializeToString,
            openobd__protocol_dot_Communication_dot_Messages_dot_Kline__pb2.KlineMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class terminal15Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.openTerminal15Stream = channel.unary_stream(
                '/openOBD.v1.terminal15/openTerminal15Stream',
                request_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Terminal15__pb2.Terminal15Message.FromString,
                )


class terminal15Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def openTerminal15Stream(self, request, context):
        """
        Opens a stream that provides information on the ignition status (terminal 15).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_terminal15Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'openTerminal15Stream': grpc.unary_stream_rpc_method_handler(
                    servicer.openTerminal15Stream,
                    request_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                    response_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Terminal15__pb2.Terminal15Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.terminal15', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class terminal15(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def openTerminal15Stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openOBD.v1.terminal15/openTerminal15Stream',
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            openobd__protocol_dot_Communication_dot_Messages_dot_Terminal15__pb2.Terminal15Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class doipStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.openDoipStream = channel.stream_stream(
                '/openOBD.v1.doip/openDoipStream',
                request_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Doip__pb2.DoipMessage.SerializeToString,
                response_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Doip__pb2.DoipMessage.FromString,
                )


class doipServicer(object):
    """Missing associated documentation comment in .proto file."""

    def openDoipStream(self, request_iterator, context):
        """
        Opens a bidirectional stream to communicate with an ECU using DoIP.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_doipServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'openDoipStream': grpc.stream_stream_rpc_method_handler(
                    servicer.openDoipStream,
                    request_deserializer=openobd__protocol_dot_Communication_dot_Messages_dot_Doip__pb2.DoipMessage.FromString,
                    response_serializer=openobd__protocol_dot_Communication_dot_Messages_dot_Doip__pb2.DoipMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.doip', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class doip(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def openDoipStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/openOBD.v1.doip/openDoipStream',
            openobd__protocol_dot_Communication_dot_Messages_dot_Doip__pb2.DoipMessage.SerializeToString,
            openobd__protocol_dot_Communication_dot_Messages_dot_Doip__pb2.DoipMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
