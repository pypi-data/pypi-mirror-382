"""Patched pam_interactive auth module"""
import json
import io
import os.path

from irods.auth import AuthStorage
from irods.auth.pam_interactive import PAM_INTERACTIVE_SCHEME, _pam_interactive_ClientAuthState

def login(conn, **extra_opt):
    """The entry point for the pam_interactive authentication scheme."""

    # The AuthStorage object holds the token generated by the server for the native auth step
    depot = AuthStorage.create_temp_pw_storage(conn)

    auth_client_object = _pam_interactive_ClientAuthState_patched(
        conn, depot, scheme=PAM_INTERACTIVE_SCHEME
    )
    auth_client_object.authenticate_client(
        initial_request=extra_opt
    )

class _pam_interactive_ClientAuthState_patched(_pam_interactive_ClientAuthState): # pylint: disable=invalid-name
    def __init__(self, conn, depot, scheme=PAM_INTERACTIVE_SCHEME):
        super().__init__(conn, depot, scheme)

    def auth_client_start(self, request):
        request = request.copy()

        storage = getattr(self.conn.account, "pstate_storage", None)
        if storage and os.path.isfile(storage) and os.access(storage, os.R_OK):
            with io.open(storage, 'r', encoding='utf-8') as storage:
                request["pstate"] = json.load(storage)

        return super().auth_client_start(request)

    def authenticated(self, request):
        result = super().authenticated(request)

        storage = getattr(self.conn.account, "pstate_storage", None)
        if storage:
            with os.fdopen(
                os.open(storage, os.O_WRONLY | os.O_CREAT, 0o600), 'w', encoding='utf-8'
            ) as storage:
                json.dump(result["pstate"], storage)

        return result
