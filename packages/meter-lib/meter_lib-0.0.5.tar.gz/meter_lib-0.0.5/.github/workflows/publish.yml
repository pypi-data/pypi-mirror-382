name: Publish Python Package

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest (if tests exist)
      run: |
        if [ -d "tests" ] || [ -f "test_*.py" ]; then
          pytest
        else
          echo "No tests found, skipping test step"
        fi

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
        token: ${{ secrets.PAT_TOKEN }}
        ref: main
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Extract version from release
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          echo "Version from release: $VERSION"
        else
          # For manual workflow dispatch, use latest tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          echo "Version from git tag: $VERSION"
        fi
        # Remove 'v' prefix if present
        VERSION=$(echo "$VERSION" | sed 's/^v//')
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Clean version: $VERSION"
    
    - name: Update version in setup.py and pyproject.toml
      run: |
        echo "Updating versions to: ${{ env.PACKAGE_VERSION }}"
        
        # Update setup.py version
        sed -i 's/version="[^"]*"/version="${{ env.PACKAGE_VERSION }}"/' setup.py
        
        # Update pyproject.toml version
        sed -i 's/version = "[^"]*"/version = "${{ env.PACKAGE_VERSION }}"/' pyproject.toml
        
        # Verify the changes
        echo "Updated setup.py version line:"
        grep 'version=' setup.py
        echo "Updated pyproject.toml version line:"
        grep 'version =' pyproject.toml
    
    - name: Commit version update to main branch
      if: github.event_name == 'release'
      run: |
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Configure git to use the PAT token
        # git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Check if there are changes to commit
        if git diff --quiet setup.py pyproject.toml; then
          echo "No changes to version files, skipping commit"
        else
          echo "Committing version update to main branch"
          git add setup.py pyproject.toml
          git commit -m "chore: update version to ${{ env.PACKAGE_VERSION }} [skip ci]"
          
          # Push to main branch
          git push origin HEAD:main
          echo "Successfully pushed version update to main branch"
        fi
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Display version info
      run: |
        echo "Building package with version: ${{ env.PACKAGE_VERSION }}"
        python setup.py --version
    
    - name: Build package
      run: python -m build
    
    - name: Check built package
      run: twine check dist/*
    
    - name: Publish to Test PyPI
      if: github.event_name == 'workflow_dispatch'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
    
    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Checking if PYPI_API_TOKEN is set..."
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "ERROR: PYPI_API_TOKEN secret is not set!"
          exit 1
        else
          echo "PYPI_API_TOKEN is set (length: ${#TWINE_PASSWORD})"
        fi
        
        echo "Uploading to PyPI..."
        twine upload dist/* --verbose 