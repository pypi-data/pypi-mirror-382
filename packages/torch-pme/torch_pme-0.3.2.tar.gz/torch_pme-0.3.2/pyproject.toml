[build-system]
requires = ["setuptools >= 77", "setuptools_scm>=8", "wheel"]
build-backend = "setuptools.build_meta"

[project]
authors = [{name = "torch-pme developers"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["torch >=2.3"]
description = "Particle-mesh based calculations of long-range interactions in PyTorch"
dynamic = ["version"]
keywords = [
    "Auto-differentiation",
    "Computational Materials Science",
    "Electrostatics",
    "Fourier Transform",
    "GPU Acceleration",
    "High-Performance Computing",
    "Machine Learning",
    "Molecular Dynamics",
    "Particle-Mesh Ewald",
    "PyTorch",
    "Scientific Computing",
    "TorchScript",
]
license = "BSD-3-Clause"
name = "torch-pme"
readme = "README.rst"
requires-python = ">=3.9"

[project.optional-dependencies]
examples = [
    "ase >= 3.22.1",
    "chemiscope",
    "matplotlib",
    "metatensor-operations",
    "scipy",
    "vesin >= 0.3.0",
    "vesin-torch >= 0.3.0",
]
metatensor = ["metatensor-torch <0.8,>=0.7", "metatomic-torch"]

[project.urls]
homepage = "https://lab-cosmo.github.io/torch-pme"
documentation = "https://lab-cosmo.github.io/torch-pme"
repository = "https://github.com/lab-cosmo/torch-pme"
issues = "https://github.com/lab-cosmo/torch-pme/issues"
changelog = "https://lab-cosmo.github.io/torch-pme/latest/references/changelog.html"

[tool.check-manifest]
ignore = ["src/torchpme/_version.py"]

[tool.coverage.report]
show_missing = true
include = ["src/torchpme/*"]

[tool.coverage.run]
branch = true
data_file = 'tests/.coverage'

[tool.coverage.xml]
output = 'tests/coverage.xml'

[tool.mypy]
exclude = ["docs/src/examples"]
follow_imports = 'skip'
ignore_missing_imports = true

[tool.pytest.ini_options]
python_files = ["*.py"]
testpaths = ["tests"]
addopts = [
    "--cov",
    "--cov-append",
    "--cov-report=",
    "--import-mode=append",
]
filterwarnings = [
    "error",
    "ignore:ast.Str is deprecated and will be removed in Python 3.14:DeprecationWarning",
    "ignore:Attribute s is deprecated and will be removed in Python 3.14:DeprecationWarning",
    "ignore:ast.NameConstant is deprecated and will be removed in Python 3.14:DeprecationWarning",
    "ignore:custom data 'charges' is experimental, please contact metatensor's developers to add this data as a member of the `System` class:UserWarning",
]

[tool.ruff]
exclude = ["docs/src/examples/**", "src/torchpme/_version.py"]
line-length = 88

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules for additional details
extend-select = [
    "B",  # Pyflakes checks (e.g., unused imports, undefined variables)
    "D",  # PEP 257 docstring conventions (e.g., formatting, consistency)
    "E",  # Pycodestyle errors (e.g., indentation, whitespace, syntax)
    "UP",  # PyUpgrade rules (e.g., upgrading to modern Python syntax)
    "I",  # Import conventions (e.g., sorting imports, duplicate imports)
    "SIM",  # Simplification suggestions (e.g., refactoring redundant code)
    "PT",  # Pytest style rules (e.g., avoiding assert in tests)
    "RET",  # Return statements consistency (e.g., avoiding multiple return paths)
    "W",  # Warnings about style (e.g., trailing whitespace, blank lines)
    "Q",  # Quotes consistency (e.g., single vs. double quotes)
]

ignore = [
    "D100",  # Missing docstring in public module
    "D102",  # Missing docstring in public method
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring
    "D205",  # 1 blank line required between summary line and description
    "D212",  # Multi-line docstring summary should start at the first line
    "D400",  # First line should end with a period
    "D401",  # First line should be in imperative mood
    "D403",  # First word of the first line should be capitalized
    "D404",  # First word of the docstring should not be This
    "D412",  # No blank lines allowed between a section header and its content
    "D415",  # First line should end with a period, question mark, or exclamation point
    "D416",  # Section name should end with a colon
    "E501",  # Line too long
]

[tool.ruff.lint.per-file-ignores]
"**/{tests,docs,examples}/*" = ["D1"]  # Don't require any docstrings in these directories

[tool.ruff.lint.isort]
known-first-party = ["torchpme"]

[tool.ruff.format]
docstring-code-format = true

[tool.setuptools_scm]
version_file = "src/torchpme/_version.py"

[tool.setuptools.packages.find]
where = ["src"]
