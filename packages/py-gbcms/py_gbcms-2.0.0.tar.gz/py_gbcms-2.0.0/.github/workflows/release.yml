name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Matches 1.0.0, 2.3.4, etc. (semantic versioning)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: false

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io

jobs:
  release:
    name: Build, Test, and Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for PyPI Trusted Publisher OIDC
      contents: read   # Required for checkout and metadata
      packages: write  # Required for Docker registry access

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper version detection

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv

    - name: Setup and test package
      run: |
        # Create virtual environment and install package in development mode
        uv venv .venv
        source .venv/bin/activate

        # Install the package with all dependencies
        uv pip install -e ".[dev]"

        # Run tests to ensure everything works
        uv run pytest -v

        # Verify package can be imported
        uv run python -c "import gbcms; print(f'gbcms version: {gbcms.__version__}')"

    - name: Build Python package
      run: |
        source .venv/bin/activate
        uv pip install build
        python -m build --sdist --wheel --outdir dist/

    - name: Verify package
      run: |
        source .venv/bin/activate
        uv pip install twine
        twine check dist/*

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
        print-hash: true

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.RS_PAT }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate release notes
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "## 🚀 gbcms v${{ github.ref_name }}" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Changes" >> release_notes.md
        echo "- Published to PyPI" >> release_notes.md
        echo "- Published Docker image to GitHub Container Registry" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# PyPI" >> release_notes.md
        echo "pip install gbcms==${{ github.ref_name }}" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Docker" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Usage" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "gbcms count run --fasta reference.fa --bam sample:sample.bam --vcf variants.vcf --output counts.txt" >> release_notes.md
        echo "\`\`\`" >> release_notes.md

    - name: Show release summary
      run: |
        echo "✅ Release completed successfully!"
        echo "📦 PyPI package: https://pypi.org/project/gbcms/${{ github.ref_name }}/"
        echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }}"
        echo "📋 Package contents:"
        ls -la dist/ || echo "No dist directory found"
