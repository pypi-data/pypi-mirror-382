[project]
name = "py-gbcms"
version = "2.0.0"
description = "Python implementation of GetBaseCountsMultiSample (gbcms) for calculating base counts in BAM files"
authors = [
    {name = "MSK-ACCESS", email = "shahr2@mskcc.org"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "AGPL-3.0"}
keywords = ["bioinformatics", "genomics", "bam", "vcf", "maf", "base-counts", "gbcms"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

dependencies = [
    "pysam>=0.22.0",
    "numpy>=1.24.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pandas>=2.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "numba>=0.58.0",
    "joblib>=1.3.0",
    "scipy>=1.11.0",
]

[project.optional-dependencies]
fast = [
    "cyvcf2>=0.30.0",
]


all = [
    "cyvcf2>=0.30.0",
]

dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "types-pyyaml>=6.0.0",
]

[project.scripts]
gbcms = "gbcms.cli:app"

[project.urls]
Homepage = "https://github.com/msk-access/getbasecounts"
Repository = "https://github.com/msk-access/getbasecounts"
Documentation = "https://github.com/msk-access/getbasecounts#readme"
"Bug Tracker" = "https://github.com/msk-access/getbasecounts/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/gbcms"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=gbcms",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
[[tool.mypy.overrides]]
module = [
    "src.gbcms.models",
]
disable_error_code = ["call-arg"]

[[tool.mypy.overrides]]
module = [
    "pysam.*",
    "numba.*",
    "joblib.*",
    "cyvcf2.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/gbcms"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.9.0",
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=5.1.0",
    "ruff>=0.13.3",
    "scipy-stubs>=1.11.0",
]
