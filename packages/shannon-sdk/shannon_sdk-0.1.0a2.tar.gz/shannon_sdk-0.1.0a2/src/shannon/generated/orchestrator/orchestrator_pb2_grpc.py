# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from shannon.generated.orchestrator import orchestrator_pb2 as orchestrator_dot_orchestrator__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in orchestrator/orchestrator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrchestratorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/SubmitTask',
                request_serializer=orchestrator_dot_orchestrator__pb2.SubmitTaskRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.SubmitTaskResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/GetTaskStatus',
                request_serializer=orchestrator_dot_orchestrator__pb2.GetTaskStatusRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.GetTaskStatusResponse.FromString,
                _registered_method=True)
        self.CancelTask = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/CancelTask',
                request_serializer=orchestrator_dot_orchestrator__pb2.CancelTaskRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.CancelTaskResponse.FromString,
                _registered_method=True)
        self.ListTasks = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/ListTasks',
                request_serializer=orchestrator_dot_orchestrator__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.ListTasksResponse.FromString,
                _registered_method=True)
        self.GetSessionContext = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/GetSessionContext',
                request_serializer=orchestrator_dot_orchestrator__pb2.GetSessionContextRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.GetSessionContextResponse.FromString,
                _registered_method=True)
        self.ListTemplates = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/ListTemplates',
                request_serializer=orchestrator_dot_orchestrator__pb2.ListTemplatesRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.ListTemplatesResponse.FromString,
                _registered_method=True)
        self.ApproveTask = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/ApproveTask',
                request_serializer=orchestrator_dot_orchestrator__pb2.ApproveTaskRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.ApproveTaskResponse.FromString,
                _registered_method=True)
        self.GetPendingApprovals = channel.unary_unary(
                '/shannon.orchestrator.OrchestratorService/GetPendingApprovals',
                request_serializer=orchestrator_dot_orchestrator__pb2.GetPendingApprovalsRequest.SerializeToString,
                response_deserializer=orchestrator_dot_orchestrator__pb2.GetPendingApprovalsResponse.FromString,
                _registered_method=True)


class OrchestratorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSessionContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTemplates(self, request, context):
        """Template catalog
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApproveTask(self, request, context):
        """Human intervention endpoints
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPendingApprovals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.SubmitTaskRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.SubmitTaskResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.GetTaskStatusRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.GetTaskStatusResponse.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.CancelTaskRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.CancelTaskResponse.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.ListTasksRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.ListTasksResponse.SerializeToString,
            ),
            'GetSessionContext': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSessionContext,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.GetSessionContextRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.GetSessionContextResponse.SerializeToString,
            ),
            'ListTemplates': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTemplates,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.ListTemplatesRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.ListTemplatesResponse.SerializeToString,
            ),
            'ApproveTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ApproveTask,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.ApproveTaskRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.ApproveTaskResponse.SerializeToString,
            ),
            'GetPendingApprovals': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPendingApprovals,
                    request_deserializer=orchestrator_dot_orchestrator__pb2.GetPendingApprovalsRequest.FromString,
                    response_serializer=orchestrator_dot_orchestrator__pb2.GetPendingApprovalsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shannon.orchestrator.OrchestratorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('shannon.orchestrator.OrchestratorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrchestratorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/SubmitTask',
            orchestrator_dot_orchestrator__pb2.SubmitTaskRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.SubmitTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/GetTaskStatus',
            orchestrator_dot_orchestrator__pb2.GetTaskStatusRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.GetTaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/CancelTask',
            orchestrator_dot_orchestrator__pb2.CancelTaskRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.CancelTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/ListTasks',
            orchestrator_dot_orchestrator__pb2.ListTasksRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.ListTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSessionContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/GetSessionContext',
            orchestrator_dot_orchestrator__pb2.GetSessionContextRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.GetSessionContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTemplates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/ListTemplates',
            orchestrator_dot_orchestrator__pb2.ListTemplatesRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.ListTemplatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApproveTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/ApproveTask',
            orchestrator_dot_orchestrator__pb2.ApproveTaskRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.ApproveTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPendingApprovals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.orchestrator.OrchestratorService/GetPendingApprovals',
            orchestrator_dot_orchestrator__pb2.GetPendingApprovalsRequest.SerializeToString,
            orchestrator_dot_orchestrator__pb2.GetPendingApprovalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
