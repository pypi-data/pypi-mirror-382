# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from shannon.generated.session import session_pb2 as session_dot_session__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in session/session_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SessionServiceStub(object):
    """Session management service for multi-turn conversations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSession = channel.unary_unary(
                '/shannon.session.SessionService/CreateSession',
                request_serializer=session_dot_session__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=session_dot_session__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.GetSession = channel.unary_unary(
                '/shannon.session.SessionService/GetSession',
                request_serializer=session_dot_session__pb2.GetSessionRequest.SerializeToString,
                response_deserializer=session_dot_session__pb2.GetSessionResponse.FromString,
                _registered_method=True)
        self.UpdateSession = channel.unary_unary(
                '/shannon.session.SessionService/UpdateSession',
                request_serializer=session_dot_session__pb2.UpdateSessionRequest.SerializeToString,
                response_deserializer=session_dot_session__pb2.UpdateSessionResponse.FromString,
                _registered_method=True)
        self.DeleteSession = channel.unary_unary(
                '/shannon.session.SessionService/DeleteSession',
                request_serializer=session_dot_session__pb2.DeleteSessionRequest.SerializeToString,
                response_deserializer=session_dot_session__pb2.DeleteSessionResponse.FromString,
                _registered_method=True)
        self.ListSessions = channel.unary_unary(
                '/shannon.session.SessionService/ListSessions',
                request_serializer=session_dot_session__pb2.ListSessionsRequest.SerializeToString,
                response_deserializer=session_dot_session__pb2.ListSessionsResponse.FromString,
                _registered_method=True)
        self.AddMessage = channel.unary_unary(
                '/shannon.session.SessionService/AddMessage',
                request_serializer=session_dot_session__pb2.AddMessageRequest.SerializeToString,
                response_deserializer=session_dot_session__pb2.AddMessageResponse.FromString,
                _registered_method=True)
        self.ClearHistory = channel.unary_unary(
                '/shannon.session.SessionService/ClearHistory',
                request_serializer=session_dot_session__pb2.ClearHistoryRequest.SerializeToString,
                response_deserializer=session_dot_session__pb2.ClearHistoryResponse.FromString,
                _registered_method=True)


class SessionServiceServicer(object):
    """Session management service for multi-turn conversations
    """

    def CreateSession(self, request, context):
        """Create a new session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSession(self, request, context):
        """Get session details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSession(self, request, context):
        """Update session context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSession(self, request, context):
        """Delete a session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSessions(self, request, context):
        """List user sessions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMessage(self, request, context):
        """Add message to session history
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearHistory(self, request, context):
        """Clear session history
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SessionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=session_dot_session__pb2.CreateSessionRequest.FromString,
                    response_serializer=session_dot_session__pb2.CreateSessionResponse.SerializeToString,
            ),
            'GetSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSession,
                    request_deserializer=session_dot_session__pb2.GetSessionRequest.FromString,
                    response_serializer=session_dot_session__pb2.GetSessionResponse.SerializeToString,
            ),
            'UpdateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSession,
                    request_deserializer=session_dot_session__pb2.UpdateSessionRequest.FromString,
                    response_serializer=session_dot_session__pb2.UpdateSessionResponse.SerializeToString,
            ),
            'DeleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSession,
                    request_deserializer=session_dot_session__pb2.DeleteSessionRequest.FromString,
                    response_serializer=session_dot_session__pb2.DeleteSessionResponse.SerializeToString,
            ),
            'ListSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSessions,
                    request_deserializer=session_dot_session__pb2.ListSessionsRequest.FromString,
                    response_serializer=session_dot_session__pb2.ListSessionsResponse.SerializeToString,
            ),
            'AddMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMessage,
                    request_deserializer=session_dot_session__pb2.AddMessageRequest.FromString,
                    response_serializer=session_dot_session__pb2.AddMessageResponse.SerializeToString,
            ),
            'ClearHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearHistory,
                    request_deserializer=session_dot_session__pb2.ClearHistoryRequest.FromString,
                    response_serializer=session_dot_session__pb2.ClearHistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shannon.session.SessionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('shannon.session.SessionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SessionService(object):
    """Session management service for multi-turn conversations
    """

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.session.SessionService/CreateSession',
            session_dot_session__pb2.CreateSessionRequest.SerializeToString,
            session_dot_session__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.session.SessionService/GetSession',
            session_dot_session__pb2.GetSessionRequest.SerializeToString,
            session_dot_session__pb2.GetSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.session.SessionService/UpdateSession',
            session_dot_session__pb2.UpdateSessionRequest.SerializeToString,
            session_dot_session__pb2.UpdateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.session.SessionService/DeleteSession',
            session_dot_session__pb2.DeleteSessionRequest.SerializeToString,
            session_dot_session__pb2.DeleteSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.session.SessionService/ListSessions',
            session_dot_session__pb2.ListSessionsRequest.SerializeToString,
            session_dot_session__pb2.ListSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.session.SessionService/AddMessage',
            session_dot_session__pb2.AddMessageRequest.SerializeToString,
            session_dot_session__pb2.AddMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/shannon.session.SessionService/ClearHistory',
            session_dot_session__pb2.ClearHistoryRequest.SerializeToString,
            session_dot_session__pb2.ClearHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
