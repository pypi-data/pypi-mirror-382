# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FileSourceRaw',
]

@pulumi.output_type
class FileSourceRaw(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileData":
            suggest = "file_data"
        elif key == "fileName":
            suggest = "file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSourceRaw. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSourceRaw.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSourceRaw.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_data: _builtins.str,
                 file_name: _builtins.str):
        """
        :param _builtins.str file_data: The raw data in []byte
        :param _builtins.str file_name: The name of the file
        """
        pulumi.set(__self__, "file_data", file_data)
        pulumi.set(__self__, "file_name", file_name)

    @_builtins.property
    @pulumi.getter(name="fileData")
    def file_data(self) -> _builtins.str:
        """
        The raw data in []byte
        """
        return pulumi.get(self, "file_data")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        The name of the file
        """
        return pulumi.get(self, "file_name")


