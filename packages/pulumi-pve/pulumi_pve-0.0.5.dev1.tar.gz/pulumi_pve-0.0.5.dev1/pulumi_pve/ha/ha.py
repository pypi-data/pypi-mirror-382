# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['HaArgs', 'Ha']

@pulumi.input_type
class HaArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.int],
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Ha resource.
        :param pulumi.Input[_builtins.int] resource_id: The ID of the virtual machine that will be managed by HA (required).
        :param pulumi.Input[_builtins.str] group: The HA group identifier.
        :param pulumi.Input[_builtins.str] state: The state of the HA resource (default: started).
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if state is None:
            state = 'started'
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.int]:
        """
        The ID of the virtual machine that will be managed by HA (required).
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HA group identifier.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the HA resource (default: started).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


@pulumi.type_token("pve:ha:Ha")
class Ha(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.int]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        A Proxmox HA resource that manages the HA configuration of a virtual machine in the Proxmox VE.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] group: The HA group identifier.
        :param pulumi.Input[_builtins.int] resource_id: The ID of the virtual machine that will be managed by HA (required).
        :param pulumi.Input[_builtins.str] state: The state of the HA resource (default: started).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Proxmox HA resource that manages the HA configuration of a virtual machine in the Proxmox VE.

        :param str resource_name: The name of the resource.
        :param HaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.int]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HaArgs.__new__(HaArgs)

            __props__.__dict__["group"] = group
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if state is None:
                state = 'started'
            __props__.__dict__["state"] = state
        super(Ha, __self__).__init__(
            'pve:ha:Ha',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Ha':
        """
        Get an existing Ha resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = HaArgs.__new__(HaArgs)

        __props__.__dict__["group"] = None
        __props__.__dict__["resource_id"] = None
        __props__.__dict__["state"] = None
        return Ha(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The HA group identifier.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.int]:
        """
        The ID of the virtual machine that will be managed by HA (required).
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The state of the HA resource (default: started).
        """
        return pulumi.get(self, "state")

