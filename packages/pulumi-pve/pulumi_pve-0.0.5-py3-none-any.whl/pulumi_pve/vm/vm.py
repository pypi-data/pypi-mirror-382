# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VMArgs', 'VM']

@pulumi.input_type
class VMArgs:
    def __init__(__self__, *,
                 disks: pulumi.Input[Sequence[pulumi.Input['DiskArgs']]],
                 name: pulumi.Input[_builtins.str],
                 acpi: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 agent: Optional[pulumi.Input[_builtins.str]] = None,
                 audio0: Optional[pulumi.Input[_builtins.str]] = None,
                 autostart: Optional[pulumi.Input[_builtins.int]] = None,
                 balloon: Optional[pulumi.Input[_builtins.int]] = None,
                 bios: Optional[pulumi.Input[_builtins.str]] = None,
                 boot: Optional[pulumi.Input[_builtins.str]] = None,
                 cicustom: Optional[pulumi.Input[_builtins.str]] = None,
                 cipassword: Optional[pulumi.Input[_builtins.str]] = None,
                 citype: Optional[pulumi.Input[_builtins.str]] = None,
                 ciupgrade: Optional[pulumi.Input[_builtins.int]] = None,
                 ciuser: Optional[pulumi.Input[_builtins.str]] = None,
                 clone: Optional[pulumi.Input['CloneArgs']] = None,
                 cores: Optional[pulumi.Input[_builtins.int]] = None,
                 cpu: Optional[pulumi.Input[_builtins.str]] = None,
                 cpulimit: Optional[pulumi.Input[_builtins.str]] = None,
                 cpuunits: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 digest: Optional[pulumi.Input[_builtins.str]] = None,
                 efidisk0: Optional[pulumi.Input[_builtins.str]] = None,
                 hookscript: Optional[pulumi.Input[_builtins.str]] = None,
                 hostpci0: Optional[pulumi.Input[_builtins.str]] = None,
                 hotplug: Optional[pulumi.Input[_builtins.str]] = None,
                 hugepages: Optional[pulumi.Input[_builtins.str]] = None,
                 ipconfig0: Optional[pulumi.Input[_builtins.str]] = None,
                 kvm: Optional[pulumi.Input[_builtins.int]] = None,
                 lock: Optional[pulumi.Input[_builtins.str]] = None,
                 machine: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[_builtins.int]] = None,
                 nameserver: Optional[pulumi.Input[_builtins.str]] = None,
                 net0: Optional[pulumi.Input[_builtins.str]] = None,
                 node: Optional[pulumi.Input[_builtins.str]] = None,
                 numa: Optional[pulumi.Input[_builtins.int]] = None,
                 numa0: Optional[pulumi.Input[_builtins.str]] = None,
                 onboot: Optional[pulumi.Input[_builtins.int]] = None,
                 ostype: Optional[pulumi.Input[_builtins.str]] = None,
                 parallel0: Optional[pulumi.Input[_builtins.str]] = None,
                 protection: Optional[pulumi.Input[_builtins.int]] = None,
                 rng0: Optional[pulumi.Input[_builtins.str]] = None,
                 scsihw: Optional[pulumi.Input[_builtins.str]] = None,
                 searchdomain: Optional[pulumi.Input[_builtins.str]] = None,
                 serial0: Optional[pulumi.Input[_builtins.str]] = None,
                 smbios1: Optional[pulumi.Input[_builtins.str]] = None,
                 sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 sshkeys: Optional[pulumi.Input[_builtins.str]] = None,
                 tablet: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input[_builtins.int]] = None,
                 tpmstate0: Optional[pulumi.Input[_builtins.str]] = None,
                 usb0: Optional[pulumi.Input[_builtins.str]] = None,
                 vcpus: Optional[pulumi.Input[_builtins.int]] = None,
                 vga: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a VM resource.
        """
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "name", name)
        if acpi is not None:
            pulumi.set(__self__, "acpi", acpi)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if audio0 is not None:
            pulumi.set(__self__, "audio0", audio0)
        if autostart is not None:
            pulumi.set(__self__, "autostart", autostart)
        if balloon is not None:
            pulumi.set(__self__, "balloon", balloon)
        if bios is not None:
            pulumi.set(__self__, "bios", bios)
        if boot is not None:
            pulumi.set(__self__, "boot", boot)
        if cicustom is not None:
            pulumi.set(__self__, "cicustom", cicustom)
        if cipassword is not None:
            pulumi.set(__self__, "cipassword", cipassword)
        if citype is not None:
            pulumi.set(__self__, "citype", citype)
        if ciupgrade is not None:
            pulumi.set(__self__, "ciupgrade", ciupgrade)
        if ciuser is not None:
            pulumi.set(__self__, "ciuser", ciuser)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if cores is None:
            cores = 1
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cpulimit is not None:
            pulumi.set(__self__, "cpulimit", cpulimit)
        if cpuunits is not None:
            pulumi.set(__self__, "cpuunits", cpuunits)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if efidisk0 is not None:
            pulumi.set(__self__, "efidisk0", efidisk0)
        if hookscript is not None:
            pulumi.set(__self__, "hookscript", hookscript)
        if hostpci0 is not None:
            pulumi.set(__self__, "hostpci0", hostpci0)
        if hotplug is not None:
            pulumi.set(__self__, "hotplug", hotplug)
        if hugepages is not None:
            pulumi.set(__self__, "hugepages", hugepages)
        if ipconfig0 is not None:
            pulumi.set(__self__, "ipconfig0", ipconfig0)
        if kvm is not None:
            pulumi.set(__self__, "kvm", kvm)
        if lock is not None:
            pulumi.set(__self__, "lock", lock)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if net0 is not None:
            pulumi.set(__self__, "net0", net0)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if numa is not None:
            pulumi.set(__self__, "numa", numa)
        if numa0 is not None:
            pulumi.set(__self__, "numa0", numa0)
        if onboot is not None:
            pulumi.set(__self__, "onboot", onboot)
        if ostype is not None:
            pulumi.set(__self__, "ostype", ostype)
        if parallel0 is not None:
            pulumi.set(__self__, "parallel0", parallel0)
        if protection is not None:
            pulumi.set(__self__, "protection", protection)
        if rng0 is not None:
            pulumi.set(__self__, "rng0", rng0)
        if scsihw is not None:
            pulumi.set(__self__, "scsihw", scsihw)
        if searchdomain is not None:
            pulumi.set(__self__, "searchdomain", searchdomain)
        if serial0 is not None:
            pulumi.set(__self__, "serial0", serial0)
        if smbios1 is not None:
            pulumi.set(__self__, "smbios1", smbios1)
        if sockets is not None:
            pulumi.set(__self__, "sockets", sockets)
        if sshkeys is not None:
            pulumi.set(__self__, "sshkeys", sshkeys)
        if tablet is not None:
            pulumi.set(__self__, "tablet", tablet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if tpmstate0 is not None:
            pulumi.set(__self__, "tpmstate0", tpmstate0)
        if usb0 is not None:
            pulumi.set(__self__, "usb0", usb0)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)
        if vga is not None:
            pulumi.set(__self__, "vga", vga)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Input[Sequence[pulumi.Input['DiskArgs']]]:
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: pulumi.Input[Sequence[pulumi.Input['DiskArgs']]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def acpi(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "acpi")

    @acpi.setter
    def acpi(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "acpi", value)

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "affinity", value)

    @_builtins.property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent", value)

    @_builtins.property
    @pulumi.getter
    def audio0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "audio0")

    @audio0.setter
    def audio0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "audio0", value)

    @_builtins.property
    @pulumi.getter
    def autostart(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "autostart")

    @autostart.setter
    def autostart(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "autostart", value)

    @_builtins.property
    @pulumi.getter
    def balloon(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "balloon")

    @balloon.setter
    def balloon(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "balloon", value)

    @_builtins.property
    @pulumi.getter
    def bios(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "bios")

    @bios.setter
    def bios(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bios", value)

    @_builtins.property
    @pulumi.getter
    def boot(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "boot")

    @boot.setter
    def boot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "boot", value)

    @_builtins.property
    @pulumi.getter
    def cicustom(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cicustom")

    @cicustom.setter
    def cicustom(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cicustom", value)

    @_builtins.property
    @pulumi.getter
    def cipassword(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cipassword")

    @cipassword.setter
    def cipassword(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cipassword", value)

    @_builtins.property
    @pulumi.getter
    def citype(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "citype")

    @citype.setter
    def citype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "citype", value)

    @_builtins.property
    @pulumi.getter
    def ciupgrade(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "ciupgrade")

    @ciupgrade.setter
    def ciupgrade(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ciupgrade", value)

    @_builtins.property
    @pulumi.getter
    def ciuser(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ciuser")

    @ciuser.setter
    def ciuser(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ciuser", value)

    @_builtins.property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input['CloneArgs']]:
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input['CloneArgs']]):
        pulumi.set(self, "clone", value)

    @_builtins.property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cores", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter
    def cpulimit(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cpulimit")

    @cpulimit.setter
    def cpulimit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpulimit", value)

    @_builtins.property
    @pulumi.getter
    def cpuunits(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "cpuunits")

    @cpuunits.setter
    def cpuunits(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cpuunits", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "digest", value)

    @_builtins.property
    @pulumi.getter
    def efidisk0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "efidisk0")

    @efidisk0.setter
    def efidisk0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "efidisk0", value)

    @_builtins.property
    @pulumi.getter
    def hookscript(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hookscript")

    @hookscript.setter
    def hookscript(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hookscript", value)

    @_builtins.property
    @pulumi.getter
    def hostpci0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hostpci0")

    @hostpci0.setter
    def hostpci0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostpci0", value)

    @_builtins.property
    @pulumi.getter
    def hotplug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hotplug")

    @hotplug.setter
    def hotplug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hotplug", value)

    @_builtins.property
    @pulumi.getter
    def hugepages(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hugepages")

    @hugepages.setter
    def hugepages(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hugepages", value)

    @_builtins.property
    @pulumi.getter
    def ipconfig0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipconfig0")

    @ipconfig0.setter
    def ipconfig0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipconfig0", value)

    @_builtins.property
    @pulumi.getter
    def kvm(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "kvm")

    @kvm.setter
    def kvm(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "kvm", value)

    @_builtins.property
    @pulumi.getter
    def lock(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lock")

    @lock.setter
    def lock(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lock", value)

    @_builtins.property
    @pulumi.getter
    def machine(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def nameserver(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nameserver", value)

    @_builtins.property
    @pulumi.getter
    def net0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "net0")

    @net0.setter
    def net0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net0", value)

    @_builtins.property
    @pulumi.getter
    def node(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node", value)

    @_builtins.property
    @pulumi.getter
    def numa(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "numa")

    @numa.setter
    def numa(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "numa", value)

    @_builtins.property
    @pulumi.getter
    def numa0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "numa0")

    @numa0.setter
    def numa0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "numa0", value)

    @_builtins.property
    @pulumi.getter
    def onboot(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "onboot")

    @onboot.setter
    def onboot(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "onboot", value)

    @_builtins.property
    @pulumi.getter
    def ostype(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ostype")

    @ostype.setter
    def ostype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ostype", value)

    @_builtins.property
    @pulumi.getter
    def parallel0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "parallel0")

    @parallel0.setter
    def parallel0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parallel0", value)

    @_builtins.property
    @pulumi.getter
    def protection(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "protection")

    @protection.setter
    def protection(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "protection", value)

    @_builtins.property
    @pulumi.getter
    def rng0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "rng0")

    @rng0.setter
    def rng0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rng0", value)

    @_builtins.property
    @pulumi.getter
    def scsihw(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scsihw")

    @scsihw.setter
    def scsihw(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scsihw", value)

    @_builtins.property
    @pulumi.getter
    def searchdomain(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "searchdomain")

    @searchdomain.setter
    def searchdomain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "searchdomain", value)

    @_builtins.property
    @pulumi.getter
    def serial0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "serial0")

    @serial0.setter
    def serial0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial0", value)

    @_builtins.property
    @pulumi.getter
    def smbios1(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "smbios1")

    @smbios1.setter
    def smbios1(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smbios1", value)

    @_builtins.property
    @pulumi.getter
    def sockets(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "sockets")

    @sockets.setter
    def sockets(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sockets", value)

    @_builtins.property
    @pulumi.getter
    def sshkeys(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sshkeys")

    @sshkeys.setter
    def sshkeys(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sshkeys", value)

    @_builtins.property
    @pulumi.getter
    def tablet(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "tablet")

    @tablet.setter
    def tablet(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tablet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "template", value)

    @_builtins.property
    @pulumi.getter
    def tpmstate0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tpmstate0")

    @tpmstate0.setter
    def tpmstate0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tpmstate0", value)

    @_builtins.property
    @pulumi.getter
    def usb0(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "usb0")

    @usb0.setter
    def usb0(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "usb0", value)

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vcpus", value)

    @_builtins.property
    @pulumi.getter
    def vga(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vga")

    @vga.setter
    def vga(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vga", value)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vm_id", value)


@pulumi.type_token("pve:vm:VM")
class VM(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acpi: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 agent: Optional[pulumi.Input[_builtins.str]] = None,
                 audio0: Optional[pulumi.Input[_builtins.str]] = None,
                 autostart: Optional[pulumi.Input[_builtins.int]] = None,
                 balloon: Optional[pulumi.Input[_builtins.int]] = None,
                 bios: Optional[pulumi.Input[_builtins.str]] = None,
                 boot: Optional[pulumi.Input[_builtins.str]] = None,
                 cicustom: Optional[pulumi.Input[_builtins.str]] = None,
                 cipassword: Optional[pulumi.Input[_builtins.str]] = None,
                 citype: Optional[pulumi.Input[_builtins.str]] = None,
                 ciupgrade: Optional[pulumi.Input[_builtins.int]] = None,
                 ciuser: Optional[pulumi.Input[_builtins.str]] = None,
                 clone: Optional[pulumi.Input[Union['CloneArgs', 'CloneArgsDict']]] = None,
                 cores: Optional[pulumi.Input[_builtins.int]] = None,
                 cpu: Optional[pulumi.Input[_builtins.str]] = None,
                 cpulimit: Optional[pulumi.Input[_builtins.str]] = None,
                 cpuunits: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 digest: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DiskArgs', 'DiskArgsDict']]]]] = None,
                 efidisk0: Optional[pulumi.Input[_builtins.str]] = None,
                 hookscript: Optional[pulumi.Input[_builtins.str]] = None,
                 hostpci0: Optional[pulumi.Input[_builtins.str]] = None,
                 hotplug: Optional[pulumi.Input[_builtins.str]] = None,
                 hugepages: Optional[pulumi.Input[_builtins.str]] = None,
                 ipconfig0: Optional[pulumi.Input[_builtins.str]] = None,
                 kvm: Optional[pulumi.Input[_builtins.int]] = None,
                 lock: Optional[pulumi.Input[_builtins.str]] = None,
                 machine: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nameserver: Optional[pulumi.Input[_builtins.str]] = None,
                 net0: Optional[pulumi.Input[_builtins.str]] = None,
                 node: Optional[pulumi.Input[_builtins.str]] = None,
                 numa: Optional[pulumi.Input[_builtins.int]] = None,
                 numa0: Optional[pulumi.Input[_builtins.str]] = None,
                 onboot: Optional[pulumi.Input[_builtins.int]] = None,
                 ostype: Optional[pulumi.Input[_builtins.str]] = None,
                 parallel0: Optional[pulumi.Input[_builtins.str]] = None,
                 protection: Optional[pulumi.Input[_builtins.int]] = None,
                 rng0: Optional[pulumi.Input[_builtins.str]] = None,
                 scsihw: Optional[pulumi.Input[_builtins.str]] = None,
                 searchdomain: Optional[pulumi.Input[_builtins.str]] = None,
                 serial0: Optional[pulumi.Input[_builtins.str]] = None,
                 smbios1: Optional[pulumi.Input[_builtins.str]] = None,
                 sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 sshkeys: Optional[pulumi.Input[_builtins.str]] = None,
                 tablet: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input[_builtins.int]] = None,
                 tpmstate0: Optional[pulumi.Input[_builtins.str]] = None,
                 usb0: Optional[pulumi.Input[_builtins.str]] = None,
                 vcpus: Optional[pulumi.Input[_builtins.int]] = None,
                 vga: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Create a VM resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VMArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VM resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VMArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VMArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acpi: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 agent: Optional[pulumi.Input[_builtins.str]] = None,
                 audio0: Optional[pulumi.Input[_builtins.str]] = None,
                 autostart: Optional[pulumi.Input[_builtins.int]] = None,
                 balloon: Optional[pulumi.Input[_builtins.int]] = None,
                 bios: Optional[pulumi.Input[_builtins.str]] = None,
                 boot: Optional[pulumi.Input[_builtins.str]] = None,
                 cicustom: Optional[pulumi.Input[_builtins.str]] = None,
                 cipassword: Optional[pulumi.Input[_builtins.str]] = None,
                 citype: Optional[pulumi.Input[_builtins.str]] = None,
                 ciupgrade: Optional[pulumi.Input[_builtins.int]] = None,
                 ciuser: Optional[pulumi.Input[_builtins.str]] = None,
                 clone: Optional[pulumi.Input[Union['CloneArgs', 'CloneArgsDict']]] = None,
                 cores: Optional[pulumi.Input[_builtins.int]] = None,
                 cpu: Optional[pulumi.Input[_builtins.str]] = None,
                 cpulimit: Optional[pulumi.Input[_builtins.str]] = None,
                 cpuunits: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 digest: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DiskArgs', 'DiskArgsDict']]]]] = None,
                 efidisk0: Optional[pulumi.Input[_builtins.str]] = None,
                 hookscript: Optional[pulumi.Input[_builtins.str]] = None,
                 hostpci0: Optional[pulumi.Input[_builtins.str]] = None,
                 hotplug: Optional[pulumi.Input[_builtins.str]] = None,
                 hugepages: Optional[pulumi.Input[_builtins.str]] = None,
                 ipconfig0: Optional[pulumi.Input[_builtins.str]] = None,
                 kvm: Optional[pulumi.Input[_builtins.int]] = None,
                 lock: Optional[pulumi.Input[_builtins.str]] = None,
                 machine: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nameserver: Optional[pulumi.Input[_builtins.str]] = None,
                 net0: Optional[pulumi.Input[_builtins.str]] = None,
                 node: Optional[pulumi.Input[_builtins.str]] = None,
                 numa: Optional[pulumi.Input[_builtins.int]] = None,
                 numa0: Optional[pulumi.Input[_builtins.str]] = None,
                 onboot: Optional[pulumi.Input[_builtins.int]] = None,
                 ostype: Optional[pulumi.Input[_builtins.str]] = None,
                 parallel0: Optional[pulumi.Input[_builtins.str]] = None,
                 protection: Optional[pulumi.Input[_builtins.int]] = None,
                 rng0: Optional[pulumi.Input[_builtins.str]] = None,
                 scsihw: Optional[pulumi.Input[_builtins.str]] = None,
                 searchdomain: Optional[pulumi.Input[_builtins.str]] = None,
                 serial0: Optional[pulumi.Input[_builtins.str]] = None,
                 smbios1: Optional[pulumi.Input[_builtins.str]] = None,
                 sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 sshkeys: Optional[pulumi.Input[_builtins.str]] = None,
                 tablet: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 template: Optional[pulumi.Input[_builtins.int]] = None,
                 tpmstate0: Optional[pulumi.Input[_builtins.str]] = None,
                 usb0: Optional[pulumi.Input[_builtins.str]] = None,
                 vcpus: Optional[pulumi.Input[_builtins.int]] = None,
                 vga: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VMArgs.__new__(VMArgs)

            __props__.__dict__["acpi"] = acpi
            __props__.__dict__["affinity"] = affinity
            __props__.__dict__["agent"] = agent
            __props__.__dict__["audio0"] = audio0
            __props__.__dict__["autostart"] = autostart
            __props__.__dict__["balloon"] = balloon
            __props__.__dict__["bios"] = bios
            __props__.__dict__["boot"] = boot
            __props__.__dict__["cicustom"] = cicustom
            __props__.__dict__["cipassword"] = cipassword
            __props__.__dict__["citype"] = citype
            __props__.__dict__["ciupgrade"] = ciupgrade
            __props__.__dict__["ciuser"] = ciuser
            __props__.__dict__["clone"] = clone
            if cores is None:
                cores = 1
            __props__.__dict__["cores"] = cores
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["cpulimit"] = cpulimit
            __props__.__dict__["cpuunits"] = cpuunits
            __props__.__dict__["description"] = description
            __props__.__dict__["digest"] = digest
            if disks is None and not opts.urn:
                raise TypeError("Missing required property 'disks'")
            __props__.__dict__["disks"] = disks
            __props__.__dict__["efidisk0"] = efidisk0
            __props__.__dict__["hookscript"] = hookscript
            __props__.__dict__["hostpci0"] = hostpci0
            __props__.__dict__["hotplug"] = hotplug
            __props__.__dict__["hugepages"] = hugepages
            __props__.__dict__["ipconfig0"] = ipconfig0
            __props__.__dict__["kvm"] = kvm
            __props__.__dict__["lock"] = lock
            __props__.__dict__["machine"] = machine
            __props__.__dict__["memory"] = memory
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["nameserver"] = nameserver
            __props__.__dict__["net0"] = net0
            __props__.__dict__["node"] = node
            __props__.__dict__["numa"] = numa
            __props__.__dict__["numa0"] = numa0
            __props__.__dict__["onboot"] = onboot
            __props__.__dict__["ostype"] = ostype
            __props__.__dict__["parallel0"] = parallel0
            __props__.__dict__["protection"] = protection
            __props__.__dict__["rng0"] = rng0
            __props__.__dict__["scsihw"] = scsihw
            __props__.__dict__["searchdomain"] = searchdomain
            __props__.__dict__["serial0"] = serial0
            __props__.__dict__["smbios1"] = smbios1
            __props__.__dict__["sockets"] = sockets
            __props__.__dict__["sshkeys"] = sshkeys
            __props__.__dict__["tablet"] = tablet
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template"] = template
            __props__.__dict__["tpmstate0"] = tpmstate0
            __props__.__dict__["usb0"] = usb0
            __props__.__dict__["vcpus"] = vcpus
            __props__.__dict__["vga"] = vga
            __props__.__dict__["vm_id"] = vm_id
        super(VM, __self__).__init__(
            'pve:vm:VM',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VM':
        """
        Get an existing VM resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VMArgs.__new__(VMArgs)

        __props__.__dict__["acpi"] = None
        __props__.__dict__["affinity"] = None
        __props__.__dict__["agent"] = None
        __props__.__dict__["audio0"] = None
        __props__.__dict__["autostart"] = None
        __props__.__dict__["balloon"] = None
        __props__.__dict__["bios"] = None
        __props__.__dict__["boot"] = None
        __props__.__dict__["cicustom"] = None
        __props__.__dict__["cipassword"] = None
        __props__.__dict__["citype"] = None
        __props__.__dict__["ciupgrade"] = None
        __props__.__dict__["ciuser"] = None
        __props__.__dict__["clone"] = None
        __props__.__dict__["cores"] = None
        __props__.__dict__["cpu"] = None
        __props__.__dict__["cpulimit"] = None
        __props__.__dict__["cpuunits"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["digest"] = None
        __props__.__dict__["disks"] = None
        __props__.__dict__["efidisk0"] = None
        __props__.__dict__["hookscript"] = None
        __props__.__dict__["hostpci0"] = None
        __props__.__dict__["hotplug"] = None
        __props__.__dict__["hugepages"] = None
        __props__.__dict__["ipconfig0"] = None
        __props__.__dict__["kvm"] = None
        __props__.__dict__["lock"] = None
        __props__.__dict__["machine"] = None
        __props__.__dict__["memory"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["nameserver"] = None
        __props__.__dict__["net0"] = None
        __props__.__dict__["node"] = None
        __props__.__dict__["numa"] = None
        __props__.__dict__["numa0"] = None
        __props__.__dict__["onboot"] = None
        __props__.__dict__["ostype"] = None
        __props__.__dict__["parallel0"] = None
        __props__.__dict__["protection"] = None
        __props__.__dict__["rng0"] = None
        __props__.__dict__["scsihw"] = None
        __props__.__dict__["searchdomain"] = None
        __props__.__dict__["serial0"] = None
        __props__.__dict__["smbios1"] = None
        __props__.__dict__["sockets"] = None
        __props__.__dict__["sshkeys"] = None
        __props__.__dict__["tablet"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["template"] = None
        __props__.__dict__["tpmstate0"] = None
        __props__.__dict__["usb0"] = None
        __props__.__dict__["vcpus"] = None
        __props__.__dict__["vga"] = None
        __props__.__dict__["vm_id"] = None
        return VM(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def acpi(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "acpi")

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "affinity")

    @_builtins.property
    @pulumi.getter
    def agent(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "agent")

    @_builtins.property
    @pulumi.getter
    def audio0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "audio0")

    @_builtins.property
    @pulumi.getter
    def autostart(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "autostart")

    @_builtins.property
    @pulumi.getter
    def balloon(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "balloon")

    @_builtins.property
    @pulumi.getter
    def bios(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "bios")

    @_builtins.property
    @pulumi.getter
    def boot(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "boot")

    @_builtins.property
    @pulumi.getter
    def cicustom(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "cicustom")

    @_builtins.property
    @pulumi.getter
    def cipassword(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "cipassword")

    @_builtins.property
    @pulumi.getter
    def citype(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "citype")

    @_builtins.property
    @pulumi.getter
    def ciupgrade(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "ciupgrade")

    @_builtins.property
    @pulumi.getter
    def ciuser(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "ciuser")

    @_builtins.property
    @pulumi.getter
    def clone(self) -> pulumi.Output[Optional['outputs.Clone']]:
        return pulumi.get(self, "clone")

    @_builtins.property
    @pulumi.getter
    def cores(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "cores")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def cpulimit(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "cpulimit")

    @_builtins.property
    @pulumi.getter
    def cpuunits(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "cpuunits")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def digest(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence['outputs.Disk']]:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def efidisk0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "efidisk0")

    @_builtins.property
    @pulumi.getter
    def hookscript(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "hookscript")

    @_builtins.property
    @pulumi.getter
    def hostpci0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "hostpci0")

    @_builtins.property
    @pulumi.getter
    def hotplug(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "hotplug")

    @_builtins.property
    @pulumi.getter
    def hugepages(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "hugepages")

    @_builtins.property
    @pulumi.getter
    def ipconfig0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "ipconfig0")

    @_builtins.property
    @pulumi.getter
    def kvm(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "kvm")

    @_builtins.property
    @pulumi.getter
    def lock(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "lock")

    @_builtins.property
    @pulumi.getter
    def machine(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "machine")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nameserver(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "nameserver")

    @_builtins.property
    @pulumi.getter
    def net0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "net0")

    @_builtins.property
    @pulumi.getter
    def node(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "node")

    @_builtins.property
    @pulumi.getter
    def numa(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "numa")

    @_builtins.property
    @pulumi.getter
    def numa0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "numa0")

    @_builtins.property
    @pulumi.getter
    def onboot(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "onboot")

    @_builtins.property
    @pulumi.getter
    def ostype(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "ostype")

    @_builtins.property
    @pulumi.getter
    def parallel0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "parallel0")

    @_builtins.property
    @pulumi.getter
    def protection(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "protection")

    @_builtins.property
    @pulumi.getter
    def rng0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "rng0")

    @_builtins.property
    @pulumi.getter
    def scsihw(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "scsihw")

    @_builtins.property
    @pulumi.getter
    def searchdomain(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "searchdomain")

    @_builtins.property
    @pulumi.getter
    def serial0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "serial0")

    @_builtins.property
    @pulumi.getter
    def smbios1(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "smbios1")

    @_builtins.property
    @pulumi.getter
    def sockets(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "sockets")

    @_builtins.property
    @pulumi.getter
    def sshkeys(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "sshkeys")

    @_builtins.property
    @pulumi.getter
    def tablet(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "tablet")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def template(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter
    def tpmstate0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "tpmstate0")

    @_builtins.property
    @pulumi.getter
    def usb0(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "usb0")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def vga(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "vga")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "vm_id")

