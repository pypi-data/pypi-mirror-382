{
  "id": "d7324627-235c-4685-9ee0-ab795e2fd678",
  "author": {
    "id": "91d47029-1342-449f-b4ca-a6a7d9bfd9d1",
    "account_type": "user",
    "name": "ladybugbot",
    "display_name": "info@ladybug.tools",
    "description": "Your favorite bot!",
    "picture_url": "https://avatars.githubusercontent.com/u/46136343"
  },
  "owner": {
    "id": "8c2991d1-a6e4-4275-8789-4e9405b43508",
    "account_type": "org",
    "name": "pollination",
    "display_name": "Pollination",
    "description": "...",
    "picture_url": "https://avatars.githubusercontent.com/u/46136343"
  },
  "recipe": {
    "type": "RecipeInterface",
    "annotations": {},
    "api_version": "v1beta1",
    "metadata": {
      "type": "MetaData",
      "annotations": {},
      "name": "utci-comfort-map",
      "tag": "0.9.15",
      "app_version": null,
      "keywords": [
        "honeybee",
        "ladybug-tools",
        "thermal",
        "comfort",
        "utci"
      ],
      "maintainers": [
        {
          "type": "Maintainer",
          "annotations": {},
          "name": "chris",
          "email": "chris@ladybug.tools"
        },
        {
          "type": "Maintainer",
          "annotations": {},
          "name": "ladybug-tools",
          "email": "info@ladybug.tools"
        }
      ],
      "home": "https://github.com/pollination/utci-comfort-map",
      "sources": [],
      "icon": "https://raw.githubusercontent.com/ladybug-tools/artwork/master/icons_components/honeybee/png/utcimap.png",
      "deprecated": null,
      "description": "UTCI thermal comfort map for Pollination.",
      "license": {
        "type": "License",
        "annotations": {},
        "name": "PolyForm Shield License 1.0.0",
        "url": "https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt"
      }
    },
    "source": null,
    "inputs": [
      {
        "type": "DAGFolderInput",
        "annotations": {},
        "name": "air-speed-matrices",
        "description": "An optional folder with csv files that align with the model sensor grids. Each csv file should have the same name as the sensor grid identifier. Each csv file should contain a matrix of air speed values in m/s with one row per sensor and one column per timestep of the run period. Note that these values are not meteorological and should be AT HUMAN SUBJECT LEVEL. If specified, this overrides the wind speed input.",
        "default": null,
        "alias": [],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGStringInput",
        "annotations": {},
        "name": "comfort-parameters",
        "description": "An UTCIParameter string to customize the assumptions of the UTCI comfort model.",
        "default": "--cold 9 --heat 26",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "comfort_par",
            "description": "UTCIParameter string to customize the assumptions of the UTCI comfort model.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "--cold 9 --heat 26",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGIntegerInput",
        "annotations": {},
        "name": "cpu-count",
        "description": "The maximum number of CPUs for parallel execution. This will be used to determine the number of sensors run by each worker.",
        "default": 50,
        "alias": [
          {
            "type": "DAGIntegerInputAlias",
            "annotations": {},
            "name": "cpu_count",
            "description": "The maximum number of CPUs for parallel execution. For local simulation, this value is ignored and the cpu_count is automatically set to be equal to the number of workers tasked to the run. For cloud-based runs, this input can be used to control the resources used for the simulation and, if unspecified, the default value of 50 will be used.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": 50,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        }
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "ddy",
        "description": "A DDY file with design days to be used for the initial sizing calculation.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "ddy",
            "description": "The path to a .ddy file or an .epw file with design days to be used for the initial sizing calculation.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.ddy",
                "function": "ddy_handler",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "extensions": [
          "ddy"
        ]
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "epw",
        "description": "EPW weather file to be used for the comfort map simulation.",
        "default": null,
        "alias": [],
        "required": true,
        "spec": null,
        "extensions": [
          "epw"
        ]
      },
      {
        "type": "DAGIntegerInput",
        "annotations": {},
        "name": "min-sensor-count",
        "description": "The minimum number of sensors in each sensor grid after redistributing the sensors based on cpu_count. This value takes precedence over the cpu_count and can be used to ensure that the parallelization does not result in generating unnecessarily small sensor grids. The default value is set to 1, which means that the cpu_count is always respected.",
        "default": 500,
        "alias": [
          {
            "type": "DAGIntegerInputAlias",
            "annotations": {},
            "name": "min_sen_count",
            "description": "Positive integer for the minimum number of sensors in each grid after redistributing the sensors based on cpu_count. This value takes precedence over the cpu_count and can be used to ensure that the parallelization does not result in generating unnecessarily small sensor grids that increase overhead. (Default: 200).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": 200,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        }
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "model",
        "description": "A Honeybee model in HBJSON file format.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "HBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "model",
            "description": "This input links the model to Rhino model.",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoHBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": true,
        "spec": null,
        "extensions": [
          "json",
          "hbjson"
        ]
      },
      {
        "type": "DAGNumberInput",
        "annotations": {},
        "name": "north",
        "description": "A a number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees.",
        "default": 0.0,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.north",
                "function": "north_vector_to_angle",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoModelProjectInfoNorth",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "number",
          "minimum": -360,
          "maximum": 360
        }
      },
      {
        "type": "DAGStringInput",
        "annotations": {},
        "name": "radiance-parameters",
        "description": "Radiance parameters for ray tracing.",
        "default": "-ab 2 -ad 5000 -lw 2e-05",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "radiance_par",
            "description": "Text for the radiance parameters to be used for ray tracing. (Default: -ab 2 -ad 5000 -lw 2e-05).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "-ab 2 -ad 5000 -lw 2e-05 -dr 0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGStringInput",
        "annotations": {},
        "name": "run-period",
        "description": "An AnalysisPeriod string to set the start and end dates of the simulation (eg. \"6/21 to 9/21 between 0 and 23 @1\"). If None, the simulation will be annual.",
        "default": "",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "run_period",
            "description": "An AnalysisPeriod to set the start and end dates of the simulation. If None, the simulation will be annual.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.runperiod",
                "function": "run_period_to_str",
                "index": 0
              }
            ],
            "default": "",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "schedule",
        "description": "An optional path to a CSV file to specify the relevant times during which comfort should be evaluated. If specified, this will be used for all sensors. Values should be 0-1 separated by new line.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "schedule",
            "description": "A schedule to specify the relevant times during which comfort should be evaluated. This must either be a Ladybug Hourly Data Collection that aligns with the input run_period or the path to a CSV file with a number of rows equal to the length of the run_period. If unspecified, it will be assumed that all times are relevant for outdoor sensors and the energy model occupancy schedules will be used for indoor sensors.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.schedule",
                "function": "data_to_csv",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "extensions": [
          "txt",
          "csv"
        ]
      },
      {
        "type": "DAGStringInput",
        "annotations": {},
        "name": "solarcal-parameters",
        "description": "A SolarCalParameter string to customize the assumptions of the SolarCal model.",
        "default": "--posture standing --sharp 135 --absorptivity 0.7 --emissivity 0.95",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "solar_body_par",
            "description": "Optional solar body parameters from the \"LB Solar Body Parameters\" object to specify the properties of the human geometry assumed in the shortwave MRT calculation. The default assumes average skin/clothing absorptivity and a human subject always has their back to the sun at a 45-degree angle (SHARP = 135).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "--posture seated --sharp 135 --absorptivity 0.7 --emissivity 0.95",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "wind-speed",
        "description": "A CSV file containing a single number for meteorological wind speed in m/s or several rows of wind speeds that align with the length of the run period. This will be used for all outdoor comfort evaluation. Note that all sensors on the indoors will always use a wind speed of 0.5 m/s, which is the lowest acceptable value for the UTCI model. If None, the EPW wind speed will be used for all outdoor sensors.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "wind_speed",
            "description": "A single number for meteorological wind speed in m/s or an hourly data collection of wind speeds that align with the input run period. This can also be a CSV file with one wind speed per row for each step of the analysis.These values will be used for all outdoor comfort evaluation. Note that all sensors on the indoors will always use a wind speed of 0.5 m/s, which is the lowest acceptable value for the UTCI model. If unspecified, the EPW wind speed will be used for all outdoor sensors.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.data",
                "function": "value_or_data_to_air_speed_file",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "extensions": [
          "txt",
          "csv"
        ]
      }
    ],
    "outputs": [
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "category",
        "description": "A folder containing CSV maps of the heat/cold stress categories for each sensor grid. -5 indicates extreme cold stress. +5 indicates extreme heat stress. 0 indicates no thermal stress. This can be used to understand not just whether conditions are acceptable but how uncomfortably hot or cold they are.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "results/condition_intensity"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "category",
            "description": "A folder containing CSV maps of the heat/cold stress categories for each sensor grid at each time step of the analysis. This can be connected to the \"HB Read Thermal Matrix\" component to parse detailed results into Grasshopper. This can be used to understand not just whether conditions are acceptable but how uncomfortably hot or cold they are. Values indicate the following. -5 = extreme cold stress. -4 = very strong cold stress. -3 = strong cold stress. -2 = moderate cold stress. -1 = slight cold stress.  0 = no thermal stress. +1 = slight heat stress. +2 = moderate heat stress. +3 = strong heat stress. +4 = very strong heat stress. +5 = extreme heat stress",
            "platform": [
              "grasshopper"
            ],
            "handler": []
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "condition",
        "description": "A folder containing CSV maps of comfort conditions for each sensor grid. -1 indicates unacceptably cold conditions. +1 indicates unacceptably hot conditions. 0 indicates neutral (comfortable) conditions.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "results/condition"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "condition",
            "description": "A folder containing CSV maps of comfort conditions for each sensor grid at each time step of the analysis. This can be connected to the \"HB Read Thermal Matrix\" component to parse detailed results into Grasshopper. -1 indicates unacceptably cold conditions. +1 indicates unacceptably hot conditions. 0 indicates neutral (comfortable) conditions.",
            "platform": [
              "grasshopper"
            ],
            "handler": []
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "csp",
        "description": "A folder containing CSV values for Cold Sensation Percent (CSP). CSP is the percentage of occupied time where thermal conditions are colder than what is considered acceptable/comfortable.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/CSP"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "CSP",
            "description": "Lists of values between 0 and 100 for the Cold Sensation Percent (CSP). These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize uncomfortably cold locations. CSP is the percentage of occupied time where thermal conditions are colder than what is considered acceptable/comfortable. Occupied hours are determined from the occupancy schedules of each room (any time where the occupancy schedule is >= 0.1 will be considered occupied). Outdoor sensors are considered occupied at all times. More custom CSP studies can be done by post-processing the condition results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.comfort",
                "function": "read_comfort_percent_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "CSP",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.comfort",
                "function": "read_comfort_percent_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "environmental-conditions",
        "description": "A folder containing the environmental conditions that were input to the thermal comfort model. This include the MRT, air temperature, longwave MRT, shortwave MRT delta, and relative humidity.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "initial_results/conditions"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "env_conds",
            "description": "A folder containing the environmental conditions that were input to the comfort model. These can be loaded into Grasshopper using the \"HB Read Environment Matrix\" component. Load-able metrics include the MRT, air temperature, longwave MRT and shortwave MRT delta.",
            "platform": [
              "grasshopper"
            ],
            "handler": []
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "hsp",
        "description": "A folder containing CSV values for Heat Sensation Percent (HSP). HSP is the percentage of occupied time where thermal conditions are hotter than what is considered acceptable/comfortable.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/HSP"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "HSP",
            "description": "Lists of values between 0 and 100 for the Heat Sensation Percent (HSP). These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize uncomfortably hot locations. HSP is the percentage of occupied time where thermal conditions are hotter than what is considered acceptable/comfortable. Occupied hours are determined from the occupancy schedules of each room (any time where the occupancy schedule is >= 0.1 will be considered occupied). Outdoor sensors are considered occupied at all times. More custom HSP studies can be done by post-processing the condition results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.comfort",
                "function": "read_comfort_percent_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "HSP",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.comfort",
                "function": "read_comfort_percent_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "tcp",
        "description": "A folder containing CSV values for Thermal Comfort Percent (TCP). TCP is the percentage of occupied time where thermal conditions are acceptable/comfortable. Note that outdoor sensors are considered always occupied.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/TCP"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "TCP",
            "description": "Lists of values between 0 and 100 for the Thermal Comfort Percent (TCP). These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize spatial thermal comfort. TCP is the percentage of occupied time where thermal conditions are acceptable/comfortable. Occupied hours are determined from the occupancy schedules of each room (any time where the occupancy schedule is >= 0.1 will be considered occupied). Outdoor sensors are considered occupied at all times. More custom TCP studies can be done by post-processing the condition results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.comfort",
                "function": "read_comfort_percent_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "TCP",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.comfort",
                "function": "read_comfort_percent_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "utci",
        "description": "A folder containing CSV maps of Universal Thermal Climate Index (UTCI) temperatures for each sensor grid. Values are in Celsius.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "results/temperature"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "utci",
            "description": "A folder containing CSV maps of Universal Thermal Climate Index (UTCI) temperatures for each sensor grid at each time step of the analysis. This can be connected to the \"HB Read Thermal Matrix\" component to parse detailed results into Grasshopper. Values are in Celsius.",
            "platform": [
              "grasshopper"
            ],
            "handler": []
          }
        ],
        "required": true
      }
    ]
  },
  "generation": 14,
  "status": {
    "type": "RunStatus",
    "annotations": {},
    "inputs": [
      {
        "type": "StepFolderInput",
        "annotations": {},
        "name": "air-speed-matrices",
        "description": "An optional folder with csv files that align with the model sensor grids. Each csv file should have the same name as the sensor grid identifier. Each csv file should contain a matrix of air speed values in m/s with one row per sensor and one column per timestep of the run period. Note that these values are not meteorological and should be AT HUMAN SUBJECT LEVEL. If specified, this overrides the wind speed input.",
        "default": null,
        "alias": [],
        "required": false,
        "spec": null,
        "path": null,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepStringInput",
        "annotations": {},
        "name": "comfort-parameters",
        "description": "An UTCIParameter string to customize the assumptions of the UTCI comfort model.",
        "default": "--cold 9 --heat 26",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "comfort_par",
            "description": "UTCIParameter string to customize the assumptions of the UTCI comfort model.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "--cold 9 --heat 26",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "value": "--cold 9 --heat 26"
      },
      {
        "type": "StepIntegerInput",
        "annotations": {},
        "name": "cpu-count",
        "description": "The maximum number of CPUs for parallel execution. This will be used to determine the number of sensors run by each worker.",
        "default": 50,
        "alias": [
          {
            "type": "DAGIntegerInputAlias",
            "annotations": {},
            "name": "cpu_count",
            "description": "The maximum number of CPUs for parallel execution. For local simulation, this value is ignored and the cpu_count is automatically set to be equal to the number of workers tasked to the run. For cloud-based runs, this input can be used to control the resources used for the simulation and, if unspecified, the default value of 50 will be used.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": 50,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        },
        "value": 50
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "ddy",
        "description": "A DDY file with design days to be used for the initial sizing calculation.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "ddy",
            "description": "The path to a .ddy file or an .epw file with design days to be used for the initial sizing calculation.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.ddy",
                "function": "ddy_handler",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "path": null,
        "extensions": [
          "ddy"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "epw",
        "description": "EPW weather file to be used for the comfort map simulation.",
        "default": null,
        "alias": [],
        "required": true,
        "spec": null,
        "path": null,
        "extensions": [
          "epw"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepIntegerInput",
        "annotations": {},
        "name": "min-sensor-count",
        "description": "The minimum number of sensors in each sensor grid after redistributing the sensors based on cpu_count. This value takes precedence over the cpu_count and can be used to ensure that the parallelization does not result in generating unnecessarily small sensor grids. The default value is set to 1, which means that the cpu_count is always respected.",
        "default": 500,
        "alias": [
          {
            "type": "DAGIntegerInputAlias",
            "annotations": {},
            "name": "min_sen_count",
            "description": "Positive integer for the minimum number of sensors in each grid after redistributing the sensors based on cpu_count. This value takes precedence over the cpu_count and can be used to ensure that the parallelization does not result in generating unnecessarily small sensor grids that increase overhead. (Default: 200).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": 200,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        },
        "value": 500
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "model",
        "description": "A Honeybee model in HBJSON file format.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "HBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "model",
            "description": "This input links the model to Rhino model.",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoHBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": true,
        "spec": null,
        "path": null,
        "extensions": [
          "json",
          "hbjson"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepNumberInput",
        "annotations": {},
        "name": "north",
        "description": "A a number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees.",
        "default": 0.0,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.north",
                "function": "north_vector_to_angle",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoModelProjectInfoNorth",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "number",
          "minimum": -360,
          "maximum": 360
        },
        "value": 0.0
      },
      {
        "type": "StepStringInput",
        "annotations": {},
        "name": "radiance-parameters",
        "description": "Radiance parameters for ray tracing.",
        "default": "-ab 2 -ad 5000 -lw 2e-05",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "radiance_par",
            "description": "Text for the radiance parameters to be used for ray tracing. (Default: -ab 2 -ad 5000 -lw 2e-05).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "-ab 2 -ad 5000 -lw 2e-05 -dr 0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "value": "-ab 2 -ad 5000 -lw 2e-05"
      },
      {
        "type": "StepStringInput",
        "annotations": {},
        "name": "run-period",
        "description": "An AnalysisPeriod string to set the start and end dates of the simulation (eg. \"6/21 to 9/21 between 0 and 23 @1\"). If None, the simulation will be annual.",
        "default": "",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "run_period",
            "description": "An AnalysisPeriod to set the start and end dates of the simulation. If None, the simulation will be annual.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.runperiod",
                "function": "run_period_to_str",
                "index": 0
              }
            ],
            "default": "",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "value": "0"
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "schedule",
        "description": "An optional path to a CSV file to specify the relevant times during which comfort should be evaluated. If specified, this will be used for all sensors. Values should be 0-1 separated by new line.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "schedule",
            "description": "A schedule to specify the relevant times during which comfort should be evaluated. This must either be a Ladybug Hourly Data Collection that aligns with the input run_period or the path to a CSV file with a number of rows equal to the length of the run_period. If unspecified, it will be assumed that all times are relevant for outdoor sensors and the energy model occupancy schedules will be used for indoor sensors.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.schedule",
                "function": "data_to_csv",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "path": null,
        "extensions": [
          "txt",
          "csv"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepStringInput",
        "annotations": {},
        "name": "solarcal-parameters",
        "description": "A SolarCalParameter string to customize the assumptions of the SolarCal model.",
        "default": "--posture standing --sharp 135 --absorptivity 0.7 --emissivity 0.95",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "solar_body_par",
            "description": "Optional solar body parameters from the \"LB Solar Body Parameters\" object to specify the properties of the human geometry assumed in the shortwave MRT calculation. The default assumes average skin/clothing absorptivity and a human subject always has their back to the sun at a 45-degree angle (SHARP = 135).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "--posture seated --sharp 135 --absorptivity 0.7 --emissivity 0.95",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "value": "--posture standing --sharp 135 --absorptivity 0.7 --emissivity 0.95"
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "wind-speed",
        "description": "A CSV file containing a single number for meteorological wind speed in m/s or several rows of wind speeds that align with the length of the run period. This will be used for all outdoor comfort evaluation. Note that all sensors on the indoors will always use a wind speed of 0.5 m/s, which is the lowest acceptable value for the UTCI model. If None, the EPW wind speed will be used for all outdoor sensors.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "wind_speed",
            "description": "A single number for meteorological wind speed in m/s or an hourly data collection of wind speeds that align with the input run period. This can also be a CSV file with one wind speed per row for each step of the analysis.These values will be used for all outdoor comfort evaluation. Note that all sensors on the indoors will always use a wind speed of 0.5 m/s, which is the lowest acceptable value for the UTCI model. If unspecified, the EPW wind speed will be used for all outdoor sensors.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.data",
                "function": "value_or_data_to_air_speed_file",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "path": null,
        "extensions": [
          "txt",
          "csv"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      }
    ],
    "outputs": [
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "category",
        "description": "A folder containing CSV maps of the heat/cold stress categories for each sensor grid. -5 indicates extreme cold stress. +5 indicates extreme heat stress. 0 indicates no thermal stress. This can be used to understand not just whether conditions are acceptable but how uncomfortably hot or cold they are.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "results/condition_intensity"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "condition",
        "description": "A folder containing CSV maps of comfort conditions for each sensor grid. -1 indicates unacceptably cold conditions. +1 indicates unacceptably hot conditions. 0 indicates neutral (comfortable) conditions.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "results/condition"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "csp",
        "description": "A folder containing CSV values for Cold Sensation Percent (CSP). CSP is the percentage of occupied time where thermal conditions are colder than what is considered acceptable/comfortable.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/CSP"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "environmental-conditions",
        "description": "A folder containing the environmental conditions that were input to the thermal comfort model. This include the MRT, air temperature, longwave MRT, shortwave MRT delta, and relative humidity.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "initial_results/conditions"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "hsp",
        "description": "A folder containing CSV values for Heat Sensation Percent (HSP). HSP is the percentage of occupied time where thermal conditions are hotter than what is considered acceptable/comfortable.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/HSP"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "tcp",
        "description": "A folder containing CSV values for Thermal Comfort Percent (TCP). TCP is the percentage of occupied time where thermal conditions are acceptable/comfortable. Note that outdoor sensors are considered always occupied.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/TCP"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "utci",
        "description": "A folder containing CSV maps of Universal Thermal Climate Index (UTCI) temperatures for each sensor grid. Values are in Celsius.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "results/temperature"
        }
      }
    ],
    "message": null,
    "started_at": "2024-10-21T12:31:27+00:00",
    "finished_at": null,
    "source": null,
    "api_version": "v1beta1",
    "id": "d7324627-235c-4685-9ee0-ab795e2fd678_00",
    "job_id": "d7324627-235c-4685-9ee0-ab795e2fd678",
    "entrypoint": null,
    "status": "Unknown",
    "steps": {}
  },
  "meta": {
    "resources_duration": {
      "cpu": 0,
      "memory": 0
    },
    "progress": {
      "completed": 0,
      "running": 0,
      "total": 0
    }
  },
  "name": "utci-comfort-map"
}