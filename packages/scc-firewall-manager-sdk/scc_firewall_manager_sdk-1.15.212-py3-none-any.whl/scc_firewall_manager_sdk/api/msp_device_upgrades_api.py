# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List
from typing_extensions import Annotated
from scc_firewall_manager_sdk.models.tenant_ftd_compatibility_version import TenantFtdCompatibilityVersion

from scc_firewall_manager_sdk.api_client import ApiClient, RequestSerialized
from scc_firewall_manager_sdk.api_response import ApiResponse
from scc_firewall_manager_sdk.rest import RESTResponseType


class MSPDeviceUpgradesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_compatible_ftd_versions_for_msp_managed_ftd_devices(
        self,
        device_uids: Annotated[List[StrictStr], Field(min_length=1, max_length=50, description="A list of unique identifiers, represented as UUIDs, of the devices in Security Cloud Control. Note: All of the devices specified have to be on tenants managed by the MSP portal.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenantFtdCompatibilityVersion:
        """Get upgrade versions compatible with multiple FTDs per tenant

        <p>List of compatible upgrade versions, grouped by tenant and hardware model.</p> <p><strong>First Request:</strong></p> <ul> <li>When called with a list of device UUIDs for the first time</li> <li>Returns <strong>HTTP 202</strong> (Accepted) with a transaction ID</li> <li>Asynchronously builds the list of compatible upgrade versions in the background</li> </ul> <p><strong>Subsequent Requests:</strong></p> <ul> <li>When called again after the transaction completes</li> <li>Returns <strong>HTTP 200</strong> (OK) with the actual compatible upgrade versions data, grouped by the unique identifiers of the managed tenant and the hardware model of the device. </li> </ul> <p><strong>Usage Pattern:</strong></p> <ol> <li>Make initial request with device UUIDs</li> <li>Receive 202 response with transaction details</li> <li>Poll the endpoint until you receive a 200 response with the results</li> </ol> <p><em>Note:</em> The response will be grouped by tenant for easier organization and processing.</p> <p><em>Note:</em> The response will return a single compatible version, if available, for all of the devices in a single tenant..</p>

        :param device_uids: A list of unique identifiers, represented as UUIDs, of the devices in Security Cloud Control. Note: All of the devices specified have to be on tenants managed by the MSP portal. (required)
        :type device_uids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_compatible_ftd_versions_for_msp_managed_ftd_devices_serialize(
            device_uids=device_uids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantFtdCompatibilityVersion",
            '202': "CdoTransaction",
            '404': "CommonApiError",
            '422': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_compatible_ftd_versions_for_msp_managed_ftd_devices_with_http_info(
        self,
        device_uids: Annotated[List[StrictStr], Field(min_length=1, max_length=50, description="A list of unique identifiers, represented as UUIDs, of the devices in Security Cloud Control. Note: All of the devices specified have to be on tenants managed by the MSP portal.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenantFtdCompatibilityVersion]:
        """Get upgrade versions compatible with multiple FTDs per tenant

        <p>List of compatible upgrade versions, grouped by tenant and hardware model.</p> <p><strong>First Request:</strong></p> <ul> <li>When called with a list of device UUIDs for the first time</li> <li>Returns <strong>HTTP 202</strong> (Accepted) with a transaction ID</li> <li>Asynchronously builds the list of compatible upgrade versions in the background</li> </ul> <p><strong>Subsequent Requests:</strong></p> <ul> <li>When called again after the transaction completes</li> <li>Returns <strong>HTTP 200</strong> (OK) with the actual compatible upgrade versions data, grouped by the unique identifiers of the managed tenant and the hardware model of the device. </li> </ul> <p><strong>Usage Pattern:</strong></p> <ol> <li>Make initial request with device UUIDs</li> <li>Receive 202 response with transaction details</li> <li>Poll the endpoint until you receive a 200 response with the results</li> </ol> <p><em>Note:</em> The response will be grouped by tenant for easier organization and processing.</p> <p><em>Note:</em> The response will return a single compatible version, if available, for all of the devices in a single tenant..</p>

        :param device_uids: A list of unique identifiers, represented as UUIDs, of the devices in Security Cloud Control. Note: All of the devices specified have to be on tenants managed by the MSP portal. (required)
        :type device_uids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_compatible_ftd_versions_for_msp_managed_ftd_devices_serialize(
            device_uids=device_uids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantFtdCompatibilityVersion",
            '202': "CdoTransaction",
            '404': "CommonApiError",
            '422': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_compatible_ftd_versions_for_msp_managed_ftd_devices_without_preload_content(
        self,
        device_uids: Annotated[List[StrictStr], Field(min_length=1, max_length=50, description="A list of unique identifiers, represented as UUIDs, of the devices in Security Cloud Control. Note: All of the devices specified have to be on tenants managed by the MSP portal.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get upgrade versions compatible with multiple FTDs per tenant

        <p>List of compatible upgrade versions, grouped by tenant and hardware model.</p> <p><strong>First Request:</strong></p> <ul> <li>When called with a list of device UUIDs for the first time</li> <li>Returns <strong>HTTP 202</strong> (Accepted) with a transaction ID</li> <li>Asynchronously builds the list of compatible upgrade versions in the background</li> </ul> <p><strong>Subsequent Requests:</strong></p> <ul> <li>When called again after the transaction completes</li> <li>Returns <strong>HTTP 200</strong> (OK) with the actual compatible upgrade versions data, grouped by the unique identifiers of the managed tenant and the hardware model of the device. </li> </ul> <p><strong>Usage Pattern:</strong></p> <ol> <li>Make initial request with device UUIDs</li> <li>Receive 202 response with transaction details</li> <li>Poll the endpoint until you receive a 200 response with the results</li> </ol> <p><em>Note:</em> The response will be grouped by tenant for easier organization and processing.</p> <p><em>Note:</em> The response will return a single compatible version, if available, for all of the devices in a single tenant..</p>

        :param device_uids: A list of unique identifiers, represented as UUIDs, of the devices in Security Cloud Control. Note: All of the devices specified have to be on tenants managed by the MSP portal. (required)
        :type device_uids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_compatible_ftd_versions_for_msp_managed_ftd_devices_serialize(
            device_uids=device_uids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantFtdCompatibilityVersion",
            '202': "CdoTransaction",
            '404': "CommonApiError",
            '422': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_compatible_ftd_versions_for_msp_managed_ftd_devices_serialize(
        self,
        device_uids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'deviceUids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if device_uids is not None:
            
            _query_params.append(('deviceUids', device_uids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/msp/inventory/devices/ftds/upgrades/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


