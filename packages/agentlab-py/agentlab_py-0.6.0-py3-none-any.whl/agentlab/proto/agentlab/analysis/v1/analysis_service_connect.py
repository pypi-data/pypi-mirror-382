# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: proto/agentlab/analysis/v1/analysis_service.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import agentlab.proto.agentlab.analysis.v1.analysis_service_pb2 as proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2


class AgentAnalysisService(Protocol):
    async def analyze_agent(self, request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest, ctx: RequestContext) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def get_analysis_session(self, request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest, ctx: RequestContext) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def list_analysis_sessions(self, request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest, ctx: RequestContext) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class AgentAnalysisServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: AgentAnalysisService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/agentlab.analysis.v1.AgentAnalysisService/AnalyzeAgent": Endpoint.unary(
                    method=MethodInfo(
                        name="AnalyzeAgent",
                        service_name="agentlab.analysis.v1.AgentAnalysisService",
                        input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest,
                        output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.analyze_agent,
                ),
                "/agentlab.analysis.v1.AgentAnalysisService/GetAnalysisSession": Endpoint.unary(
                    method=MethodInfo(
                        name="GetAnalysisSession",
                        service_name="agentlab.analysis.v1.AgentAnalysisService",
                        input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest,
                        output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_analysis_session,
                ),
                "/agentlab.analysis.v1.AgentAnalysisService/ListAnalysisSessions": Endpoint.unary(
                    method=MethodInfo(
                        name="ListAnalysisSessions",
                        service_name="agentlab.analysis.v1.AgentAnalysisService",
                        input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest,
                        output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_analysis_sessions,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/agentlab.analysis.v1.AgentAnalysisService"


class AgentAnalysisServiceClient(ConnectClient):
    async def analyze_agent(
        self,
        request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="AnalyzeAgent",
                service_name="agentlab.analysis.v1.AgentAnalysisService",
                input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest,
                output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def get_analysis_session(
        self,
        request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetAnalysisSession",
                service_name="agentlab.analysis.v1.AgentAnalysisService",
                input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest,
                output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def list_analysis_sessions(
        self,
        request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListAnalysisSessions",
                service_name="agentlab.analysis.v1.AgentAnalysisService",
                input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest,
                output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class AgentAnalysisServiceSync(Protocol):
    def analyze_agent(self, request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest, ctx: RequestContext) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def get_analysis_session(self, request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest, ctx: RequestContext) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def list_analysis_sessions(self, request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest, ctx: RequestContext) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class AgentAnalysisServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: AgentAnalysisServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/agentlab.analysis.v1.AgentAnalysisService/AnalyzeAgent": EndpointSync.unary(
                    method=MethodInfo(
                        name="AnalyzeAgent",
                        service_name="agentlab.analysis.v1.AgentAnalysisService",
                        input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest,
                        output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.analyze_agent,
                ),
                "/agentlab.analysis.v1.AgentAnalysisService/GetAnalysisSession": EndpointSync.unary(
                    method=MethodInfo(
                        name="GetAnalysisSession",
                        service_name="agentlab.analysis.v1.AgentAnalysisService",
                        input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest,
                        output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_analysis_session,
                ),
                "/agentlab.analysis.v1.AgentAnalysisService/ListAnalysisSessions": EndpointSync.unary(
                    method=MethodInfo(
                        name="ListAnalysisSessions",
                        service_name="agentlab.analysis.v1.AgentAnalysisService",
                        input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest,
                        output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_analysis_sessions,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/agentlab.analysis.v1.AgentAnalysisService"


class AgentAnalysisServiceClientSync(ConnectClientSync):
    def analyze_agent(
        self,
        request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="AnalyzeAgent",
                service_name="agentlab.analysis.v1.AgentAnalysisService",
                input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentRequest,
                output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalyzeAgentResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def get_analysis_session(
        self,
        request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetAnalysisSession",
                service_name="agentlab.analysis.v1.AgentAnalysisService",
                input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.GetAnalysisSessionRequest,
                output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.AnalysisSession,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def list_analysis_sessions(
        self,
        request: proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListAnalysisSessions",
                service_name="agentlab.analysis.v1.AgentAnalysisService",
                input=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsRequest,
                output=proto_dot_agentlab_dot_analysis_dot_v1_dot_analysis__service__pb2.ListAnalysisSessionsResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
