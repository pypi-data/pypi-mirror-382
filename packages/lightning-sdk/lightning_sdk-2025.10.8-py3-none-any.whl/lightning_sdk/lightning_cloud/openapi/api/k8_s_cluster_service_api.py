# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class K8SClusterServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def k8_s_cluster_service_create_kubernetes_template(self, body: 'ProjectIdKubernetestemplatesBody', project_id: 'str', **kwargs) -> 'V1KubernetesTemplate':  # noqa: E501
        """k8_s_cluster_service_create_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_create_kubernetes_template(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdKubernetestemplatesBody body: (required)
        :param str project_id: (required)
        :return: V1KubernetesTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_create_kubernetes_template_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_create_kubernetes_template_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_create_kubernetes_template_with_http_info(self, body: 'ProjectIdKubernetestemplatesBody', project_id: 'str', **kwargs) -> 'V1KubernetesTemplate':  # noqa: E501
        """k8_s_cluster_service_create_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_create_kubernetes_template_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdKubernetestemplatesBody body: (required)
        :param str project_id: (required)
        :return: V1KubernetesTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_create_kubernetes_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `k8_s_cluster_service_create_kubernetes_template`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_create_kubernetes_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/kubernetes-templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1KubernetesTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_delete_kubernetes_template(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteKubernetesTemplateResponse':  # noqa: E501
        """k8_s_cluster_service_delete_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_delete_kubernetes_template(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteKubernetesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_delete_kubernetes_template_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_delete_kubernetes_template_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_delete_kubernetes_template_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteKubernetesTemplateResponse':  # noqa: E501
        """k8_s_cluster_service_delete_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_delete_kubernetes_template_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteKubernetesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_delete_kubernetes_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_delete_kubernetes_template`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `k8_s_cluster_service_delete_kubernetes_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/kubernetes-templates/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteKubernetesTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_get_kubernetes_template(self, project_id: 'str', id: 'str', **kwargs) -> 'V1KubernetesTemplate':  # noqa: E501
        """k8_s_cluster_service_get_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_get_kubernetes_template(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1KubernetesTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_get_kubernetes_template_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_get_kubernetes_template_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_get_kubernetes_template_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1KubernetesTemplate':  # noqa: E501
        """k8_s_cluster_service_get_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_get_kubernetes_template_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1KubernetesTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_get_kubernetes_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_get_kubernetes_template`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `k8_s_cluster_service_get_kubernetes_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/kubernetes-templates/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1KubernetesTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_aggregated_node_metrics(self, project_id: 'str', cluster_id: 'str', node_name: 'str', **kwargs) -> 'V1ListNodeMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_aggregated_node_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_aggregated_node_metrics(project_id, cluster_id, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str node_name: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListNodeMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_aggregated_node_metrics_with_http_info(project_id, cluster_id, node_name, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_aggregated_node_metrics_with_http_info(project_id, cluster_id, node_name, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_aggregated_node_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', node_name: 'str', **kwargs) -> 'V1ListNodeMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_aggregated_node_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_aggregated_node_metrics_with_http_info(project_id, cluster_id, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str node_name: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListNodeMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'node_name', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_aggregated_node_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_aggregated_node_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_aggregated_node_metrics`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `k8_s_cluster_service_list_aggregated_node_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'node_name' in params:
            path_params['nodeName'] = params['node_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/aggregated-metrics/nodes/{nodeName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListNodeMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_aggregated_pod_metrics(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListAggregatedPodMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_aggregated_pod_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_aggregated_pod_metrics(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str namespace:
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListAggregatedPodMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_aggregated_pod_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_aggregated_pod_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_aggregated_pod_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListAggregatedPodMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_aggregated_pod_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_aggregated_pod_metrics_with_http_info(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str namespace:
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListAggregatedPodMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'namespace', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_aggregated_pod_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_aggregated_pod_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_aggregated_pod_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/aggregated-metrics/pods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListAggregatedPodMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_cluster_metric_timestamps(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterMetricTimestampsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_metric_timestamps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_metric_timestamps(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :return: V1ListClusterMetricTimestampsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_cluster_metric_timestamps_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_cluster_metric_timestamps_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_cluster_metric_timestamps_with_http_info(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterMetricTimestampsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_metric_timestamps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_metric_timestamps_with_http_info(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :return: V1ListClusterMetricTimestampsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_cluster_metric_timestamps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_cluster_metric_timestamps`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_cluster_metric_timestamps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/cluster-metrics-timestamps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListClusterMetricTimestampsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_cluster_metrics(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_metrics(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListClusterMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_cluster_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_cluster_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_cluster_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_metrics_with_http_info(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListClusterMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_cluster_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_cluster_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_cluster_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/cluster-metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListClusterMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_cluster_namespace_metrics(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterNamespaceMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_namespace_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_namespace_metrics(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str namespace:
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListClusterNamespaceMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_cluster_namespace_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_cluster_namespace_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_cluster_namespace_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterNamespaceMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_namespace_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_namespace_metrics_with_http_info(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str namespace:
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListClusterNamespaceMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'namespace', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_cluster_namespace_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_cluster_namespace_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_cluster_namespace_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/cluster-namespace-metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListClusterNamespaceMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_cluster_namespace_user_metrics(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterNamespaceUserMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_namespace_user_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_namespace_user_metrics(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str namespace:
        :param str user_id:
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListClusterNamespaceUserMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_cluster_namespace_user_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_cluster_namespace_user_metrics_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_cluster_namespace_user_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListClusterNamespaceUserMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_cluster_namespace_user_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_cluster_namespace_user_metrics_with_http_info(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str namespace:
        :param str user_id:
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListClusterNamespaceUserMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'namespace', 'user_id', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_cluster_namespace_user_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_cluster_namespace_user_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_cluster_namespace_user_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/cluster-namespace-user-metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListClusterNamespaceUserMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_container_metrics(self, project_id: 'str', cluster_id: 'str', pod_id: 'str', container_id: 'str', **kwargs) -> 'V1ListContainerMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_container_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_container_metrics(project_id, cluster_id, pod_id, container_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str pod_id: (required)
        :param str container_id: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListContainerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_container_metrics_with_http_info(project_id, cluster_id, pod_id, container_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_container_metrics_with_http_info(project_id, cluster_id, pod_id, container_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_container_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', pod_id: 'str', container_id: 'str', **kwargs) -> 'V1ListContainerMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_container_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_container_metrics_with_http_info(project_id, cluster_id, pod_id, container_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str pod_id: (required)
        :param str container_id: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListContainerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'pod_id', 'container_id', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_container_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_container_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_container_metrics`")  # noqa: E501
        # verify the required parameter 'pod_id' is set
        if ('pod_id' not in params or
                params['pod_id'] is None):
            raise ValueError("Missing the required parameter `pod_id` when calling `k8_s_cluster_service_list_container_metrics`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `k8_s_cluster_service_list_container_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'pod_id' in params:
            path_params['podId'] = params['pod_id']  # noqa: E501
        if 'container_id' in params:
            path_params['containerId'] = params['container_id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/metrics/pods/{podId}/containers/{containerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListContainerMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_incident_events(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListIncidentEventsResponse':  # noqa: E501
        """k8_s_cluster_service_list_incident_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_incident_events(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :return: V1ListIncidentEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_incident_events_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_incident_events_with_http_info(project_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_incident_events_with_http_info(self, project_id: 'str', cluster_id: 'str', **kwargs) -> 'V1ListIncidentEventsResponse':  # noqa: E501
        """k8_s_cluster_service_list_incident_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_incident_events_with_http_info(project_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :return: V1ListIncidentEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_incident_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_incident_events`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_incident_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/incident-events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListIncidentEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_kubernetes_templates(self, project_id: 'str', **kwargs) -> 'V1ListKubernetesTemplatesResponse':  # noqa: E501
        """k8_s_cluster_service_list_kubernetes_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_kubernetes_templates(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :return: V1ListKubernetesTemplatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_kubernetes_templates_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_kubernetes_templates_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_kubernetes_templates_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListKubernetesTemplatesResponse':  # noqa: E501
        """k8_s_cluster_service_list_kubernetes_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_kubernetes_templates_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :return: V1ListKubernetesTemplatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_kubernetes_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_kubernetes_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/kubernetes-templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListKubernetesTemplatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_node_file_system_metrics(self, project_id: 'str', cluster_id: 'str', node_name: 'str', **kwargs) -> 'V1ListNodeFileSystemMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_node_file_system_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_node_file_system_metrics(project_id, cluster_id, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str node_name: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListNodeFileSystemMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_node_file_system_metrics_with_http_info(project_id, cluster_id, node_name, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_node_file_system_metrics_with_http_info(project_id, cluster_id, node_name, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_node_file_system_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', node_name: 'str', **kwargs) -> 'V1ListNodeFileSystemMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_node_file_system_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_node_file_system_metrics_with_http_info(project_id, cluster_id, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str node_name: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListNodeFileSystemMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'node_name', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_node_file_system_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_node_file_system_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_node_file_system_metrics`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `k8_s_cluster_service_list_node_file_system_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'node_name' in params:
            path_params['nodeName'] = params['node_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/metrics-filesystem/nodes/{nodeName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListNodeFileSystemMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_node_metrics(self, project_id: 'str', cluster_id: 'str', node_name: 'str', **kwargs) -> 'V1ListNodeMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_node_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_node_metrics(project_id, cluster_id, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str node_name: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListNodeMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_node_metrics_with_http_info(project_id, cluster_id, node_name, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_node_metrics_with_http_info(project_id, cluster_id, node_name, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_node_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', node_name: 'str', **kwargs) -> 'V1ListNodeMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_node_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_node_metrics_with_http_info(project_id, cluster_id, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str node_name: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListNodeMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'node_name', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_node_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_node_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_node_metrics`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `k8_s_cluster_service_list_node_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'node_name' in params:
            path_params['nodeName'] = params['node_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/metrics/nodes/{nodeName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListNodeMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_list_pod_metrics(self, project_id: 'str', cluster_id: 'str', pod_id: 'str', **kwargs) -> 'V1ListPodMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_pod_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_pod_metrics(project_id, cluster_id, pod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str pod_id: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListPodMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_list_pod_metrics_with_http_info(project_id, cluster_id, pod_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_list_pod_metrics_with_http_info(project_id, cluster_id, pod_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_list_pod_metrics_with_http_info(self, project_id: 'str', cluster_id: 'str', pod_id: 'str', **kwargs) -> 'V1ListPodMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_list_pod_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_list_pod_metrics_with_http_info(project_id, cluster_id, pod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id: (required)
        :param str pod_id: (required)
        :param datetime start: Date range.
        :param datetime end:
        :return: V1ListPodMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'pod_id', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_list_pod_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_list_pod_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_list_pod_metrics`")  # noqa: E501
        # verify the required parameter 'pod_id' is set
        if ('pod_id' not in params or
                params['pod_id'] is None):
            raise ValueError("Missing the required parameter `pod_id` when calling `k8_s_cluster_service_list_pod_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'pod_id' in params:
            path_params['podId'] = params['pod_id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/clusters/{clusterId}/metrics/pods/{podId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListPodMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_render_kubernetes_template(self, body: 'IdRenderBody', project_id: 'str', id: 'str', **kwargs) -> 'V1RenderKubernetesTemplateResponse':  # noqa: E501
        """k8_s_cluster_service_render_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_render_kubernetes_template(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdRenderBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1RenderKubernetesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_render_kubernetes_template_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_render_kubernetes_template_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_render_kubernetes_template_with_http_info(self, body: 'IdRenderBody', project_id: 'str', id: 'str', **kwargs) -> 'V1RenderKubernetesTemplateResponse':  # noqa: E501
        """k8_s_cluster_service_render_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_render_kubernetes_template_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdRenderBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1RenderKubernetesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_render_kubernetes_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `k8_s_cluster_service_render_kubernetes_template`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_render_kubernetes_template`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `k8_s_cluster_service_render_kubernetes_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/kubernetes-templates/{id}/render', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1RenderKubernetesTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_report_k8_s_cluster_metrics(self, body: 'ClusterIdMetricsBody', cluster_id: 'str', **kwargs) -> 'V1ReportK8sClusterMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_report_k8_s_cluster_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_report_k8_s_cluster_metrics(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterIdMetricsBody body: (required)
        :param str cluster_id: (required)
        :return: V1ReportK8sClusterMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_report_k8_s_cluster_metrics_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_report_k8_s_cluster_metrics_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_report_k8_s_cluster_metrics_with_http_info(self, body: 'ClusterIdMetricsBody', cluster_id: 'str', **kwargs) -> 'V1ReportK8sClusterMetricsResponse':  # noqa: E501
        """k8_s_cluster_service_report_k8_s_cluster_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_report_k8_s_cluster_metrics_with_http_info(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterIdMetricsBody body: (required)
        :param str cluster_id: (required)
        :return: V1ReportK8sClusterMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_report_k8_s_cluster_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `k8_s_cluster_service_report_k8_s_cluster_metrics`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `k8_s_cluster_service_report_k8_s_cluster_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s-clusters/{clusterId}/metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ReportK8sClusterMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def k8_s_cluster_service_update_kubernetes_template(self, body: 'KubernetestemplatesIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1KubernetesTemplate':  # noqa: E501
        """k8_s_cluster_service_update_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_update_kubernetes_template(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KubernetestemplatesIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1KubernetesTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.k8_s_cluster_service_update_kubernetes_template_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.k8_s_cluster_service_update_kubernetes_template_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def k8_s_cluster_service_update_kubernetes_template_with_http_info(self, body: 'KubernetestemplatesIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1KubernetesTemplate':  # noqa: E501
        """k8_s_cluster_service_update_kubernetes_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.k8_s_cluster_service_update_kubernetes_template_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KubernetestemplatesIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1KubernetesTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method k8_s_cluster_service_update_kubernetes_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `k8_s_cluster_service_update_kubernetes_template`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `k8_s_cluster_service_update_kubernetes_template`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `k8_s_cluster_service_update_kubernetes_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/kubernetes-templates/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1KubernetesTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
