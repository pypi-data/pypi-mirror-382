[project]
name = "mgnify_pipelines_toolkit"
version = "1.3.0"
readme = "README.md"
license = { text = "Apache Software License 2.0" }
authors = [
    { name = "MGnify team", email = "metagenomics-help@ebi.ac.uk" },
]
keywords = ["bioinformatics", "pipelines", "metagenomics"]
description = "Collection of scripts and tools for MGnify pipelines"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]

dependencies = [
    "biopython>=1.85",
    "numpy>=2.2.4,<3",
    "pandas>=2.2.3,<3",
    "requests>=2.32.3,<3",
    "click>=8.1.8,<9",
    "pandera>=0.23.1,<0.24",
    "pyfastx>=2.2.0,<3",
    "intervaltree>=3.1.0,<4",
    "isort>=6.1.0",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["mgnify_pipelines_toolkit",
    "mgnify_pipelines_toolkit.analysis",
    "mgnify_pipelines_toolkit.constants",
    "mgnify_pipelines_toolkit.utils",
    "mgnify_pipelines_toolkit.schemas",
    "mgnify_pipelines_toolkit.analysis.shared",
    "mgnify_pipelines_toolkit.analysis.amplicon",
    "mgnify_pipelines_toolkit.analysis.assembly",
    "mgnify_pipelines_toolkit.analysis.genomes",
    "mgnify_pipelines_toolkit.analysis.rawreads",
]

[project.scripts]
# analysis.shared #
get_subunits = "mgnify_pipelines_toolkit.analysis.shared.get_subunits:main"
get_subunits_coords = "mgnify_pipelines_toolkit.analysis.shared.get_subunits_coords:main"
mapseq2biom = "mgnify_pipelines_toolkit.analysis.shared.mapseq2biom:main"
fastq_suffix_header_check = "mgnify_pipelines_toolkit.analysis.shared.fastq_suffix_header_check:main"
library_strategy_check = "mgnify_pipelines_toolkit.analysis.shared.library_strategy_check:main"
markergene_study_summary = "mgnify_pipelines_toolkit.analysis.shared.markergene_study_summary:main"
convert_cmscan_to_cmsearch_tblout = "mgnify_pipelines_toolkit.analysis.shared.convert_cmscan_to_cmsearch_tblout:main"
dwc_summary_generator = "mgnify_pipelines_toolkit.analysis.shared.dwc_summary_generator:cli"
# analysis.amplicon #
classify_var_regions = "mgnify_pipelines_toolkit.analysis.amplicon.classify_var_regions:main"
make_asv_count_table = "mgnify_pipelines_toolkit.analysis.amplicon.make_asv_count_table:main"
remove_ambiguous_reads = "mgnify_pipelines_toolkit.analysis.amplicon.remove_ambiguous_reads:main"
rev_comp_se_primers = "mgnify_pipelines_toolkit.analysis.amplicon.rev_comp_se_primers:main"
mapseq_to_asv_table = "mgnify_pipelines_toolkit.analysis.amplicon.mapseq_to_asv_table:main"
permute_primers = "mgnify_pipelines_toolkit.analysis.amplicon.permute_primers:main"
primer_val_classification = "mgnify_pipelines_toolkit.analysis.amplicon.primer_val_classification:main"
amplicon_study_summary_generator = "mgnify_pipelines_toolkit.analysis.amplicon.study_summary_generator:cli"
# analysis.assembly #
krona_txt_from_cat_classification = "mgnify_pipelines_toolkit.analysis.assembly.krona_txt_from_cat_classification:main"
add_rhea_chebi_annotation = "mgnify_pipelines_toolkit.analysis.assembly.add_rhea_chebi_annotation:main"
combined_gene_caller_merge = "mgnify_pipelines_toolkit.analysis.assembly.combined_gene_caller_merge:main"
generate_gaf = "mgnify_pipelines_toolkit.analysis.assembly.generate_gaf:main"
summarise_goslims = "mgnify_pipelines_toolkit.analysis.assembly.summarise_goslims:main"
antismash_gff_builder = "mgnify_pipelines_toolkit.analysis.assembly.antismash_gff_builder:main"
assembly_study_summary_generator = "mgnify_pipelines_toolkit.analysis.assembly.study_summary_generator:cli"
summarise_sanntis_bgcs = "mgnify_pipelines_toolkit.analysis.assembly.summarise_sanntis_bgcs:main"
summarise_antismash_bgcs = "mgnify_pipelines_toolkit.analysis.assembly.summarise_antismash_bgcs:main"
gff_toolkit = "mgnify_pipelines_toolkit.analysis.assembly.gff_toolkit:main"
process_dbcan_clusters = "mgnify_pipelines_toolkit.analysis.assembly.process_dbcan_result_clusters:main"
process_dbcan_cazys = "mgnify_pipelines_toolkit.analysis.assembly.process_dbcan_result_cazys:main"
# analysis.rawreads #
rawreads_study_summary_generator = "mgnify_pipelines_toolkit.analysis.rawreads.study_summary_generator:cli"
# genomes #
genomes_extract_bacterial_rrnas_as_tsv = "mgnify_pipelines_toolkit.analysis.genomes.rna.extract_bacterial_rrnas_as_tsv:main"
genomes_extract_rrnas_as_fasta = "mgnify_pipelines_toolkit.analysis.genomes.rna.extract_rrnas_as_fasta:main"
genomes_extract_trnas = "mgnify_pipelines_toolkit.analysis.genomes.rna.extract_trnas:main"

# utils
fasta_to_delimited = "mgnify_pipelines_toolkit.utils.fasta_to_delimited:main"
get_mpt_version = "mgnify_pipelines_toolkit.utils.get_mpt_version:main"

[project.optional-dependencies]
test = [
    "pytest>=8.3.5,<9",
    "pytest-md>=0.2.0",
    "pytest-workflow==2.1.0",
]

dev = [
    "pre-commit>=4.2.0",
    "black>=25.1.0",
    "ruff>=0.8.4",
]

[tool.black]
line-length = 150

[tool.ruff]
line-length = 150

[tool.ruff.lint]
ignore = ["E741", "E203"]

[tool.isort]
profile = "black"
