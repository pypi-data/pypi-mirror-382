[project]
name = "plugboard"
dynamic = ["version"]
description = "Plugboard is an event driven modelling and orchestration framework for simulating and driving complex processes with many interconnected stateful components."
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Chris Knight", email = "plugboard@csknight.uk"},
    {name = "Toby Coleman", email = "plugboard@tobycoleman.com"}
]
requires-python = ">=3.12,<4.0"
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Typing :: Typed",
]
dependencies = [
    "aio-pika>=9.5.5,<10",
    "aiosqlite>=0.20,<1",
    "annotated-types>=0.7,<1",
    "async-lru>=2.0,<3",
    "fsspec>=2024.9.0",
    "msgspec[yaml]>=0.18,<1",
    "pandas>=1.0,<3",
    "pyarrow>=17.0,<21",
    "pydantic>=2.8,<3",
    "pydantic-settings>=2.7.1,<3",
    "pyzmq>=26.2,<27",
    "rich>=13.9,<14",
    "sqlalchemy[asyncio]>=2.0,<3",
    "structlog>=25.1.0,<26",
    "that-depends>=3.4.1,<4",
    "typer>=0.12,<1",
    "uvloop>=0.21.0,<1 ; platform_system != 'Windows'",
]

[project.optional-dependencies]
aws = ["s3fs>=2024.9.0"]
azure = ["adlfs>=2024.7.0"]
gcp = ["gcsfs>=2024.9.0"]
llm = [
    "llama-index-core>=0.12.30,<1",
    "llama-index-llms-openai>=0.3.33,<1",
]
# Pinning jsonschema due to performance issues with Lark and rfc3987-syntax parser
# https://github.com/python-jsonschema/jsonschema/issues/1392
ray = ["ray[default,tune]>=2.47.1,<3", "jsonschema<4.25.0", "optuna>=3.0,<4"]
websockets = ["websockets>=14.2,<15"]

[dependency-groups]
dev = [
    "hatch>=1.14.1",
    "hatch-vcs>=0.5.0",
    "ipython>=8.26,<9",
    "ipywidgets>=8.1.5,<9",
    "jupyterlab>=4.2,<5",
    "mypy>=1.11,<2",
    "nbstripout>=0.8,<1",
    "pre-commit>=3.8,<4",
    "radon>=6.0.1,<7",
    "ruff>=0.5,<1",
    "types-aiofiles>=24.1,<25",
    "xenon>=0.9.3,<1",
]
test = [
    "aiofile>=3.9,<4",
    "aiosqlite>=0.20,<1",
    "coverage>=7.7.1,<8",
    "llama-index-core>=0.12.30,<1",
    "llama-index-llms-openai>=0.3.33,<1",
    "moto[server]>=5.0,<6",
    "openai-responses>=0.11.4,<1",
    "optuna>=3.0,<4",
    "pytest>=8.3,<9",
    "pytest-asyncio>=1.0,<2",
    "pytest-benchmark>=5.1.0",
    "pytest-cases>=3.8,<4",
    "pytest-env>=1.1,<2",
    "pytest-rerunfailures>=15.0,<16",
    "ray[default,tune]>=2.40.0,<3",
    "s3fs>=2024.9.0",
    "time-machine>=2.15,<3",
    "websockets>=14.2,<15",
]
docs = [
    "mike>=2.1,<3",
    "mkdocs-jupyter>=0.25.1,<1",
    "mkdocs-material>=9.5,<10",
    "mkdocstrings[python]>=0.25,<1",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.uv]
package = true

[project.scripts]
plugboard = "plugboard.cli:app"

[tool.pytest.ini_options]  # Orchestrates code testing
# Note: pytest toml key subject to change:
# https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml
# env = []
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
markers = [
    "smoke: marks tests as smoke tests (deselect with '-m \"not smoke\"')"
]

[tool.coverage.run]
source = ["plugboard"]
branch = true
parallel = true
concurrency = ["multiprocessing", "thread"]
sigterm = true

[tool.mypy]  # Static type checking
exclude = [".git", "__pycache__", ".venv", "venv", "docs", "examples"]
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
plugins = "pydantic.mypy"

[tool.ruff]  # Code formatting and linting
line-length = 100
src = ["plugboard", "tests"]
extend-exclude = ["__pycache__"]
output-format = "grouped"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = ["D", "E", "F", "I", "W", "S"]
ignore = ["D105", "D107", "D401", "E203", "E226", "E24", "E731", "E741", "F541", "F821", "W605"]
exclude = ["examples/*"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-var-parameters = true

[tool.ruff.lint.isort]
known-first-party = ["plugboard"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
no-lines-before = ["local-folder"]
force-sort-within-sections = true
combine-as-imports = true
split-on-trailing-comma = true
relative-imports-order = "furthest-to-closest"
lines-after-imports = 2

[tool.radon]
exclude = "tests/*"
cc_min = "C"
mi_min = "B"
