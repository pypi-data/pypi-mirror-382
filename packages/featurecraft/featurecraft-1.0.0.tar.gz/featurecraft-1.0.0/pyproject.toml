[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "featurecraft"
version = "1.0.0"
description = "Automatic feature engineering, insights, and sklearn pipelines for tabular ML with optional time-series support."
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
{ name = "FeatureCraft Authors", email = "maintainers@featurecraft.dev" }
]
keywords = ["feature engineering", "machine learning", "sklearn", "tabular", "time series", "auto"]
classifiers = [
"Programming Language :: Python :: 3",
"License :: OSI Approved :: MIT License",
"Operating System :: OS Independent",
"Development Status :: 3 - Alpha",
"Intended Audience :: Science/Research",
"Intended Audience :: Developers",
"Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
"numpy>=1.23",
"pandas>=1.5",
"scikit-learn>=1.3",
"scipy>=1.10",
"matplotlib>=3.9.0",  # Security: updated to avoid known CVEs
"pillow>=10.0.0",  # Security: explicit pin for transitive deps
"jinja2>=3.1",
"typer>=0.9",
"pydantic>=2.5",
"rich>=13.3",
"joblib>=1.3",
# AI features
"openai>=1.0",
"anthropic>=0.18",
"tiktoken>=0.5",
# Enhanced functionality
"category-encoders>=2.6",
"imbalanced-learn>=0.10",
"shap>=0.44",
# Schema validation
"pandera>=0.17"
]

[project.optional-dependencies]
dev = [
"pytest>=7.4",
"pytest-cov>=4.1",
"pytest-xdist>=3.3",  # Parallel test execution
"ruff>=0.1.0",
"black>=23.0",
"mypy>=1.5",
"build>=1.0",
"twine>=4.0",
"hypothesis>=6.82",
"bandit>=1.7",  # Security linting
"pip-audit>=2.6",  # Dependency vulnerability scanning
"pre-commit>=3.5",  # Git hooks
]

[project.urls]
Homepage = "https://github.com/featurecraft/featurecraft"
Repository = "https://github.com/featurecraft/featurecraft"
Issues = "https://github.com/featurecraft/featurecraft/issues"
Documentation = "https://github.com/featurecraft/featurecraft/blob/main/docs/quickstart.md"

[project.scripts]
featurecraft = "featurecraft.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/featurecraft"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "README.md",
    "LICENSE",
]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
  | artifacts
  | data
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
extend-exclude = ["artifacts", "data", "logs", "*.ipynb"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "N",    # pep8-naming
    "PL",   # pylint
    "RUF",  # ruff-specific
    "S",    # bandit (security)
    "T20",  # flake8-print (catch forgotten prints)
    "DTZ",  # flake8-datetimez (timezone-aware datetimes)
    "RET",  # flake8-return
    "ARG",  # flake8-unused-arguments
]
ignore = [
    "E501",   # line too long (handled by black)
    "N803",   # argument name should be lowercase (allow X, y in ML)
    "N806",   # variable should be lowercase (allow X, y in ML)
    "S301",   # pickle usage (known, acceptable here)
    "S603",   # subprocess without shell=True (acceptable)
    "PLR0913", # too many arguments (config classes exempt)
    "PLR0912", # too many branches (refactor TODO)
    "PLR0915", # too many statements (refactor TODO)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # assert usage (required in tests)
    "ARG",    # unused arguments (fixtures)
    "PLR2004", # magic values (common in tests)
]
"examples/**/*.py" = [
    "T20",    # print statements (expected in examples)
    "INP001", # implicit namespace package
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=featurecraft",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",  # Start at 70%, increase over time
]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "ai: marks tests requiring AI providers",
]

[tool.coverage.run]
source = ["src/featurecraft"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true  # Enforce type hints
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
strict_concatenate = true
disallow_any_generics = false  # Too strict for ML code
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["sklearn.*", "scipy.*", "matplotlib.*", "jinja2.*", "category_encoders.*", "imblearn.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false  # Relax for tests

[tool.bandit]
exclude_dirs = ["tests", "examples", "docs"]
skips = ["B301", "B403", "B404", "B603"]  # pickle, import subprocess (known uses)

