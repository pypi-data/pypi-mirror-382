[project]
name = "gridworks-proactor"
version = "4.1.11.dev0"
description = "Gridworks Proactor"
authors = [
    { name = "Andrew Schweitzer", email = "schweitz72@gmail.com" },
    { name = "Jessica Millar", email = "jmillar@gridworks-consulting.com" }
]
requires-python = ">=3.11, <4"
readme = "README.md"
license = "MIT"
classifiers = ["Development Status :: 3 - Alpha"]
dependencies = [
    "pydantic>=2.10.0,<3",
    "python-dotenv>=1.0.0,<2",
    "xdg>=6.0.0,<7",
    "paho-mqtt>=2.1.0,<3",
    "result>=0.9.0,<0.10",
    "gridworks-protocol>=1.2.9,<2",
    "aiohttp>=3.11.11,<4",
    "yarl>=1.9.2,<2",
    "multidict>=6.0.4,<7",
    "pydantic-settings>=2.4.0,<3",
    "rich>=14.0.0,<15",
]

[project.optional-dependencies]
tests = [
    "pytest>=7.2.0",
    "pytest-asyncio>=0.20.3",
    "gridworks-cert>=0.4.2",
    "freezegun>=1.5.1,<2",
    "typer>=0.15.4",
    "click<8.2.0",
]

[project.urls]
Homepage = "https://github.com/thegridelectric/gridworks-proactor"
Repository = "https://github.com/thegridelectric/gridworks-proactor"
Documentation = "https://gridworks-proactor.readthedocs.io"
Changelog = "https://github.com/thegridelectric/gridworks-proactor/releases"

[project.scripts]
gwtest = "gwproactor_test.cli:app"

[dependency-groups]
dev = [
    "Pygments>=2.10.0",
    "coverage[toml]>=6.2",
    "furo>=2021.11.12",
    "mypy>=0.930",
    "pep8-naming>=0.12.1",
    "pre-commit>=2.16.0",
    "pre-commit-hooks>=4.1.0",
    "pyupgrade>=2.29.1",
    "sphinx>=4.3.2",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-click>=3.0.2",
    "xdoctest[colors]>=0.15.10",
    "myst-parser>=0.16.1",
    "sphinxcontrib-mermaid>=0.8.1,<0.9",
    "ruff>=0.6.2,<0.7",
    "importtime-output-wrapper>=1.1.0,<2",
    "nox>=2025.5.1",
    "nox-uv>=0.6.2",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/gwproactor",
    "src/gwproactor_test",
]

[tool.hatch.build.targets.wheel]
include = [
    "src/gwproactor",
    "src/gwproactor_test",
]

[tool.hatch.build.targets.wheel.sources]
"src/gwproactor" = "gwproactor"
"src/gwproactor_test" = "gwproactor_test"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["gwproactor", "gwproactor_test", "tests"]

[tool.coverage.report]
show_missing = false
fail_under = 75

[tool.mypy]
strict = true
warn_unreachable = true
pretty = false
show_column_numbers = false
show_error_context = false
exclude = [
    "hacking",
]
plugins = [
    "pydantic.mypy"
]

[[tool.mypy.overrides]]
module = [
    "trogon",
]
ignore_missing_imports = true

[tool.ruff]
exclude = [
    ".ci",
    ".github",
    "CodeGenerationTools",
    "for_docker",
    "rabbit",
    ".git",
    ".mypy_cache",
    ".nox",
    "htmlcov",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "pythonProject",
    ".idea",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "docs",
]
output-format = "concise"
fix = true
show-fixes = true

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
# default select used by  ruff: ["E4", "E7", "E9", "F"]
select = ["ALL"]
ignore = [
    "ANN101", # Deprecated
    "ANN102", # Deprecated
    "ANN401", # When we use 'Any' we mean it.
    "B027",
    "COM812",
    "CPY",
    "D",
    "DOC",
    "E252", # Formatter
    "E302",
    "E501",
    "EM",
    "FA", # We only support Python >= 3.10, so we shouldn't need this
    "ISC001",
    "N801",
    "N803", # Protocol sometimes calls for CamelCase arguments.
    "N818", # We disagree with Pep8 about naming exceptions.
    "PGH004", # ruff and IDE can disagree, in which case a simple # noqa might be need.
    "PLW1514",
    "TRY003", # Many of our ValueErrors contain messages that are not plausibly resuable.
    "RUF100", # ruff and IDE often disagree about whether a 'noqa' is in use.
    "W191",
    "W291", # Formatter
    "W293", # Formatter
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "ARG001", # Unused function args -> fixtures nevertheless are functionally relevant...
    "C901", # Complexity
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "G004", # Ok to use f-strings in logging in test code
    "N806", # We want to be able to have non pep8 variable names.
    "PLR0912", # Complexity
    "PLR0913", # Complexity
    "PLR0915", # Complexity
    "PT011", # It's not practical to match strings in exceptions caught by pytest.raises()
    "S101", # asserts allowed in tests...
]
"src/gwproactor_test/**/*.py" = [
    "ARG001",
    "C901", # Complexity
    "FBT",
    "G004",
    "N806", # We want to be able to have non pep8 variable names.
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PT011",
    "S101",
]
"hacking/**/*.py" = [
    "DTZ005",
    "ERA001",
    "FBT001",
    "PLW0603",
    "PERF203",
    "SIM105",
    "T201",
]

