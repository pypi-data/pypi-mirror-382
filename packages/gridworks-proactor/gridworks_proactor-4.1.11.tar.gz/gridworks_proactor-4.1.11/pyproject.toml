[tool.poetry]
name = "gridworks-proactor"
version = "4.1.11"
description = "Gridworks Proactor"
authors = ["Jessica Millar <jmillar@gridworks-consulting.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/thegridelectric/gridworks-proactor"
repository = "https://github.com/thegridelectric/gridworks-proactor"
documentation = "https://gridworks-proactor.readthedocs.io"
packages = [
    { include = "gwproactor", from = "src" },
    { include = "gwproactor_test", from = "src" },
]
classifiers = [
    "Development Status :: 4 - Beta",
]

[tool.poetry.scripts]
gwtest = "gwproactor_test.cli:app"

[tool.poetry.urls]
Changelog = "https://github.com/thegridelectric/gridworks-proactor/releases"

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.10.0"
python-dotenv = "^1.0.0"
xdg = "^6.0.0"
paho-mqtt = "^2.1.0"
result = "^0.9.0"
gridworks-protocol = "^1.2.9"
# gridworks-protocol = { path = "../gridworks-protocol", develop = true }
# gridworks-protocol = { git = "https://github.com/thegridelectric/gridworks-protocol.git", branch = "dev" }
aiohttp = "^3.11.11"
yarl = "^1.9.2"
multidict = "^6.0.4"
pytest = { version = ">=7.2.0", optional = true }
pytest-asyncio = { version = ">=0.20.3", optional = true }
gridworks-cert = { version = ">=0.4.2", optional = true }
freezegun = { version = "^1.5.1", optional = true }
pydantic-settings = "^2.4.0"
rich = "^14.0.0"
typer = { version = ">=0.15.4", optional = true }
# TODO: remove when typer adjusts to click 8.2:
#   https://github.com/fastapi/typer/pull/1240
#   https://github.com/fastapi/typer/discussions/1233
#   Older layers of discussion of click 8.2 support in typer:
#     https://github.com/fastapi/typer/discussions/1215
#     https://github.com/fastapi/typer/pull/1222
#     https://github.com/fastapi/typer/commits/click-8.2/
#
click = { version = "<8.2.0", optional = true }

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
coverage = { extras = ["toml"], version = ">=6.2" }
furo = ">=2021.11.12"
mypy = ">=0.930"
pep8-naming = ">=0.12.1"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pyupgrade = ">=2.29.1"
sphinx = ">=4.3.2"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = ">=3.0.2"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
sphinxcontrib-mermaid = "^0.8.1"
ruff = "^0.6.2"
importtime-output-wrapper = "^1.1.0"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.poetry.extras]
tests = ["pytest", "pytest-asyncio", "gridworks-cert", "freezegun", "typer", "click"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["gwproactor", "gwproactor_test", "tests"]

[tool.coverage.report]
show_missing = false
fail_under = 75

[tool.mypy]
strict = true
warn_unreachable = true
pretty = false
show_column_numbers = false
show_error_context = false
exclude = [
    "hacking",
]
plugins = [
    "pydantic.mypy"
]


[[tool.mypy.overrides]]
module = [
    "trogon",
]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".ci",
    ".github",
    "CodeGenerationTools",
    "for_docker",
    "rabbit",
    ".git",
    ".mypy_cache",
    ".nox",
    "htmlcov",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "pythonProject",
    ".idea",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "docs",
]
output-format = "concise"
fix = true
show-fixes = true

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
# default select used by  ruff: ["E4", "E7", "E9", "F"]
select = ["ALL"]
ignore = [
    "ANN101", # Deprecated
    "ANN102", # Deprecated
    "ANN401", # When we use 'Any' we mean it.
    "B027",
    "COM812",
    "CPY",
    "D",
    "DOC",
    "E252", # Formatter
    "E302",
    "E501",
    "EM",
    "FA", # We only support Python >= 3.10, so we shouldn't need this
    "ISC001",
    "N801",
    "N803", # Protocol sometimes calls for CamelCase arguments.
    "N818", # We disagree with Pep8 about naming exceptions.
    "PGH004", # ruff and IDE can disagree, in which case a simple # noqa might be need.
    "PLW1514",
    "TRY003", # Many of our ValueErrors contain messages that are not plausibly resuable.
    "RUF100", # ruff and IDE often disagree about whether a 'noqa' is in use.
    "W191",
    "W291", # Formatter
    "W293", # Formatter
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "ARG001", # Unused function args -> fixtures nevertheless are functionally relevant...
    "C901", # Complexity
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "G004", # Ok to use f-strings in logging in test code
    "N806", # We want to be able to have non pep8 variable names.
    "PLR0912", # Complexity
    "PLR0913", # Complexity
    "PLR0915", # Complexity
    "PT011", # It's not practical to match strings in exceptions caught by pytest.raises()
    "S101", # asserts allowed in tests...
]
"src/gwproactor_test/**/*.py" = [
    "ARG001",
    "C901", # Complexity
    "FBT",
    "G004",
    "N806", # We want to be able to have non pep8 variable names.
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PT011",
    "S101",
]
"hacking/**/*.py" = [
    "DTZ005",
    "ERA001",
    "FBT001",
    "PLW0603",
    "PERF203",
    "SIM105",
    "T201",
]

