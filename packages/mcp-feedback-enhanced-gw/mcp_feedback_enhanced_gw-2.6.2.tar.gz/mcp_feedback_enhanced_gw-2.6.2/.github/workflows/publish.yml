name: Auto Release to PyPI

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (ignored if custom_version is provided)'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch    # 2.0.0 -> 2.0.1 (bug fixes, security patches, documentation updates)
        - minor    # 2.0.0 -> 2.1.0 (new features, enhancements, backward-compatible changes)
        - major    # 2.0.0 -> 3.0.0 (breaking changes, architecture refactoring, API changes)
      custom_version:
        description: 'Custom version number (e.g., 2.5.0) - overrides version_type if provided'
        required: false
        type: string
      include_desktop:
        description: 'ÊòØÂê¶ÂåÖÂê´Ê°åÈù¢ÊáâÁî®‰∫åÈÄ≤Âà∂Êñá‰ª∂'
        required: true
        default: true
        type: boolean
      desktop_build_run_id:
        description: 'Ê°åÈù¢ÊáâÁî®ÊßãÂª∫ÁöÑ Run IDÔºàÂèØÈÅ∏ÔºåÁïôÁ©∫‰ΩøÁî®ÊúÄÊñ∞ÁöÑÊàêÂäüÊßãÂª∫Ôºâ'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit dependency changes if any
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "üì¶ Update dependencies" || true
        fi

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep '^version =' pyproject.toml | cut -d'"' -f2)
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Determine new version
      id: bump_version
      run: |
        CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"

        if [ -n "$CUSTOM_VERSION" ]; then
          echo "üéØ Using custom version: $CUSTOM_VERSION"

          # Validate version format (basic semver check)
          if [[ ! "$CUSTOM_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Custom version must be in format X.Y.Z (e.g., 2.5.0)"
            exit 1
          fi

          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$CUSTOM_VERSION\"/" pyproject.toml

          # Update version in .bumpversion.cfg
          sed -i "s/^current_version = .*/current_version = $CUSTOM_VERSION/" .bumpversion.cfg

          NEW_VERSION="$CUSTOM_VERSION"
          echo "‚úÖ Set custom version: $NEW_VERSION"
        else
          echo "üîÑ Using automatic version bump: ${{ github.event.inputs.version_type }}"
          uv run bump2version --allow-dirty ${{ github.event.inputs.version_type }}
          NEW_VERSION=$(grep '^version =' pyproject.toml | cut -d'"' -f2)
          echo "‚úÖ Bumped version to: $NEW_VERSION"
        fi

        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update __init__.py version
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new }}"
        sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/mcp_feedback_enhanced/__init__.py

    - name: Extract Release Highlights
      id: extract_highlights
      run: |
        NEW_VERSION="v${{ steps.bump_version.outputs.new }}"

        # Extract highlights from English CHANGELOG
        if [ -f "RELEASE_NOTES/CHANGELOG.en.md" ]; then
          echo "üîç Extracting highlights for $NEW_VERSION from CHANGELOG..."

          # Step 1: Find the version section and extract everything until next version
          sed -n "/## \[${NEW_VERSION}\]/,/## \[/p" RELEASE_NOTES/CHANGELOG.en.md | head -n -1 > version_section.txt

          # Step 2: Try to extract highlights section
          if grep -q "### üåü Highlights" version_section.txt; then
            echo "üìù Found Highlights section"
            sed -n '/### üåü Highlights/,/### /p' version_section.txt | head -n -1 | tail -n +2 | grep -E "^[^#]" | head -5 > highlights.txt
          elif grep -q "### ‚ú® New Features" version_section.txt; then
            echo "üìù Using New Features section as highlights"
            sed -n '/### ‚ú® New Features/,/### /p' version_section.txt | head -n -1 | tail -n +2 | grep -E "^- " | head -4 > highlights.txt
          else
            echo "‚ö†Ô∏è No highlights or new features section found"
            echo "" > highlights.txt
          fi

          # Clean up temporary file
          rm -f version_section.txt

          # Check if we got any content
          if [ -s highlights.txt ]; then
            echo "‚úÖ Successfully extracted highlights for $NEW_VERSION"
            echo "üìÑ Content preview:"
            head -2 highlights.txt
          else
            echo "‚ö†Ô∏è No highlights extracted, using default content"
            echo "- üöÄ New features and improvements" > highlights.txt
            echo "- üêõ Bug fixes and optimizations" >> highlights.txt
          fi
        else
          echo "‚ö†Ô∏è CHANGELOG.en.md not found, using default highlights"
          echo "- üöÄ New features and improvements" > highlights.txt
          echo "- üêõ Bug fixes and optimizations" >> highlights.txt
        fi

    - name: Generate Release Body
      id: release_body
      run: |
        NEW_VERSION="v${{ steps.bump_version.outputs.new }}"

        # Get release title from English CHANGELOG
        if [ -f "RELEASE_NOTES/CHANGELOG.en.md" ]; then
          RELEASE_TITLE=$(grep "## \[${NEW_VERSION}\]" RELEASE_NOTES/CHANGELOG.en.md | head -1 | sed 's/## \[.*\] - //')
        fi
        if [ -z "$RELEASE_TITLE" ]; then
          RELEASE_TITLE="Latest Release"
        fi

        # Create release body header
        echo "# Release ${NEW_VERSION} - ${RELEASE_TITLE}" > release_body.md
        echo "" >> release_body.md
        echo "## üåü Key Highlights" >> release_body.md

        # Add highlights
        if [ -s highlights.txt ]; then
          cat highlights.txt >> release_body.md
        else
          echo "- üöÄ New features and improvements" >> release_body.md
          echo "- üêõ Bug fixes and optimizations" >> release_body.md
        fi

        # Add multi-language links section
        echo "" >> release_body.md
        echo "## üåê Detailed Release Notes" >> release_body.md
        echo "" >> release_body.md
        echo "### üá∫üá∏ English" >> release_body.md
        echo "üìñ **[View Complete English Release Notes](https://github.com/nullmastermind/mcp-feedback-enhanced/blob/main/RELEASE_NOTES/CHANGELOG.en.md)**" >> release_body.md
        echo "" >> release_body.md
        echo "### üáπüáº ÁπÅÈ´î‰∏≠Êñá" >> release_body.md
        echo "üìñ **[Êü•ÁúãÂÆåÊï¥ÁπÅÈ´î‰∏≠ÊñáÁôºÂ∏ÉË™™Êòé](https://github.com/nullmastermind/mcp-feedback-enhanced/blob/main/RELEASE_NOTES/CHANGELOG.zh-TW.md)**" >> release_body.md
        echo "" >> release_body.md
        echo "### üá®üá≥ ÁÆÄ‰Ωì‰∏≠Êñá" >> release_body.md
        echo "üìñ **[Êü•ÁúãÂÆåÊï¥ÁÆÄ‰Ωì‰∏≠ÊñáÂèëÂ∏ÉËØ¥Êòé](https://github.com/nullmastermind/mcp-feedback-enhanced/blob/main/RELEASE_NOTES/CHANGELOG.zh-CN.md)**" >> release_body.md
        echo "" >> release_body.md
        echo "---" >> release_body.md
        echo "" >> release_body.md
        echo "## üì¶ Quick Installation / Âø´ÈÄüÂÆâË£ù" >> release_body.md
        echo "" >> release_body.md
        echo '```bash' >> release_body.md
        echo "# Latest version / ÊúÄÊñ∞ÁâàÊú¨" >> release_body.md
        echo "uvx mcp-feedback-enhanced-gw@latest" >> release_body.md
        echo "" >> release_body.md
        echo "# This specific version / Ê≠§ÁâπÂÆöÁâàÊú¨" >> release_body.md
        echo "uvx mcp-feedback-enhanced-gw@${NEW_VERSION}" >> release_body.md
        echo '```' >> release_body.md
        echo "" >> release_body.md
        echo "## üîó Links" >> release_body.md
        echo "- **Documentation**: [README.md](https://github.com/nullmastermind/mcp-feedback-enhanced/blob/main/README.md)" >> release_body.md
        echo "- **Full Changelog**: [CHANGELOG](https://github.com/nullmastermind/mcp-feedback-enhanced/blob/main/RELEASE_NOTES/)" >> release_body.md
        echo "- **Issues**: [GitHub Issues](https://github.com/nullmastermind/mcp-feedback-enhanced/issues)" >> release_body.md
        echo "" >> release_body.md
        echo "---" >> release_body.md
        echo "**Release automatically generated from CHANGELOG system** ü§ñ" >> release_body.md

        echo "Release body generated successfully"

    - name: Verify CHANGELOG Files
      run: |
        NEW_VERSION="v${{ steps.bump_version.outputs.new }}"

        # Check if CHANGELOG files exist and contain the new version
        echo "üîç Verifying CHANGELOG files contain version ${NEW_VERSION}..."

        MISSING_FILES=""

        if [ -f "RELEASE_NOTES/CHANGELOG.en.md" ]; then
          if ! grep -q "\[${NEW_VERSION}\]" "RELEASE_NOTES/CHANGELOG.en.md"; then
            echo "‚ö†Ô∏è Warning: ${NEW_VERSION} not found in CHANGELOG.en.md"
            MISSING_FILES="${MISSING_FILES} en"
          else
            echo "‚úÖ Found ${NEW_VERSION} in CHANGELOG.en.md"
          fi
        else
          echo "‚ùå CHANGELOG.en.md not found"
          MISSING_FILES="${MISSING_FILES} en"
        fi

        if [ -f "RELEASE_NOTES/CHANGELOG.zh-TW.md" ]; then
          if ! grep -q "\[${NEW_VERSION}\]" "RELEASE_NOTES/CHANGELOG.zh-TW.md"; then
            echo "‚ö†Ô∏è Warning: ${NEW_VERSION} not found in CHANGELOG.zh-TW.md"
            MISSING_FILES="${MISSING_FILES} zh-TW"
          else
            echo "‚úÖ Found ${NEW_VERSION} in CHANGELOG.zh-TW.md"
          fi
        else
          echo "‚ùå CHANGELOG.zh-TW.md not found"
          MISSING_FILES="${MISSING_FILES} zh-TW"
        fi

        if [ -f "RELEASE_NOTES/CHANGELOG.zh-CN.md" ]; then
          if ! grep -q "\[${NEW_VERSION}\]" "RELEASE_NOTES/CHANGELOG.zh-CN.md"; then
            echo "‚ö†Ô∏è Warning: ${NEW_VERSION} not found in CHANGELOG.zh-CN.md"
            MISSING_FILES="${MISSING_FILES} zh-CN"
          else
            echo "‚úÖ Found ${NEW_VERSION} in CHANGELOG.zh-CN.md"
          fi
        else
          echo "‚ùå CHANGELOG.zh-CN.md not found"
          MISSING_FILES="${MISSING_FILES} zh-CN"
        fi

        if [ -n "$MISSING_FILES" ]; then
          echo ""
          echo "üìù Note: Please ensure CHANGELOG files are updated with version ${NEW_VERSION}"
          echo "Missing or incomplete files:${MISSING_FILES}"
          echo "The release will continue, but manual CHANGELOG updates may be needed."
        else
          echo "‚úÖ All CHANGELOG files verified successfully"
        fi

    - name: Commit version bump
      run: |
        CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
        VERSION_METHOD=""

        if [ -n "$CUSTOM_VERSION" ]; then
          VERSION_METHOD="Custom version specified: $CUSTOM_VERSION"
        else
          VERSION_METHOD="Auto-bumped (${{ github.event.inputs.version_type }})"
        fi

        git add .
        git commit -m "üîñ Release v${{ steps.bump_version.outputs.new }}

        - Updated version to ${{ steps.bump_version.outputs.new }}
        - $VERSION_METHOD
        - Auto-generated release from workflow"
        git tag "v${{ steps.bump_version.outputs.new }}"

    - name: Check desktop build availability
      if: ${{ github.event.inputs.include_desktop == 'true' }}
      id: check_desktop
      run: |
        echo "üîç Ê™¢Êü•Ê°åÈù¢ÊáâÁî®ÊßãÂª∫ÂèØÁî®ÊÄß..."

        # Â¶ÇÊûúÊåáÂÆö‰∫Ü run_idÔºå‰ΩøÁî®ÊåáÂÆöÁöÑÊßãÂª∫
        if [ -n "${{ github.event.inputs.desktop_build_run_id }}" ]; then
          echo "üéØ ‰ΩøÁî®ÊåáÂÆöÁöÑÊßãÂª∫ Run ID: ${{ github.event.inputs.desktop_build_run_id }}"
          echo "run_id=${{ github.event.inputs.desktop_build_run_id }}" >> $GITHUB_OUTPUT
        else
          echo "üîç Êü•ÊâæÊúÄÊñ∞ÁöÑÊàêÂäüÊ°åÈù¢ÊßãÂª∫..."

          # ‰ΩøÁî® GitHub API Êü•ÊâæÊúÄÊñ∞ÁöÑÊàêÂäüÊßãÂª∫
          LATEST_RUN=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build-desktop.yml/runs?status=success&per_page=1" \
            | jq -r '.workflow_runs[0].id // empty')

          if [ -n "$LATEST_RUN" ] && [ "$LATEST_RUN" != "null" ]; then
            echo "‚úÖ ÊâæÂà∞ÊúÄÊñ∞ÊàêÂäüÊßãÂª∫: $LATEST_RUN"
            echo "run_id=$LATEST_RUN" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Ê≤íÊúâÊâæÂà∞ÊàêÂäüÁöÑÊ°åÈù¢ÊßãÂª∫"
            echo "üí° Ë´ãÂÖàÈÅãË°å 'Build Desktop Applications' Â∑•‰ΩúÊµÅÁ®ã"
            exit 1
          fi
        fi

    - name: Check desktop applications in Git
      if: ${{ github.event.inputs.include_desktop == 'true' }}
      run: |
        echo "üîç Ê™¢Êü• Git ‰∏≠ÁöÑÊ°åÈù¢ÊáâÁî®Á®ãÂºè‰∫åÈÄ≤Âà∂Ê™îÊ°à..."

        if [ -d "src/mcp_feedback_enhanced/desktop_release" ]; then
          echo "üìÅ Ê°åÈù¢ÊáâÁî®ÁõÆÈåÑÂÖßÂÆπÔºö"
          ls -la src/mcp_feedback_enhanced/desktop_release/

          # Ê™¢Êü•ÊòØÂê¶Êúâ‰∫åÈÄ≤Âà∂Êñá‰ª∂
          BINARY_COUNT=$(find src/mcp_feedback_enhanced/desktop_release -name "mcp-feedback-enhanced-gw-desktop*" -type f | wc -l)
          echo "üìä ÊâæÂà∞ $BINARY_COUNT ÂÄãÊ°åÈù¢‰∫åÈÄ≤Âà∂Êñá‰ª∂"

          if [ $BINARY_COUNT -eq 0 ]; then
            echo "‚ùå Ê≤íÊúâÊâæÂà∞Ê°åÈù¢‰∫åÈÄ≤Âà∂Êñá‰ª∂"
            echo "üí° Ë´ãÂÖàÈÅãË°å 'Build Desktop Applications' Â∑•‰ΩúÊµÅÁ®ã"
            echo "   Ë©≤Â∑•‰ΩúÊµÅÁ®ãÊúÉËá™ÂãïÊßãÂª∫‰∏¶Êèê‰∫§Ê°åÈù¢‰∫åÈÄ≤Âà∂Êñá‰ª∂Âà∞ Git"
            exit 1
          elif [ $BINARY_COUNT -lt 4 ]; then
            echo "‚ö†Ô∏è Ê°åÈù¢‰∫åÈÄ≤Âà∂Êñá‰ª∂‰∏çÂÆåÊï¥ ($BINARY_COUNT/4)"
            echo "üí° Ë´ãÈáçÊñ∞ÈÅãË°å 'Build Desktop Applications' Â∑•‰ΩúÊµÅÁ®ã"
            echo "   Á¢∫‰øùÊâÄÊúâ 4 ÂÄãÂπ≥Âè∞ÈÉΩÊßãÂª∫ÊàêÂäü"
            exit 1
          else
            echo "‚úÖ Ê°åÈù¢‰∫åÈÄ≤Âà∂Êñá‰ª∂ÂÆåÊï¥ ($BINARY_COUNT/4)"
          fi
        else
          echo "‚ùå Ê°åÈù¢ÊáâÁî®ÁõÆÈåÑ‰∏çÂ≠òÂú®"
          echo "üí° Ë´ãÂÖàÈÅãË°å 'Build Desktop Applications' Â∑•‰ΩúÊµÅÁ®ã"
          echo "   Ë©≤Â∑•‰ΩúÊµÅÁ®ãÊúÉËá™ÂãïÊßãÂª∫‰∏¶Êèê‰∫§Ê°åÈù¢‰∫åÈÄ≤Âà∂Êñá‰ª∂Âà∞ Git"
          exit 1
        fi

    - name: Validate desktop binaries
      if: ${{ github.event.inputs.include_desktop == 'true' }}
      run: |
        echo "üîç È©óË≠âÊ°åÈù¢ÊáâÁî®‰∫åÈÄ≤Âà∂Êñá‰ª∂..."

        if [ ! -d "src/mcp_feedback_enhanced/desktop_release" ]; then
          echo "‚ùå Ê°åÈù¢ÊáâÁî®ÁõÆÈåÑ‰∏çÂ≠òÂú®"
          exit 1
        fi

        # Ê™¢Êü•ÂêÑÂπ≥Âè∞Êñá‰ª∂
        PLATFORMS=(
          "mcp-feedback-enhanced-gw-desktop.exe:Windows"
          "mcp-feedback-enhanced-gw-desktop-macos-intel:macOS Intel"
          "mcp-feedback-enhanced-gw-desktop-macos-arm64:macOS ARM64"
          "mcp-feedback-enhanced-gw-desktop-linux:Linux"
        )

        VALID_COUNT=0
        for platform_info in "${PLATFORMS[@]}"; do
          IFS=':' read -r filename description <<< "$platform_info"
          filepath="src/mcp_feedback_enhanced/desktop_release/$filename"

          if [ -f "$filepath" ]; then
            filesize=$(stat -f%z "$filepath" 2>/dev/null || stat -c%s "$filepath" 2>/dev/null || echo "0")
            if [ "$filesize" -gt 1000000 ]; then  # Ëá≥Â∞ë 1MB
              echo "‚úÖ $description: $filename (${filesize} bytes)"
              VALID_COUNT=$((VALID_COUNT + 1))
            else
              echo "‚ö†Ô∏è $description: $filename Êñá‰ª∂Â§™Â∞è (${filesize} bytes)"
            fi
          else
            echo "‚ùå $description: $filename ‰∏çÂ≠òÂú®"
          fi
        done

        echo ""
        echo "üìä È©óË≠âÁµêÊûú: $VALID_COUNT/4 ÂÄãÂπ≥Âè∞ÊúâÊïà"

        if [ $VALID_COUNT -eq 0 ]; then
          echo "‚ùå Ê≤íÊúâÊúâÊïàÁöÑÊ°åÈù¢ÊáâÁî®‰∫åÈÄ≤Âà∂Êñá‰ª∂"
          echo "üí° Âª∫Ë≠∞Ôºö"
          echo "  1. Ê™¢Êü• 'Build Desktop Applications' Â∑•‰ΩúÊµÅÁ®ãÊòØÂê¶ÊàêÂäü"
          echo "  2. Á¢∫Ë™çÊåáÂÆöÁöÑ Run ID ÊòØÂê¶Ê≠£Á¢∫"
          echo "  3. ÊàñËÄÖË®≠ÁΩÆ include_desktop ÁÇ∫ false"
          exit 1
        elif [ $VALID_COUNT -lt 4 ]; then
          echo "‚ùå ‰∏çÊòØÊâÄÊúâÂπ≥Âè∞ÈÉΩÊúâÊïàÔºåÁÑ°Ê≥ï‰øùË≠âÂÆåÊï¥ÁöÑÂ§öÂπ≥Âè∞ÊîØÊè¥"
          echo "üìã Ë¶ÅÊ±ÇÔºöÊ°åÈù¢ÊáâÁî®ÂøÖÈ†àÊîØÊè¥ÊâÄÊúâ 4 ÂÄãÂπ≥Âè∞"
          echo "  - Windows x64"
          echo "  - macOS Intel"
          echo "  - macOS Apple Silicon"
          echo "  - Linux x64"
          echo ""
          echo "üîß Ëß£Ê±∫ÊñπÊ°àÔºö"
          echo "  1. ÈáçÊñ∞ÈÅãË°å 'Build Desktop Applications' Â∑•‰ΩúÊµÅÁ®ã"
          echo "  2. Á¢∫‰øùÊâÄÊúâÂπ≥Âè∞ÈÉΩÊßãÂª∫ÊàêÂäü‰∏îÊñá‰ª∂Â§ßÂ∞èÊ≠£Â∏∏"
          echo "  3. ÊàñËÄÖË®≠ÁΩÆ include_desktop ÁÇ∫ falseÔºàÂÉÖÁôº‰Ωà Web ÁâàÊú¨Ôºâ"
          exit 1
        else
          echo "‚úÖ ÊâÄÊúâ 4 ÂÄãÂπ≥Âè∞ÈÉΩÈ©óË≠âÈÄöÈÅéÔºåÂèØ‰ª•Áôº‰ΩàÂÆåÊï¥ÁöÑÂ§öÂπ≥Âè∞Ê°åÈù¢ÊáâÁî®"
        fi

    - name: Skip desktop applications
      if: ${{ github.event.inputs.include_desktop != 'true' }}
      run: |
        echo "‚è≠Ô∏è Ë∑≥ÈÅéÊ°åÈù¢ÊáâÁî®ÔºåÂÉÖÁôº‰Ωà Web ÁâàÊú¨"
        echo "üí° Áî®Êà∂Â∞áÂè™ËÉΩ‰ΩøÁî® Web Ê®°ÂºèÔºåÁÑ°Ê≥ï‰ΩøÁî®Ê°åÈù¢Ê®°Âºè"

    - name: Prepare package for build
      run: |
        echo "üîß Ê∫ñÂÇôÂåÖÊßãÂª∫..."

        # Á¢∫‰øùÊ°åÈù¢ÊáâÁî®ÁõÆÈåÑÂ≠òÂú®ÔºàÂç≥‰ΩøÊòØÁ©∫ÁöÑÔºâ
        mkdir -p src/mcp_feedback_enhanced/desktop_release

        # Â¶ÇÊûúÊ≤íÊúâÂåÖÂê´Ê°åÈù¢ÊáâÁî®ÔºåÂâµÂª∫‰∏ÄÂÄãË™™ÊòéÊñá‰ª∂
        if [ "${{ github.event.inputs.include_desktop }}" != "true" ] || [ ! -f "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop.exe" ]; then
          echo "üîç Ê°åÈù¢ÊáâÁî®Êú™ÂåÖÂê´ÔºåÂâµÂª∫Ë™™ÊòéÊñá‰ª∂..."
          cat > src/mcp_feedback_enhanced/desktop_release/README.md << 'EOF'
        # Ê°åÈù¢ÊáâÁî®Á®ãÂºè

        Ê≠§ÁâàÊú¨‰∏çÂåÖÂê´Ê°åÈù¢ÊáâÁî®Á®ãÂºè‰∫åÈÄ≤Âà∂Ê™îÊ°à„ÄÇ

        ## ‰ΩøÁî®ÊñπÂºè

        ÂÉÖÊîØÊè¥ Web Ê®°Âºè
        uvx mcp-feedback-enhanced-gw test --web

        Â¶ÇÈúÄÊ°åÈù¢ÊáâÁî®ÊîØÊè¥ÔºåË´ã‰ΩøÁî®ÂåÖÂê´Ê°åÈù¢ÊáâÁî®ÁöÑÁâàÊú¨„ÄÇ
        EOF
        else
          echo "‚úÖ Ê°åÈù¢ÊáâÁî®Â∑≤ÂåÖÂê´"
        fi

        # Á¢∫‰øù __init__.py Â≠òÂú®
        if [ ! -f "src/mcp_feedback_enhanced/desktop_release/__init__.py" ]; then
          echo '"""Ê°åÈù¢ÊáâÁî®Á®ãÂºè‰∫åÈÄ≤Âà∂Ê™îÊ°à"""' > src/mcp_feedback_enhanced/desktop_release/__init__.py
        fi

        echo "üìÅ Ê°åÈù¢ÊáâÁî®ÁõÆÈåÑÂÖßÂÆπÔºö"
        ls -la src/mcp_feedback_enhanced/desktop_release/



    - name: Build package
      run: uv build

    - name: Check package
      run: uv run twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}



    - name: Push changes and tags
      run: |
        git push origin main
        git push origin "v${{ steps.bump_version.outputs.new }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.bump_version.outputs.new }}"
        name: "Release v${{ steps.bump_version.outputs.new }}"
        body_path: release_body.md
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "üéâ Release v${{ steps.bump_version.outputs.new }} completed successfully!"
        echo ""
        echo "üì¶ Published to PyPI: https://pypi.org/project/mcp-feedback-enhanced/"
        echo "üöÄ GitHub Release: https://github.com/Minidoracat/mcp-feedback-enhanced/releases/tag/v${{ steps.bump_version.outputs.new }}"
        echo "üìù Release notes generated from CHANGELOG files"
        echo ""

        # È°ØÁ§∫Ê°åÈù¢ÊáâÁî®ÁãÄÊÖã
        if [ "${{ github.event.inputs.include_desktop }}" = "true" ]; then
          echo "üñ•Ô∏è Ê°åÈù¢ÊáâÁî®ÁãÄÊÖãÔºö"
          if [ -d "src/mcp_feedback_enhanced/desktop_release" ] && [ -n "$(ls -A src/mcp_feedback_enhanced/desktop_release 2>/dev/null)" ]; then
            echo "  ‚úÖ Ê°åÈù¢ÊáâÁî®Â∑≤ÂåÖÂê´Âú®Áôº‰Ωà‰∏≠"
            echo "  üì± ÊîØÊè¥ÁöÑÂπ≥Âè∞Ôºö"

            # Ê™¢Êü•ÂêÑÂπ≥Âè∞‰∏¶È°ØÁ§∫Êñá‰ª∂Â§ßÂ∞è
            if [ -f "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop.exe" ]; then
              size=$(stat -f%z "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop.exe" 2>/dev/null || stat -c%s "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop.exe" 2>/dev/null || echo "unknown")
              echo "    - ‚úÖ Windows x64 (${size} bytes)"
            else
              echo "    - ‚ùå Windows x64 (Áº∫Â§±)"
            fi

            if [ -f "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-macos-intel" ]; then
              size=$(stat -f%z "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-macos-intel" 2>/dev/null || stat -c%s "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-macos-intel" 2>/dev/null || echo "unknown")
              echo "    - ‚úÖ macOS Intel (${size} bytes)"
            else
              echo "    - ‚ùå macOS Intel (Áº∫Â§±)"
            fi

            if [ -f "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-macos-arm64" ]; then
              size=$(stat -f%z "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-macos-arm64" 2>/dev/null || stat -c%s "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-macos-arm64" 2>/dev/null || echo "unknown")
              echo "    - ‚úÖ macOS Apple Silicon (${size} bytes)"
            else
              echo "    - ‚ùå macOS Apple Silicon (Áº∫Â§±)"
            fi

            if [ -f "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-linux" ]; then
              size=$(stat -f%z "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-linux" 2>/dev/null || stat -c%s "src/mcp_feedback_enhanced/desktop_release/mcp-feedback-enhanced-gw-desktop-linux" 2>/dev/null || echo "unknown")
              echo "    - ‚úÖ Linux x64 (${size} bytes)"
            else
              echo "    - ‚ùå Linux x64 (Áº∫Â§±)"
            fi

            echo "  üîó ÊßãÂª∫‰æÜÊ∫ê: Run ID ${{ steps.check_desktop.outputs.run_id }}"
          else
            echo "  ‚ö†Ô∏è Ê°åÈù¢ÊáâÁî®Êú™ÂåÖÂê´ÔºàÂèØËÉΩÊßãÂª∫Â§±ÊïóÔºâ"
          fi
        else
          echo "üñ•Ô∏è Ê°åÈù¢ÊáâÁî®ÁãÄÊÖãÔºö‚è≠Ô∏è Â∑≤Ë∑≥ÈÅéÔºàÂÉÖ Web ÁâàÊú¨Ôºâ"
        fi

        echo ""
        echo "‚úÖ Next steps:"
        echo "  - Check the release on GitHub"
        echo "  - Verify the package on PyPI"
        echo "  - Test installation with: uvx mcp-feedback-enhanced@v${{ steps.bump_version.outputs.new }}"
        if [ "${{ github.event.inputs.include_desktop }}" = "true" ]; then
          echo "  - Test desktop mode with: uvx mcp-feedback-enhanced@v${{ steps.bump_version.outputs.new }} test --desktop"
        fi
        echo ""
        echo "üìã Note: Make sure CHANGELOG files are updated for future releases"
