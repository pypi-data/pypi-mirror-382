[project]
name = "GTMKit"
version = "0.1.0"
description = "A Python library for exploring chemical space using Generative Topographic Mapping."
dependencies = [
    "numpy>=2.3.2",
    "torch>=2.7.1",
    "pandas>=2.3.2",
    "altair>=5.5.0",
    "plotly>=6.3.0",
    "scikit-learn>=1.7.1",
    "tqdm>=4.67.1",
    "jupyterlab>=4.4.7",
    "ipywidgets>=8.1.7",
    "anywidget>=0.9.18",
    "pyarrow>=21.0.0",
]
requires-python = ">=3.11"
readme = "README.md"

[[project.authors]]
name = "Tagir Akhmetshin, Louis Plyer, Alexey Orlov, Alexandre Varnek"
email = "varnek@unistra.fr"

[project.license]
text = "MIT"

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]
quality = [
    "pre-commit>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "bandit>=1.7.0",
    "pydocstyle>=6.3.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "nbsphinx>=0.9.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-autobuild>=2021.3.14",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]

[tool.black]
line-length = 88
target-version = [
    "py311",
]
include = "\\.pyi?$"
extend-exclude = "/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | build\n  | dist\n)/\n"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = [
    "src",
    "tests",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP",
    "ARG001",
    "ARG002",
    "ARG003",
    "ARG004",
    "ARG005",
    "D",
    "SIM",
    "TCH",
    "RUF",
]
ignore = [
    "E501",
    "B008",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "D203",
    "D213",
]
unfixable = [
    "ARG001",
    "ARG002",
    "ARG003",
    "ARG004",
    "ARG005",
    "F841",
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = [
    "D",
    "ARG",
    "S101",
]
"__init__.py" = [
    "F401",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "sklearn.*",
    "altair.*",
    "plotly.*",
    "tqdm.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=src/gtmkit",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "ignore::UserWarning:gtmkit.*",
    "ignore::DeprecationWarning:sklearn.*",
    "ignore::FutureWarning:torch.*",
]

[tool.coverage.run]
source = [
    "src",
]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = [
    "tests",
    "docs",
    "tutorials",
]
skips = [
    "B101",
    "B601",
]
