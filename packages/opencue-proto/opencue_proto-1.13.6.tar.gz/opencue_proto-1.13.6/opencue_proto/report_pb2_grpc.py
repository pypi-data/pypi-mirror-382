# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import report_pb2 as report__pb2


class RqdReportInterfaceStub(object):
    """Interface to handle RQD pings.

    -------- Services --------]

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReportRqdStartup = channel.unary_unary(
                '/report.RqdReportInterface/ReportRqdStartup',
                request_serializer=report__pb2.RqdReportRqdStartupRequest.SerializeToString,
                response_deserializer=report__pb2.RqdReportRqdStartupResponse.FromString,
                )
        self.ReportRunningFrameCompletion = channel.unary_unary(
                '/report.RqdReportInterface/ReportRunningFrameCompletion',
                request_serializer=report__pb2.RqdReportRunningFrameCompletionRequest.SerializeToString,
                response_deserializer=report__pb2.RqdReportRunningFrameCompletionResponse.FromString,
                )
        self.ReportStatus = channel.unary_unary(
                '/report.RqdReportInterface/ReportStatus',
                request_serializer=report__pb2.RqdReportStatusRequest.SerializeToString,
                response_deserializer=report__pb2.RqdReportStatusResponse.FromString,
                )


class RqdReportInterfaceServicer(object):
    """Interface to handle RQD pings.

    -------- Services --------]

    """

    def ReportRqdStartup(self, request, context):
        """Send in when RQD starts up to announce new idle procs to the cue.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportRunningFrameCompletion(self, request, context):
        """Reports in a running frame
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportStatus(self, request, context):
        """An incremental status report sent by RQD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RqdReportInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReportRqdStartup': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportRqdStartup,
                    request_deserializer=report__pb2.RqdReportRqdStartupRequest.FromString,
                    response_serializer=report__pb2.RqdReportRqdStartupResponse.SerializeToString,
            ),
            'ReportRunningFrameCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportRunningFrameCompletion,
                    request_deserializer=report__pb2.RqdReportRunningFrameCompletionRequest.FromString,
                    response_serializer=report__pb2.RqdReportRunningFrameCompletionResponse.SerializeToString,
            ),
            'ReportStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportStatus,
                    request_deserializer=report__pb2.RqdReportStatusRequest.FromString,
                    response_serializer=report__pb2.RqdReportStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'report.RqdReportInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RqdReportInterface(object):
    """Interface to handle RQD pings.

    -------- Services --------]

    """

    @staticmethod
    def ReportRqdStartup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/report.RqdReportInterface/ReportRqdStartup',
            report__pb2.RqdReportRqdStartupRequest.SerializeToString,
            report__pb2.RqdReportRqdStartupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportRunningFrameCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/report.RqdReportInterface/ReportRunningFrameCompletion',
            report__pb2.RqdReportRunningFrameCompletionRequest.SerializeToString,
            report__pb2.RqdReportRunningFrameCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/report.RqdReportInterface/ReportStatus',
            report__pb2.RqdReportStatusRequest.SerializeToString,
            report__pb2.RqdReportStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)