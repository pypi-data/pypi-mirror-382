from _typeshed import Incomplete
from enum import StrEnum
from pydantic import BaseModel
from typing import Any

class MimeType(StrEnum):
    """Common MIME types for A2A artifacts.

    This class provides constants for commonly used MIME types in artifact generation,
    ensuring consistency and reducing typos across the codebase.
    """
    TEXT_PLAIN = 'text/plain'
    TEXT_HTML = 'text/html'
    TEXT_CSS = 'text/css'
    TEXT_JAVASCRIPT = 'text/javascript'
    TEXT_CSV = 'text/csv'
    TEXT_XML = 'text/xml'
    TEXT_MARKDOWN = 'text/markdown'
    APPLICATION_JSON = 'application/json'
    APPLICATION_XML = 'application/xml'
    APPLICATION_PDF = 'application/pdf'
    APPLICATION_ZIP = 'application/zip'
    APPLICATION_GZIP = 'application/gzip'
    APPLICATION_TAR = 'application/x-tar'
    APPLICATION_OCTET_STREAM = 'application/octet-stream'
    APPLICATION_MSWORD = 'application/msword'
    APPLICATION_EXCEL = 'application/vnd.ms-excel'
    APPLICATION_POWERPOINT = 'application/vnd.ms-powerpoint'
    APPLICATION_DOCX = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    APPLICATION_XLSX = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    APPLICATION_PPTX = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
    IMAGE_JPEG = 'image/jpeg'
    IMAGE_PNG = 'image/png'
    IMAGE_GIF = 'image/gif'
    IMAGE_WEBP = 'image/webp'
    IMAGE_SVG = 'image/svg+xml'
    IMAGE_BMP = 'image/bmp'
    IMAGE_TIFF = 'image/tiff'
    IMAGE_ICO = 'image/x-icon'
    AUDIO_MP3 = 'audio/mpeg'
    AUDIO_WAV = 'audio/wav'
    AUDIO_OGG = 'audio/ogg'
    AUDIO_AAC = 'audio/aac'
    AUDIO_FLAC = 'audio/flac'
    VIDEO_MP4 = 'video/mp4'
    VIDEO_AVI = 'video/x-msvideo'
    VIDEO_MOV = 'video/quicktime'
    VIDEO_WMV = 'video/x-ms-wmv'
    VIDEO_WEBM = 'video/webm'
    VIDEO_MKV = 'video/x-matroska'
    FONT_TTF = 'font/ttf'
    FONT_OTF = 'font/otf'
    FONT_WOFF = 'font/woff'
    FONT_WOFF2 = 'font/woff2'

class ArtifactType(StrEnum):
    """Common artifact types for A2A artifacts.

    This class provides constants for artifact types used in the A2A protocol.
    """
    FILE = 'file'
    DATA = 'data'
    TEXT = 'text'

EXTENSION_TO_MIME_TYPE: Incomplete
MIME_TYPE_TO_EXTENSION: Incomplete

def get_mime_type_from_filename(filename: str) -> str:
    '''Get MIME type from filename extension.

    Args:
        filename: The filename to get the MIME type for.

    Returns:
        The MIME type string, or application/octet-stream if unknown.

    Example:
        >>> get_mime_type_from_filename("data.csv")
        \'text/csv\'
        >>> get_mime_type_from_filename("image.png")
        \'image/png\'
        >>> get_mime_type_from_filename("unknown.xyz")
        \'application/octet-stream\'
    '''
def get_extension_from_mime_type(mime_type: str) -> str | None:
    '''Get file extension from MIME type.

    Args:
        mime_type: The MIME type to get the extension for.

    Returns:
        The file extension (with dot) or None if not found.

    Example:
        >>> get_extension_from_mime_type("text/csv")
        \'.csv\'
        >>> get_extension_from_mime_type("image/png")
        \'.png\'
        >>> get_extension_from_mime_type("unknown/type")
        None
    '''

class Artifact(BaseModel):
    """Represents an artifact payload used by A2A helpers and executors.

    This model standardizes the structure for artifacts generated by tools and
    passed through the A2A pipeline.

    Attributes:
        artifact_type (ArtifactType): The type of artifact. Defaults to FILE.
        data (str): Base64-encoded content of the artifact.
        name (str): Display name or filename of the artifact.
        description (str): Optional description for the artifact. Defaults to empty string.
        mime_type (str): MIME type of the artifact content.
        metadata (dict[str, Any] | None): Optional per-artifact metadata to pass through.
    """
    artifact_type: ArtifactType
    data: str
    name: str
    description: str
    mime_type: str
    metadata: dict[str, Any] | None
    @classmethod
    def validate_base64(cls, v: str) -> str:
        """Validate that 'data' is a valid base64 string."""
