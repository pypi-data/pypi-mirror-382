#!/usr/bin/env python3
"""
{{ meta.app_name | default('Application') }} - Auto-generated class
Generated from structured data configuration

Version: {{ meta.version | default('0.0.1') }}
Author: {{ meta.author | default('Unknown') }}
Project: {{ project_name | default('Project') }}
"""

import logging
from typing import Dict, Any, Optional


class {{ meta.app_name | title | replace('-', '') | replace('_', '') }}Config:
    """Configuration class for {{ meta.app_name | default('Application') }}."""
    
    def __init__(self):
        """Initialize configuration with structured data values."""
        self.app_name = "{{ meta.app_name | default('app') }}"
        self.version = "{{ meta.version | default('0.0.1') }}"
        self.database_host = "{{ meta.database_host | default('localhost') }}"
        self.port = {{ meta.port | default(3000) }}
        self.environment = "{{ environment | default('development') }}"
        
        {% if meta.features -%}
        self.features = {{ meta.features | tojson }}
        {% else -%}
        self.features = []
        {% endif %}
        
        # Project metadata
        {% if project_id -%}
        self.project_id = "{{ project_id }}"
        {% endif %}
        {% if meta.author -%}
        self.author = "{{ meta.author }}"
        {% endif %}
        
        # @PRESERVE_START custom_config
        # Add your custom configuration variables here
        # These will be preserved when the template is regenerated
        # @PRESERVE_END custom_config
    
    def is_feature_enabled(self, feature: str) -> bool:
        """Check if a feature is enabled."""
        return feature.lower() in [f.lower() for f in self.features]
    
    def get_database_url(self) -> str:
        """Get the database connection URL."""
        return f"postgresql://{self.database_host}:{self.port}/{{ meta.app_name | default('app') }}"
    
    # @PRESERVE_START custom_methods
    # Add your custom methods here
    # These methods will be preserved when the template is regenerated
    # @PRESERVE_END custom_methods
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert configuration to dictionary."""
        return {
            'app_name': self.app_name,
            'version': self.version,
            'database_host': self.database_host,
            'port': self.port,
            'environment': self.environment,
            'features': self.features,
            {% if project_id -%}
            'project_id': self.project_id,
            {% endif %}
            {% if meta.author -%}
            'author': self.author,
            {% endif %}
        }


class {{ meta.app_name | title | replace('-', '') | replace('_', '') }}Application:
    """Main application class for {{ meta.app_name | default('Application') }}."""
    
    def __init__(self, config: Optional[{{ meta.app_name | title | replace('-', '') | replace('_', '') }}Config] = None):
        """Initialize the application."""
        self.config = config or {{ meta.app_name | title | replace('-', '') | replace('_', '') }}Config()
        self.logger = logging.getLogger(__name__)
        
        # Set up logging based on environment
        level = logging.DEBUG if self.config.environment == 'development' else logging.INFO
        logging.basicConfig(level=level)
    
    def start(self):
        """Start the application."""
        self.logger.info(f"Starting {self.config.app_name} v{self.config.version}")
        self.logger.info(f"Environment: {self.config.environment}")
        
        if self.config.features:
            self.logger.info(f"Enabled features: {', '.join(self.config.features)}")
        
        # Initialize features
        {% if meta.features -%}
        {% for feature in meta.features %}
        if self.config.is_feature_enabled('{{ feature }}'):
            self._init_{{ feature | lower | replace('-', '_') }}_feature()
        {% endfor %}
        {% endif %}
    
    {% if meta.features -%}
    {% for feature in meta.features %}
    def _init_{{ feature | lower | replace('-', '_') }}_feature(self):
        """Initialize {{ feature }} feature."""
        self.logger.debug(f"Initializing {{ feature }} feature")
        # TODO: Implement {{ feature }} feature initialization
        pass
    
    {% endfor %}
    {% endif %}
    def get_info(self) -> Dict[str, Any]:
        """Get application information."""
        return {
            'name': self.config.app_name,
            'version': self.config.version,
            'environment': self.config.environment,
            'database_url': self.config.get_database_url(),
            'features': self.config.features,
        }


if __name__ == '__main__':
    app = {{ meta.app_name | title | replace('-', '') | replace('_', '') }}Application()
    app.start()
    print(f"Application info: {app.get_info()}")
    
    # @PRESERVE_START custom_main
    # Add your custom testing or demonstration code here
    # @PRESERVE_END custom_main