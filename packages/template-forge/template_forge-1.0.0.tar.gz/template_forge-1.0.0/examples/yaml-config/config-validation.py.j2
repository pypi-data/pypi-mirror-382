#!/usr/bin/env python3
"""
Configuration Validator for {{ app_name }}
Auto-generated from YAML configuration

Version: {{ app_version }}
Generated by: {{ generator }}
"""

import json
from typing import Dict, List, Any, Optional


class ConfigValidator:
    """Validates configuration for {{ app_name }}."""
    
    def __init__(self):
        """Initialize the validator with extracted configuration."""
        # Basic application info
        self.app_name = "{{ app_name }}"
        self.app_version = "{{ app_version }}"
        self.description = "{{ app_description }}"
        
        # Features array
        self.features = {{ features | list }}
        
        # Database configuration (nested object)
        self.database_config = {{ database_config }}
        
        # Environment configurations (complex nested object)
        self.environments = {{ all_environments }}
        
        # Scaling configuration
        self.scaling_config = {{ scaling_config }}
        
        # Monitoring metrics array
        self.monitoring_metrics = {{ monitoring_metrics | list }}
        
        # @PRESERVE_START
        # Add custom validation rules here
        # These will be preserved across regenerations
        # @PRESERVE_END
    
    def validate_features(self) -> List[str]:
        """Validate enabled features."""
        errors = []
        
        required_features = ["real-time-sync", "encryption"]
        for feature in required_features:
            if feature not in self.features:
                errors.append(f"Required feature '{feature}' is missing")
        
        return errors
    
    def validate_database_config(self) -> List[str]:
        """Validate database configuration."""
        errors = []
        
        # Check primary database
        primary = self.database_config.get('primary', {})
        if not primary.get('host'):
            errors.append("Primary database host is required")
        if not isinstance(primary.get('port'), int):
            errors.append("Primary database port must be an integer")
        if not primary.get('ssl', False):
            errors.append("Primary database SSL should be enabled")
            
        # Check replica database
        replica = self.database_config.get('replica', {})
        if not replica.get('host'):
            errors.append("Replica database host is required")
            
        return errors
    
    def validate_environments(self) -> List[str]:
        """Validate environment configurations."""
        errors = []
        
        required_envs = ['development', 'staging', 'production']
        for env in required_envs:
            if env not in self.environments:
                errors.append(f"Environment '{env}' configuration is missing")
                continue
                
            env_config = self.environments[env]
            
            # Validate external APIs
            apis = env_config.get('external_apis', [])
            if not apis:
                errors.append(f"Environment '{env}' has no external APIs configured")
            
            for api in apis:
                if not api.get('url'):
                    errors.append(f"API '{api.get('name', 'unknown')}' in '{env}' missing URL")
                if not isinstance(api.get('timeout'), int):
                    errors.append(f"API '{api.get('name', 'unknown')}' in '{env}' timeout must be integer")
        
        return errors
    
    def validate_scaling(self) -> List[str]:
        """Validate scaling configuration."""
        errors = []
        
        min_instances = self.scaling_config.get('min_instances', 0)
        max_instances = self.scaling_config.get('max_instances', 0)
        
        if min_instances >= max_instances:
            errors.append("min_instances must be less than max_instances")
        
        if min_instances < 1:
            errors.append("min_instances must be at least 1")
            
        target_cpu = self.scaling_config.get('target_cpu', 0)
        if not (20 <= target_cpu <= 90):
            errors.append("target_cpu should be between 20 and 90 percent")
        
        return errors
    
    def validate_monitoring(self) -> List[str]:
        """Validate monitoring configuration."""
        errors = []
        
        required_metrics = ['cpu_usage', 'memory_usage', 'request_count']
        for metric in required_metrics:
            if metric not in self.monitoring_metrics:
                errors.append(f"Required monitoring metric '{metric}' is missing")
        
        return errors
    
    # @PRESERVE_START
    # Add custom validation methods here
    # @PRESERVE_END
    
    def validate_all(self) -> Dict[str, List[str]]:
        """Run all validations and return results."""
        results = {
            'features': self.validate_features(),
            'database': self.validate_database_config(),
            'environments': self.validate_environments(),
            'scaling': self.validate_scaling(),
            'monitoring': self.validate_monitoring(),
        }
        
        # @PRESERVE_START
        # Add custom validation calls here
        # @PRESERVE_END
        
        return results
    
    def get_summary(self) -> Dict[str, Any]:
        """Get configuration summary."""
        return {
            'application': {
                'name': self.app_name,
                'version': self.app_version,
                'description': self.description,
                'features_count': len(self.features),
                'environments_count': len(self.environments),
            },
            'database': {
                'primary_host': self.database_config['primary']['host'],
                'replica_host': self.database_config['replica']['host'],
                'ssl_enabled': self.database_config['primary']['ssl'],
            },
            'scaling': {
                'min_instances': self.scaling_config['min_instances'],
                'max_instances': self.scaling_config['max_instances'],
                'target_cpu': self.scaling_config['target_cpu'],
            },
            'monitoring_metrics': len(self.monitoring_metrics),
        }


if __name__ == '__main__':
    validator = ConfigValidator()
    
    print(f"Configuration Validator for {validator.app_name} v{validator.app_version}")
    print("=" * 60)
    
    # Show summary
    summary = validator.get_summary()
    print("\nConfiguration Summary:")
    print(json.dumps(summary, indent=2))
    
    # Run validations
    print("\nValidation Results:")
    validation_results = validator.validate_all()
    
    total_errors = 0
    for category, errors in validation_results.items():
        print(f"\n{category.title()}:")
        if errors:
            for error in errors:
                print(f"  ❌ {error}")
                total_errors += 1
        else:
            print("  ✅ All checks passed")
    
    print(f"\nTotal errors: {total_errors}")
    
    # @PRESERVE_START
    # Add custom validation reporting here
    # @PRESERVE_END