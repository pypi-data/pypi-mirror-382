/**
 * {{ project_name | default('Project') }}
 * Version: {{ version | default('0.0.1') }}
 * Author: {{ author | default('Unknown') }}
 * License: {{ license | default('Proprietary') }}
 * Project ID: {{ project_id | default('N/A') }}
 */

#ifndef {{ include_guards | default('MAIN_H') }}
#define {{ include_guards | default('MAIN_H') }}

#include <iostream>
#include <string>

// Application configuration
const std::string APP_NAME = "{{ app_name | default('Application') }}";
const std::string VERSION = "{{ version | default('0.0.1') }}";
const std::string DATABASE_HOST = "{{ database_host | default('localhost') }}";
const int PORT = {{ port | default(3000) }};

{% if features -%}
// Enabled features
enum class Feature {
{% for feature in features %}
    {{ feature | upper }},
{% endfor %}
};
{% endif %}

class Application {
public:
    Application() {
        std::cout << "Starting " << APP_NAME << " v" << VERSION << std::endl;
        std::cout << "Connecting to database at " << DATABASE_HOST << ":" << PORT << std::endl;
    }
    
    void run() {
        // Auto-generated main application logic
        std::cout << "Application running..." << std::endl;
    }
    
    /* @PRESERVE_START */
    /* Add your custom methods here */
    /* These methods will be preserved when the template is regenerated */
    /* @PRESERVE_END */
};

int main(int argc, char* argv[]) {
    Application app;
    app.run();
    
    /* @PRESERVE_START */
    /* Add your custom main function code here */
    /* Nested test: */
    /* @PRESERVE_START */
    /* This nested marker should trigger error detection */
    /* @PRESERVE_END */
    /* End of nested test */
    /* @PRESERVE_END */
    
    return 0;
}

#endif // {{ include_guards | default('MAIN_H') }}