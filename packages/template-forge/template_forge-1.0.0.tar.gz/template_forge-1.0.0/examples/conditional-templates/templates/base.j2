{# Base Template for Template Inheritance (REQ-TPL-110-112) #}
{# This demonstrates Jinja2 template inheritance #}
#!/usr/bin/env python3
"""
{% block docstring %}
Base application module
{% endblock %}

Generated by: {{ generator }}
Date: {{ generated_date }}
Project: {{ project.name }}
Company: {{ company.name }}
"""

{% block imports %}
import sys
import logging
from typing import Dict, Any, List
{% endblock %}

{% block logging_setup %}
# Logging configuration
logging.basicConfig(
    level=logging.{{ infrastructure.logging.level }},
    format='{{ infrastructure.logging.format if infrastructure.logging.format == "json" else "%(asctime)s - %(name)s - %(levelname)s - %(message)s" }}'
)
logger = logging.getLogger(__name__)
{% endblock %}

{% block constants %}
# Application constants
APP_NAME = "{{ app.name }}"
VERSION = "{{ app.version }}"
ENVIRONMENT = "{{ app.environment }}"
DEBUG_MODE = {{ app.debug_mode | string }}
{% endblock %}

{% block main_class %}
class Application:
    """Main application class."""
    
    def __init__(self):
        {% block init_method %}
        self.name = APP_NAME
        self.version = VERSION
        logger.info(f"Initializing {self.name} v{self.version}")
        {% endblock %}
    
    {% block custom_methods %}
    # Custom methods will be added by child templates
    {% endblock %}
{% endblock %}

{% block main_function %}
def main():
    """Main entry point."""
    {% block main_body %}
    app = Application()
    logger.info("Application started")
    {% endblock %}
{% endblock %}

{% block script_guard %}
if __name__ == "__main__":
    main()
{% endblock %}
