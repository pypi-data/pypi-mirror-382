[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "template-forge"
authors = [
    {name = "Carlo Fornari", email = "carlo.fornari@example.com"},
]
description = "Transform structured data (JSON/YAML/XML) into code, configs, and docs with Jinja2 templates"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Text Processing :: Markup",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Typing :: Typed",
]
keywords = [
    "template", 
    "jinja2", 
    "code-generation",
    "code-generator",
    "boilerplate",
    "scaffolding",
    "json", 
    "yaml", 
    "xml", 
    "arxml", 
    "autosar",
    "configuration",
    "automation",
]
dependencies = [
    "PyYAML>=6.0.1",
    "Jinja2>=3.1.2",
    "defusedxml>=0.7.1",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
]
testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
"Homepage" = "https://github.com/CarloFornari/template_forge"
"Documentation" = "https://github.com/CarloFornari/template_forge/blob/main/docs/README.md"
"Quickstart" = "https://github.com/CarloFornari/template_forge/blob/main/QUICKSTART.md"
"Bug Reports" = "https://github.com/CarloFornari/template_forge/issues"
"Source" = "https://github.com/CarloFornari/template_forge"
"Changelog" = "https://github.com/CarloFornari/template_forge/releases"

[project.scripts]
template-forge = "template_forge.cli:main"

# Hatch configuration
[tool.hatch.version]
path = "template_forge/__init__.py"

[tool.bandit]
exclude_dirs = ["tests"]
# Skip false positives: B105 (CWD/TIMESTAMP are not passwords), B101 (internal assertions for type safety)
skip = ["B105", "B101"]

[tool.hatch.build.targets.wheel]
packages = ["template_forge"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.0.0",
]

[tool.hatch.envs.lint]
dependencies = [
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
]

[tool.hatch.envs.lint.scripts]
check = [
    "ruff check .",
    "ruff format --check .",
    "mypy template_forge/",
    "bandit -r template_forge/",
    "safety check",
]
fix = [
    "ruff check --fix .",
    "ruff format .",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
]

[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
cov = "pytest --cov=template_forge --cov-report=term-missing --cov-report=xml {args:tests}"

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinxcontrib-napoleon>=0.7",
    "myst-parser>=2.0.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs docs/_build/html"
serve = "python -m http.server 8000 --directory docs/_build/html"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for complete workflows", 
    "slow: Tests that take a longer time to run",
]

[tool.coverage.run]
source = ["template_forge"]
omit = ["tests/*", "template_forge/types.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
    "S",   # bandit security
    "N",   # pep8-naming
    "D",   # pydocstyle
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D211", # No blank lines allowed before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "N817", # CamelCase imported as acronym (ET for ElementTree is standard)
    "S101", # Use of assert detected
    "S314", # XML parsing - known issue, will address separately
    "S602", # subprocess shell=True - needed for hooks, has nosec
    "S701", # Jinja2 autoescape - intentional for template engine
    "PTH123", # Path.open() - will fix in future iteration
    "E501", # Line too long - will fix selectively
    "RUF012", # ClassVar - will fix in future iteration
    "PTH100", # Path.resolve() - docs config issue
    "E402", # Module level import - docs config issue
    "SIM118", # dict.keys() - acceptable pattern
    "D205", # Docstring formatting - acceptable
    "SIM108", # Ternary operator - readability preference
    "SIM102", # Nested if - readability preference
    "W293", # Whitespace - auto-fixable
    "S108", # Temp file - test only
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D", "ARG", "N802", "B017", "F841", "SIM105", "S110", "B011", "S603", "S607", "E741", "F811", "PTH109", "RUF043", "S105"]
"__init__.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.9"
strict = false
warn_return_any = false
warn_unused_configs = true
warn_unreachable = false
warn_redundant_casts = true
warn_unused_ignores = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true

[[tool.mypy.overrides]]
module = ["yaml", "yaml.*", "jinja2.*", "defusedxml", "defusedxml.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false