// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "game.proto" (package "aegis", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TeamInfo } from "./team";
import { Turn } from "./turn";
import { Spawn } from "./spawn";
import { World } from "./world";
import { SurvivorState } from "./world_object";
import { Team } from "./team";
import { Location } from "./location";
/**
 * @generated from protobuf message aegis.DroneScan
 */
export interface DroneScan {
    /**
     * @generated from protobuf field: aegis.Location location = 1
     */
    location?: Location;
    /**
     * @generated from protobuf field: aegis.Team team = 2
     */
    team: Team;
    /**
     * @generated from protobuf field: int32 duration = 3
     */
    duration: number;
}
/**
 * @generated from protobuf message aegis.DroneScanUpdate
 */
export interface DroneScanUpdate {
    /**
     * @generated from protobuf field: repeated aegis.DroneScan drone_scans = 1
     */
    droneScans: DroneScan[];
}
/**
 * @generated from protobuf message aegis.SurvivorHealthUpdate
 */
export interface SurvivorHealthUpdate {
    /**
     * @generated from protobuf field: aegis.Location location = 1
     */
    location?: Location;
    /**
     * @generated from protobuf field: int32 survivor_id = 2
     */
    survivorId: number;
    /**
     * @generated from protobuf field: int32 new_health = 3
     */
    newHealth: number;
    /**
     * @generated from protobuf field: aegis.SurvivorState new_state = 4
     */
    newState: SurvivorState;
}
/**
 * @generated from protobuf message aegis.GamesHeader
 */
export interface GamesHeader {
}
/**
 * @generated from protobuf message aegis.GameHeader
 */
export interface GameHeader {
    /**
     * @generated from protobuf field: aegis.World world = 1
     */
    world?: World;
    /**
     * @generated from protobuf field: int32 rounds = 2
     */
    rounds: number;
    /**
     * @generated from protobuf field: repeated aegis.Spawn spawns = 3
     */
    spawns: Spawn[];
}
/**
 * @generated from protobuf message aegis.Round
 */
export interface Round {
    /**
     * @generated from protobuf field: int32 round = 1
     */
    round: number;
    /**
     * @generated from protobuf field: repeated aegis.Location layers_removed = 2
     */
    layersRemoved: Location[];
    /**
     * @generated from protobuf field: repeated int32 dead_ids = 3
     */
    deadIds: number[];
    /**
     * @generated from protobuf field: repeated aegis.Turn turns = 4
     */
    turns: Turn[];
    /**
     * @generated from protobuf field: repeated aegis.TeamInfo team_info = 5
     */
    teamInfo: TeamInfo[];
    /**
     * @generated from protobuf field: repeated aegis.DroneScan drone_scans = 6
     */
    droneScans: DroneScan[];
    /**
     * @generated from protobuf field: repeated aegis.SurvivorHealthUpdate survivor_health_updates = 7
     */
    survivorHealthUpdates: SurvivorHealthUpdate[];
}
/**
 * @generated from protobuf message aegis.GameFooter
 */
export interface GameFooter {
}
/**
 * @generated from protobuf message aegis.GamesFooter
 */
export interface GamesFooter {
}
// @generated message type with reflection information, may provide speed optimized methods
class DroneScan$Type extends MessageType<DroneScan> {
    constructor() {
        super("aegis.DroneScan", [
            { no: 1, name: "location", kind: "message", T: () => Location },
            { no: 2, name: "team", kind: "enum", T: () => ["aegis.Team", Team] },
            { no: 3, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DroneScan>): DroneScan {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.team = 0;
        message.duration = 0;
        if (value !== undefined)
            reflectionMergePartial<DroneScan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DroneScan): DroneScan {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* aegis.Location location */ 1:
                    message.location = Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                case /* aegis.Team team */ 2:
                    message.team = reader.int32();
                    break;
                case /* int32 duration */ 3:
                    message.duration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DroneScan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* aegis.Location location = 1; */
        if (message.location)
            Location.internalBinaryWrite(message.location, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* aegis.Team team = 2; */
        if (message.team !== 0)
            writer.tag(2, WireType.Varint).int32(message.team);
        /* int32 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.DroneScan
 */
export const DroneScan = new DroneScan$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DroneScanUpdate$Type extends MessageType<DroneScanUpdate> {
    constructor() {
        super("aegis.DroneScanUpdate", [
            { no: 1, name: "drone_scans", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DroneScan }
        ]);
    }
    create(value?: PartialMessage<DroneScanUpdate>): DroneScanUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.droneScans = [];
        if (value !== undefined)
            reflectionMergePartial<DroneScanUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DroneScanUpdate): DroneScanUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated aegis.DroneScan drone_scans */ 1:
                    message.droneScans.push(DroneScan.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DroneScanUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated aegis.DroneScan drone_scans = 1; */
        for (let i = 0; i < message.droneScans.length; i++)
            DroneScan.internalBinaryWrite(message.droneScans[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.DroneScanUpdate
 */
export const DroneScanUpdate = new DroneScanUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SurvivorHealthUpdate$Type extends MessageType<SurvivorHealthUpdate> {
    constructor() {
        super("aegis.SurvivorHealthUpdate", [
            { no: 1, name: "location", kind: "message", T: () => Location },
            { no: 2, name: "survivor_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "new_health", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "new_state", kind: "enum", T: () => ["aegis.SurvivorState", SurvivorState] }
        ]);
    }
    create(value?: PartialMessage<SurvivorHealthUpdate>): SurvivorHealthUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.survivorId = 0;
        message.newHealth = 0;
        message.newState = 0;
        if (value !== undefined)
            reflectionMergePartial<SurvivorHealthUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SurvivorHealthUpdate): SurvivorHealthUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* aegis.Location location */ 1:
                    message.location = Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                case /* int32 survivor_id */ 2:
                    message.survivorId = reader.int32();
                    break;
                case /* int32 new_health */ 3:
                    message.newHealth = reader.int32();
                    break;
                case /* aegis.SurvivorState new_state */ 4:
                    message.newState = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SurvivorHealthUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* aegis.Location location = 1; */
        if (message.location)
            Location.internalBinaryWrite(message.location, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 survivor_id = 2; */
        if (message.survivorId !== 0)
            writer.tag(2, WireType.Varint).int32(message.survivorId);
        /* int32 new_health = 3; */
        if (message.newHealth !== 0)
            writer.tag(3, WireType.Varint).int32(message.newHealth);
        /* aegis.SurvivorState new_state = 4; */
        if (message.newState !== 0)
            writer.tag(4, WireType.Varint).int32(message.newState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.SurvivorHealthUpdate
 */
export const SurvivorHealthUpdate = new SurvivorHealthUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamesHeader$Type extends MessageType<GamesHeader> {
    constructor() {
        super("aegis.GamesHeader", []);
    }
    create(value?: PartialMessage<GamesHeader>): GamesHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GamesHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamesHeader): GamesHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamesHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.GamesHeader
 */
export const GamesHeader = new GamesHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameHeader$Type extends MessageType<GameHeader> {
    constructor() {
        super("aegis.GameHeader", [
            { no: 1, name: "world", kind: "message", T: () => World },
            { no: 2, name: "rounds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "spawns", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Spawn }
        ]);
    }
    create(value?: PartialMessage<GameHeader>): GameHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rounds = 0;
        message.spawns = [];
        if (value !== undefined)
            reflectionMergePartial<GameHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameHeader): GameHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* aegis.World world */ 1:
                    message.world = World.internalBinaryRead(reader, reader.uint32(), options, message.world);
                    break;
                case /* int32 rounds */ 2:
                    message.rounds = reader.int32();
                    break;
                case /* repeated aegis.Spawn spawns */ 3:
                    message.spawns.push(Spawn.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* aegis.World world = 1; */
        if (message.world)
            World.internalBinaryWrite(message.world, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 rounds = 2; */
        if (message.rounds !== 0)
            writer.tag(2, WireType.Varint).int32(message.rounds);
        /* repeated aegis.Spawn spawns = 3; */
        for (let i = 0; i < message.spawns.length; i++)
            Spawn.internalBinaryWrite(message.spawns[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.GameHeader
 */
export const GameHeader = new GameHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Round$Type extends MessageType<Round> {
    constructor() {
        super("aegis.Round", [
            { no: 1, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "layers_removed", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Location },
            { no: 3, name: "dead_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "turns", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Turn },
            { no: 5, name: "team_info", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TeamInfo },
            { no: 6, name: "drone_scans", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DroneScan },
            { no: 7, name: "survivor_health_updates", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SurvivorHealthUpdate }
        ]);
    }
    create(value?: PartialMessage<Round>): Round {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.round = 0;
        message.layersRemoved = [];
        message.deadIds = [];
        message.turns = [];
        message.teamInfo = [];
        message.droneScans = [];
        message.survivorHealthUpdates = [];
        if (value !== undefined)
            reflectionMergePartial<Round>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Round): Round {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 round */ 1:
                    message.round = reader.int32();
                    break;
                case /* repeated aegis.Location layers_removed */ 2:
                    message.layersRemoved.push(Location.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 dead_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.deadIds.push(reader.int32());
                    else
                        message.deadIds.push(reader.int32());
                    break;
                case /* repeated aegis.Turn turns */ 4:
                    message.turns.push(Turn.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated aegis.TeamInfo team_info */ 5:
                    message.teamInfo.push(TeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated aegis.DroneScan drone_scans */ 6:
                    message.droneScans.push(DroneScan.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated aegis.SurvivorHealthUpdate survivor_health_updates */ 7:
                    message.survivorHealthUpdates.push(SurvivorHealthUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Round, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 round = 1; */
        if (message.round !== 0)
            writer.tag(1, WireType.Varint).int32(message.round);
        /* repeated aegis.Location layers_removed = 2; */
        for (let i = 0; i < message.layersRemoved.length; i++)
            Location.internalBinaryWrite(message.layersRemoved[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 dead_ids = 3; */
        if (message.deadIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.deadIds.length; i++)
                writer.int32(message.deadIds[i]);
            writer.join();
        }
        /* repeated aegis.Turn turns = 4; */
        for (let i = 0; i < message.turns.length; i++)
            Turn.internalBinaryWrite(message.turns[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated aegis.TeamInfo team_info = 5; */
        for (let i = 0; i < message.teamInfo.length; i++)
            TeamInfo.internalBinaryWrite(message.teamInfo[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated aegis.DroneScan drone_scans = 6; */
        for (let i = 0; i < message.droneScans.length; i++)
            DroneScan.internalBinaryWrite(message.droneScans[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated aegis.SurvivorHealthUpdate survivor_health_updates = 7; */
        for (let i = 0; i < message.survivorHealthUpdates.length; i++)
            SurvivorHealthUpdate.internalBinaryWrite(message.survivorHealthUpdates[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.Round
 */
export const Round = new Round$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameFooter$Type extends MessageType<GameFooter> {
    constructor() {
        super("aegis.GameFooter", []);
    }
    create(value?: PartialMessage<GameFooter>): GameFooter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameFooter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameFooter): GameFooter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameFooter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.GameFooter
 */
export const GameFooter = new GameFooter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamesFooter$Type extends MessageType<GamesFooter> {
    constructor() {
        super("aegis.GamesFooter", []);
    }
    create(value?: PartialMessage<GamesFooter>): GamesFooter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GamesFooter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamesFooter): GamesFooter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamesFooter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aegis.GamesFooter
 */
export const GamesFooter = new GamesFooter$Type();
