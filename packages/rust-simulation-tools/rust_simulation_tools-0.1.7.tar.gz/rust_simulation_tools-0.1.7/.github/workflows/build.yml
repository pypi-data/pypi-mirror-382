name: CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin pytest pytest-cov numpy coverage
      
      - name: Build package
        run: maturin build --release --out dist

      - name: Install package
        run: pip install --no-index --find-links dist rust_simulation_tools
      
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=rust_simulation_tools --cov-report=xml --cov-report=term

  lint:
    name: Lint and format checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Check Rust formatting
        run: cargo fmt -- --check
      
      - name: Run Clippy
        run: cargo clippy -- -D warnings
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python linting tools
        run: |
          pip install black flake8 mypy
      
      - name: Check Python formatting with black
        run: black --check tests/ examples/
        continue-on-error: true
      
      - name: Run flake8
        run: flake8 tests/ examples/ --max-line-length=100
        continue-on-error: true

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [test]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist --interpreter 3.9 3.10 3.11 3.12
          manylinux: auto
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl
          retention-days: 30

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 30

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build-wheels, build-sdist]
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: Flatten directory structure
        run: |
          mkdir -p final_dist
          find dist -name '*.whl' -exec cp {} final_dist/ \;
          find dist -name '*.tar.gz' -exec cp {} final_dist/ \;
      
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing final_dist/*
