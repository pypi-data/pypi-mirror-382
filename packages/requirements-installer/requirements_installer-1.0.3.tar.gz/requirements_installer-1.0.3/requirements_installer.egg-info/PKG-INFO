Metadata-Version: 2.4
Name: requirements-installer
Version: 1.0.3
Summary: Automatically detect and install Python dependencies from your code
Author-email: Sina Mirshahi <sina7th@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/FH-Prevail/requirements_installer
Project-URL: Repository, https://github.com/FH-Prevail/requirements-installer
Project-URL: Issues, https://github.com/FH-Prevail/requirements_installer/issues
Keywords: pip,requirements,dependencies,automation,installer
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Installation/Setup
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# Requirements Installer üöÄ

**Tired of hunting down missing Python dependencies?** Requirements Installer automatically detects and installs all third-party packages your Python script needs‚Äîno `requirements.txt` needed!

Simply point it at your Python file, and it handles the rest. Perfect for running unfamiliar scripts, quick prototyping, or setting up development environments.

## üéØ Two Ways to Use

### 1Ô∏è‚É£ Inside Your Code (Easiest!)
```python
from requirements_installer import auto_install
auto_install()
```

### 2Ô∏è‚É£ Command Line
```bash
requirements-installer --file mycode.py
```

---

## ‚ú® Features

- **‚ö° Auto-Install Inside Code** - Just `from requirements_installer import auto_install; auto_install()` and you're done!
- **üìì Jupyter/Colab Support** - Scans and installs from `.ipynb` files automatically
- **üîç Smart Import Detection** - Automatically scans your Python files for all third-party imports
- **üì¶ One-Command Install** - Detects and installs dependencies in a single step
- **üéØ Interactive Version Selection** - Optionally choose specific versions for each package
- **üîí Virtual Environment Support** - Create and install into isolated environments
- **üß† Intelligent Filtering** - Excludes stdlib and local modules automatically
- **üìù Module-to-Package Mapping** - Handles 100+ tricky cases like `cv2` ‚Üí `opencv-python`, `pptx` ‚Üí `python-pptx`
- **üåê One-Hop Local Import Scanning** - Follows local imports to catch all dependencies
- **üí™ Pure Python** - No external dependencies required

---

## üì• Installation

```bash
pip install requirements-installer
```

Or install from source:

```bash
git clone https://github.com/FH-Prevail/requirements_installer.git
cd requirements_installer
pip install -e .
```

---

## üöÄ Quick Start

### ‚≠ê NEW: Auto-Install Inside Your Code (Recommended!)

**The easiest way - just add 2 lines to your script:**

```python
from requirements_installer import auto_install
auto_install()

# Now use any packages - they'll be auto-installed if missing!
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
```

**Perfect for Jupyter/Colab notebooks:**

```python
# Cell 1: Your imports and code
import pandas as pd
import torch
from transformers import AutoModel
# ... your code ...

# Cell 2: Install everything (run this if imports fail)
!pip install -q requirements-installer
from requirements_installer import auto_install
auto_install()  # Scans all cells above and installs missing packages!

# Now re-run Cell 1 and it will work!
```

**Or install dependencies first:**

```python
# Cell 1: Setup (run first)
!pip install -q requirements-installer
from requirements_installer import auto_install
auto_install()  # If you have imports in other cells, it will find them

# Cell 2+: Your code with any imports
import torch
import transformers
```

### Basic Command-Line Usage

**After `pip install requirements-installer`, use it as a command:**

```bash
# Scan and install dependencies for a Python file
requirements-installer --file mycode.py

# Works with Jupyter notebooks too!
requirements-installer --file notebook.ipynb
```

### With Virtual Environment

```bash
# Create a venv and install dependencies there
requirements-installer --file mycode.py --use-venv --venv-path .venv
```

### Interactive Version Selection

```bash
# Choose specific versions for each package
requirements-installer --file mycode.py --ask-version
```

Example interaction:
```
==================================================
Version Selection
==================================================

Install latest version of 'numpy'? [Y/n]: n
Enter version for 'numpy' (e.g., 1.2.3): 1.24.0

Install latest version of 'pandas'? [Y/n]: y

Install latest version of 'requests'? [Y/n]: 
```

### Print Requirements Only

```bash
# Just show what would be installed, don't install
requirements-installer --file mycode.py --print-requirements
```

---

## üìñ Usage Examples

### Example 1: Auto-Install in Script (NEW! üéâ)
Make your scripts self-installing:

```python
# my_analysis.py
from requirements_installer import auto_install
auto_install()

# Now use any packages!
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('data.csv')
plt.plot(df['x'], df['y'])
plt.show()
```

**Just run it:**
```bash
python my_analysis.py  # Auto-installs pandas, numpy, matplotlib!
```

### Example 2: Jupyter/Colab Notebook

**Option A - Fix import errors after they happen:**
```python
# Cell 1: Try to run your code
import pandas as pd
import torch
# ImportError: No module named 'torch'

# Cell 2: Install missing dependencies
!pip install -q requirements-installer
from requirements_installer import auto_install
auto_install()  # Scans ALL cells and installs what's needed!

# Cell 3: Re-run Cell 1 - now it works!
```

**Option B - Set up first (recommended for sharing):**
```python
# Cell 1: One-time setup
!pip install -q requirements-installer
from requirements_installer import auto_install
auto_install()  # Will scan entire notebook session

# Cell 2+: Your code
import torch
from transformers import AutoModel
model = AutoModel.from_pretrained('bert-base-uncased')
```

**How it works in Colab:**
- Reads all executed cells from your notebook session
- Finds all import statements
- Installs missing packages automatically
- No need to save the notebook as a file!

### Example 3: Quick Script Setup
You clone a repo without a `requirements.txt`:

```bash
requirements-installer --file app.py
```

Output:
```
Detected environment: current Python at /usr/bin/python3
Entry file: /home/user/project/app.py
Installing: numpy pandas requests

==================================================
Installation Summary
==================================================
Installed: numpy, pandas, requests
Already satisfied: (none)
All requested packages are now present.
```

### Example 4: Isolated Development Environment

```bash
requirements-installer --file main.py --use-venv
```

Creates a `.venv` folder and installs all dependencies there, keeping your system Python clean.

### Example 5: Precise Version Control

```bash
requirements-installer --file analysis.py --ask-version
```

Prompts you for each package, letting you pin versions for reproducibility.

---

## üîß Command-Line Options

**After installation, use the `requirements-installer` command:**

```
usage: requirements-installer [-h] --file FILE [--use-venv] 
                              [--venv-path VENV_PATH]
                              [--print-requirements] [--ask-version]

options:
  -h, --help            Show this help message and exit
  --file FILE           Entry Python file or Jupyter notebook (.ipynb) to scan
  --use-venv            Create and use a virtual environment
  --venv-path VENV_PATH 
                        Where to create the venv (default: .venv)
  --print-requirements  Only print inferred packages and exit
  --ask-version         Interactively ask for version preference for each package
```

**Examples:**
```bash
# Basic usage
requirements-installer --file mycode.py

# With virtual environment
requirements-installer --file mycode.py --use-venv

# Interactive version selection
requirements-installer --file mycode.py --ask-version

# Scan Jupyter notebook
requirements-installer --file notebook.ipynb
```

**Note:** If you cloned the repository and want to run directly without installation:
```bash
python requirements_installer.py --file mycode.py
```

## üêç Python API

```python
from requirements_installer import auto_install

# Auto-detect and install (recommended)
auto_install()

# Specify file explicitly
auto_install(file_path='script.py')
auto_install(file_path='notebook.ipynb')

# Use virtual environment
auto_install(use_venv=True, venv_path='.venv')

# Quiet mode (only show errors)
auto_install(quiet=True)
```

---

## üéØ How It Works

1. **Parse Imports**: Uses Python's AST to find all `import` and `from ... import` statements
2. **Filter Standard Library**: Removes built-in Python modules (e.g., `os`, `sys`, `json`)
3. **Filter Local Modules**: Excludes your project's own modules
4. **Map Module Names**: Converts import names to PyPI package names (e.g., `cv2` ‚Üí `opencv-python`)
5. **Check Installation**: Queries what's already installed to avoid redundant work
6. **Install Packages**: Uses pip to install missing packages
7. **Verify**: Confirms all required packages are present

---

## üìä Comparison with Other Tools

| Feature | requirements-installer | pipreqs | pigar | pythonrunscript |
|---------|----------------------|---------|-------|-----------------|
| Auto-detect imports | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| Auto-install packages | ‚úÖ | ‚ùå | ‚ùå | ‚úÖ |
| Call from inside code | ‚úÖ | ‚ùå | ‚ùå | ‚ö†Ô∏è |
| Jupyter notebook support | ‚úÖ | ‚ö†Ô∏è | ‚úÖ | ‚ùå |
| Interactive version selection | ‚úÖ | ‚ùå | ‚ùå | ‚ùå |
| Virtual environment support | ‚úÖ | ‚ùå | ‚ùå | ‚úÖ |
| No source file modification | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| One-command operation | ‚úÖ | ‚ùå | ‚ùå | ‚úÖ |

**Why requirements-installer?**
- **pipreqs/pigar**: Generate `requirements.txt` but don't install (requires 2 steps)
- **pythonrunscript**: Installs but requires metadata comments in your code
- **requirements-installer**: 
  - ‚ú® Call `auto_install()` directly in your code
  - üìì Full Jupyter/Colab support
  - üöÄ Self-installing scripts
  - üí™ 100+ module-to-package mappings

---

## üß™ Module-to-Package Mappings

The tool includes smart mappings for 100+ common cases where the import name differs from the PyPI package name:

```python
cv2          ‚Üí opencv-python
PIL          ‚Üí Pillow
sklearn      ‚Üí scikit-learn
yaml         ‚Üí PyYAML
bs4          ‚Üí beautifulsoup4
pptx         ‚Üí python-pptx
docx         ‚Üí python-docx
MySQLdb      ‚Üí mysqlclient
psycopg2     ‚Üí psycopg2-binary
telegram     ‚Üí python-telegram-bot
discord      ‚Üí discord.py
serial       ‚Üí pyserial
git          ‚Üí GitPython
# ... and 90+ more!
```

---

## ‚ö†Ô∏è Limitations

- **One-hop scanning**: Only follows local imports one level deep (for speed)
- **Dynamic imports**: Limited detection of `importlib.import_module()` calls
- **Conditional imports**: Treats all imports equally (no context analysis)
- **Version conflicts**: Doesn't resolve complex dependency conflicts (delegates to pip)
- **Jupyter/Colab**: Scans all executed cells in the session. Make sure to run cells with imports before calling `auto_install()`

These are deliberate trade-offs for simplicity and speed. For complex projects with intricate dependency trees, consider using Poetry or Pipenv.

---

## üÜò Troubleshooting

### Google Colab: "Could not detect file to scan"

**Problem:** You get this error in Colab:
```
‚ùå Could not detect file to scan. Please provide file_path argument.
```

**Solution:** In Colab, `auto_install()` reads from your **executed cells**. Make sure you:

1. **Run cells with imports first**, then run `auto_install()`:
```python
# Cell 1: Your code with imports
import pandas as pd
import numpy as np

# Cell 2: Run this cell
!pip install -q requirements-installer  
from requirements_installer import auto_install
auto_install()  # This reads Cell 1 and installs pandas, numpy
```

2. **Or**, if you already ran your code and got import errors, just run `auto_install()` - it will scan all previous cells!

### Command not found

```bash
# If 'requirements-installer' command not found, try:
python -m requirements_installer --file mycode.py

# Or check if installed:
pip show requirements-installer
```

### Imports not detected

Make sure you've **executed the cells** containing your imports. In Jupyter/Colab, only executed cells are scanned.

---

## üÜö Command Line vs auto_install()

**Command Line** (traditional):
```bash
pip install requirements-installer
requirements-installer --file mycode.py
python mycode.py
```

**auto_install()** (modern - recommended):
```bash
python mycode.py  # That's it! Self-installing
```

---

## ü§ù Contributing

Contributions are welcome! Here are some ways you can help:

- üêõ Report bugs and issues
- üí° Suggest new features or improvements
- üìù Improve documentation
- üîß Submit pull requests
- ‚≠ê Add more module-to-package mappings

### Development Setup

```bash
git clone https://github.com/FH-Prevail/requirements_installer.git
cd requirements_installer
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -e .
```

### Running Tests

```bash
python -m pytest tests/
```

---

## üìÑ License

MIT License - see [LICENSE](LICENSE) file for details.

---

## üôè Acknowledgments

Inspired by:
- [pipreqs](https://github.com/bndr/pipreqs) - For the import scanning approach
- [pigar](https://github.com/damnever/pigar) - For AST parsing techniques
- [pythonrunscript](https://github.com/AnswerDotAI/pythonrunscript) - For auto-installation workflows

---

## üì¨ Contact & Support

- **Issues**: [GitHub Issues](https://github.com/FH-Prevail/requirements_installer/issues)
- **Discussions**: [GitHub Discussions](https://github.com/FH-Prevail/requirements_installer/discussions)
- **Repository**: [github.com/FH-Prevail/requirements_installer](https://github.com/FH-Prevail/requirements_installer)
- **Author**: Sina

---

## üéì Perfect For:

- üìì **Jupyter/Colab notebooks** - Make them truly self-contained
- üöÄ **Quick scripts** - No setup, just run
- üë• **Sharing code** - Recipients don't need to know about dependencies
- üéì **Teaching** - Students can run examples immediately
- üî¨ **Research** - Reproducible notebooks that "just work"
- ü§ñ **Automation** - Scripts that set themselves up

---

**Made with ‚ù§Ô∏è by Sina**

**Star this repo if you find it useful!** ‚≠ê 

[Report Bug](https://github.com/FH-Prevail/requirements_installer/issues) ¬∑ [Request Feature](https://github.com/FH-Prevail/requirements_installer/issues) ¬∑ [Contribute](https://github.com/FH-Prevail/requirements_installer/pulls)
