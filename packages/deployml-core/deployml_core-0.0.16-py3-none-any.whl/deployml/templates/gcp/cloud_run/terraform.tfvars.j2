project_id = "{{ project_id }}"
region = "{{ region }}"
zone = "{{ zone }}"
global_image = "gcr.io/{{ project_id }}/mlflow/mlflow:latest"
allow_public_access = true
auto_approve = false

# Cloud Run specific defaults
cpu_limit = "2000m"
memory_limit = "2Gi"
cpu_request = "1000m"
memory_request = "1Gi"
max_scale = 10
container_concurrency = 80

# Database defaults
db_type = "postgresql" 
db_user = "mlflow"      # Set to match cloud_sql_postgres module
db_password = ""        # Auto-generated
db_name = "mlflow"      # Set to match cloud_sql_postgres module
db_port = "5432"        

# Output backend_store_uri only once (global)
{% set backend_uri = None %}
{% for stage in stack %}
  {% for stage_name, tool in stage.items() %}
    {% if backend_uri is none and tool.params.get('backend_store_uri') %}
      {% set backend_uri = tool.params.get('backend_store_uri') %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% if backend_uri %}
backend_store_uri = "{{ backend_uri }}"
{% endif %}

{% for stage in stack %}
  {% for stage_name, tool in stage.items() %}
    {% for key, value in tool.params.items() %}
      {% if key == "service_name" %}
{{ stage_name }}_{{ tool.name }}_service_name = "{{ value }}"
      {% elif key == "service_name" %}
        {# Do not emit a generic service_name variable for other stages #}
      {% elif key == "mlflow_tracking_uri" %}
mlflow_tracking_uri = {{ value }}
      {% elif key == "image" %}
{{ stage_name }}_{{ tool.name }}_image = "{{ value }}"
      {% elif key == "bucket_exists" %}
bucket_exists = {{ value | lower }}
      {% elif key == "artifact_bucket" %}
artifact_bucket = "{{ tool.params.get('artifact_bucket', '') }}"
      {% elif key == "bigquery_dataset" %}
{{ stage_name }}_{{ key }} = "{{ value }}"
      {% elif key not in ["cpu_limit", "memory_limit", "cpu_request", "memory_request", "max_scale", "container_concurrency", "artifact_bucket", "create_artifact_bucket", "backend_store_uri"] %}
{{ key }} = "{{ value }}"
      {% endif %}
    {% endfor %}
  {% endfor %}
{% endfor %}

create_artifact_bucket = {{ create_artifact_bucket | lower }}

# Enable/disable modules based on YAML configuration
{% for stage in stack %}
  {% for stage_name, tool in stage.items() %}
enable_{{ stage_name }}_{{ tool.name }} = true
  {% endfor %}
{% endfor %}

# Feast-specific configuration
feast_bigquery_dataset = "feast_offline_store"
feast_create_bigquery_dataset = true 