[build-system]
requires = ["setuptools","wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "parsnip-cif"
version = "0.4.1"
requires-python = ">=3.9"
description = "Minimal library for parsing CIF & mmCIF files in Python."
readme = "README.rst"
license-files = ["LICENSE"]
authors = [
    {name = "Jen Bradley", email = "jenbrad@umich.edu"},
]
dependencies = ["numpy>=1.19", "more-itertools"]
keywords = [
        "Development Status :: 4 - Beta",
        "License :: OSI Approved :: BSD License",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Scientific/Engineering :: Chemistry",
    ]
dynamic = ["optional-dependencies"]

[project.urls]
Source = "https://github.com/glotzerlab/parsnip"
Issues = "https://github.com/glotzerlab/parsnip/issues"

[tool.setuptools]
packages=["parsnip"]

[tool.setuptools.dynamic]
optional-dependencies.tests = { file = ["tests/requirements.in"] }
optional-dependencies.doc = { file = ["doc/requirements.in"] }
optional-dependencies.sympy = { file = ["requirements-sympy.in"] }

[tool.pytest.ini_options]
testpaths = ["tests", "parsnip", "doc"]
addopts = ["--doctest-plus", "--doctest-glob='*.rst'", "-W", "error::Warning"]
doctest_rst = true
doctest_optionflags = ["NORMALIZE_WHITESPACE", "ELLIPSIS", "FLOAT_CMP"]
console_output_style = "progress"


[tool.ruff]
include = ["*.py", "*.ipynb"]
exclude = ["tests/data"]
line-length = 88

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "D",   # pydocstyle
    "E",   # pycodestyle-error
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "W",   # pycodestyle-warning
    "C4",  # check list comprehensions and generators
    "PT",  # pytest style checks
    "UP",  # pyupgrade
    "NPY", # check for use of deprecated numpy functions
    "SIM", # check for duplicate/needlessly verbose code
    "ISC", # checks for implicit string concatenation
    "RET", # check for unnecessary branches surround returned values
    "RUF", # reduce ambiguity in string concatenation and iterable combination
    "PIE790", # remove unnecessary pass statements
    "PIE794", # enable c-style single definition of variables
]
ignore = [
  "S101", # Assertions are a good thing
  "D105", # Magic methods don't require documentation.
  "D107", # __init__ methods don't require documentation.
  "ISC001", # Raises warning in ruff formatter
  "SIM116", # Allow certain branched if statements
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
known-third-party = ["hypothesis", "pytest"]
known-first-party = ["parsnip"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "B018", "F811"]
"parsnip/*" = ["E741"]
"__init__.py" = ["F401"] # Do not remove "unused" imports in __init__.py files
"tests/conftest.py" = ["N806", "N816"] # Allow mixed-case globals

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.coverage.run]
omit = [
    "parsnip/coverage.py",
]

[tool.bumpversion] # https://github.com/callowayproject/bump-my-version
tag = false
commit = false
message = "Bump version: {current_version} â†’ {new_version}"

[[tool.bumpversion.files]]
filename="pyproject.toml"
[[tool.bumpversion.files]]
filename="doc/source/conf.py"
[[tool.bumpversion.files]]
filename="parsnip/__init__.py"
