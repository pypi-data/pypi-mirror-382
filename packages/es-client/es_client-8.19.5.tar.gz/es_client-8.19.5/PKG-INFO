Metadata-Version: 2.3
Name: es_client
Version: 8.19.5
Summary: Elasticsearch Client builder, complete with schema validation
Project-URL: Homepage, https://github.com/untergeek/es_client
Project-URL: Bug Tracker, https://github.com/untergeek/es_client/issues
Project-URL: Documentation, https://es-client.readthedocs.io/
Project-URL: Source Code, http://github.com/untergeek/es_client
Project-URL: Release Notes, https://github.com/untergeek/es_client/releases
Author-email: Aaron Mildenstein <aaron@mildensteins.com>
License: Apache-2.0
License-File: LICENSE
Keywords: client,command-line,connect,elasticsearch
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.8
Requires-Dist: certifi>=2025.10.5
Requires-Dist: click==8.1.8
Requires-Dist: cryptography>=44.0.2
Requires-Dist: dotmap==1.3.30
Requires-Dist: ecs-logging==2.2.0
Requires-Dist: elasticsearch8==8.19.1
Requires-Dist: pyyaml==6.0.2
Requires-Dist: tiered-debug>=1.4.0
Requires-Dist: voluptuous>=0.14.2
Provides-Extra: doc
Requires-Dist: furo>=2024.8.6; extra == 'doc'
Provides-Extra: test
Requires-Dist: pytest-cov; extra == 'test'
Requires-Dist: pytest-dotenv; extra == 'test'
Requires-Dist: pytest>=7.2.1; extra == 'test'
Requires-Dist: requests; extra == 'test'
Description-Content-Type: text/x-rst

.. _readme:

es_client
=========

https://es-client.readthedocs.io/

You may wonder why this even exists, as at first glance it doesn't seem to make
anything any easier than just using the elasticsearch8 Python module to
build a client connection.  I needed to be able to reuse the more complex
schema validation bits I was employing, namely:

* ``master_only`` detection
* Elasticsearch version checking and validation, and the option to skip this.
* Configuration value validation, including file paths for SSL certificates,
  meaning:

  * No unknown keys or unacceptable parameter values are accepted
  * Acceptable values and ranges are established (where known)--and easy to
    amend, if necessary.

So, if you don't need these, then this library probably isn't what you're
looking for.  If you want these features, then you've come to the right place.

Example Usage
-------------

::

    from es_client import Builder

    config = {
        'elasticsearch': {
            'client': {
                'hosts': 'https://10.0.0.123:9200',
                'ca_certs': '/etc/elasticsearch/certs/ca.crt',
                'request_timeout': 60,
            },
            'other_settings': {
                'master_only': false,
                'username': 'joe_user',
                'password': 'password',
            }
        },
        'logging': {
            'loglevel': 'INFO',
            'logfile': '/path/to/file.log',
            'logformat': 'default',
        }
    }

    builder = Builder(configdict=config)

    try:
        builder.connect()
    except:
        # Do exception handling here...

    client = builder.client

Additionally, you can read from a YAML configuration file:

::

    ---
    elasticsearch:
      client:
        hosts: https://10.0.0.123:9200
        ca_certs: /etc/elasticsearch/certs/ca.crt
        request_timeout: 60
      other_settings:
        master_only: false
        username: joe_user
        password: password
    logging:
      loglevel: INFO
      logfile: /path/to/file.log
      logformat: default

::

    from es_client import Builder

    builder = Builder(configfile='/path/to/es_client.yml')

    try:
        builder.connect()
    except:
        # Do exception handling here...

    client = builder.client

The same schema validations apply here as well.
