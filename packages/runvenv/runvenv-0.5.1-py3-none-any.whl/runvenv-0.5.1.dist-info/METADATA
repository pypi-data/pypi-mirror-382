Metadata-Version: 2.4
Name: runvenv
Version: 0.5.1
Summary: run python scripts or modules in a venv with a single command
Author-email: Philipp Unger <philipp.unger.1988@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/philippun1/runvenv
Project-URL: Repository, https://github.com/philippun1/runvenv
Project-URL: Bug Tracker, https://github.com/philippun1/runvenv/issues
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3.14
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

## runvenv

[![PyPI](https://img.shields.io/pypi/v/runvenv)](https://pypi.org/project/runvenv/)
[![Python](https://img.shields.io/pypi/pyversions/runvenv)](https://pypi.org/project/runvenv/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Runs a script or module in a venv and forwards *any* parameter.
This includes non positional arguments like `--help`, `--init`, `--path`, `--check`, `--requirements`, etc.

With no parameters given this help will be shown. To only create a venv and not run anything
you can use the `--init` parameter. If the venv does not exist yet, it will create it and also install
all requirements in either `reqirements.txt`, `.requirements.txt` or `.requirements.venv` if available.

To check if a venv is already set up use the parameter `--check`. Depending on the status exit code is:
- 0 = up-to-date
- 1 = available but not up-to-date
- 2 = not available

A custom venv path or requirements file can be configured via parameters.
