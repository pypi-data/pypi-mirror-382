name: Build and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create GitHub Release
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Installation
          
          Install from PyPI:
          ```bash
          pip install ls-ml-toolkit==${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false
        
    - name: Update GitHub Release
      if: steps.check_release.outputs.exists == 'true'
      run: |
        gh release edit ${{ github.ref_name }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes "## Installation

        Install from PyPI:
        \`\`\`bash
        pip install ls-ml-toolkit==${{ steps.version.outputs.version }}
        \`\`\`"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Release Assets
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: dist
        asset_content_type: application/zip
        
    - name: Upload Release Assets (existing release)
      if: steps.check_release.outputs.exists == 'true'
      run: |
        # Delete existing assets if any
        gh release delete-asset ${{ github.ref_name }} dist 2>/dev/null || true
        # Upload new assets
        gh release upload ${{ github.ref_name }} dist/* --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
