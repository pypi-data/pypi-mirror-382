from __future__ import annotations

from functools import cached_property
from pathlib import Path
from typing import TYPE_CHECKING, Final

from bump_deps_index._spec import PkgType

from ._base import Loader

if TYPE_CHECKING:
    from collections.abc import Iterator

_BASE: Final[str] = "requirements"


class Requirements(Loader):
    def supports(self, filename: Path) -> bool:  # noqa: PLR6301
        return (
            filename.suffix in {".in", ".txt"}
            and (filename.stem.split(".")[0] == _BASE or filename.stem.split("-")[0] == _BASE)
            and not (filename.suffix == ".txt" and filename.with_suffix(".in").exists())
        )

    @cached_property
    def files(self) -> Iterator[Path]:
        generated_marker = "# This file was autogenerated by"
        found = {
            f
            for f in Path.cwd().iterdir()
            if (f.stem.split(".")[0] == _BASE or f.stem.split("-")[0] == _BASE) and f.suffix in {".in", ".txt"}
        }
        existing_names = {f.name for f in found}

        for filename in found:
            if filename.suffix == ".txt" and filename.with_suffix(".in").name in existing_names:
                continue
            with filename.open("rt", encoding="utf-8") as file_handler:
                if not any(  # pragma: no branch
                    line.startswith(generated_marker) for line in file_handler if line.startswith("#")
                ):
                    yield filename

    def load(self, filename: Path, *, pre_release: bool | None) -> Iterator[tuple[str, PkgType, bool]]:
        pre = False if pre_release is None else pre_release
        lines = [i.strip() for i in filename.read_text(encoding="utf-8").split("\n") if not i.strip().startswith("#")]
        yield from self._generate(lines, pkg_type=PkgType.PYTHON, pre_release=pre)


__all__ = [
    "Requirements",
]
