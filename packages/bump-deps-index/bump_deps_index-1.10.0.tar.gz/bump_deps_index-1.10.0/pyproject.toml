[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs>=0.5",
  "hatchling>=1.27",
]

[project]
name = "bump-deps-index"
description = "Bump your dependencies to latest available from index."
readme = "README.md"
keywords = [
  "bump",
  "index",
  "pypi",
  "version",
]
license.file = "LICENSE"
maintainers = [
  { name = "Bernát Gábor", email = "gaborjbernat@gmail.com" },
]
requires-python = ">=3.11"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = [
  "version",
]
dependencies = [
  "httpx>=0.28.1",
  "packaging>=25",
  "pyyaml>=6.0.3",
  "truststore>=0.10.4",
]
urls.Documentation = "https://bump-deps-index.readthedocs.io"
urls.Homepage = "https://github.com/gaborbernat/bump-deps-index"
urls.Source = "https://github.com/gaborbernat/bump-deps-index"
urls.Tracker = "https://github.com/gaborbernat/bump-deps-index/issues"
scripts.bump-deps-index = "bump_deps_index.__main__:main"

[dependency-groups]
dev = [
  { include-group = "lint" },
  { include-group = "pkg-meta" },
  { include-group = "test" },
  { include-group = "type" },
]
test = [
  "covdefaults>=2.3",
  "pytest>=8.4.2",
  "pytest-cov>=7",
  "pytest-httpx>=0.35",
  "pytest-mock>=3.15.1",
]
type = [
  "pyright>=1.1.406",
  { include-group = "test" },
]
docs = [
  "furo>=2025.9.25",
  "proselint>=0.14",
  "sphinx>=8.2.3",
  "sphinx-argparse-cli>=1.19",
]
lint = [ "pre-commit-uv>=4.1.5" ]
pkg-meta = [ "check-wheel-contents>=0.6.3", "twine>=6.2", "uv>=0.8.22" ]

[tool.hatch]
build.hooks.vcs.version-file = "src/bump_deps_index/version.py"
version.source = "vcs"

[tool.black]
line-length = 120

[tool.ruff]
target-version = "py311"
line-length = 120
format.preview = true
format.docstring-code-line-length = 100
format.docstring-code-format = true
lint.select = [
  "ALL",
]
lint.ignore = [
  "ANN401", # allow Any as type annotation
  "COM812", # Conflict with formatter
  "CPY",    # No copyright statements
  "D203",   # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible
  "D212",   # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible
  "DOC",    # no support
  "ISC001", # Conflict with formatter
  "S104",   # Possible binding to all interface
]
lint.per-file-ignores."tests/**/*.py" = [
  "D",       # don't care about documentation in tests
  "FBT",     # don't care about booleans as positional arguments in tests
  "INP001",  # no implicit namespace
  "PLC2701", # Private name import
  "PLR0917", # Too many positional arguments
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
  "S101",    # asserts allowed in tests
  "S404",    # `subprocess` module is possibly insecure
  "S603",    # `subprocess` call: check for execution of untrusted input
]
lint.isort = { known-first-party = [
  "bump_deps_index",
], required-imports = [
  "from __future__ import annotations",
] }
lint.preview = true

[tool.codespell]
builtin = "clear,usage,en-GB_to_en-US"
count = true

[tool.pytest.ini_options]
testpaths = [ "tests" ]
verbosity_assertions = 2
filterwarnings = [
  "error",
  "ignore:unclosed database in <sqlite3.Connection object at:ResourceWarning",
]

[tool.coverage]
run.plugins = [
  "covdefaults",
]
run.parallel = true
report.fail_under = 100
html.show_contexts = true
html.skip_covered = false
paths.source = [
  "src",
  ".tox*/*/lib/python*/site-packages",
  ".tox*/pypy*/site-packages",
  ".tox*\\*\\Lib\\site-packages",
  "*/src",
  "*\\src",
]

[tool.pyright]
include = [ "src", "tests" ]
typeCheckingMode = "strict"
reportUnknownMemberType = false
executionEnvironments = [ { root = "tests", reportPrivateUsage = false, reportUnknownLambdaType = false } ]
