import os
import sys
import json
import re
import requests

from .utils import run_command, sanitize_text


# Constants
GEMINI_MODEL = "gemini-2.5-flash"
GEMINI_API_BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models"
API_TIMEOUT = 30

VALID_COMMIT_TYPES = [
    "feat", "fix", "refactor", "style", "test", 
    "docs", "build", "ops", "chore", "revert"
]

COMMIT_MESSAGE_TEMPLATE = """<type>([scope]): <description>
[optional body]
[optional footer(s)]"""

PROMPT_TEMPLATE = """You are an expert in writing Git commit messages that strictly adhere to the Conventional Commits 1.0.0 specification, with additional opinionated rules. Below is a diff of staged changes from the command:

```
git diff --cached
```

```
{diff_content}
```

Generate a commit message with the following structure:
{commit_message_template}

### Requirements:
- **Type**: {type_instruction} Valid types: {valid_types}.
- **Scope**: {scope_instruction}
- **Description**: A concise (max 72 characters), clear summary in imperative, present tense (e.g., 'add', 'fix', 'update'). Use lowercase first letter, no period at the end.
- **Body**: Optional. Include only if needed for motivation or context, starting one blank line after the description. Format as bullet points starting with '- ', using imperative, present tense, concise phrases (max 72 characters per line).
- **Footer**: Optional. Include 'BREAKING CHANGE: <description>' for breaking changes if the description is insufficient. Use '!' before ':' in the subject line for breaking changes (e.g., feat(api)!). Optionally include issue references (e.g., 'Closes #123').
- **Special Cases**:
  - For initial commits, use 'chore: init'.
  - For revert commits, use 'revert: <reverted commit subject line>' with a 'Refs: <commit SHA>' footer if applicable.
  - Merge commits are not generated by this script.
- **Examples**:
  - feat(ui): add dark mode toggle
    - Implement toggle for dark/light mode in UI
    - Update CSS for theme consistency
  - fix(api): resolve incorrect response status
    - Fix HTTP status code in error responses
    - Add tests for status validation
  - feat(auth)!: require oauth for all endpoints
    - Enforce OAuth token for API access
    - Update auth middleware
    BREAKING CHANGE: endpoints require OAuth token
  - docs: update contributing guidelines
  - refactor(core): simplify request handler
    - Remove obsolete timeout logic
    - Streamline error handling
  - perf: optimize database query with indexing
    - Add indexes to user table
    - Reduce query time by 30%
  - test(db): add tests for user query endpoints
    - Add unit tests for GET queries
    - Mock database for test isolation
  - build: update webpack to version 5.0.0
    - Upgrade build dependencies
    - Optimize bundle size
  - ops: configure automated backups
    - Set up daily backup cron job
    - Store backups in secure bucket
  - chore: init
  - revert: undo user authentication changes
    Refs: abc1234
- **Constraints**:
  - Use crisp, simple, professional English in present tense.
  - Ensure the message aligns with Semantic Versioning (feat/fix for MINOR, BREAKING CHANGE for MAJOR, others for PATCH).
  - Avoid vague terms (e.g., 'improve', 'change') unless specific.
  - If the diff is unclear or empty, return: 'Error: Unable to generate commit message from diff.'
- **Output**: Return only the commit message text, without explanations or markdown code fences.

Based on the diff, generate a commit message that meets these criteria."""


class GeminiAPIError(Exception):
    """Custom exception for Gemini API errors."""
    pass


class CommitMessageGenerator:
    """Handles commit message generation using Google Gemini API."""
    
    def __init__(self, api_key=None):
        """
        Initialize the generator with API key.
        
        Args:
            api_key: Google Gemini API key. If None, reads from GEMINI_API_KEY env var.
        """
        self.api_key = api_key or os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            self._exit_with_error(
                "GEMINI_API_KEY environment variable is not set.",
                "Please set it with your Google Gemini API key."
            )
    
    @staticmethod
    def _exit_with_error(*messages):
        """Print error messages and exit."""
        for message in messages:
            print(f"Error: {message}" if not message.startswith("Please") else message)
        sys.exit(1)
    
    def _get_staged_diff(self):
        """
        Get the diff of staged changes.
        
        Returns:
            str: Sanitized diff content.
        """
        diff_content = run_command("git diff --cached")
        if not diff_content:
            print("No staged changes found. Please stage changes using 'git add' before running gcm.")
            sys.exit(1)
        return sanitize_text(diff_content)
    
    def _build_prompt(self, diff_content, commit_type, scope):
        """
        Build the prompt for the Gemini API.
        
        Args:
            diff_content: The git diff content.
            commit_type: The commit type (if specified).
            scope: The commit scope (if specified).
        
        Returns:
            str: Formatted prompt.
        """
        # Determine type instruction
        if commit_type:
            type_instruction = f"MUST use '{commit_type}' as the type. Do NOT infer or change this type."
        else:
            type_instruction = "Infer the appropriate type from the diff."
        
        # Determine scope instruction
        if scope:
            scope_instruction = f"Use '{scope}' as the scope."
        else:
            scope_instruction = "Infer a concise scope (max 20 characters, e.g., module or component name) or omit if not applicable. Enclose in parentheses, e.g., (api). Do not use issue identifiers as scopes."
        
        return PROMPT_TEMPLATE.format(
            diff_content=diff_content,
            commit_message_template=COMMIT_MESSAGE_TEMPLATE,
            type_instruction=type_instruction,
            scope_instruction=scope_instruction,
            valid_types=", ".join(VALID_COMMIT_TYPES)
        )
    
    def _call_api(self, prompt):
        """
        Call the Google Gemini API with the given prompt.
        
        Args:
            prompt: The prompt to send to the API.
        
        Returns:
            str: Raw API response text.
        
        Raises:
            GeminiAPIError: If the API call fails.
        """
        url = f"{GEMINI_API_BASE_URL}/{GEMINI_MODEL}:generateContent"
        headers = {
            "x-goog-api-key": self.api_key,
            "Content-Type": "application/json"
        }
        data = {
            "contents": [{
                "role": "user",
                "parts": [{"text": prompt}]
            }]
        }
        
        try:
            response = requests.post(url, headers=headers, json=data, timeout=API_TIMEOUT)
            response.raise_for_status()
            return response.text
        except requests.RequestException as e:
            raise GeminiAPIError(f"Failed to fetch response from Gemini API: {e}")
    
    def _parse_response(self, response_text):
        """
        Parse the Gemini API response and extract the commit message.
        
        Args:
            response_text: Raw API response text.
        
        Returns:
            str: Extracted commit message.
        """
        response_text = sanitize_text(response_text)
        
        try:
            response_json = json.loads(response_text)
            message = (
                response_json
                .get("candidates", [{}])[0]
                .get("content", {})
                .get("parts", [{}])[0]
                .get("text", "")
            )
            message = re.sub(r'```', '', message).strip()
        except json.JSONDecodeError as e:
            self._exit_with_error(
                f"Failed to parse API response: {e}",
                "The response may contain invalid characters or be malformed."
            )
        
        if message == "Error: Unable to generate commit message from diff.":
            print(message)
            sys.exit(1)
        
        return message
    
    def generate(self, commit_type=None, scope=None):
        """
        Generate a commit message using the Google Gemini API.
        
        Args:
            commit_type: Optional commit type to use.
            scope: Optional commit scope to use.
        
        Returns:
            str: Generated commit message.
        """
        try:
            diff_content = self._get_staged_diff()
            prompt = self._build_prompt(diff_content, commit_type, scope)
            response_text = self._call_api(prompt)
            return self._parse_response(response_text)
        except GeminiAPIError as e:
            self._exit_with_error(str(e))


def generate_commit_message(commit_type, scope):
    """
    Generate a commit message using the Google Gemini API.
    
    Args:
        commit_type: Optional commit type to use.
        scope: Optional commit scope to use.
    
    Returns:
        str: Generated commit message.
    """
    generator = CommitMessageGenerator()
    return generator.generate(commit_type, scope)