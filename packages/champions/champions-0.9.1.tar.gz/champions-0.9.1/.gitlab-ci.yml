default:
  image: registry.gitlab.com/python-devs/ci-images:active

stages:
  - test
  - prepare
  - release


unit_test_job:
  stage: test                                              # This stage must run before the release stage
  image: registry.gitlab.com/python-devs/ci-images:active

  rules:
    - if: $CI_COMMIT_TAG
      when: never                                            
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH     
  script:
    - uv run pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
        junit: report.xml 


prepare_job:
  stage: prepare                                              # This stage must run before the release stage
  image: registry.gitlab.com/python-devs/ci-images:active
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                            
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH          
  script:
    - NEW_VERSION=$(uv version --short)
    - TODAY=$(date +%d.%m.%Y)
    - git config --global --add safe.directory /builds/gwhe/champions
    - git fetch --tags  # Fetch all tags
    - |
      if git tag -l "$NEW_VERSION" | grep -q "$NEW_VERSION"; then
        echo "Tag/Version '$NEW_VERSION' already exists."
        exit 1 
      fi
    - |
      if grep -q "## \[$NEW_VERSION\] $TODAY" CHANGELOG; then
        echo "$NEW_VERSION found in CHANGELOG with today's date ($TODAY). "
      else
        echo "ERROR $NEW_VERSION not found in CHANGELOG with today's date ($TODAY)."
        exit 1
      fi
    - echo "TAG=$NEW_VERSION" >> variables.env 
  artifacts:
    reports:
      dotenv: variables.env
    paths:
      - public    


publish_page_job:
  stage: release                                              # This stage must run before the release stage
  image: registry.gitlab.com/python-devs/ci-images:active
  pages: true
  needs:
    - job: prepare_job
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                            
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH     
  script:
    - uv run mkdocs build --site-dir public 
  artifacts:
    paths:
      - public                         

publish_pypi_job:
  stage: release                                              # This stage must run before the release stage
  image: registry.gitlab.com/python-devs/ci-images:active
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                            
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: prepare_job
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi          
  script:
    - rm -rf dist 
    - uv sync
    - uv build 
    - source .venv/bin/activate
    - oidc_token=$(python -m id PYPI)
    - resp=$(curl -X POST https://upload.pypi.org/_/oidc/mint-token -d "{\"token\":\"${oidc_token}\"}")
    - api_token=$(jq --raw-output '.token' <<< "${resp}")
    - uv publish -u __token__ -p "${api_token}"

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  needs:
    - job: prepare_job
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "running release_job for $TAG"
    - echo "$RELEASE_NOTES"
    - sed -n '/^## \['"$TAG"'/,/^## /p' CHANGELOG | head -n -1 > RELEASE_NOTES

  release:                                         # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$TAG'                # The version is incremented per pipeline.
    description: './RELEASE_NOTES'
    ref: '$CI_COMMIT_SHA'                          # The tag is created from the pipeline SHA.

