# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class CellLabelResult(BaseModel):
    id: str
    full_name: Optional[str] = Field(alias="fullName")
    name: str
    ontology_term_exists: Optional[bool] = Field(alias="ontologyTermExists")
    ontology_term_id: Optional[str] = Field(alias="ontologyTermId")
    ontology_term: Optional[str] = Field(alias="ontologyTerm")
    synonyms: List[str]
    category_ontology_term_exists: Optional[bool] = Field(
        alias="categoryOntologyTermExists"
    )
    category_ontology_term_id: Optional[str] = Field(alias="categoryOntologyTermId")
    category_ontology_term: Optional[str] = Field(alias="categoryOntologyTerm")
    category_full_name: Optional[str] = Field(alias="categoryFullName")
    marker_genes: List[str] = Field(alias="markerGenes")
    canonical_marker_genes: Optional[List[str]] = Field(alias="canonicalMarkerGenes")
    count: int


class CommentContentExplanationData(BaseModel):
    comment: Optional[str]
    typename__: str = Field(alias="__typename")


class CurrentEmbeddingProviderAvailableEmbeddings(BaseModel):
    embeddings: List["CurrentEmbeddingProviderAvailableEmbeddingsEmbeddings"]
    typename__: str = Field(alias="__typename")


class CurrentEmbeddingProviderAvailableEmbeddingsEmbeddings(BaseModel):
    name: str
    typename__: Literal["EmbeddingGroup"] = Field(alias="__typename")


class SplitContentExplanationData(BaseModel):
    groups_number: float = Field(alias="groupsNumber")
    groups: Optional[List["SplitContentExplanationDataGroups"]]
    comment: Optional[str]
    typename__: str = Field(alias="__typename")


class SplitContentExplanationDataGroups(BaseModel):
    name: str
    marker_genes: List[str] = Field(alias="markerGenes")
    typename__: Literal["FeedbackExplanationDataSplitLabels"] = Field(
        alias="__typename"
    )


class MergeContentExplanationData(BaseModel):
    comment: Optional[str]
    labels: List["MergeContentExplanationDataLabels"]
    typename__: str = Field(alias="__typename")


class MergeContentExplanationDataLabels(BaseModel):
    id: str
    name: str
    typename__: Literal["Label"] = Field(alias="__typename")


class RefineContentExplanationData(BaseModel):
    changes: List["RefineContentExplanationDataChanges"]
    typename__: str = Field(alias="__typename")


class RefineContentExplanationDataChanges(BaseModel):
    attribute: str
    original_value: Any = Field(alias="originalValue")
    new_value: Any = Field(alias="newValue")
    typename__: Literal["FeedbackExplanationDataRefineChanges"] = Field(
        alias="__typename"
    )


class FeedbackCardFeedback(BaseModel):
    created_at: Any = Field(alias="createdAt")
    user: Optional["FeedbackCardFeedbackUser"]
    explanation: Optional["FeedbackCardFeedbackExplanation"]
    typename__: str = Field(alias="__typename")


class FeedbackCardFeedbackUser(BaseModel):
    uid: str
    display_name: str = Field(alias="displayName")
    avatar_url: str = Field(alias="avatarUrl")
    typename__: Literal["CapUser"] = Field(alias="__typename")


class FeedbackCardFeedbackExplanation(BaseModel):
    type: str
    data: Optional[
        Annotated[
            Union[
                "FeedbackCardFeedbackExplanationDataFeedbackExplanationDataMerge",
                "FeedbackCardFeedbackExplanationDataFeedbackExplanationDataRefine",
                "FeedbackCardFeedbackExplanationDataFeedbackExplanationDataComment",
                "FeedbackCardFeedbackExplanationDataFeedbackExplanationDataSplit",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    typename__: Literal["LabelFeedbackExplanation"] = Field(alias="__typename")


class FeedbackCardFeedbackExplanationDataFeedbackExplanationDataMerge(
    MergeContentExplanationData
):
    typename__: Literal["FeedbackExplanationDataMerge"] = Field(alias="__typename")


class FeedbackCardFeedbackExplanationDataFeedbackExplanationDataRefine(
    RefineContentExplanationData
):
    typename__: Literal["FeedbackExplanationDataRefine"] = Field(alias="__typename")


class FeedbackCardFeedbackExplanationDataFeedbackExplanationDataComment(
    CommentContentExplanationData
):
    comment: Optional[str]
    typename__: Literal["FeedbackExplanationDataComment"] = Field(alias="__typename")
    typename__: Literal["FeedbackExplanationDataComment"] = Field(alias="__typename")


class FeedbackCardFeedbackExplanationDataFeedbackExplanationDataSplit(
    SplitContentExplanationData
):
    typename__: Literal["FeedbackExplanationDataSplit"] = Field(alias="__typename")


class GeneLinkLabelset(BaseModel):
    id: str
    labels: Optional[List["GeneLinkLabelsetLabels"]]
    typename__: str = Field(alias="__typename")


class GeneLinkLabelsetLabels(BaseModel):
    id: str
    name: str
    count: int
    typename__: Literal["Label"] = Field(alias="__typename")


class FeedbackCardOrganismLabelset(GeneLinkLabelset):
    typename__: str = Field(alias="__typename")


class DatasetInitialState(BaseModel):
    id: str
    name: str
    description: Optional[str]
    dataset_type: str = Field(alias="datasetType")
    default_embedding: Optional[str] = Field(alias="defaultEmbedding")
    cell_count: float = Field(alias="cellCount")
    in_review: bool = Field(alias="inReview")
    labelsets: Optional[List["DatasetInitialStateLabelsets"]]
    typename__: str = Field(alias="__typename")


class DatasetInitialStateLabelsets(FeedbackCardOrganismLabelset):
    id: str
    name: str
    mode: str
    order: float
    description: Optional[str]
    annotation_method: Optional[str] = Field(alias="annotationMethod")
    algorithm_name: Optional[str] = Field(alias="algorithmName")
    algorithm_version: Optional[str] = Field(alias="algorithmVersion")
    algorithm_repo_url: Optional[str] = Field(alias="algorithmRepoUrl")
    reference_description: Optional[str] = Field(alias="referenceDescription")
    reference_location: Optional[str] = Field(alias="referenceLocation")
    labels: Optional[List["DatasetInitialStateLabelsetsLabels"]]
    typename__: Literal["Labelset"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabels(BaseModel):
    id: str
    name: str
    count: int
    color: str
    full_name: Optional[str] = Field(alias="fullName")
    ontology_term_exists: Optional[bool] = Field(alias="ontologyTermExists")
    ontology_term: Optional[str] = Field(alias="ontologyTerm")
    ontology_term_id: Optional[str] = Field(alias="ontologyTermId")
    category_full_name: Optional[str] = Field(alias="categoryFullName")
    category_ontology_term_exists: Optional[bool] = Field(
        alias="categoryOntologyTermExists"
    )
    category_ontology_term: Optional[str] = Field(alias="categoryOntologyTerm")
    category_ontology_term_id: Optional[str] = Field(alias="categoryOntologyTermId")
    marker_genes: List[str] = Field(alias="markerGenes")
    canonical_marker_genes: Optional[List[str]] = Field(alias="canonicalMarkerGenes")
    synonyms: List[str]
    rationale: Optional[str]
    rationale_dois: Optional[List[str]] = Field(alias="rationaleDois")
    ontology_assessment: Optional[str] = Field(alias="ontologyAssessment")
    scores: "DatasetInitialStateLabelsetsLabelsScores"
    feedbacks: List["DatasetInitialStateLabelsetsLabelsFeedbacks"]
    typename__: Literal["Label"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsScores(BaseModel):
    agree: float
    disagree: float
    idk: float
    typename__: Literal["LabelScores"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsFeedbacks(FeedbackCardFeedback):
    is_updated: bool = Field(alias="isUpdated")
    user: Optional["DatasetInitialStateLabelsetsLabelsFeedbacksUser"]
    score: Optional[float]
    explanation: Optional["DatasetInitialStateLabelsetsLabelsFeedbacksExplanation"]
    typename__: Literal["LabelFeedback"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsFeedbacksUser(BaseModel):
    uid: str
    typename__: Literal["CapUser"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsFeedbacksExplanation(BaseModel):
    data: Optional[
        Annotated[
            Union[
                "DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataMerge",
                "DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataRefine",
                "DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataComment",
                "DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataSplit",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    type: str
    typename__: Literal["LabelFeedbackExplanation"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataMerge(
    BaseModel
):
    comment: Optional[str]
    label_ids: List[str] = Field(alias="labelIds")
    typename__: Literal["FeedbackExplanationDataMerge"] = Field(alias="__typename")
    typename__: Literal["FeedbackExplanationDataMerge"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataRefine(
    BaseModel
):
    changes: List[
        "DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataRefineChanges"
    ]
    typename__: Literal["FeedbackExplanationDataRefine"] = Field(alias="__typename")
    typename__: Literal["FeedbackExplanationDataRefine"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataRefineChanges(
    BaseModel
):
    attribute: str
    new_value: Any = Field(alias="newValue")
    original_value: Any = Field(alias="originalValue")
    typename__: Literal["FeedbackExplanationDataRefineChanges"] = Field(
        alias="__typename"
    )


class DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataComment(
    BaseModel
):
    comment: Optional[str]
    typename__: Literal["FeedbackExplanationDataComment"] = Field(alias="__typename")
    typename__: Literal["FeedbackExplanationDataComment"] = Field(alias="__typename")


class DatasetInitialStateLabelsetsLabelsFeedbacksExplanationDataFeedbackExplanationDataSplit(
    BaseModel
):
    typename__: Literal["FeedbackExplanationDataSplit"] = Field(alias="__typename")


class DatasetResult(BaseModel):
    id: str
    name: str
    cell_count: float = Field(alias="cellCount")
    project: "DatasetResultProject"


class DatasetResultProject(BaseModel):
    id: str
    name: str


class ProjectAuthorsProject(BaseModel):
    version: float
    owner: "ProjectAuthorsProjectOwner"
    permissions: List["ProjectAuthorsProjectPermissions"]
    typename__: str = Field(alias="__typename")


class ProjectAuthorsProjectOwner(BaseModel):
    uid: str
    display_name: str = Field(alias="displayName")
    display_name: str = Field(alias="displayName")
    avatar_url: str = Field(alias="avatarUrl")
    typename__: Literal["CapUser"] = Field(alias="__typename")


class ProjectAuthorsProjectPermissions(BaseModel):
    id: str
    is_active: bool = Field(alias="isActive")
    role: Any
    user: Optional["ProjectAuthorsProjectPermissionsUser"]
    typename__: Literal["ProjectPermission"] = Field(alias="__typename")


class ProjectAuthorsProjectPermissionsUser(BaseModel):
    uid: str
    display_name: str = Field(alias="displayName")
    display_name: str = Field(alias="displayName")
    avatar_url: str = Field(alias="avatarUrl")
    typename__: Literal["CapUser"] = Field(alias="__typename")


CellLabelResult.model_rebuild()
CommentContentExplanationData.model_rebuild()
CurrentEmbeddingProviderAvailableEmbeddings.model_rebuild()
SplitContentExplanationData.model_rebuild()
MergeContentExplanationData.model_rebuild()
RefineContentExplanationData.model_rebuild()
FeedbackCardFeedback.model_rebuild()
GeneLinkLabelset.model_rebuild()
FeedbackCardOrganismLabelset.model_rebuild()
DatasetInitialState.model_rebuild()
DatasetResult.model_rebuild()
ProjectAuthorsProject.model_rebuild()
