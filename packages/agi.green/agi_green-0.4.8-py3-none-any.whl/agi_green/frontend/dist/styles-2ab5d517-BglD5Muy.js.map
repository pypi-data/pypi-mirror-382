{"version":3,"file":"styles-2ab5d517-BglD5Muy.js","sources":["../node_modules/d3-selection/src/selectAll.js","../node_modules/dagre-d3-es/src/dagre-js/util.js","../node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js","../node_modules/mermaid/dist/styles-2ab5d517.js"],"sourcesContent":["import array from \"./array.js\";\nimport {Selection, root} from \"./selection/index.js\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n      : new Selection([array(selector)], root);\n}\n","import * as _ from 'lodash-es';\n\n// Public utility functions\nexport { isSubgraph, edgeToId, applyStyle, applyClass, applyTransition };\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + ':' + escapeId(e.w) + ':' + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, '\\\\:') : '';\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom.attr('class', classFn).attr('class', otherClasses + ' ' + dom.attr('class'));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","import * as util from '../util.js';\n\nexport { addHtmlLabel };\n\nfunction addHtmlLabel(root, node) {\n  var fo = root.append('foreignObject').attr('width', '100000');\n\n  var div = fo.append('xhtml:div');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  var label = node.label;\n  switch (typeof label) {\n    case 'function':\n      div.insert(label);\n      break;\n    case 'object':\n      // Currently we assume this is a DOM object.\n      div.insert(function () {\n        return label;\n      });\n      break;\n    default:\n      div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style('display', 'inline-block');\n  // Fix for firefox\n  div.style('white-space', 'nowrap');\n\n  var client = div.node().getBoundingClientRect();\n  fo.attr('width', client.width).attr('height', client.height);\n\n  return fo;\n}\n","import { curveLinear, select, selectAll } from \"d3\";\nimport { addHtmlLabel } from \"dagre-d3-es/src/dagre-js/label/add-html-label.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { r as render } from \"./index-6079d271.js\";\nimport { k as getStylesFromArray, l as log, m as evaluate, c as getConfig, e as common, r as renderKatexSanitized, n as interpolateToCurve, u as utils, o as setupGraphViewbox } from \"./mermaid-ad1dc92f.js\";\nimport * as khroma from \"khroma\";\nconst conf = {};\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\nconst addVertices = async function(vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n  for (const id of keys) {\n    const vertex = vert[id];\n    let classStr = \"default\";\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(\" \");\n    }\n    classStr = classStr + \" flowchart-label\";\n    const styles = getStylesFromArray(vertex.styles);\n    let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n    let vertexNode;\n    log.info(\"vertex\", vertex, vertex.labelType);\n    if (vertex.labelType === \"markdown\") {\n      log.info(\"vertex\", vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        const node = {\n          label: vertexText\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        svgLabel.setAttribute(\"style\", styles.labelStyle.replace(\"color:\", \"fill:\"));\n        const rows = vertexText.split(common.lineBreakRegex);\n        for (const row of rows) {\n          const tspan = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n          tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n          tspan.setAttribute(\"dy\", \"1em\");\n          tspan.setAttribute(\"x\", \"1\");\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n    let radius = 0;\n    let _shape = \"\";\n    switch (vertex.type) {\n      case \"round\":\n        radius = 5;\n        _shape = \"rect\";\n        break;\n      case \"square\":\n        _shape = \"rect\";\n        break;\n      case \"diamond\":\n        _shape = \"question\";\n        break;\n      case \"hexagon\":\n        _shape = \"hexagon\";\n        break;\n      case \"odd\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"lean_right\":\n        _shape = \"lean_right\";\n        break;\n      case \"lean_left\":\n        _shape = \"lean_left\";\n        break;\n      case \"trapezoid\":\n        _shape = \"trapezoid\";\n        break;\n      case \"inv_trapezoid\":\n        _shape = \"inv_trapezoid\";\n        break;\n      case \"odd_right\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"circle\":\n        _shape = \"circle\";\n        break;\n      case \"ellipse\":\n        _shape = \"ellipse\";\n        break;\n      case \"stadium\":\n        _shape = \"stadium\";\n        break;\n      case \"subroutine\":\n        _shape = \"subroutine\";\n        break;\n      case \"cylinder\":\n        _shape = \"cylinder\";\n        break;\n      case \"group\":\n        _shape = \"rect\";\n        break;\n      case \"doublecircle\":\n        _shape = \"doublecircle\";\n        break;\n      default:\n        _shape = \"rect\";\n    }\n    const labelText = await renderKatexSanitized(vertexText, getConfig());\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText,\n      labelType: vertex.labelType,\n      rx: radius,\n      ry: radius,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || \"\",\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n    log.info(\"setNode\", {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText,\n      rx: radius,\n      ry: radius,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n  }\n};\nconst addEdges = async function(edges, g, diagObj) {\n  log.info(\"abc78 edges = \", edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  for (const edge of edges) {\n    cnt++;\n    const linkIdBase = \"L-\" + edge.start + \"-\" + edge.end;\n    if (linkIdCnt[linkIdBase] === void 0) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + \"-\" + linkIdCnt[linkIdBase];\n    log.info(\"abc78 new link id to be used is\", linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = { style: \"\", labelStyle: \"\" };\n    edgeData.minlen = edge.length || 1;\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    edgeData.arrowTypeStart = \"arrow_open\";\n    edgeData.arrowTypeEnd = \"arrow_open\";\n    switch (edge.type) {\n      case \"double_arrow_cross\":\n        edgeData.arrowTypeStart = \"arrow_cross\";\n      case \"arrow_cross\":\n        edgeData.arrowTypeEnd = \"arrow_cross\";\n        break;\n      case \"double_arrow_point\":\n        edgeData.arrowTypeStart = \"arrow_point\";\n      case \"arrow_point\":\n        edgeData.arrowTypeEnd = \"arrow_point\";\n        break;\n      case \"double_arrow_circle\":\n        edgeData.arrowTypeStart = \"arrow_circle\";\n      case \"arrow_circle\":\n        edgeData.arrowTypeEnd = \"arrow_circle\";\n        break;\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    switch (edge.stroke) {\n      case \"normal\":\n        style = \"fill:none;\";\n        if (defaultStyle !== void 0) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== void 0) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"solid\";\n        break;\n      case \"dotted\":\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"dotted\";\n        edgeData.style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n        break;\n      case \"thick\":\n        edgeData.thickness = \"thick\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 3.5px;fill:none;\";\n        break;\n      case \"invisible\":\n        edgeData.thickness = \"invisible\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 0;fill:none;\";\n        break;\n    }\n    if (edge.style !== void 0) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n    }\n    edgeData.labelType = edge.labelType;\n    edgeData.label = await renderKatexSanitized(\n      edge.text.replace(common.lineBreakRegex, \"\\n\"),\n      getConfig()\n    );\n    if (edge.style === void 0) {\n      edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none;\";\n    }\n    edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n    edgeData.id = linkId;\n    edgeData.classes = \"flowchart-link \" + linkNameStart + \" \" + linkNameEnd;\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  }\n};\nconst getClasses = function(text, diagObj) {\n  return diagObj.db.getClasses();\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing flowchart\");\n  let dir = diagObj.db.getDirection();\n  if (dir === void 0) {\n    dir = \"TD\";\n  }\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  const nodeSpacing = conf2.nodeSpacing || 50;\n  const rankSpacing = conf2.rankSpacing || 50;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: dir,\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 0,\n    marginy: 0\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info(\"Subgraphs - \", subGraphs);\n  for (let i2 = subGraphs.length - 1; i2 >= 0; i2--) {\n    subG = subGraphs[i2];\n    log.info(\"Subgraph - \", subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      \"group\",\n      void 0,\n      subG.classes,\n      subG.dir\n    );\n  }\n  const vert = diagObj.db.getVertices();\n  const edges = diagObj.db.getEdges();\n  log.info(\"Edges\", edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    selectAll(\"cluster\").append(\"text\");\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info(\"Setting up subgraphs\", subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  await addVertices(vert, g, id, root, doc, diagObj);\n  await addEdges(edges, g);\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"point\", \"circle\", \"cross\"], \"flowchart\", id);\n  utils.insertTitle(svg, \"flowchartTitleText\", conf2.titleTopMargin, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  diagObj.db.indexNodes(\"subGraph\" + i);\n  if (!conf2.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n  const keys = Object.keys(vert);\n  keys.forEach(function(key) {\n    const vertex = vert[key];\n    if (vertex.link) {\n      const node = select(\"#\" + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"a\");\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"class\", vertex.classes.join(\" \"));\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"href\", vertex.link);\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"rel\", \"noopener\");\n        if (securityLevel === \"sandbox\") {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", \"_top\");\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", vertex.linkTarget);\n        }\n        const linkNode = node.insert(function() {\n          return link;\n        }, \":first-child\");\n        const shape = node.select(\".label-container\");\n        if (shape) {\n          linkNode.append(function() {\n            return shape.node();\n          });\n        }\n        const label = node.select(\".label\");\n        if (label) {\n          linkNode.append(function() {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\nconst flowRendererV2 = {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw\n};\nconst fade = (color, opacity) => {\n  const channel = khroma.channel;\n  const r = channel(color, \"r\");\n  const g = channel(color, \"g\");\n  const b = channel(color, \"b\");\n  return khroma.rgba(r, g, b, opacity);\n};\nconst getStyles = (options) => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .katex path {\n    fill: #000;\n    stroke: #000;\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  /* For html labels only */\n  .labelBkg {\n    background-color: ${fade(options.edgeLabelBackground, 0.5)};\n    // background-color: \n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\nconst flowStyles = getStyles;\nexport {\n  flowStyles as a,\n  flowRendererV2 as f\n};\n"],"names":["selectAll","selector","Selection","array","root","isSubgraph","g","v","edgeToId","escapeId","ID_DELIM","str","applyStyle","dom","styleFn","applyClass","classFn","otherClasses","applyTransition","selection","graph","_.isPlainObject","transition","_.isFunction","addHtmlLabel","node","fo","div","label","util.applyStyle","client","conf","setConf","cnf","keys","key","addVertices","vert","svgId","doc","diagObj","svg","id","vertex","classStr","styles","getStylesFromArray","vertexText","vertexNode","log","evaluate","getConfig","svgLabel","rows","common","row","tspan","radius","_shape","labelText","renderKatexSanitized","addEdges","edges","cnt","linkIdCnt","defaultStyle","defaultLabelStyle","defaultStyles","edge","linkIdBase","linkId","linkNameStart","linkNameEnd","edgeData","style","labelStyle","interpolateToCurve","curveLinear","getClasses","text","draw","_version","dir","securityLevel","conf2","nodeSpacing","rankSpacing","sandboxElement","select","graphlib.Graph","subG","subGraphs","i2","i","j","element","render","utils","setupGraphViewbox","labels","dim","rect","link","linkNode","shape","flowRendererV2","fade","color","opacity","channel","khroma.channel","r","b","khroma.rgba","getStyles","options","flowStyles"],"mappings":";;;;AAGe,SAAAA,EAASC,GAAU;AAChC,SAAO,OAAOA,KAAa,WACrB,IAAIC,EAAU,CAAC,SAAS,iBAAiBD,CAAQ,CAAC,GAAG,CAAC,SAAS,eAAe,CAAC,IAC/E,IAAIC,EAAU,CAACC,EAAMF,CAAQ,CAAC,GAAGG,CAAI;AAC7C;ACEA,SAASC,GAAWC,GAAGC,GAAG;AACxB,SAAO,CAAC,CAACD,EAAE,SAASC,CAAC,EAAE;AACzB;AAEA,SAASC,GAAS,GAAG;AACnB,SAAOC,EAAS,EAAE,CAAC,IAAI,MAAMA,EAAS,EAAE,CAAC,IAAI,MAAMA,EAAS,EAAE,IAAI;AACpE;AAEA,IAAIC,IAAW;AACf,SAASD,EAASE,GAAK;AACrB,SAAOA,IAAM,OAAOA,CAAG,EAAE,QAAQD,GAAU,KAAK,IAAI;AACtD;AAEA,SAASE,GAAWC,GAAKC,GAAS;AAChC,EAAIA,KACFD,EAAI,KAAK,SAASC,CAAO;AAE7B;AAEA,SAASC,GAAWF,GAAKG,GAASC,GAAc;AAC9C,EAAID,KACFH,EAAI,KAAK,SAASG,CAAO,EAAE,KAAK,SAASC,IAAe,MAAMJ,EAAI,KAAK,OAAO,CAAC;AAEnF;AAEA,SAASK,GAAgBC,GAAWb,GAAG;AACrC,MAAIc,IAAQd,EAAE,MAAK;AAEnB,MAAIe,EAAgBD,CAAK,GAAG;AAC1B,QAAIE,IAAaF,EAAM;AACvB,QAAIG,EAAaD,CAAU;AACzB,aAAOA,EAAWH,CAAS;AAAA,EAE/B;AAEA,SAAOA;AACT;ACzCA,SAASK,GAAapB,GAAMqB,GAAM;AAChC,MAAIC,IAAKtB,EAAK,OAAO,eAAe,EAAE,KAAK,SAAS,QAAQ,GAExDuB,IAAMD,EAAG,OAAO,WAAW;AAC/B,EAAAC,EAAI,KAAK,SAAS,8BAA8B;AAEhD,MAAIC,IAAQH,EAAK;AACjB,UAAQ,OAAOG,GAAK;AAAA,IAClB,KAAK;AACH,MAAAD,EAAI,OAAOC,CAAK;AAChB;AAAA,IACF,KAAK;AAEH,MAAAD,EAAI,OAAO,WAAY;AACrB,eAAOC;AAAA,MACT,CAAC;AACD;AAAA,IACF;AACE,MAAAD,EAAI,KAAKC,CAAK;AAAA,EACpB;AAEEC,EAAAA,GAAgBF,GAAKF,EAAK,UAAU,GACpCE,EAAI,MAAM,WAAW,cAAc,GAEnCA,EAAI,MAAM,eAAe,QAAQ;AAEjC,MAAIG,IAASH,EAAI,KAAI,EAAG,sBAAqB;AAC7C,SAAAD,EAAG,KAAK,SAASI,EAAO,KAAK,EAAE,KAAK,UAAUA,EAAO,MAAM,GAEpDJ;AACT;AC5BA,MAAMK,IAAO,CAAA,GACPC,KAAU,SAASC,GAAK;AAC5B,QAAMC,IAAO,OAAO,KAAKD,CAAG;AAC5B,aAAWE,KAAOD;AAChB,IAAAH,EAAKI,CAAG,IAAIF,EAAIE,CAAG;AAEvB,GACMC,IAAc,eAAeC,GAAM/B,GAAGgC,GAAOlC,GAAMmC,GAAKC,GAAS;AACrE,QAAMC,IAAMrC,EAAK,OAAO,QAAQkC,CAAK,IAAI,GACnCJ,IAAO,OAAO,KAAKG,CAAI;AAC7B,aAAWK,KAAMR,GAAM;AACrB,UAAMS,IAASN,EAAKK,CAAE;AACtB,QAAIE,IAAW;AACf,IAAID,EAAO,QAAQ,SAAS,MAC1BC,IAAWD,EAAO,QAAQ,KAAK,GAAG,IAEpCC,IAAWA,IAAW;AACtB,UAAMC,IAASC,EAAmBH,EAAO,MAAM;AAC/C,QAAII,IAAaJ,EAAO,SAAS,SAASA,EAAO,OAAOA,EAAO,IAC3DK;AAEJ,QADAC,EAAI,KAAK,UAAUN,GAAQA,EAAO,SAAS,GACvCA,EAAO,cAAc;AACvBM,MAAAA,EAAI,KAAK,UAAUN,GAAQA,EAAO,SAAS;AAAA,aAEvCO,EAASC,EAAS,EAAG,UAAU,UAAU;AAI3C,MAAAH,IAAaxB,GAAaiB,GAHb;AAAA,QACX,OAAOM;AAAA,MACjB,CAC2C,EAAE,KAAI,GACzCC,EAAW,WAAW,YAAYA,CAAU;AAAA,SACvC;AACL,YAAMI,IAAWb,EAAI,gBAAgB,8BAA8B,MAAM;AACzE,MAAAa,EAAS,aAAa,SAASP,EAAO,WAAW,QAAQ,UAAU,OAAO,CAAC;AAC3E,YAAMQ,IAAON,EAAW,MAAMO,EAAO,cAAc;AACnD,iBAAWC,KAAOF,GAAM;AACtB,cAAMG,IAAQjB,EAAI,gBAAgB,8BAA8B,OAAO;AACvE,QAAAiB,EAAM,eAAe,wCAAwC,aAAa,UAAU,GACpFA,EAAM,aAAa,MAAM,KAAK,GAC9BA,EAAM,aAAa,KAAK,GAAG,GAC3BA,EAAM,cAAcD,GACpBH,EAAS,YAAYI,CAAK;AAAA,MAC5B;AACA,MAAAR,IAAaI;AAAA,IACf;AAEF,QAAIK,IAAS,GACTC,IAAS;AACb,YAAQf,EAAO,MAAI;AAAA,MACjB,KAAK;AACH,QAAAc,IAAS,GACTC,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF,KAAK;AACH,QAAAA,IAAS;AACT;AAAA,MACF;AACE,QAAAA,IAAS;AAAA,IACjB;AACI,UAAMC,IAAY,MAAMC,EAAqBb,GAAYI,EAAS,CAAE;AACpE,IAAA7C,EAAE,QAAQqC,EAAO,IAAI;AAAA,MACnB,YAAYE,EAAO;AAAA,MACnB,OAAOa;AAAA,MACP,WAAAC;AAAA,MACA,WAAWhB,EAAO;AAAA,MAClB,IAAIc;AAAA,MACJ,IAAIA;AAAA,MACJ,OAAOb;AAAA,MACP,OAAOC,EAAO;AAAA,MACd,IAAIF,EAAO;AAAA,MACX,MAAMA,EAAO;AAAA,MACb,YAAYA,EAAO;AAAA,MACnB,SAASH,EAAQ,GAAG,WAAWG,EAAO,EAAE,KAAK;AAAA,MAC7C,OAAOH,EAAQ,GAAG,YAAYG,EAAO,EAAE;AAAA,MACvC,cAAcA,EAAO;AAAA,MACrB,OAAOA,EAAO,SAAS,UAAU,MAAM;AAAA,MACvC,KAAKA,EAAO;AAAA,MACZ,MAAMA,EAAO;AAAA,MACb,OAAOA,EAAO;AAAA,MACd,SAASQ,EAAS,EAAG,UAAU;AAAA,IACrC,CAAK,GACDF,EAAI,KAAK,WAAW;AAAA,MAClB,YAAYJ,EAAO;AAAA,MACnB,WAAWF,EAAO;AAAA,MAClB,OAAOe;AAAA,MACP,WAAAC;AAAA,MACA,IAAIF;AAAA,MACJ,IAAIA;AAAA,MACJ,OAAOb;AAAA,MACP,OAAOC,EAAO;AAAA,MACd,IAAIF,EAAO;AAAA,MACX,OAAOH,EAAQ,GAAG,YAAYG,EAAO,EAAE;AAAA,MACvC,OAAOA,EAAO,SAAS,UAAU,MAAM;AAAA,MACvC,MAAMA,EAAO;AAAA,MACb,KAAKA,EAAO;AAAA,MACZ,OAAOA,EAAO;AAAA,MACd,SAASQ,EAAS,EAAG,UAAU;AAAA,IACrC,CAAK;AAAA,EACH;AACF,GACMU,IAAW,eAAeC,GAAOxD,GAAGkC,GAAS;AACjDS,EAAAA,EAAI,KAAK,kBAAkBa,CAAK;AAChC,MAAIC,IAAM,GACNC,IAAY,CAAA,GACZC,GACAC;AACJ,MAAIJ,EAAM,iBAAiB,QAAQ;AACjC,UAAMK,IAAgBrB,EAAmBgB,EAAM,YAAY;AAC3D,IAAAG,IAAeE,EAAc,OAC7BD,IAAoBC,EAAc;AAAA,EACpC;AACA,aAAWC,KAAQN,GAAO;AACxB,IAAAC;AACA,UAAMM,IAAa,OAAOD,EAAK,QAAQ,MAAMA,EAAK;AAClD,IAAIJ,EAAUK,CAAU,MAAM,UAC5BL,EAAUK,CAAU,IAAI,GACxBpB,EAAI,KAAK,mBAAmBoB,GAAYL,EAAUK,CAAU,CAAC,MAE7DL,EAAUK,CAAU,KACpBpB,EAAI,KAAK,mBAAmBoB,GAAYL,EAAUK,CAAU,CAAC;AAE/D,QAAIC,IAASD,IAAa,MAAML,EAAUK,CAAU;AACpDpB,IAAAA,EAAI,KAAK,mCAAmCoB,GAAYC,GAAQN,EAAUK,CAAU,CAAC;AACrF,UAAME,IAAgB,QAAQH,EAAK,OAC7BI,IAAc,QAAQJ,EAAK,KAC3BK,IAAW,EAAE,OAAO,IAAI,YAAY,GAAE;AAS5C,YARAA,EAAS,SAASL,EAAK,UAAU,GAC7BA,EAAK,SAAS,eAChBK,EAAS,YAAY,SAErBA,EAAS,YAAY,UAEvBA,EAAS,iBAAiB,cAC1BA,EAAS,eAAe,cAChBL,EAAK,MAAI;AAAA,MACf,KAAK;AACH,QAAAK,EAAS,iBAAiB;AAAA,MAC5B,KAAK;AACH,QAAAA,EAAS,eAAe;AACxB;AAAA,MACF,KAAK;AACH,QAAAA,EAAS,iBAAiB;AAAA,MAC5B,KAAK;AACH,QAAAA,EAAS,eAAe;AACxB;AAAA,MACF,KAAK;AACH,QAAAA,EAAS,iBAAiB;AAAA,MAC5B,KAAK;AACH,QAAAA,EAAS,eAAe;AACxB;AAAA,IACR;AACI,QAAIC,IAAQ,IACRC,IAAa;AACjB,YAAQP,EAAK,QAAM;AAAA,MACjB,KAAK;AACH,QAAAM,IAAQ,cACJT,MAAiB,WACnBS,IAAQT,IAENC,MAAsB,WACxBS,IAAaT,IAEfO,EAAS,YAAY,UACrBA,EAAS,UAAU;AACnB;AAAA,MACF,KAAK;AACH,QAAAA,EAAS,YAAY,UACrBA,EAAS,UAAU,UACnBA,EAAS,QAAQ;AACjB;AAAA,MACF,KAAK;AACH,QAAAA,EAAS,YAAY,SACrBA,EAAS,UAAU,SACnBA,EAAS,QAAQ;AACjB;AAAA,MACF,KAAK;AACH,QAAAA,EAAS,YAAY,aACrBA,EAAS,UAAU,SACnBA,EAAS,QAAQ;AACjB;AAAA,IACR;AACI,QAAIL,EAAK,UAAU,QAAQ;AACzB,YAAMvB,IAASC,EAAmBsB,EAAK,KAAK;AAC5C,MAAAM,IAAQ7B,EAAO,OACf8B,IAAa9B,EAAO;AAAA,IACtB;AACA,IAAA4B,EAAS,QAAQA,EAAS,SAASC,GACnCD,EAAS,aAAaA,EAAS,cAAcE,GACzCP,EAAK,gBAAgB,SACvBK,EAAS,QAAQG,EAAmBR,EAAK,aAAaS,CAAW,IACxDf,EAAM,uBAAuB,SACtCW,EAAS,QAAQG,EAAmBd,EAAM,oBAAoBe,CAAW,IAEzEJ,EAAS,QAAQG,EAAmB7C,EAAK,OAAO8C,CAAW,GAEzDT,EAAK,SAAS,SACZA,EAAK,UAAU,WACjBK,EAAS,iBAAiB,iBAG5BA,EAAS,iBAAiB,cAC1BA,EAAS,WAAW,MAEtBA,EAAS,YAAYL,EAAK,WAC1BK,EAAS,QAAQ,MAAMb;AAAA,MACrBQ,EAAK,KAAK,QAAQd,EAAO,gBAAgB;AAAA,CAAI;AAAA,MAC7CH,EAAS;AAAA,IACf,GACQiB,EAAK,UAAU,WACjBK,EAAS,QAAQA,EAAS,SAAS,iDAErCA,EAAS,aAAaA,EAAS,WAAW,QAAQ,UAAU,OAAO,GACnEA,EAAS,KAAKH,GACdG,EAAS,UAAU,oBAAoBF,IAAgB,MAAMC,GAC7DlE,EAAE,QAAQ8D,EAAK,OAAOA,EAAK,KAAKK,GAAUV,CAAG;AAAA,EAC/C;AACF,GACMe,KAAa,SAASC,GAAMvC,GAAS;AACzC,SAAOA,EAAQ,GAAG,WAAU;AAC9B,GACMwC,KAAO,eAAeD,GAAMrC,GAAIuC,GAAUzC,GAAS;AACvDS,EAAAA,EAAI,KAAK,mBAAmB;AAC5B,MAAIiC,IAAM1C,EAAQ,GAAG,aAAY;AACjC,EAAI0C,MAAQ,WACVA,IAAM;AAER,QAAM,EAAE,eAAAC,GAAe,WAAWC,EAAK,IAAKjC,EAAS,GAC/CkC,IAAcD,EAAM,eAAe,IACnCE,IAAcF,EAAM,eAAe;AACzC,MAAIG;AACJ,EAAIJ,MAAkB,cACpBI,IAAiBC,EAAO,OAAO9C,CAAE;AAEnC,QAAMtC,IAAO+E,MAAkB,YAAYK,EAAOD,EAAe,QAAQ,CAAC,EAAE,gBAAgB,IAAI,IAAIC,EAAO,MAAM,GAC3GjD,IAAM4C,MAAkB,YAAYI,EAAe,QAAQ,CAAC,EAAE,kBAAkB,UAChFjF,IAAI,IAAImF,EAAe;AAAA,IAC3B,YAAY;AAAA,IACZ,UAAU;AAAA,EACd,CAAG,EAAE,SAAS;AAAA,IACV,SAASP;AAAA,IACT,SAASG;AAAA,IACT,SAASC;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACb,CAAG,EAAE,oBAAoB,WAAW;AAChC,WAAO,CAAA;AAAA,EACT,CAAC;AACD,MAAII;AACJ,QAAMC,IAAYnD,EAAQ,GAAG,aAAY;AACzCS,EAAAA,EAAI,KAAK,gBAAgB0C,CAAS;AAClC,WAASC,IAAKD,EAAU,SAAS,GAAGC,KAAM,GAAGA;AAC3C,IAAAF,IAAOC,EAAUC,CAAE,GACnB3C,EAAI,KAAK,eAAeyC,CAAI,GAC5BlD,EAAQ,GAAG;AAAA,MACTkD,EAAK;AAAA,MACL,EAAE,MAAMA,EAAK,OAAO,MAAMA,EAAK,UAAS;AAAA,MACxC;AAAA,MACA;AAAA,MACAA,EAAK;AAAA,MACLA,EAAK;AAAA,IACX;AAEE,QAAMrD,IAAOG,EAAQ,GAAG,YAAW,GAC7BsB,IAAQtB,EAAQ,GAAG,SAAQ;AACjCS,EAAAA,EAAI,KAAK,SAASa,CAAK;AACvB,MAAI+B,IAAI;AACR,OAAKA,IAAIF,EAAU,SAAS,GAAGE,KAAK,GAAGA,KAAK;AAC1C,IAAAH,IAAOC,EAAUE,CAAC,GAClB7F,EAAU,SAAS,EAAE,OAAO,MAAM;AAClC,aAAS8F,IAAI,GAAGA,IAAIJ,EAAK,MAAM,QAAQI;AACrC7C,MAAAA,EAAI,KAAK,wBAAwByC,EAAK,MAAMI,CAAC,GAAGJ,EAAK,EAAE,GACvDpF,EAAE,UAAUoF,EAAK,MAAMI,CAAC,GAAGJ,EAAK,EAAE;AAAA,EAEtC;AACA,QAAMtD,EAAYC,GAAM/B,GAAGoC,GAAItC,GAAMmC,GAAKC,CAAO,GACjD,MAAMqB,EAASC,GAAOxD,CAAC;AACvB,QAAMmC,IAAMrC,EAAK,OAAO,QAAQsC,CAAE,IAAI,GAChCqD,IAAU3F,EAAK,OAAO,MAAMsC,IAAK,IAAI;AAK3C,MAJA,MAAMsD,EAAOD,GAASzF,GAAG,CAAC,SAAS,UAAU,OAAO,GAAG,aAAaoC,CAAE,GACtEuD,EAAM,YAAYxD,GAAK,sBAAsB2C,EAAM,gBAAgB5C,EAAQ,GAAG,iBAAiB,GAC/F0D,EAAkB5F,GAAGmC,GAAK2C,EAAM,gBAAgBA,EAAM,WAAW,GACjE5C,EAAQ,GAAG,WAAW,aAAaqD,CAAC,GAChC,CAACT,EAAM,YAAY;AACrB,UAAMe,IAAS5D,EAAI,iBAAiB,UAAUG,IAAK,sBAAsB;AACzE,eAAWd,KAASuE,GAAQ;AAC1B,YAAMC,IAAMxE,EAAM,QAAO,GACnByE,IAAO9D,EAAI,gBAAgB,8BAA8B,MAAM;AACrE,MAAA8D,EAAK,aAAa,MAAM,CAAC,GACzBA,EAAK,aAAa,MAAM,CAAC,GACzBA,EAAK,aAAa,SAASD,EAAI,KAAK,GACpCC,EAAK,aAAa,UAAUD,EAAI,MAAM,GACtCxE,EAAM,aAAayE,GAAMzE,EAAM,UAAU;AAAA,IAC3C;AAAA,EACF;AAEA,EADa,OAAO,KAAKS,CAAI,EACxB,QAAQ,SAASF,GAAK;AACzB,UAAMQ,IAASN,EAAKF,CAAG;AACvB,QAAIQ,EAAO,MAAM;AACf,YAAMlB,IAAO+D,EAAO,MAAM9C,IAAK,WAAWP,IAAM,IAAI;AACpD,UAAIV,GAAM;AACR,cAAM6E,IAAO/D,EAAI,gBAAgB,8BAA8B,GAAG;AAClE,QAAA+D,EAAK,eAAe,8BAA8B,SAAS3D,EAAO,QAAQ,KAAK,GAAG,CAAC,GACnF2D,EAAK,eAAe,8BAA8B,QAAQ3D,EAAO,IAAI,GACrE2D,EAAK,eAAe,8BAA8B,OAAO,UAAU,GAC/DnB,MAAkB,YACpBmB,EAAK,eAAe,8BAA8B,UAAU,MAAM,IACzD3D,EAAO,cAChB2D,EAAK,eAAe,8BAA8B,UAAU3D,EAAO,UAAU;AAE/E,cAAM4D,IAAW9E,EAAK,OAAO,WAAW;AACtC,iBAAO6E;AAAA,QACT,GAAG,cAAc,GACXE,IAAQ/E,EAAK,OAAO,kBAAkB;AAC5C,QAAI+E,KACFD,EAAS,OAAO,WAAW;AACzB,iBAAOC,EAAM,KAAI;AAAA,QACnB,CAAC;AAEH,cAAM5E,IAAQH,EAAK,OAAO,QAAQ;AAClC,QAAIG,KACF2E,EAAS,OAAO,WAAW;AACzB,iBAAO3E,EAAM,KAAI;AAAA,QACnB,CAAC;AAAA,MAEL;AAAA,IACF;AAAA,EACF,CAAC;AACH,GACM6E,KAAiB;AAAA,EACrB,SAAAzE;AAAA,EACA,aAAAI;AAAA,EACA,UAAAyB;AAAA,EACA,YAAAiB;AAAA,EACA,MAAAE;AACF,GACM0B,KAAO,CAACC,GAAOC,MAAY;AAC/B,QAAMC,IAAUC,GACVC,IAAIF,EAAQF,GAAO,GAAG,GACtBrG,IAAIuG,EAAQF,GAAO,GAAG,GACtBK,IAAIH,EAAQF,GAAO,GAAG;AAC5B,SAAOM,EAAYF,GAAGzG,GAAG0G,GAAGJ,CAAO;AACrC,GACMM,KAAY,CAACC,MAAY;AAAA,mBACZA,EAAQ,UAAU;AAAA,aACxBA,EAAQ,iBAAiBA,EAAQ,SAAS;AAAA;AAAA;AAAA,YAG3CA,EAAQ,UAAU;AAAA;AAAA;AAAA,aAGjBA,EAAQ,UAAU;AAAA;AAAA;AAAA;AAAA,YAInBA,EAAQ,iBAAiBA,EAAQ,SAAS;AAAA,aACzCA,EAAQ,iBAAiBA,EAAQ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQ3CA,EAAQ,OAAO;AAAA,cACbA,EAAQ,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA2BpBA,EAAQ,cAAc;AAAA;AAAA;AAAA;AAAA,cAIpBA,EAAQ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,cAKjBA,EAAQ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKPA,EAAQ,mBAAmB;AAAA;AAAA;AAAA,0BAGzBA,EAAQ,mBAAmB;AAAA,cACvCA,EAAQ,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAOjBT,GAAKS,EAAQ,qBAAqB,GAAG,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,YAKlDA,EAAQ,UAAU;AAAA,cAChBA,EAAQ,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,YAKvBA,EAAQ,UAAU;AAAA;AAAA;AAAA;AAAA,aAIjBA,EAAQ,UAAU;AAAA;AAAA;AAAA,aAGlBA,EAAQ,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQZA,EAAQ,UAAU;AAAA;AAAA,kBAEnBA,EAAQ,aAAa;AAAA,wBACfA,EAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAS3BA,EAAQ,SAAS;AAAA;AAAA,GAGvBC,KAAaF;","x_google_ignoreList":[0,1,2,3]}