{"version":3,"file":"stateDiagram-v2-51a3dcff-BWLG3S69.js","sources":["../node_modules/mermaid/dist/stateDiagram-v2-51a3dcff.js"],"sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-edf9a4b0.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-ad1dc92f.js\";\nimport { r as render } from \"./index-6079d271.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-332bd1c7.js\";\nimport \"./createText-d213de94.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","SHAPE_START","SHAPE_END","SHAPE_DIVIDER","SHAPE_GROUP","SHAPE_NOTE","SHAPE_NOTEGROUP","CSS_DIAGRAM","CSS_STATE","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_NOTE","CSS_NOTE_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_CLUSTER","CSS_DIAGRAM_CLUSTER","CSS_CLUSTER_ALT","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_STATE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELPOS","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","setConf","cnf","keys","key","getClasses","text","diagramObj","getClassesFromDbInfo","dbInfoItem","stateDomId","itemId","counter","type","typeSpacer","typeStr","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","classStr","shape","DEFAULT_STATE_TYPE","common","getConfig","newNode","log","getDir","DIVIDER_TYPE","nodeData","noteData","groupData","parentNodeId","from","to","setupDoc","parentParsedItem","doc","item","STMT_STATE","STMT_RELATION","edgeData","defaultDir","DEFAULT_NESTED_DOC_DIR","dir","i","parsedItemDoc","draw","id","_version","diag","securityLevel","conf","nodeSpacing","rankSpacing","graphlib.Graph","sandboxElement","select","root","svg","element","render","padding","utils","bounds","width","height","svgBounds","configureSvgSize","vBox","labels","label","dim","rect","renderer","diagram","parser","db","styles"],"mappings":"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","x_google_ignoreList":[0]}