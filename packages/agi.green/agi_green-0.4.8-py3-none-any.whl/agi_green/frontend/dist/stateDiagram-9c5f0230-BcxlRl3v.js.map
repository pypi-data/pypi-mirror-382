{"version":3,"file":"stateDiagram-9c5f0230-BcxlRl3v.js","sources":["../node_modules/mermaid/dist/stateDiagram-9c5f0230.js"],"sourcesContent":["import { d as db, p as parser, s as styles } from \"./styles-edf9a4b0.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as getConfig, u as utils, e as common, l as log, i as configureSvgSize } from \"./mermaid-ad1dc92f.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst idCache = {};\nconst set = (key, val) => {\n  idCache[key] = val;\n};\nconst get = (k) => idCache[k];\nconst keys = () => Object.keys(idCache);\nconst size = () => keys().length;\nconst idCache$1 = {\n  get,\n  set,\n  keys,\n  size\n};\nconst drawStartState = (g) => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit);\nconst drawDivider = (g) => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0);\nconst drawSimpleState = (g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n};\nconst drawDescrState = (g, stateDef) => {\n  const addTspan = function(textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  };\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\n    \"y\",\n    titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight\n  ).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function(descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc)\n    ;\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\n    \"height\",\n    graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n  ).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst drawEndState = (g) => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\n    \"cx\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  ).attr(\n    \"cy\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  );\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n};\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\nconst drawNote = (text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n};\nconst drawState = function(elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  idCache$1.set(id, stateInfo);\n  return stateInfo;\n};\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case db.relationType.EXTENSION:\n        return \"extension\";\n      case db.relationType.COMPOSITION:\n        return \"composition\";\n      case db.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  svgPath.attr(\n    \"marker-end\",\n    \"url(\" + url + \"#\" + getRelationType(db.relationType.DEPENDENCY) + \"End)\"\n  );\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const { x, y } = utils.calcLabelPosition(path.points);\n    const rows = common.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundsTmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundsTmp.width);\n      minX = Math.min(minX, boundsTmp.x);\n      log.info(boundsTmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n};\nlet conf;\nconst transformationLog = {};\nconst setConf = function() {\n};\nconst insertMarkers = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function(text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\n    \"viewBox\",\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\nconst renderDoc = (doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys2 = Object.keys(states);\n  for (const key of keys2) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram2, stateDef);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function(relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: \"c\"\n      },\n      \"id\" + cnt\n    );\n  });\n  layout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\"\n      );\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function(e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["drawStartState","g","getConfig","drawDivider","drawSimpleState","stateDef","state","classBox","drawDescrState","addTspan","textEl","txt","isFirst2","tSpan","titleBox","titleHeight","description","isFirst","isSecond","descr","descrLine","descrBox","width","addTitleAndBox","altBkg","pad","dblPad","orgBox","orgWidth","orgX","title","titleWidth","startX","graphBox","lineY","drawEndState","drawForkJoinState","height","tmp","_drawLongText","_text","x","y","textHeight","textElem","text","lines","common","tHeight","line2","span","textBounds","drawNote","note","rectElem","textWidth","drawState","elem","id","stateInfo","stateBox","edgeCount","drawEdge","path","relation","getRelationType","type","db","p","lineData","lineFunction","line","d","curveBasis","svgPath","url","label","utils","rows","titleRows","maxWidth","minX","i","boundsTmp","log","boxHeight","heightAdj","bounds","conf","transformationLog","setConf","insertMarkers","draw","_version","diagObj","securityLevel","sandboxElement","select","root","doc","diagram2","rootDoc","renderDoc","padding","svgWidth","configureSvgSize","getLabelWidth","parentId","domDocument","graph","graphlib.Graph","edgeFreeDoc","states","relations","keys2","key","node","sub","boxBounds","noteDef","cnt","layout","svgElem","v","divider","parent","pWidth","pShift","e","renderer","diagram","parser","styles","cnf"],"mappings":"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","x_google_ignoreList":[0]}