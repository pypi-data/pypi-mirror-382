[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hatch-gradle-version"
version = "0.9.12"
authors = [
    { name="object-Object", email="object@objectobject.ca" },
]
readme = "README.md"
classifiers = [
    "Framework :: Hatch",
]
requires-python = ">=3.11"
dependencies = [
    "hatchling~=1.18",
    "jproperties~=2.1",
    # 2.12.0: https://github.com/pydantic/pydantic/issues/12347
    "pydantic~=2.3,!=2.12.0",
    "casefy~=0.1.7",
    "black==23.7.0",
]

[project.optional-dependencies]
dev = [
    "hatch-gradle-version[test]",
    "isort==5.12.0",
    "build",
    "twine",
]
test = [
    "pytest~=7.3",
]

[project.urls]
"Homepage" = "https://github.com/hexdoc-dev/hatch-gradle-version"
"Bug Tracker" = "https://github.com/hexdoc-dev/hatch-gradle-version/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/hatch_gradle_version"]

[project.entry-points.hatch]
gradle_version = "hatch_gradle_version._hooks"

# pytest

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
filterwarnings = [
    'ignore:Dependency on package .+? will ONLY accept:UserWarning:hatch_gradle_version.common.gradle',
]

# formatting/linting

[tool.isort]
profile = "black"
combine_as_imports = true

[tool.pyright]
pythonVersion = "3.11"
pythonPlatform = "All"

exclude = ["venv"]

# mostly we use strict mode
# but pyright doesn't allow decreasing error severity in strict mode
# so we need to manually specify all of the strict mode overrides so we can do that :/
typeCheckingMode = "basic"

strictDictionaryInference = true
strictListInference = true
strictSetInference = true

reportAssertAlwaysTrue = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeStubs = "error"
reportOverlappingOverload = "error"
reportSelfClsParameterName = "error"
reportTypeCommentUsage = "error"
reportUnknownParameterType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryContains = "error"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportWildcardImportFromLibrary = "error"

reportMissingTypeArgument = "warning"
reportPrivateUsage = "warning"
reportUnknownLambdaType = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "warning"
reportUnusedExpression = "warning"
reportUnusedFunction = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"

reportUnknownVariableType = "none"
