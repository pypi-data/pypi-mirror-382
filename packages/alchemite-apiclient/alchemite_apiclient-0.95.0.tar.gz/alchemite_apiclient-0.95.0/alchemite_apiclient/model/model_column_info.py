"""
    Alchemite

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501
    Contact: support@intellegens.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from alchemite_apiclient.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from alchemite_apiclient.exceptions import ApiAttributeError


def lazy_import():
    pass


class ModelColumnInfo(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {}

    @cached_property
    def additional_properties_type():  # noqa
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():  # noqa
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'is_descriptor': (bool,),  # noqa: E501
            'is_complete': (bool,),  # noqa: E501
            'read_only': (bool,),  # noqa: E501
            'write_only': (bool,),  # noqa: E501
            'extension_source': (str,),  # noqa: E501
            'mcc': (float, none_type,),  # noqa: E501
            'coefficient_of_determination': (float, none_type,),  # noqa: E501
            'f1': (float, none_type,),  # noqa: E501
            'ppv': (float, none_type,),  # noqa: E501
            'tpr': (float, none_type,),  # noqa: E501
            'acc': (float, none_type,),  # noqa: E501
            'ckc': (float, none_type,),  # noqa: E501
            'targeted_metric': (float, none_type,),  # noqa: E501
            'calculated_column': (bool,),  # noqa: E501
            'std_dev': (float, none_type,),  # noqa: E501
            'min_non_zero': (float, none_type,),  # noqa: E501
            'rmse': (float, none_type,),  # noqa: E501
            'mape': (float, none_type,),  # noqa: E501
            'data_subtype': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'data_type': (str,),  # noqa: E501
            'num_samples': (int,),  # noqa: E501
            'categories_present': ([int], [str],),  # noqa: E501
            'mode': (int, str, float, none_type,),  # noqa: E501
            'max': (float, none_type,),  # noqa: E501
            'min': (float, none_type,),  # noqa: E501
            'mean': (float, none_type,),  # noqa: E501
            'ordinals_present': ([float],),  # noqa: E501
        }

    @cached_property
    def discriminator():  # noqa
        return None


    attribute_map = {
        'is_descriptor': 'isDescriptor',  # noqa: E501
        'is_complete': 'isComplete',  # noqa: E501
        'read_only': 'readOnly',  # noqa: E501
        'write_only': 'writeOnly',  # noqa: E501
        'extension_source': 'extensionSource',  # noqa: E501
        'mcc': 'MCC',  # noqa: E501
        'coefficient_of_determination': 'coefficientOfDetermination',  # noqa: E501
        'f1': 'F1',  # noqa: E501
        'ppv': 'PPV',  # noqa: E501
        'tpr': 'TPR',  # noqa: E501
        'acc': 'ACC',  # noqa: E501
        'ckc': 'CKC',  # noqa: E501
        'targeted_metric': 'targetedMetric',  # noqa: E501
        'calculated_column': 'calculatedColumn',  # noqa: E501
        'std_dev': 'stdDev',  # noqa: E501
        'min_non_zero': 'minNonZero',  # noqa: E501
        'rmse': 'RMSE',  # noqa: E501
        'mape': 'MAPE',  # noqa: E501
        'data_subtype': 'dataSubtype',  # noqa: E501
        'name': 'name',  # noqa: E501
        'data_type': 'dataType',  # noqa: E501
        'num_samples': 'numSamples',  # noqa: E501
        'categories_present': 'categoriesPresent',  # noqa: E501
        'mode': 'mode',  # noqa: E501
        'max': 'max',  # noqa: E501
        'min': 'min',  # noqa: E501
        'mean': 'mean',  # noqa: E501
        'ordinals_present': 'ordinalsPresent',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ModelColumnInfo - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            is_descriptor (bool): Whether the column is a descriptor or not. [optional]  # noqa: E501
            is_complete (bool): Whether the column is complete or not. [optional]  # noqa: E501
            read_only (bool): Whether values can be set for this column in Alchemite operations. [optional] if omitted the server will use the default value of False  # noqa: E501
            write_only (bool): If true then this column must be provided for all Alchemite operations but will typically not be returned.. [optional] if omitted the server will use the default value of False  # noqa: E501
            extension_source (str): The name of the extension method that created this column. [optional]  # noqa: E501
            mcc (float, none_type): The mean square contingency coefficient for this categorical column in the dataset.  In the case of 5-fold validation this is the mean average for the column across the 5 validation datasets.  Null if the model was trained with `validation` set to `none` or if the column is a descriptor or there is no variation in the column's values.. [optional]  # noqa: E501
            coefficient_of_determination (float, none_type): The coefficient of determination for this column in the dataset.  In the case of 5-fold validation this is the mean average for the column across the 5 validation datasets.  Null if the model was trained with `validation` set to `none` or if the column is a descriptor or there is no variation in the column's values.. [optional]  # noqa: E501
            f1 (float, none_type): The F1 Score for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            ppv (float, none_type): The Positive Predictive Value (PPV/precision) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            tpr (float, none_type): The True Positive Rate (TPR/recall) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            acc (float, none_type): The Accuracy (ACC) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            ckc (float, none_type): The Cohen's Kappa Coefficient (CKC) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            targeted_metric (float, none_type): The value of the targeted metric for this column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor, and not present if targets were not set for this column during training.. [optional]  # noqa: E501
            calculated_column (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            std_dev (float, none_type): The population standard deviation of the values appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            min_non_zero (float, none_type): The minimum non-zero value appearing in this column in the dataset.. [optional]  # noqa: E501
            rmse (float, none_type): The Root Mean Squared Error (RMSE) for this column in the dataset.  Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            mape (float, none_type): The Mean Absolute Percentage Error (MAPE) for this column in the dataset.  Null if the model was trained with `validation` set to `none`, if the calculated value was non-finite, or if the column is a descriptor.. [optional]  # noqa: E501
            data_subtype (str): An optional subtype describing the type of data held in the opaque column. [optional]  # noqa: E501
            name (str): The unique name of the column.. [optional]  # noqa: E501
            data_type (str): [optional] if omitted the server will use the default value of "ordinal"  # noqa: E501
            num_samples (int): The number of non-missing values appearing in this column in the dataset.. [optional] if omitted the server will use the default value of 0  # noqa: E501
            categories_present ([str]): The categories that are present for this column in the dataset. If the column is empty, will be empty array.. [optional]  # noqa: E501
            mode (float, none_type): The mode of the values appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            max (float, none_type): The maximum value appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            min (float, none_type): The minimum value appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            mean (float, none_type): The mean average of the values appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            ordinals_present ([float]): The ordinals that are present for this column in the dataset. If the column is empty, will be empty array.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ModelColumnInfo - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            is_descriptor (bool): Whether the column is a descriptor or not. [optional]  # noqa: E501
            is_complete (bool): Whether the column is complete or not. [optional]  # noqa: E501
            read_only (bool): Whether values can be set for this column in Alchemite operations. [optional] if omitted the server will use the default value of False  # noqa: E501
            write_only (bool): If true then this column must be provided for all Alchemite operations but will typically not be returned.. [optional] if omitted the server will use the default value of False  # noqa: E501
            extension_source (str): The name of the extension method that created this column. [optional]  # noqa: E501
            mcc (float, none_type): The mean square contingency coefficient for this categorical column in the dataset.  In the case of 5-fold validation this is the mean average for the column across the 5 validation datasets.  Null if the model was trained with `validation` set to `none` or if the column is a descriptor or there is no variation in the column's values.. [optional]  # noqa: E501
            coefficient_of_determination (float, none_type): The coefficient of determination for this column in the dataset.  In the case of 5-fold validation this is the mean average for the column across the 5 validation datasets.  Null if the model was trained with `validation` set to `none` or if the column is a descriptor or there is no variation in the column's values.. [optional]  # noqa: E501
            f1 (float, none_type): The F1 Score for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            ppv (float, none_type): The Positive Predictive Value (PPV/precision) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            tpr (float, none_type): The True Positive Rate (TPR/recall) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            acc (float, none_type): The Accuracy (ACC) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            ckc (float, none_type): The Cohen's Kappa Coefficient (CKC) for this categorical column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            targeted_metric (float, none_type): The value of the targeted metric for this column in the dataset. Null if the model was trained with `validation` set to `none` or if the column is a descriptor, and not present if targets were not set for this column during training.. [optional]  # noqa: E501
            calculated_column (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            std_dev (float, none_type): The population standard deviation of the values appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            min_non_zero (float, none_type): The minimum non-zero value appearing in this column in the dataset.. [optional]  # noqa: E501
            rmse (float, none_type): The Root Mean Squared Error (RMSE) for this column in the dataset.  Null if the model was trained with `validation` set to `none` or if the column is a descriptor.. [optional]  # noqa: E501
            mape (float, none_type): The Mean Absolute Percentage Error (MAPE) for this column in the dataset.  Null if the model was trained with `validation` set to `none`, if the calculated value was non-finite, or if the column is a descriptor.. [optional]  # noqa: E501
            data_subtype (str): An optional subtype describing the type of data held in the opaque column. [optional]  # noqa: E501
            name (str): The unique name of the column.. [optional]  # noqa: E501
            data_type (str): [optional] if omitted the server will use the default value of "ordinal"  # noqa: E501
            num_samples (int): The number of non-missing values appearing in this column in the dataset.. [optional] if omitted the server will use the default value of 0  # noqa: E501
            categories_present ([str]): The categories that are present for this column in the dataset. If the column is empty, will be empty array.. [optional]  # noqa: E501
            mode (float, none_type): The mode of the values appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            max (float, none_type): The maximum value appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            min (float, none_type): The minimum value appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            mean (float, none_type): The mean average of the values appearing in this column in the dataset. If the column is empty, will be set to null.. [optional]  # noqa: E501
            ordinals_present ([float]): The ordinals that are present for this column in the dataset. If the column is empty, will be empty array.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
          ],
          'oneOf': [
          ],
        }
