from __future__ import annotations

from typing import List, Optional
from copy import deepcopy

from pypH.species import Species


class Acid:
    """
    The Acid class encodes the behavior of a generic mono or polyprotic acid. The number of acidic protons
    is defined automatically by setting the `pKa` values. The class can be used to compute the concentration
    of each deprotonated species at a given pH by directly calling its `concentration` method. Furthermore
    the class provides a simple interface to the construction of auxiliary curves by providing direct access
    to the deprotonated `Species` generated by the acid. These can be easily obtained using the `()` round
    bracket operator and specifying the deprotonation `index`

    Parameters
    ----------
    pka: List[float]
        The list of pka values associated to the various acid dissociations.
    concentration: float
        The molar concentration of the acid.
    names: Optional[List[str]]
        An optional field in which the user can specify names to be assigned to each deprotonation product.
        If no name is given the system will automatically call the species with the scheme `H_iX^{{n-i}-}" where
        `X` is a progressive letter assigned starting form `A`.
    """

    __acid_class_id = 0

    def __init__(
        self, pka: List[float], concentration: float, names: Optional[List[str]] = None
    ) -> None:

        self.__Ca: float = concentration
        self.__pka: List[float] = sorted(pka)
        self.__ka = [10 ** (-pka) for pka in self.__pka]
        self.__id = deepcopy(Acid.__acid_class_id)

        self.__betas = [1]
        for ka in self.__ka:
            self.__betas.append(self.__betas[-1] * ka)

        if names is None:

            letter = chr(ord("A") + self.__id)

            self.__names = []

            for i in range(self.nprotons + 1):

                name = "$"
                name += "H" if self.nprotons - i > 0 else ""
                name += (
                    ("_{" + f"{self.nprotons-i}" + "}") if self.nprotons - i > 1 else ""
                )
                name += f"{letter}"

                if i != 0:
                    name += "^-" if i == 1 else "^{" + f"{i}" + "-}"

                name += "$"
                self.__names.append(name)

        else:

            if len(names) != self.nprotons + 1:
                raise ValueError(
                    "The number of provided names does not match the number of deprotonation products"
                )

            self.__names = names

        Acid.__acid_class_id += 1

    def __call__(self, index: int) -> AcidSpecies:
        """
        Returns the species obtained from the acid by `index` subsequent deprotonations.

        Retruns
        -------
        Species
            The `Species` object identifying the deprotonated species

        Raises
        ------
        ValueError
            Exceprion raised when the user specified index is smaller than zero or greate than the number of protons
        """

        if index < 0 or index > self.nprotons:
            raise ValueError("Invalid index")

        return AcidSpecies(self.__id, self.__names[index], index)

    @property
    def id(self) -> int:
        """
        The univocal ID that can be used to identiy the `Acid`.

        Reutrns
        -------
        int
            The ID of the acid.
        """
        return self.__id

    @property
    def nprotons(self) -> int:
        """
        The number of acidic protons in the molecule

        Returns
        -------
        int
            The number of acidic protons
        """
        return len(self.__pka)

    @property
    def names(self) -> List[str]:
        """
        The names associated to each deprotonation product.

        Returns
        -------
        str
            The list of names.
        """
        return self.__names

    def dilute(self, dilution_ratio: float, keep_id: bool = False) -> Acid:
        """
        Generates a new `Acid` object with a concentration lower than the starting
        one by a factor equal to `dilution_ratio`.

        Arguments
        ---------
        dilution_ratio: float
            The dilution ratio to be applied.
        keep_id: bool
            If set to `True` will set the ID of the diluted acid to the same
            value of the undiluted one.

        Returns
        -------
        Acid
            The acid object with the new reduced concentration.
        """
        obj = Acid(self.__pka, dilution_ratio * self.__Ca, names=self.__names)
        
        if keep_id is True:
            obj.__id = self.__id

        return obj

    def concentration(self, index: int, pH: float) -> float:
        """
        Compute the concentration of the user defined deprotonation state of the acid at the specified pH.

        Parameters
        ----------
        index: int
            The index of the deprotonation state as the number of lost protons
        pH: float
            The pH value at which the concentration must be computed

        Raises
        ------
        ValueError
            Exceprion raised when the user specified index is smaller than zero or greate than the number of protons

        Returns
        -------
        float
            The concentration of the selected deprotonation state at the given pH.
        """
        hydronium = 10 ** (-pH)

        if index < 0 or index > self.nprotons:
            raise ValueError("Invalid index")

        factor = 0
        for m in range(0, self.nprotons + 1):
            factor += hydronium ** (index - m) * self.__betas[m] / self.__betas[index]

        return self.__Ca / factor


class AcidSpecies(Species):
    """
    Simple class used in the definition of an auxiliary curve to indentify a generic deprotonated species.
    The class can be directly used to construct `Auxiliary` class object by summation and subtraction with
    other `Species` or `Auxiliary` objects and multiplication by a `float` numerical coefficient.

    Attribues
    ---------
    acid_id: int
        The ID of the acid from which the speces is derived
    name: str
        The name of the selected species
    index: int
        The deprotonation index of the desired form.
    """

    def __init__(self, acid_id: int, name: str, index: int):
        super().__init__(name)
        self.__index = index
        self.__acid_id = acid_id

    @property
    def acid_id(self) -> int:
        return self.__acid_id

    @property
    def index(self) -> int:
        return self.__index

    def __repr__(self):
        return f"AcidSpecies[id: {self.__acid_id}, deprot. idx: {self.__index}, name: {self.name}]"


global Hydronium
Hydronium = AcidSpecies(None, "H_3O^+", None)

global Hydroxide
Hydroxide = AcidSpecies(None, "OH^-", None)
