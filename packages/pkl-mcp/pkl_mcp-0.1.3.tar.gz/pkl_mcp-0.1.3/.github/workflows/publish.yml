name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: read   # Required to access repository content
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run quality checks
      run: |
        # Run the same quality checks as CI to ensure release quality
        uv run ruff check .
        uv run ruff format --check .
        uv run mypy .
    
    - name: Run tests
      run: |
        uv run pytest --cov=src --cov-report=term-missing
    
    - name: Verify version matches tag
      run: |
        # Extract version from pyproject.toml and compare with git tag
        PACKAGE_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        GIT_TAG=${GITHUB_REF#refs/tags/}
        # Strip 'v' prefix from git tag if present
        GIT_TAG_VERSION=${GIT_TAG#v}
        echo "Package version: $PACKAGE_VERSION"
        echo "Git tag: $GIT_TAG"
        echo "Git tag version (stripped): $GIT_TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$GIT_TAG_VERSION" ]; then
          echo "Version mismatch: package version ($PACKAGE_VERSION) != git tag version ($GIT_TAG_VERSION)"
          exit 1
        fi
    
    - name: Build package
      run: |
        uv run python -m build
    
    - name: Verify package contents
      run: |
        # Check that the built package contains expected files
        uv run python -m twine check dist/*
        ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Configure PyPI authentication:
        # Option 1 (Recommended): Trusted Publishing
        #   - Go to https://pypi.org/manage/account/publishing/
        #   - Add this repository as a trusted publisher
        #   - Remove the password line below
        # Option 2: API Token
        #   - Create API token at https://pypi.org/manage/account/token/
        #   - Add PYPI_API_TOKEN secret in repository settings
        password: ${{ secrets.PYPI_API_TOKEN }}