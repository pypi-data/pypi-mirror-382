"""
    ai/h2o/featurestore/api/v1/FeatureSetSearch.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_featurestore.gen.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from h2o_featurestore.gen.exceptions import ApiAttributeError


def lazy_import():
    from h2o_featurestore.gen.model.v1_big_query_table_spec import V1BigQueryTableSpec
    from h2o_featurestore.gen.model.v1_csv_file_spec import V1CSVFileSpec
    from h2o_featurestore.gen.model.v1_csv_folder_spec import V1CSVFolderSpec
    from h2o_featurestore.gen.model.v1_delta_table_spec import V1DeltaTableSpec
    from h2o_featurestore.gen.model.v1_jdbc_table_spec import V1JDBCTableSpec
    from h2o_featurestore.gen.model.v1_json_file_spec import V1JSONFileSpec
    from h2o_featurestore.gen.model.v1_json_folder_spec import V1JSONFolderSpec
    from h2o_featurestore.gen.model.v1_mongo_db_collection_spec import V1MongoDbCollectionSpec
    from h2o_featurestore.gen.model.v1_online_source_spec import V1OnlineSourceSpec
    from h2o_featurestore.gen.model.v1_parquet_file_spec import V1ParquetFileSpec
    from h2o_featurestore.gen.model.v1_parquet_folder_spec import V1ParquetFolderSpec
    from h2o_featurestore.gen.model.v1_snowflake_table_spec import V1SnowflakeTableSpec
    globals()['V1BigQueryTableSpec'] = V1BigQueryTableSpec
    globals()['V1CSVFileSpec'] = V1CSVFileSpec
    globals()['V1CSVFolderSpec'] = V1CSVFolderSpec
    globals()['V1DeltaTableSpec'] = V1DeltaTableSpec
    globals()['V1JDBCTableSpec'] = V1JDBCTableSpec
    globals()['V1JSONFileSpec'] = V1JSONFileSpec
    globals()['V1JSONFolderSpec'] = V1JSONFolderSpec
    globals()['V1MongoDbCollectionSpec'] = V1MongoDbCollectionSpec
    globals()['V1OnlineSourceSpec'] = V1OnlineSourceSpec
    globals()['V1ParquetFileSpec'] = V1ParquetFileSpec
    globals()['V1ParquetFolderSpec'] = V1ParquetFolderSpec
    globals()['V1SnowflakeTableSpec'] = V1SnowflakeTableSpec


class V1RawDataLocation(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'csv': (V1CSVFileSpec,),  # noqa: E501
            'parquet': (V1ParquetFileSpec,),  # noqa: E501
            'snowflake': (V1SnowflakeTableSpec,),  # noqa: E501
            'jdbc': (V1JDBCTableSpec,),  # noqa: E501
            'json': (V1JSONFileSpec,),  # noqa: E501
            'delta_table': (V1DeltaTableSpec,),  # noqa: E501
            'csv_folder': (V1CSVFolderSpec,),  # noqa: E501
            'parquet_folder': (V1ParquetFolderSpec,),  # noqa: E501
            'json_folder': (V1JSONFolderSpec,),  # noqa: E501
            'online_source': (V1OnlineSourceSpec,),  # noqa: E501
            'mongo_db': (V1MongoDbCollectionSpec,),  # noqa: E501
            'google_big_query': (V1BigQueryTableSpec,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'csv': 'csv',  # noqa: E501
        'parquet': 'parquet',  # noqa: E501
        'snowflake': 'snowflake',  # noqa: E501
        'jdbc': 'jdbc',  # noqa: E501
        'json': 'json',  # noqa: E501
        'delta_table': 'deltaTable',  # noqa: E501
        'csv_folder': 'csvFolder',  # noqa: E501
        'parquet_folder': 'parquetFolder',  # noqa: E501
        'json_folder': 'jsonFolder',  # noqa: E501
        'online_source': 'onlineSource',  # noqa: E501
        'mongo_db': 'mongoDb',  # noqa: E501
        'google_big_query': 'googleBigQuery',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """V1RawDataLocation - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            csv (V1CSVFileSpec): [optional]  # noqa: E501
            parquet (V1ParquetFileSpec): [optional]  # noqa: E501
            snowflake (V1SnowflakeTableSpec): [optional]  # noqa: E501
            jdbc (V1JDBCTableSpec): [optional]  # noqa: E501
            json (V1JSONFileSpec): [optional]  # noqa: E501
            delta_table (V1DeltaTableSpec): [optional]  # noqa: E501
            csv_folder (V1CSVFolderSpec): [optional]  # noqa: E501
            parquet_folder (V1ParquetFolderSpec): [optional]  # noqa: E501
            json_folder (V1JSONFolderSpec): [optional]  # noqa: E501
            online_source (V1OnlineSourceSpec): [optional]  # noqa: E501
            mongo_db (V1MongoDbCollectionSpec): [optional]  # noqa: E501
            google_big_query (V1BigQueryTableSpec): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """V1RawDataLocation - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            csv (V1CSVFileSpec): [optional]  # noqa: E501
            parquet (V1ParquetFileSpec): [optional]  # noqa: E501
            snowflake (V1SnowflakeTableSpec): [optional]  # noqa: E501
            jdbc (V1JDBCTableSpec): [optional]  # noqa: E501
            json (V1JSONFileSpec): [optional]  # noqa: E501
            delta_table (V1DeltaTableSpec): [optional]  # noqa: E501
            csv_folder (V1CSVFolderSpec): [optional]  # noqa: E501
            parquet_folder (V1ParquetFolderSpec): [optional]  # noqa: E501
            json_folder (V1JSONFolderSpec): [optional]  # noqa: E501
            online_source (V1OnlineSourceSpec): [optional]  # noqa: E501
            mongo_db (V1MongoDbCollectionSpec): [optional]  # noqa: E501
            google_big_query (V1BigQueryTableSpec): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
