# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from rxfoundry.clients.swifty_api.models.code import Code
from rxfoundry.clients.swifty_api.models.medication import Medication
from rxfoundry.clients.swifty_api.models.patient import Patient
from rxfoundry.clients.swifty_api.models.pharmacy import Pharmacy
from rxfoundry.clients.swifty_api.models.prescriber import Prescriber
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionData(BaseModel):
    """
    PrescriptionData
    """ # noqa: E501
    external_rx_number: Optional[StrictStr] = Field(default=None, description="The prescription number as it appears in the system sending this prescription")
    patient: Optional[Patient] = None
    pharmacy: Optional[Pharmacy] = None
    prescriber: Optional[Prescriber] = None
    medication: Optional[Medication] = None
    number_of_refills: Optional[StrictInt] = None
    quantity_value: Optional[Union[StrictFloat, StrictInt]] = None
    quantity_type: Optional[Code] = None
    quantity_uom: Optional[Code] = None
    days_supply: Optional[StrictInt] = None
    written_date: Optional[date] = None
    substitutions: Optional[Code] = None
    sig_text: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["external_rx_number", "patient", "pharmacy", "prescriber", "medication", "number_of_refills", "quantity_value", "quantity_type", "quantity_uom", "days_supply", "written_date", "substitutions", "sig_text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of patient
        if self.patient:
            _dict['patient'] = self.patient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pharmacy
        if self.pharmacy:
            _dict['pharmacy'] = self.pharmacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prescriber
        if self.prescriber:
            _dict['prescriber'] = self.prescriber.to_dict()
        # override the default output from pydantic by calling `to_dict()` of medication
        if self.medication:
            _dict['medication'] = self.medication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantity_type
        if self.quantity_type:
            _dict['quantity_type'] = self.quantity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantity_uom
        if self.quantity_uom:
            _dict['quantity_uom'] = self.quantity_uom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of substitutions
        if self.substitutions:
            _dict['substitutions'] = self.substitutions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_rx_number": obj.get("external_rx_number"),
            "patient": Patient.from_dict(obj["patient"]) if obj.get("patient") is not None else None,
            "pharmacy": Pharmacy.from_dict(obj["pharmacy"]) if obj.get("pharmacy") is not None else None,
            "prescriber": Prescriber.from_dict(obj["prescriber"]) if obj.get("prescriber") is not None else None,
            "medication": Medication.from_dict(obj["medication"]) if obj.get("medication") is not None else None,
            "number_of_refills": obj.get("number_of_refills"),
            "quantity_value": obj.get("quantity_value"),
            "quantity_type": Code.from_dict(obj["quantity_type"]) if obj.get("quantity_type") is not None else None,
            "quantity_uom": Code.from_dict(obj["quantity_uom"]) if obj.get("quantity_uom") is not None else None,
            "days_supply": obj.get("days_supply"),
            "written_date": obj.get("written_date"),
            "substitutions": Code.from_dict(obj["substitutions"]) if obj.get("substitutions") is not None else None,
            "sig_text": obj.get("sig_text")
        })
        return _obj


