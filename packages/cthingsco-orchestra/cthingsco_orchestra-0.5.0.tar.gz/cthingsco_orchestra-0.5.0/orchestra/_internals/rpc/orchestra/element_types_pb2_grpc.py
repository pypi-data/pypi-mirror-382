# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import element_types_pb2 as element__types__pb2


class ElementTypesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAll = channel.unary_unary(
            "/orchestra.elements.types.ElementTypesService/ListAll",
            request_serializer=element__types__pb2.ListAllElementTypesRequest.SerializeToString,
            response_deserializer=element__types__pb2.ListAllElementTypesResponse.FromString,
        )
        self.Get = channel.unary_unary(
            "/orchestra.elements.types.ElementTypesService/Get",
            request_serializer=element__types__pb2.GetElementTypeRequest.SerializeToString,
            response_deserializer=element__types__pb2.ElementType.FromString,
        )
        self.Create = channel.unary_unary(
            "/orchestra.elements.types.ElementTypesService/Create",
            request_serializer=element__types__pb2.CreateElementTypeRequest.SerializeToString,
            response_deserializer=element__types__pb2.ElementType.FromString,
        )
        self.GetByName = channel.unary_unary(
            "/orchestra.elements.types.ElementTypesService/GetByName",
            request_serializer=element__types__pb2.GetElementTypeByNameRequest.SerializeToString,
            response_deserializer=element__types__pb2.ElementType.FromString,
        )


class ElementTypesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ElementTypesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListAll": grpc.unary_unary_rpc_method_handler(
            servicer.ListAll,
            request_deserializer=element__types__pb2.ListAllElementTypesRequest.FromString,
            response_serializer=element__types__pb2.ListAllElementTypesResponse.SerializeToString,
        ),
        "Get": grpc.unary_unary_rpc_method_handler(
            servicer.Get,
            request_deserializer=element__types__pb2.GetElementTypeRequest.FromString,
            response_serializer=element__types__pb2.ElementType.SerializeToString,
        ),
        "Create": grpc.unary_unary_rpc_method_handler(
            servicer.Create,
            request_deserializer=element__types__pb2.CreateElementTypeRequest.FromString,
            response_serializer=element__types__pb2.ElementType.SerializeToString,
        ),
        "GetByName": grpc.unary_unary_rpc_method_handler(
            servicer.GetByName,
            request_deserializer=element__types__pb2.GetElementTypeByNameRequest.FromString,
            response_serializer=element__types__pb2.ElementType.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "orchestra.elements.types.ElementTypesService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ElementTypesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListAll(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.elements.types.ElementTypesService/ListAll",
            element__types__pb2.ListAllElementTypesRequest.SerializeToString,
            element__types__pb2.ListAllElementTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Get(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.elements.types.ElementTypesService/Get",
            element__types__pb2.GetElementTypeRequest.SerializeToString,
            element__types__pb2.ElementType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Create(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.elements.types.ElementTypesService/Create",
            element__types__pb2.CreateElementTypeRequest.SerializeToString,
            element__types__pb2.ElementType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetByName(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.elements.types.ElementTypesService/GetByName",
            element__types__pb2.GetElementTypeByNameRequest.SerializeToString,
            element__types__pb2.ElementType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
