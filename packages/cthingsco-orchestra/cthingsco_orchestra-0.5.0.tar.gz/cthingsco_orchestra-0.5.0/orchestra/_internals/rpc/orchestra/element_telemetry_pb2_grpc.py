# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import element_telemetry_pb2 as element__telemetry__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ElementTelemetryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_stream(
            "/orchestra.elements.telemetry.ElementTelemetryService/Get",
            request_serializer=element__telemetry__pb2.GetElementTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.GetElementTelemetryResponse.FromString,
        )
        self.GetMany = channel.unary_stream(
            "/orchestra.elements.telemetry.ElementTelemetryService/GetMany",
            request_serializer=element__telemetry__pb2.GetManyElementTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.GetManyElementTelemetryResponse.FromString,
        )
        self.GetManyPartition = channel.unary_stream(
            "/orchestra.elements.telemetry.ElementTelemetryService/GetManyPartition",
            request_serializer=element__telemetry__pb2.GetManyElementPartitionTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.GetManyElementPartitionTelemetryResponse.FromString,
        )
        self.GetLatest = channel.unary_unary(
            "/orchestra.elements.telemetry.ElementTelemetryService/GetLatest",
            request_serializer=element__telemetry__pb2.GetLatestElementTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.GetLatestElementTelemetryResponse.FromString,
        )
        self.GetManyLatest = channel.unary_stream(
            "/orchestra.elements.telemetry.ElementTelemetryService/GetManyLatest",
            request_serializer=element__telemetry__pb2.GetManyLatestElementTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.GetManyLatestElementTelemetryResponse.FromString,
        )
        self.GetManyPartitionLatest = channel.unary_stream(
            "/orchestra.elements.telemetry.ElementTelemetryService/GetManyPartitionLatest",
            request_serializer=element__telemetry__pb2.GetManyLatestElementPartitionTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.GetManyLatestElementPartitionTelemetryResponse.FromString,
        )
        self.Push = channel.unary_unary(
            "/orchestra.elements.telemetry.ElementTelemetryService/Push",
            request_serializer=element__telemetry__pb2.PushElementTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.PushElementTelemetryResponse.FromString,
        )
        self.PushMany = channel.unary_unary(
            "/orchestra.elements.telemetry.ElementTelemetryService/PushMany",
            request_serializer=element__telemetry__pb2.PushManyElementTelemetryRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.Aggregate = channel.unary_stream(
            "/orchestra.elements.telemetry.ElementTelemetryService/Aggregate",
            request_serializer=element__telemetry__pb2.GetAggregatedTelemetryRequest.SerializeToString,
            response_deserializer=element__telemetry__pb2.GetAggregatedTelemetryResponse.FromString,
        )


class ElementTelemetryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetManyPartition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLatest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetManyLatest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetManyPartitionLatest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Push(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PushMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Aggregate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ElementTelemetryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Get": grpc.unary_stream_rpc_method_handler(
            servicer.Get,
            request_deserializer=element__telemetry__pb2.GetElementTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.GetElementTelemetryResponse.SerializeToString,
        ),
        "GetMany": grpc.unary_stream_rpc_method_handler(
            servicer.GetMany,
            request_deserializer=element__telemetry__pb2.GetManyElementTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.GetManyElementTelemetryResponse.SerializeToString,
        ),
        "GetManyPartition": grpc.unary_stream_rpc_method_handler(
            servicer.GetManyPartition,
            request_deserializer=element__telemetry__pb2.GetManyElementPartitionTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.GetManyElementPartitionTelemetryResponse.SerializeToString,
        ),
        "GetLatest": grpc.unary_unary_rpc_method_handler(
            servicer.GetLatest,
            request_deserializer=element__telemetry__pb2.GetLatestElementTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.GetLatestElementTelemetryResponse.SerializeToString,
        ),
        "GetManyLatest": grpc.unary_stream_rpc_method_handler(
            servicer.GetManyLatest,
            request_deserializer=element__telemetry__pb2.GetManyLatestElementTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.GetManyLatestElementTelemetryResponse.SerializeToString,
        ),
        "GetManyPartitionLatest": grpc.unary_stream_rpc_method_handler(
            servicer.GetManyPartitionLatest,
            request_deserializer=element__telemetry__pb2.GetManyLatestElementPartitionTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.GetManyLatestElementPartitionTelemetryResponse.SerializeToString,
        ),
        "Push": grpc.unary_unary_rpc_method_handler(
            servicer.Push,
            request_deserializer=element__telemetry__pb2.PushElementTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.PushElementTelemetryResponse.SerializeToString,
        ),
        "PushMany": grpc.unary_unary_rpc_method_handler(
            servicer.PushMany,
            request_deserializer=element__telemetry__pb2.PushManyElementTelemetryRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        "Aggregate": grpc.unary_stream_rpc_method_handler(
            servicer.Aggregate,
            request_deserializer=element__telemetry__pb2.GetAggregatedTelemetryRequest.FromString,
            response_serializer=element__telemetry__pb2.GetAggregatedTelemetryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "orchestra.elements.telemetry.ElementTelemetryService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ElementTelemetryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Get(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/Get",
            element__telemetry__pb2.GetElementTelemetryRequest.SerializeToString,
            element__telemetry__pb2.GetElementTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMany(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/GetMany",
            element__telemetry__pb2.GetManyElementTelemetryRequest.SerializeToString,
            element__telemetry__pb2.GetManyElementTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetManyPartition(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/GetManyPartition",
            element__telemetry__pb2.GetManyElementPartitionTelemetryRequest.SerializeToString,
            element__telemetry__pb2.GetManyElementPartitionTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLatest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/GetLatest",
            element__telemetry__pb2.GetLatestElementTelemetryRequest.SerializeToString,
            element__telemetry__pb2.GetLatestElementTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetManyLatest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/GetManyLatest",
            element__telemetry__pb2.GetManyLatestElementTelemetryRequest.SerializeToString,
            element__telemetry__pb2.GetManyLatestElementTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetManyPartitionLatest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/GetManyPartitionLatest",
            element__telemetry__pb2.GetManyLatestElementPartitionTelemetryRequest.SerializeToString,
            element__telemetry__pb2.GetManyLatestElementPartitionTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Push(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/Push",
            element__telemetry__pb2.PushElementTelemetryRequest.SerializeToString,
            element__telemetry__pb2.PushElementTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PushMany(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/PushMany",
            element__telemetry__pb2.PushManyElementTelemetryRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Aggregate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/orchestra.elements.telemetry.ElementTelemetryService/Aggregate",
            element__telemetry__pb2.GetAggregatedTelemetryRequest.SerializeToString,
            element__telemetry__pb2.GetAggregatedTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
