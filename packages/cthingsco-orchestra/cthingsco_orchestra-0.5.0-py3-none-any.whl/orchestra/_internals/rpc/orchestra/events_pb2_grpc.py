# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import events_pb2 as events__pb2


class EventsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Push = channel.unary_unary(
            "/orchestra.events.EventsService/Push",
            request_serializer=events__pb2.PushEventRequest.SerializeToString,
            response_deserializer=events__pb2.EventResponse.FromString,
        )
        self.Watch = channel.unary_stream(
            "/orchestra.events.EventsService/Watch",
            request_serializer=events__pb2.WatchEventsRequest.SerializeToString,
            response_deserializer=events__pb2.EventResponse.FromString,
        )
        self.DeclareSubscriber = channel.unary_unary(
            "/orchestra.events.EventsService/DeclareSubscriber",
            request_serializer=events__pb2.DeclareSubscriberRequest.SerializeToString,
            response_deserializer=events__pb2.DeclareSubscriberResponse.FromString,
        )
        self.Unsubscribe = channel.unary_unary(
            "/orchestra.events.EventsService/Unsubscribe",
            request_serializer=events__pb2.UnsubscribeRequest.SerializeToString,
            response_deserializer=events__pb2.UnsubscribeResponse.FromString,
        )


class EventsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Push(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeclareSubscriber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EventsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Push": grpc.unary_unary_rpc_method_handler(
            servicer.Push,
            request_deserializer=events__pb2.PushEventRequest.FromString,
            response_serializer=events__pb2.EventResponse.SerializeToString,
        ),
        "Watch": grpc.unary_stream_rpc_method_handler(
            servicer.Watch,
            request_deserializer=events__pb2.WatchEventsRequest.FromString,
            response_serializer=events__pb2.EventResponse.SerializeToString,
        ),
        "DeclareSubscriber": grpc.unary_unary_rpc_method_handler(
            servicer.DeclareSubscriber,
            request_deserializer=events__pb2.DeclareSubscriberRequest.FromString,
            response_serializer=events__pb2.DeclareSubscriberResponse.SerializeToString,
        ),
        "Unsubscribe": grpc.unary_unary_rpc_method_handler(
            servicer.Unsubscribe,
            request_deserializer=events__pb2.UnsubscribeRequest.FromString,
            response_serializer=events__pb2.UnsubscribeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "orchestra.events.EventsService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class EventsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Push(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.events.EventsService/Push",
            events__pb2.PushEventRequest.SerializeToString,
            events__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Watch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/orchestra.events.EventsService/Watch",
            events__pb2.WatchEventsRequest.SerializeToString,
            events__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeclareSubscriber(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.events.EventsService/DeclareSubscriber",
            events__pb2.DeclareSubscriberRequest.SerializeToString,
            events__pb2.DeclareSubscriberResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Unsubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/orchestra.events.EventsService/Unsubscribe",
            events__pb2.UnsubscribeRequest.SerializeToString,
            events__pb2.UnsubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
