[tool.pytest.ini_options]
addopts = """
    --cov src \
    --no-cov-on-fail \
    --cov-report term-missing \
    --cov-report html:./.tmp/coverage \
    --maxfail=1 \
    --tb=short \
    -vvv \
    -ra \
    -q \
    --showlocals \
    -p pytest_cov"""
log_cli = true
cache_dir = "./.tmp/pytest-cache"
testpaths = [
    "__tests__",
]
norecursedirs = [
    ".*",
    ".git",
    ".tmp",
    "srv",
    "node_modules",
]

[tool.mypy]
plugins = [
    "sqlmypy",
    "sqlalchemy.ext.mypy.plugin",
    "pydantic.mypy"
]
#packages = [
#    "src",
#    "__tests__",
#]
exclude = ["migrations"]
cache_dir = "./.tmp/mypy-cache"
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
ignore_missing_imports = false
follow_imports = "normal"
namespace_packages = true
explicit_package_bases = true
follow_imports_for_stubs = true
implicit_reexport = true
allow_untyped_globals = false
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_unused_ignores = true
warn_no_return = true
show_none_errors = true
ignore_errors = false
allow_redefinition = false
strict_equality = true
show_error_context = false
show_column_numbers = false
warn_redundant_casts = true
warn_unreachable = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = [
    "sqlalchemy_serializer",
    "api_utils"
]
ignore_missing_imports = true

[tool.ruff]
exclude = ["migrations"]
line-length = 150
target-version = "py310"
cache-dir = "./.tmp/ruff-cache"


[tool.ruff.lint]
select = ["ALL"]
ignore = ["D", "RUF001", "PGH003"]
extend-ignore = [
    "S311",     # Generated data isn't always used for cryptographic purposes
    "N805",     # First argument of a method should be named `self` - but pydantic docs use cls
    "TRY003",   # Avoid specifying long messages outside the exception class - but pydantic allow to use simple raise error
    "EM101",    # Exception must not use a string literal, assign to variable first - duplicate msg? ok
    "S101",     # Use of `assert` detected - only way to deal with paranoic mypy
    "PLR0913",  # Too many arguments in function definition (6 > 5) - maybe good. wiil be refactored later
    "RUF012",   # Mutable class attributes should be annotated with `typing.ClassVar` - sqlalchemy allow to mutations
    "G004",     # Logging statement uses f-string - it's OK
    "UP035",    # `typing.List` is deprecated, use `list` instead - yes, but `list` broke api-utils @rest_api
    "UP006",    # Use `list` instead of `List` for type annotation - yes, but `list` broke api-utils @rest_api
    "ANN401",   # Checks that function arguments are annotated with a more specific type than Any
    "ANN101",   # This rule is commonly disabled because type checkers can infer this type without annotation. It will be removed in a future release
    "C901",     # Checks for functions with a high McCabe complexity
    "ERA001",   # Checks for commented-out Python code
    "ANN102",   # Checks that class method cls arguments have type annotations
    "PGH004",   # Check for noqa annotations that suppress all diagnostics, as opposed to targeting specific diagnostics
    "A002",     # Checks for any function arguments that use the same name as a builtin
    "A001",     # Checks for variable (and function) assignments that use the same name as a builtin
    "B019",     # Checks for uses of the functools.lru_cache and functools.cache decorators on methods
    "PLW0603",  # Checks for the use of global statements to update identifiers
    "UP033",    # Checks for uses of functools.lru_cache that set maxsize=None
    "FIX002",   # Checks for "TODO" comments
    "TD002",    # Checks that a TODO comment includes an author
    "TD003",    # Checks that a TODO comment is associated with a link to a relevant issue or ticket
    "FBT001",   # Checks for the use of boolean positional arguments in function definitions, as determined by the presence of a bool type hint
    "PERF203",  # Checks for uses of except handling via try-except within for and while loops
    "A005",     # Checks if module shadows a Python standard-library module
    "C420",     # Unnecessary dict comprehension for iterable; use dict.fromkeys instead
    "LOG015",   # {}() call on root logger
    "TC006",    # Add quotes to type expression in typing.cast()
]

[tool.ruff.lint.mccabe]
max-complexity = 4

[tool.black]
target-version = ["py310"]
exclude = "migrations"
#include = [
#    "^/src",
#    "^/notification_sdk",
#]
check = false
