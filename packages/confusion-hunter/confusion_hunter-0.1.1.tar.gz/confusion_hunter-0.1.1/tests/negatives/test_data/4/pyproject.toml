[tool.black]
line-length = 120
target-version = ['py311']

[tool.coverage.report]
# when running a summary report, show missing lines
show_missing = true
# Donâ€™t include empty files (those that have 0 statements) in the report.
skip_empty = true

[tool.coverage.paths]
# The entries in this section are lists of file paths that should be considered equivalent
# when combining data from different machines (different gitlab CI jobs in our case)
source = ['pasr_manager/', '/builds/**/pasr_manager/']

[tool.coverage.run]
# a list of file name patterns, the files to leave out of measurement or reporting
#
# test_web just a temporary solution, no need to test it
omit = ['pasr_manager/test_web/*']

[tool.poetry]
name = "pasr-manager"
version = "0.0.0"
description = "Proficient Automation of Statistical Reports"
authors = ["Backend Team"]

packages = [
    { include="pasr_manager", from="./" },
]

[tool.poetry.scripts]
pasr_manager = "pasr_manager.__main__:main"

[[tool.poetry.source]]
name = "PyPI proxy"
priority = "primary"
url = "https://pypi.repo.ops.example.com/upstream/pypi.org/simple/"

[[tool.poetry.source]]
name = 'example-company PyPI'
url = 'https://pypi.repo.ops.example.com/local/simple/'
priority = "supplemental"


[tool.poetry.dependencies]
python = "^3.11"
python-dateutil = "^2.8.2"
click = "^8.0.0"
pytz = "^2023.3"
more-itertools = "^9.1.0"
urllib3 = "^2.0.2"
requests = "^2.31.0"
jsonschema = "^4.21.1"
wtforms = "<3.0.0"
jsonref = "^1.1.0"
aiomysql = "^0.2.0"
python-keystoneclient = "^5.1.0"
python-swiftclient = "^4.3.0"
jinja2 = "^3.1.2"
tornado-jinja2 = "^0.2.4"
redis = "*"

[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
mypy = "^1.3.0"
pylint = "^2.17.4"
types-requests = "^2.31.0.0"
types-pytz = "^2023.3.0.0"
types-pyyaml = "^6.0.12.10"
types-certifi = "^2021.10.8.3"
types-python-dateutil = "^2.8.19.13"
pytest = "8.3.3"
pytest-asyncio = "^0.24.0"

[build-system]
requires = ["poetry>=2.0"]
build-backend = "poetry.masonry.api"

[tool.pylint."MESSAGES CONTROL"]
disable = '''
        missing-module-docstring,
        duplicate-code,
'''

[tool.pylint.BASIC]
good-names = '''
           id,
           _,
'''

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.TYPECHECK]
generated-members='''
        fastrpc
        '''

[tool.mypy]
python_version=3.11
follow_imports='normal'
# Enables PEP 420 style namespace packages.
namespace_packages='True'
# if false mypy treats None as compatible with every type.
strict_optional='False'
# Warns about unneeded `# type: ignore` comments.
warn_unused_ignores='True'
# Warns about casting an expression to its inferred type.
warn_redundant_casts='True'
# Reports an error whenever it encounters a partly annotated or unannotated function definition.
disallow_untyped_defs='True'
disallow_incomplete_defs='True'
# This flag disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics='True'
# Pretty logging format.
pretty='True'
# Show error codes in logs.
show_error_codes='True'
show_error_context='True'

[[tool.mypy.overrides]]
module = [
    "imp_tornado.*",
    "tornado",
    "aiomysql",
    "celery",
    "celery.*",
    "imp_celery_client.*",
    "swiftclient.*",
    "openpyxl.*",
    "bs4",
    "babel.*",
    "metaserver_gendoc",
    "prometheus_client",
    "apscheduler.*",
    "aioredis.*",
    "jsonschema",
    "jsonref",
    "email_validator.*",
    "iteration_utilities.*",
    "imp_utils.*",
    "emu.*",
    "diagnostics.*",
]

ignore_missing_imports='True'
