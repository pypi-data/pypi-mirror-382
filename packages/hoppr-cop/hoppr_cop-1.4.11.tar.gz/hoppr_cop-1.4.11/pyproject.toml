[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "hoppr-cop"
version = "1.4.11"
description = ""
authors = ["kganger <keith.e.ganger@lmco.com>"]
license = "MIT"

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Communications :: File Sharing",
  "Topic :: Security",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving :: Packaging",
  "Topic :: System :: Software Distribution",
  "Typing :: Typed",
]

[[tool.poetry.packages]]
include = "hopprcop"

[tool.poetry.scripts]
hoppr-cop = "hopprcop.combined.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
cvss = "^3.0"
hoppr = "1.14.0"
packageurl-python = "0.*"
packaging = "^24.1"
PyYAML = "^6.0"
rich = ">12.5.1"
tinydb = "^4.7.0"
typer = "0.*"
typing-extensions = "^4.8.0"

[tool.poetry.group.dev.dependencies]
black = "^25.0.0"
pre-commit = "^4.0.0"
ruff = ">=0.1.4, <1.0.0"
sourcery = "^1.13.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.3.1"
mkdocs-glightbox = "0.*"
mkdocs-mermaid2-plugin = "0.*"
pygments = "^2.14.0"
pymdown-extensions = "^10.0.0"
markdown-attr-plus = "^0.3.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-cov = "^6.0.0"
pytest-pretty = "^1.1.0"

[tool.poetry.group.typing.dependencies]
types-docutils = ">=0.20.0.3, <1.0.0"
types-pygments = "^2.16.0.0"
types-pyyaml = "^6.0.12.12"
types-requests = "^2.31.0.2"
types-setuptools = "^68.2.0.0"
types-urllib3 = "^1.26.25.14"

[tool.poetry.group.typing.dependencies.mypy]
extras = ["reports"]
version = "^1.6.0"

[tool.poetry.plugins."hoppr.plugin"]
hopprcop_plugin = "hopprcop.hoppr_plugin.hopprcop_plugin:HopprCopPlugin"

[tool.black]
color = true
line-length = 120
target-version = ["py310"]

[tool.coverage.report]
exclude_also = [
  "if __name__ == .__main__.:",
  "if not TYPE_CHECKING:",
  "if self.debug:",
  "if settings.DEBUG:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "raise NotImplementedError"
]
precision = 2
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
omit = [".*", "hopprcop/ossindex/api/*.py"]

[tool.mypy]
cobertura_xml_report = "."
enable_error_code = ["ignore-without-code"]
explicit_package_bases = true
follow_imports = "silent"
incremental = false
junit_xml = "mypy.xml"
namespace_packages = true
no_implicit_reexport = true
packages = ["hopprcop", "test.unit"]
plugins = ["pydantic.mypy"]
pretty = true
python_version = "3.10"
show_error_codes = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["cvss.*"]
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_calls = true
ignore_missing_imports = true
implicit_reexport = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pyright]
include = ["hopprcop", "test/unit"]
pythonPlatform = "All"
pythonVersion = "3.10"
reportArgumentType = false
reportCallIssue = false
reportGeneralTypeIssues = false
reportSelfClsParameterName = false

[tool.pytest.ini_options]
addopts = [
  "--strict-markers",
  "--cov=hopprcop",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--cov-fail-under=85",
  "--import-mode=importlib",
  "--junit-xml=test.xml"
]
console_output_style = "progress"
junit_family = "xunit2"
pythonpath = ["."]
testpaths = ["test"]

[tool.ruff]
extend-exclude = ["hopprcop/ossindex/api/*.py"]
line-length = 120
output-format = "gitlab"
target-version = "py310"

[tool.ruff.lint]
extend-select = [
  "ANN",  # All flake8-annotations rules
  "B",    # All flake8-bugbear rules
  "C4",   # All flake8-comprehension rules
  "D",    # All pydocstyle rules
  "ERA",  # All flake8-eradicate/eradicate rules
  "I",    # All isort rules
  "ISC",  # All flake8-implicit-str-concat rules
  "N",    # All pep8-naming rules
  "PIE",  # All flake8-pie rules
  "PGH",  # All pygrep-hooks rules
  "PT",   # All flake8-pytest-style rules
  "PTH",  # All flake8-use-pathlib rules
  "PYI",  # All flake8-pyi rules
  "Q",    # All flake8-quotes rules
  "RUF",  # All ruff checks
  "SIM",  # All flake8-simplify rules
  "T",    # All flake8-debugger and flake8-print rules
  "TCH",  # All flake8-type-checking rules
  "TID",  # All flake8-tidy-imports rules
  "UP",   # All pyupgrade rules
]
ignore = [
  "ANN002", # Missing type annotation for `*args`
  "ANN003", # Missing type annotation for `*kwargs`
  "D104",   # Missing docstring in public package
  "D105",   # Missing docstring in magic method
  "D106",   # Missing docstring in public nested class
  "D107",   # Missing docstring in `__init__`
]
unfixable = [
  "ERA", # do not autoremove commented out code
]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["typer.Option"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "list"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions", "hoppr_security_commons.reporting.models"]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2
lines-between-types = 1
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.per-file-ignores]
"hopprcop/grype/models.py" = [
  "D101",  # Missing docstring in public class
]
"test/unit/**/*.py" = [
  "D100",  # Missing docstring in public module
  "D103",  # Missing docstring in public function
]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload", "typing.override", "typing_extensions.override"]
