# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing

class ControlLoopStats:
    period: builtins.list[builtins.float]
    read_dt: builtins.list[builtins.float]
    write_dt: builtins.list[builtins.float]

class FullBodyPosition:
    body_yaw: builtins.float
    stewart: builtins.list[builtins.float]
    antennas: builtins.list[builtins.float]
    timestamp: builtins.float
    def __new__(cls, body_yaw:builtins.float, stewart:typing.Sequence[builtins.float], antennas:typing.Sequence[builtins.float]) -> FullBodyPosition: ...
    def __repr__(self) -> builtins.str: ...

class ReachyMiniMotorController:
    def __new__(cls, serialport:builtins.str) -> ReachyMiniMotorController:
        r"""
        Create a new motor controller for the given serial port.
        
        # Arguments
        * `serialport` - Path to the serial port device.
        """
    def is_torque_enabled(self) -> builtins.bool:
        r"""
        Is torque enabled on all motors
        """
    def enable_torque(self) -> None:
        r"""
        Enable torque on all motors.
        """
    def disable_torque(self) -> None:
        r"""
        Disable torque on all motors.
        """
    def read_all_positions(self) -> builtins.list[builtins.float]:
        r"""
        Read all motor positions as a 9-element array.
        """
    def read_stewart_platform_current(self) -> builtins.list[builtins.int]:
        r"""
        Read the current for the Stewart platform motors.
        """
    def read_stewart_platform_operating_mode(self) -> builtins.list[builtins.int]:
        r"""
        Read the operating mode for the Stewart platform motors.
        """
    def set_all_goal_positions(self, positions:typing.Sequence[builtins.float]) -> None:
        r"""
        Set goal positions for all motors (9 values).
        
        # Arguments
        * `positions` - Array of 9 goal positions (body_yaw, stewart, antennas).
        """
    def set_antennas_positions(self, positions:typing.Sequence[builtins.float]) -> None:
        r"""
        Set goal positions for the antennas (2 values).
        
        # Arguments
        * `positions` - Array of 2 goal positions for antennas.
        """
    def set_stewart_platform_position(self, position:typing.Sequence[builtins.float]) -> None:
        r"""
        Set goal positions for the Stewart platform (6 values).
        
        # Arguments
        * `position` - Array of 6 goal positions for Stewart platform.
        """
    def set_body_rotation(self, position:builtins.float) -> None:
        r"""
        Set goal position for the body rotation motor.
        
        # Arguments
        * `position` - Goal position for body rotation motor.
        """
    def set_stewart_platform_goal_current(self, current:typing.Sequence[builtins.int]) -> None:
        r"""
        Set goal current for the Stewart platform motors.
        
        # Arguments
        * `current` - Array of 6 goal currents for Stewart platform motors.
        """
    def set_stewart_platform_operating_mode(self, mode:builtins.int) -> None:
        r"""
        Set operating mode for all Stewart platform motors.
        
        # Arguments
        * `mode` - Operating mode value for Stewart platform motors.
        """
    def set_antennas_operating_mode(self, mode:builtins.int) -> None:
        r"""
        Set operating mode for both antennas.
        
        # Arguments
        * `mode` - Operating mode value for antennas.
        """
    def set_body_rotation_operating_mode(self, mode:builtins.int) -> None:
        r"""
        Set operating mode for the body rotation motor.
        
        # Arguments
        * `mode` - Operating mode value for body rotation motor.
        """
    def enable_body_rotation(self, enable:builtins.bool) -> None:
        r"""
        Enable or disable the body rotation motor.
        
        # Arguments
        * `enable` - Set to true to enable, false to disable.
        """
    def enable_antennas(self, enable:builtins.bool) -> None:
        r"""
        Enable or disable the antennas.
        
        # Arguments
        * `enable` - Set to true to enable, false to disable.
        """
    def enable_stewart_platform(self, enable:builtins.bool) -> None:
        r"""
        Enable or disable the Stewart platform motors.
        
        # Arguments
        * `enable` - Set to true to enable, false to disable.
        """

class ReachyMiniPyControlLoop:
    def __new__(cls, serialport:builtins.str, read_position_loop_period:datetime.timedelta, allowed_retries:builtins.int, stats_pub_period:typing.Optional[datetime.timedelta]) -> ReachyMiniPyControlLoop:
        r"""
        Create a new control loop for the motor controller.
        
        # Arguments
        * `serialport` - Path to the serial port device.
        * `update_loop_period` - Period between control loop updates.
        * `allowed_retries` - Number of allowed retries for reading positions.
        * `init_timeout` - Timeout for initial position read.
        * `stats_pub_period` - Optional period for publishing stats.
        """
    def close(self) -> None:
        r"""
        Close the control loop and release resources.
        """
    def get_last_position(self) -> FullBodyPosition:
        r"""
        Get the last successfully read motor positions.
        """
    def set_all_goal_positions(self, positions:FullBodyPosition) -> None:
        r"""
        Set goal positions for all motors (9 values).
        
        # Arguments
        * `positions` - Array of 9 goal positions (body_yaw, stewart, antennas).
        """
    def set_stewart_platform_position(self, position:typing.Sequence[builtins.float]) -> None:
        r"""
        Set goal positions for the Stewart platform (6 values).
        
        # Arguments
        * `position` - Array of 6 goal positions for Stewart platform.
        """
    def set_body_rotation(self, position:builtins.float) -> None:
        r"""
        Set goal position for the body rotation motor.
        
        # Arguments
        * `position` - Goal position for body rotation motor.
        """
    def set_antennas_positions(self, positions:typing.Sequence[builtins.float]) -> None:
        r"""
        Set goal positions for the antennas (2 values).
        
        # Arguments
        * `positions` - Array of 2 goal positions for antennas.
        """
    def is_torque_enabled(self) -> builtins.bool:
        r"""
        Check torque enabled status.
        """
    def enable_torque(self) -> None:
        r"""
        Enable torque on all motors.
        """
    def disable_torque(self) -> None:
        r"""
        Disable torque on all motors.
        """
    def set_stewart_platform_goal_current(self, current:typing.Sequence[builtins.int]) -> None:
        r"""
        Set goal current for the Stewart platform motors.
        
        # Arguments
        * `current` - Array of 6 goal currents for Stewart platform motors.
        """
    def get_stewart_platform_operating_mode(self) -> builtins.int:
        r"""
        Check stewart platform operating mode
        """
    def set_stewart_platform_operating_mode(self, mode:builtins.int) -> None:
        r"""
        Set operating mode for all Stewart platform motors.
        
        # Arguments
        * `mode` - Operating mode value for Stewart platform motors.
        """
    def set_antennas_operating_mode(self, mode:builtins.int) -> None:
        r"""
        Set operating mode for both antennas.
        
        # Arguments
        * `mode` - Operating mode value for antennas.
        """
    def set_body_rotation_operating_mode(self, mode:builtins.int) -> None:
        r"""
        Set operating mode for the body rotation motor.
        
        # Arguments
        * `mode` - Operating mode value for body rotation motor.
        """
    def enable_stewart_platform(self, enable:builtins.bool) -> None:
        r"""
        Enable or disable the Stewart platform motors.
        
        # Arguments
        * `enable` - Set to true to enable, false to disable.
        """
    def enable_body_rotation(self, enable:builtins.bool) -> None:
        r"""
        Enable or disable the body rotation motor.
        
        # Arguments
        * `enable` - Set to true to enable, false to disable.
        """
    def enable_antennas(self, enable:builtins.bool) -> None:
        r"""
        Enable or disable the antennas.
        
        # Arguments
        * `enable` - Set to true to enable, false to disable.
        """
    def get_stats(self) -> typing.Optional[ControlLoopStats]:
        r"""
        Get the latest control loop statistics, if available.
        """

