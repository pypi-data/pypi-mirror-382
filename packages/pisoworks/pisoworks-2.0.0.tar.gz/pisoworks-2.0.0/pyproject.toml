[tool.poetry]
# - `name`: The name of the Python package.
# - `version`: The current version of the package.
# - `description`: A brief description of the package's purpose.
# - `packages`: Specifies the package(s) to include in the distribution. Here, it includes the "nv200" package.
# - `authors`: A list of authors or maintainers of the package.
# - `readme`: The file containing the long description of the package, typically displayed on package repositories.
# - `include`: Specifies additional files or directories to include in the package distribution. In this case, all files in the "examples" directory and its subdirectories are included
name = "pisoworks"
version = "2.0.0"
description = "PySide6-based application for controlling NV200 devices."
authors = ["piezosystem jena GmbH"]
readme = "README_PYPI.md"
packages = [{ include = "pisoworks" }]
classifiers = [
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: End Users/Desktop" 
]


[tool.poetry.urls]
Homepage = "https://github.com/piezosystemjena/PiSoWorks"
Source = "https://github.com/piezosystemjena/PiSoWorks"
"Bug Tracker" = "https://github.com/piezosystemjena/PiSoWorks/issues"
Documentation = "https://piezosystemjena.github.io/PiSoWorks"


[tool.poetry.scripts]
# This section defines the entry points for the package, allowing users to run the application
# from the command line. The `pisoworks` script will execute the `main` function
# from the `main` module within the `pisoworks` package. That means, a user that installs
# the PiSoWorks library from pip can do the following:
#
# pip install pisoworks
# pisoworks
#
pisoworks = "pisoworks.__main__:main"


[tool.poetry.dependencies]
# This section defines the dependencies for the project using Poetry.
# Each dependency specifies the required version range to ensure compatibility.
python = "^3.12,<3.14"
pyside6 = "^6.9.0"
qtinter = "^0.11.0"
tomlkit = "^0.13.2"
matplotlib = "^3.10.1"
qt-material-icons = "^0.2.0"
#nv200 = { path = "../nv200_python_lib", develop = true }
nv200 = "*" # always take the latest version
pyside6-qtads = "^4.4.0"
qtass-pyside6 = "^0.9.2"
rich = "^14.0.0"
qtawesome = "^1.4.0"
scipy = "^1.16.0"
numpy = "^2.3.1"
pandas = "^2.3.1"
openpyxl = "^3.1.5"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry.group.dev.dependencies]
# This section defines the development dependencies for the project using Poetry's
# dependency grouping feature. The `[tool.poetry.group.dev.dependencies]` table
# specifies packages required for development purposes, particularly for
# documentation generation and theming:
sphinx = "^8.2.3"
sphinx-rtd-theme = "^3.0.2"
sphinx-rtd-dark-mode = "^1.3.0"
sphinx-fontawesome = "^0.0.6"
sphinx-togglebutton = "^0.3.2"
sphinxcontrib-napoleon = "^0.7"
pyinstaller = "^6.14.1"
rst2pdf = "^0.103.1"
svglib = "^1.5.1"



[build-system]
# This section defines the build system requirements for the project.
# - The `requires` field specifies the dependencies needed to build the project.
#   In this case, it requires `poetry-core` version 2.0.0 or higher, but less than 3.0.0.
# - The `build-backend` field specifies the backend used for building the project.
#   Here, it is set to `poetry_dynamic_versioning.backend`, which likely integrates
#   dynamic versioning functionality into the build process.
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry_dynamic_versioning.backend"



[tool.poetry-dynamic-versioning]
# This section configures the "poetry-dynamic-versioning" plugin for Poetry.
# - `enable`: Enables the dynamic versioning functionality.
# - `vcs`: Specifies the version control system to use for versioning (e.g., "git").
# - `fix-shallow-repository`: Ensures compatibility with shallow Git repositories.
# - `bump`: Automatically increments the version based on changes in the repository.
# To use the plugin it needs to get installed via:
# pipx inject poetry "poetry-dynamic-versioning[plugin]
enable = false
vcs = "git"
fix-shallow-repository = true
bump = true
#format = "{base}"  # <- This removes the `+local` part
dirty = false
metadata = false # <== disables the +commit-hash suffix to avoid warnings when uploading to PyPI