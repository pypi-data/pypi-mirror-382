#!/usr/bin/env python
# coding: utf8
#
# Copyright 2022 CS GROUP
# Licensed to CS GROUP (CS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# CS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
Unit tests for body model implemented with Orekit
"""

import os.path as osp

import numpy as np
import pytest
from asgard_legacy_drivers.drivers.sentinel_3_legacy import S3LegacyDriver
from scipy.spatial.transform import Rotation as R

from asgard.core.body import BodyId
from asgard.core.frame import FrameId
from asgard.models.body import EarthBody
from asgard.models.time import TimeReference

TEST_DIR = osp.dirname(__file__)


@pytest.fixture(name="ebm", scope="module")
def earth_body():
    """
    Fixture to instanciate an EarthBody
    """
    # Read orekit-compatible IERS bulletin
    iers_path = osp.join(
        TEST_DIR,
        "resources",
        "207_BULLETIN_B207.txt",
    )

    iers_data = S3LegacyDriver.read_iers_file(iers_path)
    time_model = TimeReference(iers_bulletin_b=iers_data)

    config = {"time_reference": time_model}

    return EarthBody(**config)


def test_earth_body_convert(ebm):
    """
    Unit test for EarthBody.convert
    """

    # Geodetic position (deg, deg, m)
    position = np.array(
        [
            [-40.0, 25.0, 62.0],
            [45.0, -12.0, 45.0],
            [175.0, 45.0, 12.0],
            [64.0, -86.0, 150.0],
        ]
    )

    ref_cartesian = np.array(
        [
            [4430854.9163741, -3717928.72612955, 2679100.66525193],
            [4412138.63855466, 4412138.63855466, -1317411.88723696],
            [-4500408.53464925, 393734.72801712, 4487356.8940835],
            [195695.9940365, 401236.24835471, -6341313.24390133],
        ]
    )

    dataset = {"position": position}
    # lon/lat to cart
    ebm.geodetic_to_cartesian(
        dataset,
        field_out="cart",
    )

    # cart to lon/lat
    ebm.cartesian_to_geodetic(
        dataset,
        field_in="cart",
        field_out="return",
    )

    assert np.allclose(dataset["position"], dataset["return"])

    roundtrip_error = dataset["position"] - dataset["return"]
    lonlat_error = roundtrip_error[:, [0, 1]]
    alt_error = roundtrip_error[:, [2]]
    assert np.all(np.abs(lonlat_error) < 1e-9)  # units: deg
    assert np.all(np.abs(alt_error) < 1e-4)  # units: m

    cartesian_error = np.linalg.norm(dataset["cart"] - ref_cartesian, axis=1)
    assert np.all(cartesian_error < 1e-4)  # units: m


def test_geodetic_distance(ebm):
    """
    Comparison of geodetic distance

    Test case "long distance"
    """

    pt1_list = [
        [10.0, 0.0],
        [10.0, 50.0],
        [10.0, 50.0],
        [10.0, 45.0],
        [10.0, 30.0],
        [4.17, 10.0],
    ]
    pt2_list = [
        [20.0, 0.0],
        [20.0, 50.0],
        [40.0, 50.0],
        [20.0, 55.0],
        [10.0, 40.0],
        [4.1705, 10.001],
    ]
    alti = [30.0, 30.0, 30.0, 30.0, 30.0, 0.0]

    eocfi_dist = [
        1113200.1439204917,
        716426.3442214131,
        2136329.688788004,
        1320443.6836095229,
        1109420.8748103566,
        123.44742628186941,
    ]
    eocfi_az12 = [
        90.0,
        86.17637453473111,
        78.4318646069165,
        29.064774110129296,
        0.0,
        26.36396531445787,
    ]
    eocfi_az21 = [
        270.0,
        273.8236254652689,
        281.5681353930835,
        216.74149957952227,
        180.0,
        206.36405157603795,
    ]

    for idx, pt1 in enumerate(pt1_list):
        dist_test, az12, az21 = ebm.geodetic_distance(
            pt1[0],
            pt1[1],
            pt2_list[idx][0],
            pt2_list[idx][1],
            alti[idx],
        )

        assert np.all(np.abs(dist_test - eocfi_dist[idx]) < 3.0)  # unit: m
        assert np.all(np.abs(az12 - eocfi_az12[idx]) < 1e-6)  # unit: deg
        assert np.all(np.abs(az21 - eocfi_az21[idx]) < 1e-6)  # unit: deg


@pytest.fixture(name="eocfi_coords", scope="module")
def given_reference_eocfi_coordinates():
    """
    Build a reference context from data generated by EOCFI
    """

    # TAI time
    times = np.array(
        [
            8338.06258101852,
            8338.06292824074,
            8338.063275462962,
            8338.063622685186,
            8338.063969907407,
        ]
    )

    # Position in EF
    coords = np.array(
        [
            [4221826.162, -5719877.893, 1024795.802],
            [4161165.040, -5720733.673, 1242927.811],
            [4096499.892, -5715798.296, 1459852.080],
            [4027918.272, -5705058.933, 1675357.777],
            [3955511.592, -5688508.798, 1889235.445],
        ]
    )
    # Velocity in EF
    velocity = np.array(
        [
            [-1954.363827, -0124.852632, 7288.843309],
            [-2089.246655, 67.905300, 7252.112699],
            [-2221.276716, 261.191149, 7208.333772],
            [-2350.323386, 454.804057, 7157.548875],
            [-2476.259870, 648.542280, 7099.807314],
        ]
    )

    ref_pos_j2000 = np.array(
        [
            [7060390.47485316, 850436.55985867, 1009291.67688685],
            [7029925.56392867, 812630.08378631, 1227492.03802675],
            [6992647.47245028, 774036.04427943, 1444499.61903206],
            [6948592.01468303, 734691.82149606, 1660103.50785092],
            [6897801.63929157, 694635.52831378, 1874094.15286556],
        ]
    )

    ref_vel_j2000 = np.array(
        [
            [-901.60162522, -1246.68098028, 7290.87168625],
            [-1129.23054216, -1273.54750217, 7254.6409089],
            [-1355.77659925, -1299.18081952, 7211.3593897],
            [-1581.01806085, -1323.55572069, 7161.06898879],
            [-1804.73448566, -1346.64826506, 7103.81852823],
        ]
    )
    ref_quat = np.array(
        [
            [5.40055763e-04, 9.53544166e-04, 5.03315953e-01, 8.64101759e-01],
            [5.41100106e-04, 9.52952514e-04, 5.04260821e-01, 8.63550707e-01],
            [5.42143802e-04, 9.52359723e-04, 5.05205086e-01, 8.62998621e-01],
            [5.43186849e-04, 9.51765792e-04, 5.06148746e-01, 8.62445503e-01],
            [5.44229246e-04, 9.51170722e-04, 5.07091801e-01, 8.61891353e-01],
        ],
        dtype="float64",
    )
    dataset = {
        "times": {
            "offsets": times,
            "ref": "TAI",
        },
        "eocfi_pos_ef": coords,
        "eocfi_vel_ef": velocity,
        "eocfi_pos_j2000": ref_pos_j2000,
        "eocfi_vel_j2000": ref_vel_j2000,
        "eocfi_rotation": ref_quat,
    }
    return dataset


def test_earth_body_change_reference_frame(ebm, eocfi_coords):
    """
    Unit test for EarthBody.change_reference_frame()
    """

    dataset = eocfi_coords.copy()

    ebm.change_reference_frame(
        dataset,
        fields_in=["times", "eocfi_pos_ef", "eocfi_vel_ef"],
        fields_out=["pos_j2000", "vel_j2000"],
        frame_in=FrameId.EF,
        frame_out=FrameId.EME2000,
    )

    test_pos_j2000 = dataset["pos_j2000"]
    test_vel_j2000 = dataset["vel_j2000"]

    ref_pos_j2000 = dataset["eocfi_pos_j2000"]
    ref_vel_j2000 = dataset["eocfi_vel_j2000"]

    # Absolute error
    error_pos_norm = np.linalg.norm(test_pos_j2000 - ref_pos_j2000, axis=1)
    error_vel_norm = np.linalg.norm(test_vel_j2000 - ref_vel_j2000, axis=1)
    assert np.all(error_pos_norm < 11.0)  # unit: m
    assert np.all(error_vel_norm < 5e-2)  # unit: m/s

    # Relative error
    relative_error_pos_norm = np.linalg.norm((test_pos_j2000 - ref_pos_j2000) / ref_pos_j2000, axis=1)
    relative_error_vel_norm = np.linalg.norm((test_vel_j2000 - ref_vel_j2000) / ref_vel_j2000, axis=1)
    assert np.all(relative_error_pos_norm < 1e-4)  # unit: none
    assert np.all(relative_error_vel_norm < 1e-4)  # unit: none

    # Come back to EF frame
    ebm.change_reference_frame(
        dataset,
        fields_in=["times", "pos_j2000", "vel_j2000"],
        fields_out=["back_pos_ef", "back_vel_ef"],
        frame_in=FrameId.EME2000,
        frame_out=FrameId.EF,
    )
    test_pos_back = dataset["back_pos_ef"]
    test_vel_back = dataset["back_vel_ef"]

    error_pos_norm = np.linalg.norm(test_pos_back - dataset["eocfi_pos_ef"], axis=1)
    error_vel_norm = np.linalg.norm(test_vel_back - dataset["eocfi_vel_ef"], axis=1)

    assert np.all(error_pos_norm < 1e-8)  # unit: m
    assert np.all(error_vel_norm < 1e-11)  # unit: m/s


def test_earth_body_frame_transform(ebm, eocfi_coords):
    """
    Unit test for EarthBody.frame_transform()
    """

    dataset = eocfi_coords.copy()

    ebm.frame_transform(
        dataset,
        frame_in=FrameId.EF,
        frame_out=FrameId.EME2000,
    )

    rot = R.from_quat(dataset["rotation"])
    pos_j2000 = dataset["translation"] + rot.apply(dataset["eocfi_pos_ef"])

    error_pos_norm = np.linalg.norm(pos_j2000 - dataset["eocfi_pos_j2000"], axis=1)

    assert np.all(error_pos_norm < 11.0)  # unit: m

    ref_rot = R.from_quat(dataset["eocfi_rotation"])
    full_mag = (rot * ref_rot.inv()).magnitude()

    assert np.all(full_mag < 1.2e-7)


def test_earth_body_sun_pv(ebm):
    """
    Unit test for EarthBody.body_pv()
    """
    # As no timescale defined here, the GPS will be used in body_pv
    times = 8338.06423611 * np.ones((10,), dtype="float64")
    for k in range(10):
        times[k] += k * 0.001

    dataset = {
        "times": {
            "offsets": times,
            "ref": "GPS",
        }
    }

    # Compute Sun position and velocity in EF frame and GPS timescale for date
    ebm.body_pv(
        dataset,
        BodyId.SUN,
        frame_out=FrameId.EF,
        fields_out=["sun_pos", "sun_vel"],
    )

    # Reference data generated with EOCFI. But xl_sun, xl_moon and xl_planet use formulae developed
    # by Flandern et al. (van Flandern, T. C.; Pulkkinen, K. F., “Low-precision formulae for
    # planetary positions“ http://adsabs.harvard.edu/abs/1979ApJS...41..391V). As stated by the
    # authors, the accuracy of such methods is 1 arcminute (~0.017 deg). Maybe OREKIT is much mode
    # precise using JPL DE
    # digits up to cm
    ref_pos_legacy = np.array(
        [
            [-1.284699145908e11, 6.580754752734e10, -3.524765039263e10],
            [-1.280536698810e11, 6.661336388035e10, -3.524846825658e10],
            [-1.276323708371e11, 6.741654754118e10, -3.524928610977e10],
            [-1.272060341046e11, 6.821706681716e10, -3.525010395222e10],
            [-1.267746765358e11, 6.901489010614e10, -3.525092178390e10],
            [-1.263383151762e11, 6.980998592174e10, -3.525173960482e10],
            [-1.258969672719e11, 7.060232287977e10, -3.525255741498e10],
            [-1.254506502662e11, 7.139186970424e10, -3.525337521438e10],
            [-1.249993817930e11, 7.217859523948e10, -3.525419300302e10],
            [-1.245431796850e11, 7.296246843480e10, -3.525501078090e10],
        ]
    )

    ref_vel_legacy = np.array(
        [
            [4788332.841110182, 9341690.631318, -9463.120212176187],
            [4846927.699316404, 9311403.590401465, -9462.995725379684],
            [4905330.996253783, 9280749.024588626, -9462.871235545523],
            [4963540.427400638, 9249728.14505767, -9462.746742672147],
            [5021553.694819308, 9218342.178011067, -9462.622246761286],
            [5079368.508998672, 9186592.363701792, -9462.497747814696],
            [5136982.587861995, 9154479.956963757, -9462.373245829987],
            [5194393.657205333, 9122006.226981519, -9462.248740808092],
            [5251599.451577841, 9089172.45678551, -9462.124232749928],
            [5308597.71316903, 9055979.943875313, -9461.999721653914],
        ]
    )

    test_pos = dataset["sun_pos"]
    test_vel = dataset["sun_vel"]

    # Absolute error
    error_pos_norm = np.linalg.norm(test_pos - ref_pos_legacy, axis=1)
    error_vel_norm = np.linalg.norm(test_vel - ref_vel_legacy, axis=1)
    assert np.all(error_pos_norm < 2e6)  # unit: m
    assert np.all(error_vel_norm < 200)  # unit: m/s

    # Relative error
    relative_error_pos_norm = np.linalg.norm((test_pos - ref_pos_legacy) / ref_pos_legacy, axis=1)
    relative_error_vel_norm = np.linalg.norm((test_vel - ref_vel_legacy) / ref_vel_legacy, axis=1)
    assert np.all(relative_error_pos_norm < 5e-5)  # unit: none
    assert np.all(relative_error_vel_norm < 2e-4)  # unit: none


def test_earth_body_ef_to_topocentric(ebm):
    """
    Unit test for EarthBody.ef_to_topocentric()
    """

    sun = np.array(
        [
            [-1.12718300e11, 9.01526828e10, -3.52738375e10],
            [-1.12521277e11, 9.03983384e10, -3.52741214e10],
            [-1.12323717e11, 9.06435634e10, -3.52744052e10],
            [-1.12125624e11, 9.08883566e10, -3.52746891e10],
        ]
    )
    coords = np.array(
        [
            [-3073767.620, 6490388.604, -179618.937],
            [-3025529.974, 6503444.953, -400427.970],
            [-2974332.978, 6510014.561, -620848.033],
            [-2920254.781, 6510079.146, -840665.102],
        ]
    )

    dataset = {"position": coords, "sun": sun}
    ebm.cartesian_to_geodetic(dataset)

    assert np.allclose(
        dataset["position"],
        [
            [1.15341655e02, -1.44131909e00, 8.05570085e05],
            [1.14948771e02, -3.21434944e00, 8.05868089e05],
            [1.14554986e02, -4.98710814e00, 8.06200341e05],
            [1.14159783e02, -6.75951453e00, 8.06566288e05],
        ],
    )

    ebm.ef_to_topocentric(
        dataset,
        coord_in="sun",
        ground_in="position",
        coord_out="sun_topo",
    )

    sun_topo = dataset["sun_topo"]
    ref_sun_topo = np.array(
        [
            [1.16823258e02, 6.14911817e01, 1.48577553e11],
            [1.13636446e02, 6.20050197e01, 1.48577509e11],
            [1.10345096e02, 6.24204319e01, 1.48577470e11],
            [1.06969907e02, 6.27329248e01, 1.48577438e11],
        ]
    )
    assert np.all(np.abs(sun_topo[:, :1] - ref_sun_topo[:, :1]) < 1e-6)  # unit: deg
    assert np.all(np.abs(sun_topo[:, 2] - ref_sun_topo[:, 2]) < 300)  # unit: m


def test_earth_body_geodetic_path(ebm):
    """
    Unit test for EarthBody.geodetic_path()
    """

    coordinates = np.array(
        [
            [-51.89086994, 0.70918467],
            [-51.92227022, 0.85102356],
            [-51.9536722, 0.99286309],
            [-51.9850761, 1.13470307],
            [-52.01648221, 1.27654359],
        ]
    )

    dataset = {"positions": coordinates}

    ebm.geodetic_path(dataset)

    geod_path = dataset["distance"]
    azimuth = dataset["azimuth"]

    ref_out = [0.0, 16068.4909, 32137.075, 48205.7361, 64274.48643]
    assert np.all(np.abs(geod_path - ref_out) < 2e-3)  # unit: m

    ref_azi = [347.43707712, 347.43696537, 347.43682771, 347.43666106, 347.43666106]
    assert np.all(np.abs(azimuth % 360.0 - ref_azi) < 1e-8)  # unit: deg


def test_earth_body_ground_range(ebm):
    """
    Unit test for EarthBody.ground_range()
    """

    coordinates = np.array(
        [
            [-51.89086994, 0.70918467, 30],
            [-51.92227022, 0.85102356, 30],
            [-51.9536722, 0.99286309, 30],
            [-51.9850761, 1.13470307, 30],
            [-52.01648221, 1.27654359, 30],
        ]
    )

    dataset = {"position": coordinates}
    ebm.geodetic_to_cartesian(dataset, field_out="cart")

    fake_velocity = np.diff(dataset["cart"], axis=0)

    point_right = ebm.ground_range(coordinates[0], 16000.0, fake_velocity[0])
    point_left = ebm.ground_range(coordinates[0], -320000.0, fake_velocity[0])

    # measure distance and azimuth of left and right point
    dist_right, azi_right, _ = ebm.geodetic_distance(
        coordinates[0, 0], coordinates[0, 1], point_right[0], point_right[1], 30
    )
    dist_left, azi_left, _ = ebm.geodetic_distance(
        coordinates[0, 0], coordinates[0, 1], point_left[0], point_left[1], 30
    )
    # measure distance and azimuth of next point on ground track
    _, azi_up, _ = ebm.geodetic_distance(coordinates[0, 0], coordinates[0, 1], coordinates[1, 0], coordinates[1, 1], 30)

    assert np.allclose(dist_right, 16000.0)
    assert np.allclose(dist_left, 320000.0)

    assert np.allclose((azi_right - azi_up) % 360.0, 90.0)
    assert np.allclose((azi_left - azi_up) % 360.0, 270.0)


def test_earth_body_all_frame_transforms(ebm, eocfi_coords):
    """
    Unit test for EarthBody.frame_transform()
    """

    dataset = eocfi_coords.copy()

    inert_reference = FrameId.GCRF
    # ~ inert_reference = FrameId.EME2000

    ebm.frame_transform(
        dataset, frame_in=inert_reference, frame_out=FrameId.EF_EQUINOX, fields_out=["eme2000_ef_T", "eme2000_ef"]
    )

    ebm.frame_transform(
        dataset, frame_in=inert_reference, frame_out=FrameId.MOD, fields_out=["eme2000_mod_T", "eme2000_mod"]
    )

    ebm.frame_transform(dataset, frame_in=FrameId.MOD, frame_out=FrameId.TOD, fields_out=["mod_tod_T", "mod_tod"])

    ebm.frame_transform(dataset, frame_in=FrameId.TOD, frame_out=FrameId.GTOD, fields_out=["tod_gtod_T", "tod_gtod"])

    ebm.frame_transform(
        dataset, frame_in=FrameId.GTOD, frame_out=FrameId.EF_EQUINOX, fields_out=["gtod_ef_T", "gtod_ef"]
    )

    # ~ out_dir = osp.join(TEST_DIR, "outputs", "frame_transform")
    # ~ os.makedirs(out_dir, exist_ok=True)
    ref_dir = osp.join(TEST_DIR, "resources", "frame_transform")
    for field in ["eme2000_ef", "eme2000_mod", "mod_tod", "tod_gtod", "gtod_ef"]:
        # ~ np.save(osp.join(out_dir, field + ".npy"), dataset[field])
        quat = np.load(osp.join(ref_dir, field + ".npy"))
        rot = R.from_quat(dataset[field])
        ref_rot = R.from_quat(quat)
        full_mag = (rot * ref_rot.inv()).magnitude()
        # ~ logging.info(f" {field} difference (rad)")
        # ~ logging.info(full_mag)
        assert np.all(full_mag < 2e-7), f"Accurracy test failed for {field}"

    # Check bias between EME2000 and GCRF
    ebm.frame_transform(
        dataset, frame_in=FrameId.EME2000, frame_out=FrameId.GCRF, fields_out=["eme2000_gcrf_T", "eme2000_gcrf"]
    )
    assert np.all(R.from_quat(dataset["eme2000_gcrf"]).magnitude() < 1.2e-7)
