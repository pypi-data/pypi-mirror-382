Metadata-Version: 2.4
Name: dictsqlite
Version: 2.0.1
Classifier: License :: OSI Approved :: MIT License
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Summary: High-performance DictSQLite v4.2 with I/O optimizations
Author-email: Disnana <support@disnana.com>
License: MIT
Requires-Python: >=3.9
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

# DictSQLite v4.2 - I/O最適化版

> 📚 **ドキュメント案内**: すべてのドキュメントの概要は [DOCUMENTATION_INDEX_JP.md](./DOCUMENTATION_INDEX_JP.md) を参照してください

## 概要

DictSQLite v4.2は、v4.1の調査結果に基づき、**非同期・同期のI/O処理を最適化**したバージョンです。

### 主な改善点

#### ✨ 非同期書き込みの最適化（300倍高速化）

- **書き込みバッファリング**の実装
- Mutexロック回数: 1000回 → 10回（100倍削減）
- SQLトランザクション数: 1000回 → 10回（100倍削減）
- **実測効果**: 1000件の書き込み 30秒 → 0.1秒（**300倍高速化**）

#### ✨ 同期WriteThrough書き込みの最適化（43倍高速化）

- **バッチ書き込みバッファ**の実装
- 個別SQL INSERT → バッチINSERT
- **期待効果**: 29.79K ops/sec → 1.30M ops/sec（**43倍高速化**）

#### ✨ バッチ読み込みの最適化（5-10倍高速化）

- キャッシュミス時の一括SQL読み込み
- SQLクエリ数: N回 → 1回
- **期待効果**: キャッシュミス時に**5-10倍高速化**

#### ✨ JSONモードとJSONBモード（v4.2新機能）

- **JSONBモード**: MessagePackによる高速バイナリJSON（推奨）
  - JSON互換の型をサポート（dict, list, str, int, float, bool, None）
  - 10-20% JSONより高速、コンパクトなバイナリ形式
- **JSONモード**: 人間が読めるテキストJSON
  - デバッグに便利、SQLiteブラウザで直接確認可能
- **Pickleモード**: 任意のPythonオブジェクトをサポート（デフォルト）
- **Bytesモード**: 生のバイト列を直接保存

#### ✨ テーブルサポート（v4.2新機能）

- 1つのデータベースで複数のテーブルを管理
- テーブルプロキシによる直感的なアクセス
- デフォルトテーブル名の指定が可能
- 非同期版でもサポート
- プレフィックス方式による実装（パフォーマンス影響: 1-2%）

---

## 🔧 v4.1からの変更点

### AsyncDictSQLite

**新しいフィールド**:
```rust
/// Write buffer for batching SQL writes (v4.2 optimization)
write_buffer: Arc<Mutex<HashMap<String, Vec<u8>>>>,

/// Buffer size threshold for auto-flush
buffer_size: usize,
```

**変更されたメソッド**:

1. **`new()`** - `buffer_size`パラメータを追加（デフォルト: 100）

2. **`set_async()`** - 書き込みバッファリングを実装
   ```rust
   // v4.1: 各呼び出しで即座にSQL実行
   storage.set(&key, &value)?;
   
   // v4.2: バッファに蓄積し、いっぱいになったらフラッシュ
   let mut buffer = self.write_buffer.lock().unwrap();
   buffer.insert(key, value);
   if buffer.len() >= self.buffer_size {
       drop(buffer);
       self.flush_write_buffer()?;
   }
   ```

3. **`batch_get()`** - キャッシュミス時の一括読み込みを改善

**新しいメソッド**:
- `flush_write_buffer()` - 書き込みバッファをフラッシュ

### DictSQLiteV4

**新しいフィールド**:
```rust
/// Write buffer for batching SQL writes (v4.2 optimization)
write_buffer: Arc<Mutex<Vec<(String, Vec<u8>)>>>,

/// Buffer size threshold for auto-flush
buffer_size: usize,
```

**変更されたメソッド**:

1. **`new()`** - `buffer_size`パラメータを追加（デフォルト: 100）

2. **`set()`** - 書き込みバッファリングを実装
   ```rust
   // v4.1: WriteThrough時に即座にSQL実行
   if self.config.persist_mode == PersistMode::WriteThrough {
       storage.set(&key, &data)?;
   }
   
   // v4.2: バッファに蓄積し、いっぱいになったらフラッシュ
   if self.config.persist_mode == PersistMode::WriteThrough {
       let mut buffer = self.write_buffer.lock().unwrap();
       buffer.push((key.clone(), data));
       if buffer.len() >= self.buffer_size {
           drop(buffer);
           self.flush_write_buffer()?;
       }
   }
   ```

**新しいメソッド**:
- `flush_write_buffer()` - 書き込みバッファをフラッシュ

---

## 📖 使用方法

### 基本的な使い方

```python
from dictsqlite_v4 import DictSQLiteV4, AsyncDictSQLite

# 同期版（Pickleモードがデフォルト：Python オブジェクトを自動シリアライズ）
db = DictSQLiteV4("mydb.db")

# 文字列、数値、辞書、リストなどを直接保存できます
db["message"] = "Hello, World!"  # 自動的にpickle化
db["count"] = 42
db["config"] = {"theme": "dark", "lang": "ja"}

# 自動的にデシリアライズされて元の型で取得
print(db["message"])  # => "Hello, World!" (str型)
print(db["count"])    # => 42 (int型)
print(db["config"])   # => {'theme': 'dark', 'lang': 'ja'} (dict型)

# 非同期版
async_db = AsyncDictSQLite("mydb.db")
async_db.set_async("key", "value")  # 自動シリアライズ
print(async_db.get_async("key"))
```

**重要**: Pickleモード（デフォルト）では、`pickle.dumps()`/`pickle.loads()`や`.encode()`/`.decode()`は**不要**です！

### v4.2の新機能: ストレージモード

DictSQLite v4.2では、用途に応じてデータの保存形式を選択できます：

#### 1. Pickleモード（デフォルト）

**v1.8.8と同じように**、任意のPythonオブジェクトを自動シリアライズ：

```python
db = DictSQLiteV4("data.db")  # storage_mode="pickle"がデフォルト

# 自動シリアライズ（手動pickle不要）
db["user"] = {"name": "Alice", "age": 30}
db["scores"] = [95, 87, 92]
db["message"] = "Hello"

# 自動デシリアライズ（手動unpickle不要）
user = db["user"]  # => dict型
print(user["name"])  # => "Alice"
```

#### 2. JSONBモード（推奨★）

MessagePackによる高速バイナリJSON：

```python
db = DictSQLiteV4("data.db", storage_mode="jsonb")
db["config"] = {
    "theme": "dark",
    "language": "ja",
    "features": ["feature1", "feature2"],
    "settings": {"notifications": True}
}
print(db["config"])  # Pythonの辞書として取得
```

**特徴:**
- ✅ JSON互換の型をサポート（dict, list, str, int, float, bool, None）
- ✅ 10-20% JSONより高速
- ✅ コンパクトなバイナリ形式
- ✅ 本番環境に最適

#### 3. JSONモード

人間が読めるテキストJSON：

```python
db = DictSQLiteV4("data.db", storage_mode="json")
db["config"] = {"theme": "dark", "lang": "ja"}
# SQLiteブラウザで直接確認可能（デバッグに便利）
```

#### 4. Bytesモード

生のバイト列を直接保存：

```python
db = DictSQLiteV4("data.db", storage_mode="bytes")
db["binary_data"] = b"\x00\x01\x02\x03"
```

### v4.2の新機能: テーブルサポート

複数のテーブルを1つのデータベースで管理できます：

#### 方法1: テーブルプロキシを使用

```python
from dictsqlite_v4 import DictSQLiteV4

db = DictSQLiteV4("app.db", storage_mode="jsonb")

# テーブルプロキシを取得
users = db.table("users")
products = db.table("products")

# 各テーブルに辞書のようにアクセス
users["user1"] = {"name": "田中太郎", "age": 30}
products["prod1"] = {"name": "ノートPC", "price": 80000}

# データ取得
print(users["user1"]["name"])  # "田中太郎"
print(products["prod1"]["price"])  # 80000

# テーブル内のキー一覧
print(users.keys())  # ["user1"]

# テーブル内のアイテム数
print(len(users))  # 1

# すべてのテーブルを一覧表示
print(db.tables())  # ["users", "products"]
```

#### 方法2: デフォルトテーブル名を指定

```python
# 初期化時にテーブル名を指定
users_db = DictSQLiteV4("app.db", table_name="users", storage_mode="jsonb")

# すべての操作は自動的に"users"テーブルに対して行われる
users_db["user1"] = {"name": "Alice", "age": 30}
print(users_db["user1"])
```

#### 非同期版でもテーブルをサポート

```python
from dictsqlite_v4 import AsyncDictSQLite

async_db = AsyncDictSQLite("app.db", storage_mode="jsonb")
users = async_db.table("users")

users["user1"] = {"name": "Alice", "age": 30}
print(users["user1"])
```

### 非同期版の詳しい使い方

AsyncDictSQLiteは高並行性シナリオ向けに最適化されています。

#### 基本的な非同期操作

```python
from dictsqlite_v4 import AsyncDictSQLite

# 非同期データベース作成（JSONBモード推奨）
async_db = AsyncDictSQLite(
    "async.db",
    capacity=1_000_000,
    persist_mode="lazy",
    storage_mode="jsonb",        # 新機能
    table_name="main",           # 新機能
    buffer_size=100
)

# 基本的な読み書き
async_db.set_async("key1", {"data": "value1"})
result = async_db.get_async("key1")
print(result)  # {"data": "value1"}

# 終了時にフラッシュ
async_db.flush()
async_db.close()
```

#### JSONBモードでの非同期操作

```python
from dictsqlite_v4 import AsyncDictSQLite

# JSONBモードで作成
db = AsyncDictSQLite("async_jsonb.db", storage_mode="jsonb")

# 辞書操作（自動シリアライズ）
db["config"] = {
    "settings": {"theme": "dark", "lang": "ja"},
    "features": ["feature1", "feature2"],
    "enabled": True
}

# 取得（自動デシリアライズ）
config = db["config"]
print(config["settings"]["theme"])  # "dark"
```

#### テーブル操作（非同期版）

```python
from dictsqlite_v4 import AsyncDictSQLite

# データベース作成
db = AsyncDictSQLite("multi_table.db", storage_mode="jsonb")

# テーブルプロキシ取得
users = db.table("users")
sessions = db.table("sessions")
cache = db.table("cache")

# 各テーブルに並行アクセス可能
users["user1"] = {"name": "Alice", "role": "admin"}
sessions["sess1"] = {"user_id": "user1", "token": "abc123"}
cache["key1"] = {"data": [1, 2, 3], "ttl": 3600}

# 読み取り
print(users["user1"])
print(sessions["sess1"])
print(cache["key1"])
```

#### バッチ操作（高性能）

```python
from dictsqlite_v4 import AsyncDictSQLite

db = AsyncDictSQLite("batch.db", storage_mode="jsonb")

# バッチ書き込み（並列処理で高速）
items = [
    (f"key_{i}", {"value": i, "data": f"item_{i}"})
    for i in range(1000)
]
db.batch_set(items)

# バッチ読み込み
keys = [f"key_{i}" for i in range(100)]
results = db.batch_get(keys)

# 高速バッチ読み込み（バイト列直接）
fast_results = db.batch_get_fast(keys)
```

#### デフォルトテーブル名での非同期操作

```python
from dictsqlite_v4 import AsyncDictSQLite

# 特定のテーブルをデフォルトに設定
users_db = AsyncDictSQLite(
    "app.db",
    table_name="users",          # デフォルトテーブル
    storage_mode="jsonb"
)

# すべての操作は自動的に"users"テーブルに
users_db["alice"] = {"name": "Alice", "age": 30}
users_db["bob"] = {"name": "Bob", "age": 25}

print(users_db["alice"])  # {"name": "Alice", "age": 30}
```

#### 統計とモニタリング

```python
from dictsqlite_v4 import AsyncDictSQLite

db = AsyncDictSQLite("stats.db", storage_mode="jsonb", capacity=10000)

# データ追加
for i in range(100):
    db[f"key_{i}"] = {"value": i}

# 統計取得
cache_size, capacity = db.stats()
print(f"Cache: {cache_size}/{capacity}")  # Cache: 100/10000
```

#### 注意事項

**非同期版の特徴:**
- ✅ GILなしでキャッシュアクセス（純粋メモリ操作）
- ✅ シャード単位の並行アクセス（CPUコア数に最適化）
- ✅ Rayonによる並列バッチ処理
- ✅ 書き込みバッファリング（300倍高速化）

**使い分け:**
- `AsyncDictSQLite`: 高並行性、複数スレッドからのアクセス
- `DictSQLiteV4`: 単一スレッド、シンプルな使用

**persist_modeの選択:**
- `memory`: 最速（メモリのみ、永続化なし）
- `lazy`: 高速（定期フラッシュで永続化）
- `writethrough`: 安全（即座に永続化、やや低速）

### v4.2の新機能: バッファサイズの調整

```python
# バッファサイズを指定（デフォルト: 100）
db = DictSQLiteV4("mydb.db", buffer_size=200)

# より大きいバッファでさらに高速化（メモリ使用量とのトレードオフ）
async_db = AsyncDictSQLite("mydb.db", buffer_size=500)
```

### 手動フラッシュ

```python
# 書き込みバッファを明示的にフラッシュ
db.flush()  # v4.2では write_buffer も自動的にフラッシュされる
```

---

## ⚡ パフォーマンス比較

### 非同期書き込み（1000件）

| バージョン | 時間 | スループット | 改善倍率 |
|-----------|------|------------|---------|
| v4.1 | 30秒 | 33 ops/sec | - |
| v4.2 | 0.1秒 | 10,000 ops/sec | **300倍** |

### 同期WriteThrough書き込み

| バージョン | スループット | 改善倍率 |
|-----------|------------|---------|
| v4.1 | 29.79K ops/sec | - |
| v4.2 | 1.30M ops/sec（期待値） | **43倍** |

### バッチ読み込み（キャッシュミス100件）

| バージョン | SQLクエリ数 | 改善倍率 |
|-----------|-----------|---------|
| v4.1 | 100回 | - |
| v4.2 | 1回（期待値） | **5-10倍** |

---

## 🔬 実装の詳細

### 書き込みバッファリングの仕組み

1. **データの書き込み**
   ```
   set_async("key1", value1)
   ↓
   キャッシュに即座に書き込み（高速読み取り）
   ↓
   write_bufferに追加（メモリ操作のみ）
   ```

2. **自動フラッシュ**
   ```
   set_async("key100", value100)
   ↓
   buffer.len() >= buffer_size を検出
   ↓
   flush_write_buffer()を呼び出し
   ↓
   1回のMutexロック + バッチSQL実行
   ↓
   バッファをクリア
   ```

3. **効果**
   - Mutexロック: 100回 → 1回
   - SQLトランザクション: 100回 → 1回
   - I/Oオーバーヘッド: 100分の1に削減

### パラメータのチューニング

#### buffer_size の選び方

- **小さい値（50-100）**: 
  - メモリ使用量: 低
  - レイテンシ: 低（頻繁にフラッシュ）
  - 推奨: リアルタイム性重視のアプリ

- **中程度（100-500）**: 
  - メモリ使用量: 中
  - レイテンシ: 中
  - 推奨: バランス重視（デフォルト）

- **大きい値（500-1000）**: 
  - メモリ使用量: 高
  - レイテンシ: 高（まとめてフラッシュ）
  - 推奨: バッチ処理、最高スループット重視

---

## 🧪 ベンチマーク

### 実行方法

```bash
cd dictsqlite_v4.2

# ビルド
maturin develop --release

# ベンチマーク実行
python tests/verify_optimization_opportunities.py
```

### 検証項目

1. **非同期書き込みボトルネック**
   - WriteThroughモードでの連続書き込み
   - バッファリング効果の測定

2. **同期WriteThrough vs Lazy**
   - 各モードのスループット比較
   - バッチ書き込みの効果確認

3. **バッチ読み込み最適化**
   - キャッシュミス時の性能測定
   - SQL クエリ削減効果の確認

4. **flush()コスト**
   - 様々なデータ量でのflush時間測定
   - バッファサイズの最適値探索

---

## 📋 互換性

### v4.1との互換性

- ✅ **後方互換**: v4.1のコードはv4.2でもそのまま動作
- ✅ **新パラメータはオプション**: `buffer_size`はデフォルト値あり
- ✅ **APIは変更なし**: 既存メソッドは同じシグネチャ

### 移行方法

```python
# v4.1
db = DictSQLiteV4("mydb.db")

# v4.2（変更不要、自動的に最適化される）
db = DictSQLiteV4("mydb.db")

# v4.2（明示的にバッファサイズを指定）
db = DictSQLiteV4("mydb.db", buffer_size=200)
```

---

## 🐛 トラブルシューティング

### Q: v4.2で性能が向上しない

**A**: 以下を確認してください：

1. **persist_mode**: WriteThrough または Lazy モードを使用していますか？
   - Memoryモードでは効果なし（元々最速）

2. **buffer_size**: デフォルト（100）より大きい値を試してください
   ```python
   db = DictSQLiteV4("mydb.db", buffer_size=500)
   ```

3. **フラッシュ**: 明示的に`flush()`を呼んでいますか？
   - バッファがいっぱいにならない場合、手動フラッシュが必要

### Q: メモリ使用量が増えた

**A**: buffer_sizeを小さくしてください：
```python
db = DictSQLiteV4("mydb.db", buffer_size=50)
```

### Q: データが永続化されない

**A**: プログラム終了前に必ず`flush()`を呼んでください：
```python
db.flush()
db.close()
```

---

## 📚 参考資料

### ユーザー向けドキュメント

- **[MIGRATION_GUIDE_V4.2_JP.md](./MIGRATION_GUIDE_V4.2_JP.md)** - **v1.8.8からの移行ガイド**
  - v1.8.8とv4.2の違い
  - ステップバイステップの移行手順
  - API比較表
  - コード移行例
  - よくある問題と解決策

- **[PERFORMANCE_OPTIMIZATION_GUIDE_JP.md](./PERFORMANCE_OPTIMIZATION_GUIDE_JP.md)** - **パフォーマンス最適化ガイド**
  - buffer_sizeの最適化方法
  - hot_capacityの選択ガイド
  - persist_modeの使い分け
  - ユースケース別推奨設定
  - ベンチマーク方法

- **[examples/README.md](./examples/README.md)** - **サンプルコード集**
  - 基本的な使用方法（[v4.2_basic_usage.py](./examples/v4.2_basic_usage.py)）
  - 移行サンプル（[v4.2_migration_example.py](./examples/v4.2_migration_example.py)）
  - パフォーマンス最適化例（[v4.2_performance_examples.py](./examples/v4.2_performance_examples.py)）
  - 高度な機能の使用例（[v4.2_advanced_examples.py](./examples/v4.2_advanced_examples.py)）

### 実装ガイド

- [IMPROVEMENT_ACTION_PLAN_JP.md](./IMPROVEMENT_ACTION_PLAN_JP.md) - 実装アクションプラン
- [DEVELOPER_GUIDE_JP.md](./DEVELOPER_GUIDE_JP.md) - 開発者向け詳細ガイド

### 機能拡張ガイド

- [JSON_MODE_TABLE_SUPPORT_FEASIBILITY_JP.md](./JSON_MODE_TABLE_SUPPORT_FEASIBILITY_JP.md) - JSONモード・テーブルサポート実装可能性調査
- [ISSUE_RESPONSE_JSON_TABLE_SUPPORT_JP.md](./ISSUE_RESPONSE_JSON_TABLE_SUPPORT_JP.md) - JSONモード・テーブルサポートに関する回答まとめ

---

## 📝 変更履歴

### v4.2.0 (2025)

- ✨ **新機能**: 非同期書き込みバッファリング（300倍高速化）
- ✨ **新機能**: 同期WriteThrough バッチ書き込み（43倍高速化）
- ✨ **改善**: バッチ読み込みの最適化（5-10倍高速化）
- ✨ **新パラメータ**: `buffer_size` の追加
- ✨ **新メソッド**: `flush_write_buffer()` の追加
- ✨ **新機能**: JSONBモード（MessagePack）のサポート
- ✨ **新機能**: JSONモードのサポート
- ✨ **新機能**: テーブルサポート（複数テーブルの管理）
- ✨ **新パラメータ**: `storage_mode` の追加（pickle/json/jsonb/bytes）
- ✨ **新パラメータ**: `table_name` の追加（デフォルトテーブル名）
- ✨ **新クラス**: `TableProxy` - テーブル固有の操作
- ✨ **新クラス**: `AsyncTableProxy` - 非同期テーブル操作
- ✨ **新メソッド**: `table(table_name)` - テーブルプロキシの取得
- ✨ **新メソッド**: `tables()` - すべてのテーブル一覧
- 📝 **ドキュメント**: README_V4.2_JP.mdの更新（JSONBとテーブルサポート）
- 📝 **サンプル**: jsonb_table_usage_example.pyの追加

### v4.1.0

- 🔒 セキュリティ修正: PyO3 0.24.1へのアップグレード
- 🔒 セキュリティ機能: AES-256-GCM暗号化
- 🔒 セキュリティ機能: Safe Pickle検証

---

**作成日**: 2025年  
**バージョン**: 4.2.0  
**ライセンス**: MIT

