.PHONY: all objdir cleantarget clean realclean distclean

ifneq ($(V),1)
.SILENT:
endif

MODULE := ecrt_sys
BINDING_NAME := ecrt

# CORE VARIABLES

VERSION := 0.0.5
CONFIG := release
ifndef COMPILER
COMPILER := default
endif

# C_BINDINGS_SYMBOLS_PREFIX_ENABLE := y

TARGET_TYPE = sharedlib

# INCLUDES

EC_SDK_SRC := $(dir $(realpath $(firstword $(MAKEFILE_LIST))))../../

_CF_DIR = $(EC_SDK_SRC)/
include $(_CF_DIR)crossplatform.mk
include $(_CF_DIR)default.cf

# POST-INCLUDES VARIABLES

OBJ = obj/$(PLATFORM)$(COMPILER_SUFFIX)

TARGET = $(OBJ)/lib$(MODULE).rlib

SOURCES = $(MODULE).rs

LIBS += \
   $(call _L,ecrt_cStatic) \
	$(call _L,ecrtStatic) \
	$(call _L,z)

ifdef WINDOWS_TARGET

LIBS += \
	$(call _L,winmm) \
	$(call _L,kernel32) \
	$(call _L,user32) \
	$(call _L,mpr) \
	$(call _L,advapi32) \
	$(call _L,shell32)

endif

#	-Clink-arg=$(OBJ)/$(BINDING_NAME)$(O)

OFLAGS =

OFLAGS += \
	-Lnative=obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX) \
	-Lnative=$(EC_SDK_SRC)obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib

RUSTFLAGS = --edition 2021 -Anon_snake_case -Anon_upper_case_globals -Anon_camel_case_types -Aimproper_ctypes

_OBJECTS = $(_DEP_OBJECTS) $(OBJ)/$(BINDING_NAME)$(O)

OBJECTS = $(_OBJECTS)

SOURCES = $(_DEP_SOURCES) $(BINDING_NAME)_cffi.rs

CBINDING_STATIC_LIB = $(EC_SDK_SRC)obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib/libecrt_cStatic.a

all: objdir $(TARGET);

# TARGETS

objdir:
	$(call mkdir,$(OBJ))

$(SYMBOLS): | objdir
$(OBJECTS): | objdir

$(TARGET): $(SOURCES) $(OBJECTS) $(CBINDING_STATIC_LIB) | objdir
	rustc --crate-type lib --crate-name ecrt_sys $(RUSTFLAGS) $(BINDING_NAME)_cffi.rs $(OFLAGS) $(LIBS) -o $(TARGET)
	$(call mkdir,$(EC_SDK_SRC)obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib)
	$(call cp,$(TARGET),$(EC_SDK_SRC)obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib)

cleantarget:
	$(call rm,$(TARGET))

clean: cleantarget
	$(call rm,_OBJECTS)

realclean: cleantarget
	$(call rmr,$(OBJ))

distclean:
	$(_MAKE) -f $(_CF_DIR)Cleanfile distclean distclean_all_subdirs
