# Multi-Step Questionnaire Workflow
#
# Demonstrates multiple interactive blocks with context accumulation:
# - Multiple pause/resume cycles in a single workflow
# - Context preservation across pauses
# - Different interactive block types (ConfirmOperation, AskChoice, GetInput)
# - Variable references to previous interactive responses
# - Progressive data collection from LLM
#
# This workflow simulates a project setup wizard that collects
# configuration through multiple interactive questions.
#
# Workflow steps:
# 1. Confirm project creation (ConfirmOperation)
# 2. Select project type (AskChoice)
# 3. Enter project name (GetInput with validation)
# 4. Select deployment target (AskChoice)
# 5. Generate configuration based on responses
# 6. Confirm final setup (ConfirmOperation)
# 7. Create project files
#
# Each interactive block pauses the workflow, creates a checkpoint,
# and waits for LLM response before continuing.
#
# Usage:
#   # Start workflow
#   result = execute_workflow("multi-step-questionnaire")
#
#   # Will pause 4 times for user input
#   # Each pause returns checkpoint_id and prompt
#   # Resume with: resume_workflow(checkpoint_id, response)

name: multi-step-questionnaire
description: Interactive project setup wizard with multiple input steps
version: "1.0"
author: MCP Workflows Team
tags: [interactive, questionnaire, wizard, multi-step, example, tutorial]

inputs:
  workspace:
    type: string
    description: Workspace directory for project creation
    default: "/tmp/projects"

blocks:
  # ===== STEP 1: Initial confirmation =====
  - id: confirm_start
    type: ConfirmOperation
    inputs:
      message: "Start interactive project setup wizard?"
      operation: "start_project_wizard"
      details:
        workspace: "${workspace}"

  # ===== STEP 2: Select project type =====
  - id: select_project_type
    type: AskChoice
    inputs:
      question: "What type of project do you want to create?"
      choices:
        - "python-fastapi"
        - "python-django"
        - "node-express"
        - "react-app"
        - "rust-actix"
    depends_on:
      - confirm_start
    condition: "${confirm_start.confirmed} == true"

  # ===== STEP 3: Get project name =====
  - id: get_project_name
    type: GetInput
    inputs:
      prompt: |
        Enter a project name (lowercase letters, numbers, hyphens only):
        Example: my-awesome-project
      validation_pattern: "^[a-z0-9-]+$"
    depends_on:
      - select_project_type

  # ===== STEP 4: Select deployment target =====
  - id: select_deployment
    type: AskChoice
    inputs:
      question: "Where will you deploy ${get_project_name.input_value}?"
      choices:
        - "AWS Lambda"
        - "Google Cloud Run"
        - "Azure Functions"
        - "Docker Container"
        - "Kubernetes"
        - "Traditional Server"
    depends_on:
      - get_project_name

  # ===== STEP 5: Generate configuration summary =====
  - id: generate_config
    type: BashCommand
    inputs:
      command: |
        echo "=== Project Configuration ==="
        echo "Project Name: ${get_project_name.input_value}"
        echo "Project Type: ${select_project_type.choice}"
        echo "Deployment: ${select_deployment.choice}"
        echo "Workspace: ${workspace}"
        echo ""
        echo "Configuration generated successfully"
      timeout: 30
    depends_on:
      - select_deployment

  # ===== STEP 6: Final confirmation before creation =====
  - id: confirm_creation
    type: ConfirmOperation
    inputs:
      message: |
        Create project with these settings?
        - Name: ${get_project_name.input_value}
        - Type: ${select_project_type.choice}
        - Deploy: ${select_deployment.choice}
      operation: "create_project_${get_project_name.input_value}"
      details:
        project_name: "${get_project_name.input_value}"
        project_type: "${select_project_type.choice}"
        deployment: "${select_deployment.choice}"
        workspace: "${workspace}"
    depends_on:
      - generate_config

  # ===== STEP 7: Create project structure =====
  - id: create_project
    type: BashCommand
    inputs:
      command: |
        PROJECT_DIR="${workspace}/${get_project_name.input_value}"

        echo "Creating project directory: $PROJECT_DIR"
        mkdir -p "$PROJECT_DIR"

        # Create README
        cat > "$PROJECT_DIR/README.md" <<EOF
        # ${get_project_name.input_value}

        Project Type: ${select_project_type.choice}
        Deployment Target: ${select_deployment.choice}

        ## Setup

        This project was created using the MCP Workflows interactive wizard.

        ## Deployment

        Target platform: ${select_deployment.choice}

        Generated on: $(date)
        EOF

        # Create config file
        cat > "$PROJECT_DIR/project.json" <<EOF
        {
          "name": "${get_project_name.input_value}",
          "type": "${select_project_type.choice}",
          "deployment": "${select_deployment.choice}",
          "workspace": "${workspace}",
          "created": "$(date -Iseconds)"
        }
        EOF

        echo "✅ Project created successfully at: $PROJECT_DIR"
        echo "project_path=$PROJECT_DIR"
      timeout: 60
    depends_on:
      - confirm_creation
    condition: "${confirm_creation.confirmed} == true"

  # ===== STEP 8: Success notification =====
  - id: notify_success
    type: BashCommand
    inputs:
      command: |
        echo "🎉 Project setup complete!"
        echo ""
        echo "Project: ${get_project_name.input_value}"
        echo "Type: ${select_project_type.choice}"
        echo "Deployment: ${select_deployment.choice}"
        echo "Location: ${workspace}/${get_project_name.input_value}"
        echo ""
        echo "All interactive steps completed successfully."
      timeout: 30
    depends_on:
      - create_project
    condition: "${create_project.success} == true"

  # ===== STEP 9: Cancellation notification =====
  - id: notify_cancelled
    type: BashCommand
    inputs:
      command: |
        echo "❌ Project creation cancelled"
        echo "User did not confirm final setup"
      timeout: 30
    depends_on:
      - confirm_creation
    condition: "${confirm_creation.confirmed} == false"

# Workflow outputs
outputs:
  wizard_completed: "${confirm_start.confirmed}"
  project_name: "${get_project_name.input_value}"
  project_type: "${select_project_type.choice}"
  deployment_target: "${select_deployment.choice}"
  project_created: "${create_project.success}"
  project_path: "${workspace}/${get_project_name.input_value}"

  # Summary of all responses
  responses:
    start_confirmed: "${confirm_start.confirmed}"
    project_type: "${select_project_type.choice}"
    project_type_index: "${select_project_type.choice_index}"
    project_name: "${get_project_name.input_value}"
    deployment: "${select_deployment.choice}"
    deployment_index: "${select_deployment.choice_index}"
    creation_confirmed: "${confirm_creation.confirmed}"

# How to use this workflow:
#
# This workflow demonstrates multiple pause/resume cycles:
#
# 1. First execution - pauses at confirm_start:
#    execute_workflow("multi-step-questionnaire")
#    → {"status": "paused", "checkpoint_id": "pause_001", "prompt": "Start wizard?"}
#
# 2. Resume with "yes" - pauses at select_project_type:
#    resume_workflow("pause_001", "yes")
#    → {"status": "paused", "checkpoint_id": "pause_002", "prompt": "Select project type..."}
#
# 3. Resume with choice number - pauses at get_project_name:
#    resume_workflow("pause_002", "1")
#    → {"status": "paused", "checkpoint_id": "pause_003", "prompt": "Enter project name..."}
#
# 4. Resume with project name - pauses at select_deployment:
#    resume_workflow("pause_003", "my-awesome-app")
#    → {"status": "paused", "checkpoint_id": "pause_004", "prompt": "Select deployment..."}
#
# 5. Resume with deployment choice - pauses at confirm_creation:
#    resume_workflow("pause_004", "Docker Container")
#    → {"status": "paused", "checkpoint_id": "pause_005", "prompt": "Create project?"}
#
# 6. Resume with final confirmation - completes workflow:
#    resume_workflow("pause_005", "yes")
#    → {"status": "success", "outputs": {...}}
#
# Key features demonstrated:
# - Multiple pause/resume cycles in single workflow
# - Context accumulation across pauses
# - Variable references to previous responses
# - Different interactive block types
# - Conditional execution based on responses
# - Validation of user input (project name regex)
# - Final confirmation before side effects
#
# Checkpoint management:
# - Each pause creates a new checkpoint
# - Old checkpoints remain valid (can go back)
# - Use list_checkpoints() to see all paused states
# - Use delete_checkpoint() to clean up
# - Paused checkpoints don't auto-expire
