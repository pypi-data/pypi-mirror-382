# Conditional CI Pipeline Workflow
#
# Demonstrates Phase 2.0 features:
# - Variable resolution: ${block_id.field} syntax
# - Conditional execution: Skip blocks based on boolean expressions
# - Branching: Different paths based on test results
# - Convergence: Notification block runs regardless of path taken
#
# This workflow simulates a CI/CD pipeline where:
# 1. Tests run first
# 2. If tests pass (exit_code == 0), deployment proceeds
# 3. If tests fail (exit_code != 0), failure notification is sent
# 4. Final notification always runs

name: conditional-ci-pipeline
description: CI pipeline with conditional deployment based on test results
version: "1.0"
tags: [test]
author: MCP Workflows Team
tags:
  - ci-cd
  - conditional
  - testing
  - example

inputs:
  project_dir:
    type: string
    description: Project directory for running tests
    default: "/tmp/test-project"

  deploy_target:
    type: string
    description: Deployment target environment
    default: "staging"

blocks:
  # Run tests first
  - id: run_tests
    type: BashCommand
    inputs:
      command: "echo 'Running tests...'; exit 0"  # Simulated test (exit 0 = success)"
      working_dir: "${project_dir}"
      timeout: 300
      check_returncode: false  # Don't fail workflow on non-zero exit

  # Deploy only if tests pass
  - id: deploy
    type: BashCommand
    inputs:
      command: "echo 'Deploying to ${deploy_target}...'; echo 'Deployment complete'"
      working_dir: "${project_dir}"
      timeout: 600
    depends_on:
      - run_tests
    condition: "${run_tests.exit_code} == 0"  # Only run if tests passed

  # Notify failure only if tests fail
  - id: notify_failure
    type: BashCommand
    inputs:
      command: "echo 'ALERT: Tests failed with exit code ${run_tests.exit_code}'"
      timeout: 60
    depends_on:
      - run_tests
    condition: "${run_tests.exit_code} != 0"  # Only run if tests failed

  # Final notification (always runs, convergence point)
  - id: final_notification
    type: BashCommand
    inputs:
      command: "echo 'Pipeline completed. Test exit code: ${run_tests.exit_code}'"
      timeout: 60
    depends_on:
      - deploy
      - notify_failure

outputs:
  test_exit_code: "${run_tests.exit_code}"
  test_success: "${run_tests.success}"
  deployment_attempted: "${deploy.success}"
  final_message: "${final_notification.stdout}"
