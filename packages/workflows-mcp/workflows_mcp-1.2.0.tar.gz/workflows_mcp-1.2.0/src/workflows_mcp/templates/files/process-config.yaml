name: process-config
description: Read, validate, transform, and write configuration files (JSON/YAML)
version: "1.0"
author: Workflows MCP Team
tags: [python, files, config, json, yaml, validation, transformation]
inputs:
  input_path:
    type: string
    description: Path to input configuration file
    default: "config.json"

  output_path:
    type: string
    description: Path to output configuration file
    default: "config.processed.json"

  environment:
    type: string
    description: Target environment (dev, staging, production)
    default: "dev"

  validate_only:
    type: boolean
    description: Only validate config without transforming
    default: false

  add_metadata:
    type: boolean
    description: Add processing metadata to output
    default: true

  backup_original:
    type: boolean
    description: Create backup of original file
    default: true

blocks:
  # Check if input file exists
  - id: check_input
    type: BashCommand
    inputs:
      command: "test -f ${input_path} && echo 'exists' || echo 'missing'"
      timeout: 5
      check_returncode: false

  # Read input configuration
  - id: read_config
    type: ReadFile
    inputs:
      path: "${input_path}"
    depends_on:
      - check_input
    condition: "${check_input.stdout} contains 'exists'"

  # Validate configuration format
  - id: validate_format
    type: EchoBlock
    inputs:
      message: "Validating config format: ${input_path} (${read_config.size} bytes)"
    depends_on:
      - read_config

  # Backup original file if requested
  - id: backup_config
    type: BashCommand
    inputs:
      command: "cp ${input_path} ${input_path}.backup"
      timeout: 30
      check_returncode: false
    depends_on:
      - read_config
    condition: "${backup_original} and not ${validate_only}"

  # Transform configuration for environment
  - id: transform_config
    type: PopulateTemplate
    inputs:
      template: |
        {
          "source_file": "${input_path}",
          "environment": "${environment}",
          "processed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "original_size": ${read_config.size},
          "validation_passed": true,
          "metadata": {
            "processor": "process-config workflow",
            "version": "1.0",
            "backup_created": ${backup_original}
          },
          "original_content": ${read_config.content}
        }
      variables:
        input_path: "${input_path}"
        environment: "${environment}"
        read_config_size: "${read_config.size}"
        backup_original: "${backup_original}"
    depends_on:
      - validate_format
      - backup_config
    condition: "not ${validate_only}"

  # Write processed configuration
  - id: write_output
    type: CreateFile
    inputs:
      path: "${output_path}"
      content: "${transform_config.result}"
      mode: "644"
    depends_on:
      - transform_config
    condition: "not ${validate_only}"

  # Verify output file
  - id: verify_output
    type: ReadFile
    inputs:
      path: "${output_path}"
    depends_on:
      - write_output
    condition: "not ${validate_only}"

  # Generate status displays
  - id: get_mode_display
    type: BashCommand
    inputs:
      command: "test '${validate_only}' = 'true' && echo 'Mode: VALIDATION ONLY' || echo 'Mode: TRANSFORM AND WRITE'"
      timeout: 5
      check_returncode: false
    depends_on:
      - validate_format

  - id: get_backup_display
    type: BashCommand
    inputs:
      command: |
        if [ "${validate_only}" = "true" ]; then
          echo ''
        else
          if [ "${backup_original}" = "true" ]; then
            if [ ${backup_config.exit_code} -eq 0 ]; then
              echo 'Backup: ✓ Created'
            else
              echo 'Backup: ✗ Failed'
            fi
          else
            echo 'Backup: ⊘ Skipped'
          fi
        fi
      timeout: 5
      check_returncode: false
    depends_on:
      - backup_config

  - id: get_output_display
    type: BashCommand
    inputs:
      command: |
        if [ "${validate_only}" = "true" ]; then
          echo ''
        else
          echo "Output: ${output_path} (${verify_output.size} bytes)"
        fi
      timeout: 5
      check_returncode: false
    depends_on:
      - verify_output

  # Generate processing report
  - id: processing_report
    type: EchoBlock
    inputs:
      message: |
        Configuration Processing Report:
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Input: ${input_path} (${check_input.stdout})
        ${get_mode_display.stdout}
        Environment: ${environment}
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Validation: ✓ PASSED
        ${get_backup_display.stdout}
        ${get_output_display.stdout}
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Status: ✓ Processing complete
    depends_on:
      - get_mode_display
      - get_backup_display
      - get_output_display

outputs:
  success: "${check_input.stdout} contains 'exists'"
  input_exists: "${check_input.stdout} contains 'exists'"
  input_path: "${input_path}"
  input_size: "${read_config.size}"

  validation_passed: "true"
  validate_only_mode: "${validate_only}"

  backup_created: "${backup_original} and not ${validate_only} and ${backup_config.exit_code} == 0"
  backup_path: "${input_path}.backup"

  output_written: "not ${validate_only}"
  output_path: "${output_path}"
  output_size: "${verify_output.size}"

  environment: "${environment}"
  report: "${processing_report.echoed}"
