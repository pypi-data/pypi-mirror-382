# coding: utf-8

"""
    Street Manager Street Lookup API

    See API specification Resource Guide > Street Lookup API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StreetSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street_descriptor': 'str',
        'area': 'str',
        'town': 'str',
        'usrn': 'float',
        'administrative_area': 'str',
        'street_centre_point': 'GeoJSONCentrePoint'
    }

    attribute_map = {
        'street_descriptor': 'street_descriptor',
        'area': 'area',
        'town': 'town',
        'usrn': 'usrn',
        'administrative_area': 'administrative_area',
        'street_centre_point': 'street_centre_point'
    }

    def __init__(self, street_descriptor=None, area=None, town=None, usrn=None, administrative_area=None, street_centre_point=None):  # noqa: E501
        """StreetSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._street_descriptor = None
        self._area = None
        self._town = None
        self._usrn = None
        self._administrative_area = None
        self._street_centre_point = None
        self.discriminator = None
        self.street_descriptor = street_descriptor
        self.area = area
        self.town = town
        self.usrn = usrn
        self.administrative_area = administrative_area
        self.street_centre_point = street_centre_point

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this StreetSummaryResponse.  # noqa: E501


        :return: The street_descriptor of this StreetSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this StreetSummaryResponse.


        :param street_descriptor: The street_descriptor of this StreetSummaryResponse.  # noqa: E501
        :type: str
        """
        if street_descriptor is None:
            raise ValueError("Invalid value for `street_descriptor`, must not be `None`")  # noqa: E501

        self._street_descriptor = street_descriptor

    @property
    def area(self):
        """Gets the area of this StreetSummaryResponse.  # noqa: E501


        :return: The area of this StreetSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this StreetSummaryResponse.


        :param area: The area of this StreetSummaryResponse.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def town(self):
        """Gets the town of this StreetSummaryResponse.  # noqa: E501


        :return: The town of this StreetSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this StreetSummaryResponse.


        :param town: The town of this StreetSummaryResponse.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def usrn(self):
        """Gets the usrn of this StreetSummaryResponse.  # noqa: E501


        :return: The usrn of this StreetSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this StreetSummaryResponse.


        :param usrn: The usrn of this StreetSummaryResponse.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def administrative_area(self):
        """Gets the administrative_area of this StreetSummaryResponse.  # noqa: E501


        :return: The administrative_area of this StreetSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._administrative_area

    @administrative_area.setter
    def administrative_area(self, administrative_area):
        """Sets the administrative_area of this StreetSummaryResponse.


        :param administrative_area: The administrative_area of this StreetSummaryResponse.  # noqa: E501
        :type: str
        """
        if administrative_area is None:
            raise ValueError("Invalid value for `administrative_area`, must not be `None`")  # noqa: E501

        self._administrative_area = administrative_area

    @property
    def street_centre_point(self):
        """Gets the street_centre_point of this StreetSummaryResponse.  # noqa: E501


        :return: The street_centre_point of this StreetSummaryResponse.  # noqa: E501
        :rtype: GeoJSONCentrePoint
        """
        return self._street_centre_point

    @street_centre_point.setter
    def street_centre_point(self, street_centre_point):
        """Sets the street_centre_point of this StreetSummaryResponse.


        :param street_centre_point: The street_centre_point of this StreetSummaryResponse.  # noqa: E501
        :type: GeoJSONCentrePoint
        """
        if street_centre_point is None:
            raise ValueError("Invalid value for `street_centre_point`, must not be `None`")  # noqa: E501

        self._street_centre_point = street_centre_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreetSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreetSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
