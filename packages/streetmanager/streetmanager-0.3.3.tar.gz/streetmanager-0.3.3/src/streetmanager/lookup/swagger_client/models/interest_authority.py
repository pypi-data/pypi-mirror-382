# coding: utf-8

"""
    Street Manager Street Lookup API

    See API specification Resource Guide > Street Lookup API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InterestAuthority(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'location_description': 'str',
        'swa_code': 'str'
    }

    attribute_map = {
        'name': 'name',
        'location_description': 'location_description',
        'swa_code': 'swa_code'
    }

    def __init__(self, name=None, location_description=None, swa_code=None):  # noqa: E501
        """InterestAuthority - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._location_description = None
        self._swa_code = None
        self.discriminator = None
        self.name = name
        self.location_description = location_description
        self.swa_code = swa_code

    @property
    def name(self):
        """Gets the name of this InterestAuthority.  # noqa: E501


        :return: The name of this InterestAuthority.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterestAuthority.


        :param name: The name of this InterestAuthority.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location_description(self):
        """Gets the location_description of this InterestAuthority.  # noqa: E501


        :return: The location_description of this InterestAuthority.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this InterestAuthority.


        :param location_description: The location_description of this InterestAuthority.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def swa_code(self):
        """Gets the swa_code of this InterestAuthority.  # noqa: E501


        :return: The swa_code of this InterestAuthority.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this InterestAuthority.


        :param swa_code: The swa_code of this InterestAuthority.  # noqa: E501
        :type: str
        """
        if swa_code is None:
            raise ValueError("Invalid value for `swa_code`, must not be `None`")  # noqa: E501

        self._swa_code = swa_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterestAuthority, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterestAuthority):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
