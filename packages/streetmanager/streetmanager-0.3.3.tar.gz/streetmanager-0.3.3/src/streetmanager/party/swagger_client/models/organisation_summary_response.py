# coding: utf-8

"""
    Street Manager Party API

    See API specification Resource Guide > Party API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganisationSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'organisation_reference': 'str',
        'organisation_status': 'AllOfOrganisationSummaryResponseOrganisationStatus',
        'organisation_status_string': 'str'
    }

    attribute_map = {
        'name': 'name',
        'organisation_reference': 'organisation_reference',
        'organisation_status': 'organisation_status',
        'organisation_status_string': 'organisation_status_string'
    }

    def __init__(self, name=None, organisation_reference=None, organisation_status=None, organisation_status_string=None):  # noqa: E501
        """OrganisationSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._organisation_reference = None
        self._organisation_status = None
        self._organisation_status_string = None
        self.discriminator = None
        self.name = name
        self.organisation_reference = organisation_reference
        if organisation_status is not None:
            self.organisation_status = organisation_status
        if organisation_status_string is not None:
            self.organisation_status_string = organisation_status_string

    @property
    def name(self):
        """Gets the name of this OrganisationSummaryResponse.  # noqa: E501


        :return: The name of this OrganisationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganisationSummaryResponse.


        :param name: The name of this OrganisationSummaryResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organisation_reference(self):
        """Gets the organisation_reference of this OrganisationSummaryResponse.  # noqa: E501


        :return: The organisation_reference of this OrganisationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_reference

    @organisation_reference.setter
    def organisation_reference(self, organisation_reference):
        """Sets the organisation_reference of this OrganisationSummaryResponse.


        :param organisation_reference: The organisation_reference of this OrganisationSummaryResponse.  # noqa: E501
        :type: str
        """
        if organisation_reference is None:
            raise ValueError("Invalid value for `organisation_reference`, must not be `None`")  # noqa: E501

        self._organisation_reference = organisation_reference

    @property
    def organisation_status(self):
        """Gets the organisation_status of this OrganisationSummaryResponse.  # noqa: E501


        :return: The organisation_status of this OrganisationSummaryResponse.  # noqa: E501
        :rtype: AllOfOrganisationSummaryResponseOrganisationStatus
        """
        return self._organisation_status

    @organisation_status.setter
    def organisation_status(self, organisation_status):
        """Sets the organisation_status of this OrganisationSummaryResponse.


        :param organisation_status: The organisation_status of this OrganisationSummaryResponse.  # noqa: E501
        :type: AllOfOrganisationSummaryResponseOrganisationStatus
        """

        self._organisation_status = organisation_status

    @property
    def organisation_status_string(self):
        """Gets the organisation_status_string of this OrganisationSummaryResponse.  # noqa: E501


        :return: The organisation_status_string of this OrganisationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_status_string

    @organisation_status_string.setter
    def organisation_status_string(self, organisation_status_string):
        """Sets the organisation_status_string of this OrganisationSummaryResponse.


        :param organisation_status_string: The organisation_status_string of this OrganisationSummaryResponse.  # noqa: E501
        :type: str
        """

        self._organisation_status_string = organisation_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganisationSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
