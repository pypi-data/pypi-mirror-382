# coding: utf-8

"""
    Street Manager Party API

    See API specification Resource Guide > Party API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganisationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'organisation_reference': 'str',
        'organisation_status': 'AllOfOrganisationResponseOrganisationStatus',
        'organisation_status_string': 'str',
        'address_line_one': 'str',
        'address_line_two': 'str',
        'email': 'str',
        'locality': 'str',
        'phone_number': 'str',
        'postcode': 'str',
        'town': 'str',
        'prefix': 'str',
        'organisation_type': 'OrganisationTypeResponse',
        'organisation_type_string': 'str',
        'contractors': 'list[OrganisationSummaryResponse]',
        'is_hs2_applicable': 'bool',
        'primary_contact_name': 'str',
        'primary_contact_email': 'str',
        'primary_contact_number': 'str',
        'primary_admin_name': 'str',
        'primary_admin_email': 'str',
        'primary_admin_number': 'str',
        'industry_sector': 'AllOfOrganisationResponseIndustrySector',
        'industry_sector_string': 'str'
    }

    attribute_map = {
        'name': 'name',
        'organisation_reference': 'organisation_reference',
        'organisation_status': 'organisation_status',
        'organisation_status_string': 'organisation_status_string',
        'address_line_one': 'address_line_one',
        'address_line_two': 'address_line_two',
        'email': 'email',
        'locality': 'locality',
        'phone_number': 'phone_number',
        'postcode': 'postcode',
        'town': 'town',
        'prefix': 'prefix',
        'organisation_type': 'organisation_type',
        'organisation_type_string': 'organisation_type_string',
        'contractors': 'contractors',
        'is_hs2_applicable': 'is_hs2_applicable',
        'primary_contact_name': 'primary_contact_name',
        'primary_contact_email': 'primary_contact_email',
        'primary_contact_number': 'primary_contact_number',
        'primary_admin_name': 'primary_admin_name',
        'primary_admin_email': 'primary_admin_email',
        'primary_admin_number': 'primary_admin_number',
        'industry_sector': 'industry_sector',
        'industry_sector_string': 'industry_sector_string'
    }

    def __init__(self, name=None, organisation_reference=None, organisation_status=None, organisation_status_string=None, address_line_one=None, address_line_two=None, email=None, locality=None, phone_number=None, postcode=None, town=None, prefix=None, organisation_type=None, organisation_type_string=None, contractors=None, is_hs2_applicable=None, primary_contact_name=None, primary_contact_email=None, primary_contact_number=None, primary_admin_name=None, primary_admin_email=None, primary_admin_number=None, industry_sector=None, industry_sector_string=None):  # noqa: E501
        """OrganisationResponse - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._organisation_reference = None
        self._organisation_status = None
        self._organisation_status_string = None
        self._address_line_one = None
        self._address_line_two = None
        self._email = None
        self._locality = None
        self._phone_number = None
        self._postcode = None
        self._town = None
        self._prefix = None
        self._organisation_type = None
        self._organisation_type_string = None
        self._contractors = None
        self._is_hs2_applicable = None
        self._primary_contact_name = None
        self._primary_contact_email = None
        self._primary_contact_number = None
        self._primary_admin_name = None
        self._primary_admin_email = None
        self._primary_admin_number = None
        self._industry_sector = None
        self._industry_sector_string = None
        self.discriminator = None
        self.name = name
        self.organisation_reference = organisation_reference
        if organisation_status is not None:
            self.organisation_status = organisation_status
        if organisation_status_string is not None:
            self.organisation_status_string = organisation_status_string
        self.address_line_one = address_line_one
        if address_line_two is not None:
            self.address_line_two = address_line_two
        if email is not None:
            self.email = email
        if locality is not None:
            self.locality = locality
        self.phone_number = phone_number
        self.postcode = postcode
        if town is not None:
            self.town = town
        self.prefix = prefix
        self.organisation_type = organisation_type
        self.organisation_type_string = organisation_type_string
        if contractors is not None:
            self.contractors = contractors
        self.is_hs2_applicable = is_hs2_applicable
        if primary_contact_name is not None:
            self.primary_contact_name = primary_contact_name
        if primary_contact_email is not None:
            self.primary_contact_email = primary_contact_email
        if primary_contact_number is not None:
            self.primary_contact_number = primary_contact_number
        if primary_admin_name is not None:
            self.primary_admin_name = primary_admin_name
        if primary_admin_email is not None:
            self.primary_admin_email = primary_admin_email
        if primary_admin_number is not None:
            self.primary_admin_number = primary_admin_number
        if industry_sector is not None:
            self.industry_sector = industry_sector
        if industry_sector_string is not None:
            self.industry_sector_string = industry_sector_string

    @property
    def name(self):
        """Gets the name of this OrganisationResponse.  # noqa: E501


        :return: The name of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganisationResponse.


        :param name: The name of this OrganisationResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organisation_reference(self):
        """Gets the organisation_reference of this OrganisationResponse.  # noqa: E501


        :return: The organisation_reference of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_reference

    @organisation_reference.setter
    def organisation_reference(self, organisation_reference):
        """Sets the organisation_reference of this OrganisationResponse.


        :param organisation_reference: The organisation_reference of this OrganisationResponse.  # noqa: E501
        :type: str
        """
        if organisation_reference is None:
            raise ValueError("Invalid value for `organisation_reference`, must not be `None`")  # noqa: E501

        self._organisation_reference = organisation_reference

    @property
    def organisation_status(self):
        """Gets the organisation_status of this OrganisationResponse.  # noqa: E501


        :return: The organisation_status of this OrganisationResponse.  # noqa: E501
        :rtype: AllOfOrganisationResponseOrganisationStatus
        """
        return self._organisation_status

    @organisation_status.setter
    def organisation_status(self, organisation_status):
        """Sets the organisation_status of this OrganisationResponse.


        :param organisation_status: The organisation_status of this OrganisationResponse.  # noqa: E501
        :type: AllOfOrganisationResponseOrganisationStatus
        """

        self._organisation_status = organisation_status

    @property
    def organisation_status_string(self):
        """Gets the organisation_status_string of this OrganisationResponse.  # noqa: E501


        :return: The organisation_status_string of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_status_string

    @organisation_status_string.setter
    def organisation_status_string(self, organisation_status_string):
        """Sets the organisation_status_string of this OrganisationResponse.


        :param organisation_status_string: The organisation_status_string of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._organisation_status_string = organisation_status_string

    @property
    def address_line_one(self):
        """Gets the address_line_one of this OrganisationResponse.  # noqa: E501


        :return: The address_line_one of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._address_line_one

    @address_line_one.setter
    def address_line_one(self, address_line_one):
        """Sets the address_line_one of this OrganisationResponse.


        :param address_line_one: The address_line_one of this OrganisationResponse.  # noqa: E501
        :type: str
        """
        if address_line_one is None:
            raise ValueError("Invalid value for `address_line_one`, must not be `None`")  # noqa: E501

        self._address_line_one = address_line_one

    @property
    def address_line_two(self):
        """Gets the address_line_two of this OrganisationResponse.  # noqa: E501


        :return: The address_line_two of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._address_line_two

    @address_line_two.setter
    def address_line_two(self, address_line_two):
        """Sets the address_line_two of this OrganisationResponse.


        :param address_line_two: The address_line_two of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._address_line_two = address_line_two

    @property
    def email(self):
        """Gets the email of this OrganisationResponse.  # noqa: E501


        :return: The email of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganisationResponse.


        :param email: The email of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def locality(self):
        """Gets the locality of this OrganisationResponse.  # noqa: E501


        :return: The locality of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this OrganisationResponse.


        :param locality: The locality of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def phone_number(self):
        """Gets the phone_number of this OrganisationResponse.  # noqa: E501


        :return: The phone_number of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this OrganisationResponse.


        :param phone_number: The phone_number of this OrganisationResponse.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def postcode(self):
        """Gets the postcode of this OrganisationResponse.  # noqa: E501


        :return: The postcode of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this OrganisationResponse.


        :param postcode: The postcode of this OrganisationResponse.  # noqa: E501
        :type: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")  # noqa: E501

        self._postcode = postcode

    @property
    def town(self):
        """Gets the town of this OrganisationResponse.  # noqa: E501


        :return: The town of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this OrganisationResponse.


        :param town: The town of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def prefix(self):
        """Gets the prefix of this OrganisationResponse.  # noqa: E501


        :return: The prefix of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this OrganisationResponse.


        :param prefix: The prefix of this OrganisationResponse.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def organisation_type(self):
        """Gets the organisation_type of this OrganisationResponse.  # noqa: E501


        :return: The organisation_type of this OrganisationResponse.  # noqa: E501
        :rtype: OrganisationTypeResponse
        """
        return self._organisation_type

    @organisation_type.setter
    def organisation_type(self, organisation_type):
        """Sets the organisation_type of this OrganisationResponse.


        :param organisation_type: The organisation_type of this OrganisationResponse.  # noqa: E501
        :type: OrganisationTypeResponse
        """
        if organisation_type is None:
            raise ValueError("Invalid value for `organisation_type`, must not be `None`")  # noqa: E501

        self._organisation_type = organisation_type

    @property
    def organisation_type_string(self):
        """Gets the organisation_type_string of this OrganisationResponse.  # noqa: E501


        :return: The organisation_type_string of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_type_string

    @organisation_type_string.setter
    def organisation_type_string(self, organisation_type_string):
        """Sets the organisation_type_string of this OrganisationResponse.


        :param organisation_type_string: The organisation_type_string of this OrganisationResponse.  # noqa: E501
        :type: str
        """
        if organisation_type_string is None:
            raise ValueError("Invalid value for `organisation_type_string`, must not be `None`")  # noqa: E501

        self._organisation_type_string = organisation_type_string

    @property
    def contractors(self):
        """Gets the contractors of this OrganisationResponse.  # noqa: E501


        :return: The contractors of this OrganisationResponse.  # noqa: E501
        :rtype: list[OrganisationSummaryResponse]
        """
        return self._contractors

    @contractors.setter
    def contractors(self, contractors):
        """Sets the contractors of this OrganisationResponse.


        :param contractors: The contractors of this OrganisationResponse.  # noqa: E501
        :type: list[OrganisationSummaryResponse]
        """

        self._contractors = contractors

    @property
    def is_hs2_applicable(self):
        """Gets the is_hs2_applicable of this OrganisationResponse.  # noqa: E501


        :return: The is_hs2_applicable of this OrganisationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_hs2_applicable

    @is_hs2_applicable.setter
    def is_hs2_applicable(self, is_hs2_applicable):
        """Sets the is_hs2_applicable of this OrganisationResponse.


        :param is_hs2_applicable: The is_hs2_applicable of this OrganisationResponse.  # noqa: E501
        :type: bool
        """
        if is_hs2_applicable is None:
            raise ValueError("Invalid value for `is_hs2_applicable`, must not be `None`")  # noqa: E501

        self._is_hs2_applicable = is_hs2_applicable

    @property
    def primary_contact_name(self):
        """Gets the primary_contact_name of this OrganisationResponse.  # noqa: E501


        :return: The primary_contact_name of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact_name

    @primary_contact_name.setter
    def primary_contact_name(self, primary_contact_name):
        """Sets the primary_contact_name of this OrganisationResponse.


        :param primary_contact_name: The primary_contact_name of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._primary_contact_name = primary_contact_name

    @property
    def primary_contact_email(self):
        """Gets the primary_contact_email of this OrganisationResponse.  # noqa: E501


        :return: The primary_contact_email of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact_email

    @primary_contact_email.setter
    def primary_contact_email(self, primary_contact_email):
        """Sets the primary_contact_email of this OrganisationResponse.


        :param primary_contact_email: The primary_contact_email of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._primary_contact_email = primary_contact_email

    @property
    def primary_contact_number(self):
        """Gets the primary_contact_number of this OrganisationResponse.  # noqa: E501


        :return: The primary_contact_number of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact_number

    @primary_contact_number.setter
    def primary_contact_number(self, primary_contact_number):
        """Sets the primary_contact_number of this OrganisationResponse.


        :param primary_contact_number: The primary_contact_number of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._primary_contact_number = primary_contact_number

    @property
    def primary_admin_name(self):
        """Gets the primary_admin_name of this OrganisationResponse.  # noqa: E501


        :return: The primary_admin_name of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_admin_name

    @primary_admin_name.setter
    def primary_admin_name(self, primary_admin_name):
        """Sets the primary_admin_name of this OrganisationResponse.


        :param primary_admin_name: The primary_admin_name of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._primary_admin_name = primary_admin_name

    @property
    def primary_admin_email(self):
        """Gets the primary_admin_email of this OrganisationResponse.  # noqa: E501


        :return: The primary_admin_email of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_admin_email

    @primary_admin_email.setter
    def primary_admin_email(self, primary_admin_email):
        """Sets the primary_admin_email of this OrganisationResponse.


        :param primary_admin_email: The primary_admin_email of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._primary_admin_email = primary_admin_email

    @property
    def primary_admin_number(self):
        """Gets the primary_admin_number of this OrganisationResponse.  # noqa: E501


        :return: The primary_admin_number of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_admin_number

    @primary_admin_number.setter
    def primary_admin_number(self, primary_admin_number):
        """Sets the primary_admin_number of this OrganisationResponse.


        :param primary_admin_number: The primary_admin_number of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._primary_admin_number = primary_admin_number

    @property
    def industry_sector(self):
        """Gets the industry_sector of this OrganisationResponse.  # noqa: E501


        :return: The industry_sector of this OrganisationResponse.  # noqa: E501
        :rtype: AllOfOrganisationResponseIndustrySector
        """
        return self._industry_sector

    @industry_sector.setter
    def industry_sector(self, industry_sector):
        """Sets the industry_sector of this OrganisationResponse.


        :param industry_sector: The industry_sector of this OrganisationResponse.  # noqa: E501
        :type: AllOfOrganisationResponseIndustrySector
        """

        self._industry_sector = industry_sector

    @property
    def industry_sector_string(self):
        """Gets the industry_sector_string of this OrganisationResponse.  # noqa: E501


        :return: The industry_sector_string of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._industry_sector_string

    @industry_sector_string.setter
    def industry_sector_string(self, industry_sector_string):
        """Sets the industry_sector_string of this OrganisationResponse.


        :param industry_sector_string: The industry_sector_string of this OrganisationResponse.  # noqa: E501
        :type: str
        """

        self._industry_sector_string = industry_sector_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganisationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
