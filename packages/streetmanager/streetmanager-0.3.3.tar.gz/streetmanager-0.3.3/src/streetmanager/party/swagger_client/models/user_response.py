# coding: utf-8

"""
    Street Manager Party API

    See API specification Resource Guide > Party API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'organisation_name': 'str',
        'roles': 'list[RoleResponse]',
        'roles_string': 'list[str]',
        'organisation_reference': 'str',
        'contracts': 'list[OrganisationSummaryResponse]',
        'workstreams': 'list[UserWorkstreamAccessDetails]',
        'organisation_status': 'AllOfUserResponseOrganisationStatus',
        'organisation_status_string': 'str',
        'role_permissions': 'list[RolePermissionsResponse]'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'organisation_name': 'organisation_name',
        'roles': 'roles',
        'roles_string': 'roles_string',
        'organisation_reference': 'organisation_reference',
        'contracts': 'contracts',
        'workstreams': 'workstreams',
        'organisation_status': 'organisation_status',
        'organisation_status_string': 'organisation_status_string',
        'role_permissions': 'role_permissions'
    }

    def __init__(self, first_name=None, last_name=None, organisation_name=None, roles=None, roles_string=None, organisation_reference=None, contracts=None, workstreams=None, organisation_status=None, organisation_status_string=None, role_permissions=None):  # noqa: E501
        """UserResponse - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._organisation_name = None
        self._roles = None
        self._roles_string = None
        self._organisation_reference = None
        self._contracts = None
        self._workstreams = None
        self._organisation_status = None
        self._organisation_status_string = None
        self._role_permissions = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.organisation_name = organisation_name
        if roles is not None:
            self.roles = roles
        if roles_string is not None:
            self.roles_string = roles_string
        self.organisation_reference = organisation_reference
        if contracts is not None:
            self.contracts = contracts
        if workstreams is not None:
            self.workstreams = workstreams
        if organisation_status is not None:
            self.organisation_status = organisation_status
        if organisation_status_string is not None:
            self.organisation_status_string = organisation_status_string
        if role_permissions is not None:
            self.role_permissions = role_permissions

    @property
    def first_name(self):
        """Gets the first_name of this UserResponse.  # noqa: E501


        :return: The first_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserResponse.


        :param first_name: The first_name of this UserResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserResponse.  # noqa: E501


        :return: The last_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserResponse.


        :param last_name: The last_name of this UserResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def organisation_name(self):
        """Gets the organisation_name of this UserResponse.  # noqa: E501


        :return: The organisation_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this UserResponse.


        :param organisation_name: The organisation_name of this UserResponse.  # noqa: E501
        :type: str
        """
        if organisation_name is None:
            raise ValueError("Invalid value for `organisation_name`, must not be `None`")  # noqa: E501

        self._organisation_name = organisation_name

    @property
    def roles(self):
        """Gets the roles of this UserResponse.  # noqa: E501


        :return: The roles of this UserResponse.  # noqa: E501
        :rtype: list[RoleResponse]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserResponse.


        :param roles: The roles of this UserResponse.  # noqa: E501
        :type: list[RoleResponse]
        """

        self._roles = roles

    @property
    def roles_string(self):
        """Gets the roles_string of this UserResponse.  # noqa: E501


        :return: The roles_string of this UserResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles_string

    @roles_string.setter
    def roles_string(self, roles_string):
        """Sets the roles_string of this UserResponse.


        :param roles_string: The roles_string of this UserResponse.  # noqa: E501
        :type: list[str]
        """

        self._roles_string = roles_string

    @property
    def organisation_reference(self):
        """Gets the organisation_reference of this UserResponse.  # noqa: E501


        :return: The organisation_reference of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_reference

    @organisation_reference.setter
    def organisation_reference(self, organisation_reference):
        """Sets the organisation_reference of this UserResponse.


        :param organisation_reference: The organisation_reference of this UserResponse.  # noqa: E501
        :type: str
        """
        if organisation_reference is None:
            raise ValueError("Invalid value for `organisation_reference`, must not be `None`")  # noqa: E501

        self._organisation_reference = organisation_reference

    @property
    def contracts(self):
        """Gets the contracts of this UserResponse.  # noqa: E501


        :return: The contracts of this UserResponse.  # noqa: E501
        :rtype: list[OrganisationSummaryResponse]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this UserResponse.


        :param contracts: The contracts of this UserResponse.  # noqa: E501
        :type: list[OrganisationSummaryResponse]
        """

        self._contracts = contracts

    @property
    def workstreams(self):
        """Gets the workstreams of this UserResponse.  # noqa: E501


        :return: The workstreams of this UserResponse.  # noqa: E501
        :rtype: list[UserWorkstreamAccessDetails]
        """
        return self._workstreams

    @workstreams.setter
    def workstreams(self, workstreams):
        """Sets the workstreams of this UserResponse.


        :param workstreams: The workstreams of this UserResponse.  # noqa: E501
        :type: list[UserWorkstreamAccessDetails]
        """

        self._workstreams = workstreams

    @property
    def organisation_status(self):
        """Gets the organisation_status of this UserResponse.  # noqa: E501


        :return: The organisation_status of this UserResponse.  # noqa: E501
        :rtype: AllOfUserResponseOrganisationStatus
        """
        return self._organisation_status

    @organisation_status.setter
    def organisation_status(self, organisation_status):
        """Sets the organisation_status of this UserResponse.


        :param organisation_status: The organisation_status of this UserResponse.  # noqa: E501
        :type: AllOfUserResponseOrganisationStatus
        """

        self._organisation_status = organisation_status

    @property
    def organisation_status_string(self):
        """Gets the organisation_status_string of this UserResponse.  # noqa: E501


        :return: The organisation_status_string of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_status_string

    @organisation_status_string.setter
    def organisation_status_string(self, organisation_status_string):
        """Sets the organisation_status_string of this UserResponse.


        :param organisation_status_string: The organisation_status_string of this UserResponse.  # noqa: E501
        :type: str
        """

        self._organisation_status_string = organisation_status_string

    @property
    def role_permissions(self):
        """Gets the role_permissions of this UserResponse.  # noqa: E501


        :return: The role_permissions of this UserResponse.  # noqa: E501
        :rtype: list[RolePermissionsResponse]
        """
        return self._role_permissions

    @role_permissions.setter
    def role_permissions(self, role_permissions):
        """Sets the role_permissions of this UserResponse.


        :param role_permissions: The role_permissions of this UserResponse.  # noqa: E501
        :type: list[RolePermissionsResponse]
        """

        self._role_permissions = role_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
