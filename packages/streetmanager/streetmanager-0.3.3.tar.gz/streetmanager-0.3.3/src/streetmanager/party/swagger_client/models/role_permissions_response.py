# coding: utf-8

"""
    Street Manager Party API

    See API specification Resource Guide > Party API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RolePermissionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'RoleResponse',
        'role_string': 'str',
        'permissions': 'list[PermissionResponse]',
        'permissions_string': 'list[str]'
    }

    attribute_map = {
        'role': 'role',
        'role_string': 'role_string',
        'permissions': 'permissions',
        'permissions_string': 'permissions_string'
    }

    def __init__(self, role=None, role_string=None, permissions=None, permissions_string=None):  # noqa: E501
        """RolePermissionsResponse - a model defined in Swagger"""  # noqa: E501
        self._role = None
        self._role_string = None
        self._permissions = None
        self._permissions_string = None
        self.discriminator = None
        self.role = role
        self.role_string = role_string
        self.permissions = permissions
        self.permissions_string = permissions_string

    @property
    def role(self):
        """Gets the role of this RolePermissionsResponse.  # noqa: E501


        :return: The role of this RolePermissionsResponse.  # noqa: E501
        :rtype: RoleResponse
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RolePermissionsResponse.


        :param role: The role of this RolePermissionsResponse.  # noqa: E501
        :type: RoleResponse
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def role_string(self):
        """Gets the role_string of this RolePermissionsResponse.  # noqa: E501


        :return: The role_string of this RolePermissionsResponse.  # noqa: E501
        :rtype: str
        """
        return self._role_string

    @role_string.setter
    def role_string(self, role_string):
        """Sets the role_string of this RolePermissionsResponse.


        :param role_string: The role_string of this RolePermissionsResponse.  # noqa: E501
        :type: str
        """
        if role_string is None:
            raise ValueError("Invalid value for `role_string`, must not be `None`")  # noqa: E501

        self._role_string = role_string

    @property
    def permissions(self):
        """Gets the permissions of this RolePermissionsResponse.  # noqa: E501


        :return: The permissions of this RolePermissionsResponse.  # noqa: E501
        :rtype: list[PermissionResponse]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RolePermissionsResponse.


        :param permissions: The permissions of this RolePermissionsResponse.  # noqa: E501
        :type: list[PermissionResponse]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def permissions_string(self):
        """Gets the permissions_string of this RolePermissionsResponse.  # noqa: E501


        :return: The permissions_string of this RolePermissionsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions_string

    @permissions_string.setter
    def permissions_string(self, permissions_string):
        """Sets the permissions_string of this RolePermissionsResponse.


        :param permissions_string: The permissions_string of this RolePermissionsResponse.  # noqa: E501
        :type: list[str]
        """
        if permissions_string is None:
            raise ValueError("Invalid value for `permissions_string`, must not be `None`")  # noqa: E501

        self._permissions_string = permissions_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RolePermissionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RolePermissionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
