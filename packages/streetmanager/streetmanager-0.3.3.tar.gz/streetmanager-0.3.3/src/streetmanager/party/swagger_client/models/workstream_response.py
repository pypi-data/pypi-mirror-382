# coding: utf-8

"""
    Street Manager Party API

    See API specification Resource Guide > Party API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkstreamResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'WorkstreamStatusResponse',
        'status_string': 'str',
        'prefix': 'str',
        'name': 'str',
        'description': 'str',
        'contact_name': 'str',
        'contact_number': 'str',
        'contact_email': 'str',
        'emergency_contact_name': 'str',
        'emergency_contact_number': 'str',
        'organisation_reference': 'str'
    }

    attribute_map = {
        'status': 'status',
        'status_string': 'status_string',
        'prefix': 'prefix',
        'name': 'name',
        'description': 'description',
        'contact_name': 'contact_name',
        'contact_number': 'contact_number',
        'contact_email': 'contact_email',
        'emergency_contact_name': 'emergency_contact_name',
        'emergency_contact_number': 'emergency_contact_number',
        'organisation_reference': 'organisation_reference'
    }

    def __init__(self, status=None, status_string=None, prefix=None, name=None, description=None, contact_name=None, contact_number=None, contact_email=None, emergency_contact_name=None, emergency_contact_number=None, organisation_reference=None):  # noqa: E501
        """WorkstreamResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._status_string = None
        self._prefix = None
        self._name = None
        self._description = None
        self._contact_name = None
        self._contact_number = None
        self._contact_email = None
        self._emergency_contact_name = None
        self._emergency_contact_number = None
        self._organisation_reference = None
        self.discriminator = None
        self.status = status
        self.status_string = status_string
        self.prefix = prefix
        self.name = name
        if description is not None:
            self.description = description
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_number is not None:
            self.contact_number = contact_number
        if contact_email is not None:
            self.contact_email = contact_email
        if emergency_contact_name is not None:
            self.emergency_contact_name = emergency_contact_name
        if emergency_contact_number is not None:
            self.emergency_contact_number = emergency_contact_number
        self.organisation_reference = organisation_reference

    @property
    def status(self):
        """Gets the status of this WorkstreamResponse.  # noqa: E501


        :return: The status of this WorkstreamResponse.  # noqa: E501
        :rtype: WorkstreamStatusResponse
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkstreamResponse.


        :param status: The status of this WorkstreamResponse.  # noqa: E501
        :type: WorkstreamStatusResponse
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_string(self):
        """Gets the status_string of this WorkstreamResponse.  # noqa: E501


        :return: The status_string of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_string

    @status_string.setter
    def status_string(self, status_string):
        """Sets the status_string of this WorkstreamResponse.


        :param status_string: The status_string of this WorkstreamResponse.  # noqa: E501
        :type: str
        """
        if status_string is None:
            raise ValueError("Invalid value for `status_string`, must not be `None`")  # noqa: E501

        self._status_string = status_string

    @property
    def prefix(self):
        """Gets the prefix of this WorkstreamResponse.  # noqa: E501


        :return: The prefix of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this WorkstreamResponse.


        :param prefix: The prefix of this WorkstreamResponse.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def name(self):
        """Gets the name of this WorkstreamResponse.  # noqa: E501


        :return: The name of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkstreamResponse.


        :param name: The name of this WorkstreamResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkstreamResponse.  # noqa: E501


        :return: The description of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkstreamResponse.


        :param description: The description of this WorkstreamResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def contact_name(self):
        """Gets the contact_name of this WorkstreamResponse.  # noqa: E501


        :return: The contact_name of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this WorkstreamResponse.


        :param contact_name: The contact_name of this WorkstreamResponse.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_number(self):
        """Gets the contact_number of this WorkstreamResponse.  # noqa: E501


        :return: The contact_number of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this WorkstreamResponse.


        :param contact_number: The contact_number of this WorkstreamResponse.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def contact_email(self):
        """Gets the contact_email of this WorkstreamResponse.  # noqa: E501


        :return: The contact_email of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this WorkstreamResponse.


        :param contact_email: The contact_email of this WorkstreamResponse.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def emergency_contact_name(self):
        """Gets the emergency_contact_name of this WorkstreamResponse.  # noqa: E501


        :return: The emergency_contact_name of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_name

    @emergency_contact_name.setter
    def emergency_contact_name(self, emergency_contact_name):
        """Sets the emergency_contact_name of this WorkstreamResponse.


        :param emergency_contact_name: The emergency_contact_name of this WorkstreamResponse.  # noqa: E501
        :type: str
        """

        self._emergency_contact_name = emergency_contact_name

    @property
    def emergency_contact_number(self):
        """Gets the emergency_contact_number of this WorkstreamResponse.  # noqa: E501


        :return: The emergency_contact_number of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_number

    @emergency_contact_number.setter
    def emergency_contact_number(self, emergency_contact_number):
        """Sets the emergency_contact_number of this WorkstreamResponse.


        :param emergency_contact_number: The emergency_contact_number of this WorkstreamResponse.  # noqa: E501
        :type: str
        """

        self._emergency_contact_number = emergency_contact_number

    @property
    def organisation_reference(self):
        """Gets the organisation_reference of this WorkstreamResponse.  # noqa: E501


        :return: The organisation_reference of this WorkstreamResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_reference

    @organisation_reference.setter
    def organisation_reference(self, organisation_reference):
        """Sets the organisation_reference of this WorkstreamResponse.


        :param organisation_reference: The organisation_reference of this WorkstreamResponse.  # noqa: E501
        :type: str
        """
        if organisation_reference is None:
            raise ValueError("Invalid value for `organisation_reference`, must not be `None`")  # noqa: E501

        self._organisation_reference = organisation_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkstreamResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkstreamResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
