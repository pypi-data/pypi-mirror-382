# coding: utf-8

"""
    Street Manager Party API

    See API specification Resource Guide > Party API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganisationUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line_one': 'str',
        'address_line_two': 'str',
        'locality': 'str',
        'town': 'str',
        'postcode': 'str',
        'email': 'str',
        'phone_number': 'str',
        'primary_contact_name': 'str',
        'primary_contact_email': 'str',
        'primary_contact_number': 'str',
        'primary_admin_name': 'str',
        'primary_admin_email': 'str',
        'primary_admin_number': 'str',
        'industry_sector': 'AllOfOrganisationUpdateRequestIndustrySector'
    }

    attribute_map = {
        'address_line_one': 'address_line_one',
        'address_line_two': 'address_line_two',
        'locality': 'locality',
        'town': 'town',
        'postcode': 'postcode',
        'email': 'email',
        'phone_number': 'phone_number',
        'primary_contact_name': 'primary_contact_name',
        'primary_contact_email': 'primary_contact_email',
        'primary_contact_number': 'primary_contact_number',
        'primary_admin_name': 'primary_admin_name',
        'primary_admin_email': 'primary_admin_email',
        'primary_admin_number': 'primary_admin_number',
        'industry_sector': 'industry_sector'
    }

    def __init__(self, address_line_one=None, address_line_two=None, locality=None, town=None, postcode=None, email=None, phone_number=None, primary_contact_name=None, primary_contact_email=None, primary_contact_number=None, primary_admin_name=None, primary_admin_email=None, primary_admin_number=None, industry_sector=None):  # noqa: E501
        """OrganisationUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._address_line_one = None
        self._address_line_two = None
        self._locality = None
        self._town = None
        self._postcode = None
        self._email = None
        self._phone_number = None
        self._primary_contact_name = None
        self._primary_contact_email = None
        self._primary_contact_number = None
        self._primary_admin_name = None
        self._primary_admin_email = None
        self._primary_admin_number = None
        self._industry_sector = None
        self.discriminator = None
        self.address_line_one = address_line_one
        if address_line_two is not None:
            self.address_line_two = address_line_two
        if locality is not None:
            self.locality = locality
        if town is not None:
            self.town = town
        self.postcode = postcode
        if email is not None:
            self.email = email
        self.phone_number = phone_number
        self.primary_contact_name = primary_contact_name
        self.primary_contact_email = primary_contact_email
        self.primary_contact_number = primary_contact_number
        self.primary_admin_name = primary_admin_name
        self.primary_admin_email = primary_admin_email
        self.primary_admin_number = primary_admin_number
        if industry_sector is not None:
            self.industry_sector = industry_sector

    @property
    def address_line_one(self):
        """Gets the address_line_one of this OrganisationUpdateRequest.  # noqa: E501

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :return: The address_line_one of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._address_line_one

    @address_line_one.setter
    def address_line_one(self, address_line_one):
        """Sets the address_line_one of this OrganisationUpdateRequest.

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :param address_line_one: The address_line_one of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if address_line_one is None:
            raise ValueError("Invalid value for `address_line_one`, must not be `None`")  # noqa: E501

        self._address_line_one = address_line_one

    @property
    def address_line_two(self):
        """Gets the address_line_two of this OrganisationUpdateRequest.  # noqa: E501

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :return: The address_line_two of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._address_line_two

    @address_line_two.setter
    def address_line_two(self, address_line_two):
        """Sets the address_line_two of this OrganisationUpdateRequest.

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :param address_line_two: The address_line_two of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._address_line_two = address_line_two

    @property
    def locality(self):
        """Gets the locality of this OrganisationUpdateRequest.  # noqa: E501

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :return: The locality of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this OrganisationUpdateRequest.

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :param locality: The locality of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def town(self):
        """Gets the town of this OrganisationUpdateRequest.  # noqa: E501

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :return: The town of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this OrganisationUpdateRequest.

        Max length 255 characters Alphanumeric characters only  # noqa: E501

        :param town: The town of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def postcode(self):
        """Gets the postcode of this OrganisationUpdateRequest.  # noqa: E501

        Max length 8 characters Alphanumeric characters only  # noqa: E501

        :return: The postcode of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this OrganisationUpdateRequest.

        Max length 8 characters Alphanumeric characters only  # noqa: E501

        :param postcode: The postcode of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")  # noqa: E501

        self._postcode = postcode

    @property
    def email(self):
        """Gets the email of this OrganisationUpdateRequest.  # noqa: E501

        Max length 320 characters Must be valid email  # noqa: E501

        :return: The email of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganisationUpdateRequest.

        Max length 320 characters Must be valid email  # noqa: E501

        :param email: The email of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this OrganisationUpdateRequest.  # noqa: E501

        Max length 20 characters  # noqa: E501

        :return: The phone_number of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this OrganisationUpdateRequest.

        Max length 20 characters  # noqa: E501

        :param phone_number: The phone_number of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def primary_contact_name(self):
        """Gets the primary_contact_name of this OrganisationUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The primary_contact_name of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact_name

    @primary_contact_name.setter
    def primary_contact_name(self, primary_contact_name):
        """Sets the primary_contact_name of this OrganisationUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param primary_contact_name: The primary_contact_name of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if primary_contact_name is None:
            raise ValueError("Invalid value for `primary_contact_name`, must not be `None`")  # noqa: E501

        self._primary_contact_name = primary_contact_name

    @property
    def primary_contact_email(self):
        """Gets the primary_contact_email of this OrganisationUpdateRequest.  # noqa: E501

        Max length 100 characters Must be valid email  # noqa: E501

        :return: The primary_contact_email of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact_email

    @primary_contact_email.setter
    def primary_contact_email(self, primary_contact_email):
        """Sets the primary_contact_email of this OrganisationUpdateRequest.

        Max length 100 characters Must be valid email  # noqa: E501

        :param primary_contact_email: The primary_contact_email of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if primary_contact_email is None:
            raise ValueError("Invalid value for `primary_contact_email`, must not be `None`")  # noqa: E501

        self._primary_contact_email = primary_contact_email

    @property
    def primary_contact_number(self):
        """Gets the primary_contact_number of this OrganisationUpdateRequest.  # noqa: E501

        Max length 20 characters  # noqa: E501

        :return: The primary_contact_number of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact_number

    @primary_contact_number.setter
    def primary_contact_number(self, primary_contact_number):
        """Sets the primary_contact_number of this OrganisationUpdateRequest.

        Max length 20 characters  # noqa: E501

        :param primary_contact_number: The primary_contact_number of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if primary_contact_number is None:
            raise ValueError("Invalid value for `primary_contact_number`, must not be `None`")  # noqa: E501

        self._primary_contact_number = primary_contact_number

    @property
    def primary_admin_name(self):
        """Gets the primary_admin_name of this OrganisationUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The primary_admin_name of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._primary_admin_name

    @primary_admin_name.setter
    def primary_admin_name(self, primary_admin_name):
        """Sets the primary_admin_name of this OrganisationUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param primary_admin_name: The primary_admin_name of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if primary_admin_name is None:
            raise ValueError("Invalid value for `primary_admin_name`, must not be `None`")  # noqa: E501

        self._primary_admin_name = primary_admin_name

    @property
    def primary_admin_email(self):
        """Gets the primary_admin_email of this OrganisationUpdateRequest.  # noqa: E501

        Max length 100 characters Must be valid email  # noqa: E501

        :return: The primary_admin_email of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._primary_admin_email

    @primary_admin_email.setter
    def primary_admin_email(self, primary_admin_email):
        """Sets the primary_admin_email of this OrganisationUpdateRequest.

        Max length 100 characters Must be valid email  # noqa: E501

        :param primary_admin_email: The primary_admin_email of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if primary_admin_email is None:
            raise ValueError("Invalid value for `primary_admin_email`, must not be `None`")  # noqa: E501

        self._primary_admin_email = primary_admin_email

    @property
    def primary_admin_number(self):
        """Gets the primary_admin_number of this OrganisationUpdateRequest.  # noqa: E501

        Max length 20 characters  # noqa: E501

        :return: The primary_admin_number of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._primary_admin_number

    @primary_admin_number.setter
    def primary_admin_number(self, primary_admin_number):
        """Sets the primary_admin_number of this OrganisationUpdateRequest.

        Max length 20 characters  # noqa: E501

        :param primary_admin_number: The primary_admin_number of this OrganisationUpdateRequest.  # noqa: E501
        :type: str
        """
        if primary_admin_number is None:
            raise ValueError("Invalid value for `primary_admin_number`, must not be `None`")  # noqa: E501

        self._primary_admin_number = primary_admin_number

    @property
    def industry_sector(self):
        """Gets the industry_sector of this OrganisationUpdateRequest.  # noqa: E501

        Must be a valid IndustrySector Mandatory if organisation is PROMOTER or HIGHWAY AUTHORITY  # noqa: E501

        :return: The industry_sector of this OrganisationUpdateRequest.  # noqa: E501
        :rtype: AllOfOrganisationUpdateRequestIndustrySector
        """
        return self._industry_sector

    @industry_sector.setter
    def industry_sector(self, industry_sector):
        """Sets the industry_sector of this OrganisationUpdateRequest.

        Must be a valid IndustrySector Mandatory if organisation is PROMOTER or HIGHWAY AUTHORITY  # noqa: E501

        :param industry_sector: The industry_sector of this OrganisationUpdateRequest.  # noqa: E501
        :type: AllOfOrganisationUpdateRequestIndustrySector
        """

        self._industry_sector = industry_sector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganisationUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
