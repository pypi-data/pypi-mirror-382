# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AncillaryInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancillary_info_reference_number': 'str',
        'location_description': 'str',
        'ancillary_info_type': 'AncillaryInfoTypeResponse',
        'ancillary_info_status': 'AncillaryInfoStatusResponse',
        'ancillary_info_type_string': 'str',
        'ancillary_info_status_string': 'str',
        'date_created': 'datetime',
        'date_removed': 'datetime',
        'ancillary_info_description': 'str',
        'ancillary_info_removal_reason': 'str',
        'ancillary_info_coordinates': 'list[object]',
        'usrns': 'list[float]'
    }

    attribute_map = {
        'ancillary_info_reference_number': 'ancillary_info_reference_number',
        'location_description': 'location_description',
        'ancillary_info_type': 'ancillary_info_type',
        'ancillary_info_status': 'ancillary_info_status',
        'ancillary_info_type_string': 'ancillary_info_type_string',
        'ancillary_info_status_string': 'ancillary_info_status_string',
        'date_created': 'date_created',
        'date_removed': 'date_removed',
        'ancillary_info_description': 'ancillary_info_description',
        'ancillary_info_removal_reason': 'ancillary_info_removal_reason',
        'ancillary_info_coordinates': 'ancillary_info_coordinates',
        'usrns': 'usrns'
    }

    def __init__(self, ancillary_info_reference_number=None, location_description=None, ancillary_info_type=None, ancillary_info_status=None, ancillary_info_type_string=None, ancillary_info_status_string=None, date_created=None, date_removed=None, ancillary_info_description=None, ancillary_info_removal_reason=None, ancillary_info_coordinates=None, usrns=None):  # noqa: E501
        """AncillaryInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._ancillary_info_reference_number = None
        self._location_description = None
        self._ancillary_info_type = None
        self._ancillary_info_status = None
        self._ancillary_info_type_string = None
        self._ancillary_info_status_string = None
        self._date_created = None
        self._date_removed = None
        self._ancillary_info_description = None
        self._ancillary_info_removal_reason = None
        self._ancillary_info_coordinates = None
        self._usrns = None
        self.discriminator = None
        self.ancillary_info_reference_number = ancillary_info_reference_number
        if location_description is not None:
            self.location_description = location_description
        self.ancillary_info_type = ancillary_info_type
        self.ancillary_info_status = ancillary_info_status
        self.ancillary_info_type_string = ancillary_info_type_string
        self.ancillary_info_status_string = ancillary_info_status_string
        self.date_created = date_created
        if date_removed is not None:
            self.date_removed = date_removed
        self.ancillary_info_description = ancillary_info_description
        if ancillary_info_removal_reason is not None:
            self.ancillary_info_removal_reason = ancillary_info_removal_reason
        self.ancillary_info_coordinates = ancillary_info_coordinates
        self.usrns = usrns

    @property
    def ancillary_info_reference_number(self):
        """Gets the ancillary_info_reference_number of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_reference_number of this AncillaryInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_reference_number

    @ancillary_info_reference_number.setter
    def ancillary_info_reference_number(self, ancillary_info_reference_number):
        """Sets the ancillary_info_reference_number of this AncillaryInfoResponse.


        :param ancillary_info_reference_number: The ancillary_info_reference_number of this AncillaryInfoResponse.  # noqa: E501
        :type: str
        """
        if ancillary_info_reference_number is None:
            raise ValueError("Invalid value for `ancillary_info_reference_number`, must not be `None`")  # noqa: E501

        self._ancillary_info_reference_number = ancillary_info_reference_number

    @property
    def location_description(self):
        """Gets the location_description of this AncillaryInfoResponse.  # noqa: E501


        :return: The location_description of this AncillaryInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this AncillaryInfoResponse.


        :param location_description: The location_description of this AncillaryInfoResponse.  # noqa: E501
        :type: str
        """

        self._location_description = location_description

    @property
    def ancillary_info_type(self):
        """Gets the ancillary_info_type of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_type of this AncillaryInfoResponse.  # noqa: E501
        :rtype: AncillaryInfoTypeResponse
        """
        return self._ancillary_info_type

    @ancillary_info_type.setter
    def ancillary_info_type(self, ancillary_info_type):
        """Sets the ancillary_info_type of this AncillaryInfoResponse.


        :param ancillary_info_type: The ancillary_info_type of this AncillaryInfoResponse.  # noqa: E501
        :type: AncillaryInfoTypeResponse
        """
        if ancillary_info_type is None:
            raise ValueError("Invalid value for `ancillary_info_type`, must not be `None`")  # noqa: E501

        self._ancillary_info_type = ancillary_info_type

    @property
    def ancillary_info_status(self):
        """Gets the ancillary_info_status of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_status of this AncillaryInfoResponse.  # noqa: E501
        :rtype: AncillaryInfoStatusResponse
        """
        return self._ancillary_info_status

    @ancillary_info_status.setter
    def ancillary_info_status(self, ancillary_info_status):
        """Sets the ancillary_info_status of this AncillaryInfoResponse.


        :param ancillary_info_status: The ancillary_info_status of this AncillaryInfoResponse.  # noqa: E501
        :type: AncillaryInfoStatusResponse
        """
        if ancillary_info_status is None:
            raise ValueError("Invalid value for `ancillary_info_status`, must not be `None`")  # noqa: E501

        self._ancillary_info_status = ancillary_info_status

    @property
    def ancillary_info_type_string(self):
        """Gets the ancillary_info_type_string of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_type_string of this AncillaryInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_type_string

    @ancillary_info_type_string.setter
    def ancillary_info_type_string(self, ancillary_info_type_string):
        """Sets the ancillary_info_type_string of this AncillaryInfoResponse.


        :param ancillary_info_type_string: The ancillary_info_type_string of this AncillaryInfoResponse.  # noqa: E501
        :type: str
        """
        if ancillary_info_type_string is None:
            raise ValueError("Invalid value for `ancillary_info_type_string`, must not be `None`")  # noqa: E501

        self._ancillary_info_type_string = ancillary_info_type_string

    @property
    def ancillary_info_status_string(self):
        """Gets the ancillary_info_status_string of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_status_string of this AncillaryInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_status_string

    @ancillary_info_status_string.setter
    def ancillary_info_status_string(self, ancillary_info_status_string):
        """Sets the ancillary_info_status_string of this AncillaryInfoResponse.


        :param ancillary_info_status_string: The ancillary_info_status_string of this AncillaryInfoResponse.  # noqa: E501
        :type: str
        """
        if ancillary_info_status_string is None:
            raise ValueError("Invalid value for `ancillary_info_status_string`, must not be `None`")  # noqa: E501

        self._ancillary_info_status_string = ancillary_info_status_string

    @property
    def date_created(self):
        """Gets the date_created of this AncillaryInfoResponse.  # noqa: E501


        :return: The date_created of this AncillaryInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AncillaryInfoResponse.


        :param date_created: The date_created of this AncillaryInfoResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_removed(self):
        """Gets the date_removed of this AncillaryInfoResponse.  # noqa: E501


        :return: The date_removed of this AncillaryInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_removed

    @date_removed.setter
    def date_removed(self, date_removed):
        """Sets the date_removed of this AncillaryInfoResponse.


        :param date_removed: The date_removed of this AncillaryInfoResponse.  # noqa: E501
        :type: datetime
        """

        self._date_removed = date_removed

    @property
    def ancillary_info_description(self):
        """Gets the ancillary_info_description of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_description of this AncillaryInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_description

    @ancillary_info_description.setter
    def ancillary_info_description(self, ancillary_info_description):
        """Sets the ancillary_info_description of this AncillaryInfoResponse.


        :param ancillary_info_description: The ancillary_info_description of this AncillaryInfoResponse.  # noqa: E501
        :type: str
        """
        if ancillary_info_description is None:
            raise ValueError("Invalid value for `ancillary_info_description`, must not be `None`")  # noqa: E501

        self._ancillary_info_description = ancillary_info_description

    @property
    def ancillary_info_removal_reason(self):
        """Gets the ancillary_info_removal_reason of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_removal_reason of this AncillaryInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_removal_reason

    @ancillary_info_removal_reason.setter
    def ancillary_info_removal_reason(self, ancillary_info_removal_reason):
        """Sets the ancillary_info_removal_reason of this AncillaryInfoResponse.


        :param ancillary_info_removal_reason: The ancillary_info_removal_reason of this AncillaryInfoResponse.  # noqa: E501
        :type: str
        """

        self._ancillary_info_removal_reason = ancillary_info_removal_reason

    @property
    def ancillary_info_coordinates(self):
        """Gets the ancillary_info_coordinates of this AncillaryInfoResponse.  # noqa: E501


        :return: The ancillary_info_coordinates of this AncillaryInfoResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._ancillary_info_coordinates

    @ancillary_info_coordinates.setter
    def ancillary_info_coordinates(self, ancillary_info_coordinates):
        """Sets the ancillary_info_coordinates of this AncillaryInfoResponse.


        :param ancillary_info_coordinates: The ancillary_info_coordinates of this AncillaryInfoResponse.  # noqa: E501
        :type: list[object]
        """
        if ancillary_info_coordinates is None:
            raise ValueError("Invalid value for `ancillary_info_coordinates`, must not be `None`")  # noqa: E501

        self._ancillary_info_coordinates = ancillary_info_coordinates

    @property
    def usrns(self):
        """Gets the usrns of this AncillaryInfoResponse.  # noqa: E501


        :return: The usrns of this AncillaryInfoResponse.  # noqa: E501
        :rtype: list[float]
        """
        return self._usrns

    @usrns.setter
    def usrns(self, usrns):
        """Sets the usrns of this AncillaryInfoResponse.


        :param usrns: The usrns of this AncillaryInfoResponse.  # noqa: E501
        :type: list[float]
        """
        if usrns is None:
            raise ValueError("Invalid value for `usrns`, must not be `None`")  # noqa: E501

        self._usrns = usrns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AncillaryInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AncillaryInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
