# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FailureReasonDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failure_reason': 'FailureReasonResponse',
        'failure_reason_string': 'str',
        'sites': 'list[SiteDetails]',
        'details': 'str',
        'site_name': 'str'
    }

    attribute_map = {
        'failure_reason': 'failure_reason',
        'failure_reason_string': 'failure_reason_string',
        'sites': 'sites',
        'details': 'details',
        'site_name': 'site_name'
    }

    def __init__(self, failure_reason=None, failure_reason_string=None, sites=None, details=None, site_name=None):  # noqa: E501
        """FailureReasonDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._failure_reason = None
        self._failure_reason_string = None
        self._sites = None
        self._details = None
        self._site_name = None
        self.discriminator = None
        self.failure_reason = failure_reason
        self.failure_reason_string = failure_reason_string
        if sites is not None:
            self.sites = sites
        self.details = details
        if site_name is not None:
            self.site_name = site_name

    @property
    def failure_reason(self):
        """Gets the failure_reason of this FailureReasonDetailsResponse.  # noqa: E501


        :return: The failure_reason of this FailureReasonDetailsResponse.  # noqa: E501
        :rtype: FailureReasonResponse
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this FailureReasonDetailsResponse.


        :param failure_reason: The failure_reason of this FailureReasonDetailsResponse.  # noqa: E501
        :type: FailureReasonResponse
        """
        if failure_reason is None:
            raise ValueError("Invalid value for `failure_reason`, must not be `None`")  # noqa: E501

        self._failure_reason = failure_reason

    @property
    def failure_reason_string(self):
        """Gets the failure_reason_string of this FailureReasonDetailsResponse.  # noqa: E501


        :return: The failure_reason_string of this FailureReasonDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason_string

    @failure_reason_string.setter
    def failure_reason_string(self, failure_reason_string):
        """Sets the failure_reason_string of this FailureReasonDetailsResponse.


        :param failure_reason_string: The failure_reason_string of this FailureReasonDetailsResponse.  # noqa: E501
        :type: str
        """
        if failure_reason_string is None:
            raise ValueError("Invalid value for `failure_reason_string`, must not be `None`")  # noqa: E501

        self._failure_reason_string = failure_reason_string

    @property
    def sites(self):
        """Gets the sites of this FailureReasonDetailsResponse.  # noqa: E501


        :return: The sites of this FailureReasonDetailsResponse.  # noqa: E501
        :rtype: list[SiteDetails]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this FailureReasonDetailsResponse.


        :param sites: The sites of this FailureReasonDetailsResponse.  # noqa: E501
        :type: list[SiteDetails]
        """

        self._sites = sites

    @property
    def details(self):
        """Gets the details of this FailureReasonDetailsResponse.  # noqa: E501


        :return: The details of this FailureReasonDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this FailureReasonDetailsResponse.


        :param details: The details of this FailureReasonDetailsResponse.  # noqa: E501
        :type: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def site_name(self):
        """Gets the site_name of this FailureReasonDetailsResponse.  # noqa: E501


        :return: The site_name of this FailureReasonDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this FailureReasonDetailsResponse.


        :param site_name: The site_name of this FailureReasonDetailsResponse.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FailureReasonDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FailureReasonDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
