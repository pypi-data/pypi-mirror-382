# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkHistorySummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_date': 'datetime',
        'topic': 'str',
        'details': 'str',
        'username': 'str',
        'event': 'AuditEvent',
        'event_string': 'str',
        'object_reference': 'str',
        'update_id': 'float',
        'internal_user_identifier': 'str',
        'internal_user_name': 'str'
    }

    attribute_map = {
        'action_date': 'action_date',
        'topic': 'topic',
        'details': 'details',
        'username': 'username',
        'event': 'event',
        'event_string': 'event_string',
        'object_reference': 'object_reference',
        'update_id': 'update_id',
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name'
    }

    def __init__(self, action_date=None, topic=None, details=None, username=None, event=None, event_string=None, object_reference=None, update_id=None, internal_user_identifier=None, internal_user_name=None):  # noqa: E501
        """WorkHistorySummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._action_date = None
        self._topic = None
        self._details = None
        self._username = None
        self._event = None
        self._event_string = None
        self._object_reference = None
        self._update_id = None
        self._internal_user_identifier = None
        self._internal_user_name = None
        self.discriminator = None
        self.action_date = action_date
        self.topic = topic
        self.details = details
        self.username = username
        self.event = event
        self.event_string = event_string
        if object_reference is not None:
            self.object_reference = object_reference
        self.update_id = update_id
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name

    @property
    def action_date(self):
        """Gets the action_date of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The action_date of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._action_date

    @action_date.setter
    def action_date(self, action_date):
        """Sets the action_date of this WorkHistorySummaryResponse.


        :param action_date: The action_date of this WorkHistorySummaryResponse.  # noqa: E501
        :type: datetime
        """
        if action_date is None:
            raise ValueError("Invalid value for `action_date`, must not be `None`")  # noqa: E501

        self._action_date = action_date

    @property
    def topic(self):
        """Gets the topic of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The topic of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this WorkHistorySummaryResponse.


        :param topic: The topic of this WorkHistorySummaryResponse.  # noqa: E501
        :type: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501

        self._topic = topic

    @property
    def details(self):
        """Gets the details of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The details of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this WorkHistorySummaryResponse.


        :param details: The details of this WorkHistorySummaryResponse.  # noqa: E501
        :type: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def username(self):
        """Gets the username of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The username of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this WorkHistorySummaryResponse.


        :param username: The username of this WorkHistorySummaryResponse.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def event(self):
        """Gets the event of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The event of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: AuditEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WorkHistorySummaryResponse.


        :param event: The event of this WorkHistorySummaryResponse.  # noqa: E501
        :type: AuditEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def event_string(self):
        """Gets the event_string of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The event_string of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_string

    @event_string.setter
    def event_string(self, event_string):
        """Sets the event_string of this WorkHistorySummaryResponse.


        :param event_string: The event_string of this WorkHistorySummaryResponse.  # noqa: E501
        :type: str
        """
        if event_string is None:
            raise ValueError("Invalid value for `event_string`, must not be `None`")  # noqa: E501

        self._event_string = event_string

    @property
    def object_reference(self):
        """Gets the object_reference of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The object_reference of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """Sets the object_reference of this WorkHistorySummaryResponse.


        :param object_reference: The object_reference of this WorkHistorySummaryResponse.  # noqa: E501
        :type: str
        """

        self._object_reference = object_reference

    @property
    def update_id(self):
        """Gets the update_id of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The update_id of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._update_id

    @update_id.setter
    def update_id(self, update_id):
        """Sets the update_id of this WorkHistorySummaryResponse.


        :param update_id: The update_id of this WorkHistorySummaryResponse.  # noqa: E501
        :type: float
        """
        if update_id is None:
            raise ValueError("Invalid value for `update_id`, must not be `None`")  # noqa: E501

        self._update_id = update_id

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The internal_user_identifier of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this WorkHistorySummaryResponse.


        :param internal_user_identifier: The internal_user_identifier of this WorkHistorySummaryResponse.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this WorkHistorySummaryResponse.  # noqa: E501


        :return: The internal_user_name of this WorkHistorySummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this WorkHistorySummaryResponse.


        :param internal_user_name: The internal_user_name of this WorkHistorySummaryResponse.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkHistorySummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkHistorySummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
