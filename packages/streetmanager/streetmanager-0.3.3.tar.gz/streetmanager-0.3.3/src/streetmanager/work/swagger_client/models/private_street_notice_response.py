# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateStreetNoticeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'private_street_reference_number': 'str',
        'proposed_start_date': 'datetime',
        'proposed_end_date': 'datetime',
        'private_street_status': 'PrivateStreetStatusResponse',
        'private_street_status_string': 'str',
        'work_reference_number': 'str',
        'promoter_organisation': 'str',
        'promoter_swa_code': 'str',
        'secondary_contact': 'str',
        'secondary_contact_number': 'str',
        'secondary_contact_email': 'str',
        'proposed_start_time': 'datetime',
        'proposed_end_time': 'datetime',
        'calendar_day_duration': 'float',
        'working_day_duration': 'float',
        'description_of_work': 'str',
        'excavation': 'bool',
        'project_reference_number': 'str',
        'street_name': 'str',
        'town': 'str',
        'area_name': 'str',
        'usrn': 'str',
        'highway_authority': 'str',
        'highway_authority_swa_code': 'str',
        'works_location_description': 'str',
        'works_coordinates': 'object',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'traffic_management_type': 'TrafficManagementTypeResponse',
        'traffic_management_type_string': 'str',
        'location_types': 'list[LocationTypeResponse]',
        'location_types_string': 'list[str]',
        'files': 'list[FileSummaryResponse]',
        'workstream_prefix': 'str',
        'close_footway': 'CloseFootwayResponse',
        'close_footway_string': 'str',
        'work_status': 'WorkStatusResponse',
        'work_status_string': 'str',
        'additional_contact': 'str',
        'additional_contact_number': 'str',
        'additional_contact_email': 'str',
        'emergency_contact_name': 'str',
        'emergency_contact_number': 'str',
        'close_footpath': 'CloseFootpathResponse',
        'close_footpath_string': 'str',
        'street_line': 'object',
        'road_category': 'float'
    }

    attribute_map = {
        'private_street_reference_number': 'private_street_reference_number',
        'proposed_start_date': 'proposed_start_date',
        'proposed_end_date': 'proposed_end_date',
        'private_street_status': 'private_street_status',
        'private_street_status_string': 'private_street_status_string',
        'work_reference_number': 'work_reference_number',
        'promoter_organisation': 'promoter_organisation',
        'promoter_swa_code': 'promoter_swa_code',
        'secondary_contact': 'secondary_contact',
        'secondary_contact_number': 'secondary_contact_number',
        'secondary_contact_email': 'secondary_contact_email',
        'proposed_start_time': 'proposed_start_time',
        'proposed_end_time': 'proposed_end_time',
        'calendar_day_duration': 'calendar_day_duration',
        'working_day_duration': 'working_day_duration',
        'description_of_work': 'description_of_work',
        'excavation': 'excavation',
        'project_reference_number': 'project_reference_number',
        'street_name': 'street_name',
        'town': 'town',
        'area_name': 'area_name',
        'usrn': 'usrn',
        'highway_authority': 'highway_authority',
        'highway_authority_swa_code': 'highway_authority_swa_code',
        'works_location_description': 'works_location_description',
        'works_coordinates': 'works_coordinates',
        'date_created': 'date_created',
        'date_modified': 'date_modified',
        'traffic_management_type': 'traffic_management_type',
        'traffic_management_type_string': 'traffic_management_type_string',
        'location_types': 'location_types',
        'location_types_string': 'location_types_string',
        'files': 'files',
        'workstream_prefix': 'workstream_prefix',
        'close_footway': 'close_footway',
        'close_footway_string': 'close_footway_string',
        'work_status': 'work_status',
        'work_status_string': 'work_status_string',
        'additional_contact': 'additional_contact',
        'additional_contact_number': 'additional_contact_number',
        'additional_contact_email': 'additional_contact_email',
        'emergency_contact_name': 'emergency_contact_name',
        'emergency_contact_number': 'emergency_contact_number',
        'close_footpath': 'close_footpath',
        'close_footpath_string': 'close_footpath_string',
        'street_line': 'street_line',
        'road_category': 'road_category'
    }

    def __init__(self, private_street_reference_number=None, proposed_start_date=None, proposed_end_date=None, private_street_status=None, private_street_status_string=None, work_reference_number=None, promoter_organisation=None, promoter_swa_code=None, secondary_contact=None, secondary_contact_number=None, secondary_contact_email=None, proposed_start_time=None, proposed_end_time=None, calendar_day_duration=None, working_day_duration=None, description_of_work=None, excavation=None, project_reference_number=None, street_name=None, town=None, area_name=None, usrn=None, highway_authority=None, highway_authority_swa_code=None, works_location_description=None, works_coordinates=None, date_created=None, date_modified=None, traffic_management_type=None, traffic_management_type_string=None, location_types=None, location_types_string=None, files=None, workstream_prefix=None, close_footway=None, close_footway_string=None, work_status=None, work_status_string=None, additional_contact=None, additional_contact_number=None, additional_contact_email=None, emergency_contact_name=None, emergency_contact_number=None, close_footpath=None, close_footpath_string=None, street_line=None, road_category=None):  # noqa: E501
        """PrivateStreetNoticeResponse - a model defined in Swagger"""  # noqa: E501
        self._private_street_reference_number = None
        self._proposed_start_date = None
        self._proposed_end_date = None
        self._private_street_status = None
        self._private_street_status_string = None
        self._work_reference_number = None
        self._promoter_organisation = None
        self._promoter_swa_code = None
        self._secondary_contact = None
        self._secondary_contact_number = None
        self._secondary_contact_email = None
        self._proposed_start_time = None
        self._proposed_end_time = None
        self._calendar_day_duration = None
        self._working_day_duration = None
        self._description_of_work = None
        self._excavation = None
        self._project_reference_number = None
        self._street_name = None
        self._town = None
        self._area_name = None
        self._usrn = None
        self._highway_authority = None
        self._highway_authority_swa_code = None
        self._works_location_description = None
        self._works_coordinates = None
        self._date_created = None
        self._date_modified = None
        self._traffic_management_type = None
        self._traffic_management_type_string = None
        self._location_types = None
        self._location_types_string = None
        self._files = None
        self._workstream_prefix = None
        self._close_footway = None
        self._close_footway_string = None
        self._work_status = None
        self._work_status_string = None
        self._additional_contact = None
        self._additional_contact_number = None
        self._additional_contact_email = None
        self._emergency_contact_name = None
        self._emergency_contact_number = None
        self._close_footpath = None
        self._close_footpath_string = None
        self._street_line = None
        self._road_category = None
        self.discriminator = None
        self.private_street_reference_number = private_street_reference_number
        self.proposed_start_date = proposed_start_date
        self.proposed_end_date = proposed_end_date
        self.private_street_status = private_street_status
        self.private_street_status_string = private_street_status_string
        self.work_reference_number = work_reference_number
        self.promoter_organisation = promoter_organisation
        self.promoter_swa_code = promoter_swa_code
        self.secondary_contact = secondary_contact
        self.secondary_contact_number = secondary_contact_number
        if secondary_contact_email is not None:
            self.secondary_contact_email = secondary_contact_email
        if proposed_start_time is not None:
            self.proposed_start_time = proposed_start_time
        if proposed_end_time is not None:
            self.proposed_end_time = proposed_end_time
        self.calendar_day_duration = calendar_day_duration
        self.working_day_duration = working_day_duration
        self.description_of_work = description_of_work
        self.excavation = excavation
        if project_reference_number is not None:
            self.project_reference_number = project_reference_number
        self.street_name = street_name
        if town is not None:
            self.town = town
        if area_name is not None:
            self.area_name = area_name
        self.usrn = usrn
        self.highway_authority = highway_authority
        self.highway_authority_swa_code = highway_authority_swa_code
        self.works_location_description = works_location_description
        self.works_coordinates = works_coordinates
        self.date_created = date_created
        self.date_modified = date_modified
        self.traffic_management_type = traffic_management_type
        self.traffic_management_type_string = traffic_management_type_string
        self.location_types = location_types
        self.location_types_string = location_types_string
        if files is not None:
            self.files = files
        self.workstream_prefix = workstream_prefix
        self.close_footway = close_footway
        self.close_footway_string = close_footway_string
        self.work_status = work_status
        self.work_status_string = work_status_string
        if additional_contact is not None:
            self.additional_contact = additional_contact
        if additional_contact_number is not None:
            self.additional_contact_number = additional_contact_number
        if additional_contact_email is not None:
            self.additional_contact_email = additional_contact_email
        if emergency_contact_name is not None:
            self.emergency_contact_name = emergency_contact_name
        if emergency_contact_number is not None:
            self.emergency_contact_number = emergency_contact_number
        self.close_footpath = close_footpath
        self.close_footpath_string = close_footpath_string
        if street_line is not None:
            self.street_line = street_line
        self.road_category = road_category

    @property
    def private_street_reference_number(self):
        """Gets the private_street_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The private_street_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._private_street_reference_number

    @private_street_reference_number.setter
    def private_street_reference_number(self, private_street_reference_number):
        """Sets the private_street_reference_number of this PrivateStreetNoticeResponse.


        :param private_street_reference_number: The private_street_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if private_street_reference_number is None:
            raise ValueError("Invalid value for `private_street_reference_number`, must not be `None`")  # noqa: E501

        self._private_street_reference_number = private_street_reference_number

    @property
    def proposed_start_date(self):
        """Gets the proposed_start_date of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The proposed_start_date of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_date

    @proposed_start_date.setter
    def proposed_start_date(self, proposed_start_date):
        """Sets the proposed_start_date of this PrivateStreetNoticeResponse.


        :param proposed_start_date: The proposed_start_date of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_start_date is None:
            raise ValueError("Invalid value for `proposed_start_date`, must not be `None`")  # noqa: E501

        self._proposed_start_date = proposed_start_date

    @property
    def proposed_end_date(self):
        """Gets the proposed_end_date of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The proposed_end_date of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_date

    @proposed_end_date.setter
    def proposed_end_date(self, proposed_end_date):
        """Sets the proposed_end_date of this PrivateStreetNoticeResponse.


        :param proposed_end_date: The proposed_end_date of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_end_date is None:
            raise ValueError("Invalid value for `proposed_end_date`, must not be `None`")  # noqa: E501

        self._proposed_end_date = proposed_end_date

    @property
    def private_street_status(self):
        """Gets the private_street_status of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The private_street_status of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: PrivateStreetStatusResponse
        """
        return self._private_street_status

    @private_street_status.setter
    def private_street_status(self, private_street_status):
        """Sets the private_street_status of this PrivateStreetNoticeResponse.


        :param private_street_status: The private_street_status of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: PrivateStreetStatusResponse
        """
        if private_street_status is None:
            raise ValueError("Invalid value for `private_street_status`, must not be `None`")  # noqa: E501

        self._private_street_status = private_street_status

    @property
    def private_street_status_string(self):
        """Gets the private_street_status_string of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The private_street_status_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._private_street_status_string

    @private_street_status_string.setter
    def private_street_status_string(self, private_street_status_string):
        """Sets the private_street_status_string of this PrivateStreetNoticeResponse.


        :param private_street_status_string: The private_street_status_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if private_street_status_string is None:
            raise ValueError("Invalid value for `private_street_status_string`, must not be `None`")  # noqa: E501

        self._private_street_status_string = private_street_status_string

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The work_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this PrivateStreetNoticeResponse.


        :param work_reference_number: The work_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The promoter_organisation of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this PrivateStreetNoticeResponse.


        :param promoter_organisation: The promoter_organisation of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def promoter_swa_code(self):
        """Gets the promoter_swa_code of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The promoter_swa_code of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_swa_code

    @promoter_swa_code.setter
    def promoter_swa_code(self, promoter_swa_code):
        """Sets the promoter_swa_code of this PrivateStreetNoticeResponse.


        :param promoter_swa_code: The promoter_swa_code of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if promoter_swa_code is None:
            raise ValueError("Invalid value for `promoter_swa_code`, must not be `None`")  # noqa: E501

        self._promoter_swa_code = promoter_swa_code

    @property
    def secondary_contact(self):
        """Gets the secondary_contact of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The secondary_contact of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._secondary_contact

    @secondary_contact.setter
    def secondary_contact(self, secondary_contact):
        """Sets the secondary_contact of this PrivateStreetNoticeResponse.


        :param secondary_contact: The secondary_contact of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if secondary_contact is None:
            raise ValueError("Invalid value for `secondary_contact`, must not be `None`")  # noqa: E501

        self._secondary_contact = secondary_contact

    @property
    def secondary_contact_number(self):
        """Gets the secondary_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The secondary_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._secondary_contact_number

    @secondary_contact_number.setter
    def secondary_contact_number(self, secondary_contact_number):
        """Sets the secondary_contact_number of this PrivateStreetNoticeResponse.


        :param secondary_contact_number: The secondary_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if secondary_contact_number is None:
            raise ValueError("Invalid value for `secondary_contact_number`, must not be `None`")  # noqa: E501

        self._secondary_contact_number = secondary_contact_number

    @property
    def secondary_contact_email(self):
        """Gets the secondary_contact_email of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The secondary_contact_email of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._secondary_contact_email

    @secondary_contact_email.setter
    def secondary_contact_email(self, secondary_contact_email):
        """Sets the secondary_contact_email of this PrivateStreetNoticeResponse.


        :param secondary_contact_email: The secondary_contact_email of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._secondary_contact_email = secondary_contact_email

    @property
    def proposed_start_time(self):
        """Gets the proposed_start_time of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The proposed_start_time of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_time

    @proposed_start_time.setter
    def proposed_start_time(self, proposed_start_time):
        """Sets the proposed_start_time of this PrivateStreetNoticeResponse.


        :param proposed_start_time: The proposed_start_time of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_start_time = proposed_start_time

    @property
    def proposed_end_time(self):
        """Gets the proposed_end_time of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The proposed_end_time of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_time

    @proposed_end_time.setter
    def proposed_end_time(self, proposed_end_time):
        """Sets the proposed_end_time of this PrivateStreetNoticeResponse.


        :param proposed_end_time: The proposed_end_time of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_end_time = proposed_end_time

    @property
    def calendar_day_duration(self):
        """Gets the calendar_day_duration of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The calendar_day_duration of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: float
        """
        return self._calendar_day_duration

    @calendar_day_duration.setter
    def calendar_day_duration(self, calendar_day_duration):
        """Sets the calendar_day_duration of this PrivateStreetNoticeResponse.


        :param calendar_day_duration: The calendar_day_duration of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: float
        """
        if calendar_day_duration is None:
            raise ValueError("Invalid value for `calendar_day_duration`, must not be `None`")  # noqa: E501

        self._calendar_day_duration = calendar_day_duration

    @property
    def working_day_duration(self):
        """Gets the working_day_duration of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The working_day_duration of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: float
        """
        return self._working_day_duration

    @working_day_duration.setter
    def working_day_duration(self, working_day_duration):
        """Sets the working_day_duration of this PrivateStreetNoticeResponse.


        :param working_day_duration: The working_day_duration of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: float
        """
        if working_day_duration is None:
            raise ValueError("Invalid value for `working_day_duration`, must not be `None`")  # noqa: E501

        self._working_day_duration = working_day_duration

    @property
    def description_of_work(self):
        """Gets the description_of_work of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The description_of_work of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._description_of_work

    @description_of_work.setter
    def description_of_work(self, description_of_work):
        """Sets the description_of_work of this PrivateStreetNoticeResponse.


        :param description_of_work: The description_of_work of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if description_of_work is None:
            raise ValueError("Invalid value for `description_of_work`, must not be `None`")  # noqa: E501

        self._description_of_work = description_of_work

    @property
    def excavation(self):
        """Gets the excavation of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The excavation of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._excavation

    @excavation.setter
    def excavation(self, excavation):
        """Sets the excavation of this PrivateStreetNoticeResponse.


        :param excavation: The excavation of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: bool
        """
        if excavation is None:
            raise ValueError("Invalid value for `excavation`, must not be `None`")  # noqa: E501

        self._excavation = excavation

    @property
    def project_reference_number(self):
        """Gets the project_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The project_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_reference_number

    @project_reference_number.setter
    def project_reference_number(self, project_reference_number):
        """Sets the project_reference_number of this PrivateStreetNoticeResponse.


        :param project_reference_number: The project_reference_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._project_reference_number = project_reference_number

    @property
    def street_name(self):
        """Gets the street_name of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The street_name of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this PrivateStreetNoticeResponse.


        :param street_name: The street_name of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if street_name is None:
            raise ValueError("Invalid value for `street_name`, must not be `None`")  # noqa: E501

        self._street_name = street_name

    @property
    def town(self):
        """Gets the town of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The town of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this PrivateStreetNoticeResponse.


        :param town: The town of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area_name(self):
        """Gets the area_name of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The area_name of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this PrivateStreetNoticeResponse.


        :param area_name: The area_name of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def usrn(self):
        """Gets the usrn of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The usrn of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this PrivateStreetNoticeResponse.


        :param usrn: The usrn of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def highway_authority(self):
        """Gets the highway_authority of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The highway_authority of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority

    @highway_authority.setter
    def highway_authority(self, highway_authority):
        """Sets the highway_authority of this PrivateStreetNoticeResponse.


        :param highway_authority: The highway_authority of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if highway_authority is None:
            raise ValueError("Invalid value for `highway_authority`, must not be `None`")  # noqa: E501

        self._highway_authority = highway_authority

    @property
    def highway_authority_swa_code(self):
        """Gets the highway_authority_swa_code of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The highway_authority_swa_code of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority_swa_code

    @highway_authority_swa_code.setter
    def highway_authority_swa_code(self, highway_authority_swa_code):
        """Sets the highway_authority_swa_code of this PrivateStreetNoticeResponse.


        :param highway_authority_swa_code: The highway_authority_swa_code of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if highway_authority_swa_code is None:
            raise ValueError("Invalid value for `highway_authority_swa_code`, must not be `None`")  # noqa: E501

        self._highway_authority_swa_code = highway_authority_swa_code

    @property
    def works_location_description(self):
        """Gets the works_location_description of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The works_location_description of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._works_location_description

    @works_location_description.setter
    def works_location_description(self, works_location_description):
        """Sets the works_location_description of this PrivateStreetNoticeResponse.


        :param works_location_description: The works_location_description of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if works_location_description is None:
            raise ValueError("Invalid value for `works_location_description`, must not be `None`")  # noqa: E501

        self._works_location_description = works_location_description

    @property
    def works_coordinates(self):
        """Gets the works_coordinates of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The works_coordinates of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: object
        """
        return self._works_coordinates

    @works_coordinates.setter
    def works_coordinates(self, works_coordinates):
        """Sets the works_coordinates of this PrivateStreetNoticeResponse.


        :param works_coordinates: The works_coordinates of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: object
        """
        if works_coordinates is None:
            raise ValueError("Invalid value for `works_coordinates`, must not be `None`")  # noqa: E501

        self._works_coordinates = works_coordinates

    @property
    def date_created(self):
        """Gets the date_created of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The date_created of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this PrivateStreetNoticeResponse.


        :param date_created: The date_created of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The date_modified of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this PrivateStreetNoticeResponse.


        :param date_modified: The date_modified of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: datetime
        """
        if date_modified is None:
            raise ValueError("Invalid value for `date_modified`, must not be `None`")  # noqa: E501

        self._date_modified = date_modified

    @property
    def traffic_management_type(self):
        """Gets the traffic_management_type of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The traffic_management_type of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: TrafficManagementTypeResponse
        """
        return self._traffic_management_type

    @traffic_management_type.setter
    def traffic_management_type(self, traffic_management_type):
        """Sets the traffic_management_type of this PrivateStreetNoticeResponse.


        :param traffic_management_type: The traffic_management_type of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: TrafficManagementTypeResponse
        """
        if traffic_management_type is None:
            raise ValueError("Invalid value for `traffic_management_type`, must not be `None`")  # noqa: E501

        self._traffic_management_type = traffic_management_type

    @property
    def traffic_management_type_string(self):
        """Gets the traffic_management_type_string of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The traffic_management_type_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._traffic_management_type_string

    @traffic_management_type_string.setter
    def traffic_management_type_string(self, traffic_management_type_string):
        """Sets the traffic_management_type_string of this PrivateStreetNoticeResponse.


        :param traffic_management_type_string: The traffic_management_type_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if traffic_management_type_string is None:
            raise ValueError("Invalid value for `traffic_management_type_string`, must not be `None`")  # noqa: E501

        self._traffic_management_type_string = traffic_management_type_string

    @property
    def location_types(self):
        """Gets the location_types of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The location_types of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: list[LocationTypeResponse]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this PrivateStreetNoticeResponse.


        :param location_types: The location_types of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: list[LocationTypeResponse]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def location_types_string(self):
        """Gets the location_types_string of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The location_types_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_types_string

    @location_types_string.setter
    def location_types_string(self, location_types_string):
        """Sets the location_types_string of this PrivateStreetNoticeResponse.


        :param location_types_string: The location_types_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: list[str]
        """
        if location_types_string is None:
            raise ValueError("Invalid value for `location_types_string`, must not be `None`")  # noqa: E501

        self._location_types_string = location_types_string

    @property
    def files(self):
        """Gets the files of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The files of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: list[FileSummaryResponse]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this PrivateStreetNoticeResponse.


        :param files: The files of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: list[FileSummaryResponse]
        """

        self._files = files

    @property
    def workstream_prefix(self):
        """Gets the workstream_prefix of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The workstream_prefix of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._workstream_prefix

    @workstream_prefix.setter
    def workstream_prefix(self, workstream_prefix):
        """Sets the workstream_prefix of this PrivateStreetNoticeResponse.


        :param workstream_prefix: The workstream_prefix of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if workstream_prefix is None:
            raise ValueError("Invalid value for `workstream_prefix`, must not be `None`")  # noqa: E501

        self._workstream_prefix = workstream_prefix

    @property
    def close_footway(self):
        """Gets the close_footway of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The close_footway of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: CloseFootwayResponse
        """
        return self._close_footway

    @close_footway.setter
    def close_footway(self, close_footway):
        """Sets the close_footway of this PrivateStreetNoticeResponse.


        :param close_footway: The close_footway of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: CloseFootwayResponse
        """
        if close_footway is None:
            raise ValueError("Invalid value for `close_footway`, must not be `None`")  # noqa: E501

        self._close_footway = close_footway

    @property
    def close_footway_string(self):
        """Gets the close_footway_string of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The close_footway_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._close_footway_string

    @close_footway_string.setter
    def close_footway_string(self, close_footway_string):
        """Sets the close_footway_string of this PrivateStreetNoticeResponse.


        :param close_footway_string: The close_footway_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if close_footway_string is None:
            raise ValueError("Invalid value for `close_footway_string`, must not be `None`")  # noqa: E501

        self._close_footway_string = close_footway_string

    @property
    def work_status(self):
        """Gets the work_status of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The work_status of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: WorkStatusResponse
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this PrivateStreetNoticeResponse.


        :param work_status: The work_status of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: WorkStatusResponse
        """
        if work_status is None:
            raise ValueError("Invalid value for `work_status`, must not be `None`")  # noqa: E501

        self._work_status = work_status

    @property
    def work_status_string(self):
        """Gets the work_status_string of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The work_status_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_status_string

    @work_status_string.setter
    def work_status_string(self, work_status_string):
        """Sets the work_status_string of this PrivateStreetNoticeResponse.


        :param work_status_string: The work_status_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if work_status_string is None:
            raise ValueError("Invalid value for `work_status_string`, must not be `None`")  # noqa: E501

        self._work_status_string = work_status_string

    @property
    def additional_contact(self):
        """Gets the additional_contact of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The additional_contact of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._additional_contact

    @additional_contact.setter
    def additional_contact(self, additional_contact):
        """Sets the additional_contact of this PrivateStreetNoticeResponse.


        :param additional_contact: The additional_contact of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._additional_contact = additional_contact

    @property
    def additional_contact_number(self):
        """Gets the additional_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The additional_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._additional_contact_number

    @additional_contact_number.setter
    def additional_contact_number(self, additional_contact_number):
        """Sets the additional_contact_number of this PrivateStreetNoticeResponse.


        :param additional_contact_number: The additional_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._additional_contact_number = additional_contact_number

    @property
    def additional_contact_email(self):
        """Gets the additional_contact_email of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The additional_contact_email of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._additional_contact_email

    @additional_contact_email.setter
    def additional_contact_email(self, additional_contact_email):
        """Sets the additional_contact_email of this PrivateStreetNoticeResponse.


        :param additional_contact_email: The additional_contact_email of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._additional_contact_email = additional_contact_email

    @property
    def emergency_contact_name(self):
        """Gets the emergency_contact_name of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The emergency_contact_name of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_name

    @emergency_contact_name.setter
    def emergency_contact_name(self, emergency_contact_name):
        """Sets the emergency_contact_name of this PrivateStreetNoticeResponse.


        :param emergency_contact_name: The emergency_contact_name of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._emergency_contact_name = emergency_contact_name

    @property
    def emergency_contact_number(self):
        """Gets the emergency_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The emergency_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_number

    @emergency_contact_number.setter
    def emergency_contact_number(self, emergency_contact_number):
        """Sets the emergency_contact_number of this PrivateStreetNoticeResponse.


        :param emergency_contact_number: The emergency_contact_number of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """

        self._emergency_contact_number = emergency_contact_number

    @property
    def close_footpath(self):
        """Gets the close_footpath of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The close_footpath of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: CloseFootpathResponse
        """
        return self._close_footpath

    @close_footpath.setter
    def close_footpath(self, close_footpath):
        """Sets the close_footpath of this PrivateStreetNoticeResponse.


        :param close_footpath: The close_footpath of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: CloseFootpathResponse
        """
        if close_footpath is None:
            raise ValueError("Invalid value for `close_footpath`, must not be `None`")  # noqa: E501

        self._close_footpath = close_footpath

    @property
    def close_footpath_string(self):
        """Gets the close_footpath_string of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The close_footpath_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: str
        """
        return self._close_footpath_string

    @close_footpath_string.setter
    def close_footpath_string(self, close_footpath_string):
        """Sets the close_footpath_string of this PrivateStreetNoticeResponse.


        :param close_footpath_string: The close_footpath_string of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: str
        """
        if close_footpath_string is None:
            raise ValueError("Invalid value for `close_footpath_string`, must not be `None`")  # noqa: E501

        self._close_footpath_string = close_footpath_string

    @property
    def street_line(self):
        """Gets the street_line of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The street_line of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: object
        """
        return self._street_line

    @street_line.setter
    def street_line(self, street_line):
        """Sets the street_line of this PrivateStreetNoticeResponse.


        :param street_line: The street_line of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: object
        """

        self._street_line = street_line

    @property
    def road_category(self):
        """Gets the road_category of this PrivateStreetNoticeResponse.  # noqa: E501


        :return: The road_category of this PrivateStreetNoticeResponse.  # noqa: E501
        :rtype: float
        """
        return self._road_category

    @road_category.setter
    def road_category(self, road_category):
        """Sets the road_category of this PrivateStreetNoticeResponse.


        :param road_category: The road_category of this PrivateStreetNoticeResponse.  # noqa: E501
        :type: float
        """
        if road_category is None:
            raise ValueError("Invalid value for `road_category`, must not be `None`")  # noqa: E501

        self._road_category = road_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateStreetNoticeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateStreetNoticeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
