# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitAssessmentUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'assessment_status': 'AssessmentStatus',
        'additional_comments': 'str',
        'reasons_for_refusal': 'list[ReasonForRefusal]',
        'assessment_discount': 'float',
        'revoke_reason': 'str',
        'pending_change_details': 'str',
        'reasonable_period_end_date': 'datetime',
        'is_duration_challenged': 'bool'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'assessment_status': 'assessment_status',
        'additional_comments': 'additional_comments',
        'reasons_for_refusal': 'reasons_for_refusal',
        'assessment_discount': 'assessment_discount',
        'revoke_reason': 'revoke_reason',
        'pending_change_details': 'pending_change_details',
        'reasonable_period_end_date': 'reasonable_period_end_date',
        'is_duration_challenged': 'is_duration_challenged'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, assessment_status=None, additional_comments=None, reasons_for_refusal=None, assessment_discount=None, revoke_reason=None, pending_change_details=None, reasonable_period_end_date=None, is_duration_challenged=None):  # noqa: E501
        """PermitAssessmentUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._assessment_status = None
        self._additional_comments = None
        self._reasons_for_refusal = None
        self._assessment_discount = None
        self._revoke_reason = None
        self._pending_change_details = None
        self._reasonable_period_end_date = None
        self._is_duration_challenged = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.assessment_status = assessment_status
        if additional_comments is not None:
            self.additional_comments = additional_comments
        if reasons_for_refusal is not None:
            self.reasons_for_refusal = reasons_for_refusal
        if assessment_discount is not None:
            self.assessment_discount = assessment_discount
        if revoke_reason is not None:
            self.revoke_reason = revoke_reason
        if pending_change_details is not None:
            self.pending_change_details = pending_change_details
        if reasonable_period_end_date is not None:
            self.reasonable_period_end_date = reasonable_period_end_date
        if is_duration_challenged is not None:
            self.is_duration_challenged = is_duration_challenged

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this PermitAssessmentUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this PermitAssessmentUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this PermitAssessmentUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this PermitAssessmentUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def assessment_status(self):
        """Gets the assessment_status of this PermitAssessmentUpdateRequest.  # noqa: E501


        :return: The assessment_status of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: AssessmentStatus
        """
        return self._assessment_status

    @assessment_status.setter
    def assessment_status(self, assessment_status):
        """Sets the assessment_status of this PermitAssessmentUpdateRequest.


        :param assessment_status: The assessment_status of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: AssessmentStatus
        """
        if assessment_status is None:
            raise ValueError("Invalid value for `assessment_status`, must not be `None`")  # noqa: E501

        self._assessment_status = assessment_status

    @property
    def additional_comments(self):
        """Gets the additional_comments of this PermitAssessmentUpdateRequest.  # noqa: E501

        Required if assessment_status = refused or is_duration_challenged = true Max length 1500 characters  # noqa: E501

        :return: The additional_comments of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._additional_comments

    @additional_comments.setter
    def additional_comments(self, additional_comments):
        """Sets the additional_comments of this PermitAssessmentUpdateRequest.

        Required if assessment_status = refused or is_duration_challenged = true Max length 1500 characters  # noqa: E501

        :param additional_comments: The additional_comments of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._additional_comments = additional_comments

    @property
    def reasons_for_refusal(self):
        """Gets the reasons_for_refusal of this PermitAssessmentUpdateRequest.  # noqa: E501

        Array values must be unique Must contain between 1 and 5 values Required if assessment_status = refused  # noqa: E501

        :return: The reasons_for_refusal of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: list[ReasonForRefusal]
        """
        return self._reasons_for_refusal

    @reasons_for_refusal.setter
    def reasons_for_refusal(self, reasons_for_refusal):
        """Sets the reasons_for_refusal of this PermitAssessmentUpdateRequest.

        Array values must be unique Must contain between 1 and 5 values Required if assessment_status = refused  # noqa: E501

        :param reasons_for_refusal: The reasons_for_refusal of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: list[ReasonForRefusal]
        """

        self._reasons_for_refusal = reasons_for_refusal

    @property
    def assessment_discount(self):
        """Gets the assessment_discount of this PermitAssessmentUpdateRequest.  # noqa: E501

        Required if assessment_status = granted and permit's work_category != hs2_highway Is whole number between 0 and 100 inclusive  # noqa: E501

        :return: The assessment_discount of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: float
        """
        return self._assessment_discount

    @assessment_discount.setter
    def assessment_discount(self, assessment_discount):
        """Sets the assessment_discount of this PermitAssessmentUpdateRequest.

        Required if assessment_status = granted and permit's work_category != hs2_highway Is whole number between 0 and 100 inclusive  # noqa: E501

        :param assessment_discount: The assessment_discount of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: float
        """

        self._assessment_discount = assessment_discount

    @property
    def revoke_reason(self):
        """Gets the revoke_reason of this PermitAssessmentUpdateRequest.  # noqa: E501

        Required if assessment_status = revoked Max length 500 characters  # noqa: E501

        :return: The revoke_reason of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._revoke_reason

    @revoke_reason.setter
    def revoke_reason(self, revoke_reason):
        """Sets the revoke_reason of this PermitAssessmentUpdateRequest.

        Required if assessment_status = revoked Max length 500 characters  # noqa: E501

        :param revoke_reason: The revoke_reason of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._revoke_reason = revoke_reason

    @property
    def pending_change_details(self):
        """Gets the pending_change_details of this PermitAssessmentUpdateRequest.  # noqa: E501

        Required if assessment_status = permit_modification_request Max length 500 characters  # noqa: E501

        :return: The pending_change_details of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._pending_change_details

    @pending_change_details.setter
    def pending_change_details(self, pending_change_details):
        """Sets the pending_change_details of this PermitAssessmentUpdateRequest.

        Required if assessment_status = permit_modification_request Max length 500 characters  # noqa: E501

        :param pending_change_details: The pending_change_details of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._pending_change_details = pending_change_details

    @property
    def reasonable_period_end_date(self):
        """Gets the reasonable_period_end_date of this PermitAssessmentUpdateRequest.  # noqa: E501

        Required if is_duration_challenged = true Must be at least 2 working days from start date  # noqa: E501

        :return: The reasonable_period_end_date of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._reasonable_period_end_date

    @reasonable_period_end_date.setter
    def reasonable_period_end_date(self, reasonable_period_end_date):
        """Sets the reasonable_period_end_date of this PermitAssessmentUpdateRequest.

        Required if is_duration_challenged = true Must be at least 2 working days from start date  # noqa: E501

        :param reasonable_period_end_date: The reasonable_period_end_date of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: datetime
        """

        self._reasonable_period_end_date = reasonable_period_end_date

    @property
    def is_duration_challenged(self):
        """Gets the is_duration_challenged of this PermitAssessmentUpdateRequest.  # noqa: E501


        :return: The is_duration_challenged of this PermitAssessmentUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_duration_challenged

    @is_duration_challenged.setter
    def is_duration_challenged(self, is_duration_challenged):
        """Sets the is_duration_challenged of this PermitAssessmentUpdateRequest.


        :param is_duration_challenged: The is_duration_challenged of this PermitAssessmentUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._is_duration_challenged = is_duration_challenged

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitAssessmentUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitAssessmentUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
