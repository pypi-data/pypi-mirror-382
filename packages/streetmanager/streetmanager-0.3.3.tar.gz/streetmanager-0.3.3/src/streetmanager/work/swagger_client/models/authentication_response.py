# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthenticationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_token': 'str',
        'organisation_reference': 'str',
        'access_token': 'str',
        'refresh_token': 'str',
        'session_token': 'str'
    }

    attribute_map = {
        'id_token': 'idToken',
        'organisation_reference': 'organisationReference',
        'access_token': 'accessToken',
        'refresh_token': 'refreshToken',
        'session_token': 'sessionToken'
    }

    def __init__(self, id_token=None, organisation_reference=None, access_token=None, refresh_token=None, session_token=None):  # noqa: E501
        """AuthenticationResponse - a model defined in Swagger"""  # noqa: E501
        self._id_token = None
        self._organisation_reference = None
        self._access_token = None
        self._refresh_token = None
        self._session_token = None
        self.discriminator = None
        if id_token is not None:
            self.id_token = id_token
        if organisation_reference is not None:
            self.organisation_reference = organisation_reference
        if access_token is not None:
            self.access_token = access_token
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if session_token is not None:
            self.session_token = session_token

    @property
    def id_token(self):
        """Gets the id_token of this AuthenticationResponse.  # noqa: E501


        :return: The id_token of this AuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this AuthenticationResponse.


        :param id_token: The id_token of this AuthenticationResponse.  # noqa: E501
        :type: str
        """

        self._id_token = id_token

    @property
    def organisation_reference(self):
        """Gets the organisation_reference of this AuthenticationResponse.  # noqa: E501


        :return: The organisation_reference of this AuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_reference

    @organisation_reference.setter
    def organisation_reference(self, organisation_reference):
        """Sets the organisation_reference of this AuthenticationResponse.


        :param organisation_reference: The organisation_reference of this AuthenticationResponse.  # noqa: E501
        :type: str
        """

        self._organisation_reference = organisation_reference

    @property
    def access_token(self):
        """Gets the access_token of this AuthenticationResponse.  # noqa: E501


        :return: The access_token of this AuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AuthenticationResponse.


        :param access_token: The access_token of this AuthenticationResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AuthenticationResponse.  # noqa: E501


        :return: The refresh_token of this AuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AuthenticationResponse.


        :param refresh_token: The refresh_token of this AuthenticationResponse.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def session_token(self):
        """Gets the session_token of this AuthenticationResponse.  # noqa: E501


        :return: The session_token of this AuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this AuthenticationResponse.


        :param session_token: The session_token of this AuthenticationResponse.  # noqa: E501
        :type: str
        """

        self._session_token = session_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
