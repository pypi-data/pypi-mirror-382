# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permit_reference_number': 'str',
        'proposed_start_date': 'datetime',
        'proposed_end_date': 'datetime',
        'actual_start_date': 'datetime',
        'actual_stop_date': 'datetime',
        'permit_status': 'PermitStatusResponse',
        'permit_status_string': 'str',
        'work_category': 'WorkCategoryResponseEnum',
        'work_category_string': 'str'
    }

    attribute_map = {
        'permit_reference_number': 'permit_reference_number',
        'proposed_start_date': 'proposed_start_date',
        'proposed_end_date': 'proposed_end_date',
        'actual_start_date': 'actual_start_date',
        'actual_stop_date': 'actual_stop_date',
        'permit_status': 'permit_status',
        'permit_status_string': 'permit_status_string',
        'work_category': 'work_category',
        'work_category_string': 'work_category_string'
    }

    def __init__(self, permit_reference_number=None, proposed_start_date=None, proposed_end_date=None, actual_start_date=None, actual_stop_date=None, permit_status=None, permit_status_string=None, work_category=None, work_category_string=None):  # noqa: E501
        """PermitSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._permit_reference_number = None
        self._proposed_start_date = None
        self._proposed_end_date = None
        self._actual_start_date = None
        self._actual_stop_date = None
        self._permit_status = None
        self._permit_status_string = None
        self._work_category = None
        self._work_category_string = None
        self.discriminator = None
        self.permit_reference_number = permit_reference_number
        self.proposed_start_date = proposed_start_date
        self.proposed_end_date = proposed_end_date
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if actual_stop_date is not None:
            self.actual_stop_date = actual_stop_date
        self.permit_status = permit_status
        self.permit_status_string = permit_status_string
        self.work_category = work_category
        self.work_category_string = work_category_string

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this PermitSummaryResponse.  # noqa: E501


        :return: The permit_reference_number of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this PermitSummaryResponse.


        :param permit_reference_number: The permit_reference_number of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def proposed_start_date(self):
        """Gets the proposed_start_date of this PermitSummaryResponse.  # noqa: E501


        :return: The proposed_start_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_date

    @proposed_start_date.setter
    def proposed_start_date(self, proposed_start_date):
        """Sets the proposed_start_date of this PermitSummaryResponse.


        :param proposed_start_date: The proposed_start_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_start_date is None:
            raise ValueError("Invalid value for `proposed_start_date`, must not be `None`")  # noqa: E501

        self._proposed_start_date = proposed_start_date

    @property
    def proposed_end_date(self):
        """Gets the proposed_end_date of this PermitSummaryResponse.  # noqa: E501


        :return: The proposed_end_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_date

    @proposed_end_date.setter
    def proposed_end_date(self, proposed_end_date):
        """Sets the proposed_end_date of this PermitSummaryResponse.


        :param proposed_end_date: The proposed_end_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_end_date is None:
            raise ValueError("Invalid value for `proposed_end_date`, must not be `None`")  # noqa: E501

        self._proposed_end_date = proposed_end_date

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this PermitSummaryResponse.  # noqa: E501


        :return: The actual_start_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this PermitSummaryResponse.


        :param actual_start_date: The actual_start_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._actual_start_date = actual_start_date

    @property
    def actual_stop_date(self):
        """Gets the actual_stop_date of this PermitSummaryResponse.  # noqa: E501


        :return: The actual_stop_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_stop_date

    @actual_stop_date.setter
    def actual_stop_date(self, actual_stop_date):
        """Sets the actual_stop_date of this PermitSummaryResponse.


        :param actual_stop_date: The actual_stop_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._actual_stop_date = actual_stop_date

    @property
    def permit_status(self):
        """Gets the permit_status of this PermitSummaryResponse.  # noqa: E501


        :return: The permit_status of this PermitSummaryResponse.  # noqa: E501
        :rtype: PermitStatusResponse
        """
        return self._permit_status

    @permit_status.setter
    def permit_status(self, permit_status):
        """Sets the permit_status of this PermitSummaryResponse.


        :param permit_status: The permit_status of this PermitSummaryResponse.  # noqa: E501
        :type: PermitStatusResponse
        """
        if permit_status is None:
            raise ValueError("Invalid value for `permit_status`, must not be `None`")  # noqa: E501

        self._permit_status = permit_status

    @property
    def permit_status_string(self):
        """Gets the permit_status_string of this PermitSummaryResponse.  # noqa: E501


        :return: The permit_status_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_status_string

    @permit_status_string.setter
    def permit_status_string(self, permit_status_string):
        """Sets the permit_status_string of this PermitSummaryResponse.


        :param permit_status_string: The permit_status_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if permit_status_string is None:
            raise ValueError("Invalid value for `permit_status_string`, must not be `None`")  # noqa: E501

        self._permit_status_string = permit_status_string

    @property
    def work_category(self):
        """Gets the work_category of this PermitSummaryResponse.  # noqa: E501


        :return: The work_category of this PermitSummaryResponse.  # noqa: E501
        :rtype: WorkCategoryResponseEnum
        """
        return self._work_category

    @work_category.setter
    def work_category(self, work_category):
        """Sets the work_category of this PermitSummaryResponse.


        :param work_category: The work_category of this PermitSummaryResponse.  # noqa: E501
        :type: WorkCategoryResponseEnum
        """
        if work_category is None:
            raise ValueError("Invalid value for `work_category`, must not be `None`")  # noqa: E501

        self._work_category = work_category

    @property
    def work_category_string(self):
        """Gets the work_category_string of this PermitSummaryResponse.  # noqa: E501


        :return: The work_category_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_category_string

    @work_category_string.setter
    def work_category_string(self, work_category_string):
        """Sets the work_category_string of this PermitSummaryResponse.


        :param work_category_string: The work_category_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_category_string is None:
            raise ValueError("Invalid value for `work_category_string`, must not be `None`")  # noqa: E501

        self._work_category_string = work_category_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
