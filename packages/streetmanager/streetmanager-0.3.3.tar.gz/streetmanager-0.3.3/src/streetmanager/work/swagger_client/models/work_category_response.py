# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkCategoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_category': 'WorkCategoryResponseEnum',
        'work_category_string': 'str',
        'duration': 'DurationCalculationResponse',
        'validity_period_end_date': 'datetime',
        'is_early_start': 'bool'
    }

    attribute_map = {
        'work_category': 'work_category',
        'work_category_string': 'work_category_string',
        'duration': 'duration',
        'validity_period_end_date': 'validity_period_end_date',
        'is_early_start': 'is_early_start'
    }

    def __init__(self, work_category=None, work_category_string=None, duration=None, validity_period_end_date=None, is_early_start=None):  # noqa: E501
        """WorkCategoryResponse - a model defined in Swagger"""  # noqa: E501
        self._work_category = None
        self._work_category_string = None
        self._duration = None
        self._validity_period_end_date = None
        self._is_early_start = None
        self.discriminator = None
        self.work_category = work_category
        self.work_category_string = work_category_string
        self.duration = duration
        self.validity_period_end_date = validity_period_end_date
        self.is_early_start = is_early_start

    @property
    def work_category(self):
        """Gets the work_category of this WorkCategoryResponse.  # noqa: E501


        :return: The work_category of this WorkCategoryResponse.  # noqa: E501
        :rtype: WorkCategoryResponseEnum
        """
        return self._work_category

    @work_category.setter
    def work_category(self, work_category):
        """Sets the work_category of this WorkCategoryResponse.


        :param work_category: The work_category of this WorkCategoryResponse.  # noqa: E501
        :type: WorkCategoryResponseEnum
        """
        if work_category is None:
            raise ValueError("Invalid value for `work_category`, must not be `None`")  # noqa: E501

        self._work_category = work_category

    @property
    def work_category_string(self):
        """Gets the work_category_string of this WorkCategoryResponse.  # noqa: E501


        :return: The work_category_string of this WorkCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_category_string

    @work_category_string.setter
    def work_category_string(self, work_category_string):
        """Sets the work_category_string of this WorkCategoryResponse.


        :param work_category_string: The work_category_string of this WorkCategoryResponse.  # noqa: E501
        :type: str
        """
        if work_category_string is None:
            raise ValueError("Invalid value for `work_category_string`, must not be `None`")  # noqa: E501

        self._work_category_string = work_category_string

    @property
    def duration(self):
        """Gets the duration of this WorkCategoryResponse.  # noqa: E501


        :return: The duration of this WorkCategoryResponse.  # noqa: E501
        :rtype: DurationCalculationResponse
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this WorkCategoryResponse.


        :param duration: The duration of this WorkCategoryResponse.  # noqa: E501
        :type: DurationCalculationResponse
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def validity_period_end_date(self):
        """Gets the validity_period_end_date of this WorkCategoryResponse.  # noqa: E501


        :return: The validity_period_end_date of this WorkCategoryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_period_end_date

    @validity_period_end_date.setter
    def validity_period_end_date(self, validity_period_end_date):
        """Sets the validity_period_end_date of this WorkCategoryResponse.


        :param validity_period_end_date: The validity_period_end_date of this WorkCategoryResponse.  # noqa: E501
        :type: datetime
        """
        if validity_period_end_date is None:
            raise ValueError("Invalid value for `validity_period_end_date`, must not be `None`")  # noqa: E501

        self._validity_period_end_date = validity_period_end_date

    @property
    def is_early_start(self):
        """Gets the is_early_start of this WorkCategoryResponse.  # noqa: E501


        :return: The is_early_start of this WorkCategoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_early_start

    @is_early_start.setter
    def is_early_start(self, is_early_start):
        """Sets the is_early_start of this WorkCategoryResponse.


        :param is_early_start: The is_early_start of this WorkCategoryResponse.  # noqa: E501
        :type: bool
        """
        if is_early_start is None:
            raise ValueError("Invalid value for `is_early_start`, must not be `None`")  # noqa: E501

        self._is_early_start = is_early_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkCategoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkCategoryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
