# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterialClassificationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'material_classification_reference_number': 'str',
        'material_classification_coordinates': 'object',
        'material_classification_classification': 'MaterialClassificationClassificationResponse',
        'material_classification_classification_string': 'str',
        'hazardous_material_type': 'list[HazardousMaterialTypeResponse]',
        'hazardous_material_type_string': 'list[str]',
        'hazardous_material_type_other_description': 'str',
        'layer_affected': 'list[LayerAffectedResponse]',
        'layer_affected_string': 'list[str]',
        'location_types': 'list[LocationTypeResponse]',
        'location_types_string': 'list[str]',
        'sample_date': 'datetime',
        'location_description': 'str',
        'date_created': 'datetime',
        'ha_swa_code': 'str',
        'ha_organisation_name': 'str',
        'usrn': 'float',
        'street_name': 'str',
        'town': 'str',
        'area_name': 'str',
        'raised_by_swa_code': 'str',
        'raised_by_organisation_name': 'str',
        'file': 'AllOfMaterialClassificationResponseFile'
    }

    attribute_map = {
        'material_classification_reference_number': 'material_classification_reference_number',
        'material_classification_coordinates': 'material_classification_coordinates',
        'material_classification_classification': 'material_classification_classification',
        'material_classification_classification_string': 'material_classification_classification_string',
        'hazardous_material_type': 'hazardous_material_type',
        'hazardous_material_type_string': 'hazardous_material_type_string',
        'hazardous_material_type_other_description': 'hazardous_material_type_other_description',
        'layer_affected': 'layer_affected',
        'layer_affected_string': 'layer_affected_string',
        'location_types': 'location_types',
        'location_types_string': 'location_types_string',
        'sample_date': 'sample_date',
        'location_description': 'location_description',
        'date_created': 'date_created',
        'ha_swa_code': 'ha_swa_code',
        'ha_organisation_name': 'ha_organisation_name',
        'usrn': 'usrn',
        'street_name': 'street_name',
        'town': 'town',
        'area_name': 'area_name',
        'raised_by_swa_code': 'raised_by_swa_code',
        'raised_by_organisation_name': 'raised_by_organisation_name',
        'file': 'file'
    }

    def __init__(self, material_classification_reference_number=None, material_classification_coordinates=None, material_classification_classification=None, material_classification_classification_string=None, hazardous_material_type=None, hazardous_material_type_string=None, hazardous_material_type_other_description=None, layer_affected=None, layer_affected_string=None, location_types=None, location_types_string=None, sample_date=None, location_description=None, date_created=None, ha_swa_code=None, ha_organisation_name=None, usrn=None, street_name=None, town=None, area_name=None, raised_by_swa_code=None, raised_by_organisation_name=None, file=None):  # noqa: E501
        """MaterialClassificationResponse - a model defined in Swagger"""  # noqa: E501
        self._material_classification_reference_number = None
        self._material_classification_coordinates = None
        self._material_classification_classification = None
        self._material_classification_classification_string = None
        self._hazardous_material_type = None
        self._hazardous_material_type_string = None
        self._hazardous_material_type_other_description = None
        self._layer_affected = None
        self._layer_affected_string = None
        self._location_types = None
        self._location_types_string = None
        self._sample_date = None
        self._location_description = None
        self._date_created = None
        self._ha_swa_code = None
        self._ha_organisation_name = None
        self._usrn = None
        self._street_name = None
        self._town = None
        self._area_name = None
        self._raised_by_swa_code = None
        self._raised_by_organisation_name = None
        self._file = None
        self.discriminator = None
        self.material_classification_reference_number = material_classification_reference_number
        self.material_classification_coordinates = material_classification_coordinates
        self.material_classification_classification = material_classification_classification
        self.material_classification_classification_string = material_classification_classification_string
        if hazardous_material_type is not None:
            self.hazardous_material_type = hazardous_material_type
        if hazardous_material_type_string is not None:
            self.hazardous_material_type_string = hazardous_material_type_string
        if hazardous_material_type_other_description is not None:
            self.hazardous_material_type_other_description = hazardous_material_type_other_description
        self.layer_affected = layer_affected
        self.layer_affected_string = layer_affected_string
        self.location_types = location_types
        self.location_types_string = location_types_string
        self.sample_date = sample_date
        self.location_description = location_description
        self.date_created = date_created
        self.ha_swa_code = ha_swa_code
        self.ha_organisation_name = ha_organisation_name
        self.usrn = usrn
        self.street_name = street_name
        if town is not None:
            self.town = town
        if area_name is not None:
            self.area_name = area_name
        self.raised_by_swa_code = raised_by_swa_code
        self.raised_by_organisation_name = raised_by_organisation_name
        if file is not None:
            self.file = file

    @property
    def material_classification_reference_number(self):
        """Gets the material_classification_reference_number of this MaterialClassificationResponse.  # noqa: E501


        :return: The material_classification_reference_number of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._material_classification_reference_number

    @material_classification_reference_number.setter
    def material_classification_reference_number(self, material_classification_reference_number):
        """Sets the material_classification_reference_number of this MaterialClassificationResponse.


        :param material_classification_reference_number: The material_classification_reference_number of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if material_classification_reference_number is None:
            raise ValueError("Invalid value for `material_classification_reference_number`, must not be `None`")  # noqa: E501

        self._material_classification_reference_number = material_classification_reference_number

    @property
    def material_classification_coordinates(self):
        """Gets the material_classification_coordinates of this MaterialClassificationResponse.  # noqa: E501


        :return: The material_classification_coordinates of this MaterialClassificationResponse.  # noqa: E501
        :rtype: object
        """
        return self._material_classification_coordinates

    @material_classification_coordinates.setter
    def material_classification_coordinates(self, material_classification_coordinates):
        """Sets the material_classification_coordinates of this MaterialClassificationResponse.


        :param material_classification_coordinates: The material_classification_coordinates of this MaterialClassificationResponse.  # noqa: E501
        :type: object
        """
        if material_classification_coordinates is None:
            raise ValueError("Invalid value for `material_classification_coordinates`, must not be `None`")  # noqa: E501

        self._material_classification_coordinates = material_classification_coordinates

    @property
    def material_classification_classification(self):
        """Gets the material_classification_classification of this MaterialClassificationResponse.  # noqa: E501


        :return: The material_classification_classification of this MaterialClassificationResponse.  # noqa: E501
        :rtype: MaterialClassificationClassificationResponse
        """
        return self._material_classification_classification

    @material_classification_classification.setter
    def material_classification_classification(self, material_classification_classification):
        """Sets the material_classification_classification of this MaterialClassificationResponse.


        :param material_classification_classification: The material_classification_classification of this MaterialClassificationResponse.  # noqa: E501
        :type: MaterialClassificationClassificationResponse
        """
        if material_classification_classification is None:
            raise ValueError("Invalid value for `material_classification_classification`, must not be `None`")  # noqa: E501

        self._material_classification_classification = material_classification_classification

    @property
    def material_classification_classification_string(self):
        """Gets the material_classification_classification_string of this MaterialClassificationResponse.  # noqa: E501


        :return: The material_classification_classification_string of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._material_classification_classification_string

    @material_classification_classification_string.setter
    def material_classification_classification_string(self, material_classification_classification_string):
        """Sets the material_classification_classification_string of this MaterialClassificationResponse.


        :param material_classification_classification_string: The material_classification_classification_string of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if material_classification_classification_string is None:
            raise ValueError("Invalid value for `material_classification_classification_string`, must not be `None`")  # noqa: E501

        self._material_classification_classification_string = material_classification_classification_string

    @property
    def hazardous_material_type(self):
        """Gets the hazardous_material_type of this MaterialClassificationResponse.  # noqa: E501


        :return: The hazardous_material_type of this MaterialClassificationResponse.  # noqa: E501
        :rtype: list[HazardousMaterialTypeResponse]
        """
        return self._hazardous_material_type

    @hazardous_material_type.setter
    def hazardous_material_type(self, hazardous_material_type):
        """Sets the hazardous_material_type of this MaterialClassificationResponse.


        :param hazardous_material_type: The hazardous_material_type of this MaterialClassificationResponse.  # noqa: E501
        :type: list[HazardousMaterialTypeResponse]
        """

        self._hazardous_material_type = hazardous_material_type

    @property
    def hazardous_material_type_string(self):
        """Gets the hazardous_material_type_string of this MaterialClassificationResponse.  # noqa: E501


        :return: The hazardous_material_type_string of this MaterialClassificationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._hazardous_material_type_string

    @hazardous_material_type_string.setter
    def hazardous_material_type_string(self, hazardous_material_type_string):
        """Sets the hazardous_material_type_string of this MaterialClassificationResponse.


        :param hazardous_material_type_string: The hazardous_material_type_string of this MaterialClassificationResponse.  # noqa: E501
        :type: list[str]
        """

        self._hazardous_material_type_string = hazardous_material_type_string

    @property
    def hazardous_material_type_other_description(self):
        """Gets the hazardous_material_type_other_description of this MaterialClassificationResponse.  # noqa: E501


        :return: The hazardous_material_type_other_description of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._hazardous_material_type_other_description

    @hazardous_material_type_other_description.setter
    def hazardous_material_type_other_description(self, hazardous_material_type_other_description):
        """Sets the hazardous_material_type_other_description of this MaterialClassificationResponse.


        :param hazardous_material_type_other_description: The hazardous_material_type_other_description of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """

        self._hazardous_material_type_other_description = hazardous_material_type_other_description

    @property
    def layer_affected(self):
        """Gets the layer_affected of this MaterialClassificationResponse.  # noqa: E501


        :return: The layer_affected of this MaterialClassificationResponse.  # noqa: E501
        :rtype: list[LayerAffectedResponse]
        """
        return self._layer_affected

    @layer_affected.setter
    def layer_affected(self, layer_affected):
        """Sets the layer_affected of this MaterialClassificationResponse.


        :param layer_affected: The layer_affected of this MaterialClassificationResponse.  # noqa: E501
        :type: list[LayerAffectedResponse]
        """
        if layer_affected is None:
            raise ValueError("Invalid value for `layer_affected`, must not be `None`")  # noqa: E501

        self._layer_affected = layer_affected

    @property
    def layer_affected_string(self):
        """Gets the layer_affected_string of this MaterialClassificationResponse.  # noqa: E501


        :return: The layer_affected_string of this MaterialClassificationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._layer_affected_string

    @layer_affected_string.setter
    def layer_affected_string(self, layer_affected_string):
        """Sets the layer_affected_string of this MaterialClassificationResponse.


        :param layer_affected_string: The layer_affected_string of this MaterialClassificationResponse.  # noqa: E501
        :type: list[str]
        """
        if layer_affected_string is None:
            raise ValueError("Invalid value for `layer_affected_string`, must not be `None`")  # noqa: E501

        self._layer_affected_string = layer_affected_string

    @property
    def location_types(self):
        """Gets the location_types of this MaterialClassificationResponse.  # noqa: E501


        :return: The location_types of this MaterialClassificationResponse.  # noqa: E501
        :rtype: list[LocationTypeResponse]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this MaterialClassificationResponse.


        :param location_types: The location_types of this MaterialClassificationResponse.  # noqa: E501
        :type: list[LocationTypeResponse]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def location_types_string(self):
        """Gets the location_types_string of this MaterialClassificationResponse.  # noqa: E501


        :return: The location_types_string of this MaterialClassificationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_types_string

    @location_types_string.setter
    def location_types_string(self, location_types_string):
        """Sets the location_types_string of this MaterialClassificationResponse.


        :param location_types_string: The location_types_string of this MaterialClassificationResponse.  # noqa: E501
        :type: list[str]
        """
        if location_types_string is None:
            raise ValueError("Invalid value for `location_types_string`, must not be `None`")  # noqa: E501

        self._location_types_string = location_types_string

    @property
    def sample_date(self):
        """Gets the sample_date of this MaterialClassificationResponse.  # noqa: E501


        :return: The sample_date of this MaterialClassificationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date

    @sample_date.setter
    def sample_date(self, sample_date):
        """Sets the sample_date of this MaterialClassificationResponse.


        :param sample_date: The sample_date of this MaterialClassificationResponse.  # noqa: E501
        :type: datetime
        """
        if sample_date is None:
            raise ValueError("Invalid value for `sample_date`, must not be `None`")  # noqa: E501

        self._sample_date = sample_date

    @property
    def location_description(self):
        """Gets the location_description of this MaterialClassificationResponse.  # noqa: E501


        :return: The location_description of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this MaterialClassificationResponse.


        :param location_description: The location_description of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def date_created(self):
        """Gets the date_created of this MaterialClassificationResponse.  # noqa: E501


        :return: The date_created of this MaterialClassificationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MaterialClassificationResponse.


        :param date_created: The date_created of this MaterialClassificationResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def ha_swa_code(self):
        """Gets the ha_swa_code of this MaterialClassificationResponse.  # noqa: E501


        :return: The ha_swa_code of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_swa_code

    @ha_swa_code.setter
    def ha_swa_code(self, ha_swa_code):
        """Sets the ha_swa_code of this MaterialClassificationResponse.


        :param ha_swa_code: The ha_swa_code of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if ha_swa_code is None:
            raise ValueError("Invalid value for `ha_swa_code`, must not be `None`")  # noqa: E501

        self._ha_swa_code = ha_swa_code

    @property
    def ha_organisation_name(self):
        """Gets the ha_organisation_name of this MaterialClassificationResponse.  # noqa: E501


        :return: The ha_organisation_name of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_organisation_name

    @ha_organisation_name.setter
    def ha_organisation_name(self, ha_organisation_name):
        """Sets the ha_organisation_name of this MaterialClassificationResponse.


        :param ha_organisation_name: The ha_organisation_name of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if ha_organisation_name is None:
            raise ValueError("Invalid value for `ha_organisation_name`, must not be `None`")  # noqa: E501

        self._ha_organisation_name = ha_organisation_name

    @property
    def usrn(self):
        """Gets the usrn of this MaterialClassificationResponse.  # noqa: E501


        :return: The usrn of this MaterialClassificationResponse.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this MaterialClassificationResponse.


        :param usrn: The usrn of this MaterialClassificationResponse.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def street_name(self):
        """Gets the street_name of this MaterialClassificationResponse.  # noqa: E501


        :return: The street_name of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this MaterialClassificationResponse.


        :param street_name: The street_name of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if street_name is None:
            raise ValueError("Invalid value for `street_name`, must not be `None`")  # noqa: E501

        self._street_name = street_name

    @property
    def town(self):
        """Gets the town of this MaterialClassificationResponse.  # noqa: E501


        :return: The town of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this MaterialClassificationResponse.


        :param town: The town of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area_name(self):
        """Gets the area_name of this MaterialClassificationResponse.  # noqa: E501


        :return: The area_name of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this MaterialClassificationResponse.


        :param area_name: The area_name of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def raised_by_swa_code(self):
        """Gets the raised_by_swa_code of this MaterialClassificationResponse.  # noqa: E501


        :return: The raised_by_swa_code of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._raised_by_swa_code

    @raised_by_swa_code.setter
    def raised_by_swa_code(self, raised_by_swa_code):
        """Sets the raised_by_swa_code of this MaterialClassificationResponse.


        :param raised_by_swa_code: The raised_by_swa_code of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if raised_by_swa_code is None:
            raise ValueError("Invalid value for `raised_by_swa_code`, must not be `None`")  # noqa: E501

        self._raised_by_swa_code = raised_by_swa_code

    @property
    def raised_by_organisation_name(self):
        """Gets the raised_by_organisation_name of this MaterialClassificationResponse.  # noqa: E501


        :return: The raised_by_organisation_name of this MaterialClassificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._raised_by_organisation_name

    @raised_by_organisation_name.setter
    def raised_by_organisation_name(self, raised_by_organisation_name):
        """Sets the raised_by_organisation_name of this MaterialClassificationResponse.


        :param raised_by_organisation_name: The raised_by_organisation_name of this MaterialClassificationResponse.  # noqa: E501
        :type: str
        """
        if raised_by_organisation_name is None:
            raise ValueError("Invalid value for `raised_by_organisation_name`, must not be `None`")  # noqa: E501

        self._raised_by_organisation_name = raised_by_organisation_name

    @property
    def file(self):
        """Gets the file of this MaterialClassificationResponse.  # noqa: E501


        :return: The file of this MaterialClassificationResponse.  # noqa: E501
        :rtype: AllOfMaterialClassificationResponseFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this MaterialClassificationResponse.


        :param file: The file of this MaterialClassificationResponse.  # noqa: E501
        :type: AllOfMaterialClassificationResponseFile
        """

        self._file = file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterialClassificationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialClassificationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
