# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduledInspectionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'scheduled_inspection_type': 'InspectionType',
        'scheduled_inspection_category': 'AllOfScheduledInspectionCreateRequestScheduledInspectionCategory',
        'scheduled_inspection_date': 'datetime',
        'scheduled_inspection_date_time': 'datetime'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'scheduled_inspection_type': 'scheduled_inspection_type',
        'scheduled_inspection_category': 'scheduled_inspection_category',
        'scheduled_inspection_date': 'scheduled_inspection_date',
        'scheduled_inspection_date_time': 'scheduled_inspection_date_time'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, scheduled_inspection_type=None, scheduled_inspection_category=None, scheduled_inspection_date=None, scheduled_inspection_date_time=None):  # noqa: E501
        """ScheduledInspectionCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._scheduled_inspection_type = None
        self._scheduled_inspection_category = None
        self._scheduled_inspection_date = None
        self._scheduled_inspection_date_time = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.scheduled_inspection_type = scheduled_inspection_type
        if scheduled_inspection_category is not None:
            self.scheduled_inspection_category = scheduled_inspection_category
        self.scheduled_inspection_date = scheduled_inspection_date
        if scheduled_inspection_date_time is not None:
            self.scheduled_inspection_date_time = scheduled_inspection_date_time

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this ScheduledInspectionCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this ScheduledInspectionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this ScheduledInspectionCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this ScheduledInspectionCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this ScheduledInspectionCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this ScheduledInspectionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this ScheduledInspectionCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this ScheduledInspectionCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def scheduled_inspection_type(self):
        """Gets the scheduled_inspection_type of this ScheduledInspectionCreateRequest.  # noqa: E501


        :return: The scheduled_inspection_type of this ScheduledInspectionCreateRequest.  # noqa: E501
        :rtype: InspectionType
        """
        return self._scheduled_inspection_type

    @scheduled_inspection_type.setter
    def scheduled_inspection_type(self, scheduled_inspection_type):
        """Sets the scheduled_inspection_type of this ScheduledInspectionCreateRequest.


        :param scheduled_inspection_type: The scheduled_inspection_type of this ScheduledInspectionCreateRequest.  # noqa: E501
        :type: InspectionType
        """
        if scheduled_inspection_type is None:
            raise ValueError("Invalid value for `scheduled_inspection_type`, must not be `None`")  # noqa: E501

        self._scheduled_inspection_type = scheduled_inspection_type

    @property
    def scheduled_inspection_category(self):
        """Gets the scheduled_inspection_category of this ScheduledInspectionCreateRequest.  # noqa: E501

        See business rules section 10.2 - Inspection types and categories  # noqa: E501

        :return: The scheduled_inspection_category of this ScheduledInspectionCreateRequest.  # noqa: E501
        :rtype: AllOfScheduledInspectionCreateRequestScheduledInspectionCategory
        """
        return self._scheduled_inspection_category

    @scheduled_inspection_category.setter
    def scheduled_inspection_category(self, scheduled_inspection_category):
        """Sets the scheduled_inspection_category of this ScheduledInspectionCreateRequest.

        See business rules section 10.2 - Inspection types and categories  # noqa: E501

        :param scheduled_inspection_category: The scheduled_inspection_category of this ScheduledInspectionCreateRequest.  # noqa: E501
        :type: AllOfScheduledInspectionCreateRequestScheduledInspectionCategory
        """

        self._scheduled_inspection_category = scheduled_inspection_category

    @property
    def scheduled_inspection_date(self):
        """Gets the scheduled_inspection_date of this ScheduledInspectionCreateRequest.  # noqa: E501

        Date must occur today or a date in the future  # noqa: E501

        :return: The scheduled_inspection_date of this ScheduledInspectionCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_inspection_date

    @scheduled_inspection_date.setter
    def scheduled_inspection_date(self, scheduled_inspection_date):
        """Sets the scheduled_inspection_date of this ScheduledInspectionCreateRequest.

        Date must occur today or a date in the future  # noqa: E501

        :param scheduled_inspection_date: The scheduled_inspection_date of this ScheduledInspectionCreateRequest.  # noqa: E501
        :type: datetime
        """
        if scheduled_inspection_date is None:
            raise ValueError("Invalid value for `scheduled_inspection_date`, must not be `None`")  # noqa: E501

        self._scheduled_inspection_date = scheduled_inspection_date

    @property
    def scheduled_inspection_date_time(self):
        """Gets the scheduled_inspection_date_time of this ScheduledInspectionCreateRequest.  # noqa: E501

        The date for scheduled_inspection_date_time must match the date for scheduled_inspection_date Time must occur today or a date in the future  # noqa: E501

        :return: The scheduled_inspection_date_time of this ScheduledInspectionCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_inspection_date_time

    @scheduled_inspection_date_time.setter
    def scheduled_inspection_date_time(self, scheduled_inspection_date_time):
        """Sets the scheduled_inspection_date_time of this ScheduledInspectionCreateRequest.

        The date for scheduled_inspection_date_time must match the date for scheduled_inspection_date Time must occur today or a date in the future  # noqa: E501

        :param scheduled_inspection_date_time: The scheduled_inspection_date_time of this ScheduledInspectionCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._scheduled_inspection_date_time = scheduled_inspection_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledInspectionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledInspectionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
