# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FPNSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fpn_reference_number': 'str',
        'fpn_offence_type': 'OffenceCodeResponse',
        'fpn_offence_type_string': 'str',
        'issue_date_time': 'datetime',
        'fpn_status': 'FPNStatusResponse',
        'fpn_status_string': 'str',
        'status_changed_date': 'datetime'
    }

    attribute_map = {
        'fpn_reference_number': 'fpn_reference_number',
        'fpn_offence_type': 'fpn_offence_type',
        'fpn_offence_type_string': 'fpn_offence_type_string',
        'issue_date_time': 'issue_date_time',
        'fpn_status': 'fpn_status',
        'fpn_status_string': 'fpn_status_string',
        'status_changed_date': 'status_changed_date'
    }

    def __init__(self, fpn_reference_number=None, fpn_offence_type=None, fpn_offence_type_string=None, issue_date_time=None, fpn_status=None, fpn_status_string=None, status_changed_date=None):  # noqa: E501
        """FPNSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._fpn_reference_number = None
        self._fpn_offence_type = None
        self._fpn_offence_type_string = None
        self._issue_date_time = None
        self._fpn_status = None
        self._fpn_status_string = None
        self._status_changed_date = None
        self.discriminator = None
        self.fpn_reference_number = fpn_reference_number
        self.fpn_offence_type = fpn_offence_type
        self.fpn_offence_type_string = fpn_offence_type_string
        self.issue_date_time = issue_date_time
        self.fpn_status = fpn_status
        self.fpn_status_string = fpn_status_string
        self.status_changed_date = status_changed_date

    @property
    def fpn_reference_number(self):
        """Gets the fpn_reference_number of this FPNSummaryResponse.  # noqa: E501


        :return: The fpn_reference_number of this FPNSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._fpn_reference_number

    @fpn_reference_number.setter
    def fpn_reference_number(self, fpn_reference_number):
        """Sets the fpn_reference_number of this FPNSummaryResponse.


        :param fpn_reference_number: The fpn_reference_number of this FPNSummaryResponse.  # noqa: E501
        :type: str
        """
        if fpn_reference_number is None:
            raise ValueError("Invalid value for `fpn_reference_number`, must not be `None`")  # noqa: E501

        self._fpn_reference_number = fpn_reference_number

    @property
    def fpn_offence_type(self):
        """Gets the fpn_offence_type of this FPNSummaryResponse.  # noqa: E501


        :return: The fpn_offence_type of this FPNSummaryResponse.  # noqa: E501
        :rtype: OffenceCodeResponse
        """
        return self._fpn_offence_type

    @fpn_offence_type.setter
    def fpn_offence_type(self, fpn_offence_type):
        """Sets the fpn_offence_type of this FPNSummaryResponse.


        :param fpn_offence_type: The fpn_offence_type of this FPNSummaryResponse.  # noqa: E501
        :type: OffenceCodeResponse
        """
        if fpn_offence_type is None:
            raise ValueError("Invalid value for `fpn_offence_type`, must not be `None`")  # noqa: E501

        self._fpn_offence_type = fpn_offence_type

    @property
    def fpn_offence_type_string(self):
        """Gets the fpn_offence_type_string of this FPNSummaryResponse.  # noqa: E501


        :return: The fpn_offence_type_string of this FPNSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._fpn_offence_type_string

    @fpn_offence_type_string.setter
    def fpn_offence_type_string(self, fpn_offence_type_string):
        """Sets the fpn_offence_type_string of this FPNSummaryResponse.


        :param fpn_offence_type_string: The fpn_offence_type_string of this FPNSummaryResponse.  # noqa: E501
        :type: str
        """
        if fpn_offence_type_string is None:
            raise ValueError("Invalid value for `fpn_offence_type_string`, must not be `None`")  # noqa: E501

        self._fpn_offence_type_string = fpn_offence_type_string

    @property
    def issue_date_time(self):
        """Gets the issue_date_time of this FPNSummaryResponse.  # noqa: E501


        :return: The issue_date_time of this FPNSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date_time

    @issue_date_time.setter
    def issue_date_time(self, issue_date_time):
        """Sets the issue_date_time of this FPNSummaryResponse.


        :param issue_date_time: The issue_date_time of this FPNSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if issue_date_time is None:
            raise ValueError("Invalid value for `issue_date_time`, must not be `None`")  # noqa: E501

        self._issue_date_time = issue_date_time

    @property
    def fpn_status(self):
        """Gets the fpn_status of this FPNSummaryResponse.  # noqa: E501


        :return: The fpn_status of this FPNSummaryResponse.  # noqa: E501
        :rtype: FPNStatusResponse
        """
        return self._fpn_status

    @fpn_status.setter
    def fpn_status(self, fpn_status):
        """Sets the fpn_status of this FPNSummaryResponse.


        :param fpn_status: The fpn_status of this FPNSummaryResponse.  # noqa: E501
        :type: FPNStatusResponse
        """
        if fpn_status is None:
            raise ValueError("Invalid value for `fpn_status`, must not be `None`")  # noqa: E501

        self._fpn_status = fpn_status

    @property
    def fpn_status_string(self):
        """Gets the fpn_status_string of this FPNSummaryResponse.  # noqa: E501


        :return: The fpn_status_string of this FPNSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._fpn_status_string

    @fpn_status_string.setter
    def fpn_status_string(self, fpn_status_string):
        """Sets the fpn_status_string of this FPNSummaryResponse.


        :param fpn_status_string: The fpn_status_string of this FPNSummaryResponse.  # noqa: E501
        :type: str
        """
        if fpn_status_string is None:
            raise ValueError("Invalid value for `fpn_status_string`, must not be `None`")  # noqa: E501

        self._fpn_status_string = fpn_status_string

    @property
    def status_changed_date(self):
        """Gets the status_changed_date of this FPNSummaryResponse.  # noqa: E501


        :return: The status_changed_date of this FPNSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date

    @status_changed_date.setter
    def status_changed_date(self, status_changed_date):
        """Sets the status_changed_date of this FPNSummaryResponse.


        :param status_changed_date: The status_changed_date of this FPNSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if status_changed_date is None:
            raise ValueError("Invalid value for `status_changed_date`, must not be `None`")  # noqa: E501

        self._status_changed_date = status_changed_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FPNSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FPNSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
