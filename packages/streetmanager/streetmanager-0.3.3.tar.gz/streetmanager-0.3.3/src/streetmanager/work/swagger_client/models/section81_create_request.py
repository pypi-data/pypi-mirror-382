# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Section81CreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'promoter_swa_code': 'str',
        'highway_authority_swa_code': 'str',
        'works_coordinates': 'object',
        'street_name': 'str',
        'town': 'str',
        'area_name': 'str',
        'usrn': 'float',
        'road_category': 'float',
        'location_description': 'str',
        'location_types': 'list[LocationType]',
        'inspection_date': 'datetime',
        'section_81_type': 'Section81Type',
        'section_81_severity': 'AllOfSection81CreateRequestSection81Severity',
        'made_safe_by_ha': 'bool',
        'inspector_name': 'str',
        'inspector_contact_number': 'str',
        'additional_details': 'str',
        'other_type_details': 'str',
        'reinspection_date': 'datetime',
        'reinspection_date_time': 'datetime',
        'section_81_evidence': 'bool',
        'file_ids': 'list[float]'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'promoter_swa_code': 'promoter_swa_code',
        'highway_authority_swa_code': 'highway_authority_swa_code',
        'works_coordinates': 'works_coordinates',
        'street_name': 'street_name',
        'town': 'town',
        'area_name': 'area_name',
        'usrn': 'usrn',
        'road_category': 'road_category',
        'location_description': 'location_description',
        'location_types': 'location_types',
        'inspection_date': 'inspection_date',
        'section_81_type': 'section_81_type',
        'section_81_severity': 'section_81_severity',
        'made_safe_by_ha': 'made_safe_by_ha',
        'inspector_name': 'inspector_name',
        'inspector_contact_number': 'inspector_contact_number',
        'additional_details': 'additional_details',
        'other_type_details': 'other_type_details',
        'reinspection_date': 'reinspection_date',
        'reinspection_date_time': 'reinspection_date_time',
        'section_81_evidence': 'section_81_evidence',
        'file_ids': 'file_ids'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, promoter_swa_code=None, highway_authority_swa_code=None, works_coordinates=None, street_name=None, town=None, area_name=None, usrn=None, road_category=None, location_description=None, location_types=None, inspection_date=None, section_81_type=None, section_81_severity=None, made_safe_by_ha=None, inspector_name=None, inspector_contact_number=None, additional_details=None, other_type_details=None, reinspection_date=None, reinspection_date_time=None, section_81_evidence=None, file_ids=None):  # noqa: E501
        """Section81CreateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._promoter_swa_code = None
        self._highway_authority_swa_code = None
        self._works_coordinates = None
        self._street_name = None
        self._town = None
        self._area_name = None
        self._usrn = None
        self._road_category = None
        self._location_description = None
        self._location_types = None
        self._inspection_date = None
        self._section_81_type = None
        self._section_81_severity = None
        self._made_safe_by_ha = None
        self._inspector_name = None
        self._inspector_contact_number = None
        self._additional_details = None
        self._other_type_details = None
        self._reinspection_date = None
        self._reinspection_date_time = None
        self._section_81_evidence = None
        self._file_ids = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.promoter_swa_code = promoter_swa_code
        self.highway_authority_swa_code = highway_authority_swa_code
        self.works_coordinates = works_coordinates
        if street_name is not None:
            self.street_name = street_name
        if town is not None:
            self.town = town
        if area_name is not None:
            self.area_name = area_name
        self.usrn = usrn
        if road_category is not None:
            self.road_category = road_category
        self.location_description = location_description
        self.location_types = location_types
        self.inspection_date = inspection_date
        self.section_81_type = section_81_type
        if section_81_severity is not None:
            self.section_81_severity = section_81_severity
        if made_safe_by_ha is not None:
            self.made_safe_by_ha = made_safe_by_ha
        if inspector_name is not None:
            self.inspector_name = inspector_name
        if inspector_contact_number is not None:
            self.inspector_contact_number = inspector_contact_number
        self.additional_details = additional_details
        if other_type_details is not None:
            self.other_type_details = other_type_details
        if reinspection_date is not None:
            self.reinspection_date = reinspection_date
        if reinspection_date_time is not None:
            self.reinspection_date_time = reinspection_date_time
        self.section_81_evidence = section_81_evidence
        if file_ids is not None:
            self.file_ids = file_ids

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this Section81CreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this Section81CreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def promoter_swa_code(self):
        """Gets the promoter_swa_code of this Section81CreateRequest.  # noqa: E501

        Max length 4 characters  # noqa: E501

        :return: The promoter_swa_code of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._promoter_swa_code

    @promoter_swa_code.setter
    def promoter_swa_code(self, promoter_swa_code):
        """Sets the promoter_swa_code of this Section81CreateRequest.

        Max length 4 characters  # noqa: E501

        :param promoter_swa_code: The promoter_swa_code of this Section81CreateRequest.  # noqa: E501
        :type: str
        """
        if promoter_swa_code is None:
            raise ValueError("Invalid value for `promoter_swa_code`, must not be `None`")  # noqa: E501

        self._promoter_swa_code = promoter_swa_code

    @property
    def highway_authority_swa_code(self):
        """Gets the highway_authority_swa_code of this Section81CreateRequest.  # noqa: E501

        Max length 4 characters  # noqa: E501

        :return: The highway_authority_swa_code of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority_swa_code

    @highway_authority_swa_code.setter
    def highway_authority_swa_code(self, highway_authority_swa_code):
        """Sets the highway_authority_swa_code of this Section81CreateRequest.

        Max length 4 characters  # noqa: E501

        :param highway_authority_swa_code: The highway_authority_swa_code of this Section81CreateRequest.  # noqa: E501
        :type: str
        """
        if highway_authority_swa_code is None:
            raise ValueError("Invalid value for `highway_authority_swa_code`, must not be `None`")  # noqa: E501

        self._highway_authority_swa_code = highway_authority_swa_code

    @property
    def works_coordinates(self):
        """Gets the works_coordinates of this Section81CreateRequest.  # noqa: E501

        Must be a GeoJSON geometry (using British National Grid easting and northing coordinate pairs) and must be a point, line string or polygon  # noqa: E501

        :return: The works_coordinates of this Section81CreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._works_coordinates

    @works_coordinates.setter
    def works_coordinates(self, works_coordinates):
        """Sets the works_coordinates of this Section81CreateRequest.

        Must be a GeoJSON geometry (using British National Grid easting and northing coordinate pairs) and must be a point, line string or polygon  # noqa: E501

        :param works_coordinates: The works_coordinates of this Section81CreateRequest.  # noqa: E501
        :type: object
        """
        if works_coordinates is None:
            raise ValueError("Invalid value for `works_coordinates`, must not be `None`")  # noqa: E501

        self._works_coordinates = works_coordinates

    @property
    def street_name(self):
        """Gets the street_name of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The street_name of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this Section81CreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param street_name: The street_name of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def town(self):
        """Gets the town of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The town of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this Section81CreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param town: The town of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area_name(self):
        """Gets the area_name of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The area_name of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this Section81CreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param area_name: The area_name of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def usrn(self):
        """Gets the usrn of this Section81CreateRequest.  # noqa: E501

        Is whole number between 1000001 and 99999999 inclusive See business rules section 1.4 - USRN  # noqa: E501

        :return: The usrn of this Section81CreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this Section81CreateRequest.

        Is whole number between 1000001 and 99999999 inclusive See business rules section 1.4 - USRN  # noqa: E501

        :param usrn: The usrn of this Section81CreateRequest.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def road_category(self):
        """Gets the road_category of this Section81CreateRequest.  # noqa: E501

        Is whole number between 0 and 10 inclusive If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The road_category of this Section81CreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._road_category

    @road_category.setter
    def road_category(self, road_category):
        """Sets the road_category of this Section81CreateRequest.

        Is whole number between 0 and 10 inclusive If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param road_category: The road_category of this Section81CreateRequest.  # noqa: E501
        :type: float
        """

        self._road_category = road_category

    @property
    def location_description(self):
        """Gets the location_description of this Section81CreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The location_description of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this Section81CreateRequest.

        Max length 500 characters  # noqa: E501

        :param location_description: The location_description of this Section81CreateRequest.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def location_types(self):
        """Gets the location_types of this Section81CreateRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The location_types of this Section81CreateRequest.  # noqa: E501
        :rtype: list[LocationType]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this Section81CreateRequest.

        Array values must be unique  # noqa: E501

        :param location_types: The location_types of this Section81CreateRequest.  # noqa: E501
        :type: list[LocationType]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def inspection_date(self):
        """Gets the inspection_date of this Section81CreateRequest.  # noqa: E501

        Date must be today or a date in the past  # noqa: E501

        :return: The inspection_date of this Section81CreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_date

    @inspection_date.setter
    def inspection_date(self, inspection_date):
        """Sets the inspection_date of this Section81CreateRequest.

        Date must be today or a date in the past  # noqa: E501

        :param inspection_date: The inspection_date of this Section81CreateRequest.  # noqa: E501
        :type: datetime
        """
        if inspection_date is None:
            raise ValueError("Invalid value for `inspection_date`, must not be `None`")  # noqa: E501

        self._inspection_date = inspection_date

    @property
    def section_81_type(self):
        """Gets the section_81_type of this Section81CreateRequest.  # noqa: E501


        :return: The section_81_type of this Section81CreateRequest.  # noqa: E501
        :rtype: Section81Type
        """
        return self._section_81_type

    @section_81_type.setter
    def section_81_type(self, section_81_type):
        """Sets the section_81_type of this Section81CreateRequest.


        :param section_81_type: The section_81_type of this Section81CreateRequest.  # noqa: E501
        :type: Section81Type
        """
        if section_81_type is None:
            raise ValueError("Invalid value for `section_81_type`, must not be `None`")  # noqa: E501

        self._section_81_type = section_81_type

    @property
    def section_81_severity(self):
        """Gets the section_81_severity of this Section81CreateRequest.  # noqa: E501

        Required if section_81_type is not unattributed_works_completed or unattributed_works_live_site  # noqa: E501

        :return: The section_81_severity of this Section81CreateRequest.  # noqa: E501
        :rtype: AllOfSection81CreateRequestSection81Severity
        """
        return self._section_81_severity

    @section_81_severity.setter
    def section_81_severity(self, section_81_severity):
        """Sets the section_81_severity of this Section81CreateRequest.

        Required if section_81_type is not unattributed_works_completed or unattributed_works_live_site  # noqa: E501

        :param section_81_severity: The section_81_severity of this Section81CreateRequest.  # noqa: E501
        :type: AllOfSection81CreateRequestSection81Severity
        """

        self._section_81_severity = section_81_severity

    @property
    def made_safe_by_ha(self):
        """Gets the made_safe_by_ha of this Section81CreateRequest.  # noqa: E501

        Required if section_81_type is not unattributed_works_completed or unattributed_works_live_site  # noqa: E501

        :return: The made_safe_by_ha of this Section81CreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._made_safe_by_ha

    @made_safe_by_ha.setter
    def made_safe_by_ha(self, made_safe_by_ha):
        """Sets the made_safe_by_ha of this Section81CreateRequest.

        Required if section_81_type is not unattributed_works_completed or unattributed_works_live_site  # noqa: E501

        :param made_safe_by_ha: The made_safe_by_ha of this Section81CreateRequest.  # noqa: E501
        :type: bool
        """

        self._made_safe_by_ha = made_safe_by_ha

    @property
    def inspector_name(self):
        """Gets the inspector_name of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The inspector_name of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._inspector_name

    @inspector_name.setter
    def inspector_name(self, inspector_name):
        """Sets the inspector_name of this Section81CreateRequest.

        Max length 100 characters  # noqa: E501

        :param inspector_name: The inspector_name of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._inspector_name = inspector_name

    @property
    def inspector_contact_number(self):
        """Gets the inspector_contact_number of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The inspector_contact_number of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._inspector_contact_number

    @inspector_contact_number.setter
    def inspector_contact_number(self, inspector_contact_number):
        """Sets the inspector_contact_number of this Section81CreateRequest.

        Max length 100 characters  # noqa: E501

        :param inspector_contact_number: The inspector_contact_number of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._inspector_contact_number = inspector_contact_number

    @property
    def additional_details(self):
        """Gets the additional_details of this Section81CreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The additional_details of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this Section81CreateRequest.

        Max length 500 characters  # noqa: E501

        :param additional_details: The additional_details of this Section81CreateRequest.  # noqa: E501
        :type: str
        """
        if additional_details is None:
            raise ValueError("Invalid value for `additional_details`, must not be `None`")  # noqa: E501

        self._additional_details = additional_details

    @property
    def other_type_details(self):
        """Gets the other_type_details of this Section81CreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The other_type_details of this Section81CreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._other_type_details

    @other_type_details.setter
    def other_type_details(self, other_type_details):
        """Sets the other_type_details of this Section81CreateRequest.

        Max length 100 characters  # noqa: E501

        :param other_type_details: The other_type_details of this Section81CreateRequest.  # noqa: E501
        :type: str
        """

        self._other_type_details = other_type_details

    @property
    def reinspection_date(self):
        """Gets the reinspection_date of this Section81CreateRequest.  # noqa: E501

        Date must occur today or a date in the future  # noqa: E501

        :return: The reinspection_date of this Section81CreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._reinspection_date

    @reinspection_date.setter
    def reinspection_date(self, reinspection_date):
        """Sets the reinspection_date of this Section81CreateRequest.

        Date must occur today or a date in the future  # noqa: E501

        :param reinspection_date: The reinspection_date of this Section81CreateRequest.  # noqa: E501
        :type: datetime
        """

        self._reinspection_date = reinspection_date

    @property
    def reinspection_date_time(self):
        """Gets the reinspection_date_time of this Section81CreateRequest.  # noqa: E501

        The date for reinspection_date_time must match the date for reinspection_date Time must occur today or a date in the future  # noqa: E501

        :return: The reinspection_date_time of this Section81CreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._reinspection_date_time

    @reinspection_date_time.setter
    def reinspection_date_time(self, reinspection_date_time):
        """Sets the reinspection_date_time of this Section81CreateRequest.

        The date for reinspection_date_time must match the date for reinspection_date Time must occur today or a date in the future  # noqa: E501

        :param reinspection_date_time: The reinspection_date_time of this Section81CreateRequest.  # noqa: E501
        :type: datetime
        """

        self._reinspection_date_time = reinspection_date_time

    @property
    def section_81_evidence(self):
        """Gets the section_81_evidence of this Section81CreateRequest.  # noqa: E501


        :return: The section_81_evidence of this Section81CreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._section_81_evidence

    @section_81_evidence.setter
    def section_81_evidence(self, section_81_evidence):
        """Sets the section_81_evidence of this Section81CreateRequest.


        :param section_81_evidence: The section_81_evidence of this Section81CreateRequest.  # noqa: E501
        :type: bool
        """
        if section_81_evidence is None:
            raise ValueError("Invalid value for `section_81_evidence`, must not be `None`")  # noqa: E501

        self._section_81_evidence = section_81_evidence

    @property
    def file_ids(self):
        """Gets the file_ids of this Section81CreateRequest.  # noqa: E501

        Required if section_81_evidence = true Array values must be unique Must not contain null or undefined values A file_id can only be associated with one section of Street Manager See API specification Resource Guide > Works API > File upload for more information  # noqa: E501

        :return: The file_ids of this Section81CreateRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this Section81CreateRequest.

        Required if section_81_evidence = true Array values must be unique Must not contain null or undefined values A file_id can only be associated with one section of Street Manager See API specification Resource Guide > Works API > File upload for more information  # noqa: E501

        :param file_ids: The file_ids of this Section81CreateRequest.  # noqa: E501
        :type: list[float]
        """

        self._file_ids = file_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section81CreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section81CreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
