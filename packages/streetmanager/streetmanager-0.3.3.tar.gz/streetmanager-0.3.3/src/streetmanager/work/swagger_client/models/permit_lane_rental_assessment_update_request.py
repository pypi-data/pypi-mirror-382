# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitLaneRentalAssessmentUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'outcome': 'LaneRentalAssessmentOutcome',
        'additional_details': 'str',
        'charge_band': 'AllOfPermitLaneRentalAssessmentUpdateRequestChargeBand',
        'chargeable_days': 'float',
        'charges_agreed': 'bool'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'outcome': 'outcome',
        'additional_details': 'additional_details',
        'charge_band': 'charge_band',
        'chargeable_days': 'chargeable_days',
        'charges_agreed': 'charges_agreed'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, outcome=None, additional_details=None, charge_band=None, chargeable_days=None, charges_agreed=None):  # noqa: E501
        """PermitLaneRentalAssessmentUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._outcome = None
        self._additional_details = None
        self._charge_band = None
        self._chargeable_days = None
        self._charges_agreed = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.outcome = outcome
        if additional_details is not None:
            self.additional_details = additional_details
        if charge_band is not None:
            self.charge_band = charge_band
        if chargeable_days is not None:
            self.chargeable_days = chargeable_days
        if charges_agreed is not None:
            self.charges_agreed = charges_agreed

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this PermitLaneRentalAssessmentUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this PermitLaneRentalAssessmentUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def outcome(self):
        """Gets the outcome of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501


        :return: The outcome of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :rtype: LaneRentalAssessmentOutcome
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this PermitLaneRentalAssessmentUpdateRequest.


        :param outcome: The outcome of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :type: LaneRentalAssessmentOutcome
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")  # noqa: E501

        self._outcome = outcome

    @property
    def additional_details(self):
        """Gets the additional_details of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The additional_details of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this PermitLaneRentalAssessmentUpdateRequest.

        Max length 500 characters  # noqa: E501

        :param additional_details: The additional_details of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :type: str
        """

        self._additional_details = additional_details

    @property
    def charge_band(self):
        """Gets the charge_band of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501


        :return: The charge_band of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :rtype: AllOfPermitLaneRentalAssessmentUpdateRequestChargeBand
        """
        return self._charge_band

    @charge_band.setter
    def charge_band(self, charge_band):
        """Sets the charge_band of this PermitLaneRentalAssessmentUpdateRequest.


        :param charge_band: The charge_band of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :type: AllOfPermitLaneRentalAssessmentUpdateRequestChargeBand
        """

        self._charge_band = charge_band

    @property
    def chargeable_days(self):
        """Gets the chargeable_days of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501

        Whole number between 1 and 10000  # noqa: E501

        :return: The chargeable_days of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :rtype: float
        """
        return self._chargeable_days

    @chargeable_days.setter
    def chargeable_days(self, chargeable_days):
        """Sets the chargeable_days of this PermitLaneRentalAssessmentUpdateRequest.

        Whole number between 1 and 10000  # noqa: E501

        :param chargeable_days: The chargeable_days of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :type: float
        """

        self._chargeable_days = chargeable_days

    @property
    def charges_agreed(self):
        """Gets the charges_agreed of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501

        Required if outcome = 'chargeable'  # noqa: E501

        :return: The charges_agreed of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._charges_agreed

    @charges_agreed.setter
    def charges_agreed(self, charges_agreed):
        """Sets the charges_agreed of this PermitLaneRentalAssessmentUpdateRequest.

        Required if outcome = 'chargeable'  # noqa: E501

        :param charges_agreed: The charges_agreed of this PermitLaneRentalAssessmentUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._charges_agreed = charges_agreed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitLaneRentalAssessmentUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitLaneRentalAssessmentUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
