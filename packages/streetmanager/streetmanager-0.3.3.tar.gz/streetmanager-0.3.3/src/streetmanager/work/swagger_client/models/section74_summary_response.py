# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Section74SummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permit_reference_number': 'str',
        'section_74_reference_number': 'str',
        'date_created': 'datetime',
        'overrun_warning_reasons': 'list[OverrunWarningReasonResponse]',
        'overrun_warning_reasons_string': 'list[str]',
        'ha_status': 'Section74HAStatusResponse',
        'ha_status_string': 'str'
    }

    attribute_map = {
        'permit_reference_number': 'permit_reference_number',
        'section_74_reference_number': 'section_74_reference_number',
        'date_created': 'date_created',
        'overrun_warning_reasons': 'overrun_warning_reasons',
        'overrun_warning_reasons_string': 'overrun_warning_reasons_string',
        'ha_status': 'ha_status',
        'ha_status_string': 'ha_status_string'
    }

    def __init__(self, permit_reference_number=None, section_74_reference_number=None, date_created=None, overrun_warning_reasons=None, overrun_warning_reasons_string=None, ha_status=None, ha_status_string=None):  # noqa: E501
        """Section74SummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._permit_reference_number = None
        self._section_74_reference_number = None
        self._date_created = None
        self._overrun_warning_reasons = None
        self._overrun_warning_reasons_string = None
        self._ha_status = None
        self._ha_status_string = None
        self.discriminator = None
        self.permit_reference_number = permit_reference_number
        self.section_74_reference_number = section_74_reference_number
        self.date_created = date_created
        self.overrun_warning_reasons = overrun_warning_reasons
        self.overrun_warning_reasons_string = overrun_warning_reasons_string
        self.ha_status = ha_status
        self.ha_status_string = ha_status_string

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this Section74SummaryResponse.  # noqa: E501


        :return: The permit_reference_number of this Section74SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this Section74SummaryResponse.


        :param permit_reference_number: The permit_reference_number of this Section74SummaryResponse.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def section_74_reference_number(self):
        """Gets the section_74_reference_number of this Section74SummaryResponse.  # noqa: E501


        :return: The section_74_reference_number of this Section74SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._section_74_reference_number

    @section_74_reference_number.setter
    def section_74_reference_number(self, section_74_reference_number):
        """Sets the section_74_reference_number of this Section74SummaryResponse.


        :param section_74_reference_number: The section_74_reference_number of this Section74SummaryResponse.  # noqa: E501
        :type: str
        """
        if section_74_reference_number is None:
            raise ValueError("Invalid value for `section_74_reference_number`, must not be `None`")  # noqa: E501

        self._section_74_reference_number = section_74_reference_number

    @property
    def date_created(self):
        """Gets the date_created of this Section74SummaryResponse.  # noqa: E501


        :return: The date_created of this Section74SummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Section74SummaryResponse.


        :param date_created: The date_created of this Section74SummaryResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def overrun_warning_reasons(self):
        """Gets the overrun_warning_reasons of this Section74SummaryResponse.  # noqa: E501


        :return: The overrun_warning_reasons of this Section74SummaryResponse.  # noqa: E501
        :rtype: list[OverrunWarningReasonResponse]
        """
        return self._overrun_warning_reasons

    @overrun_warning_reasons.setter
    def overrun_warning_reasons(self, overrun_warning_reasons):
        """Sets the overrun_warning_reasons of this Section74SummaryResponse.


        :param overrun_warning_reasons: The overrun_warning_reasons of this Section74SummaryResponse.  # noqa: E501
        :type: list[OverrunWarningReasonResponse]
        """
        if overrun_warning_reasons is None:
            raise ValueError("Invalid value for `overrun_warning_reasons`, must not be `None`")  # noqa: E501

        self._overrun_warning_reasons = overrun_warning_reasons

    @property
    def overrun_warning_reasons_string(self):
        """Gets the overrun_warning_reasons_string of this Section74SummaryResponse.  # noqa: E501


        :return: The overrun_warning_reasons_string of this Section74SummaryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._overrun_warning_reasons_string

    @overrun_warning_reasons_string.setter
    def overrun_warning_reasons_string(self, overrun_warning_reasons_string):
        """Sets the overrun_warning_reasons_string of this Section74SummaryResponse.


        :param overrun_warning_reasons_string: The overrun_warning_reasons_string of this Section74SummaryResponse.  # noqa: E501
        :type: list[str]
        """
        if overrun_warning_reasons_string is None:
            raise ValueError("Invalid value for `overrun_warning_reasons_string`, must not be `None`")  # noqa: E501

        self._overrun_warning_reasons_string = overrun_warning_reasons_string

    @property
    def ha_status(self):
        """Gets the ha_status of this Section74SummaryResponse.  # noqa: E501


        :return: The ha_status of this Section74SummaryResponse.  # noqa: E501
        :rtype: Section74HAStatusResponse
        """
        return self._ha_status

    @ha_status.setter
    def ha_status(self, ha_status):
        """Sets the ha_status of this Section74SummaryResponse.


        :param ha_status: The ha_status of this Section74SummaryResponse.  # noqa: E501
        :type: Section74HAStatusResponse
        """
        if ha_status is None:
            raise ValueError("Invalid value for `ha_status`, must not be `None`")  # noqa: E501

        self._ha_status = ha_status

    @property
    def ha_status_string(self):
        """Gets the ha_status_string of this Section74SummaryResponse.  # noqa: E501


        :return: The ha_status_string of this Section74SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_status_string

    @ha_status_string.setter
    def ha_status_string(self, ha_status_string):
        """Sets the ha_status_string of this Section74SummaryResponse.


        :param ha_status_string: The ha_status_string of this Section74SummaryResponse.  # noqa: E501
        :type: str
        """
        if ha_status_string is None:
            raise ValueError("Invalid value for `ha_status_string`, must not be `None`")  # noqa: E501

        self._ha_status_string = ha_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section74SummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section74SummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
