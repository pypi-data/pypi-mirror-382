# coding: utf-8

"""
    Street Manager Event API

    See API specification Resource Guide > Event API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_number': 'str',
        'permit_reference_number': 'str',
        'promoter_swa_code': 'str',
        'promoter_organisation': 'str',
        'highway_authority': 'str',
        'works_coordinates': 'object',
        'location_description': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'work_category': 'WorkCategoryResponse',
        'work_category_string': 'str',
        'description_of_work': 'str',
        'traffic_management_type': 'TrafficManagementTypeResponse',
        'traffic_management_type_string': 'str',
        'assessment_status': 'AllOfPermitSummaryResponseAssessmentStatus',
        'assessment_status_string': 'str',
        'proposed_start_date': 'datetime',
        'proposed_end_date': 'datetime',
        'proposed_start_time': 'datetime',
        'proposed_end_time': 'datetime',
        'actual_start_date': 'datetime',
        'actual_end_date': 'datetime',
        'status': 'PermitStatusResponse',
        'status_string': 'str',
        'work_status': 'WorkStatusResponse',
        'work_status_string': 'str',
        'deadline_date': 'datetime',
        'date_created': 'datetime',
        'status_changed_date': 'datetime',
        'usrn': 'float',
        'is_active_permit': 'bool',
        'permit_conditions': 'list[PermitCondition]',
        'road_category': 'float',
        'is_traffic_sensitive': 'bool',
        'has_no_final_reinstatement': 'bool',
        'is_deemed': 'bool',
        'excavation_carried_out': 'bool',
        'is_early_start': 'bool',
        'is_high_impact_traffic_management': 'bool',
        'is_lane_rental': 'bool',
        'lane_rental_assessment_outcome': 'AllOfPermitSummaryResponseLaneRentalAssessmentOutcome',
        'lane_rental_assessment_outcome_string': 'str',
        'lane_rental_charges_not_agreed': 'bool',
        'lane_rental_charges_potentially_apply': 'bool',
        'paa_to_pa_deadline_date': 'datetime',
        'activity_type': 'ActivityTypeResponse',
        'activity_type_string': 'str'
    }

    attribute_map = {
        'work_reference_number': 'work_reference_number',
        'permit_reference_number': 'permit_reference_number',
        'promoter_swa_code': 'promoter_swa_code',
        'promoter_organisation': 'promoter_organisation',
        'highway_authority': 'highway_authority',
        'works_coordinates': 'works_coordinates',
        'location_description': 'location_description',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'work_category': 'work_category',
        'work_category_string': 'work_category_string',
        'description_of_work': 'description_of_work',
        'traffic_management_type': 'traffic_management_type',
        'traffic_management_type_string': 'traffic_management_type_string',
        'assessment_status': 'assessment_status',
        'assessment_status_string': 'assessment_status_string',
        'proposed_start_date': 'proposed_start_date',
        'proposed_end_date': 'proposed_end_date',
        'proposed_start_time': 'proposed_start_time',
        'proposed_end_time': 'proposed_end_time',
        'actual_start_date': 'actual_start_date',
        'actual_end_date': 'actual_end_date',
        'status': 'status',
        'status_string': 'status_string',
        'work_status': 'work_status',
        'work_status_string': 'work_status_string',
        'deadline_date': 'deadline_date',
        'date_created': 'date_created',
        'status_changed_date': 'status_changed_date',
        'usrn': 'usrn',
        'is_active_permit': 'is_active_permit',
        'permit_conditions': 'permit_conditions',
        'road_category': 'road_category',
        'is_traffic_sensitive': 'is_traffic_sensitive',
        'has_no_final_reinstatement': 'has_no_final_reinstatement',
        'is_deemed': 'is_deemed',
        'excavation_carried_out': 'excavation_carried_out',
        'is_early_start': 'is_early_start',
        'is_high_impact_traffic_management': 'is_high_impact_traffic_management',
        'is_lane_rental': 'is_lane_rental',
        'lane_rental_assessment_outcome': 'lane_rental_assessment_outcome',
        'lane_rental_assessment_outcome_string': 'lane_rental_assessment_outcome_string',
        'lane_rental_charges_not_agreed': 'lane_rental_charges_not_agreed',
        'lane_rental_charges_potentially_apply': 'lane_rental_charges_potentially_apply',
        'paa_to_pa_deadline_date': 'paa_to_pa_deadline_date',
        'activity_type': 'activity_type',
        'activity_type_string': 'activity_type_string'
    }

    def __init__(self, work_reference_number=None, permit_reference_number=None, promoter_swa_code=None, promoter_organisation=None, highway_authority=None, works_coordinates=None, location_description=None, street=None, town=None, area=None, work_category=None, work_category_string=None, description_of_work=None, traffic_management_type=None, traffic_management_type_string=None, assessment_status=None, assessment_status_string=None, proposed_start_date=None, proposed_end_date=None, proposed_start_time=None, proposed_end_time=None, actual_start_date=None, actual_end_date=None, status=None, status_string=None, work_status=None, work_status_string=None, deadline_date=None, date_created=None, status_changed_date=None, usrn=None, is_active_permit=None, permit_conditions=None, road_category=None, is_traffic_sensitive=None, has_no_final_reinstatement=None, is_deemed=None, excavation_carried_out=None, is_early_start=None, is_high_impact_traffic_management=None, is_lane_rental=None, lane_rental_assessment_outcome=None, lane_rental_assessment_outcome_string=None, lane_rental_charges_not_agreed=None, lane_rental_charges_potentially_apply=None, paa_to_pa_deadline_date=None, activity_type=None, activity_type_string=None):  # noqa: E501
        """PermitSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._work_reference_number = None
        self._permit_reference_number = None
        self._promoter_swa_code = None
        self._promoter_organisation = None
        self._highway_authority = None
        self._works_coordinates = None
        self._location_description = None
        self._street = None
        self._town = None
        self._area = None
        self._work_category = None
        self._work_category_string = None
        self._description_of_work = None
        self._traffic_management_type = None
        self._traffic_management_type_string = None
        self._assessment_status = None
        self._assessment_status_string = None
        self._proposed_start_date = None
        self._proposed_end_date = None
        self._proposed_start_time = None
        self._proposed_end_time = None
        self._actual_start_date = None
        self._actual_end_date = None
        self._status = None
        self._status_string = None
        self._work_status = None
        self._work_status_string = None
        self._deadline_date = None
        self._date_created = None
        self._status_changed_date = None
        self._usrn = None
        self._is_active_permit = None
        self._permit_conditions = None
        self._road_category = None
        self._is_traffic_sensitive = None
        self._has_no_final_reinstatement = None
        self._is_deemed = None
        self._excavation_carried_out = None
        self._is_early_start = None
        self._is_high_impact_traffic_management = None
        self._is_lane_rental = None
        self._lane_rental_assessment_outcome = None
        self._lane_rental_assessment_outcome_string = None
        self._lane_rental_charges_not_agreed = None
        self._lane_rental_charges_potentially_apply = None
        self._paa_to_pa_deadline_date = None
        self._activity_type = None
        self._activity_type_string = None
        self.discriminator = None
        self.work_reference_number = work_reference_number
        self.permit_reference_number = permit_reference_number
        self.promoter_swa_code = promoter_swa_code
        self.promoter_organisation = promoter_organisation
        self.highway_authority = highway_authority
        self.works_coordinates = works_coordinates
        self.location_description = location_description
        self.street = street
        self.town = town
        self.area = area
        self.work_category = work_category
        self.work_category_string = work_category_string
        self.description_of_work = description_of_work
        self.traffic_management_type = traffic_management_type
        self.traffic_management_type_string = traffic_management_type_string
        if assessment_status is not None:
            self.assessment_status = assessment_status
        if assessment_status_string is not None:
            self.assessment_status_string = assessment_status_string
        self.proposed_start_date = proposed_start_date
        self.proposed_end_date = proposed_end_date
        if proposed_start_time is not None:
            self.proposed_start_time = proposed_start_time
        if proposed_end_time is not None:
            self.proposed_end_time = proposed_end_time
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if actual_end_date is not None:
            self.actual_end_date = actual_end_date
        self.status = status
        self.status_string = status_string
        self.work_status = work_status
        self.work_status_string = work_status_string
        self.deadline_date = deadline_date
        self.date_created = date_created
        self.status_changed_date = status_changed_date
        self.usrn = usrn
        self.is_active_permit = is_active_permit
        if permit_conditions is not None:
            self.permit_conditions = permit_conditions
        self.road_category = road_category
        self.is_traffic_sensitive = is_traffic_sensitive
        self.has_no_final_reinstatement = has_no_final_reinstatement
        self.is_deemed = is_deemed
        self.excavation_carried_out = excavation_carried_out
        self.is_early_start = is_early_start
        self.is_high_impact_traffic_management = is_high_impact_traffic_management
        self.is_lane_rental = is_lane_rental
        if lane_rental_assessment_outcome is not None:
            self.lane_rental_assessment_outcome = lane_rental_assessment_outcome
        if lane_rental_assessment_outcome_string is not None:
            self.lane_rental_assessment_outcome_string = lane_rental_assessment_outcome_string
        self.lane_rental_charges_not_agreed = lane_rental_charges_not_agreed
        self.lane_rental_charges_potentially_apply = lane_rental_charges_potentially_apply
        if paa_to_pa_deadline_date is not None:
            self.paa_to_pa_deadline_date = paa_to_pa_deadline_date
        self.activity_type = activity_type
        self.activity_type_string = activity_type_string

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this PermitSummaryResponse.  # noqa: E501


        :return: The work_reference_number of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this PermitSummaryResponse.


        :param work_reference_number: The work_reference_number of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this PermitSummaryResponse.  # noqa: E501


        :return: The permit_reference_number of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this PermitSummaryResponse.


        :param permit_reference_number: The permit_reference_number of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def promoter_swa_code(self):
        """Gets the promoter_swa_code of this PermitSummaryResponse.  # noqa: E501


        :return: The promoter_swa_code of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_swa_code

    @promoter_swa_code.setter
    def promoter_swa_code(self, promoter_swa_code):
        """Sets the promoter_swa_code of this PermitSummaryResponse.


        :param promoter_swa_code: The promoter_swa_code of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if promoter_swa_code is None:
            raise ValueError("Invalid value for `promoter_swa_code`, must not be `None`")  # noqa: E501

        self._promoter_swa_code = promoter_swa_code

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this PermitSummaryResponse.  # noqa: E501


        :return: The promoter_organisation of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this PermitSummaryResponse.


        :param promoter_organisation: The promoter_organisation of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def highway_authority(self):
        """Gets the highway_authority of this PermitSummaryResponse.  # noqa: E501


        :return: The highway_authority of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority

    @highway_authority.setter
    def highway_authority(self, highway_authority):
        """Sets the highway_authority of this PermitSummaryResponse.


        :param highway_authority: The highway_authority of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if highway_authority is None:
            raise ValueError("Invalid value for `highway_authority`, must not be `None`")  # noqa: E501

        self._highway_authority = highway_authority

    @property
    def works_coordinates(self):
        """Gets the works_coordinates of this PermitSummaryResponse.  # noqa: E501


        :return: The works_coordinates of this PermitSummaryResponse.  # noqa: E501
        :rtype: object
        """
        return self._works_coordinates

    @works_coordinates.setter
    def works_coordinates(self, works_coordinates):
        """Sets the works_coordinates of this PermitSummaryResponse.


        :param works_coordinates: The works_coordinates of this PermitSummaryResponse.  # noqa: E501
        :type: object
        """
        if works_coordinates is None:
            raise ValueError("Invalid value for `works_coordinates`, must not be `None`")  # noqa: E501

        self._works_coordinates = works_coordinates

    @property
    def location_description(self):
        """Gets the location_description of this PermitSummaryResponse.  # noqa: E501


        :return: The location_description of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this PermitSummaryResponse.


        :param location_description: The location_description of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def street(self):
        """Gets the street of this PermitSummaryResponse.  # noqa: E501


        :return: The street of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this PermitSummaryResponse.


        :param street: The street of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this PermitSummaryResponse.  # noqa: E501


        :return: The town of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this PermitSummaryResponse.


        :param town: The town of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def area(self):
        """Gets the area of this PermitSummaryResponse.  # noqa: E501


        :return: The area of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this PermitSummaryResponse.


        :param area: The area of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def work_category(self):
        """Gets the work_category of this PermitSummaryResponse.  # noqa: E501


        :return: The work_category of this PermitSummaryResponse.  # noqa: E501
        :rtype: WorkCategoryResponse
        """
        return self._work_category

    @work_category.setter
    def work_category(self, work_category):
        """Sets the work_category of this PermitSummaryResponse.


        :param work_category: The work_category of this PermitSummaryResponse.  # noqa: E501
        :type: WorkCategoryResponse
        """
        if work_category is None:
            raise ValueError("Invalid value for `work_category`, must not be `None`")  # noqa: E501

        self._work_category = work_category

    @property
    def work_category_string(self):
        """Gets the work_category_string of this PermitSummaryResponse.  # noqa: E501


        :return: The work_category_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_category_string

    @work_category_string.setter
    def work_category_string(self, work_category_string):
        """Sets the work_category_string of this PermitSummaryResponse.


        :param work_category_string: The work_category_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_category_string is None:
            raise ValueError("Invalid value for `work_category_string`, must not be `None`")  # noqa: E501

        self._work_category_string = work_category_string

    @property
    def description_of_work(self):
        """Gets the description_of_work of this PermitSummaryResponse.  # noqa: E501


        :return: The description_of_work of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._description_of_work

    @description_of_work.setter
    def description_of_work(self, description_of_work):
        """Sets the description_of_work of this PermitSummaryResponse.


        :param description_of_work: The description_of_work of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if description_of_work is None:
            raise ValueError("Invalid value for `description_of_work`, must not be `None`")  # noqa: E501

        self._description_of_work = description_of_work

    @property
    def traffic_management_type(self):
        """Gets the traffic_management_type of this PermitSummaryResponse.  # noqa: E501


        :return: The traffic_management_type of this PermitSummaryResponse.  # noqa: E501
        :rtype: TrafficManagementTypeResponse
        """
        return self._traffic_management_type

    @traffic_management_type.setter
    def traffic_management_type(self, traffic_management_type):
        """Sets the traffic_management_type of this PermitSummaryResponse.


        :param traffic_management_type: The traffic_management_type of this PermitSummaryResponse.  # noqa: E501
        :type: TrafficManagementTypeResponse
        """
        if traffic_management_type is None:
            raise ValueError("Invalid value for `traffic_management_type`, must not be `None`")  # noqa: E501

        self._traffic_management_type = traffic_management_type

    @property
    def traffic_management_type_string(self):
        """Gets the traffic_management_type_string of this PermitSummaryResponse.  # noqa: E501


        :return: The traffic_management_type_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._traffic_management_type_string

    @traffic_management_type_string.setter
    def traffic_management_type_string(self, traffic_management_type_string):
        """Sets the traffic_management_type_string of this PermitSummaryResponse.


        :param traffic_management_type_string: The traffic_management_type_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if traffic_management_type_string is None:
            raise ValueError("Invalid value for `traffic_management_type_string`, must not be `None`")  # noqa: E501

        self._traffic_management_type_string = traffic_management_type_string

    @property
    def assessment_status(self):
        """Gets the assessment_status of this PermitSummaryResponse.  # noqa: E501


        :return: The assessment_status of this PermitSummaryResponse.  # noqa: E501
        :rtype: AllOfPermitSummaryResponseAssessmentStatus
        """
        return self._assessment_status

    @assessment_status.setter
    def assessment_status(self, assessment_status):
        """Sets the assessment_status of this PermitSummaryResponse.


        :param assessment_status: The assessment_status of this PermitSummaryResponse.  # noqa: E501
        :type: AllOfPermitSummaryResponseAssessmentStatus
        """

        self._assessment_status = assessment_status

    @property
    def assessment_status_string(self):
        """Gets the assessment_status_string of this PermitSummaryResponse.  # noqa: E501


        :return: The assessment_status_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._assessment_status_string

    @assessment_status_string.setter
    def assessment_status_string(self, assessment_status_string):
        """Sets the assessment_status_string of this PermitSummaryResponse.


        :param assessment_status_string: The assessment_status_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """

        self._assessment_status_string = assessment_status_string

    @property
    def proposed_start_date(self):
        """Gets the proposed_start_date of this PermitSummaryResponse.  # noqa: E501


        :return: The proposed_start_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_date

    @proposed_start_date.setter
    def proposed_start_date(self, proposed_start_date):
        """Sets the proposed_start_date of this PermitSummaryResponse.


        :param proposed_start_date: The proposed_start_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_start_date is None:
            raise ValueError("Invalid value for `proposed_start_date`, must not be `None`")  # noqa: E501

        self._proposed_start_date = proposed_start_date

    @property
    def proposed_end_date(self):
        """Gets the proposed_end_date of this PermitSummaryResponse.  # noqa: E501


        :return: The proposed_end_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_date

    @proposed_end_date.setter
    def proposed_end_date(self, proposed_end_date):
        """Sets the proposed_end_date of this PermitSummaryResponse.


        :param proposed_end_date: The proposed_end_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_end_date is None:
            raise ValueError("Invalid value for `proposed_end_date`, must not be `None`")  # noqa: E501

        self._proposed_end_date = proposed_end_date

    @property
    def proposed_start_time(self):
        """Gets the proposed_start_time of this PermitSummaryResponse.  # noqa: E501


        :return: The proposed_start_time of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_time

    @proposed_start_time.setter
    def proposed_start_time(self, proposed_start_time):
        """Sets the proposed_start_time of this PermitSummaryResponse.


        :param proposed_start_time: The proposed_start_time of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_start_time = proposed_start_time

    @property
    def proposed_end_time(self):
        """Gets the proposed_end_time of this PermitSummaryResponse.  # noqa: E501


        :return: The proposed_end_time of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_time

    @proposed_end_time.setter
    def proposed_end_time(self, proposed_end_time):
        """Sets the proposed_end_time of this PermitSummaryResponse.


        :param proposed_end_time: The proposed_end_time of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_end_time = proposed_end_time

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this PermitSummaryResponse.  # noqa: E501


        :return: The actual_start_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this PermitSummaryResponse.


        :param actual_start_date: The actual_start_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._actual_start_date = actual_start_date

    @property
    def actual_end_date(self):
        """Gets the actual_end_date of this PermitSummaryResponse.  # noqa: E501


        :return: The actual_end_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_end_date

    @actual_end_date.setter
    def actual_end_date(self, actual_end_date):
        """Sets the actual_end_date of this PermitSummaryResponse.


        :param actual_end_date: The actual_end_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._actual_end_date = actual_end_date

    @property
    def status(self):
        """Gets the status of this PermitSummaryResponse.  # noqa: E501


        :return: The status of this PermitSummaryResponse.  # noqa: E501
        :rtype: PermitStatusResponse
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PermitSummaryResponse.


        :param status: The status of this PermitSummaryResponse.  # noqa: E501
        :type: PermitStatusResponse
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_string(self):
        """Gets the status_string of this PermitSummaryResponse.  # noqa: E501


        :return: The status_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_string

    @status_string.setter
    def status_string(self, status_string):
        """Sets the status_string of this PermitSummaryResponse.


        :param status_string: The status_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if status_string is None:
            raise ValueError("Invalid value for `status_string`, must not be `None`")  # noqa: E501

        self._status_string = status_string

    @property
    def work_status(self):
        """Gets the work_status of this PermitSummaryResponse.  # noqa: E501


        :return: The work_status of this PermitSummaryResponse.  # noqa: E501
        :rtype: WorkStatusResponse
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this PermitSummaryResponse.


        :param work_status: The work_status of this PermitSummaryResponse.  # noqa: E501
        :type: WorkStatusResponse
        """
        if work_status is None:
            raise ValueError("Invalid value for `work_status`, must not be `None`")  # noqa: E501

        self._work_status = work_status

    @property
    def work_status_string(self):
        """Gets the work_status_string of this PermitSummaryResponse.  # noqa: E501


        :return: The work_status_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_status_string

    @work_status_string.setter
    def work_status_string(self, work_status_string):
        """Sets the work_status_string of this PermitSummaryResponse.


        :param work_status_string: The work_status_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_status_string is None:
            raise ValueError("Invalid value for `work_status_string`, must not be `None`")  # noqa: E501

        self._work_status_string = work_status_string

    @property
    def deadline_date(self):
        """Gets the deadline_date of this PermitSummaryResponse.  # noqa: E501


        :return: The deadline_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline_date

    @deadline_date.setter
    def deadline_date(self, deadline_date):
        """Sets the deadline_date of this PermitSummaryResponse.


        :param deadline_date: The deadline_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if deadline_date is None:
            raise ValueError("Invalid value for `deadline_date`, must not be `None`")  # noqa: E501

        self._deadline_date = deadline_date

    @property
    def date_created(self):
        """Gets the date_created of this PermitSummaryResponse.  # noqa: E501


        :return: The date_created of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this PermitSummaryResponse.


        :param date_created: The date_created of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def status_changed_date(self):
        """Gets the status_changed_date of this PermitSummaryResponse.  # noqa: E501


        :return: The status_changed_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date

    @status_changed_date.setter
    def status_changed_date(self, status_changed_date):
        """Sets the status_changed_date of this PermitSummaryResponse.


        :param status_changed_date: The status_changed_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if status_changed_date is None:
            raise ValueError("Invalid value for `status_changed_date`, must not be `None`")  # noqa: E501

        self._status_changed_date = status_changed_date

    @property
    def usrn(self):
        """Gets the usrn of this PermitSummaryResponse.  # noqa: E501


        :return: The usrn of this PermitSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this PermitSummaryResponse.


        :param usrn: The usrn of this PermitSummaryResponse.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def is_active_permit(self):
        """Gets the is_active_permit of this PermitSummaryResponse.  # noqa: E501


        :return: The is_active_permit of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_permit

    @is_active_permit.setter
    def is_active_permit(self, is_active_permit):
        """Sets the is_active_permit of this PermitSummaryResponse.


        :param is_active_permit: The is_active_permit of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if is_active_permit is None:
            raise ValueError("Invalid value for `is_active_permit`, must not be `None`")  # noqa: E501

        self._is_active_permit = is_active_permit

    @property
    def permit_conditions(self):
        """Gets the permit_conditions of this PermitSummaryResponse.  # noqa: E501


        :return: The permit_conditions of this PermitSummaryResponse.  # noqa: E501
        :rtype: list[PermitCondition]
        """
        return self._permit_conditions

    @permit_conditions.setter
    def permit_conditions(self, permit_conditions):
        """Sets the permit_conditions of this PermitSummaryResponse.


        :param permit_conditions: The permit_conditions of this PermitSummaryResponse.  # noqa: E501
        :type: list[PermitCondition]
        """

        self._permit_conditions = permit_conditions

    @property
    def road_category(self):
        """Gets the road_category of this PermitSummaryResponse.  # noqa: E501


        :return: The road_category of this PermitSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._road_category

    @road_category.setter
    def road_category(self, road_category):
        """Sets the road_category of this PermitSummaryResponse.


        :param road_category: The road_category of this PermitSummaryResponse.  # noqa: E501
        :type: float
        """
        if road_category is None:
            raise ValueError("Invalid value for `road_category`, must not be `None`")  # noqa: E501

        self._road_category = road_category

    @property
    def is_traffic_sensitive(self):
        """Gets the is_traffic_sensitive of this PermitSummaryResponse.  # noqa: E501


        :return: The is_traffic_sensitive of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_traffic_sensitive

    @is_traffic_sensitive.setter
    def is_traffic_sensitive(self, is_traffic_sensitive):
        """Sets the is_traffic_sensitive of this PermitSummaryResponse.


        :param is_traffic_sensitive: The is_traffic_sensitive of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if is_traffic_sensitive is None:
            raise ValueError("Invalid value for `is_traffic_sensitive`, must not be `None`")  # noqa: E501

        self._is_traffic_sensitive = is_traffic_sensitive

    @property
    def has_no_final_reinstatement(self):
        """Gets the has_no_final_reinstatement of this PermitSummaryResponse.  # noqa: E501


        :return: The has_no_final_reinstatement of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_no_final_reinstatement

    @has_no_final_reinstatement.setter
    def has_no_final_reinstatement(self, has_no_final_reinstatement):
        """Sets the has_no_final_reinstatement of this PermitSummaryResponse.


        :param has_no_final_reinstatement: The has_no_final_reinstatement of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if has_no_final_reinstatement is None:
            raise ValueError("Invalid value for `has_no_final_reinstatement`, must not be `None`")  # noqa: E501

        self._has_no_final_reinstatement = has_no_final_reinstatement

    @property
    def is_deemed(self):
        """Gets the is_deemed of this PermitSummaryResponse.  # noqa: E501


        :return: The is_deemed of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deemed

    @is_deemed.setter
    def is_deemed(self, is_deemed):
        """Sets the is_deemed of this PermitSummaryResponse.


        :param is_deemed: The is_deemed of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if is_deemed is None:
            raise ValueError("Invalid value for `is_deemed`, must not be `None`")  # noqa: E501

        self._is_deemed = is_deemed

    @property
    def excavation_carried_out(self):
        """Gets the excavation_carried_out of this PermitSummaryResponse.  # noqa: E501


        :return: The excavation_carried_out of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._excavation_carried_out

    @excavation_carried_out.setter
    def excavation_carried_out(self, excavation_carried_out):
        """Sets the excavation_carried_out of this PermitSummaryResponse.


        :param excavation_carried_out: The excavation_carried_out of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if excavation_carried_out is None:
            raise ValueError("Invalid value for `excavation_carried_out`, must not be `None`")  # noqa: E501

        self._excavation_carried_out = excavation_carried_out

    @property
    def is_early_start(self):
        """Gets the is_early_start of this PermitSummaryResponse.  # noqa: E501


        :return: The is_early_start of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_early_start

    @is_early_start.setter
    def is_early_start(self, is_early_start):
        """Sets the is_early_start of this PermitSummaryResponse.


        :param is_early_start: The is_early_start of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if is_early_start is None:
            raise ValueError("Invalid value for `is_early_start`, must not be `None`")  # noqa: E501

        self._is_early_start = is_early_start

    @property
    def is_high_impact_traffic_management(self):
        """Gets the is_high_impact_traffic_management of this PermitSummaryResponse.  # noqa: E501


        :return: The is_high_impact_traffic_management of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_high_impact_traffic_management

    @is_high_impact_traffic_management.setter
    def is_high_impact_traffic_management(self, is_high_impact_traffic_management):
        """Sets the is_high_impact_traffic_management of this PermitSummaryResponse.


        :param is_high_impact_traffic_management: The is_high_impact_traffic_management of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if is_high_impact_traffic_management is None:
            raise ValueError("Invalid value for `is_high_impact_traffic_management`, must not be `None`")  # noqa: E501

        self._is_high_impact_traffic_management = is_high_impact_traffic_management

    @property
    def is_lane_rental(self):
        """Gets the is_lane_rental of this PermitSummaryResponse.  # noqa: E501


        :return: The is_lane_rental of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_lane_rental

    @is_lane_rental.setter
    def is_lane_rental(self, is_lane_rental):
        """Sets the is_lane_rental of this PermitSummaryResponse.


        :param is_lane_rental: The is_lane_rental of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if is_lane_rental is None:
            raise ValueError("Invalid value for `is_lane_rental`, must not be `None`")  # noqa: E501

        self._is_lane_rental = is_lane_rental

    @property
    def lane_rental_assessment_outcome(self):
        """Gets the lane_rental_assessment_outcome of this PermitSummaryResponse.  # noqa: E501


        :return: The lane_rental_assessment_outcome of this PermitSummaryResponse.  # noqa: E501
        :rtype: AllOfPermitSummaryResponseLaneRentalAssessmentOutcome
        """
        return self._lane_rental_assessment_outcome

    @lane_rental_assessment_outcome.setter
    def lane_rental_assessment_outcome(self, lane_rental_assessment_outcome):
        """Sets the lane_rental_assessment_outcome of this PermitSummaryResponse.


        :param lane_rental_assessment_outcome: The lane_rental_assessment_outcome of this PermitSummaryResponse.  # noqa: E501
        :type: AllOfPermitSummaryResponseLaneRentalAssessmentOutcome
        """

        self._lane_rental_assessment_outcome = lane_rental_assessment_outcome

    @property
    def lane_rental_assessment_outcome_string(self):
        """Gets the lane_rental_assessment_outcome_string of this PermitSummaryResponse.  # noqa: E501


        :return: The lane_rental_assessment_outcome_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._lane_rental_assessment_outcome_string

    @lane_rental_assessment_outcome_string.setter
    def lane_rental_assessment_outcome_string(self, lane_rental_assessment_outcome_string):
        """Sets the lane_rental_assessment_outcome_string of this PermitSummaryResponse.


        :param lane_rental_assessment_outcome_string: The lane_rental_assessment_outcome_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """

        self._lane_rental_assessment_outcome_string = lane_rental_assessment_outcome_string

    @property
    def lane_rental_charges_not_agreed(self):
        """Gets the lane_rental_charges_not_agreed of this PermitSummaryResponse.  # noqa: E501


        :return: The lane_rental_charges_not_agreed of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._lane_rental_charges_not_agreed

    @lane_rental_charges_not_agreed.setter
    def lane_rental_charges_not_agreed(self, lane_rental_charges_not_agreed):
        """Sets the lane_rental_charges_not_agreed of this PermitSummaryResponse.


        :param lane_rental_charges_not_agreed: The lane_rental_charges_not_agreed of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if lane_rental_charges_not_agreed is None:
            raise ValueError("Invalid value for `lane_rental_charges_not_agreed`, must not be `None`")  # noqa: E501

        self._lane_rental_charges_not_agreed = lane_rental_charges_not_agreed

    @property
    def lane_rental_charges_potentially_apply(self):
        """Gets the lane_rental_charges_potentially_apply of this PermitSummaryResponse.  # noqa: E501


        :return: The lane_rental_charges_potentially_apply of this PermitSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._lane_rental_charges_potentially_apply

    @lane_rental_charges_potentially_apply.setter
    def lane_rental_charges_potentially_apply(self, lane_rental_charges_potentially_apply):
        """Sets the lane_rental_charges_potentially_apply of this PermitSummaryResponse.


        :param lane_rental_charges_potentially_apply: The lane_rental_charges_potentially_apply of this PermitSummaryResponse.  # noqa: E501
        :type: bool
        """
        if lane_rental_charges_potentially_apply is None:
            raise ValueError("Invalid value for `lane_rental_charges_potentially_apply`, must not be `None`")  # noqa: E501

        self._lane_rental_charges_potentially_apply = lane_rental_charges_potentially_apply

    @property
    def paa_to_pa_deadline_date(self):
        """Gets the paa_to_pa_deadline_date of this PermitSummaryResponse.  # noqa: E501


        :return: The paa_to_pa_deadline_date of this PermitSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._paa_to_pa_deadline_date

    @paa_to_pa_deadline_date.setter
    def paa_to_pa_deadline_date(self, paa_to_pa_deadline_date):
        """Sets the paa_to_pa_deadline_date of this PermitSummaryResponse.


        :param paa_to_pa_deadline_date: The paa_to_pa_deadline_date of this PermitSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._paa_to_pa_deadline_date = paa_to_pa_deadline_date

    @property
    def activity_type(self):
        """Gets the activity_type of this PermitSummaryResponse.  # noqa: E501


        :return: The activity_type of this PermitSummaryResponse.  # noqa: E501
        :rtype: ActivityTypeResponse
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this PermitSummaryResponse.


        :param activity_type: The activity_type of this PermitSummaryResponse.  # noqa: E501
        :type: ActivityTypeResponse
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")  # noqa: E501

        self._activity_type = activity_type

    @property
    def activity_type_string(self):
        """Gets the activity_type_string of this PermitSummaryResponse.  # noqa: E501


        :return: The activity_type_string of this PermitSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_type_string

    @activity_type_string.setter
    def activity_type_string(self, activity_type_string):
        """Sets the activity_type_string of this PermitSummaryResponse.


        :param activity_type_string: The activity_type_string of this PermitSummaryResponse.  # noqa: E501
        :type: str
        """
        if activity_type_string is None:
            raise ValueError("Invalid value for `activity_type_string`, must not be `None`")  # noqa: E501

        self._activity_type_string = activity_type_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
