# coding: utf-8

"""
    Street Manager GeoJSON API

    See API specification Resource Guide > GeoJSON API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ForwardPlanProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'forward_plan_reference_number': 'str',
        'work_reference_number': 'str',
        'forward_plan_status': 'ForwardPlanStatusResponse',
        'forward_plan_status_string': 'str',
        'work_centre_point': 'GeoJSONCentrePoint',
        'street': 'str',
        'area': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'description_of_work': 'str',
        'promoter_organisation': 'str',
        'location_description': 'str'
    }

    attribute_map = {
        'forward_plan_reference_number': 'forward_plan_reference_number',
        'work_reference_number': 'work_reference_number',
        'forward_plan_status': 'forward_plan_status',
        'forward_plan_status_string': 'forward_plan_status_string',
        'work_centre_point': 'work_centre_point',
        'street': 'street',
        'area': 'area',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'description_of_work': 'description_of_work',
        'promoter_organisation': 'promoter_organisation',
        'location_description': 'location_description'
    }

    def __init__(self, forward_plan_reference_number=None, work_reference_number=None, forward_plan_status=None, forward_plan_status_string=None, work_centre_point=None, street=None, area=None, start_date=None, end_date=None, description_of_work=None, promoter_organisation=None, location_description=None):  # noqa: E501
        """ForwardPlanProperties - a model defined in Swagger"""  # noqa: E501
        self._forward_plan_reference_number = None
        self._work_reference_number = None
        self._forward_plan_status = None
        self._forward_plan_status_string = None
        self._work_centre_point = None
        self._street = None
        self._area = None
        self._start_date = None
        self._end_date = None
        self._description_of_work = None
        self._promoter_organisation = None
        self._location_description = None
        self.discriminator = None
        self.forward_plan_reference_number = forward_plan_reference_number
        self.work_reference_number = work_reference_number
        self.forward_plan_status = forward_plan_status
        self.forward_plan_status_string = forward_plan_status_string
        self.work_centre_point = work_centre_point
        self.street = street
        if area is not None:
            self.area = area
        self.start_date = start_date
        self.end_date = end_date
        self.description_of_work = description_of_work
        self.promoter_organisation = promoter_organisation
        self.location_description = location_description

    @property
    def forward_plan_reference_number(self):
        """Gets the forward_plan_reference_number of this ForwardPlanProperties.  # noqa: E501


        :return: The forward_plan_reference_number of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._forward_plan_reference_number

    @forward_plan_reference_number.setter
    def forward_plan_reference_number(self, forward_plan_reference_number):
        """Sets the forward_plan_reference_number of this ForwardPlanProperties.


        :param forward_plan_reference_number: The forward_plan_reference_number of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """
        if forward_plan_reference_number is None:
            raise ValueError("Invalid value for `forward_plan_reference_number`, must not be `None`")  # noqa: E501

        self._forward_plan_reference_number = forward_plan_reference_number

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this ForwardPlanProperties.  # noqa: E501


        :return: The work_reference_number of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this ForwardPlanProperties.


        :param work_reference_number: The work_reference_number of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def forward_plan_status(self):
        """Gets the forward_plan_status of this ForwardPlanProperties.  # noqa: E501


        :return: The forward_plan_status of this ForwardPlanProperties.  # noqa: E501
        :rtype: ForwardPlanStatusResponse
        """
        return self._forward_plan_status

    @forward_plan_status.setter
    def forward_plan_status(self, forward_plan_status):
        """Sets the forward_plan_status of this ForwardPlanProperties.


        :param forward_plan_status: The forward_plan_status of this ForwardPlanProperties.  # noqa: E501
        :type: ForwardPlanStatusResponse
        """
        if forward_plan_status is None:
            raise ValueError("Invalid value for `forward_plan_status`, must not be `None`")  # noqa: E501

        self._forward_plan_status = forward_plan_status

    @property
    def forward_plan_status_string(self):
        """Gets the forward_plan_status_string of this ForwardPlanProperties.  # noqa: E501


        :return: The forward_plan_status_string of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._forward_plan_status_string

    @forward_plan_status_string.setter
    def forward_plan_status_string(self, forward_plan_status_string):
        """Sets the forward_plan_status_string of this ForwardPlanProperties.


        :param forward_plan_status_string: The forward_plan_status_string of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """
        if forward_plan_status_string is None:
            raise ValueError("Invalid value for `forward_plan_status_string`, must not be `None`")  # noqa: E501

        self._forward_plan_status_string = forward_plan_status_string

    @property
    def work_centre_point(self):
        """Gets the work_centre_point of this ForwardPlanProperties.  # noqa: E501


        :return: The work_centre_point of this ForwardPlanProperties.  # noqa: E501
        :rtype: GeoJSONCentrePoint
        """
        return self._work_centre_point

    @work_centre_point.setter
    def work_centre_point(self, work_centre_point):
        """Sets the work_centre_point of this ForwardPlanProperties.


        :param work_centre_point: The work_centre_point of this ForwardPlanProperties.  # noqa: E501
        :type: GeoJSONCentrePoint
        """
        if work_centre_point is None:
            raise ValueError("Invalid value for `work_centre_point`, must not be `None`")  # noqa: E501

        self._work_centre_point = work_centre_point

    @property
    def street(self):
        """Gets the street of this ForwardPlanProperties.  # noqa: E501


        :return: The street of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ForwardPlanProperties.


        :param street: The street of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def area(self):
        """Gets the area of this ForwardPlanProperties.  # noqa: E501


        :return: The area of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this ForwardPlanProperties.


        :param area: The area of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def start_date(self):
        """Gets the start_date of this ForwardPlanProperties.  # noqa: E501


        :return: The start_date of this ForwardPlanProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ForwardPlanProperties.


        :param start_date: The start_date of this ForwardPlanProperties.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ForwardPlanProperties.  # noqa: E501


        :return: The end_date of this ForwardPlanProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ForwardPlanProperties.


        :param end_date: The end_date of this ForwardPlanProperties.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def description_of_work(self):
        """Gets the description_of_work of this ForwardPlanProperties.  # noqa: E501


        :return: The description_of_work of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._description_of_work

    @description_of_work.setter
    def description_of_work(self, description_of_work):
        """Sets the description_of_work of this ForwardPlanProperties.


        :param description_of_work: The description_of_work of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """
        if description_of_work is None:
            raise ValueError("Invalid value for `description_of_work`, must not be `None`")  # noqa: E501

        self._description_of_work = description_of_work

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this ForwardPlanProperties.  # noqa: E501


        :return: The promoter_organisation of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this ForwardPlanProperties.


        :param promoter_organisation: The promoter_organisation of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def location_description(self):
        """Gets the location_description of this ForwardPlanProperties.  # noqa: E501


        :return: The location_description of this ForwardPlanProperties.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this ForwardPlanProperties.


        :param location_description: The location_description of this ForwardPlanProperties.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForwardPlanProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForwardPlanProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
