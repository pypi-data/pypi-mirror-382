# coding: utf-8

"""
    Street Manager GeoJSON API

    See API specification Resource Guide > GeoJSON API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AncillaryInfoProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_number': 'str',
        'permit_reference_number': 'str',
        'ancillary_info_reference_number': 'str',
        'location_description': 'str',
        'ancillary_info_type': 'AncillaryInfoTypeResponse',
        'ancillary_info_status': 'AncillaryInfoStatusResponse',
        'ancillary_info_type_string': 'str',
        'ancillary_info_status_string': 'str',
        'ancillary_info_centre_point': 'GeoJSONCentrePoint',
        'ancillary_info_coordinates': 'list[object]',
        'promoter_organisation': 'str',
        'date_created': 'datetime',
        'usrns': 'list[float]'
    }

    attribute_map = {
        'work_reference_number': 'work_reference_number',
        'permit_reference_number': 'permit_reference_number',
        'ancillary_info_reference_number': 'ancillary_info_reference_number',
        'location_description': 'location_description',
        'ancillary_info_type': 'ancillary_info_type',
        'ancillary_info_status': 'ancillary_info_status',
        'ancillary_info_type_string': 'ancillary_info_type_string',
        'ancillary_info_status_string': 'ancillary_info_status_string',
        'ancillary_info_centre_point': 'ancillary_info_centre_point',
        'ancillary_info_coordinates': 'ancillary_info_coordinates',
        'promoter_organisation': 'promoter_organisation',
        'date_created': 'date_created',
        'usrns': 'usrns'
    }

    def __init__(self, work_reference_number=None, permit_reference_number=None, ancillary_info_reference_number=None, location_description=None, ancillary_info_type=None, ancillary_info_status=None, ancillary_info_type_string=None, ancillary_info_status_string=None, ancillary_info_centre_point=None, ancillary_info_coordinates=None, promoter_organisation=None, date_created=None, usrns=None):  # noqa: E501
        """AncillaryInfoProperties - a model defined in Swagger"""  # noqa: E501
        self._work_reference_number = None
        self._permit_reference_number = None
        self._ancillary_info_reference_number = None
        self._location_description = None
        self._ancillary_info_type = None
        self._ancillary_info_status = None
        self._ancillary_info_type_string = None
        self._ancillary_info_status_string = None
        self._ancillary_info_centre_point = None
        self._ancillary_info_coordinates = None
        self._promoter_organisation = None
        self._date_created = None
        self._usrns = None
        self.discriminator = None
        if work_reference_number is not None:
            self.work_reference_number = work_reference_number
        if permit_reference_number is not None:
            self.permit_reference_number = permit_reference_number
        self.ancillary_info_reference_number = ancillary_info_reference_number
        self.location_description = location_description
        self.ancillary_info_type = ancillary_info_type
        self.ancillary_info_status = ancillary_info_status
        self.ancillary_info_type_string = ancillary_info_type_string
        self.ancillary_info_status_string = ancillary_info_status_string
        self.ancillary_info_centre_point = ancillary_info_centre_point
        self.ancillary_info_coordinates = ancillary_info_coordinates
        self.promoter_organisation = promoter_organisation
        self.date_created = date_created
        self.usrns = usrns

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this AncillaryInfoProperties.  # noqa: E501


        :return: The work_reference_number of this AncillaryInfoProperties.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this AncillaryInfoProperties.


        :param work_reference_number: The work_reference_number of this AncillaryInfoProperties.  # noqa: E501
        :type: str
        """

        self._work_reference_number = work_reference_number

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this AncillaryInfoProperties.  # noqa: E501


        :return: The permit_reference_number of this AncillaryInfoProperties.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this AncillaryInfoProperties.


        :param permit_reference_number: The permit_reference_number of this AncillaryInfoProperties.  # noqa: E501
        :type: str
        """

        self._permit_reference_number = permit_reference_number

    @property
    def ancillary_info_reference_number(self):
        """Gets the ancillary_info_reference_number of this AncillaryInfoProperties.  # noqa: E501


        :return: The ancillary_info_reference_number of this AncillaryInfoProperties.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_reference_number

    @ancillary_info_reference_number.setter
    def ancillary_info_reference_number(self, ancillary_info_reference_number):
        """Sets the ancillary_info_reference_number of this AncillaryInfoProperties.


        :param ancillary_info_reference_number: The ancillary_info_reference_number of this AncillaryInfoProperties.  # noqa: E501
        :type: str
        """
        if ancillary_info_reference_number is None:
            raise ValueError("Invalid value for `ancillary_info_reference_number`, must not be `None`")  # noqa: E501

        self._ancillary_info_reference_number = ancillary_info_reference_number

    @property
    def location_description(self):
        """Gets the location_description of this AncillaryInfoProperties.  # noqa: E501


        :return: The location_description of this AncillaryInfoProperties.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this AncillaryInfoProperties.


        :param location_description: The location_description of this AncillaryInfoProperties.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def ancillary_info_type(self):
        """Gets the ancillary_info_type of this AncillaryInfoProperties.  # noqa: E501


        :return: The ancillary_info_type of this AncillaryInfoProperties.  # noqa: E501
        :rtype: AncillaryInfoTypeResponse
        """
        return self._ancillary_info_type

    @ancillary_info_type.setter
    def ancillary_info_type(self, ancillary_info_type):
        """Sets the ancillary_info_type of this AncillaryInfoProperties.


        :param ancillary_info_type: The ancillary_info_type of this AncillaryInfoProperties.  # noqa: E501
        :type: AncillaryInfoTypeResponse
        """
        if ancillary_info_type is None:
            raise ValueError("Invalid value for `ancillary_info_type`, must not be `None`")  # noqa: E501

        self._ancillary_info_type = ancillary_info_type

    @property
    def ancillary_info_status(self):
        """Gets the ancillary_info_status of this AncillaryInfoProperties.  # noqa: E501


        :return: The ancillary_info_status of this AncillaryInfoProperties.  # noqa: E501
        :rtype: AncillaryInfoStatusResponse
        """
        return self._ancillary_info_status

    @ancillary_info_status.setter
    def ancillary_info_status(self, ancillary_info_status):
        """Sets the ancillary_info_status of this AncillaryInfoProperties.


        :param ancillary_info_status: The ancillary_info_status of this AncillaryInfoProperties.  # noqa: E501
        :type: AncillaryInfoStatusResponse
        """
        if ancillary_info_status is None:
            raise ValueError("Invalid value for `ancillary_info_status`, must not be `None`")  # noqa: E501

        self._ancillary_info_status = ancillary_info_status

    @property
    def ancillary_info_type_string(self):
        """Gets the ancillary_info_type_string of this AncillaryInfoProperties.  # noqa: E501


        :return: The ancillary_info_type_string of this AncillaryInfoProperties.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_type_string

    @ancillary_info_type_string.setter
    def ancillary_info_type_string(self, ancillary_info_type_string):
        """Sets the ancillary_info_type_string of this AncillaryInfoProperties.


        :param ancillary_info_type_string: The ancillary_info_type_string of this AncillaryInfoProperties.  # noqa: E501
        :type: str
        """
        if ancillary_info_type_string is None:
            raise ValueError("Invalid value for `ancillary_info_type_string`, must not be `None`")  # noqa: E501

        self._ancillary_info_type_string = ancillary_info_type_string

    @property
    def ancillary_info_status_string(self):
        """Gets the ancillary_info_status_string of this AncillaryInfoProperties.  # noqa: E501


        :return: The ancillary_info_status_string of this AncillaryInfoProperties.  # noqa: E501
        :rtype: str
        """
        return self._ancillary_info_status_string

    @ancillary_info_status_string.setter
    def ancillary_info_status_string(self, ancillary_info_status_string):
        """Sets the ancillary_info_status_string of this AncillaryInfoProperties.


        :param ancillary_info_status_string: The ancillary_info_status_string of this AncillaryInfoProperties.  # noqa: E501
        :type: str
        """
        if ancillary_info_status_string is None:
            raise ValueError("Invalid value for `ancillary_info_status_string`, must not be `None`")  # noqa: E501

        self._ancillary_info_status_string = ancillary_info_status_string

    @property
    def ancillary_info_centre_point(self):
        """Gets the ancillary_info_centre_point of this AncillaryInfoProperties.  # noqa: E501


        :return: The ancillary_info_centre_point of this AncillaryInfoProperties.  # noqa: E501
        :rtype: GeoJSONCentrePoint
        """
        return self._ancillary_info_centre_point

    @ancillary_info_centre_point.setter
    def ancillary_info_centre_point(self, ancillary_info_centre_point):
        """Sets the ancillary_info_centre_point of this AncillaryInfoProperties.


        :param ancillary_info_centre_point: The ancillary_info_centre_point of this AncillaryInfoProperties.  # noqa: E501
        :type: GeoJSONCentrePoint
        """
        if ancillary_info_centre_point is None:
            raise ValueError("Invalid value for `ancillary_info_centre_point`, must not be `None`")  # noqa: E501

        self._ancillary_info_centre_point = ancillary_info_centre_point

    @property
    def ancillary_info_coordinates(self):
        """Gets the ancillary_info_coordinates of this AncillaryInfoProperties.  # noqa: E501


        :return: The ancillary_info_coordinates of this AncillaryInfoProperties.  # noqa: E501
        :rtype: list[object]
        """
        return self._ancillary_info_coordinates

    @ancillary_info_coordinates.setter
    def ancillary_info_coordinates(self, ancillary_info_coordinates):
        """Sets the ancillary_info_coordinates of this AncillaryInfoProperties.


        :param ancillary_info_coordinates: The ancillary_info_coordinates of this AncillaryInfoProperties.  # noqa: E501
        :type: list[object]
        """
        if ancillary_info_coordinates is None:
            raise ValueError("Invalid value for `ancillary_info_coordinates`, must not be `None`")  # noqa: E501

        self._ancillary_info_coordinates = ancillary_info_coordinates

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this AncillaryInfoProperties.  # noqa: E501


        :return: The promoter_organisation of this AncillaryInfoProperties.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this AncillaryInfoProperties.


        :param promoter_organisation: The promoter_organisation of this AncillaryInfoProperties.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def date_created(self):
        """Gets the date_created of this AncillaryInfoProperties.  # noqa: E501


        :return: The date_created of this AncillaryInfoProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AncillaryInfoProperties.


        :param date_created: The date_created of this AncillaryInfoProperties.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def usrns(self):
        """Gets the usrns of this AncillaryInfoProperties.  # noqa: E501


        :return: The usrns of this AncillaryInfoProperties.  # noqa: E501
        :rtype: list[float]
        """
        return self._usrns

    @usrns.setter
    def usrns(self, usrns):
        """Sets the usrns of this AncillaryInfoProperties.


        :param usrns: The usrns of this AncillaryInfoProperties.  # noqa: E501
        :type: list[float]
        """
        if usrns is None:
            raise ValueError("Invalid value for `usrns`, must not be `None`")  # noqa: E501

        self._usrns = usrns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AncillaryInfoProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AncillaryInfoProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
