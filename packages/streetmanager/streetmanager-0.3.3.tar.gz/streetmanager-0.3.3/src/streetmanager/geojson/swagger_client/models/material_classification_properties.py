# coding: utf-8

"""
    Street Manager GeoJSON API

    See API specification Resource Guide > GeoJSON API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterialClassificationProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'material_classification_reference_number': 'str',
        'material_classification_classification': 'MaterialClassificationClassificationResponse',
        'material_classification_classification_string': 'str',
        'sample_date': 'datetime',
        'recorded_by_swa_code': 'str',
        'recorded_by_organisation_name': 'str',
        'usrn': 'float',
        'material_type': 'list[MaterialClassificationMaterialTypeResponse]',
        'material_type_string': 'list[str]',
        'material_classification_centre_point': 'GeoJSONCentrePoint'
    }

    attribute_map = {
        'material_classification_reference_number': 'material_classification_reference_number',
        'material_classification_classification': 'material_classification_classification',
        'material_classification_classification_string': 'material_classification_classification_string',
        'sample_date': 'sample_date',
        'recorded_by_swa_code': 'recorded_by_swa_code',
        'recorded_by_organisation_name': 'recorded_by_organisation_name',
        'usrn': 'usrn',
        'material_type': 'material_type',
        'material_type_string': 'material_type_string',
        'material_classification_centre_point': 'material_classification_centre_point'
    }

    def __init__(self, material_classification_reference_number=None, material_classification_classification=None, material_classification_classification_string=None, sample_date=None, recorded_by_swa_code=None, recorded_by_organisation_name=None, usrn=None, material_type=None, material_type_string=None, material_classification_centre_point=None):  # noqa: E501
        """MaterialClassificationProperties - a model defined in Swagger"""  # noqa: E501
        self._material_classification_reference_number = None
        self._material_classification_classification = None
        self._material_classification_classification_string = None
        self._sample_date = None
        self._recorded_by_swa_code = None
        self._recorded_by_organisation_name = None
        self._usrn = None
        self._material_type = None
        self._material_type_string = None
        self._material_classification_centre_point = None
        self.discriminator = None
        self.material_classification_reference_number = material_classification_reference_number
        self.material_classification_classification = material_classification_classification
        self.material_classification_classification_string = material_classification_classification_string
        self.sample_date = sample_date
        self.recorded_by_swa_code = recorded_by_swa_code
        self.recorded_by_organisation_name = recorded_by_organisation_name
        self.usrn = usrn
        if material_type is not None:
            self.material_type = material_type
        if material_type_string is not None:
            self.material_type_string = material_type_string
        self.material_classification_centre_point = material_classification_centre_point

    @property
    def material_classification_reference_number(self):
        """Gets the material_classification_reference_number of this MaterialClassificationProperties.  # noqa: E501


        :return: The material_classification_reference_number of this MaterialClassificationProperties.  # noqa: E501
        :rtype: str
        """
        return self._material_classification_reference_number

    @material_classification_reference_number.setter
    def material_classification_reference_number(self, material_classification_reference_number):
        """Sets the material_classification_reference_number of this MaterialClassificationProperties.


        :param material_classification_reference_number: The material_classification_reference_number of this MaterialClassificationProperties.  # noqa: E501
        :type: str
        """
        if material_classification_reference_number is None:
            raise ValueError("Invalid value for `material_classification_reference_number`, must not be `None`")  # noqa: E501

        self._material_classification_reference_number = material_classification_reference_number

    @property
    def material_classification_classification(self):
        """Gets the material_classification_classification of this MaterialClassificationProperties.  # noqa: E501


        :return: The material_classification_classification of this MaterialClassificationProperties.  # noqa: E501
        :rtype: MaterialClassificationClassificationResponse
        """
        return self._material_classification_classification

    @material_classification_classification.setter
    def material_classification_classification(self, material_classification_classification):
        """Sets the material_classification_classification of this MaterialClassificationProperties.


        :param material_classification_classification: The material_classification_classification of this MaterialClassificationProperties.  # noqa: E501
        :type: MaterialClassificationClassificationResponse
        """
        if material_classification_classification is None:
            raise ValueError("Invalid value for `material_classification_classification`, must not be `None`")  # noqa: E501

        self._material_classification_classification = material_classification_classification

    @property
    def material_classification_classification_string(self):
        """Gets the material_classification_classification_string of this MaterialClassificationProperties.  # noqa: E501


        :return: The material_classification_classification_string of this MaterialClassificationProperties.  # noqa: E501
        :rtype: str
        """
        return self._material_classification_classification_string

    @material_classification_classification_string.setter
    def material_classification_classification_string(self, material_classification_classification_string):
        """Sets the material_classification_classification_string of this MaterialClassificationProperties.


        :param material_classification_classification_string: The material_classification_classification_string of this MaterialClassificationProperties.  # noqa: E501
        :type: str
        """
        if material_classification_classification_string is None:
            raise ValueError("Invalid value for `material_classification_classification_string`, must not be `None`")  # noqa: E501

        self._material_classification_classification_string = material_classification_classification_string

    @property
    def sample_date(self):
        """Gets the sample_date of this MaterialClassificationProperties.  # noqa: E501


        :return: The sample_date of this MaterialClassificationProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date

    @sample_date.setter
    def sample_date(self, sample_date):
        """Sets the sample_date of this MaterialClassificationProperties.


        :param sample_date: The sample_date of this MaterialClassificationProperties.  # noqa: E501
        :type: datetime
        """
        if sample_date is None:
            raise ValueError("Invalid value for `sample_date`, must not be `None`")  # noqa: E501

        self._sample_date = sample_date

    @property
    def recorded_by_swa_code(self):
        """Gets the recorded_by_swa_code of this MaterialClassificationProperties.  # noqa: E501


        :return: The recorded_by_swa_code of this MaterialClassificationProperties.  # noqa: E501
        :rtype: str
        """
        return self._recorded_by_swa_code

    @recorded_by_swa_code.setter
    def recorded_by_swa_code(self, recorded_by_swa_code):
        """Sets the recorded_by_swa_code of this MaterialClassificationProperties.


        :param recorded_by_swa_code: The recorded_by_swa_code of this MaterialClassificationProperties.  # noqa: E501
        :type: str
        """
        if recorded_by_swa_code is None:
            raise ValueError("Invalid value for `recorded_by_swa_code`, must not be `None`")  # noqa: E501

        self._recorded_by_swa_code = recorded_by_swa_code

    @property
    def recorded_by_organisation_name(self):
        """Gets the recorded_by_organisation_name of this MaterialClassificationProperties.  # noqa: E501


        :return: The recorded_by_organisation_name of this MaterialClassificationProperties.  # noqa: E501
        :rtype: str
        """
        return self._recorded_by_organisation_name

    @recorded_by_organisation_name.setter
    def recorded_by_organisation_name(self, recorded_by_organisation_name):
        """Sets the recorded_by_organisation_name of this MaterialClassificationProperties.


        :param recorded_by_organisation_name: The recorded_by_organisation_name of this MaterialClassificationProperties.  # noqa: E501
        :type: str
        """
        if recorded_by_organisation_name is None:
            raise ValueError("Invalid value for `recorded_by_organisation_name`, must not be `None`")  # noqa: E501

        self._recorded_by_organisation_name = recorded_by_organisation_name

    @property
    def usrn(self):
        """Gets the usrn of this MaterialClassificationProperties.  # noqa: E501


        :return: The usrn of this MaterialClassificationProperties.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this MaterialClassificationProperties.


        :param usrn: The usrn of this MaterialClassificationProperties.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def material_type(self):
        """Gets the material_type of this MaterialClassificationProperties.  # noqa: E501


        :return: The material_type of this MaterialClassificationProperties.  # noqa: E501
        :rtype: list[MaterialClassificationMaterialTypeResponse]
        """
        return self._material_type

    @material_type.setter
    def material_type(self, material_type):
        """Sets the material_type of this MaterialClassificationProperties.


        :param material_type: The material_type of this MaterialClassificationProperties.  # noqa: E501
        :type: list[MaterialClassificationMaterialTypeResponse]
        """

        self._material_type = material_type

    @property
    def material_type_string(self):
        """Gets the material_type_string of this MaterialClassificationProperties.  # noqa: E501


        :return: The material_type_string of this MaterialClassificationProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._material_type_string

    @material_type_string.setter
    def material_type_string(self, material_type_string):
        """Sets the material_type_string of this MaterialClassificationProperties.


        :param material_type_string: The material_type_string of this MaterialClassificationProperties.  # noqa: E501
        :type: list[str]
        """

        self._material_type_string = material_type_string

    @property
    def material_classification_centre_point(self):
        """Gets the material_classification_centre_point of this MaterialClassificationProperties.  # noqa: E501


        :return: The material_classification_centre_point of this MaterialClassificationProperties.  # noqa: E501
        :rtype: GeoJSONCentrePoint
        """
        return self._material_classification_centre_point

    @material_classification_centre_point.setter
    def material_classification_centre_point(self, material_classification_centre_point):
        """Sets the material_classification_centre_point of this MaterialClassificationProperties.


        :param material_classification_centre_point: The material_classification_centre_point of this MaterialClassificationProperties.  # noqa: E501
        :type: GeoJSONCentrePoint
        """
        if material_classification_centre_point is None:
            raise ValueError("Invalid value for `material_classification_centre_point`, must not be `None`")  # noqa: E501

        self._material_classification_centre_point = material_classification_centre_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterialClassificationProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialClassificationProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
