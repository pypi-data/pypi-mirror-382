# coding: utf-8

"""
    Street Manager GeoJSON API

    See API specification Resource Guide > GeoJSON API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_centre_point': 'GeoJSONCentrePoint',
        'activity_name': 'str',
        'activity_location_description': 'str',
        'activity_reference_number': 'str',
        'activity_type': 'ActivityActivityTypeResponse',
        'activity_type_string': 'str',
        'area_name': 'str',
        'cancelled': 'bool',
        'end_date': 'datetime',
        'street_name': 'str',
        'start_date': 'datetime'
    }

    attribute_map = {
        'activity_centre_point': 'activity_centre_point',
        'activity_name': 'activity_name',
        'activity_location_description': 'activity_location_description',
        'activity_reference_number': 'activity_reference_number',
        'activity_type': 'activity_type',
        'activity_type_string': 'activity_type_string',
        'area_name': 'area_name',
        'cancelled': 'cancelled',
        'end_date': 'end_date',
        'street_name': 'street_name',
        'start_date': 'start_date'
    }

    def __init__(self, activity_centre_point=None, activity_name=None, activity_location_description=None, activity_reference_number=None, activity_type=None, activity_type_string=None, area_name=None, cancelled=None, end_date=None, street_name=None, start_date=None):  # noqa: E501
        """ActivityProperties - a model defined in Swagger"""  # noqa: E501
        self._activity_centre_point = None
        self._activity_name = None
        self._activity_location_description = None
        self._activity_reference_number = None
        self._activity_type = None
        self._activity_type_string = None
        self._area_name = None
        self._cancelled = None
        self._end_date = None
        self._street_name = None
        self._start_date = None
        self.discriminator = None
        self.activity_centre_point = activity_centre_point
        self.activity_name = activity_name
        self.activity_location_description = activity_location_description
        self.activity_reference_number = activity_reference_number
        self.activity_type = activity_type
        self.activity_type_string = activity_type_string
        self.area_name = area_name
        self.cancelled = cancelled
        self.end_date = end_date
        self.street_name = street_name
        self.start_date = start_date

    @property
    def activity_centre_point(self):
        """Gets the activity_centre_point of this ActivityProperties.  # noqa: E501


        :return: The activity_centre_point of this ActivityProperties.  # noqa: E501
        :rtype: GeoJSONCentrePoint
        """
        return self._activity_centre_point

    @activity_centre_point.setter
    def activity_centre_point(self, activity_centre_point):
        """Sets the activity_centre_point of this ActivityProperties.


        :param activity_centre_point: The activity_centre_point of this ActivityProperties.  # noqa: E501
        :type: GeoJSONCentrePoint
        """
        if activity_centre_point is None:
            raise ValueError("Invalid value for `activity_centre_point`, must not be `None`")  # noqa: E501

        self._activity_centre_point = activity_centre_point

    @property
    def activity_name(self):
        """Gets the activity_name of this ActivityProperties.  # noqa: E501


        :return: The activity_name of this ActivityProperties.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this ActivityProperties.


        :param activity_name: The activity_name of this ActivityProperties.  # noqa: E501
        :type: str
        """
        if activity_name is None:
            raise ValueError("Invalid value for `activity_name`, must not be `None`")  # noqa: E501

        self._activity_name = activity_name

    @property
    def activity_location_description(self):
        """Gets the activity_location_description of this ActivityProperties.  # noqa: E501


        :return: The activity_location_description of this ActivityProperties.  # noqa: E501
        :rtype: str
        """
        return self._activity_location_description

    @activity_location_description.setter
    def activity_location_description(self, activity_location_description):
        """Sets the activity_location_description of this ActivityProperties.


        :param activity_location_description: The activity_location_description of this ActivityProperties.  # noqa: E501
        :type: str
        """
        if activity_location_description is None:
            raise ValueError("Invalid value for `activity_location_description`, must not be `None`")  # noqa: E501

        self._activity_location_description = activity_location_description

    @property
    def activity_reference_number(self):
        """Gets the activity_reference_number of this ActivityProperties.  # noqa: E501


        :return: The activity_reference_number of this ActivityProperties.  # noqa: E501
        :rtype: str
        """
        return self._activity_reference_number

    @activity_reference_number.setter
    def activity_reference_number(self, activity_reference_number):
        """Sets the activity_reference_number of this ActivityProperties.


        :param activity_reference_number: The activity_reference_number of this ActivityProperties.  # noqa: E501
        :type: str
        """
        if activity_reference_number is None:
            raise ValueError("Invalid value for `activity_reference_number`, must not be `None`")  # noqa: E501

        self._activity_reference_number = activity_reference_number

    @property
    def activity_type(self):
        """Gets the activity_type of this ActivityProperties.  # noqa: E501


        :return: The activity_type of this ActivityProperties.  # noqa: E501
        :rtype: ActivityActivityTypeResponse
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this ActivityProperties.


        :param activity_type: The activity_type of this ActivityProperties.  # noqa: E501
        :type: ActivityActivityTypeResponse
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")  # noqa: E501

        self._activity_type = activity_type

    @property
    def activity_type_string(self):
        """Gets the activity_type_string of this ActivityProperties.  # noqa: E501


        :return: The activity_type_string of this ActivityProperties.  # noqa: E501
        :rtype: str
        """
        return self._activity_type_string

    @activity_type_string.setter
    def activity_type_string(self, activity_type_string):
        """Sets the activity_type_string of this ActivityProperties.


        :param activity_type_string: The activity_type_string of this ActivityProperties.  # noqa: E501
        :type: str
        """
        if activity_type_string is None:
            raise ValueError("Invalid value for `activity_type_string`, must not be `None`")  # noqa: E501

        self._activity_type_string = activity_type_string

    @property
    def area_name(self):
        """Gets the area_name of this ActivityProperties.  # noqa: E501


        :return: The area_name of this ActivityProperties.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this ActivityProperties.


        :param area_name: The area_name of this ActivityProperties.  # noqa: E501
        :type: str
        """
        if area_name is None:
            raise ValueError("Invalid value for `area_name`, must not be `None`")  # noqa: E501

        self._area_name = area_name

    @property
    def cancelled(self):
        """Gets the cancelled of this ActivityProperties.  # noqa: E501


        :return: The cancelled of this ActivityProperties.  # noqa: E501
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this ActivityProperties.


        :param cancelled: The cancelled of this ActivityProperties.  # noqa: E501
        :type: bool
        """
        if cancelled is None:
            raise ValueError("Invalid value for `cancelled`, must not be `None`")  # noqa: E501

        self._cancelled = cancelled

    @property
    def end_date(self):
        """Gets the end_date of this ActivityProperties.  # noqa: E501


        :return: The end_date of this ActivityProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ActivityProperties.


        :param end_date: The end_date of this ActivityProperties.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def street_name(self):
        """Gets the street_name of this ActivityProperties.  # noqa: E501


        :return: The street_name of this ActivityProperties.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this ActivityProperties.


        :param street_name: The street_name of this ActivityProperties.  # noqa: E501
        :type: str
        """
        if street_name is None:
            raise ValueError("Invalid value for `street_name`, must not be `None`")  # noqa: E501

        self._street_name = street_name

    @property
    def start_date(self):
        """Gets the start_date of this ActivityProperties.  # noqa: E501


        :return: The start_date of this ActivityProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ActivityProperties.


        :param start_date: The start_date of this ActivityProperties.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
