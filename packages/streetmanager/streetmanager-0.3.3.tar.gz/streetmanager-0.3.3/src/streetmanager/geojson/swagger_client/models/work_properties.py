# coding: utf-8

"""
    Street Manager GeoJSON API

    See API specification Resource Guide > GeoJSON API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_number': 'str',
        'permit_reference_number': 'str',
        'promoter_organisation': 'str',
        'promoter_swa_code': 'str',
        'work_category': 'WorkCategoryResponse',
        'work_category_string': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'traffic_management_type': 'TrafficManagementTypeResponse',
        'traffic_management_type_string': 'str',
        'current_traffic_management_type': 'TrafficManagementTypeResponse',
        'current_traffic_management_type_string': 'str',
        'current_traffic_management_update_date': 'datetime',
        'street': 'str',
        'usrn': 'float',
        'town': 'str',
        'area': 'str',
        'highway_authority': 'str',
        'work_centre_point': 'GeoJSONCentrePoint',
        'permit_status': 'PermitStatusResponse',
        'permit_status_string': 'str',
        'industry_sector': 'AllOfWorkPropertiesIndustrySector',
        'industry_sector_string': 'str'
    }

    attribute_map = {
        'work_reference_number': 'work_reference_number',
        'permit_reference_number': 'permit_reference_number',
        'promoter_organisation': 'promoter_organisation',
        'promoter_swa_code': 'promoter_swa_code',
        'work_category': 'work_category',
        'work_category_string': 'work_category_string',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'traffic_management_type': 'traffic_management_type',
        'traffic_management_type_string': 'traffic_management_type_string',
        'current_traffic_management_type': 'current_traffic_management_type',
        'current_traffic_management_type_string': 'current_traffic_management_type_string',
        'current_traffic_management_update_date': 'current_traffic_management_update_date',
        'street': 'street',
        'usrn': 'usrn',
        'town': 'town',
        'area': 'area',
        'highway_authority': 'highway_authority',
        'work_centre_point': 'work_centre_point',
        'permit_status': 'permit_status',
        'permit_status_string': 'permit_status_string',
        'industry_sector': 'industry_sector',
        'industry_sector_string': 'industry_sector_string'
    }

    def __init__(self, work_reference_number=None, permit_reference_number=None, promoter_organisation=None, promoter_swa_code=None, work_category=None, work_category_string=None, start_date=None, end_date=None, traffic_management_type=None, traffic_management_type_string=None, current_traffic_management_type=None, current_traffic_management_type_string=None, current_traffic_management_update_date=None, street=None, usrn=None, town=None, area=None, highway_authority=None, work_centre_point=None, permit_status=None, permit_status_string=None, industry_sector=None, industry_sector_string=None):  # noqa: E501
        """WorkProperties - a model defined in Swagger"""  # noqa: E501
        self._work_reference_number = None
        self._permit_reference_number = None
        self._promoter_organisation = None
        self._promoter_swa_code = None
        self._work_category = None
        self._work_category_string = None
        self._start_date = None
        self._end_date = None
        self._traffic_management_type = None
        self._traffic_management_type_string = None
        self._current_traffic_management_type = None
        self._current_traffic_management_type_string = None
        self._current_traffic_management_update_date = None
        self._street = None
        self._usrn = None
        self._town = None
        self._area = None
        self._highway_authority = None
        self._work_centre_point = None
        self._permit_status = None
        self._permit_status_string = None
        self._industry_sector = None
        self._industry_sector_string = None
        self.discriminator = None
        self.work_reference_number = work_reference_number
        self.permit_reference_number = permit_reference_number
        self.promoter_organisation = promoter_organisation
        self.promoter_swa_code = promoter_swa_code
        self.work_category = work_category
        self.work_category_string = work_category_string
        self.start_date = start_date
        self.end_date = end_date
        self.traffic_management_type = traffic_management_type
        self.traffic_management_type_string = traffic_management_type_string
        if current_traffic_management_type is not None:
            self.current_traffic_management_type = current_traffic_management_type
        if current_traffic_management_type_string is not None:
            self.current_traffic_management_type_string = current_traffic_management_type_string
        if current_traffic_management_update_date is not None:
            self.current_traffic_management_update_date = current_traffic_management_update_date
        self.street = street
        self.usrn = usrn
        self.town = town
        self.area = area
        self.highway_authority = highway_authority
        self.work_centre_point = work_centre_point
        self.permit_status = permit_status
        self.permit_status_string = permit_status_string
        if industry_sector is not None:
            self.industry_sector = industry_sector
        if industry_sector_string is not None:
            self.industry_sector_string = industry_sector_string

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this WorkProperties.  # noqa: E501


        :return: The work_reference_number of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this WorkProperties.


        :param work_reference_number: The work_reference_number of this WorkProperties.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this WorkProperties.  # noqa: E501


        :return: The permit_reference_number of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this WorkProperties.


        :param permit_reference_number: The permit_reference_number of this WorkProperties.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this WorkProperties.  # noqa: E501


        :return: The promoter_organisation of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this WorkProperties.


        :param promoter_organisation: The promoter_organisation of this WorkProperties.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def promoter_swa_code(self):
        """Gets the promoter_swa_code of this WorkProperties.  # noqa: E501


        :return: The promoter_swa_code of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._promoter_swa_code

    @promoter_swa_code.setter
    def promoter_swa_code(self, promoter_swa_code):
        """Sets the promoter_swa_code of this WorkProperties.


        :param promoter_swa_code: The promoter_swa_code of this WorkProperties.  # noqa: E501
        :type: str
        """
        if promoter_swa_code is None:
            raise ValueError("Invalid value for `promoter_swa_code`, must not be `None`")  # noqa: E501

        self._promoter_swa_code = promoter_swa_code

    @property
    def work_category(self):
        """Gets the work_category of this WorkProperties.  # noqa: E501


        :return: The work_category of this WorkProperties.  # noqa: E501
        :rtype: WorkCategoryResponse
        """
        return self._work_category

    @work_category.setter
    def work_category(self, work_category):
        """Sets the work_category of this WorkProperties.


        :param work_category: The work_category of this WorkProperties.  # noqa: E501
        :type: WorkCategoryResponse
        """
        if work_category is None:
            raise ValueError("Invalid value for `work_category`, must not be `None`")  # noqa: E501

        self._work_category = work_category

    @property
    def work_category_string(self):
        """Gets the work_category_string of this WorkProperties.  # noqa: E501


        :return: The work_category_string of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._work_category_string

    @work_category_string.setter
    def work_category_string(self, work_category_string):
        """Sets the work_category_string of this WorkProperties.


        :param work_category_string: The work_category_string of this WorkProperties.  # noqa: E501
        :type: str
        """
        if work_category_string is None:
            raise ValueError("Invalid value for `work_category_string`, must not be `None`")  # noqa: E501

        self._work_category_string = work_category_string

    @property
    def start_date(self):
        """Gets the start_date of this WorkProperties.  # noqa: E501


        :return: The start_date of this WorkProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this WorkProperties.


        :param start_date: The start_date of this WorkProperties.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this WorkProperties.  # noqa: E501


        :return: The end_date of this WorkProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this WorkProperties.


        :param end_date: The end_date of this WorkProperties.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def traffic_management_type(self):
        """Gets the traffic_management_type of this WorkProperties.  # noqa: E501


        :return: The traffic_management_type of this WorkProperties.  # noqa: E501
        :rtype: TrafficManagementTypeResponse
        """
        return self._traffic_management_type

    @traffic_management_type.setter
    def traffic_management_type(self, traffic_management_type):
        """Sets the traffic_management_type of this WorkProperties.


        :param traffic_management_type: The traffic_management_type of this WorkProperties.  # noqa: E501
        :type: TrafficManagementTypeResponse
        """
        if traffic_management_type is None:
            raise ValueError("Invalid value for `traffic_management_type`, must not be `None`")  # noqa: E501

        self._traffic_management_type = traffic_management_type

    @property
    def traffic_management_type_string(self):
        """Gets the traffic_management_type_string of this WorkProperties.  # noqa: E501


        :return: The traffic_management_type_string of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._traffic_management_type_string

    @traffic_management_type_string.setter
    def traffic_management_type_string(self, traffic_management_type_string):
        """Sets the traffic_management_type_string of this WorkProperties.


        :param traffic_management_type_string: The traffic_management_type_string of this WorkProperties.  # noqa: E501
        :type: str
        """
        if traffic_management_type_string is None:
            raise ValueError("Invalid value for `traffic_management_type_string`, must not be `None`")  # noqa: E501

        self._traffic_management_type_string = traffic_management_type_string

    @property
    def current_traffic_management_type(self):
        """Gets the current_traffic_management_type of this WorkProperties.  # noqa: E501


        :return: The current_traffic_management_type of this WorkProperties.  # noqa: E501
        :rtype: TrafficManagementTypeResponse
        """
        return self._current_traffic_management_type

    @current_traffic_management_type.setter
    def current_traffic_management_type(self, current_traffic_management_type):
        """Sets the current_traffic_management_type of this WorkProperties.


        :param current_traffic_management_type: The current_traffic_management_type of this WorkProperties.  # noqa: E501
        :type: TrafficManagementTypeResponse
        """

        self._current_traffic_management_type = current_traffic_management_type

    @property
    def current_traffic_management_type_string(self):
        """Gets the current_traffic_management_type_string of this WorkProperties.  # noqa: E501


        :return: The current_traffic_management_type_string of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._current_traffic_management_type_string

    @current_traffic_management_type_string.setter
    def current_traffic_management_type_string(self, current_traffic_management_type_string):
        """Sets the current_traffic_management_type_string of this WorkProperties.


        :param current_traffic_management_type_string: The current_traffic_management_type_string of this WorkProperties.  # noqa: E501
        :type: str
        """

        self._current_traffic_management_type_string = current_traffic_management_type_string

    @property
    def current_traffic_management_update_date(self):
        """Gets the current_traffic_management_update_date of this WorkProperties.  # noqa: E501


        :return: The current_traffic_management_update_date of this WorkProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._current_traffic_management_update_date

    @current_traffic_management_update_date.setter
    def current_traffic_management_update_date(self, current_traffic_management_update_date):
        """Sets the current_traffic_management_update_date of this WorkProperties.


        :param current_traffic_management_update_date: The current_traffic_management_update_date of this WorkProperties.  # noqa: E501
        :type: datetime
        """

        self._current_traffic_management_update_date = current_traffic_management_update_date

    @property
    def street(self):
        """Gets the street of this WorkProperties.  # noqa: E501


        :return: The street of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this WorkProperties.


        :param street: The street of this WorkProperties.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def usrn(self):
        """Gets the usrn of this WorkProperties.  # noqa: E501


        :return: The usrn of this WorkProperties.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this WorkProperties.


        :param usrn: The usrn of this WorkProperties.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def town(self):
        """Gets the town of this WorkProperties.  # noqa: E501


        :return: The town of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this WorkProperties.


        :param town: The town of this WorkProperties.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def area(self):
        """Gets the area of this WorkProperties.  # noqa: E501


        :return: The area of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this WorkProperties.


        :param area: The area of this WorkProperties.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def highway_authority(self):
        """Gets the highway_authority of this WorkProperties.  # noqa: E501


        :return: The highway_authority of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority

    @highway_authority.setter
    def highway_authority(self, highway_authority):
        """Sets the highway_authority of this WorkProperties.


        :param highway_authority: The highway_authority of this WorkProperties.  # noqa: E501
        :type: str
        """
        if highway_authority is None:
            raise ValueError("Invalid value for `highway_authority`, must not be `None`")  # noqa: E501

        self._highway_authority = highway_authority

    @property
    def work_centre_point(self):
        """Gets the work_centre_point of this WorkProperties.  # noqa: E501


        :return: The work_centre_point of this WorkProperties.  # noqa: E501
        :rtype: GeoJSONCentrePoint
        """
        return self._work_centre_point

    @work_centre_point.setter
    def work_centre_point(self, work_centre_point):
        """Sets the work_centre_point of this WorkProperties.


        :param work_centre_point: The work_centre_point of this WorkProperties.  # noqa: E501
        :type: GeoJSONCentrePoint
        """
        if work_centre_point is None:
            raise ValueError("Invalid value for `work_centre_point`, must not be `None`")  # noqa: E501

        self._work_centre_point = work_centre_point

    @property
    def permit_status(self):
        """Gets the permit_status of this WorkProperties.  # noqa: E501


        :return: The permit_status of this WorkProperties.  # noqa: E501
        :rtype: PermitStatusResponse
        """
        return self._permit_status

    @permit_status.setter
    def permit_status(self, permit_status):
        """Sets the permit_status of this WorkProperties.


        :param permit_status: The permit_status of this WorkProperties.  # noqa: E501
        :type: PermitStatusResponse
        """
        if permit_status is None:
            raise ValueError("Invalid value for `permit_status`, must not be `None`")  # noqa: E501

        self._permit_status = permit_status

    @property
    def permit_status_string(self):
        """Gets the permit_status_string of this WorkProperties.  # noqa: E501


        :return: The permit_status_string of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._permit_status_string

    @permit_status_string.setter
    def permit_status_string(self, permit_status_string):
        """Sets the permit_status_string of this WorkProperties.


        :param permit_status_string: The permit_status_string of this WorkProperties.  # noqa: E501
        :type: str
        """
        if permit_status_string is None:
            raise ValueError("Invalid value for `permit_status_string`, must not be `None`")  # noqa: E501

        self._permit_status_string = permit_status_string

    @property
    def industry_sector(self):
        """Gets the industry_sector of this WorkProperties.  # noqa: E501


        :return: The industry_sector of this WorkProperties.  # noqa: E501
        :rtype: AllOfWorkPropertiesIndustrySector
        """
        return self._industry_sector

    @industry_sector.setter
    def industry_sector(self, industry_sector):
        """Sets the industry_sector of this WorkProperties.


        :param industry_sector: The industry_sector of this WorkProperties.  # noqa: E501
        :type: AllOfWorkPropertiesIndustrySector
        """

        self._industry_sector = industry_sector

    @property
    def industry_sector_string(self):
        """Gets the industry_sector_string of this WorkProperties.  # noqa: E501


        :return: The industry_sector_string of this WorkProperties.  # noqa: E501
        :rtype: str
        """
        return self._industry_sector_string

    @industry_sector_string.setter
    def industry_sector_string(self, industry_sector_string):
        """Sets the industry_sector_string of this WorkProperties.


        :param industry_sector_string: The industry_sector_string of this WorkProperties.  # noqa: E501
        :type: str
        """

        self._industry_sector_string = industry_sector_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
