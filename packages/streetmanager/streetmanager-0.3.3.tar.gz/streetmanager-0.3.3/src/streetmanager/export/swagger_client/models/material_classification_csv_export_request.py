# coding: utf-8

"""
    Street Manager Data Export API

    See API specification Resource Guide > Data Export API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterialClassificationCSVExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'material_classification_classification': 'MaterialClassificationClassification',
        'material_classification_reference_number': 'str',
        'street_descriptor': 'str',
        'usrn': 'str',
        'sample_date_from': 'datetime',
        'sample_date_to': 'datetime',
        'date_created_from': 'datetime',
        'date_created_to': 'datetime',
        'export_description': 'str'
    }

    attribute_map = {
        'material_classification_classification': 'material_classification_classification',
        'material_classification_reference_number': 'material_classification_reference_number',
        'street_descriptor': 'street_descriptor',
        'usrn': 'usrn',
        'sample_date_from': 'sample_date_from',
        'sample_date_to': 'sample_date_to',
        'date_created_from': 'date_created_from',
        'date_created_to': 'date_created_to',
        'export_description': 'export_description'
    }

    def __init__(self, material_classification_classification=None, material_classification_reference_number=None, street_descriptor=None, usrn=None, sample_date_from=None, sample_date_to=None, date_created_from=None, date_created_to=None, export_description=None):  # noqa: E501
        """MaterialClassificationCSVExportRequest - a model defined in Swagger"""  # noqa: E501
        self._material_classification_classification = None
        self._material_classification_reference_number = None
        self._street_descriptor = None
        self._usrn = None
        self._sample_date_from = None
        self._sample_date_to = None
        self._date_created_from = None
        self._date_created_to = None
        self._export_description = None
        self.discriminator = None
        self.material_classification_classification = material_classification_classification
        if material_classification_reference_number is not None:
            self.material_classification_reference_number = material_classification_reference_number
        if street_descriptor is not None:
            self.street_descriptor = street_descriptor
        if usrn is not None:
            self.usrn = usrn
        if sample_date_from is not None:
            self.sample_date_from = sample_date_from
        if sample_date_to is not None:
            self.sample_date_to = sample_date_to
        if date_created_from is not None:
            self.date_created_from = date_created_from
        if date_created_to is not None:
            self.date_created_to = date_created_to
        if export_description is not None:
            self.export_description = export_description

    @property
    def material_classification_classification(self):
        """Gets the material_classification_classification of this MaterialClassificationCSVExportRequest.  # noqa: E501


        :return: The material_classification_classification of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: MaterialClassificationClassification
        """
        return self._material_classification_classification

    @material_classification_classification.setter
    def material_classification_classification(self, material_classification_classification):
        """Sets the material_classification_classification of this MaterialClassificationCSVExportRequest.


        :param material_classification_classification: The material_classification_classification of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: MaterialClassificationClassification
        """
        if material_classification_classification is None:
            raise ValueError("Invalid value for `material_classification_classification`, must not be `None`")  # noqa: E501

        self._material_classification_classification = material_classification_classification

    @property
    def material_classification_reference_number(self):
        """Gets the material_classification_reference_number of this MaterialClassificationCSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The material_classification_reference_number of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._material_classification_reference_number

    @material_classification_reference_number.setter
    def material_classification_reference_number(self, material_classification_reference_number):
        """Sets the material_classification_reference_number of this MaterialClassificationCSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param material_classification_reference_number: The material_classification_reference_number of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._material_classification_reference_number = material_classification_reference_number

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this MaterialClassificationCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The street_descriptor of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this MaterialClassificationCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param street_descriptor: The street_descriptor of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._street_descriptor = street_descriptor

    @property
    def usrn(self):
        """Gets the usrn of this MaterialClassificationCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The usrn of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this MaterialClassificationCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param usrn: The usrn of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._usrn = usrn

    @property
    def sample_date_from(self):
        """Gets the sample_date_from of this MaterialClassificationCSVExportRequest.  # noqa: E501


        :return: The sample_date_from of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date_from

    @sample_date_from.setter
    def sample_date_from(self, sample_date_from):
        """Sets the sample_date_from of this MaterialClassificationCSVExportRequest.


        :param sample_date_from: The sample_date_from of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._sample_date_from = sample_date_from

    @property
    def sample_date_to(self):
        """Gets the sample_date_to of this MaterialClassificationCSVExportRequest.  # noqa: E501

        Must occur on or after sample_date_from  # noqa: E501

        :return: The sample_date_to of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date_to

    @sample_date_to.setter
    def sample_date_to(self, sample_date_to):
        """Sets the sample_date_to of this MaterialClassificationCSVExportRequest.

        Must occur on or after sample_date_from  # noqa: E501

        :param sample_date_to: The sample_date_to of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._sample_date_to = sample_date_to

    @property
    def date_created_from(self):
        """Gets the date_created_from of this MaterialClassificationCSVExportRequest.  # noqa: E501


        :return: The date_created_from of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created_from

    @date_created_from.setter
    def date_created_from(self, date_created_from):
        """Sets the date_created_from of this MaterialClassificationCSVExportRequest.


        :param date_created_from: The date_created_from of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._date_created_from = date_created_from

    @property
    def date_created_to(self):
        """Gets the date_created_to of this MaterialClassificationCSVExportRequest.  # noqa: E501

        Must occur on or after date_created_from  # noqa: E501

        :return: The date_created_to of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created_to

    @date_created_to.setter
    def date_created_to(self, date_created_to):
        """Sets the date_created_to of this MaterialClassificationCSVExportRequest.

        Must occur on or after date_created_from  # noqa: E501

        :param date_created_to: The date_created_to of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._date_created_to = date_created_to

    @property
    def export_description(self):
        """Gets the export_description of this MaterialClassificationCSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The export_description of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this MaterialClassificationCSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param export_description: The export_description of this MaterialClassificationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterialClassificationCSVExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialClassificationCSVExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
