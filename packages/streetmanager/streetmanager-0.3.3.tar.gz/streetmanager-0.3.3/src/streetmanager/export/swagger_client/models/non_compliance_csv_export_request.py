# coding: utf-8

"""
    Street Manager Data Export API

    See API specification Resource Guide > Data Export API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NonComplianceCSVExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geographical_area_reference_number': 'list[str]',
        'street_descriptor': 'str',
        'usrn': 'str',
        'swa_code': 'str',
        'export_description': 'str',
        'organisation': 'str',
        'non_compliance_reference_number': 'str',
        'non_compliance_status': 'list[NonComplianceStatus]',
        'ha_response_status': 'list[NonComplianceResponseStatus]',
        'promoter_response_status': 'list[NonComplianceResponseStatus]',
        'non_compliance_date_created_from': 'datetime',
        'non_compliance_date_created_to': 'datetime',
        'most_recent_inspection_type': 'list[InspectionType]',
        'most_recent_inspection_outcome': 'list[InspectionOutcome]',
        'most_recent_inspection_promoter_response_status': 'list[PromoterInspectionOutcomeStatusType]',
        'most_recent_inspection_ha_response_status': 'list[HAInspectionOutcomeStatusType]'
    }

    attribute_map = {
        'geographical_area_reference_number': 'geographical_area_reference_number',
        'street_descriptor': 'street_descriptor',
        'usrn': 'usrn',
        'swa_code': 'swa_code',
        'export_description': 'export_description',
        'organisation': 'organisation',
        'non_compliance_reference_number': 'non_compliance_reference_number',
        'non_compliance_status': 'non_compliance_status',
        'ha_response_status': 'ha_response_status',
        'promoter_response_status': 'promoter_response_status',
        'non_compliance_date_created_from': 'non_compliance_date_created_from',
        'non_compliance_date_created_to': 'non_compliance_date_created_to',
        'most_recent_inspection_type': 'most_recent_inspection_type',
        'most_recent_inspection_outcome': 'most_recent_inspection_outcome',
        'most_recent_inspection_promoter_response_status': 'most_recent_inspection_promoter_response_status',
        'most_recent_inspection_ha_response_status': 'most_recent_inspection_ha_response_status'
    }

    def __init__(self, geographical_area_reference_number=None, street_descriptor=None, usrn=None, swa_code=None, export_description=None, organisation=None, non_compliance_reference_number=None, non_compliance_status=None, ha_response_status=None, promoter_response_status=None, non_compliance_date_created_from=None, non_compliance_date_created_to=None, most_recent_inspection_type=None, most_recent_inspection_outcome=None, most_recent_inspection_promoter_response_status=None, most_recent_inspection_ha_response_status=None):  # noqa: E501
        """NonComplianceCSVExportRequest - a model defined in Swagger"""  # noqa: E501
        self._geographical_area_reference_number = None
        self._street_descriptor = None
        self._usrn = None
        self._swa_code = None
        self._export_description = None
        self._organisation = None
        self._non_compliance_reference_number = None
        self._non_compliance_status = None
        self._ha_response_status = None
        self._promoter_response_status = None
        self._non_compliance_date_created_from = None
        self._non_compliance_date_created_to = None
        self._most_recent_inspection_type = None
        self._most_recent_inspection_outcome = None
        self._most_recent_inspection_promoter_response_status = None
        self._most_recent_inspection_ha_response_status = None
        self.discriminator = None
        if geographical_area_reference_number is not None:
            self.geographical_area_reference_number = geographical_area_reference_number
        if street_descriptor is not None:
            self.street_descriptor = street_descriptor
        if usrn is not None:
            self.usrn = usrn
        if swa_code is not None:
            self.swa_code = swa_code
        if export_description is not None:
            self.export_description = export_description
        if organisation is not None:
            self.organisation = organisation
        if non_compliance_reference_number is not None:
            self.non_compliance_reference_number = non_compliance_reference_number
        if non_compliance_status is not None:
            self.non_compliance_status = non_compliance_status
        if ha_response_status is not None:
            self.ha_response_status = ha_response_status
        if promoter_response_status is not None:
            self.promoter_response_status = promoter_response_status
        if non_compliance_date_created_from is not None:
            self.non_compliance_date_created_from = non_compliance_date_created_from
        if non_compliance_date_created_to is not None:
            self.non_compliance_date_created_to = non_compliance_date_created_to
        if most_recent_inspection_type is not None:
            self.most_recent_inspection_type = most_recent_inspection_type
        if most_recent_inspection_outcome is not None:
            self.most_recent_inspection_outcome = most_recent_inspection_outcome
        if most_recent_inspection_promoter_response_status is not None:
            self.most_recent_inspection_promoter_response_status = most_recent_inspection_promoter_response_status
        if most_recent_inspection_ha_response_status is not None:
            self.most_recent_inspection_ha_response_status = most_recent_inspection_ha_response_status

    @property
    def geographical_area_reference_number(self):
        """Gets the geographical_area_reference_number of this NonComplianceCSVExportRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The geographical_area_reference_number of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._geographical_area_reference_number

    @geographical_area_reference_number.setter
    def geographical_area_reference_number(self, geographical_area_reference_number):
        """Sets the geographical_area_reference_number of this NonComplianceCSVExportRequest.

        Array values must be unique  # noqa: E501

        :param geographical_area_reference_number: The geographical_area_reference_number of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[str]
        """

        self._geographical_area_reference_number = geographical_area_reference_number

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this NonComplianceCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The street_descriptor of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this NonComplianceCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param street_descriptor: The street_descriptor of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._street_descriptor = street_descriptor

    @property
    def usrn(self):
        """Gets the usrn of this NonComplianceCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The usrn of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this NonComplianceCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param usrn: The usrn of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._usrn = usrn

    @property
    def swa_code(self):
        """Gets the swa_code of this NonComplianceCSVExportRequest.  # noqa: E501

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :return: The swa_code of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this NonComplianceCSVExportRequest.

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :param swa_code: The swa_code of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._swa_code = swa_code

    @property
    def export_description(self):
        """Gets the export_description of this NonComplianceCSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The export_description of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this NonComplianceCSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param export_description: The export_description of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    @property
    def organisation(self):
        """Gets the organisation of this NonComplianceCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The organisation of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this NonComplianceCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param organisation: The organisation of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._organisation = organisation

    @property
    def non_compliance_reference_number(self):
        """Gets the non_compliance_reference_number of this NonComplianceCSVExportRequest.  # noqa: E501

        Max length 106 characters  # noqa: E501

        :return: The non_compliance_reference_number of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._non_compliance_reference_number

    @non_compliance_reference_number.setter
    def non_compliance_reference_number(self, non_compliance_reference_number):
        """Sets the non_compliance_reference_number of this NonComplianceCSVExportRequest.

        Max length 106 characters  # noqa: E501

        :param non_compliance_reference_number: The non_compliance_reference_number of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._non_compliance_reference_number = non_compliance_reference_number

    @property
    def non_compliance_status(self):
        """Gets the non_compliance_status of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The non_compliance_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[NonComplianceStatus]
        """
        return self._non_compliance_status

    @non_compliance_status.setter
    def non_compliance_status(self, non_compliance_status):
        """Sets the non_compliance_status of this NonComplianceCSVExportRequest.


        :param non_compliance_status: The non_compliance_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[NonComplianceStatus]
        """

        self._non_compliance_status = non_compliance_status

    @property
    def ha_response_status(self):
        """Gets the ha_response_status of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The ha_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[NonComplianceResponseStatus]
        """
        return self._ha_response_status

    @ha_response_status.setter
    def ha_response_status(self, ha_response_status):
        """Sets the ha_response_status of this NonComplianceCSVExportRequest.


        :param ha_response_status: The ha_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[NonComplianceResponseStatus]
        """

        self._ha_response_status = ha_response_status

    @property
    def promoter_response_status(self):
        """Gets the promoter_response_status of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The promoter_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[NonComplianceResponseStatus]
        """
        return self._promoter_response_status

    @promoter_response_status.setter
    def promoter_response_status(self, promoter_response_status):
        """Sets the promoter_response_status of this NonComplianceCSVExportRequest.


        :param promoter_response_status: The promoter_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[NonComplianceResponseStatus]
        """

        self._promoter_response_status = promoter_response_status

    @property
    def non_compliance_date_created_from(self):
        """Gets the non_compliance_date_created_from of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The non_compliance_date_created_from of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._non_compliance_date_created_from

    @non_compliance_date_created_from.setter
    def non_compliance_date_created_from(self, non_compliance_date_created_from):
        """Sets the non_compliance_date_created_from of this NonComplianceCSVExportRequest.


        :param non_compliance_date_created_from: The non_compliance_date_created_from of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._non_compliance_date_created_from = non_compliance_date_created_from

    @property
    def non_compliance_date_created_to(self):
        """Gets the non_compliance_date_created_to of this NonComplianceCSVExportRequest.  # noqa: E501

        Must occur on or after non_compliance_date_created_from  # noqa: E501

        :return: The non_compliance_date_created_to of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._non_compliance_date_created_to

    @non_compliance_date_created_to.setter
    def non_compliance_date_created_to(self, non_compliance_date_created_to):
        """Sets the non_compliance_date_created_to of this NonComplianceCSVExportRequest.

        Must occur on or after non_compliance_date_created_from  # noqa: E501

        :param non_compliance_date_created_to: The non_compliance_date_created_to of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._non_compliance_date_created_to = non_compliance_date_created_to

    @property
    def most_recent_inspection_type(self):
        """Gets the most_recent_inspection_type of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The most_recent_inspection_type of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[InspectionType]
        """
        return self._most_recent_inspection_type

    @most_recent_inspection_type.setter
    def most_recent_inspection_type(self, most_recent_inspection_type):
        """Sets the most_recent_inspection_type of this NonComplianceCSVExportRequest.


        :param most_recent_inspection_type: The most_recent_inspection_type of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[InspectionType]
        """

        self._most_recent_inspection_type = most_recent_inspection_type

    @property
    def most_recent_inspection_outcome(self):
        """Gets the most_recent_inspection_outcome of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The most_recent_inspection_outcome of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[InspectionOutcome]
        """
        return self._most_recent_inspection_outcome

    @most_recent_inspection_outcome.setter
    def most_recent_inspection_outcome(self, most_recent_inspection_outcome):
        """Sets the most_recent_inspection_outcome of this NonComplianceCSVExportRequest.


        :param most_recent_inspection_outcome: The most_recent_inspection_outcome of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[InspectionOutcome]
        """

        self._most_recent_inspection_outcome = most_recent_inspection_outcome

    @property
    def most_recent_inspection_promoter_response_status(self):
        """Gets the most_recent_inspection_promoter_response_status of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The most_recent_inspection_promoter_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[PromoterInspectionOutcomeStatusType]
        """
        return self._most_recent_inspection_promoter_response_status

    @most_recent_inspection_promoter_response_status.setter
    def most_recent_inspection_promoter_response_status(self, most_recent_inspection_promoter_response_status):
        """Sets the most_recent_inspection_promoter_response_status of this NonComplianceCSVExportRequest.


        :param most_recent_inspection_promoter_response_status: The most_recent_inspection_promoter_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[PromoterInspectionOutcomeStatusType]
        """

        self._most_recent_inspection_promoter_response_status = most_recent_inspection_promoter_response_status

    @property
    def most_recent_inspection_ha_response_status(self):
        """Gets the most_recent_inspection_ha_response_status of this NonComplianceCSVExportRequest.  # noqa: E501


        :return: The most_recent_inspection_ha_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :rtype: list[HAInspectionOutcomeStatusType]
        """
        return self._most_recent_inspection_ha_response_status

    @most_recent_inspection_ha_response_status.setter
    def most_recent_inspection_ha_response_status(self, most_recent_inspection_ha_response_status):
        """Sets the most_recent_inspection_ha_response_status of this NonComplianceCSVExportRequest.


        :param most_recent_inspection_ha_response_status: The most_recent_inspection_ha_response_status of this NonComplianceCSVExportRequest.  # noqa: E501
        :type: list[HAInspectionOutcomeStatusType]
        """

        self._most_recent_inspection_ha_response_status = most_recent_inspection_ha_response_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NonComplianceCSVExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonComplianceCSVExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
