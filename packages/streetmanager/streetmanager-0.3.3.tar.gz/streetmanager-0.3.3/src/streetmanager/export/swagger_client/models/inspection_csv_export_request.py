# coding: utf-8

"""
    Street Manager Data Export API

    See API specification Resource Guide > Data Export API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InspectionCSVExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geographical_area_reference_number': 'list[str]',
        'street_descriptor': 'str',
        'usrn': 'str',
        'swa_code': 'str',
        'export_description': 'str',
        'organisation': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'inspection_type': 'list[InspectionType]',
        'start_date_created': 'datetime',
        'end_date_created': 'datetime',
        'work_reference_number': 'str',
        'inspection_category': 'list[InspectionCategory]',
        'inspection_outcome': 'list[InspectionOutcome]',
        'promoter_outcome_status': 'list[PromoterInspectionOutcomeStatusType]',
        'ha_outcome_status': 'list[HAInspectionOutcomeStatusType]',
        'is_auto_accepted': 'bool'
    }

    attribute_map = {
        'geographical_area_reference_number': 'geographical_area_reference_number',
        'street_descriptor': 'street_descriptor',
        'usrn': 'usrn',
        'swa_code': 'swa_code',
        'export_description': 'export_description',
        'organisation': 'organisation',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'inspection_type': 'inspection_type',
        'start_date_created': 'start_date_created',
        'end_date_created': 'end_date_created',
        'work_reference_number': 'work_reference_number',
        'inspection_category': 'inspection_category',
        'inspection_outcome': 'inspection_outcome',
        'promoter_outcome_status': 'promoter_outcome_status',
        'ha_outcome_status': 'ha_outcome_status',
        'is_auto_accepted': 'is_auto_accepted'
    }

    def __init__(self, geographical_area_reference_number=None, street_descriptor=None, usrn=None, swa_code=None, export_description=None, organisation=None, start_date=None, end_date=None, inspection_type=None, start_date_created=None, end_date_created=None, work_reference_number=None, inspection_category=None, inspection_outcome=None, promoter_outcome_status=None, ha_outcome_status=None, is_auto_accepted=None):  # noqa: E501
        """InspectionCSVExportRequest - a model defined in Swagger"""  # noqa: E501
        self._geographical_area_reference_number = None
        self._street_descriptor = None
        self._usrn = None
        self._swa_code = None
        self._export_description = None
        self._organisation = None
        self._start_date = None
        self._end_date = None
        self._inspection_type = None
        self._start_date_created = None
        self._end_date_created = None
        self._work_reference_number = None
        self._inspection_category = None
        self._inspection_outcome = None
        self._promoter_outcome_status = None
        self._ha_outcome_status = None
        self._is_auto_accepted = None
        self.discriminator = None
        if geographical_area_reference_number is not None:
            self.geographical_area_reference_number = geographical_area_reference_number
        if street_descriptor is not None:
            self.street_descriptor = street_descriptor
        if usrn is not None:
            self.usrn = usrn
        if swa_code is not None:
            self.swa_code = swa_code
        if export_description is not None:
            self.export_description = export_description
        if organisation is not None:
            self.organisation = organisation
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if inspection_type is not None:
            self.inspection_type = inspection_type
        if start_date_created is not None:
            self.start_date_created = start_date_created
        if end_date_created is not None:
            self.end_date_created = end_date_created
        if work_reference_number is not None:
            self.work_reference_number = work_reference_number
        if inspection_category is not None:
            self.inspection_category = inspection_category
        if inspection_outcome is not None:
            self.inspection_outcome = inspection_outcome
        if promoter_outcome_status is not None:
            self.promoter_outcome_status = promoter_outcome_status
        if ha_outcome_status is not None:
            self.ha_outcome_status = ha_outcome_status
        if is_auto_accepted is not None:
            self.is_auto_accepted = is_auto_accepted

    @property
    def geographical_area_reference_number(self):
        """Gets the geographical_area_reference_number of this InspectionCSVExportRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The geographical_area_reference_number of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._geographical_area_reference_number

    @geographical_area_reference_number.setter
    def geographical_area_reference_number(self, geographical_area_reference_number):
        """Sets the geographical_area_reference_number of this InspectionCSVExportRequest.

        Array values must be unique  # noqa: E501

        :param geographical_area_reference_number: The geographical_area_reference_number of this InspectionCSVExportRequest.  # noqa: E501
        :type: list[str]
        """

        self._geographical_area_reference_number = geographical_area_reference_number

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this InspectionCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The street_descriptor of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this InspectionCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param street_descriptor: The street_descriptor of this InspectionCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._street_descriptor = street_descriptor

    @property
    def usrn(self):
        """Gets the usrn of this InspectionCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The usrn of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this InspectionCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param usrn: The usrn of this InspectionCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._usrn = usrn

    @property
    def swa_code(self):
        """Gets the swa_code of this InspectionCSVExportRequest.  # noqa: E501

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :return: The swa_code of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this InspectionCSVExportRequest.

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :param swa_code: The swa_code of this InspectionCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._swa_code = swa_code

    @property
    def export_description(self):
        """Gets the export_description of this InspectionCSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The export_description of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this InspectionCSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param export_description: The export_description of this InspectionCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    @property
    def organisation(self):
        """Gets the organisation of this InspectionCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The organisation of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this InspectionCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param organisation: The organisation of this InspectionCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._organisation = organisation

    @property
    def start_date(self):
        """Gets the start_date of this InspectionCSVExportRequest.  # noqa: E501


        :return: The start_date of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InspectionCSVExportRequest.


        :param start_date: The start_date of this InspectionCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this InspectionCSVExportRequest.  # noqa: E501

        Must occur on or after the provided start_date  # noqa: E501

        :return: The end_date of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InspectionCSVExportRequest.

        Must occur on or after the provided start_date  # noqa: E501

        :param end_date: The end_date of this InspectionCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def inspection_type(self):
        """Gets the inspection_type of this InspectionCSVExportRequest.  # noqa: E501


        :return: The inspection_type of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: list[InspectionType]
        """
        return self._inspection_type

    @inspection_type.setter
    def inspection_type(self, inspection_type):
        """Sets the inspection_type of this InspectionCSVExportRequest.


        :param inspection_type: The inspection_type of this InspectionCSVExportRequest.  # noqa: E501
        :type: list[InspectionType]
        """

        self._inspection_type = inspection_type

    @property
    def start_date_created(self):
        """Gets the start_date_created of this InspectionCSVExportRequest.  # noqa: E501


        :return: The start_date_created of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_created

    @start_date_created.setter
    def start_date_created(self, start_date_created):
        """Sets the start_date_created of this InspectionCSVExportRequest.


        :param start_date_created: The start_date_created of this InspectionCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_created = start_date_created

    @property
    def end_date_created(self):
        """Gets the end_date_created of this InspectionCSVExportRequest.  # noqa: E501

        Must occur or or after the provided start_date_created  # noqa: E501

        :return: The end_date_created of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_created

    @end_date_created.setter
    def end_date_created(self, end_date_created):
        """Sets the end_date_created of this InspectionCSVExportRequest.

        Must occur or or after the provided start_date_created  # noqa: E501

        :param end_date_created: The end_date_created of this InspectionCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_created = end_date_created

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this InspectionCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The work_reference_number of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this InspectionCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param work_reference_number: The work_reference_number of this InspectionCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._work_reference_number = work_reference_number

    @property
    def inspection_category(self):
        """Gets the inspection_category of this InspectionCSVExportRequest.  # noqa: E501


        :return: The inspection_category of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: list[InspectionCategory]
        """
        return self._inspection_category

    @inspection_category.setter
    def inspection_category(self, inspection_category):
        """Sets the inspection_category of this InspectionCSVExportRequest.


        :param inspection_category: The inspection_category of this InspectionCSVExportRequest.  # noqa: E501
        :type: list[InspectionCategory]
        """

        self._inspection_category = inspection_category

    @property
    def inspection_outcome(self):
        """Gets the inspection_outcome of this InspectionCSVExportRequest.  # noqa: E501


        :return: The inspection_outcome of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: list[InspectionOutcome]
        """
        return self._inspection_outcome

    @inspection_outcome.setter
    def inspection_outcome(self, inspection_outcome):
        """Sets the inspection_outcome of this InspectionCSVExportRequest.


        :param inspection_outcome: The inspection_outcome of this InspectionCSVExportRequest.  # noqa: E501
        :type: list[InspectionOutcome]
        """

        self._inspection_outcome = inspection_outcome

    @property
    def promoter_outcome_status(self):
        """Gets the promoter_outcome_status of this InspectionCSVExportRequest.  # noqa: E501


        :return: The promoter_outcome_status of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: list[PromoterInspectionOutcomeStatusType]
        """
        return self._promoter_outcome_status

    @promoter_outcome_status.setter
    def promoter_outcome_status(self, promoter_outcome_status):
        """Sets the promoter_outcome_status of this InspectionCSVExportRequest.


        :param promoter_outcome_status: The promoter_outcome_status of this InspectionCSVExportRequest.  # noqa: E501
        :type: list[PromoterInspectionOutcomeStatusType]
        """

        self._promoter_outcome_status = promoter_outcome_status

    @property
    def ha_outcome_status(self):
        """Gets the ha_outcome_status of this InspectionCSVExportRequest.  # noqa: E501


        :return: The ha_outcome_status of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: list[HAInspectionOutcomeStatusType]
        """
        return self._ha_outcome_status

    @ha_outcome_status.setter
    def ha_outcome_status(self, ha_outcome_status):
        """Sets the ha_outcome_status of this InspectionCSVExportRequest.


        :param ha_outcome_status: The ha_outcome_status of this InspectionCSVExportRequest.  # noqa: E501
        :type: list[HAInspectionOutcomeStatusType]
        """

        self._ha_outcome_status = ha_outcome_status

    @property
    def is_auto_accepted(self):
        """Gets the is_auto_accepted of this InspectionCSVExportRequest.  # noqa: E501


        :return: The is_auto_accepted of this InspectionCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_accepted

    @is_auto_accepted.setter
    def is_auto_accepted(self, is_auto_accepted):
        """Sets the is_auto_accepted of this InspectionCSVExportRequest.


        :param is_auto_accepted: The is_auto_accepted of this InspectionCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_auto_accepted = is_auto_accepted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InspectionCSVExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionCSVExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
