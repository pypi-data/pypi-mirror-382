# coding: utf-8

"""
    Street Manager Data Export API

    See API specification Resource Guide > Data Export API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitAlterationCSVExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geographical_area_reference_number': 'list[str]',
        'street_descriptor': 'str',
        'usrn': 'str',
        'swa_code': 'str',
        'export_description': 'str',
        'organisation': 'str',
        'alteration_status': 'list[AlterationStatus]',
        'alteration_type': 'list[AlterationType]',
        'work_status': 'list[WorkStatus]',
        'work_category': 'list[WorkCategory]',
        'lane_rental_assessment_outcome': 'list[LaneRentalAssessmentOutcome]',
        'start_date_created': 'datetime',
        'end_date_created': 'datetime',
        'is_traffic_sensitive': 'bool',
        'is_high_impact_traffic_management': 'bool',
        'is_duration_extension': 'bool',
        'is_early_start': 'bool',
        'is_deemed': 'bool',
        'lane_rental_charges_not_agreed': 'bool',
        'lane_rental_charges_potentially_apply': 'bool',
        'status_update_date_from': 'datetime',
        'status_update_date_to': 'datetime',
        'permit_alteration_reference_number': 'str'
    }

    attribute_map = {
        'geographical_area_reference_number': 'geographical_area_reference_number',
        'street_descriptor': 'street_descriptor',
        'usrn': 'usrn',
        'swa_code': 'swa_code',
        'export_description': 'export_description',
        'organisation': 'organisation',
        'alteration_status': 'alteration_status',
        'alteration_type': 'alteration_type',
        'work_status': 'work_status',
        'work_category': 'work_category',
        'lane_rental_assessment_outcome': 'lane_rental_assessment_outcome',
        'start_date_created': 'start_date_created',
        'end_date_created': 'end_date_created',
        'is_traffic_sensitive': 'is_traffic_sensitive',
        'is_high_impact_traffic_management': 'is_high_impact_traffic_management',
        'is_duration_extension': 'is_duration_extension',
        'is_early_start': 'is_early_start',
        'is_deemed': 'is_deemed',
        'lane_rental_charges_not_agreed': 'lane_rental_charges_not_agreed',
        'lane_rental_charges_potentially_apply': 'lane_rental_charges_potentially_apply',
        'status_update_date_from': 'status_update_date_from',
        'status_update_date_to': 'status_update_date_to',
        'permit_alteration_reference_number': 'permit_alteration_reference_number'
    }

    def __init__(self, geographical_area_reference_number=None, street_descriptor=None, usrn=None, swa_code=None, export_description=None, organisation=None, alteration_status=None, alteration_type=None, work_status=None, work_category=None, lane_rental_assessment_outcome=None, start_date_created=None, end_date_created=None, is_traffic_sensitive=None, is_high_impact_traffic_management=None, is_duration_extension=None, is_early_start=None, is_deemed=None, lane_rental_charges_not_agreed=None, lane_rental_charges_potentially_apply=None, status_update_date_from=None, status_update_date_to=None, permit_alteration_reference_number=None):  # noqa: E501
        """PermitAlterationCSVExportRequest - a model defined in Swagger"""  # noqa: E501
        self._geographical_area_reference_number = None
        self._street_descriptor = None
        self._usrn = None
        self._swa_code = None
        self._export_description = None
        self._organisation = None
        self._alteration_status = None
        self._alteration_type = None
        self._work_status = None
        self._work_category = None
        self._lane_rental_assessment_outcome = None
        self._start_date_created = None
        self._end_date_created = None
        self._is_traffic_sensitive = None
        self._is_high_impact_traffic_management = None
        self._is_duration_extension = None
        self._is_early_start = None
        self._is_deemed = None
        self._lane_rental_charges_not_agreed = None
        self._lane_rental_charges_potentially_apply = None
        self._status_update_date_from = None
        self._status_update_date_to = None
        self._permit_alteration_reference_number = None
        self.discriminator = None
        if geographical_area_reference_number is not None:
            self.geographical_area_reference_number = geographical_area_reference_number
        if street_descriptor is not None:
            self.street_descriptor = street_descriptor
        if usrn is not None:
            self.usrn = usrn
        if swa_code is not None:
            self.swa_code = swa_code
        if export_description is not None:
            self.export_description = export_description
        if organisation is not None:
            self.organisation = organisation
        if alteration_status is not None:
            self.alteration_status = alteration_status
        if alteration_type is not None:
            self.alteration_type = alteration_type
        if work_status is not None:
            self.work_status = work_status
        if work_category is not None:
            self.work_category = work_category
        if lane_rental_assessment_outcome is not None:
            self.lane_rental_assessment_outcome = lane_rental_assessment_outcome
        if start_date_created is not None:
            self.start_date_created = start_date_created
        if end_date_created is not None:
            self.end_date_created = end_date_created
        if is_traffic_sensitive is not None:
            self.is_traffic_sensitive = is_traffic_sensitive
        if is_high_impact_traffic_management is not None:
            self.is_high_impact_traffic_management = is_high_impact_traffic_management
        if is_duration_extension is not None:
            self.is_duration_extension = is_duration_extension
        if is_early_start is not None:
            self.is_early_start = is_early_start
        if is_deemed is not None:
            self.is_deemed = is_deemed
        if lane_rental_charges_not_agreed is not None:
            self.lane_rental_charges_not_agreed = lane_rental_charges_not_agreed
        if lane_rental_charges_potentially_apply is not None:
            self.lane_rental_charges_potentially_apply = lane_rental_charges_potentially_apply
        if status_update_date_from is not None:
            self.status_update_date_from = status_update_date_from
        if status_update_date_to is not None:
            self.status_update_date_to = status_update_date_to
        if permit_alteration_reference_number is not None:
            self.permit_alteration_reference_number = permit_alteration_reference_number

    @property
    def geographical_area_reference_number(self):
        """Gets the geographical_area_reference_number of this PermitAlterationCSVExportRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The geographical_area_reference_number of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._geographical_area_reference_number

    @geographical_area_reference_number.setter
    def geographical_area_reference_number(self, geographical_area_reference_number):
        """Sets the geographical_area_reference_number of this PermitAlterationCSVExportRequest.

        Array values must be unique  # noqa: E501

        :param geographical_area_reference_number: The geographical_area_reference_number of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: list[str]
        """

        self._geographical_area_reference_number = geographical_area_reference_number

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this PermitAlterationCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The street_descriptor of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this PermitAlterationCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param street_descriptor: The street_descriptor of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._street_descriptor = street_descriptor

    @property
    def usrn(self):
        """Gets the usrn of this PermitAlterationCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The usrn of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this PermitAlterationCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param usrn: The usrn of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._usrn = usrn

    @property
    def swa_code(self):
        """Gets the swa_code of this PermitAlterationCSVExportRequest.  # noqa: E501

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :return: The swa_code of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this PermitAlterationCSVExportRequest.

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :param swa_code: The swa_code of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._swa_code = swa_code

    @property
    def export_description(self):
        """Gets the export_description of this PermitAlterationCSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The export_description of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this PermitAlterationCSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param export_description: The export_description of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    @property
    def organisation(self):
        """Gets the organisation of this PermitAlterationCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The organisation of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this PermitAlterationCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param organisation: The organisation of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._organisation = organisation

    @property
    def alteration_status(self):
        """Gets the alteration_status of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The alteration_status of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: list[AlterationStatus]
        """
        return self._alteration_status

    @alteration_status.setter
    def alteration_status(self, alteration_status):
        """Sets the alteration_status of this PermitAlterationCSVExportRequest.


        :param alteration_status: The alteration_status of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: list[AlterationStatus]
        """

        self._alteration_status = alteration_status

    @property
    def alteration_type(self):
        """Gets the alteration_type of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The alteration_type of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: list[AlterationType]
        """
        return self._alteration_type

    @alteration_type.setter
    def alteration_type(self, alteration_type):
        """Sets the alteration_type of this PermitAlterationCSVExportRequest.


        :param alteration_type: The alteration_type of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: list[AlterationType]
        """

        self._alteration_type = alteration_type

    @property
    def work_status(self):
        """Gets the work_status of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The work_status of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: list[WorkStatus]
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this PermitAlterationCSVExportRequest.


        :param work_status: The work_status of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: list[WorkStatus]
        """

        self._work_status = work_status

    @property
    def work_category(self):
        """Gets the work_category of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The work_category of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: list[WorkCategory]
        """
        return self._work_category

    @work_category.setter
    def work_category(self, work_category):
        """Sets the work_category of this PermitAlterationCSVExportRequest.


        :param work_category: The work_category of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: list[WorkCategory]
        """

        self._work_category = work_category

    @property
    def lane_rental_assessment_outcome(self):
        """Gets the lane_rental_assessment_outcome of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The lane_rental_assessment_outcome of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: list[LaneRentalAssessmentOutcome]
        """
        return self._lane_rental_assessment_outcome

    @lane_rental_assessment_outcome.setter
    def lane_rental_assessment_outcome(self, lane_rental_assessment_outcome):
        """Sets the lane_rental_assessment_outcome of this PermitAlterationCSVExportRequest.


        :param lane_rental_assessment_outcome: The lane_rental_assessment_outcome of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: list[LaneRentalAssessmentOutcome]
        """

        self._lane_rental_assessment_outcome = lane_rental_assessment_outcome

    @property
    def start_date_created(self):
        """Gets the start_date_created of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The start_date_created of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_created

    @start_date_created.setter
    def start_date_created(self, start_date_created):
        """Sets the start_date_created of this PermitAlterationCSVExportRequest.


        :param start_date_created: The start_date_created of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_created = start_date_created

    @property
    def end_date_created(self):
        """Gets the end_date_created of this PermitAlterationCSVExportRequest.  # noqa: E501

        Must occur on or after the provided start_date_created  # noqa: E501

        :return: The end_date_created of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_created

    @end_date_created.setter
    def end_date_created(self, end_date_created):
        """Sets the end_date_created of this PermitAlterationCSVExportRequest.

        Must occur on or after the provided start_date_created  # noqa: E501

        :param end_date_created: The end_date_created of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_created = end_date_created

    @property
    def is_traffic_sensitive(self):
        """Gets the is_traffic_sensitive of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The is_traffic_sensitive of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_traffic_sensitive

    @is_traffic_sensitive.setter
    def is_traffic_sensitive(self, is_traffic_sensitive):
        """Sets the is_traffic_sensitive of this PermitAlterationCSVExportRequest.


        :param is_traffic_sensitive: The is_traffic_sensitive of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_traffic_sensitive = is_traffic_sensitive

    @property
    def is_high_impact_traffic_management(self):
        """Gets the is_high_impact_traffic_management of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The is_high_impact_traffic_management of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_high_impact_traffic_management

    @is_high_impact_traffic_management.setter
    def is_high_impact_traffic_management(self, is_high_impact_traffic_management):
        """Sets the is_high_impact_traffic_management of this PermitAlterationCSVExportRequest.


        :param is_high_impact_traffic_management: The is_high_impact_traffic_management of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_high_impact_traffic_management = is_high_impact_traffic_management

    @property
    def is_duration_extension(self):
        """Gets the is_duration_extension of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The is_duration_extension of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_duration_extension

    @is_duration_extension.setter
    def is_duration_extension(self, is_duration_extension):
        """Sets the is_duration_extension of this PermitAlterationCSVExportRequest.


        :param is_duration_extension: The is_duration_extension of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_duration_extension = is_duration_extension

    @property
    def is_early_start(self):
        """Gets the is_early_start of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The is_early_start of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_early_start

    @is_early_start.setter
    def is_early_start(self, is_early_start):
        """Sets the is_early_start of this PermitAlterationCSVExportRequest.


        :param is_early_start: The is_early_start of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_early_start = is_early_start

    @property
    def is_deemed(self):
        """Gets the is_deemed of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The is_deemed of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_deemed

    @is_deemed.setter
    def is_deemed(self, is_deemed):
        """Sets the is_deemed of this PermitAlterationCSVExportRequest.


        :param is_deemed: The is_deemed of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_deemed = is_deemed

    @property
    def lane_rental_charges_not_agreed(self):
        """Gets the lane_rental_charges_not_agreed of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The lane_rental_charges_not_agreed of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._lane_rental_charges_not_agreed

    @lane_rental_charges_not_agreed.setter
    def lane_rental_charges_not_agreed(self, lane_rental_charges_not_agreed):
        """Sets the lane_rental_charges_not_agreed of this PermitAlterationCSVExportRequest.


        :param lane_rental_charges_not_agreed: The lane_rental_charges_not_agreed of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._lane_rental_charges_not_agreed = lane_rental_charges_not_agreed

    @property
    def lane_rental_charges_potentially_apply(self):
        """Gets the lane_rental_charges_potentially_apply of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The lane_rental_charges_potentially_apply of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._lane_rental_charges_potentially_apply

    @lane_rental_charges_potentially_apply.setter
    def lane_rental_charges_potentially_apply(self, lane_rental_charges_potentially_apply):
        """Sets the lane_rental_charges_potentially_apply of this PermitAlterationCSVExportRequest.


        :param lane_rental_charges_potentially_apply: The lane_rental_charges_potentially_apply of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._lane_rental_charges_potentially_apply = lane_rental_charges_potentially_apply

    @property
    def status_update_date_from(self):
        """Gets the status_update_date_from of this PermitAlterationCSVExportRequest.  # noqa: E501


        :return: The status_update_date_from of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._status_update_date_from

    @status_update_date_from.setter
    def status_update_date_from(self, status_update_date_from):
        """Sets the status_update_date_from of this PermitAlterationCSVExportRequest.


        :param status_update_date_from: The status_update_date_from of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._status_update_date_from = status_update_date_from

    @property
    def status_update_date_to(self):
        """Gets the status_update_date_to of this PermitAlterationCSVExportRequest.  # noqa: E501

        Must occur on or after the provided status_update_date_from  # noqa: E501

        :return: The status_update_date_to of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._status_update_date_to

    @status_update_date_to.setter
    def status_update_date_to(self, status_update_date_to):
        """Sets the status_update_date_to of this PermitAlterationCSVExportRequest.

        Must occur on or after the provided status_update_date_from  # noqa: E501

        :param status_update_date_to: The status_update_date_to of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._status_update_date_to = status_update_date_to

    @property
    def permit_alteration_reference_number(self):
        """Gets the permit_alteration_reference_number of this PermitAlterationCSVExportRequest.  # noqa: E501

        Max length 105 characters  # noqa: E501

        :return: The permit_alteration_reference_number of this PermitAlterationCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._permit_alteration_reference_number

    @permit_alteration_reference_number.setter
    def permit_alteration_reference_number(self, permit_alteration_reference_number):
        """Sets the permit_alteration_reference_number of this PermitAlterationCSVExportRequest.

        Max length 105 characters  # noqa: E501

        :param permit_alteration_reference_number: The permit_alteration_reference_number of this PermitAlterationCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._permit_alteration_reference_number = permit_alteration_reference_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitAlterationCSVExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitAlterationCSVExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
