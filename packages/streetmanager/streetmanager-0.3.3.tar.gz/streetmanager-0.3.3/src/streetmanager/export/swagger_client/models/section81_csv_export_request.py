# coding: utf-8

"""
    Street Manager Data Export API

    See API specification Resource Guide > Data Export API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Section81CSVExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geographical_area_reference_number': 'list[str]',
        'street_descriptor': 'str',
        'usrn': 'str',
        'swa_code': 'str',
        'export_description': 'str',
        'organisation': 'str',
        'status': 'list[Section81Status]',
        'severity': 'list[Section81Severity]',
        'issue_date_from': 'datetime',
        'issue_date_to': 'datetime',
        'status_changed_date_from': 'datetime',
        'status_changed_date_to': 'datetime',
        'type': 'list[Section81Type]',
        'section_81_reference_number': 'str'
    }

    attribute_map = {
        'geographical_area_reference_number': 'geographical_area_reference_number',
        'street_descriptor': 'street_descriptor',
        'usrn': 'usrn',
        'swa_code': 'swa_code',
        'export_description': 'export_description',
        'organisation': 'organisation',
        'status': 'status',
        'severity': 'severity',
        'issue_date_from': 'issue_date_from',
        'issue_date_to': 'issue_date_to',
        'status_changed_date_from': 'status_changed_date_from',
        'status_changed_date_to': 'status_changed_date_to',
        'type': 'type',
        'section_81_reference_number': 'section_81_reference_number'
    }

    def __init__(self, geographical_area_reference_number=None, street_descriptor=None, usrn=None, swa_code=None, export_description=None, organisation=None, status=None, severity=None, issue_date_from=None, issue_date_to=None, status_changed_date_from=None, status_changed_date_to=None, type=None, section_81_reference_number=None):  # noqa: E501
        """Section81CSVExportRequest - a model defined in Swagger"""  # noqa: E501
        self._geographical_area_reference_number = None
        self._street_descriptor = None
        self._usrn = None
        self._swa_code = None
        self._export_description = None
        self._organisation = None
        self._status = None
        self._severity = None
        self._issue_date_from = None
        self._issue_date_to = None
        self._status_changed_date_from = None
        self._status_changed_date_to = None
        self._type = None
        self._section_81_reference_number = None
        self.discriminator = None
        if geographical_area_reference_number is not None:
            self.geographical_area_reference_number = geographical_area_reference_number
        if street_descriptor is not None:
            self.street_descriptor = street_descriptor
        if usrn is not None:
            self.usrn = usrn
        if swa_code is not None:
            self.swa_code = swa_code
        if export_description is not None:
            self.export_description = export_description
        if organisation is not None:
            self.organisation = organisation
        if status is not None:
            self.status = status
        if severity is not None:
            self.severity = severity
        if issue_date_from is not None:
            self.issue_date_from = issue_date_from
        if issue_date_to is not None:
            self.issue_date_to = issue_date_to
        if status_changed_date_from is not None:
            self.status_changed_date_from = status_changed_date_from
        if status_changed_date_to is not None:
            self.status_changed_date_to = status_changed_date_to
        if type is not None:
            self.type = type
        if section_81_reference_number is not None:
            self.section_81_reference_number = section_81_reference_number

    @property
    def geographical_area_reference_number(self):
        """Gets the geographical_area_reference_number of this Section81CSVExportRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The geographical_area_reference_number of this Section81CSVExportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._geographical_area_reference_number

    @geographical_area_reference_number.setter
    def geographical_area_reference_number(self, geographical_area_reference_number):
        """Sets the geographical_area_reference_number of this Section81CSVExportRequest.

        Array values must be unique  # noqa: E501

        :param geographical_area_reference_number: The geographical_area_reference_number of this Section81CSVExportRequest.  # noqa: E501
        :type: list[str]
        """

        self._geographical_area_reference_number = geographical_area_reference_number

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this Section81CSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The street_descriptor of this Section81CSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this Section81CSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param street_descriptor: The street_descriptor of this Section81CSVExportRequest.  # noqa: E501
        :type: str
        """

        self._street_descriptor = street_descriptor

    @property
    def usrn(self):
        """Gets the usrn of this Section81CSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The usrn of this Section81CSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this Section81CSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param usrn: The usrn of this Section81CSVExportRequest.  # noqa: E501
        :type: str
        """

        self._usrn = usrn

    @property
    def swa_code(self):
        """Gets the swa_code of this Section81CSVExportRequest.  # noqa: E501

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :return: The swa_code of this Section81CSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this Section81CSVExportRequest.

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :param swa_code: The swa_code of this Section81CSVExportRequest.  # noqa: E501
        :type: str
        """

        self._swa_code = swa_code

    @property
    def export_description(self):
        """Gets the export_description of this Section81CSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The export_description of this Section81CSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this Section81CSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param export_description: The export_description of this Section81CSVExportRequest.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    @property
    def organisation(self):
        """Gets the organisation of this Section81CSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The organisation of this Section81CSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this Section81CSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param organisation: The organisation of this Section81CSVExportRequest.  # noqa: E501
        :type: str
        """

        self._organisation = organisation

    @property
    def status(self):
        """Gets the status of this Section81CSVExportRequest.  # noqa: E501


        :return: The status of this Section81CSVExportRequest.  # noqa: E501
        :rtype: list[Section81Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Section81CSVExportRequest.


        :param status: The status of this Section81CSVExportRequest.  # noqa: E501
        :type: list[Section81Status]
        """

        self._status = status

    @property
    def severity(self):
        """Gets the severity of this Section81CSVExportRequest.  # noqa: E501


        :return: The severity of this Section81CSVExportRequest.  # noqa: E501
        :rtype: list[Section81Severity]
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Section81CSVExportRequest.


        :param severity: The severity of this Section81CSVExportRequest.  # noqa: E501
        :type: list[Section81Severity]
        """

        self._severity = severity

    @property
    def issue_date_from(self):
        """Gets the issue_date_from of this Section81CSVExportRequest.  # noqa: E501


        :return: The issue_date_from of this Section81CSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date_from

    @issue_date_from.setter
    def issue_date_from(self, issue_date_from):
        """Sets the issue_date_from of this Section81CSVExportRequest.


        :param issue_date_from: The issue_date_from of this Section81CSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._issue_date_from = issue_date_from

    @property
    def issue_date_to(self):
        """Gets the issue_date_to of this Section81CSVExportRequest.  # noqa: E501

        Must occur on or after the provided issue_date_from  # noqa: E501

        :return: The issue_date_to of this Section81CSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date_to

    @issue_date_to.setter
    def issue_date_to(self, issue_date_to):
        """Sets the issue_date_to of this Section81CSVExportRequest.

        Must occur on or after the provided issue_date_from  # noqa: E501

        :param issue_date_to: The issue_date_to of this Section81CSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._issue_date_to = issue_date_to

    @property
    def status_changed_date_from(self):
        """Gets the status_changed_date_from of this Section81CSVExportRequest.  # noqa: E501


        :return: The status_changed_date_from of this Section81CSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date_from

    @status_changed_date_from.setter
    def status_changed_date_from(self, status_changed_date_from):
        """Sets the status_changed_date_from of this Section81CSVExportRequest.


        :param status_changed_date_from: The status_changed_date_from of this Section81CSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._status_changed_date_from = status_changed_date_from

    @property
    def status_changed_date_to(self):
        """Gets the status_changed_date_to of this Section81CSVExportRequest.  # noqa: E501

        Must occur on or after the provided status_changed_date_from  # noqa: E501

        :return: The status_changed_date_to of this Section81CSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date_to

    @status_changed_date_to.setter
    def status_changed_date_to(self, status_changed_date_to):
        """Sets the status_changed_date_to of this Section81CSVExportRequest.

        Must occur on or after the provided status_changed_date_from  # noqa: E501

        :param status_changed_date_to: The status_changed_date_to of this Section81CSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._status_changed_date_to = status_changed_date_to

    @property
    def type(self):
        """Gets the type of this Section81CSVExportRequest.  # noqa: E501


        :return: The type of this Section81CSVExportRequest.  # noqa: E501
        :rtype: list[Section81Type]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Section81CSVExportRequest.


        :param type: The type of this Section81CSVExportRequest.  # noqa: E501
        :type: list[Section81Type]
        """

        self._type = type

    @property
    def section_81_reference_number(self):
        """Gets the section_81_reference_number of this Section81CSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The section_81_reference_number of this Section81CSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._section_81_reference_number

    @section_81_reference_number.setter
    def section_81_reference_number(self, section_81_reference_number):
        """Sets the section_81_reference_number of this Section81CSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param section_81_reference_number: The section_81_reference_number of this Section81CSVExportRequest.  # noqa: E501
        :type: str
        """

        self._section_81_reference_number = section_81_reference_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section81CSVExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section81CSVExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
