# coding: utf-8

"""
    Street Manager Data Export API

    See API specification Resource Guide > Data Export API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InterestedPartyPermitsCSVExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geographical_area_reference_number': 'list[str]',
        'street_descriptor': 'str',
        'usrn': 'str',
        'swa_code': 'str',
        'export_description': 'str',
        'permit_reference_number': 'str',
        'work_reference_number': 'str',
        'work_start_date_from': 'datetime',
        'work_start_date_to': 'datetime',
        'work_end_date_from': 'datetime',
        'work_end_date_to': 'datetime',
        'start_date_created': 'datetime',
        'end_date_created': 'datetime',
        'work_status': 'list[WorkStatus]',
        'work_category': 'list[WorkCategory]',
        'is_high_impact_traffic_management': 'bool',
        'promoter_organisation_name': 'str',
        'ha_organisation_name': 'str'
    }

    attribute_map = {
        'geographical_area_reference_number': 'geographical_area_reference_number',
        'street_descriptor': 'street_descriptor',
        'usrn': 'usrn',
        'swa_code': 'swa_code',
        'export_description': 'export_description',
        'permit_reference_number': 'permit_reference_number',
        'work_reference_number': 'work_reference_number',
        'work_start_date_from': 'work_start_date_from',
        'work_start_date_to': 'work_start_date_to',
        'work_end_date_from': 'work_end_date_from',
        'work_end_date_to': 'work_end_date_to',
        'start_date_created': 'start_date_created',
        'end_date_created': 'end_date_created',
        'work_status': 'work_status',
        'work_category': 'work_category',
        'is_high_impact_traffic_management': 'is_high_impact_traffic_management',
        'promoter_organisation_name': 'promoter_organisation_name',
        'ha_organisation_name': 'ha_organisation_name'
    }

    def __init__(self, geographical_area_reference_number=None, street_descriptor=None, usrn=None, swa_code=None, export_description=None, permit_reference_number=None, work_reference_number=None, work_start_date_from=None, work_start_date_to=None, work_end_date_from=None, work_end_date_to=None, start_date_created=None, end_date_created=None, work_status=None, work_category=None, is_high_impact_traffic_management=None, promoter_organisation_name=None, ha_organisation_name=None):  # noqa: E501
        """InterestedPartyPermitsCSVExportRequest - a model defined in Swagger"""  # noqa: E501
        self._geographical_area_reference_number = None
        self._street_descriptor = None
        self._usrn = None
        self._swa_code = None
        self._export_description = None
        self._permit_reference_number = None
        self._work_reference_number = None
        self._work_start_date_from = None
        self._work_start_date_to = None
        self._work_end_date_from = None
        self._work_end_date_to = None
        self._start_date_created = None
        self._end_date_created = None
        self._work_status = None
        self._work_category = None
        self._is_high_impact_traffic_management = None
        self._promoter_organisation_name = None
        self._ha_organisation_name = None
        self.discriminator = None
        if geographical_area_reference_number is not None:
            self.geographical_area_reference_number = geographical_area_reference_number
        if street_descriptor is not None:
            self.street_descriptor = street_descriptor
        if usrn is not None:
            self.usrn = usrn
        if swa_code is not None:
            self.swa_code = swa_code
        if export_description is not None:
            self.export_description = export_description
        if permit_reference_number is not None:
            self.permit_reference_number = permit_reference_number
        if work_reference_number is not None:
            self.work_reference_number = work_reference_number
        if work_start_date_from is not None:
            self.work_start_date_from = work_start_date_from
        if work_start_date_to is not None:
            self.work_start_date_to = work_start_date_to
        if work_end_date_from is not None:
            self.work_end_date_from = work_end_date_from
        if work_end_date_to is not None:
            self.work_end_date_to = work_end_date_to
        if start_date_created is not None:
            self.start_date_created = start_date_created
        if end_date_created is not None:
            self.end_date_created = end_date_created
        if work_status is not None:
            self.work_status = work_status
        if work_category is not None:
            self.work_category = work_category
        if is_high_impact_traffic_management is not None:
            self.is_high_impact_traffic_management = is_high_impact_traffic_management
        if promoter_organisation_name is not None:
            self.promoter_organisation_name = promoter_organisation_name
        if ha_organisation_name is not None:
            self.ha_organisation_name = ha_organisation_name

    @property
    def geographical_area_reference_number(self):
        """Gets the geographical_area_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The geographical_area_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._geographical_area_reference_number

    @geographical_area_reference_number.setter
    def geographical_area_reference_number(self, geographical_area_reference_number):
        """Sets the geographical_area_reference_number of this InterestedPartyPermitsCSVExportRequest.

        Array values must be unique  # noqa: E501

        :param geographical_area_reference_number: The geographical_area_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: list[str]
        """

        self._geographical_area_reference_number = geographical_area_reference_number

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The street_descriptor of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this InterestedPartyPermitsCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param street_descriptor: The street_descriptor of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._street_descriptor = street_descriptor

    @property
    def usrn(self):
        """Gets the usrn of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The usrn of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this InterestedPartyPermitsCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param usrn: The usrn of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._usrn = usrn

    @property
    def swa_code(self):
        """Gets the swa_code of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :return: The swa_code of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this InterestedPartyPermitsCSVExportRequest.

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :param swa_code: The swa_code of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._swa_code = swa_code

    @property
    def export_description(self):
        """Gets the export_description of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The export_description of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this InterestedPartyPermitsCSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param export_description: The export_description of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The permit_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this InterestedPartyPermitsCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param permit_reference_number: The permit_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._permit_reference_number = permit_reference_number

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The work_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this InterestedPartyPermitsCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param work_reference_number: The work_reference_number of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._work_reference_number = work_reference_number

    @property
    def work_start_date_from(self):
        """Gets the work_start_date_from of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501


        :return: The work_start_date_from of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._work_start_date_from

    @work_start_date_from.setter
    def work_start_date_from(self, work_start_date_from):
        """Sets the work_start_date_from of this InterestedPartyPermitsCSVExportRequest.


        :param work_start_date_from: The work_start_date_from of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._work_start_date_from = work_start_date_from

    @property
    def work_start_date_to(self):
        """Gets the work_start_date_to of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Must occur on or after work_start_date_from  # noqa: E501

        :return: The work_start_date_to of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._work_start_date_to

    @work_start_date_to.setter
    def work_start_date_to(self, work_start_date_to):
        """Sets the work_start_date_to of this InterestedPartyPermitsCSVExportRequest.

        Must occur on or after work_start_date_from  # noqa: E501

        :param work_start_date_to: The work_start_date_to of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._work_start_date_to = work_start_date_to

    @property
    def work_end_date_from(self):
        """Gets the work_end_date_from of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501


        :return: The work_end_date_from of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._work_end_date_from

    @work_end_date_from.setter
    def work_end_date_from(self, work_end_date_from):
        """Sets the work_end_date_from of this InterestedPartyPermitsCSVExportRequest.


        :param work_end_date_from: The work_end_date_from of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._work_end_date_from = work_end_date_from

    @property
    def work_end_date_to(self):
        """Gets the work_end_date_to of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Must occur on or after work_end_date_from  # noqa: E501

        :return: The work_end_date_to of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._work_end_date_to

    @work_end_date_to.setter
    def work_end_date_to(self, work_end_date_to):
        """Sets the work_end_date_to of this InterestedPartyPermitsCSVExportRequest.

        Must occur on or after work_end_date_from  # noqa: E501

        :param work_end_date_to: The work_end_date_to of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._work_end_date_to = work_end_date_to

    @property
    def start_date_created(self):
        """Gets the start_date_created of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501


        :return: The start_date_created of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_created

    @start_date_created.setter
    def start_date_created(self, start_date_created):
        """Sets the start_date_created of this InterestedPartyPermitsCSVExportRequest.


        :param start_date_created: The start_date_created of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_created = start_date_created

    @property
    def end_date_created(self):
        """Gets the end_date_created of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Must occur on or after start_date_created  # noqa: E501

        :return: The end_date_created of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_created

    @end_date_created.setter
    def end_date_created(self, end_date_created):
        """Sets the end_date_created of this InterestedPartyPermitsCSVExportRequest.

        Must occur on or after start_date_created  # noqa: E501

        :param end_date_created: The end_date_created of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_created = end_date_created

    @property
    def work_status(self):
        """Gets the work_status of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501


        :return: The work_status of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: list[WorkStatus]
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this InterestedPartyPermitsCSVExportRequest.


        :param work_status: The work_status of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: list[WorkStatus]
        """

        self._work_status = work_status

    @property
    def work_category(self):
        """Gets the work_category of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501


        :return: The work_category of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: list[WorkCategory]
        """
        return self._work_category

    @work_category.setter
    def work_category(self, work_category):
        """Sets the work_category of this InterestedPartyPermitsCSVExportRequest.


        :param work_category: The work_category of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: list[WorkCategory]
        """

        self._work_category = work_category

    @property
    def is_high_impact_traffic_management(self):
        """Gets the is_high_impact_traffic_management of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501


        :return: The is_high_impact_traffic_management of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_high_impact_traffic_management

    @is_high_impact_traffic_management.setter
    def is_high_impact_traffic_management(self, is_high_impact_traffic_management):
        """Sets the is_high_impact_traffic_management of this InterestedPartyPermitsCSVExportRequest.


        :param is_high_impact_traffic_management: The is_high_impact_traffic_management of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_high_impact_traffic_management = is_high_impact_traffic_management

    @property
    def promoter_organisation_name(self):
        """Gets the promoter_organisation_name of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The promoter_organisation_name of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation_name

    @promoter_organisation_name.setter
    def promoter_organisation_name(self, promoter_organisation_name):
        """Sets the promoter_organisation_name of this InterestedPartyPermitsCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param promoter_organisation_name: The promoter_organisation_name of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._promoter_organisation_name = promoter_organisation_name

    @property
    def ha_organisation_name(self):
        """Gets the ha_organisation_name of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The ha_organisation_name of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._ha_organisation_name

    @ha_organisation_name.setter
    def ha_organisation_name(self, ha_organisation_name):
        """Sets the ha_organisation_name of this InterestedPartyPermitsCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param ha_organisation_name: The ha_organisation_name of this InterestedPartyPermitsCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._ha_organisation_name = ha_organisation_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterestedPartyPermitsCSVExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterestedPartyPermitsCSVExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
