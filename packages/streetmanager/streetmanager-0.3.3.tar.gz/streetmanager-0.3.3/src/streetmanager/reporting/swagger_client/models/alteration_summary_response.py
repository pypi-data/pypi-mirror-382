# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlterationSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_number': 'str',
        'permit_reference_number': 'str',
        'alteration_reference_number': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'location_description': 'str',
        'highway_authority': 'str',
        'promoter': 'str',
        'work_status': 'WorkStatusResponse',
        'work_status_string': 'str',
        'proposed_start_date': 'datetime',
        'proposed_end_date': 'datetime',
        'proposed_start_time': 'datetime',
        'proposed_end_time': 'datetime',
        'work_category': 'WorkCategoryResponse',
        'work_category_string': 'str',
        'alteration_status': 'AlterationStatusResponse',
        'alteration_status_string': 'str',
        'alteration_type': 'AlterationTypeResponse',
        'alteration_type_string': 'str',
        'date_created': 'datetime',
        'deadline_date': 'datetime',
        'status_changed_date': 'datetime',
        'lane_rental_assessment_outcome': 'AllOfAlterationSummaryResponseLaneRentalAssessmentOutcome',
        'lane_rental_assessment_outcome_string': 'str',
        'lane_rental_charges_not_agreed': 'bool',
        'lane_rental_charges_potentially_apply': 'bool'
    }

    attribute_map = {
        'work_reference_number': 'work_reference_number',
        'permit_reference_number': 'permit_reference_number',
        'alteration_reference_number': 'alteration_reference_number',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'location_description': 'location_description',
        'highway_authority': 'highway_authority',
        'promoter': 'promoter',
        'work_status': 'work_status',
        'work_status_string': 'work_status_string',
        'proposed_start_date': 'proposed_start_date',
        'proposed_end_date': 'proposed_end_date',
        'proposed_start_time': 'proposed_start_time',
        'proposed_end_time': 'proposed_end_time',
        'work_category': 'work_category',
        'work_category_string': 'work_category_string',
        'alteration_status': 'alteration_status',
        'alteration_status_string': 'alteration_status_string',
        'alteration_type': 'alteration_type',
        'alteration_type_string': 'alteration_type_string',
        'date_created': 'date_created',
        'deadline_date': 'deadline_date',
        'status_changed_date': 'status_changed_date',
        'lane_rental_assessment_outcome': 'lane_rental_assessment_outcome',
        'lane_rental_assessment_outcome_string': 'lane_rental_assessment_outcome_string',
        'lane_rental_charges_not_agreed': 'lane_rental_charges_not_agreed',
        'lane_rental_charges_potentially_apply': 'lane_rental_charges_potentially_apply'
    }

    def __init__(self, work_reference_number=None, permit_reference_number=None, alteration_reference_number=None, street=None, town=None, area=None, location_description=None, highway_authority=None, promoter=None, work_status=None, work_status_string=None, proposed_start_date=None, proposed_end_date=None, proposed_start_time=None, proposed_end_time=None, work_category=None, work_category_string=None, alteration_status=None, alteration_status_string=None, alteration_type=None, alteration_type_string=None, date_created=None, deadline_date=None, status_changed_date=None, lane_rental_assessment_outcome=None, lane_rental_assessment_outcome_string=None, lane_rental_charges_not_agreed=None, lane_rental_charges_potentially_apply=None):  # noqa: E501
        """AlterationSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._work_reference_number = None
        self._permit_reference_number = None
        self._alteration_reference_number = None
        self._street = None
        self._town = None
        self._area = None
        self._location_description = None
        self._highway_authority = None
        self._promoter = None
        self._work_status = None
        self._work_status_string = None
        self._proposed_start_date = None
        self._proposed_end_date = None
        self._proposed_start_time = None
        self._proposed_end_time = None
        self._work_category = None
        self._work_category_string = None
        self._alteration_status = None
        self._alteration_status_string = None
        self._alteration_type = None
        self._alteration_type_string = None
        self._date_created = None
        self._deadline_date = None
        self._status_changed_date = None
        self._lane_rental_assessment_outcome = None
        self._lane_rental_assessment_outcome_string = None
        self._lane_rental_charges_not_agreed = None
        self._lane_rental_charges_potentially_apply = None
        self.discriminator = None
        self.work_reference_number = work_reference_number
        self.permit_reference_number = permit_reference_number
        self.alteration_reference_number = alteration_reference_number
        self.street = street
        self.town = town
        self.area = area
        self.location_description = location_description
        self.highway_authority = highway_authority
        self.promoter = promoter
        self.work_status = work_status
        self.work_status_string = work_status_string
        self.proposed_start_date = proposed_start_date
        self.proposed_end_date = proposed_end_date
        if proposed_start_time is not None:
            self.proposed_start_time = proposed_start_time
        if proposed_end_time is not None:
            self.proposed_end_time = proposed_end_time
        self.work_category = work_category
        self.work_category_string = work_category_string
        self.alteration_status = alteration_status
        self.alteration_status_string = alteration_status_string
        self.alteration_type = alteration_type
        self.alteration_type_string = alteration_type_string
        self.date_created = date_created
        self.deadline_date = deadline_date
        self.status_changed_date = status_changed_date
        if lane_rental_assessment_outcome is not None:
            self.lane_rental_assessment_outcome = lane_rental_assessment_outcome
        if lane_rental_assessment_outcome_string is not None:
            self.lane_rental_assessment_outcome_string = lane_rental_assessment_outcome_string
        self.lane_rental_charges_not_agreed = lane_rental_charges_not_agreed
        self.lane_rental_charges_potentially_apply = lane_rental_charges_potentially_apply

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this AlterationSummaryResponse.  # noqa: E501


        :return: The work_reference_number of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this AlterationSummaryResponse.


        :param work_reference_number: The work_reference_number of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this AlterationSummaryResponse.  # noqa: E501


        :return: The permit_reference_number of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this AlterationSummaryResponse.


        :param permit_reference_number: The permit_reference_number of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def alteration_reference_number(self):
        """Gets the alteration_reference_number of this AlterationSummaryResponse.  # noqa: E501


        :return: The alteration_reference_number of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._alteration_reference_number

    @alteration_reference_number.setter
    def alteration_reference_number(self, alteration_reference_number):
        """Sets the alteration_reference_number of this AlterationSummaryResponse.


        :param alteration_reference_number: The alteration_reference_number of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if alteration_reference_number is None:
            raise ValueError("Invalid value for `alteration_reference_number`, must not be `None`")  # noqa: E501

        self._alteration_reference_number = alteration_reference_number

    @property
    def street(self):
        """Gets the street of this AlterationSummaryResponse.  # noqa: E501


        :return: The street of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this AlterationSummaryResponse.


        :param street: The street of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this AlterationSummaryResponse.  # noqa: E501


        :return: The town of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this AlterationSummaryResponse.


        :param town: The town of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def area(self):
        """Gets the area of this AlterationSummaryResponse.  # noqa: E501


        :return: The area of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this AlterationSummaryResponse.


        :param area: The area of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def location_description(self):
        """Gets the location_description of this AlterationSummaryResponse.  # noqa: E501


        :return: The location_description of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this AlterationSummaryResponse.


        :param location_description: The location_description of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def highway_authority(self):
        """Gets the highway_authority of this AlterationSummaryResponse.  # noqa: E501


        :return: The highway_authority of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority

    @highway_authority.setter
    def highway_authority(self, highway_authority):
        """Sets the highway_authority of this AlterationSummaryResponse.


        :param highway_authority: The highway_authority of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if highway_authority is None:
            raise ValueError("Invalid value for `highway_authority`, must not be `None`")  # noqa: E501

        self._highway_authority = highway_authority

    @property
    def promoter(self):
        """Gets the promoter of this AlterationSummaryResponse.  # noqa: E501


        :return: The promoter of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter

    @promoter.setter
    def promoter(self, promoter):
        """Sets the promoter of this AlterationSummaryResponse.


        :param promoter: The promoter of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if promoter is None:
            raise ValueError("Invalid value for `promoter`, must not be `None`")  # noqa: E501

        self._promoter = promoter

    @property
    def work_status(self):
        """Gets the work_status of this AlterationSummaryResponse.  # noqa: E501


        :return: The work_status of this AlterationSummaryResponse.  # noqa: E501
        :rtype: WorkStatusResponse
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this AlterationSummaryResponse.


        :param work_status: The work_status of this AlterationSummaryResponse.  # noqa: E501
        :type: WorkStatusResponse
        """
        if work_status is None:
            raise ValueError("Invalid value for `work_status`, must not be `None`")  # noqa: E501

        self._work_status = work_status

    @property
    def work_status_string(self):
        """Gets the work_status_string of this AlterationSummaryResponse.  # noqa: E501


        :return: The work_status_string of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_status_string

    @work_status_string.setter
    def work_status_string(self, work_status_string):
        """Sets the work_status_string of this AlterationSummaryResponse.


        :param work_status_string: The work_status_string of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_status_string is None:
            raise ValueError("Invalid value for `work_status_string`, must not be `None`")  # noqa: E501

        self._work_status_string = work_status_string

    @property
    def proposed_start_date(self):
        """Gets the proposed_start_date of this AlterationSummaryResponse.  # noqa: E501


        :return: The proposed_start_date of this AlterationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_date

    @proposed_start_date.setter
    def proposed_start_date(self, proposed_start_date):
        """Sets the proposed_start_date of this AlterationSummaryResponse.


        :param proposed_start_date: The proposed_start_date of this AlterationSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_start_date is None:
            raise ValueError("Invalid value for `proposed_start_date`, must not be `None`")  # noqa: E501

        self._proposed_start_date = proposed_start_date

    @property
    def proposed_end_date(self):
        """Gets the proposed_end_date of this AlterationSummaryResponse.  # noqa: E501


        :return: The proposed_end_date of this AlterationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_date

    @proposed_end_date.setter
    def proposed_end_date(self, proposed_end_date):
        """Sets the proposed_end_date of this AlterationSummaryResponse.


        :param proposed_end_date: The proposed_end_date of this AlterationSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_end_date is None:
            raise ValueError("Invalid value for `proposed_end_date`, must not be `None`")  # noqa: E501

        self._proposed_end_date = proposed_end_date

    @property
    def proposed_start_time(self):
        """Gets the proposed_start_time of this AlterationSummaryResponse.  # noqa: E501


        :return: The proposed_start_time of this AlterationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_time

    @proposed_start_time.setter
    def proposed_start_time(self, proposed_start_time):
        """Sets the proposed_start_time of this AlterationSummaryResponse.


        :param proposed_start_time: The proposed_start_time of this AlterationSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_start_time = proposed_start_time

    @property
    def proposed_end_time(self):
        """Gets the proposed_end_time of this AlterationSummaryResponse.  # noqa: E501


        :return: The proposed_end_time of this AlterationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_time

    @proposed_end_time.setter
    def proposed_end_time(self, proposed_end_time):
        """Sets the proposed_end_time of this AlterationSummaryResponse.


        :param proposed_end_time: The proposed_end_time of this AlterationSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_end_time = proposed_end_time

    @property
    def work_category(self):
        """Gets the work_category of this AlterationSummaryResponse.  # noqa: E501


        :return: The work_category of this AlterationSummaryResponse.  # noqa: E501
        :rtype: WorkCategoryResponse
        """
        return self._work_category

    @work_category.setter
    def work_category(self, work_category):
        """Sets the work_category of this AlterationSummaryResponse.


        :param work_category: The work_category of this AlterationSummaryResponse.  # noqa: E501
        :type: WorkCategoryResponse
        """
        if work_category is None:
            raise ValueError("Invalid value for `work_category`, must not be `None`")  # noqa: E501

        self._work_category = work_category

    @property
    def work_category_string(self):
        """Gets the work_category_string of this AlterationSummaryResponse.  # noqa: E501


        :return: The work_category_string of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_category_string

    @work_category_string.setter
    def work_category_string(self, work_category_string):
        """Sets the work_category_string of this AlterationSummaryResponse.


        :param work_category_string: The work_category_string of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_category_string is None:
            raise ValueError("Invalid value for `work_category_string`, must not be `None`")  # noqa: E501

        self._work_category_string = work_category_string

    @property
    def alteration_status(self):
        """Gets the alteration_status of this AlterationSummaryResponse.  # noqa: E501


        :return: The alteration_status of this AlterationSummaryResponse.  # noqa: E501
        :rtype: AlterationStatusResponse
        """
        return self._alteration_status

    @alteration_status.setter
    def alteration_status(self, alteration_status):
        """Sets the alteration_status of this AlterationSummaryResponse.


        :param alteration_status: The alteration_status of this AlterationSummaryResponse.  # noqa: E501
        :type: AlterationStatusResponse
        """
        if alteration_status is None:
            raise ValueError("Invalid value for `alteration_status`, must not be `None`")  # noqa: E501

        self._alteration_status = alteration_status

    @property
    def alteration_status_string(self):
        """Gets the alteration_status_string of this AlterationSummaryResponse.  # noqa: E501


        :return: The alteration_status_string of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._alteration_status_string

    @alteration_status_string.setter
    def alteration_status_string(self, alteration_status_string):
        """Sets the alteration_status_string of this AlterationSummaryResponse.


        :param alteration_status_string: The alteration_status_string of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if alteration_status_string is None:
            raise ValueError("Invalid value for `alteration_status_string`, must not be `None`")  # noqa: E501

        self._alteration_status_string = alteration_status_string

    @property
    def alteration_type(self):
        """Gets the alteration_type of this AlterationSummaryResponse.  # noqa: E501


        :return: The alteration_type of this AlterationSummaryResponse.  # noqa: E501
        :rtype: AlterationTypeResponse
        """
        return self._alteration_type

    @alteration_type.setter
    def alteration_type(self, alteration_type):
        """Sets the alteration_type of this AlterationSummaryResponse.


        :param alteration_type: The alteration_type of this AlterationSummaryResponse.  # noqa: E501
        :type: AlterationTypeResponse
        """
        if alteration_type is None:
            raise ValueError("Invalid value for `alteration_type`, must not be `None`")  # noqa: E501

        self._alteration_type = alteration_type

    @property
    def alteration_type_string(self):
        """Gets the alteration_type_string of this AlterationSummaryResponse.  # noqa: E501


        :return: The alteration_type_string of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._alteration_type_string

    @alteration_type_string.setter
    def alteration_type_string(self, alteration_type_string):
        """Sets the alteration_type_string of this AlterationSummaryResponse.


        :param alteration_type_string: The alteration_type_string of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """
        if alteration_type_string is None:
            raise ValueError("Invalid value for `alteration_type_string`, must not be `None`")  # noqa: E501

        self._alteration_type_string = alteration_type_string

    @property
    def date_created(self):
        """Gets the date_created of this AlterationSummaryResponse.  # noqa: E501


        :return: The date_created of this AlterationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AlterationSummaryResponse.


        :param date_created: The date_created of this AlterationSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def deadline_date(self):
        """Gets the deadline_date of this AlterationSummaryResponse.  # noqa: E501


        :return: The deadline_date of this AlterationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline_date

    @deadline_date.setter
    def deadline_date(self, deadline_date):
        """Sets the deadline_date of this AlterationSummaryResponse.


        :param deadline_date: The deadline_date of this AlterationSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if deadline_date is None:
            raise ValueError("Invalid value for `deadline_date`, must not be `None`")  # noqa: E501

        self._deadline_date = deadline_date

    @property
    def status_changed_date(self):
        """Gets the status_changed_date of this AlterationSummaryResponse.  # noqa: E501


        :return: The status_changed_date of this AlterationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date

    @status_changed_date.setter
    def status_changed_date(self, status_changed_date):
        """Sets the status_changed_date of this AlterationSummaryResponse.


        :param status_changed_date: The status_changed_date of this AlterationSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if status_changed_date is None:
            raise ValueError("Invalid value for `status_changed_date`, must not be `None`")  # noqa: E501

        self._status_changed_date = status_changed_date

    @property
    def lane_rental_assessment_outcome(self):
        """Gets the lane_rental_assessment_outcome of this AlterationSummaryResponse.  # noqa: E501


        :return: The lane_rental_assessment_outcome of this AlterationSummaryResponse.  # noqa: E501
        :rtype: AllOfAlterationSummaryResponseLaneRentalAssessmentOutcome
        """
        return self._lane_rental_assessment_outcome

    @lane_rental_assessment_outcome.setter
    def lane_rental_assessment_outcome(self, lane_rental_assessment_outcome):
        """Sets the lane_rental_assessment_outcome of this AlterationSummaryResponse.


        :param lane_rental_assessment_outcome: The lane_rental_assessment_outcome of this AlterationSummaryResponse.  # noqa: E501
        :type: AllOfAlterationSummaryResponseLaneRentalAssessmentOutcome
        """

        self._lane_rental_assessment_outcome = lane_rental_assessment_outcome

    @property
    def lane_rental_assessment_outcome_string(self):
        """Gets the lane_rental_assessment_outcome_string of this AlterationSummaryResponse.  # noqa: E501


        :return: The lane_rental_assessment_outcome_string of this AlterationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._lane_rental_assessment_outcome_string

    @lane_rental_assessment_outcome_string.setter
    def lane_rental_assessment_outcome_string(self, lane_rental_assessment_outcome_string):
        """Sets the lane_rental_assessment_outcome_string of this AlterationSummaryResponse.


        :param lane_rental_assessment_outcome_string: The lane_rental_assessment_outcome_string of this AlterationSummaryResponse.  # noqa: E501
        :type: str
        """

        self._lane_rental_assessment_outcome_string = lane_rental_assessment_outcome_string

    @property
    def lane_rental_charges_not_agreed(self):
        """Gets the lane_rental_charges_not_agreed of this AlterationSummaryResponse.  # noqa: E501


        :return: The lane_rental_charges_not_agreed of this AlterationSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._lane_rental_charges_not_agreed

    @lane_rental_charges_not_agreed.setter
    def lane_rental_charges_not_agreed(self, lane_rental_charges_not_agreed):
        """Sets the lane_rental_charges_not_agreed of this AlterationSummaryResponse.


        :param lane_rental_charges_not_agreed: The lane_rental_charges_not_agreed of this AlterationSummaryResponse.  # noqa: E501
        :type: bool
        """
        if lane_rental_charges_not_agreed is None:
            raise ValueError("Invalid value for `lane_rental_charges_not_agreed`, must not be `None`")  # noqa: E501

        self._lane_rental_charges_not_agreed = lane_rental_charges_not_agreed

    @property
    def lane_rental_charges_potentially_apply(self):
        """Gets the lane_rental_charges_potentially_apply of this AlterationSummaryResponse.  # noqa: E501


        :return: The lane_rental_charges_potentially_apply of this AlterationSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._lane_rental_charges_potentially_apply

    @lane_rental_charges_potentially_apply.setter
    def lane_rental_charges_potentially_apply(self, lane_rental_charges_potentially_apply):
        """Sets the lane_rental_charges_potentially_apply of this AlterationSummaryResponse.


        :param lane_rental_charges_potentially_apply: The lane_rental_charges_potentially_apply of this AlterationSummaryResponse.  # noqa: E501
        :type: bool
        """
        if lane_rental_charges_potentially_apply is None:
            raise ValueError("Invalid value for `lane_rental_charges_potentially_apply`, must not be `None`")  # noqa: E501

        self._lane_rental_charges_potentially_apply = lane_rental_charges_potentially_apply

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlterationSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlterationSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
