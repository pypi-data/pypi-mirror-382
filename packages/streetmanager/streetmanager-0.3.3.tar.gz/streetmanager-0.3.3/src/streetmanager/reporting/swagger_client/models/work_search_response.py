# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkSearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_number': 'str',
        'location_description': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'work_status': 'WorkStatusResponse',
        'work_status_string': 'str',
        'work_start_date': 'datetime',
        'work_end_date': 'datetime',
        'work_start_time': 'datetime',
        'work_end_time': 'datetime'
    }

    attribute_map = {
        'work_reference_number': 'work_reference_number',
        'location_description': 'location_description',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'work_status': 'work_status',
        'work_status_string': 'work_status_string',
        'work_start_date': 'work_start_date',
        'work_end_date': 'work_end_date',
        'work_start_time': 'work_start_time',
        'work_end_time': 'work_end_time'
    }

    def __init__(self, work_reference_number=None, location_description=None, street=None, town=None, area=None, work_status=None, work_status_string=None, work_start_date=None, work_end_date=None, work_start_time=None, work_end_time=None):  # noqa: E501
        """WorkSearchResponse - a model defined in Swagger"""  # noqa: E501
        self._work_reference_number = None
        self._location_description = None
        self._street = None
        self._town = None
        self._area = None
        self._work_status = None
        self._work_status_string = None
        self._work_start_date = None
        self._work_end_date = None
        self._work_start_time = None
        self._work_end_time = None
        self.discriminator = None
        self.work_reference_number = work_reference_number
        self.location_description = location_description
        self.street = street
        self.town = town
        self.area = area
        self.work_status = work_status
        self.work_status_string = work_status_string
        self.work_start_date = work_start_date
        self.work_end_date = work_end_date
        if work_start_time is not None:
            self.work_start_time = work_start_time
        if work_end_time is not None:
            self.work_end_time = work_end_time

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this WorkSearchResponse.  # noqa: E501


        :return: The work_reference_number of this WorkSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this WorkSearchResponse.


        :param work_reference_number: The work_reference_number of this WorkSearchResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def location_description(self):
        """Gets the location_description of this WorkSearchResponse.  # noqa: E501


        :return: The location_description of this WorkSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this WorkSearchResponse.


        :param location_description: The location_description of this WorkSearchResponse.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def street(self):
        """Gets the street of this WorkSearchResponse.  # noqa: E501


        :return: The street of this WorkSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this WorkSearchResponse.


        :param street: The street of this WorkSearchResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this WorkSearchResponse.  # noqa: E501


        :return: The town of this WorkSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this WorkSearchResponse.


        :param town: The town of this WorkSearchResponse.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def area(self):
        """Gets the area of this WorkSearchResponse.  # noqa: E501


        :return: The area of this WorkSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this WorkSearchResponse.


        :param area: The area of this WorkSearchResponse.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def work_status(self):
        """Gets the work_status of this WorkSearchResponse.  # noqa: E501


        :return: The work_status of this WorkSearchResponse.  # noqa: E501
        :rtype: WorkStatusResponse
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this WorkSearchResponse.


        :param work_status: The work_status of this WorkSearchResponse.  # noqa: E501
        :type: WorkStatusResponse
        """
        if work_status is None:
            raise ValueError("Invalid value for `work_status`, must not be `None`")  # noqa: E501

        self._work_status = work_status

    @property
    def work_status_string(self):
        """Gets the work_status_string of this WorkSearchResponse.  # noqa: E501


        :return: The work_status_string of this WorkSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_status_string

    @work_status_string.setter
    def work_status_string(self, work_status_string):
        """Sets the work_status_string of this WorkSearchResponse.


        :param work_status_string: The work_status_string of this WorkSearchResponse.  # noqa: E501
        :type: str
        """
        if work_status_string is None:
            raise ValueError("Invalid value for `work_status_string`, must not be `None`")  # noqa: E501

        self._work_status_string = work_status_string

    @property
    def work_start_date(self):
        """Gets the work_start_date of this WorkSearchResponse.  # noqa: E501


        :return: The work_start_date of this WorkSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._work_start_date

    @work_start_date.setter
    def work_start_date(self, work_start_date):
        """Sets the work_start_date of this WorkSearchResponse.


        :param work_start_date: The work_start_date of this WorkSearchResponse.  # noqa: E501
        :type: datetime
        """
        if work_start_date is None:
            raise ValueError("Invalid value for `work_start_date`, must not be `None`")  # noqa: E501

        self._work_start_date = work_start_date

    @property
    def work_end_date(self):
        """Gets the work_end_date of this WorkSearchResponse.  # noqa: E501


        :return: The work_end_date of this WorkSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._work_end_date

    @work_end_date.setter
    def work_end_date(self, work_end_date):
        """Sets the work_end_date of this WorkSearchResponse.


        :param work_end_date: The work_end_date of this WorkSearchResponse.  # noqa: E501
        :type: datetime
        """
        if work_end_date is None:
            raise ValueError("Invalid value for `work_end_date`, must not be `None`")  # noqa: E501

        self._work_end_date = work_end_date

    @property
    def work_start_time(self):
        """Gets the work_start_time of this WorkSearchResponse.  # noqa: E501


        :return: The work_start_time of this WorkSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._work_start_time

    @work_start_time.setter
    def work_start_time(self, work_start_time):
        """Sets the work_start_time of this WorkSearchResponse.


        :param work_start_time: The work_start_time of this WorkSearchResponse.  # noqa: E501
        :type: datetime
        """

        self._work_start_time = work_start_time

    @property
    def work_end_time(self):
        """Gets the work_end_time of this WorkSearchResponse.  # noqa: E501


        :return: The work_end_time of this WorkSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._work_end_time

    @work_end_time.setter
    def work_end_time(self, work_end_time):
        """Sets the work_end_time of this WorkSearchResponse.


        :param work_end_time: The work_end_time of this WorkSearchResponse.  # noqa: E501
        :type: datetime
        """

        self._work_end_time = work_end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkSearchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkSearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
