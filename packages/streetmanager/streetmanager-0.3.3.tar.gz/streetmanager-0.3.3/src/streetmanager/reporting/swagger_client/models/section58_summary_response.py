# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Section58SummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_created': 'datetime',
        'section_58_reference_number': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'section_58_status': 'Section58StatusResponse',
        'section_58_status_string': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'restriction_duration': 'Section58DurationResponse',
        'restriction_duration_string': 'str',
        'usrn': 'float',
        'ha_organisation_name': 'str'
    }

    attribute_map = {
        'date_created': 'date_created',
        'section_58_reference_number': 'section_58_reference_number',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'section_58_status': 'section_58_status',
        'section_58_status_string': 'section_58_status_string',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'restriction_duration': 'restriction_duration',
        'restriction_duration_string': 'restriction_duration_string',
        'usrn': 'usrn',
        'ha_organisation_name': 'ha_organisation_name'
    }

    def __init__(self, date_created=None, section_58_reference_number=None, street=None, town=None, area=None, section_58_status=None, section_58_status_string=None, start_date=None, end_date=None, restriction_duration=None, restriction_duration_string=None, usrn=None, ha_organisation_name=None):  # noqa: E501
        """Section58SummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._date_created = None
        self._section_58_reference_number = None
        self._street = None
        self._town = None
        self._area = None
        self._section_58_status = None
        self._section_58_status_string = None
        self._start_date = None
        self._end_date = None
        self._restriction_duration = None
        self._restriction_duration_string = None
        self._usrn = None
        self._ha_organisation_name = None
        self.discriminator = None
        self.date_created = date_created
        self.section_58_reference_number = section_58_reference_number
        self.street = street
        if town is not None:
            self.town = town
        if area is not None:
            self.area = area
        self.section_58_status = section_58_status
        self.section_58_status_string = section_58_status_string
        self.start_date = start_date
        self.end_date = end_date
        self.restriction_duration = restriction_duration
        self.restriction_duration_string = restriction_duration_string
        self.usrn = usrn
        self.ha_organisation_name = ha_organisation_name

    @property
    def date_created(self):
        """Gets the date_created of this Section58SummaryResponse.  # noqa: E501


        :return: The date_created of this Section58SummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Section58SummaryResponse.


        :param date_created: The date_created of this Section58SummaryResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def section_58_reference_number(self):
        """Gets the section_58_reference_number of this Section58SummaryResponse.  # noqa: E501


        :return: The section_58_reference_number of this Section58SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._section_58_reference_number

    @section_58_reference_number.setter
    def section_58_reference_number(self, section_58_reference_number):
        """Sets the section_58_reference_number of this Section58SummaryResponse.


        :param section_58_reference_number: The section_58_reference_number of this Section58SummaryResponse.  # noqa: E501
        :type: str
        """
        if section_58_reference_number is None:
            raise ValueError("Invalid value for `section_58_reference_number`, must not be `None`")  # noqa: E501

        self._section_58_reference_number = section_58_reference_number

    @property
    def street(self):
        """Gets the street of this Section58SummaryResponse.  # noqa: E501


        :return: The street of this Section58SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Section58SummaryResponse.


        :param street: The street of this Section58SummaryResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this Section58SummaryResponse.  # noqa: E501


        :return: The town of this Section58SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this Section58SummaryResponse.


        :param town: The town of this Section58SummaryResponse.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area(self):
        """Gets the area of this Section58SummaryResponse.  # noqa: E501


        :return: The area of this Section58SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Section58SummaryResponse.


        :param area: The area of this Section58SummaryResponse.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def section_58_status(self):
        """Gets the section_58_status of this Section58SummaryResponse.  # noqa: E501


        :return: The section_58_status of this Section58SummaryResponse.  # noqa: E501
        :rtype: Section58StatusResponse
        """
        return self._section_58_status

    @section_58_status.setter
    def section_58_status(self, section_58_status):
        """Sets the section_58_status of this Section58SummaryResponse.


        :param section_58_status: The section_58_status of this Section58SummaryResponse.  # noqa: E501
        :type: Section58StatusResponse
        """
        if section_58_status is None:
            raise ValueError("Invalid value for `section_58_status`, must not be `None`")  # noqa: E501

        self._section_58_status = section_58_status

    @property
    def section_58_status_string(self):
        """Gets the section_58_status_string of this Section58SummaryResponse.  # noqa: E501


        :return: The section_58_status_string of this Section58SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._section_58_status_string

    @section_58_status_string.setter
    def section_58_status_string(self, section_58_status_string):
        """Sets the section_58_status_string of this Section58SummaryResponse.


        :param section_58_status_string: The section_58_status_string of this Section58SummaryResponse.  # noqa: E501
        :type: str
        """
        if section_58_status_string is None:
            raise ValueError("Invalid value for `section_58_status_string`, must not be `None`")  # noqa: E501

        self._section_58_status_string = section_58_status_string

    @property
    def start_date(self):
        """Gets the start_date of this Section58SummaryResponse.  # noqa: E501


        :return: The start_date of this Section58SummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Section58SummaryResponse.


        :param start_date: The start_date of this Section58SummaryResponse.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Section58SummaryResponse.  # noqa: E501


        :return: The end_date of this Section58SummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Section58SummaryResponse.


        :param end_date: The end_date of this Section58SummaryResponse.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def restriction_duration(self):
        """Gets the restriction_duration of this Section58SummaryResponse.  # noqa: E501


        :return: The restriction_duration of this Section58SummaryResponse.  # noqa: E501
        :rtype: Section58DurationResponse
        """
        return self._restriction_duration

    @restriction_duration.setter
    def restriction_duration(self, restriction_duration):
        """Sets the restriction_duration of this Section58SummaryResponse.


        :param restriction_duration: The restriction_duration of this Section58SummaryResponse.  # noqa: E501
        :type: Section58DurationResponse
        """
        if restriction_duration is None:
            raise ValueError("Invalid value for `restriction_duration`, must not be `None`")  # noqa: E501

        self._restriction_duration = restriction_duration

    @property
    def restriction_duration_string(self):
        """Gets the restriction_duration_string of this Section58SummaryResponse.  # noqa: E501


        :return: The restriction_duration_string of this Section58SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._restriction_duration_string

    @restriction_duration_string.setter
    def restriction_duration_string(self, restriction_duration_string):
        """Sets the restriction_duration_string of this Section58SummaryResponse.


        :param restriction_duration_string: The restriction_duration_string of this Section58SummaryResponse.  # noqa: E501
        :type: str
        """
        if restriction_duration_string is None:
            raise ValueError("Invalid value for `restriction_duration_string`, must not be `None`")  # noqa: E501

        self._restriction_duration_string = restriction_duration_string

    @property
    def usrn(self):
        """Gets the usrn of this Section58SummaryResponse.  # noqa: E501


        :return: The usrn of this Section58SummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this Section58SummaryResponse.


        :param usrn: The usrn of this Section58SummaryResponse.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def ha_organisation_name(self):
        """Gets the ha_organisation_name of this Section58SummaryResponse.  # noqa: E501


        :return: The ha_organisation_name of this Section58SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_organisation_name

    @ha_organisation_name.setter
    def ha_organisation_name(self, ha_organisation_name):
        """Sets the ha_organisation_name of this Section58SummaryResponse.


        :param ha_organisation_name: The ha_organisation_name of this Section58SummaryResponse.  # noqa: E501
        :type: str
        """
        if ha_organisation_name is None:
            raise ValueError("Invalid value for `ha_organisation_name`, must not be `None`")  # noqa: E501

        self._ha_organisation_name = ha_organisation_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section58SummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section58SummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
