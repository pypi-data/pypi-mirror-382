# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CSVExportSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'csv_export_id': 'float',
        'filename': 'str',
        'date_created': 'datetime',
        'csv_export_status': 'CSVExportStatusResponse',
        'csv_export_status_string': 'str',
        'username': 'str',
        'csv_export_type': 'CSVExportTypeResponse',
        'csv_export_type_string': 'str',
        'export_description': 'str'
    }

    attribute_map = {
        'csv_export_id': 'csv_export_id',
        'filename': 'filename',
        'date_created': 'date_created',
        'csv_export_status': 'csv_export_status',
        'csv_export_status_string': 'csv_export_status_string',
        'username': 'username',
        'csv_export_type': 'csv_export_type',
        'csv_export_type_string': 'csv_export_type_string',
        'export_description': 'export_description'
    }

    def __init__(self, csv_export_id=None, filename=None, date_created=None, csv_export_status=None, csv_export_status_string=None, username=None, csv_export_type=None, csv_export_type_string=None, export_description=None):  # noqa: E501
        """CSVExportSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._csv_export_id = None
        self._filename = None
        self._date_created = None
        self._csv_export_status = None
        self._csv_export_status_string = None
        self._username = None
        self._csv_export_type = None
        self._csv_export_type_string = None
        self._export_description = None
        self.discriminator = None
        self.csv_export_id = csv_export_id
        self.filename = filename
        self.date_created = date_created
        self.csv_export_status = csv_export_status
        self.csv_export_status_string = csv_export_status_string
        self.username = username
        self.csv_export_type = csv_export_type
        self.csv_export_type_string = csv_export_type_string
        if export_description is not None:
            self.export_description = export_description

    @property
    def csv_export_id(self):
        """Gets the csv_export_id of this CSVExportSummaryResponse.  # noqa: E501


        :return: The csv_export_id of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._csv_export_id

    @csv_export_id.setter
    def csv_export_id(self, csv_export_id):
        """Sets the csv_export_id of this CSVExportSummaryResponse.


        :param csv_export_id: The csv_export_id of this CSVExportSummaryResponse.  # noqa: E501
        :type: float
        """
        if csv_export_id is None:
            raise ValueError("Invalid value for `csv_export_id`, must not be `None`")  # noqa: E501

        self._csv_export_id = csv_export_id

    @property
    def filename(self):
        """Gets the filename of this CSVExportSummaryResponse.  # noqa: E501


        :return: The filename of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this CSVExportSummaryResponse.


        :param filename: The filename of this CSVExportSummaryResponse.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def date_created(self):
        """Gets the date_created of this CSVExportSummaryResponse.  # noqa: E501


        :return: The date_created of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CSVExportSummaryResponse.


        :param date_created: The date_created of this CSVExportSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def csv_export_status(self):
        """Gets the csv_export_status of this CSVExportSummaryResponse.  # noqa: E501


        :return: The csv_export_status of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: CSVExportStatusResponse
        """
        return self._csv_export_status

    @csv_export_status.setter
    def csv_export_status(self, csv_export_status):
        """Sets the csv_export_status of this CSVExportSummaryResponse.


        :param csv_export_status: The csv_export_status of this CSVExportSummaryResponse.  # noqa: E501
        :type: CSVExportStatusResponse
        """
        if csv_export_status is None:
            raise ValueError("Invalid value for `csv_export_status`, must not be `None`")  # noqa: E501

        self._csv_export_status = csv_export_status

    @property
    def csv_export_status_string(self):
        """Gets the csv_export_status_string of this CSVExportSummaryResponse.  # noqa: E501


        :return: The csv_export_status_string of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._csv_export_status_string

    @csv_export_status_string.setter
    def csv_export_status_string(self, csv_export_status_string):
        """Sets the csv_export_status_string of this CSVExportSummaryResponse.


        :param csv_export_status_string: The csv_export_status_string of this CSVExportSummaryResponse.  # noqa: E501
        :type: str
        """
        if csv_export_status_string is None:
            raise ValueError("Invalid value for `csv_export_status_string`, must not be `None`")  # noqa: E501

        self._csv_export_status_string = csv_export_status_string

    @property
    def username(self):
        """Gets the username of this CSVExportSummaryResponse.  # noqa: E501


        :return: The username of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CSVExportSummaryResponse.


        :param username: The username of this CSVExportSummaryResponse.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def csv_export_type(self):
        """Gets the csv_export_type of this CSVExportSummaryResponse.  # noqa: E501


        :return: The csv_export_type of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: CSVExportTypeResponse
        """
        return self._csv_export_type

    @csv_export_type.setter
    def csv_export_type(self, csv_export_type):
        """Sets the csv_export_type of this CSVExportSummaryResponse.


        :param csv_export_type: The csv_export_type of this CSVExportSummaryResponse.  # noqa: E501
        :type: CSVExportTypeResponse
        """
        if csv_export_type is None:
            raise ValueError("Invalid value for `csv_export_type`, must not be `None`")  # noqa: E501

        self._csv_export_type = csv_export_type

    @property
    def csv_export_type_string(self):
        """Gets the csv_export_type_string of this CSVExportSummaryResponse.  # noqa: E501


        :return: The csv_export_type_string of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._csv_export_type_string

    @csv_export_type_string.setter
    def csv_export_type_string(self, csv_export_type_string):
        """Sets the csv_export_type_string of this CSVExportSummaryResponse.


        :param csv_export_type_string: The csv_export_type_string of this CSVExportSummaryResponse.  # noqa: E501
        :type: str
        """
        if csv_export_type_string is None:
            raise ValueError("Invalid value for `csv_export_type_string`, must not be `None`")  # noqa: E501

        self._csv_export_type_string = csv_export_type_string

    @property
    def export_description(self):
        """Gets the export_description of this CSVExportSummaryResponse.  # noqa: E501


        :return: The export_description of this CSVExportSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this CSVExportSummaryResponse.


        :param export_description: The export_description of this CSVExportSummaryResponse.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CSVExportSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSVExportSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
