# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkstreamSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prefix': 'str',
        'name': 'str',
        'description': 'str',
        'status': 'WorkstreamStatusResponse',
        'status_string': 'str',
        'swa_code': 'str'
    }

    attribute_map = {
        'prefix': 'prefix',
        'name': 'name',
        'description': 'description',
        'status': 'status',
        'status_string': 'status_string',
        'swa_code': 'swa_code'
    }

    def __init__(self, prefix=None, name=None, description=None, status=None, status_string=None, swa_code=None):  # noqa: E501
        """WorkstreamSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._prefix = None
        self._name = None
        self._description = None
        self._status = None
        self._status_string = None
        self._swa_code = None
        self.discriminator = None
        self.prefix = prefix
        self.name = name
        if description is not None:
            self.description = description
        self.status = status
        self.status_string = status_string
        self.swa_code = swa_code

    @property
    def prefix(self):
        """Gets the prefix of this WorkstreamSummaryResponse.  # noqa: E501


        :return: The prefix of this WorkstreamSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this WorkstreamSummaryResponse.


        :param prefix: The prefix of this WorkstreamSummaryResponse.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def name(self):
        """Gets the name of this WorkstreamSummaryResponse.  # noqa: E501


        :return: The name of this WorkstreamSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkstreamSummaryResponse.


        :param name: The name of this WorkstreamSummaryResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkstreamSummaryResponse.  # noqa: E501


        :return: The description of this WorkstreamSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkstreamSummaryResponse.


        :param description: The description of this WorkstreamSummaryResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this WorkstreamSummaryResponse.  # noqa: E501


        :return: The status of this WorkstreamSummaryResponse.  # noqa: E501
        :rtype: WorkstreamStatusResponse
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkstreamSummaryResponse.


        :param status: The status of this WorkstreamSummaryResponse.  # noqa: E501
        :type: WorkstreamStatusResponse
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_string(self):
        """Gets the status_string of this WorkstreamSummaryResponse.  # noqa: E501


        :return: The status_string of this WorkstreamSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_string

    @status_string.setter
    def status_string(self, status_string):
        """Sets the status_string of this WorkstreamSummaryResponse.


        :param status_string: The status_string of this WorkstreamSummaryResponse.  # noqa: E501
        :type: str
        """
        if status_string is None:
            raise ValueError("Invalid value for `status_string`, must not be `None`")  # noqa: E501

        self._status_string = status_string

    @property
    def swa_code(self):
        """Gets the swa_code of this WorkstreamSummaryResponse.  # noqa: E501


        :return: The swa_code of this WorkstreamSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this WorkstreamSummaryResponse.


        :param swa_code: The swa_code of this WorkstreamSummaryResponse.  # noqa: E501
        :type: str
        """
        if swa_code is None:
            raise ValueError("Invalid value for `swa_code`, must not be `None`")  # noqa: E501

        self._swa_code = swa_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkstreamSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkstreamSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
