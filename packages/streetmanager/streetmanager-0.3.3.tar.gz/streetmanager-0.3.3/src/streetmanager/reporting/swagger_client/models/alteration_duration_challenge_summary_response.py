# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlterationDurationChallengeSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_number': 'str',
        'permit_reference_number': 'str',
        'alteration_reference_number': 'str',
        'location_description': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'usrn': 'float',
        'promoter_swa_code': 'str',
        'promoter_organisation': 'str',
        'highway_authority': 'str',
        'proposed_start_date': 'datetime',
        'proposed_end_date': 'datetime',
        'proposed_start_time': 'datetime',
        'proposed_end_time': 'datetime',
        'actual_start_date': 'datetime',
        'actual_end_date': 'datetime',
        'reasonable_period_end_date': 'datetime',
        'status_changed_date': 'datetime',
        'duration_challenge_review_status': 'AllOfAlterationDurationChallengeSummaryResponseDurationChallengeReviewStatus',
        'duration_challenge_review_status_string': 'str',
        'duration_challenge_review_update_date': 'datetime',
        'duration_challenge_non_acceptance_response_status': 'AllOfAlterationDurationChallengeSummaryResponseDurationChallengeNonAcceptanceResponseStatus',
        'duration_challenge_non_acceptance_response_status_string': 'str',
        'duration_challenge_non_acceptance_response_update_date': 'datetime',
        'duration_challenge_follow_up_review_complete': 'bool',
        'work_status': 'WorkStatusResponse',
        'work_status_string': 'str'
    }

    attribute_map = {
        'work_reference_number': 'work_reference_number',
        'permit_reference_number': 'permit_reference_number',
        'alteration_reference_number': 'alteration_reference_number',
        'location_description': 'location_description',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'usrn': 'usrn',
        'promoter_swa_code': 'promoter_swa_code',
        'promoter_organisation': 'promoter_organisation',
        'highway_authority': 'highway_authority',
        'proposed_start_date': 'proposed_start_date',
        'proposed_end_date': 'proposed_end_date',
        'proposed_start_time': 'proposed_start_time',
        'proposed_end_time': 'proposed_end_time',
        'actual_start_date': 'actual_start_date',
        'actual_end_date': 'actual_end_date',
        'reasonable_period_end_date': 'reasonable_period_end_date',
        'status_changed_date': 'status_changed_date',
        'duration_challenge_review_status': 'duration_challenge_review_status',
        'duration_challenge_review_status_string': 'duration_challenge_review_status_string',
        'duration_challenge_review_update_date': 'duration_challenge_review_update_date',
        'duration_challenge_non_acceptance_response_status': 'duration_challenge_non_acceptance_response_status',
        'duration_challenge_non_acceptance_response_status_string': 'duration_challenge_non_acceptance_response_status_string',
        'duration_challenge_non_acceptance_response_update_date': 'duration_challenge_non_acceptance_response_update_date',
        'duration_challenge_follow_up_review_complete': 'duration_challenge_follow_up_review_complete',
        'work_status': 'work_status',
        'work_status_string': 'work_status_string'
    }

    def __init__(self, work_reference_number=None, permit_reference_number=None, alteration_reference_number=None, location_description=None, street=None, town=None, area=None, usrn=None, promoter_swa_code=None, promoter_organisation=None, highway_authority=None, proposed_start_date=None, proposed_end_date=None, proposed_start_time=None, proposed_end_time=None, actual_start_date=None, actual_end_date=None, reasonable_period_end_date=None, status_changed_date=None, duration_challenge_review_status=None, duration_challenge_review_status_string=None, duration_challenge_review_update_date=None, duration_challenge_non_acceptance_response_status=None, duration_challenge_non_acceptance_response_status_string=None, duration_challenge_non_acceptance_response_update_date=None, duration_challenge_follow_up_review_complete=None, work_status=None, work_status_string=None):  # noqa: E501
        """AlterationDurationChallengeSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._work_reference_number = None
        self._permit_reference_number = None
        self._alteration_reference_number = None
        self._location_description = None
        self._street = None
        self._town = None
        self._area = None
        self._usrn = None
        self._promoter_swa_code = None
        self._promoter_organisation = None
        self._highway_authority = None
        self._proposed_start_date = None
        self._proposed_end_date = None
        self._proposed_start_time = None
        self._proposed_end_time = None
        self._actual_start_date = None
        self._actual_end_date = None
        self._reasonable_period_end_date = None
        self._status_changed_date = None
        self._duration_challenge_review_status = None
        self._duration_challenge_review_status_string = None
        self._duration_challenge_review_update_date = None
        self._duration_challenge_non_acceptance_response_status = None
        self._duration_challenge_non_acceptance_response_status_string = None
        self._duration_challenge_non_acceptance_response_update_date = None
        self._duration_challenge_follow_up_review_complete = None
        self._work_status = None
        self._work_status_string = None
        self.discriminator = None
        self.work_reference_number = work_reference_number
        self.permit_reference_number = permit_reference_number
        self.alteration_reference_number = alteration_reference_number
        self.location_description = location_description
        self.street = street
        self.town = town
        self.area = area
        self.usrn = usrn
        self.promoter_swa_code = promoter_swa_code
        self.promoter_organisation = promoter_organisation
        self.highway_authority = highway_authority
        self.proposed_start_date = proposed_start_date
        self.proposed_end_date = proposed_end_date
        if proposed_start_time is not None:
            self.proposed_start_time = proposed_start_time
        if proposed_end_time is not None:
            self.proposed_end_time = proposed_end_time
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if actual_end_date is not None:
            self.actual_end_date = actual_end_date
        self.reasonable_period_end_date = reasonable_period_end_date
        self.status_changed_date = status_changed_date
        if duration_challenge_review_status is not None:
            self.duration_challenge_review_status = duration_challenge_review_status
        if duration_challenge_review_status_string is not None:
            self.duration_challenge_review_status_string = duration_challenge_review_status_string
        if duration_challenge_review_update_date is not None:
            self.duration_challenge_review_update_date = duration_challenge_review_update_date
        if duration_challenge_non_acceptance_response_status is not None:
            self.duration_challenge_non_acceptance_response_status = duration_challenge_non_acceptance_response_status
        if duration_challenge_non_acceptance_response_status_string is not None:
            self.duration_challenge_non_acceptance_response_status_string = duration_challenge_non_acceptance_response_status_string
        if duration_challenge_non_acceptance_response_update_date is not None:
            self.duration_challenge_non_acceptance_response_update_date = duration_challenge_non_acceptance_response_update_date
        if duration_challenge_follow_up_review_complete is not None:
            self.duration_challenge_follow_up_review_complete = duration_challenge_follow_up_review_complete
        self.work_status = work_status
        self.work_status_string = work_status_string

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The work_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this AlterationDurationChallengeSummaryResponse.


        :param work_reference_number: The work_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The permit_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this AlterationDurationChallengeSummaryResponse.


        :param permit_reference_number: The permit_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def alteration_reference_number(self):
        """Gets the alteration_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The alteration_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._alteration_reference_number

    @alteration_reference_number.setter
    def alteration_reference_number(self, alteration_reference_number):
        """Sets the alteration_reference_number of this AlterationDurationChallengeSummaryResponse.


        :param alteration_reference_number: The alteration_reference_number of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if alteration_reference_number is None:
            raise ValueError("Invalid value for `alteration_reference_number`, must not be `None`")  # noqa: E501

        self._alteration_reference_number = alteration_reference_number

    @property
    def location_description(self):
        """Gets the location_description of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The location_description of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this AlterationDurationChallengeSummaryResponse.


        :param location_description: The location_description of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def street(self):
        """Gets the street of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The street of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this AlterationDurationChallengeSummaryResponse.


        :param street: The street of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The town of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this AlterationDurationChallengeSummaryResponse.


        :param town: The town of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def area(self):
        """Gets the area of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The area of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this AlterationDurationChallengeSummaryResponse.


        :param area: The area of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def usrn(self):
        """Gets the usrn of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The usrn of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this AlterationDurationChallengeSummaryResponse.


        :param usrn: The usrn of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def promoter_swa_code(self):
        """Gets the promoter_swa_code of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The promoter_swa_code of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_swa_code

    @promoter_swa_code.setter
    def promoter_swa_code(self, promoter_swa_code):
        """Sets the promoter_swa_code of this AlterationDurationChallengeSummaryResponse.


        :param promoter_swa_code: The promoter_swa_code of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if promoter_swa_code is None:
            raise ValueError("Invalid value for `promoter_swa_code`, must not be `None`")  # noqa: E501

        self._promoter_swa_code = promoter_swa_code

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The promoter_organisation of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this AlterationDurationChallengeSummaryResponse.


        :param promoter_organisation: The promoter_organisation of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def highway_authority(self):
        """Gets the highway_authority of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The highway_authority of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority

    @highway_authority.setter
    def highway_authority(self, highway_authority):
        """Sets the highway_authority of this AlterationDurationChallengeSummaryResponse.


        :param highway_authority: The highway_authority of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if highway_authority is None:
            raise ValueError("Invalid value for `highway_authority`, must not be `None`")  # noqa: E501

        self._highway_authority = highway_authority

    @property
    def proposed_start_date(self):
        """Gets the proposed_start_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The proposed_start_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_date

    @proposed_start_date.setter
    def proposed_start_date(self, proposed_start_date):
        """Sets the proposed_start_date of this AlterationDurationChallengeSummaryResponse.


        :param proposed_start_date: The proposed_start_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_start_date is None:
            raise ValueError("Invalid value for `proposed_start_date`, must not be `None`")  # noqa: E501

        self._proposed_start_date = proposed_start_date

    @property
    def proposed_end_date(self):
        """Gets the proposed_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The proposed_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_date

    @proposed_end_date.setter
    def proposed_end_date(self, proposed_end_date):
        """Sets the proposed_end_date of this AlterationDurationChallengeSummaryResponse.


        :param proposed_end_date: The proposed_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_end_date is None:
            raise ValueError("Invalid value for `proposed_end_date`, must not be `None`")  # noqa: E501

        self._proposed_end_date = proposed_end_date

    @property
    def proposed_start_time(self):
        """Gets the proposed_start_time of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The proposed_start_time of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_time

    @proposed_start_time.setter
    def proposed_start_time(self, proposed_start_time):
        """Sets the proposed_start_time of this AlterationDurationChallengeSummaryResponse.


        :param proposed_start_time: The proposed_start_time of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_start_time = proposed_start_time

    @property
    def proposed_end_time(self):
        """Gets the proposed_end_time of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The proposed_end_time of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_time

    @proposed_end_time.setter
    def proposed_end_time(self, proposed_end_time):
        """Sets the proposed_end_time of this AlterationDurationChallengeSummaryResponse.


        :param proposed_end_time: The proposed_end_time of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_end_time = proposed_end_time

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The actual_start_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this AlterationDurationChallengeSummaryResponse.


        :param actual_start_date: The actual_start_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._actual_start_date = actual_start_date

    @property
    def actual_end_date(self):
        """Gets the actual_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The actual_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_end_date

    @actual_end_date.setter
    def actual_end_date(self, actual_end_date):
        """Sets the actual_end_date of this AlterationDurationChallengeSummaryResponse.


        :param actual_end_date: The actual_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._actual_end_date = actual_end_date

    @property
    def reasonable_period_end_date(self):
        """Gets the reasonable_period_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The reasonable_period_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._reasonable_period_end_date

    @reasonable_period_end_date.setter
    def reasonable_period_end_date(self, reasonable_period_end_date):
        """Sets the reasonable_period_end_date of this AlterationDurationChallengeSummaryResponse.


        :param reasonable_period_end_date: The reasonable_period_end_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if reasonable_period_end_date is None:
            raise ValueError("Invalid value for `reasonable_period_end_date`, must not be `None`")  # noqa: E501

        self._reasonable_period_end_date = reasonable_period_end_date

    @property
    def status_changed_date(self):
        """Gets the status_changed_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The status_changed_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date

    @status_changed_date.setter
    def status_changed_date(self, status_changed_date):
        """Sets the status_changed_date of this AlterationDurationChallengeSummaryResponse.


        :param status_changed_date: The status_changed_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if status_changed_date is None:
            raise ValueError("Invalid value for `status_changed_date`, must not be `None`")  # noqa: E501

        self._status_changed_date = status_changed_date

    @property
    def duration_challenge_review_status(self):
        """Gets the duration_challenge_review_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The duration_challenge_review_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: AllOfAlterationDurationChallengeSummaryResponseDurationChallengeReviewStatus
        """
        return self._duration_challenge_review_status

    @duration_challenge_review_status.setter
    def duration_challenge_review_status(self, duration_challenge_review_status):
        """Sets the duration_challenge_review_status of this AlterationDurationChallengeSummaryResponse.


        :param duration_challenge_review_status: The duration_challenge_review_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: AllOfAlterationDurationChallengeSummaryResponseDurationChallengeReviewStatus
        """

        self._duration_challenge_review_status = duration_challenge_review_status

    @property
    def duration_challenge_review_status_string(self):
        """Gets the duration_challenge_review_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The duration_challenge_review_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._duration_challenge_review_status_string

    @duration_challenge_review_status_string.setter
    def duration_challenge_review_status_string(self, duration_challenge_review_status_string):
        """Sets the duration_challenge_review_status_string of this AlterationDurationChallengeSummaryResponse.


        :param duration_challenge_review_status_string: The duration_challenge_review_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """

        self._duration_challenge_review_status_string = duration_challenge_review_status_string

    @property
    def duration_challenge_review_update_date(self):
        """Gets the duration_challenge_review_update_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The duration_challenge_review_update_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._duration_challenge_review_update_date

    @duration_challenge_review_update_date.setter
    def duration_challenge_review_update_date(self, duration_challenge_review_update_date):
        """Sets the duration_challenge_review_update_date of this AlterationDurationChallengeSummaryResponse.


        :param duration_challenge_review_update_date: The duration_challenge_review_update_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._duration_challenge_review_update_date = duration_challenge_review_update_date

    @property
    def duration_challenge_non_acceptance_response_status(self):
        """Gets the duration_challenge_non_acceptance_response_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The duration_challenge_non_acceptance_response_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: AllOfAlterationDurationChallengeSummaryResponseDurationChallengeNonAcceptanceResponseStatus
        """
        return self._duration_challenge_non_acceptance_response_status

    @duration_challenge_non_acceptance_response_status.setter
    def duration_challenge_non_acceptance_response_status(self, duration_challenge_non_acceptance_response_status):
        """Sets the duration_challenge_non_acceptance_response_status of this AlterationDurationChallengeSummaryResponse.


        :param duration_challenge_non_acceptance_response_status: The duration_challenge_non_acceptance_response_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: AllOfAlterationDurationChallengeSummaryResponseDurationChallengeNonAcceptanceResponseStatus
        """

        self._duration_challenge_non_acceptance_response_status = duration_challenge_non_acceptance_response_status

    @property
    def duration_challenge_non_acceptance_response_status_string(self):
        """Gets the duration_challenge_non_acceptance_response_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The duration_challenge_non_acceptance_response_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._duration_challenge_non_acceptance_response_status_string

    @duration_challenge_non_acceptance_response_status_string.setter
    def duration_challenge_non_acceptance_response_status_string(self, duration_challenge_non_acceptance_response_status_string):
        """Sets the duration_challenge_non_acceptance_response_status_string of this AlterationDurationChallengeSummaryResponse.


        :param duration_challenge_non_acceptance_response_status_string: The duration_challenge_non_acceptance_response_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """

        self._duration_challenge_non_acceptance_response_status_string = duration_challenge_non_acceptance_response_status_string

    @property
    def duration_challenge_non_acceptance_response_update_date(self):
        """Gets the duration_challenge_non_acceptance_response_update_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The duration_challenge_non_acceptance_response_update_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._duration_challenge_non_acceptance_response_update_date

    @duration_challenge_non_acceptance_response_update_date.setter
    def duration_challenge_non_acceptance_response_update_date(self, duration_challenge_non_acceptance_response_update_date):
        """Sets the duration_challenge_non_acceptance_response_update_date of this AlterationDurationChallengeSummaryResponse.


        :param duration_challenge_non_acceptance_response_update_date: The duration_challenge_non_acceptance_response_update_date of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._duration_challenge_non_acceptance_response_update_date = duration_challenge_non_acceptance_response_update_date

    @property
    def duration_challenge_follow_up_review_complete(self):
        """Gets the duration_challenge_follow_up_review_complete of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The duration_challenge_follow_up_review_complete of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._duration_challenge_follow_up_review_complete

    @duration_challenge_follow_up_review_complete.setter
    def duration_challenge_follow_up_review_complete(self, duration_challenge_follow_up_review_complete):
        """Sets the duration_challenge_follow_up_review_complete of this AlterationDurationChallengeSummaryResponse.


        :param duration_challenge_follow_up_review_complete: The duration_challenge_follow_up_review_complete of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: bool
        """

        self._duration_challenge_follow_up_review_complete = duration_challenge_follow_up_review_complete

    @property
    def work_status(self):
        """Gets the work_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The work_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: WorkStatusResponse
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this AlterationDurationChallengeSummaryResponse.


        :param work_status: The work_status of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: WorkStatusResponse
        """
        if work_status is None:
            raise ValueError("Invalid value for `work_status`, must not be `None`")  # noqa: E501

        self._work_status = work_status

    @property
    def work_status_string(self):
        """Gets the work_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501


        :return: The work_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_status_string

    @work_status_string.setter
    def work_status_string(self, work_status_string):
        """Sets the work_status_string of this AlterationDurationChallengeSummaryResponse.


        :param work_status_string: The work_status_string of this AlterationDurationChallengeSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_status_string is None:
            raise ValueError("Invalid value for `work_status_string`, must not be `None`")  # noqa: E501

        self._work_status_string = work_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlterationDurationChallengeSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlterationDurationChallengeSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
