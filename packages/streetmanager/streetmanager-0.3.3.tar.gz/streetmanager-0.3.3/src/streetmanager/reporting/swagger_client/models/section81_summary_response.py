# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Section81SummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_date': 'datetime',
        'work_reference_number': 'str',
        'section_81_reference_number': 'str',
        'promoter_organisation': 'str',
        'highway_authority': 'str',
        'location_description': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'section_81_severity': 'Section81SeverityResponse',
        'section_81_severity_string': 'str',
        'made_safe_by_ha': 'bool',
        'section_81_status': 'Section81StatusResponse',
        'section_81_status_string': 'str',
        'status_changed_date': 'datetime',
        'section_81_type': 'Section81TypeResponse',
        'section_81_type_string': 'str'
    }

    attribute_map = {
        'issue_date': 'issue_date',
        'work_reference_number': 'work_reference_number',
        'section_81_reference_number': 'section_81_reference_number',
        'promoter_organisation': 'promoter_organisation',
        'highway_authority': 'highway_authority',
        'location_description': 'location_description',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'section_81_severity': 'section_81_severity',
        'section_81_severity_string': 'section_81_severity_string',
        'made_safe_by_ha': 'made_safe_by_ha',
        'section_81_status': 'section_81_status',
        'section_81_status_string': 'section_81_status_string',
        'status_changed_date': 'status_changed_date',
        'section_81_type': 'section_81_type',
        'section_81_type_string': 'section_81_type_string'
    }

    def __init__(self, issue_date=None, work_reference_number=None, section_81_reference_number=None, promoter_organisation=None, highway_authority=None, location_description=None, street=None, town=None, area=None, section_81_severity=None, section_81_severity_string=None, made_safe_by_ha=None, section_81_status=None, section_81_status_string=None, status_changed_date=None, section_81_type=None, section_81_type_string=None):  # noqa: E501
        """Section81SummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._issue_date = None
        self._work_reference_number = None
        self._section_81_reference_number = None
        self._promoter_organisation = None
        self._highway_authority = None
        self._location_description = None
        self._street = None
        self._town = None
        self._area = None
        self._section_81_severity = None
        self._section_81_severity_string = None
        self._made_safe_by_ha = None
        self._section_81_status = None
        self._section_81_status_string = None
        self._status_changed_date = None
        self._section_81_type = None
        self._section_81_type_string = None
        self.discriminator = None
        self.issue_date = issue_date
        self.work_reference_number = work_reference_number
        self.section_81_reference_number = section_81_reference_number
        self.promoter_organisation = promoter_organisation
        self.highway_authority = highway_authority
        self.location_description = location_description
        self.street = street
        if town is not None:
            self.town = town
        if area is not None:
            self.area = area
        if section_81_severity is not None:
            self.section_81_severity = section_81_severity
        if section_81_severity_string is not None:
            self.section_81_severity_string = section_81_severity_string
        if made_safe_by_ha is not None:
            self.made_safe_by_ha = made_safe_by_ha
        self.section_81_status = section_81_status
        self.section_81_status_string = section_81_status_string
        self.status_changed_date = status_changed_date
        self.section_81_type = section_81_type
        self.section_81_type_string = section_81_type_string

    @property
    def issue_date(self):
        """Gets the issue_date of this Section81SummaryResponse.  # noqa: E501


        :return: The issue_date of this Section81SummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Section81SummaryResponse.


        :param issue_date: The issue_date of this Section81SummaryResponse.  # noqa: E501
        :type: datetime
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")  # noqa: E501

        self._issue_date = issue_date

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this Section81SummaryResponse.  # noqa: E501


        :return: The work_reference_number of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this Section81SummaryResponse.


        :param work_reference_number: The work_reference_number of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def section_81_reference_number(self):
        """Gets the section_81_reference_number of this Section81SummaryResponse.  # noqa: E501


        :return: The section_81_reference_number of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._section_81_reference_number

    @section_81_reference_number.setter
    def section_81_reference_number(self, section_81_reference_number):
        """Sets the section_81_reference_number of this Section81SummaryResponse.


        :param section_81_reference_number: The section_81_reference_number of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if section_81_reference_number is None:
            raise ValueError("Invalid value for `section_81_reference_number`, must not be `None`")  # noqa: E501

        self._section_81_reference_number = section_81_reference_number

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this Section81SummaryResponse.  # noqa: E501


        :return: The promoter_organisation of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this Section81SummaryResponse.


        :param promoter_organisation: The promoter_organisation of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def highway_authority(self):
        """Gets the highway_authority of this Section81SummaryResponse.  # noqa: E501


        :return: The highway_authority of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority

    @highway_authority.setter
    def highway_authority(self, highway_authority):
        """Sets the highway_authority of this Section81SummaryResponse.


        :param highway_authority: The highway_authority of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if highway_authority is None:
            raise ValueError("Invalid value for `highway_authority`, must not be `None`")  # noqa: E501

        self._highway_authority = highway_authority

    @property
    def location_description(self):
        """Gets the location_description of this Section81SummaryResponse.  # noqa: E501


        :return: The location_description of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this Section81SummaryResponse.


        :param location_description: The location_description of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def street(self):
        """Gets the street of this Section81SummaryResponse.  # noqa: E501


        :return: The street of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Section81SummaryResponse.


        :param street: The street of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this Section81SummaryResponse.  # noqa: E501


        :return: The town of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this Section81SummaryResponse.


        :param town: The town of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area(self):
        """Gets the area of this Section81SummaryResponse.  # noqa: E501


        :return: The area of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Section81SummaryResponse.


        :param area: The area of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def section_81_severity(self):
        """Gets the section_81_severity of this Section81SummaryResponse.  # noqa: E501


        :return: The section_81_severity of this Section81SummaryResponse.  # noqa: E501
        :rtype: Section81SeverityResponse
        """
        return self._section_81_severity

    @section_81_severity.setter
    def section_81_severity(self, section_81_severity):
        """Sets the section_81_severity of this Section81SummaryResponse.


        :param section_81_severity: The section_81_severity of this Section81SummaryResponse.  # noqa: E501
        :type: Section81SeverityResponse
        """

        self._section_81_severity = section_81_severity

    @property
    def section_81_severity_string(self):
        """Gets the section_81_severity_string of this Section81SummaryResponse.  # noqa: E501


        :return: The section_81_severity_string of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._section_81_severity_string

    @section_81_severity_string.setter
    def section_81_severity_string(self, section_81_severity_string):
        """Sets the section_81_severity_string of this Section81SummaryResponse.


        :param section_81_severity_string: The section_81_severity_string of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """

        self._section_81_severity_string = section_81_severity_string

    @property
    def made_safe_by_ha(self):
        """Gets the made_safe_by_ha of this Section81SummaryResponse.  # noqa: E501


        :return: The made_safe_by_ha of this Section81SummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._made_safe_by_ha

    @made_safe_by_ha.setter
    def made_safe_by_ha(self, made_safe_by_ha):
        """Sets the made_safe_by_ha of this Section81SummaryResponse.


        :param made_safe_by_ha: The made_safe_by_ha of this Section81SummaryResponse.  # noqa: E501
        :type: bool
        """

        self._made_safe_by_ha = made_safe_by_ha

    @property
    def section_81_status(self):
        """Gets the section_81_status of this Section81SummaryResponse.  # noqa: E501


        :return: The section_81_status of this Section81SummaryResponse.  # noqa: E501
        :rtype: Section81StatusResponse
        """
        return self._section_81_status

    @section_81_status.setter
    def section_81_status(self, section_81_status):
        """Sets the section_81_status of this Section81SummaryResponse.


        :param section_81_status: The section_81_status of this Section81SummaryResponse.  # noqa: E501
        :type: Section81StatusResponse
        """
        if section_81_status is None:
            raise ValueError("Invalid value for `section_81_status`, must not be `None`")  # noqa: E501

        self._section_81_status = section_81_status

    @property
    def section_81_status_string(self):
        """Gets the section_81_status_string of this Section81SummaryResponse.  # noqa: E501


        :return: The section_81_status_string of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._section_81_status_string

    @section_81_status_string.setter
    def section_81_status_string(self, section_81_status_string):
        """Sets the section_81_status_string of this Section81SummaryResponse.


        :param section_81_status_string: The section_81_status_string of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if section_81_status_string is None:
            raise ValueError("Invalid value for `section_81_status_string`, must not be `None`")  # noqa: E501

        self._section_81_status_string = section_81_status_string

    @property
    def status_changed_date(self):
        """Gets the status_changed_date of this Section81SummaryResponse.  # noqa: E501


        :return: The status_changed_date of this Section81SummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date

    @status_changed_date.setter
    def status_changed_date(self, status_changed_date):
        """Sets the status_changed_date of this Section81SummaryResponse.


        :param status_changed_date: The status_changed_date of this Section81SummaryResponse.  # noqa: E501
        :type: datetime
        """
        if status_changed_date is None:
            raise ValueError("Invalid value for `status_changed_date`, must not be `None`")  # noqa: E501

        self._status_changed_date = status_changed_date

    @property
    def section_81_type(self):
        """Gets the section_81_type of this Section81SummaryResponse.  # noqa: E501


        :return: The section_81_type of this Section81SummaryResponse.  # noqa: E501
        :rtype: Section81TypeResponse
        """
        return self._section_81_type

    @section_81_type.setter
    def section_81_type(self, section_81_type):
        """Sets the section_81_type of this Section81SummaryResponse.


        :param section_81_type: The section_81_type of this Section81SummaryResponse.  # noqa: E501
        :type: Section81TypeResponse
        """
        if section_81_type is None:
            raise ValueError("Invalid value for `section_81_type`, must not be `None`")  # noqa: E501

        self._section_81_type = section_81_type

    @property
    def section_81_type_string(self):
        """Gets the section_81_type_string of this Section81SummaryResponse.  # noqa: E501


        :return: The section_81_type_string of this Section81SummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._section_81_type_string

    @section_81_type_string.setter
    def section_81_type_string(self, section_81_type_string):
        """Sets the section_81_type_string of this Section81SummaryResponse.


        :param section_81_type_string: The section_81_type_string of this Section81SummaryResponse.  # noqa: E501
        :type: str
        """
        if section_81_type_string is None:
            raise ValueError("Invalid value for `section_81_type_string`, must not be `None`")  # noqa: E501

        self._section_81_type_string = section_81_type_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section81SummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section81SummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
