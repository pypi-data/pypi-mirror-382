# coding: utf-8

"""
    Street Manager Event API

    See API specification Resource Guide > Event API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_numbers': 'list[str]',
        'next_cursor': 'float',
        'page_size': 'float'
    }

    attribute_map = {
        'work_reference_numbers': 'work_reference_numbers',
        'next_cursor': 'next_cursor',
        'page_size': 'page_size'
    }

    def __init__(self, work_reference_numbers=None, next_cursor=None, page_size=None):  # noqa: E501
        """PermitSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._work_reference_numbers = None
        self._next_cursor = None
        self._page_size = None
        self.discriminator = None
        if work_reference_numbers is not None:
            self.work_reference_numbers = work_reference_numbers
        if next_cursor is not None:
            self.next_cursor = next_cursor
        if page_size is not None:
            self.page_size = page_size

    @property
    def work_reference_numbers(self):
        """Gets the work_reference_numbers of this PermitSearchRequest.  # noqa: E501

        Array values must be unique Must not contain null or undefined values Array max length 1000 Work reference numbers have a max length 24 characters  # noqa: E501

        :return: The work_reference_numbers of this PermitSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._work_reference_numbers

    @work_reference_numbers.setter
    def work_reference_numbers(self, work_reference_numbers):
        """Sets the work_reference_numbers of this PermitSearchRequest.

        Array values must be unique Must not contain null or undefined values Array max length 1000 Work reference numbers have a max length 24 characters  # noqa: E501

        :param work_reference_numbers: The work_reference_numbers of this PermitSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._work_reference_numbers = work_reference_numbers

    @property
    def next_cursor(self):
        """Gets the next_cursor of this PermitSearchRequest.  # noqa: E501


        :return: The next_cursor of this PermitSearchRequest.  # noqa: E501
        :rtype: float
        """
        return self._next_cursor

    @next_cursor.setter
    def next_cursor(self, next_cursor):
        """Sets the next_cursor of this PermitSearchRequest.


        :param next_cursor: The next_cursor of this PermitSearchRequest.  # noqa: E501
        :type: float
        """

        self._next_cursor = next_cursor

    @property
    def page_size(self):
        """Gets the page_size of this PermitSearchRequest.  # noqa: E501

        Minimum value of 100 Maximum value of 500 Must be an integer  # noqa: E501

        :return: The page_size of this PermitSearchRequest.  # noqa: E501
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PermitSearchRequest.

        Minimum value of 100 Maximum value of 500 Must be an integer  # noqa: E501

        :param page_size: The page_size of this PermitSearchRequest.  # noqa: E501
        :type: float
        """

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
