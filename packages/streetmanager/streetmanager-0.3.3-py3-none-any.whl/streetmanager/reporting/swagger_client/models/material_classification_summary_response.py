# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterialClassificationSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_created': 'datetime',
        'sample_date': 'datetime',
        'material_classification_reference_number': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'usrn': 'float',
        'material_classification_classification': 'MaterialClassificationClassification',
        'hazardous_material_types': 'list[HazardousMaterialType]',
        'hazardous_material_type_other_description': 'str'
    }

    attribute_map = {
        'date_created': 'date_created',
        'sample_date': 'sample_date',
        'material_classification_reference_number': 'material_classification_reference_number',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'usrn': 'usrn',
        'material_classification_classification': 'material_classification_classification',
        'hazardous_material_types': 'hazardous_material_types',
        'hazardous_material_type_other_description': 'hazardous_material_type_other_description'
    }

    def __init__(self, date_created=None, sample_date=None, material_classification_reference_number=None, street=None, town=None, area=None, usrn=None, material_classification_classification=None, hazardous_material_types=None, hazardous_material_type_other_description=None):  # noqa: E501
        """MaterialClassificationSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._date_created = None
        self._sample_date = None
        self._material_classification_reference_number = None
        self._street = None
        self._town = None
        self._area = None
        self._usrn = None
        self._material_classification_classification = None
        self._hazardous_material_types = None
        self._hazardous_material_type_other_description = None
        self.discriminator = None
        self.date_created = date_created
        self.sample_date = sample_date
        self.material_classification_reference_number = material_classification_reference_number
        self.street = street
        self.town = town
        self.area = area
        self.usrn = usrn
        self.material_classification_classification = material_classification_classification
        if hazardous_material_types is not None:
            self.hazardous_material_types = hazardous_material_types
        if hazardous_material_type_other_description is not None:
            self.hazardous_material_type_other_description = hazardous_material_type_other_description

    @property
    def date_created(self):
        """Gets the date_created of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The date_created of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MaterialClassificationSummaryResponse.


        :param date_created: The date_created of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def sample_date(self):
        """Gets the sample_date of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The sample_date of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date

    @sample_date.setter
    def sample_date(self, sample_date):
        """Sets the sample_date of this MaterialClassificationSummaryResponse.


        :param sample_date: The sample_date of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if sample_date is None:
            raise ValueError("Invalid value for `sample_date`, must not be `None`")  # noqa: E501

        self._sample_date = sample_date

    @property
    def material_classification_reference_number(self):
        """Gets the material_classification_reference_number of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The material_classification_reference_number of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._material_classification_reference_number

    @material_classification_reference_number.setter
    def material_classification_reference_number(self, material_classification_reference_number):
        """Sets the material_classification_reference_number of this MaterialClassificationSummaryResponse.


        :param material_classification_reference_number: The material_classification_reference_number of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: str
        """
        if material_classification_reference_number is None:
            raise ValueError("Invalid value for `material_classification_reference_number`, must not be `None`")  # noqa: E501

        self._material_classification_reference_number = material_classification_reference_number

    @property
    def street(self):
        """Gets the street of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The street of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this MaterialClassificationSummaryResponse.


        :param street: The street of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The town of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this MaterialClassificationSummaryResponse.


        :param town: The town of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def area(self):
        """Gets the area of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The area of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this MaterialClassificationSummaryResponse.


        :param area: The area of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def usrn(self):
        """Gets the usrn of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The usrn of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this MaterialClassificationSummaryResponse.


        :param usrn: The usrn of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def material_classification_classification(self):
        """Gets the material_classification_classification of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The material_classification_classification of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: MaterialClassificationClassification
        """
        return self._material_classification_classification

    @material_classification_classification.setter
    def material_classification_classification(self, material_classification_classification):
        """Sets the material_classification_classification of this MaterialClassificationSummaryResponse.


        :param material_classification_classification: The material_classification_classification of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: MaterialClassificationClassification
        """
        if material_classification_classification is None:
            raise ValueError("Invalid value for `material_classification_classification`, must not be `None`")  # noqa: E501

        self._material_classification_classification = material_classification_classification

    @property
    def hazardous_material_types(self):
        """Gets the hazardous_material_types of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The hazardous_material_types of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: list[HazardousMaterialType]
        """
        return self._hazardous_material_types

    @hazardous_material_types.setter
    def hazardous_material_types(self, hazardous_material_types):
        """Sets the hazardous_material_types of this MaterialClassificationSummaryResponse.


        :param hazardous_material_types: The hazardous_material_types of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: list[HazardousMaterialType]
        """

        self._hazardous_material_types = hazardous_material_types

    @property
    def hazardous_material_type_other_description(self):
        """Gets the hazardous_material_type_other_description of this MaterialClassificationSummaryResponse.  # noqa: E501


        :return: The hazardous_material_type_other_description of this MaterialClassificationSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._hazardous_material_type_other_description

    @hazardous_material_type_other_description.setter
    def hazardous_material_type_other_description(self, hazardous_material_type_other_description):
        """Sets the hazardous_material_type_other_description of this MaterialClassificationSummaryResponse.


        :param hazardous_material_type_other_description: The hazardous_material_type_other_description of this MaterialClassificationSummaryResponse.  # noqa: E501
        :type: str
        """

        self._hazardous_material_type_other_description = hazardous_material_type_other_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterialClassificationSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialClassificationSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
