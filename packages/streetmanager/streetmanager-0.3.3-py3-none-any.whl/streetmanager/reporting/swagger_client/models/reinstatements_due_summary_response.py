# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReinstatementsDueSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_reference_number': 'str',
        'permit_reference_number': 'str',
        'organisation_name': 'str',
        'street': 'str',
        'town': 'str',
        'area': 'str',
        'work_stopped_date': 'datetime',
        'registration_due_date': 'datetime'
    }

    attribute_map = {
        'work_reference_number': 'work_reference_number',
        'permit_reference_number': 'permit_reference_number',
        'organisation_name': 'organisation_name',
        'street': 'street',
        'town': 'town',
        'area': 'area',
        'work_stopped_date': 'work_stopped_date',
        'registration_due_date': 'registration_due_date'
    }

    def __init__(self, work_reference_number=None, permit_reference_number=None, organisation_name=None, street=None, town=None, area=None, work_stopped_date=None, registration_due_date=None):  # noqa: E501
        """ReinstatementsDueSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._work_reference_number = None
        self._permit_reference_number = None
        self._organisation_name = None
        self._street = None
        self._town = None
        self._area = None
        self._work_stopped_date = None
        self._registration_due_date = None
        self.discriminator = None
        self.work_reference_number = work_reference_number
        self.permit_reference_number = permit_reference_number
        self.organisation_name = organisation_name
        self.street = street
        self.town = town
        self.area = area
        self.work_stopped_date = work_stopped_date
        self.registration_due_date = registration_due_date

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The work_reference_number of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this ReinstatementsDueSummaryResponse.


        :param work_reference_number: The work_reference_number of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The permit_reference_number of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this ReinstatementsDueSummaryResponse.


        :param permit_reference_number: The permit_reference_number of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def organisation_name(self):
        """Gets the organisation_name of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The organisation_name of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this ReinstatementsDueSummaryResponse.


        :param organisation_name: The organisation_name of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: str
        """
        if organisation_name is None:
            raise ValueError("Invalid value for `organisation_name`, must not be `None`")  # noqa: E501

        self._organisation_name = organisation_name

    @property
    def street(self):
        """Gets the street of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The street of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ReinstatementsDueSummaryResponse.


        :param street: The street of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def town(self):
        """Gets the town of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The town of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this ReinstatementsDueSummaryResponse.


        :param town: The town of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError("Invalid value for `town`, must not be `None`")  # noqa: E501

        self._town = town

    @property
    def area(self):
        """Gets the area of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The area of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this ReinstatementsDueSummaryResponse.


        :param area: The area of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def work_stopped_date(self):
        """Gets the work_stopped_date of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The work_stopped_date of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._work_stopped_date

    @work_stopped_date.setter
    def work_stopped_date(self, work_stopped_date):
        """Sets the work_stopped_date of this ReinstatementsDueSummaryResponse.


        :param work_stopped_date: The work_stopped_date of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if work_stopped_date is None:
            raise ValueError("Invalid value for `work_stopped_date`, must not be `None`")  # noqa: E501

        self._work_stopped_date = work_stopped_date

    @property
    def registration_due_date(self):
        """Gets the registration_due_date of this ReinstatementsDueSummaryResponse.  # noqa: E501


        :return: The registration_due_date of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_due_date

    @registration_due_date.setter
    def registration_due_date(self, registration_due_date):
        """Sets the registration_due_date of this ReinstatementsDueSummaryResponse.


        :param registration_due_date: The registration_due_date of this ReinstatementsDueSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if registration_due_date is None:
            raise ValueError("Invalid value for `registration_due_date`, must not be `None`")  # noqa: E501

        self._registration_due_date = registration_due_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReinstatementsDueSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReinstatementsDueSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
