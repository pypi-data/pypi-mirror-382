# coding: utf-8

"""
    Street Manager Reporting API

    See API specification Resource Guide > Reporting API for more information on paging and endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeographicalAreaResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geographical_area_reference_number': 'str',
        'area_name': 'str',
        'file_id': 'float',
        'number_of_usrns': 'float',
        'date_modified': 'datetime'
    }

    attribute_map = {
        'geographical_area_reference_number': 'geographical_area_reference_number',
        'area_name': 'area_name',
        'file_id': 'file_id',
        'number_of_usrns': 'number_of_usrns',
        'date_modified': 'date_modified'
    }

    def __init__(self, geographical_area_reference_number=None, area_name=None, file_id=None, number_of_usrns=None, date_modified=None):  # noqa: E501
        """GeographicalAreaResponse - a model defined in Swagger"""  # noqa: E501
        self._geographical_area_reference_number = None
        self._area_name = None
        self._file_id = None
        self._number_of_usrns = None
        self._date_modified = None
        self.discriminator = None
        self.geographical_area_reference_number = geographical_area_reference_number
        self.area_name = area_name
        self.file_id = file_id
        self.number_of_usrns = number_of_usrns
        self.date_modified = date_modified

    @property
    def geographical_area_reference_number(self):
        """Gets the geographical_area_reference_number of this GeographicalAreaResponse.  # noqa: E501


        :return: The geographical_area_reference_number of this GeographicalAreaResponse.  # noqa: E501
        :rtype: str
        """
        return self._geographical_area_reference_number

    @geographical_area_reference_number.setter
    def geographical_area_reference_number(self, geographical_area_reference_number):
        """Sets the geographical_area_reference_number of this GeographicalAreaResponse.


        :param geographical_area_reference_number: The geographical_area_reference_number of this GeographicalAreaResponse.  # noqa: E501
        :type: str
        """
        if geographical_area_reference_number is None:
            raise ValueError("Invalid value for `geographical_area_reference_number`, must not be `None`")  # noqa: E501

        self._geographical_area_reference_number = geographical_area_reference_number

    @property
    def area_name(self):
        """Gets the area_name of this GeographicalAreaResponse.  # noqa: E501


        :return: The area_name of this GeographicalAreaResponse.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this GeographicalAreaResponse.


        :param area_name: The area_name of this GeographicalAreaResponse.  # noqa: E501
        :type: str
        """
        if area_name is None:
            raise ValueError("Invalid value for `area_name`, must not be `None`")  # noqa: E501

        self._area_name = area_name

    @property
    def file_id(self):
        """Gets the file_id of this GeographicalAreaResponse.  # noqa: E501


        :return: The file_id of this GeographicalAreaResponse.  # noqa: E501
        :rtype: float
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this GeographicalAreaResponse.


        :param file_id: The file_id of this GeographicalAreaResponse.  # noqa: E501
        :type: float
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def number_of_usrns(self):
        """Gets the number_of_usrns of this GeographicalAreaResponse.  # noqa: E501


        :return: The number_of_usrns of this GeographicalAreaResponse.  # noqa: E501
        :rtype: float
        """
        return self._number_of_usrns

    @number_of_usrns.setter
    def number_of_usrns(self, number_of_usrns):
        """Sets the number_of_usrns of this GeographicalAreaResponse.


        :param number_of_usrns: The number_of_usrns of this GeographicalAreaResponse.  # noqa: E501
        :type: float
        """
        if number_of_usrns is None:
            raise ValueError("Invalid value for `number_of_usrns`, must not be `None`")  # noqa: E501

        self._number_of_usrns = number_of_usrns

    @property
    def date_modified(self):
        """Gets the date_modified of this GeographicalAreaResponse.  # noqa: E501


        :return: The date_modified of this GeographicalAreaResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this GeographicalAreaResponse.


        :param date_modified: The date_modified of this GeographicalAreaResponse.  # noqa: E501
        :type: datetime
        """
        if date_modified is None:
            raise ValueError("Invalid value for `date_modified`, must not be `None`")  # noqa: E501

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeographicalAreaResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeographicalAreaResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
