# coding: utf-8

"""
    Street Manager Sampling API

    See API specification Resource Guide > Sampling API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnualInspectionUnitsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'financial_year_start_date': 'datetime',
        'annual_inspection_units': 'float',
        'is_auto_calculated': 'bool'
    }

    attribute_map = {
        'financial_year_start_date': 'financial_year_start_date',
        'annual_inspection_units': 'annual_inspection_units',
        'is_auto_calculated': 'is_auto_calculated'
    }

    def __init__(self, financial_year_start_date=None, annual_inspection_units=None, is_auto_calculated=None):  # noqa: E501
        """AnnualInspectionUnitsSummary - a model defined in Swagger"""  # noqa: E501
        self._financial_year_start_date = None
        self._annual_inspection_units = None
        self._is_auto_calculated = None
        self.discriminator = None
        self.financial_year_start_date = financial_year_start_date
        if annual_inspection_units is not None:
            self.annual_inspection_units = annual_inspection_units
        self.is_auto_calculated = is_auto_calculated

    @property
    def financial_year_start_date(self):
        """Gets the financial_year_start_date of this AnnualInspectionUnitsSummary.  # noqa: E501


        :return: The financial_year_start_date of this AnnualInspectionUnitsSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._financial_year_start_date

    @financial_year_start_date.setter
    def financial_year_start_date(self, financial_year_start_date):
        """Sets the financial_year_start_date of this AnnualInspectionUnitsSummary.


        :param financial_year_start_date: The financial_year_start_date of this AnnualInspectionUnitsSummary.  # noqa: E501
        :type: datetime
        """
        if financial_year_start_date is None:
            raise ValueError("Invalid value for `financial_year_start_date`, must not be `None`")  # noqa: E501

        self._financial_year_start_date = financial_year_start_date

    @property
    def annual_inspection_units(self):
        """Gets the annual_inspection_units of this AnnualInspectionUnitsSummary.  # noqa: E501


        :return: The annual_inspection_units of this AnnualInspectionUnitsSummary.  # noqa: E501
        :rtype: float
        """
        return self._annual_inspection_units

    @annual_inspection_units.setter
    def annual_inspection_units(self, annual_inspection_units):
        """Sets the annual_inspection_units of this AnnualInspectionUnitsSummary.


        :param annual_inspection_units: The annual_inspection_units of this AnnualInspectionUnitsSummary.  # noqa: E501
        :type: float
        """

        self._annual_inspection_units = annual_inspection_units

    @property
    def is_auto_calculated(self):
        """Gets the is_auto_calculated of this AnnualInspectionUnitsSummary.  # noqa: E501


        :return: The is_auto_calculated of this AnnualInspectionUnitsSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_calculated

    @is_auto_calculated.setter
    def is_auto_calculated(self, is_auto_calculated):
        """Sets the is_auto_calculated of this AnnualInspectionUnitsSummary.


        :param is_auto_calculated: The is_auto_calculated of this AnnualInspectionUnitsSummary.  # noqa: E501
        :type: bool
        """
        if is_auto_calculated is None:
            raise ValueError("Invalid value for `is_auto_calculated`, must not be `None`")  # noqa: E501

        self._is_auto_calculated = is_auto_calculated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnualInspectionUnitsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnualInspectionUnitsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
