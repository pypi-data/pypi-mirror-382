# coding: utf-8

"""
    Street Manager Data Export API

    See API specification Resource Guide > Data Export API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommentCSVExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geographical_area_reference_number': 'list[str]',
        'street_descriptor': 'str',
        'usrn': 'str',
        'swa_code': 'str',
        'export_description': 'str',
        'organisation': 'str',
        'date_created_from': 'datetime',
        'date_created_to': 'datetime',
        'topic': 'list[CommentTopic]',
        'is_internal': 'bool',
        'is_read': 'bool',
        'is_not_read': 'bool',
        'work_reference_number': 'str',
        'author_email_address': 'str',
        'is_incoming': 'bool',
        'is_outgoing': 'bool'
    }

    attribute_map = {
        'geographical_area_reference_number': 'geographical_area_reference_number',
        'street_descriptor': 'street_descriptor',
        'usrn': 'usrn',
        'swa_code': 'swa_code',
        'export_description': 'export_description',
        'organisation': 'organisation',
        'date_created_from': 'date_created_from',
        'date_created_to': 'date_created_to',
        'topic': 'topic',
        'is_internal': 'is_internal',
        'is_read': 'is_read',
        'is_not_read': 'is_not_read',
        'work_reference_number': 'work_reference_number',
        'author_email_address': 'author_email_address',
        'is_incoming': 'is_incoming',
        'is_outgoing': 'is_outgoing'
    }

    def __init__(self, geographical_area_reference_number=None, street_descriptor=None, usrn=None, swa_code=None, export_description=None, organisation=None, date_created_from=None, date_created_to=None, topic=None, is_internal=None, is_read=None, is_not_read=None, work_reference_number=None, author_email_address=None, is_incoming=None, is_outgoing=None):  # noqa: E501
        """CommentCSVExportRequest - a model defined in Swagger"""  # noqa: E501
        self._geographical_area_reference_number = None
        self._street_descriptor = None
        self._usrn = None
        self._swa_code = None
        self._export_description = None
        self._organisation = None
        self._date_created_from = None
        self._date_created_to = None
        self._topic = None
        self._is_internal = None
        self._is_read = None
        self._is_not_read = None
        self._work_reference_number = None
        self._author_email_address = None
        self._is_incoming = None
        self._is_outgoing = None
        self.discriminator = None
        if geographical_area_reference_number is not None:
            self.geographical_area_reference_number = geographical_area_reference_number
        if street_descriptor is not None:
            self.street_descriptor = street_descriptor
        if usrn is not None:
            self.usrn = usrn
        if swa_code is not None:
            self.swa_code = swa_code
        if export_description is not None:
            self.export_description = export_description
        if organisation is not None:
            self.organisation = organisation
        if date_created_from is not None:
            self.date_created_from = date_created_from
        if date_created_to is not None:
            self.date_created_to = date_created_to
        if topic is not None:
            self.topic = topic
        if is_internal is not None:
            self.is_internal = is_internal
        if is_read is not None:
            self.is_read = is_read
        if is_not_read is not None:
            self.is_not_read = is_not_read
        if work_reference_number is not None:
            self.work_reference_number = work_reference_number
        if author_email_address is not None:
            self.author_email_address = author_email_address
        if is_incoming is not None:
            self.is_incoming = is_incoming
        if is_outgoing is not None:
            self.is_outgoing = is_outgoing

    @property
    def geographical_area_reference_number(self):
        """Gets the geographical_area_reference_number of this CommentCSVExportRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The geographical_area_reference_number of this CommentCSVExportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._geographical_area_reference_number

    @geographical_area_reference_number.setter
    def geographical_area_reference_number(self, geographical_area_reference_number):
        """Sets the geographical_area_reference_number of this CommentCSVExportRequest.

        Array values must be unique  # noqa: E501

        :param geographical_area_reference_number: The geographical_area_reference_number of this CommentCSVExportRequest.  # noqa: E501
        :type: list[str]
        """

        self._geographical_area_reference_number = geographical_area_reference_number

    @property
    def street_descriptor(self):
        """Gets the street_descriptor of this CommentCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The street_descriptor of this CommentCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_descriptor

    @street_descriptor.setter
    def street_descriptor(self, street_descriptor):
        """Sets the street_descriptor of this CommentCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param street_descriptor: The street_descriptor of this CommentCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._street_descriptor = street_descriptor

    @property
    def usrn(self):
        """Gets the usrn of this CommentCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The usrn of this CommentCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this CommentCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param usrn: The usrn of this CommentCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._usrn = usrn

    @property
    def swa_code(self):
        """Gets the swa_code of this CommentCSVExportRequest.  # noqa: E501

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :return: The swa_code of this CommentCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this CommentCSVExportRequest.

        Must be provided if user is a contractor Up to four digits  # noqa: E501

        :param swa_code: The swa_code of this CommentCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._swa_code = swa_code

    @property
    def export_description(self):
        """Gets the export_description of this CommentCSVExportRequest.  # noqa: E501

        Max length 50 characters  # noqa: E501

        :return: The export_description of this CommentCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_description

    @export_description.setter
    def export_description(self, export_description):
        """Sets the export_description of this CommentCSVExportRequest.

        Max length 50 characters  # noqa: E501

        :param export_description: The export_description of this CommentCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._export_description = export_description

    @property
    def organisation(self):
        """Gets the organisation of this CommentCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The organisation of this CommentCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this CommentCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param organisation: The organisation of this CommentCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._organisation = organisation

    @property
    def date_created_from(self):
        """Gets the date_created_from of this CommentCSVExportRequest.  # noqa: E501


        :return: The date_created_from of this CommentCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created_from

    @date_created_from.setter
    def date_created_from(self, date_created_from):
        """Sets the date_created_from of this CommentCSVExportRequest.


        :param date_created_from: The date_created_from of this CommentCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._date_created_from = date_created_from

    @property
    def date_created_to(self):
        """Gets the date_created_to of this CommentCSVExportRequest.  # noqa: E501

        Must occur after or on provided date_created_from  # noqa: E501

        :return: The date_created_to of this CommentCSVExportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created_to

    @date_created_to.setter
    def date_created_to(self, date_created_to):
        """Sets the date_created_to of this CommentCSVExportRequest.

        Must occur after or on provided date_created_from  # noqa: E501

        :param date_created_to: The date_created_to of this CommentCSVExportRequest.  # noqa: E501
        :type: datetime
        """

        self._date_created_to = date_created_to

    @property
    def topic(self):
        """Gets the topic of this CommentCSVExportRequest.  # noqa: E501


        :return: The topic of this CommentCSVExportRequest.  # noqa: E501
        :rtype: list[CommentTopic]
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this CommentCSVExportRequest.


        :param topic: The topic of this CommentCSVExportRequest.  # noqa: E501
        :type: list[CommentTopic]
        """

        self._topic = topic

    @property
    def is_internal(self):
        """Gets the is_internal of this CommentCSVExportRequest.  # noqa: E501


        :return: The is_internal of this CommentCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this CommentCSVExportRequest.


        :param is_internal: The is_internal of this CommentCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    @property
    def is_read(self):
        """Gets the is_read of this CommentCSVExportRequest.  # noqa: E501


        :return: The is_read of this CommentCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this CommentCSVExportRequest.


        :param is_read: The is_read of this CommentCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def is_not_read(self):
        """Gets the is_not_read of this CommentCSVExportRequest.  # noqa: E501


        :return: The is_not_read of this CommentCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_not_read

    @is_not_read.setter
    def is_not_read(self, is_not_read):
        """Sets the is_not_read of this CommentCSVExportRequest.


        :param is_not_read: The is_not_read of this CommentCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_not_read = is_not_read

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this CommentCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The work_reference_number of this CommentCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this CommentCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param work_reference_number: The work_reference_number of this CommentCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._work_reference_number = work_reference_number

    @property
    def author_email_address(self):
        """Gets the author_email_address of this CommentCSVExportRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The author_email_address of this CommentCSVExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._author_email_address

    @author_email_address.setter
    def author_email_address(self, author_email_address):
        """Sets the author_email_address of this CommentCSVExportRequest.

        Max length 100 characters  # noqa: E501

        :param author_email_address: The author_email_address of this CommentCSVExportRequest.  # noqa: E501
        :type: str
        """

        self._author_email_address = author_email_address

    @property
    def is_incoming(self):
        """Gets the is_incoming of this CommentCSVExportRequest.  # noqa: E501


        :return: The is_incoming of this CommentCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_incoming

    @is_incoming.setter
    def is_incoming(self, is_incoming):
        """Sets the is_incoming of this CommentCSVExportRequest.


        :param is_incoming: The is_incoming of this CommentCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_incoming = is_incoming

    @property
    def is_outgoing(self):
        """Gets the is_outgoing of this CommentCSVExportRequest.  # noqa: E501


        :return: The is_outgoing of this CommentCSVExportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_outgoing

    @is_outgoing.setter
    def is_outgoing(self, is_outgoing):
        """Sets the is_outgoing of this CommentCSVExportRequest.


        :param is_outgoing: The is_outgoing of this CommentCSVExportRequest.  # noqa: E501
        :type: bool
        """

        self._is_outgoing = is_outgoing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommentCSVExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentCSVExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
