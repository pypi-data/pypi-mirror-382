# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Section74UpdateHAStatusRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'status': 'Section74HAStatus',
        'site_cleared_date': 'datetime',
        'additional_details': 'str',
        'number_of_days_overrun': 'float',
        'draft_invoice_amount': 'float',
        'draft_invoice_reference': 'str',
        'final_agreed_amount': 'float',
        'invoice_reference': 'str',
        'reason_for_dispute': 'str'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'status': 'status',
        'site_cleared_date': 'site_cleared_date',
        'additional_details': 'additional_details',
        'number_of_days_overrun': 'number_of_days_overrun',
        'draft_invoice_amount': 'draft_invoice_amount',
        'draft_invoice_reference': 'draft_invoice_reference',
        'final_agreed_amount': 'final_agreed_amount',
        'invoice_reference': 'invoice_reference',
        'reason_for_dispute': 'reason_for_dispute'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, status=None, site_cleared_date=None, additional_details=None, number_of_days_overrun=None, draft_invoice_amount=None, draft_invoice_reference=None, final_agreed_amount=None, invoice_reference=None, reason_for_dispute=None):  # noqa: E501
        """Section74UpdateHAStatusRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._status = None
        self._site_cleared_date = None
        self._additional_details = None
        self._number_of_days_overrun = None
        self._draft_invoice_amount = None
        self._draft_invoice_reference = None
        self._final_agreed_amount = None
        self._invoice_reference = None
        self._reason_for_dispute = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.status = status
        if site_cleared_date is not None:
            self.site_cleared_date = site_cleared_date
        if additional_details is not None:
            self.additional_details = additional_details
        if number_of_days_overrun is not None:
            self.number_of_days_overrun = number_of_days_overrun
        if draft_invoice_amount is not None:
            self.draft_invoice_amount = draft_invoice_amount
        if draft_invoice_reference is not None:
            self.draft_invoice_reference = draft_invoice_reference
        if final_agreed_amount is not None:
            self.final_agreed_amount = final_agreed_amount
        if invoice_reference is not None:
            self.invoice_reference = invoice_reference
        if reason_for_dispute is not None:
            self.reason_for_dispute = reason_for_dispute

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this Section74UpdateHAStatusRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this Section74UpdateHAStatusRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this Section74UpdateHAStatusRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this Section74UpdateHAStatusRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def status(self):
        """Gets the status of this Section74UpdateHAStatusRequest.  # noqa: E501


        :return: The status of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: Section74HAStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Section74UpdateHAStatusRequest.


        :param status: The status of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: Section74HAStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def site_cleared_date(self):
        """Gets the site_cleared_date of this Section74UpdateHAStatusRequest.  # noqa: E501

        Required when status is charges_ended Date must be today or a date in the past  # noqa: E501

        :return: The site_cleared_date of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._site_cleared_date

    @site_cleared_date.setter
    def site_cleared_date(self, site_cleared_date):
        """Sets the site_cleared_date of this Section74UpdateHAStatusRequest.

        Required when status is charges_ended Date must be today or a date in the past  # noqa: E501

        :param site_cleared_date: The site_cleared_date of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: datetime
        """

        self._site_cleared_date = site_cleared_date

    @property
    def additional_details(self):
        """Gets the additional_details of this Section74UpdateHAStatusRequest.  # noqa: E501

        Required when status is status is withdrawn Max length 500 characters  # noqa: E501

        :return: The additional_details of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this Section74UpdateHAStatusRequest.

        Required when status is status is withdrawn Max length 500 characters  # noqa: E501

        :param additional_details: The additional_details of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: str
        """

        self._additional_details = additional_details

    @property
    def number_of_days_overrun(self):
        """Gets the number_of_days_overrun of this Section74UpdateHAStatusRequest.  # noqa: E501

        Required when status is draft_invoice_issued or resolved Must be a positive whole number  # noqa: E501

        :return: The number_of_days_overrun of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: float
        """
        return self._number_of_days_overrun

    @number_of_days_overrun.setter
    def number_of_days_overrun(self, number_of_days_overrun):
        """Sets the number_of_days_overrun of this Section74UpdateHAStatusRequest.

        Required when status is draft_invoice_issued or resolved Must be a positive whole number  # noqa: E501

        :param number_of_days_overrun: The number_of_days_overrun of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: float
        """

        self._number_of_days_overrun = number_of_days_overrun

    @property
    def draft_invoice_amount(self):
        """Gets the draft_invoice_amount of this Section74UpdateHAStatusRequest.  # noqa: E501

        Required when status is draft_invoice_issued. Must be positive number. Can contain decimals to two decimal places.  # noqa: E501

        :return: The draft_invoice_amount of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: float
        """
        return self._draft_invoice_amount

    @draft_invoice_amount.setter
    def draft_invoice_amount(self, draft_invoice_amount):
        """Sets the draft_invoice_amount of this Section74UpdateHAStatusRequest.

        Required when status is draft_invoice_issued. Must be positive number. Can contain decimals to two decimal places.  # noqa: E501

        :param draft_invoice_amount: The draft_invoice_amount of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: float
        """

        self._draft_invoice_amount = draft_invoice_amount

    @property
    def draft_invoice_reference(self):
        """Gets the draft_invoice_reference of this Section74UpdateHAStatusRequest.  # noqa: E501

        Optional. Valid when status is draft_invoice_issued. Max length 100 characters  # noqa: E501

        :return: The draft_invoice_reference of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._draft_invoice_reference

    @draft_invoice_reference.setter
    def draft_invoice_reference(self, draft_invoice_reference):
        """Sets the draft_invoice_reference of this Section74UpdateHAStatusRequest.

        Optional. Valid when status is draft_invoice_issued. Max length 100 characters  # noqa: E501

        :param draft_invoice_reference: The draft_invoice_reference of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: str
        """

        self._draft_invoice_reference = draft_invoice_reference

    @property
    def final_agreed_amount(self):
        """Gets the final_agreed_amount of this Section74UpdateHAStatusRequest.  # noqa: E501

        Required when status is resolved. Must be positive number. Can contain decimals to two decimal places.  # noqa: E501

        :return: The final_agreed_amount of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: float
        """
        return self._final_agreed_amount

    @final_agreed_amount.setter
    def final_agreed_amount(self, final_agreed_amount):
        """Sets the final_agreed_amount of this Section74UpdateHAStatusRequest.

        Required when status is resolved. Must be positive number. Can contain decimals to two decimal places.  # noqa: E501

        :param final_agreed_amount: The final_agreed_amount of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: float
        """

        self._final_agreed_amount = final_agreed_amount

    @property
    def invoice_reference(self):
        """Gets the invoice_reference of this Section74UpdateHAStatusRequest.  # noqa: E501

        Optional. Valid when status is resolved. Max length 100 characters  # noqa: E501

        :return: The invoice_reference of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_reference

    @invoice_reference.setter
    def invoice_reference(self, invoice_reference):
        """Sets the invoice_reference of this Section74UpdateHAStatusRequest.

        Optional. Valid when status is resolved. Max length 100 characters  # noqa: E501

        :param invoice_reference: The invoice_reference of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: str
        """

        self._invoice_reference = invoice_reference

    @property
    def reason_for_dispute(self):
        """Gets the reason_for_dispute of this Section74UpdateHAStatusRequest.  # noqa: E501

        Required when status is warning_disputed. Max length 500 characters  # noqa: E501

        :return: The reason_for_dispute of this Section74UpdateHAStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_dispute

    @reason_for_dispute.setter
    def reason_for_dispute(self, reason_for_dispute):
        """Sets the reason_for_dispute of this Section74UpdateHAStatusRequest.

        Required when status is warning_disputed. Max length 500 characters  # noqa: E501

        :param reason_for_dispute: The reason_for_dispute of this Section74UpdateHAStatusRequest.  # noqa: E501
        :type: str
        """

        self._reason_for_dispute = reason_for_dispute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section74UpdateHAStatusRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section74UpdateHAStatusRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
