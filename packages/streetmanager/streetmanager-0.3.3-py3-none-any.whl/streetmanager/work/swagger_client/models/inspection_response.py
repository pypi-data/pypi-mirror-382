# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InspectionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inspection_reference_number': 'str',
        'inspection_type': 'InspectionTypeResponse',
        'inspection_type_string': 'str',
        'inspection_start_date': 'datetime',
        'inspection_category': 'AllOfInspectionResponseInspectionCategory',
        'inspection_category_string': 'str',
        'inspection_outcome': 'InspectionOutcomeResponse',
        'inspection_outcome_string': 'str',
        'failure_reason_details': 'list[FailureReasonDetailsResponse]',
        'inspection_outcome_details': 'str',
        'was_call_logged': 'bool',
        'call_logged_to': 'str',
        'call_logged_reference': 'str',
        'call_logged_summary': 'str',
        'defect_fixed_on_site': 'AllOfInspectionResponseDefectFixedOnSite',
        'defect_fixed_on_site_string': 'str',
        'additional_comments': 'str',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'files': 'list[FileSummaryResponse]',
        'work_reference_number': 'str',
        'reinspection_date': 'datetime',
        'reinspection_date_time': 'datetime',
        'username': 'str',
        'promoter_organisation': 'str',
        'highway_authority': 'str',
        'inspector_name': 'str',
        'made_safe_by_ha': 'bool',
        'inspection_status': 'InspectionStatusResponse',
        'inspection_status_string': 'str',
        'inspection_reason_for_withdrawal': 'AllOfInspectionResponseInspectionReasonForWithdrawal',
        'inspection_reason_for_withdrawal_string': 'str',
        'withdrawal_details': 'str',
        'promoter_response_status': 'AllOfInspectionResponsePromoterResponseStatus',
        'promoter_response_status_string': 'str',
        'promoter_response_status_change_date': 'datetime',
        'promoter_response_details': 'str',
        'ha_response_status': 'AllOfInspectionResponseHaResponseStatus',
        'ha_response_status_string': 'str',
        'ha_response_status_change_date': 'datetime',
        'ha_response_details': 'str',
        'auto_acceptance_due_date': 'datetime',
        'is_auto_accepted': 'bool',
        'non_compliance_reference_number': 'str'
    }

    attribute_map = {
        'inspection_reference_number': 'inspection_reference_number',
        'inspection_type': 'inspection_type',
        'inspection_type_string': 'inspection_type_string',
        'inspection_start_date': 'inspection_start_date',
        'inspection_category': 'inspection_category',
        'inspection_category_string': 'inspection_category_string',
        'inspection_outcome': 'inspection_outcome',
        'inspection_outcome_string': 'inspection_outcome_string',
        'failure_reason_details': 'failure_reason_details',
        'inspection_outcome_details': 'inspection_outcome_details',
        'was_call_logged': 'was_call_logged',
        'call_logged_to': 'call_logged_to',
        'call_logged_reference': 'call_logged_reference',
        'call_logged_summary': 'call_logged_summary',
        'defect_fixed_on_site': 'defect_fixed_on_site',
        'defect_fixed_on_site_string': 'defect_fixed_on_site_string',
        'additional_comments': 'additional_comments',
        'date_created': 'date_created',
        'date_modified': 'date_modified',
        'files': 'files',
        'work_reference_number': 'work_reference_number',
        'reinspection_date': 'reinspection_date',
        'reinspection_date_time': 'reinspection_date_time',
        'username': 'username',
        'promoter_organisation': 'promoter_organisation',
        'highway_authority': 'highway_authority',
        'inspector_name': 'inspector_name',
        'made_safe_by_ha': 'made_safe_by_ha',
        'inspection_status': 'inspection_status',
        'inspection_status_string': 'inspection_status_string',
        'inspection_reason_for_withdrawal': 'inspection_reason_for_withdrawal',
        'inspection_reason_for_withdrawal_string': 'inspection_reason_for_withdrawal_string',
        'withdrawal_details': 'withdrawal_details',
        'promoter_response_status': 'promoter_response_status',
        'promoter_response_status_string': 'promoter_response_status_string',
        'promoter_response_status_change_date': 'promoter_response_status_change_date',
        'promoter_response_details': 'promoter_response_details',
        'ha_response_status': 'ha_response_status',
        'ha_response_status_string': 'ha_response_status_string',
        'ha_response_status_change_date': 'ha_response_status_change_date',
        'ha_response_details': 'ha_response_details',
        'auto_acceptance_due_date': 'auto_acceptance_due_date',
        'is_auto_accepted': 'is_auto_accepted',
        'non_compliance_reference_number': 'non_compliance_reference_number'
    }

    def __init__(self, inspection_reference_number=None, inspection_type=None, inspection_type_string=None, inspection_start_date=None, inspection_category=None, inspection_category_string=None, inspection_outcome=None, inspection_outcome_string=None, failure_reason_details=None, inspection_outcome_details=None, was_call_logged=None, call_logged_to=None, call_logged_reference=None, call_logged_summary=None, defect_fixed_on_site=None, defect_fixed_on_site_string=None, additional_comments=None, date_created=None, date_modified=None, files=None, work_reference_number=None, reinspection_date=None, reinspection_date_time=None, username=None, promoter_organisation=None, highway_authority=None, inspector_name=None, made_safe_by_ha=None, inspection_status=None, inspection_status_string=None, inspection_reason_for_withdrawal=None, inspection_reason_for_withdrawal_string=None, withdrawal_details=None, promoter_response_status=None, promoter_response_status_string=None, promoter_response_status_change_date=None, promoter_response_details=None, ha_response_status=None, ha_response_status_string=None, ha_response_status_change_date=None, ha_response_details=None, auto_acceptance_due_date=None, is_auto_accepted=None, non_compliance_reference_number=None):  # noqa: E501
        """InspectionResponse - a model defined in Swagger"""  # noqa: E501
        self._inspection_reference_number = None
        self._inspection_type = None
        self._inspection_type_string = None
        self._inspection_start_date = None
        self._inspection_category = None
        self._inspection_category_string = None
        self._inspection_outcome = None
        self._inspection_outcome_string = None
        self._failure_reason_details = None
        self._inspection_outcome_details = None
        self._was_call_logged = None
        self._call_logged_to = None
        self._call_logged_reference = None
        self._call_logged_summary = None
        self._defect_fixed_on_site = None
        self._defect_fixed_on_site_string = None
        self._additional_comments = None
        self._date_created = None
        self._date_modified = None
        self._files = None
        self._work_reference_number = None
        self._reinspection_date = None
        self._reinspection_date_time = None
        self._username = None
        self._promoter_organisation = None
        self._highway_authority = None
        self._inspector_name = None
        self._made_safe_by_ha = None
        self._inspection_status = None
        self._inspection_status_string = None
        self._inspection_reason_for_withdrawal = None
        self._inspection_reason_for_withdrawal_string = None
        self._withdrawal_details = None
        self._promoter_response_status = None
        self._promoter_response_status_string = None
        self._promoter_response_status_change_date = None
        self._promoter_response_details = None
        self._ha_response_status = None
        self._ha_response_status_string = None
        self._ha_response_status_change_date = None
        self._ha_response_details = None
        self._auto_acceptance_due_date = None
        self._is_auto_accepted = None
        self._non_compliance_reference_number = None
        self.discriminator = None
        self.inspection_reference_number = inspection_reference_number
        self.inspection_type = inspection_type
        self.inspection_type_string = inspection_type_string
        self.inspection_start_date = inspection_start_date
        if inspection_category is not None:
            self.inspection_category = inspection_category
        if inspection_category_string is not None:
            self.inspection_category_string = inspection_category_string
        self.inspection_outcome = inspection_outcome
        self.inspection_outcome_string = inspection_outcome_string
        if failure_reason_details is not None:
            self.failure_reason_details = failure_reason_details
        if inspection_outcome_details is not None:
            self.inspection_outcome_details = inspection_outcome_details
        if was_call_logged is not None:
            self.was_call_logged = was_call_logged
        if call_logged_to is not None:
            self.call_logged_to = call_logged_to
        if call_logged_reference is not None:
            self.call_logged_reference = call_logged_reference
        if call_logged_summary is not None:
            self.call_logged_summary = call_logged_summary
        if defect_fixed_on_site is not None:
            self.defect_fixed_on_site = defect_fixed_on_site
        if defect_fixed_on_site_string is not None:
            self.defect_fixed_on_site_string = defect_fixed_on_site_string
        if additional_comments is not None:
            self.additional_comments = additional_comments
        self.date_created = date_created
        self.date_modified = date_modified
        if files is not None:
            self.files = files
        self.work_reference_number = work_reference_number
        if reinspection_date is not None:
            self.reinspection_date = reinspection_date
        if reinspection_date_time is not None:
            self.reinspection_date_time = reinspection_date_time
        self.username = username
        self.promoter_organisation = promoter_organisation
        self.highway_authority = highway_authority
        if inspector_name is not None:
            self.inspector_name = inspector_name
        if made_safe_by_ha is not None:
            self.made_safe_by_ha = made_safe_by_ha
        self.inspection_status = inspection_status
        self.inspection_status_string = inspection_status_string
        if inspection_reason_for_withdrawal is not None:
            self.inspection_reason_for_withdrawal = inspection_reason_for_withdrawal
        if inspection_reason_for_withdrawal_string is not None:
            self.inspection_reason_for_withdrawal_string = inspection_reason_for_withdrawal_string
        if withdrawal_details is not None:
            self.withdrawal_details = withdrawal_details
        if promoter_response_status is not None:
            self.promoter_response_status = promoter_response_status
        if promoter_response_status_string is not None:
            self.promoter_response_status_string = promoter_response_status_string
        if promoter_response_status_change_date is not None:
            self.promoter_response_status_change_date = promoter_response_status_change_date
        if promoter_response_details is not None:
            self.promoter_response_details = promoter_response_details
        if ha_response_status is not None:
            self.ha_response_status = ha_response_status
        if ha_response_status_string is not None:
            self.ha_response_status_string = ha_response_status_string
        if ha_response_status_change_date is not None:
            self.ha_response_status_change_date = ha_response_status_change_date
        if ha_response_details is not None:
            self.ha_response_details = ha_response_details
        if auto_acceptance_due_date is not None:
            self.auto_acceptance_due_date = auto_acceptance_due_date
        self.is_auto_accepted = is_auto_accepted
        if non_compliance_reference_number is not None:
            self.non_compliance_reference_number = non_compliance_reference_number

    @property
    def inspection_reference_number(self):
        """Gets the inspection_reference_number of this InspectionResponse.  # noqa: E501


        :return: The inspection_reference_number of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_reference_number

    @inspection_reference_number.setter
    def inspection_reference_number(self, inspection_reference_number):
        """Sets the inspection_reference_number of this InspectionResponse.


        :param inspection_reference_number: The inspection_reference_number of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if inspection_reference_number is None:
            raise ValueError("Invalid value for `inspection_reference_number`, must not be `None`")  # noqa: E501

        self._inspection_reference_number = inspection_reference_number

    @property
    def inspection_type(self):
        """Gets the inspection_type of this InspectionResponse.  # noqa: E501


        :return: The inspection_type of this InspectionResponse.  # noqa: E501
        :rtype: InspectionTypeResponse
        """
        return self._inspection_type

    @inspection_type.setter
    def inspection_type(self, inspection_type):
        """Sets the inspection_type of this InspectionResponse.


        :param inspection_type: The inspection_type of this InspectionResponse.  # noqa: E501
        :type: InspectionTypeResponse
        """
        if inspection_type is None:
            raise ValueError("Invalid value for `inspection_type`, must not be `None`")  # noqa: E501

        self._inspection_type = inspection_type

    @property
    def inspection_type_string(self):
        """Gets the inspection_type_string of this InspectionResponse.  # noqa: E501


        :return: The inspection_type_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_type_string

    @inspection_type_string.setter
    def inspection_type_string(self, inspection_type_string):
        """Sets the inspection_type_string of this InspectionResponse.


        :param inspection_type_string: The inspection_type_string of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if inspection_type_string is None:
            raise ValueError("Invalid value for `inspection_type_string`, must not be `None`")  # noqa: E501

        self._inspection_type_string = inspection_type_string

    @property
    def inspection_start_date(self):
        """Gets the inspection_start_date of this InspectionResponse.  # noqa: E501


        :return: The inspection_start_date of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_start_date

    @inspection_start_date.setter
    def inspection_start_date(self, inspection_start_date):
        """Sets the inspection_start_date of this InspectionResponse.


        :param inspection_start_date: The inspection_start_date of this InspectionResponse.  # noqa: E501
        :type: datetime
        """
        if inspection_start_date is None:
            raise ValueError("Invalid value for `inspection_start_date`, must not be `None`")  # noqa: E501

        self._inspection_start_date = inspection_start_date

    @property
    def inspection_category(self):
        """Gets the inspection_category of this InspectionResponse.  # noqa: E501


        :return: The inspection_category of this InspectionResponse.  # noqa: E501
        :rtype: AllOfInspectionResponseInspectionCategory
        """
        return self._inspection_category

    @inspection_category.setter
    def inspection_category(self, inspection_category):
        """Sets the inspection_category of this InspectionResponse.


        :param inspection_category: The inspection_category of this InspectionResponse.  # noqa: E501
        :type: AllOfInspectionResponseInspectionCategory
        """

        self._inspection_category = inspection_category

    @property
    def inspection_category_string(self):
        """Gets the inspection_category_string of this InspectionResponse.  # noqa: E501


        :return: The inspection_category_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_category_string

    @inspection_category_string.setter
    def inspection_category_string(self, inspection_category_string):
        """Sets the inspection_category_string of this InspectionResponse.


        :param inspection_category_string: The inspection_category_string of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._inspection_category_string = inspection_category_string

    @property
    def inspection_outcome(self):
        """Gets the inspection_outcome of this InspectionResponse.  # noqa: E501


        :return: The inspection_outcome of this InspectionResponse.  # noqa: E501
        :rtype: InspectionOutcomeResponse
        """
        return self._inspection_outcome

    @inspection_outcome.setter
    def inspection_outcome(self, inspection_outcome):
        """Sets the inspection_outcome of this InspectionResponse.


        :param inspection_outcome: The inspection_outcome of this InspectionResponse.  # noqa: E501
        :type: InspectionOutcomeResponse
        """
        if inspection_outcome is None:
            raise ValueError("Invalid value for `inspection_outcome`, must not be `None`")  # noqa: E501

        self._inspection_outcome = inspection_outcome

    @property
    def inspection_outcome_string(self):
        """Gets the inspection_outcome_string of this InspectionResponse.  # noqa: E501


        :return: The inspection_outcome_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_outcome_string

    @inspection_outcome_string.setter
    def inspection_outcome_string(self, inspection_outcome_string):
        """Sets the inspection_outcome_string of this InspectionResponse.


        :param inspection_outcome_string: The inspection_outcome_string of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if inspection_outcome_string is None:
            raise ValueError("Invalid value for `inspection_outcome_string`, must not be `None`")  # noqa: E501

        self._inspection_outcome_string = inspection_outcome_string

    @property
    def failure_reason_details(self):
        """Gets the failure_reason_details of this InspectionResponse.  # noqa: E501


        :return: The failure_reason_details of this InspectionResponse.  # noqa: E501
        :rtype: list[FailureReasonDetailsResponse]
        """
        return self._failure_reason_details

    @failure_reason_details.setter
    def failure_reason_details(self, failure_reason_details):
        """Sets the failure_reason_details of this InspectionResponse.


        :param failure_reason_details: The failure_reason_details of this InspectionResponse.  # noqa: E501
        :type: list[FailureReasonDetailsResponse]
        """

        self._failure_reason_details = failure_reason_details

    @property
    def inspection_outcome_details(self):
        """Gets the inspection_outcome_details of this InspectionResponse.  # noqa: E501


        :return: The inspection_outcome_details of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_outcome_details

    @inspection_outcome_details.setter
    def inspection_outcome_details(self, inspection_outcome_details):
        """Sets the inspection_outcome_details of this InspectionResponse.


        :param inspection_outcome_details: The inspection_outcome_details of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._inspection_outcome_details = inspection_outcome_details

    @property
    def was_call_logged(self):
        """Gets the was_call_logged of this InspectionResponse.  # noqa: E501


        :return: The was_call_logged of this InspectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._was_call_logged

    @was_call_logged.setter
    def was_call_logged(self, was_call_logged):
        """Sets the was_call_logged of this InspectionResponse.


        :param was_call_logged: The was_call_logged of this InspectionResponse.  # noqa: E501
        :type: bool
        """

        self._was_call_logged = was_call_logged

    @property
    def call_logged_to(self):
        """Gets the call_logged_to of this InspectionResponse.  # noqa: E501


        :return: The call_logged_to of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._call_logged_to

    @call_logged_to.setter
    def call_logged_to(self, call_logged_to):
        """Sets the call_logged_to of this InspectionResponse.


        :param call_logged_to: The call_logged_to of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._call_logged_to = call_logged_to

    @property
    def call_logged_reference(self):
        """Gets the call_logged_reference of this InspectionResponse.  # noqa: E501


        :return: The call_logged_reference of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._call_logged_reference

    @call_logged_reference.setter
    def call_logged_reference(self, call_logged_reference):
        """Sets the call_logged_reference of this InspectionResponse.


        :param call_logged_reference: The call_logged_reference of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._call_logged_reference = call_logged_reference

    @property
    def call_logged_summary(self):
        """Gets the call_logged_summary of this InspectionResponse.  # noqa: E501


        :return: The call_logged_summary of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._call_logged_summary

    @call_logged_summary.setter
    def call_logged_summary(self, call_logged_summary):
        """Sets the call_logged_summary of this InspectionResponse.


        :param call_logged_summary: The call_logged_summary of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._call_logged_summary = call_logged_summary

    @property
    def defect_fixed_on_site(self):
        """Gets the defect_fixed_on_site of this InspectionResponse.  # noqa: E501


        :return: The defect_fixed_on_site of this InspectionResponse.  # noqa: E501
        :rtype: AllOfInspectionResponseDefectFixedOnSite
        """
        return self._defect_fixed_on_site

    @defect_fixed_on_site.setter
    def defect_fixed_on_site(self, defect_fixed_on_site):
        """Sets the defect_fixed_on_site of this InspectionResponse.


        :param defect_fixed_on_site: The defect_fixed_on_site of this InspectionResponse.  # noqa: E501
        :type: AllOfInspectionResponseDefectFixedOnSite
        """

        self._defect_fixed_on_site = defect_fixed_on_site

    @property
    def defect_fixed_on_site_string(self):
        """Gets the defect_fixed_on_site_string of this InspectionResponse.  # noqa: E501


        :return: The defect_fixed_on_site_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._defect_fixed_on_site_string

    @defect_fixed_on_site_string.setter
    def defect_fixed_on_site_string(self, defect_fixed_on_site_string):
        """Sets the defect_fixed_on_site_string of this InspectionResponse.


        :param defect_fixed_on_site_string: The defect_fixed_on_site_string of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._defect_fixed_on_site_string = defect_fixed_on_site_string

    @property
    def additional_comments(self):
        """Gets the additional_comments of this InspectionResponse.  # noqa: E501


        :return: The additional_comments of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._additional_comments

    @additional_comments.setter
    def additional_comments(self, additional_comments):
        """Sets the additional_comments of this InspectionResponse.


        :param additional_comments: The additional_comments of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._additional_comments = additional_comments

    @property
    def date_created(self):
        """Gets the date_created of this InspectionResponse.  # noqa: E501


        :return: The date_created of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this InspectionResponse.


        :param date_created: The date_created of this InspectionResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this InspectionResponse.  # noqa: E501


        :return: The date_modified of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this InspectionResponse.


        :param date_modified: The date_modified of this InspectionResponse.  # noqa: E501
        :type: datetime
        """
        if date_modified is None:
            raise ValueError("Invalid value for `date_modified`, must not be `None`")  # noqa: E501

        self._date_modified = date_modified

    @property
    def files(self):
        """Gets the files of this InspectionResponse.  # noqa: E501


        :return: The files of this InspectionResponse.  # noqa: E501
        :rtype: list[FileSummaryResponse]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this InspectionResponse.


        :param files: The files of this InspectionResponse.  # noqa: E501
        :type: list[FileSummaryResponse]
        """

        self._files = files

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this InspectionResponse.  # noqa: E501


        :return: The work_reference_number of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this InspectionResponse.


        :param work_reference_number: The work_reference_number of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def reinspection_date(self):
        """Gets the reinspection_date of this InspectionResponse.  # noqa: E501


        :return: The reinspection_date of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._reinspection_date

    @reinspection_date.setter
    def reinspection_date(self, reinspection_date):
        """Sets the reinspection_date of this InspectionResponse.


        :param reinspection_date: The reinspection_date of this InspectionResponse.  # noqa: E501
        :type: datetime
        """

        self._reinspection_date = reinspection_date

    @property
    def reinspection_date_time(self):
        """Gets the reinspection_date_time of this InspectionResponse.  # noqa: E501


        :return: The reinspection_date_time of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._reinspection_date_time

    @reinspection_date_time.setter
    def reinspection_date_time(self, reinspection_date_time):
        """Sets the reinspection_date_time of this InspectionResponse.


        :param reinspection_date_time: The reinspection_date_time of this InspectionResponse.  # noqa: E501
        :type: datetime
        """

        self._reinspection_date_time = reinspection_date_time

    @property
    def username(self):
        """Gets the username of this InspectionResponse.  # noqa: E501


        :return: The username of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InspectionResponse.


        :param username: The username of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this InspectionResponse.  # noqa: E501


        :return: The promoter_organisation of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this InspectionResponse.


        :param promoter_organisation: The promoter_organisation of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def highway_authority(self):
        """Gets the highway_authority of this InspectionResponse.  # noqa: E501


        :return: The highway_authority of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority

    @highway_authority.setter
    def highway_authority(self, highway_authority):
        """Sets the highway_authority of this InspectionResponse.


        :param highway_authority: The highway_authority of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if highway_authority is None:
            raise ValueError("Invalid value for `highway_authority`, must not be `None`")  # noqa: E501

        self._highway_authority = highway_authority

    @property
    def inspector_name(self):
        """Gets the inspector_name of this InspectionResponse.  # noqa: E501


        :return: The inspector_name of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspector_name

    @inspector_name.setter
    def inspector_name(self, inspector_name):
        """Sets the inspector_name of this InspectionResponse.


        :param inspector_name: The inspector_name of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._inspector_name = inspector_name

    @property
    def made_safe_by_ha(self):
        """Gets the made_safe_by_ha of this InspectionResponse.  # noqa: E501


        :return: The made_safe_by_ha of this InspectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._made_safe_by_ha

    @made_safe_by_ha.setter
    def made_safe_by_ha(self, made_safe_by_ha):
        """Sets the made_safe_by_ha of this InspectionResponse.


        :param made_safe_by_ha: The made_safe_by_ha of this InspectionResponse.  # noqa: E501
        :type: bool
        """

        self._made_safe_by_ha = made_safe_by_ha

    @property
    def inspection_status(self):
        """Gets the inspection_status of this InspectionResponse.  # noqa: E501


        :return: The inspection_status of this InspectionResponse.  # noqa: E501
        :rtype: InspectionStatusResponse
        """
        return self._inspection_status

    @inspection_status.setter
    def inspection_status(self, inspection_status):
        """Sets the inspection_status of this InspectionResponse.


        :param inspection_status: The inspection_status of this InspectionResponse.  # noqa: E501
        :type: InspectionStatusResponse
        """
        if inspection_status is None:
            raise ValueError("Invalid value for `inspection_status`, must not be `None`")  # noqa: E501

        self._inspection_status = inspection_status

    @property
    def inspection_status_string(self):
        """Gets the inspection_status_string of this InspectionResponse.  # noqa: E501


        :return: The inspection_status_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_status_string

    @inspection_status_string.setter
    def inspection_status_string(self, inspection_status_string):
        """Sets the inspection_status_string of this InspectionResponse.


        :param inspection_status_string: The inspection_status_string of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if inspection_status_string is None:
            raise ValueError("Invalid value for `inspection_status_string`, must not be `None`")  # noqa: E501

        self._inspection_status_string = inspection_status_string

    @property
    def inspection_reason_for_withdrawal(self):
        """Gets the inspection_reason_for_withdrawal of this InspectionResponse.  # noqa: E501


        :return: The inspection_reason_for_withdrawal of this InspectionResponse.  # noqa: E501
        :rtype: AllOfInspectionResponseInspectionReasonForWithdrawal
        """
        return self._inspection_reason_for_withdrawal

    @inspection_reason_for_withdrawal.setter
    def inspection_reason_for_withdrawal(self, inspection_reason_for_withdrawal):
        """Sets the inspection_reason_for_withdrawal of this InspectionResponse.


        :param inspection_reason_for_withdrawal: The inspection_reason_for_withdrawal of this InspectionResponse.  # noqa: E501
        :type: AllOfInspectionResponseInspectionReasonForWithdrawal
        """

        self._inspection_reason_for_withdrawal = inspection_reason_for_withdrawal

    @property
    def inspection_reason_for_withdrawal_string(self):
        """Gets the inspection_reason_for_withdrawal_string of this InspectionResponse.  # noqa: E501


        :return: The inspection_reason_for_withdrawal_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_reason_for_withdrawal_string

    @inspection_reason_for_withdrawal_string.setter
    def inspection_reason_for_withdrawal_string(self, inspection_reason_for_withdrawal_string):
        """Sets the inspection_reason_for_withdrawal_string of this InspectionResponse.


        :param inspection_reason_for_withdrawal_string: The inspection_reason_for_withdrawal_string of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._inspection_reason_for_withdrawal_string = inspection_reason_for_withdrawal_string

    @property
    def withdrawal_details(self):
        """Gets the withdrawal_details of this InspectionResponse.  # noqa: E501


        :return: The withdrawal_details of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._withdrawal_details

    @withdrawal_details.setter
    def withdrawal_details(self, withdrawal_details):
        """Sets the withdrawal_details of this InspectionResponse.


        :param withdrawal_details: The withdrawal_details of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._withdrawal_details = withdrawal_details

    @property
    def promoter_response_status(self):
        """Gets the promoter_response_status of this InspectionResponse.  # noqa: E501


        :return: The promoter_response_status of this InspectionResponse.  # noqa: E501
        :rtype: AllOfInspectionResponsePromoterResponseStatus
        """
        return self._promoter_response_status

    @promoter_response_status.setter
    def promoter_response_status(self, promoter_response_status):
        """Sets the promoter_response_status of this InspectionResponse.


        :param promoter_response_status: The promoter_response_status of this InspectionResponse.  # noqa: E501
        :type: AllOfInspectionResponsePromoterResponseStatus
        """

        self._promoter_response_status = promoter_response_status

    @property
    def promoter_response_status_string(self):
        """Gets the promoter_response_status_string of this InspectionResponse.  # noqa: E501


        :return: The promoter_response_status_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_response_status_string

    @promoter_response_status_string.setter
    def promoter_response_status_string(self, promoter_response_status_string):
        """Sets the promoter_response_status_string of this InspectionResponse.


        :param promoter_response_status_string: The promoter_response_status_string of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._promoter_response_status_string = promoter_response_status_string

    @property
    def promoter_response_status_change_date(self):
        """Gets the promoter_response_status_change_date of this InspectionResponse.  # noqa: E501


        :return: The promoter_response_status_change_date of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._promoter_response_status_change_date

    @promoter_response_status_change_date.setter
    def promoter_response_status_change_date(self, promoter_response_status_change_date):
        """Sets the promoter_response_status_change_date of this InspectionResponse.


        :param promoter_response_status_change_date: The promoter_response_status_change_date of this InspectionResponse.  # noqa: E501
        :type: datetime
        """

        self._promoter_response_status_change_date = promoter_response_status_change_date

    @property
    def promoter_response_details(self):
        """Gets the promoter_response_details of this InspectionResponse.  # noqa: E501


        :return: The promoter_response_details of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_response_details

    @promoter_response_details.setter
    def promoter_response_details(self, promoter_response_details):
        """Sets the promoter_response_details of this InspectionResponse.


        :param promoter_response_details: The promoter_response_details of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._promoter_response_details = promoter_response_details

    @property
    def ha_response_status(self):
        """Gets the ha_response_status of this InspectionResponse.  # noqa: E501


        :return: The ha_response_status of this InspectionResponse.  # noqa: E501
        :rtype: AllOfInspectionResponseHaResponseStatus
        """
        return self._ha_response_status

    @ha_response_status.setter
    def ha_response_status(self, ha_response_status):
        """Sets the ha_response_status of this InspectionResponse.


        :param ha_response_status: The ha_response_status of this InspectionResponse.  # noqa: E501
        :type: AllOfInspectionResponseHaResponseStatus
        """

        self._ha_response_status = ha_response_status

    @property
    def ha_response_status_string(self):
        """Gets the ha_response_status_string of this InspectionResponse.  # noqa: E501


        :return: The ha_response_status_string of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_response_status_string

    @ha_response_status_string.setter
    def ha_response_status_string(self, ha_response_status_string):
        """Sets the ha_response_status_string of this InspectionResponse.


        :param ha_response_status_string: The ha_response_status_string of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._ha_response_status_string = ha_response_status_string

    @property
    def ha_response_status_change_date(self):
        """Gets the ha_response_status_change_date of this InspectionResponse.  # noqa: E501


        :return: The ha_response_status_change_date of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._ha_response_status_change_date

    @ha_response_status_change_date.setter
    def ha_response_status_change_date(self, ha_response_status_change_date):
        """Sets the ha_response_status_change_date of this InspectionResponse.


        :param ha_response_status_change_date: The ha_response_status_change_date of this InspectionResponse.  # noqa: E501
        :type: datetime
        """

        self._ha_response_status_change_date = ha_response_status_change_date

    @property
    def ha_response_details(self):
        """Gets the ha_response_details of this InspectionResponse.  # noqa: E501


        :return: The ha_response_details of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_response_details

    @ha_response_details.setter
    def ha_response_details(self, ha_response_details):
        """Sets the ha_response_details of this InspectionResponse.


        :param ha_response_details: The ha_response_details of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._ha_response_details = ha_response_details

    @property
    def auto_acceptance_due_date(self):
        """Gets the auto_acceptance_due_date of this InspectionResponse.  # noqa: E501


        :return: The auto_acceptance_due_date of this InspectionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._auto_acceptance_due_date

    @auto_acceptance_due_date.setter
    def auto_acceptance_due_date(self, auto_acceptance_due_date):
        """Sets the auto_acceptance_due_date of this InspectionResponse.


        :param auto_acceptance_due_date: The auto_acceptance_due_date of this InspectionResponse.  # noqa: E501
        :type: datetime
        """

        self._auto_acceptance_due_date = auto_acceptance_due_date

    @property
    def is_auto_accepted(self):
        """Gets the is_auto_accepted of this InspectionResponse.  # noqa: E501


        :return: The is_auto_accepted of this InspectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_accepted

    @is_auto_accepted.setter
    def is_auto_accepted(self, is_auto_accepted):
        """Sets the is_auto_accepted of this InspectionResponse.


        :param is_auto_accepted: The is_auto_accepted of this InspectionResponse.  # noqa: E501
        :type: bool
        """
        if is_auto_accepted is None:
            raise ValueError("Invalid value for `is_auto_accepted`, must not be `None`")  # noqa: E501

        self._is_auto_accepted = is_auto_accepted

    @property
    def non_compliance_reference_number(self):
        """Gets the non_compliance_reference_number of this InspectionResponse.  # noqa: E501


        :return: The non_compliance_reference_number of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._non_compliance_reference_number

    @non_compliance_reference_number.setter
    def non_compliance_reference_number(self, non_compliance_reference_number):
        """Sets the non_compliance_reference_number of this InspectionResponse.


        :param non_compliance_reference_number: The non_compliance_reference_number of this InspectionResponse.  # noqa: E501
        :type: str
        """

        self._non_compliance_reference_number = non_compliance_reference_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InspectionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
