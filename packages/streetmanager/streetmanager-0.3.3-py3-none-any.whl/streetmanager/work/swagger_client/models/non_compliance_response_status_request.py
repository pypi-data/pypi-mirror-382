# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NonComplianceResponseStatusRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'non_compliance_response_status': 'NonComplianceResponseStatus',
        'response_details': 'str',
        'jsm_suggested_date': 'datetime'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'non_compliance_response_status': 'non_compliance_response_status',
        'response_details': 'response_details',
        'jsm_suggested_date': 'jsm_suggested_date'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, non_compliance_response_status=None, response_details=None, jsm_suggested_date=None):  # noqa: E501
        """NonComplianceResponseStatusRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._non_compliance_response_status = None
        self._response_details = None
        self._jsm_suggested_date = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.non_compliance_response_status = non_compliance_response_status
        if response_details is not None:
            self.response_details = response_details
        if jsm_suggested_date is not None:
            self.jsm_suggested_date = jsm_suggested_date

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this NonComplianceResponseStatusRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this NonComplianceResponseStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this NonComplianceResponseStatusRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this NonComplianceResponseStatusRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this NonComplianceResponseStatusRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this NonComplianceResponseStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this NonComplianceResponseStatusRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this NonComplianceResponseStatusRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def non_compliance_response_status(self):
        """Gets the non_compliance_response_status of this NonComplianceResponseStatusRequest.  # noqa: E501


        :return: The non_compliance_response_status of this NonComplianceResponseStatusRequest.  # noqa: E501
        :rtype: NonComplianceResponseStatus
        """
        return self._non_compliance_response_status

    @non_compliance_response_status.setter
    def non_compliance_response_status(self, non_compliance_response_status):
        """Sets the non_compliance_response_status of this NonComplianceResponseStatusRequest.


        :param non_compliance_response_status: The non_compliance_response_status of this NonComplianceResponseStatusRequest.  # noqa: E501
        :type: NonComplianceResponseStatus
        """
        if non_compliance_response_status is None:
            raise ValueError("Invalid value for `non_compliance_response_status`, must not be `None`")  # noqa: E501

        self._non_compliance_response_status = non_compliance_response_status

    @property
    def response_details(self):
        """Gets the response_details of this NonComplianceResponseStatusRequest.  # noqa: E501

        Required when non_compliance_response_status = 'withdrawn'/'joint_site_meeting_not_needed' Max length 500 characters  # noqa: E501

        :return: The response_details of this NonComplianceResponseStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_details

    @response_details.setter
    def response_details(self, response_details):
        """Sets the response_details of this NonComplianceResponseStatusRequest.

        Required when non_compliance_response_status = 'withdrawn'/'joint_site_meeting_not_needed' Max length 500 characters  # noqa: E501

        :param response_details: The response_details of this NonComplianceResponseStatusRequest.  # noqa: E501
        :type: str
        """

        self._response_details = response_details

    @property
    def jsm_suggested_date(self):
        """Gets the jsm_suggested_date of this NonComplianceResponseStatusRequest.  # noqa: E501

        Required if non_compliance_response_status = 'joint_site_meeting_suggested' Must be today or in the future  # noqa: E501

        :return: The jsm_suggested_date of this NonComplianceResponseStatusRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._jsm_suggested_date

    @jsm_suggested_date.setter
    def jsm_suggested_date(self, jsm_suggested_date):
        """Sets the jsm_suggested_date of this NonComplianceResponseStatusRequest.

        Required if non_compliance_response_status = 'joint_site_meeting_suggested' Must be today or in the future  # noqa: E501

        :param jsm_suggested_date: The jsm_suggested_date of this NonComplianceResponseStatusRequest.  # noqa: E501
        :type: datetime
        """

        self._jsm_suggested_date = jsm_suggested_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NonComplianceResponseStatusRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonComplianceResponseStatusRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
