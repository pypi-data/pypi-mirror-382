# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReinstatementResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reinstatement_reference_number': 'str',
        'permit_reference_number': 'str',
        'reinstatement_status': 'ReinstatementStatusResponse',
        'reinstatement_status_string': 'str',
        'reinstatement_date': 'datetime',
        'depth': 'float',
        'length': 'float',
        'width': 'float',
        'reinstatement_coordinates': 'object',
        'secondary_reinstatement_coordinates': 'object',
        'location_description': 'str',
        'end_date': 'datetime',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'location_types': 'list[LocationTypeResponse]',
        'location_types_string': 'list[str]',
        'reinstatement_evidence': 'bool',
        'files': 'list[FileSummaryResponse]',
        'number_of_holes': 'float',
        'is_active_reinstatement': 'bool',
        'response_to_remedial_works': 'bool',
        'base_courses_affected': 'bool'
    }

    attribute_map = {
        'reinstatement_reference_number': 'reinstatement_reference_number',
        'permit_reference_number': 'permit_reference_number',
        'reinstatement_status': 'reinstatement_status',
        'reinstatement_status_string': 'reinstatement_status_string',
        'reinstatement_date': 'reinstatement_date',
        'depth': 'depth',
        'length': 'length',
        'width': 'width',
        'reinstatement_coordinates': 'reinstatement_coordinates',
        'secondary_reinstatement_coordinates': 'secondary_reinstatement_coordinates',
        'location_description': 'location_description',
        'end_date': 'end_date',
        'date_created': 'date_created',
        'date_modified': 'date_modified',
        'location_types': 'location_types',
        'location_types_string': 'location_types_string',
        'reinstatement_evidence': 'reinstatement_evidence',
        'files': 'files',
        'number_of_holes': 'number_of_holes',
        'is_active_reinstatement': 'is_active_reinstatement',
        'response_to_remedial_works': 'response_to_remedial_works',
        'base_courses_affected': 'base_courses_affected'
    }

    def __init__(self, reinstatement_reference_number=None, permit_reference_number=None, reinstatement_status=None, reinstatement_status_string=None, reinstatement_date=None, depth=None, length=None, width=None, reinstatement_coordinates=None, secondary_reinstatement_coordinates=None, location_description=None, end_date=None, date_created=None, date_modified=None, location_types=None, location_types_string=None, reinstatement_evidence=None, files=None, number_of_holes=None, is_active_reinstatement=None, response_to_remedial_works=None, base_courses_affected=None):  # noqa: E501
        """ReinstatementResponse - a model defined in Swagger"""  # noqa: E501
        self._reinstatement_reference_number = None
        self._permit_reference_number = None
        self._reinstatement_status = None
        self._reinstatement_status_string = None
        self._reinstatement_date = None
        self._depth = None
        self._length = None
        self._width = None
        self._reinstatement_coordinates = None
        self._secondary_reinstatement_coordinates = None
        self._location_description = None
        self._end_date = None
        self._date_created = None
        self._date_modified = None
        self._location_types = None
        self._location_types_string = None
        self._reinstatement_evidence = None
        self._files = None
        self._number_of_holes = None
        self._is_active_reinstatement = None
        self._response_to_remedial_works = None
        self._base_courses_affected = None
        self.discriminator = None
        self.reinstatement_reference_number = reinstatement_reference_number
        if permit_reference_number is not None:
            self.permit_reference_number = permit_reference_number
        self.reinstatement_status = reinstatement_status
        self.reinstatement_status_string = reinstatement_status_string
        if reinstatement_date is not None:
            self.reinstatement_date = reinstatement_date
        if depth is not None:
            self.depth = depth
        if length is not None:
            self.length = length
        if width is not None:
            self.width = width
        self.reinstatement_coordinates = reinstatement_coordinates
        if secondary_reinstatement_coordinates is not None:
            self.secondary_reinstatement_coordinates = secondary_reinstatement_coordinates
        self.location_description = location_description
        if end_date is not None:
            self.end_date = end_date
        self.date_created = date_created
        self.date_modified = date_modified
        self.location_types = location_types
        self.location_types_string = location_types_string
        self.reinstatement_evidence = reinstatement_evidence
        if files is not None:
            self.files = files
        if number_of_holes is not None:
            self.number_of_holes = number_of_holes
        self.is_active_reinstatement = is_active_reinstatement
        if response_to_remedial_works is not None:
            self.response_to_remedial_works = response_to_remedial_works
        if base_courses_affected is not None:
            self.base_courses_affected = base_courses_affected

    @property
    def reinstatement_reference_number(self):
        """Gets the reinstatement_reference_number of this ReinstatementResponse.  # noqa: E501


        :return: The reinstatement_reference_number of this ReinstatementResponse.  # noqa: E501
        :rtype: str
        """
        return self._reinstatement_reference_number

    @reinstatement_reference_number.setter
    def reinstatement_reference_number(self, reinstatement_reference_number):
        """Sets the reinstatement_reference_number of this ReinstatementResponse.


        :param reinstatement_reference_number: The reinstatement_reference_number of this ReinstatementResponse.  # noqa: E501
        :type: str
        """
        if reinstatement_reference_number is None:
            raise ValueError("Invalid value for `reinstatement_reference_number`, must not be `None`")  # noqa: E501

        self._reinstatement_reference_number = reinstatement_reference_number

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this ReinstatementResponse.  # noqa: E501


        :return: The permit_reference_number of this ReinstatementResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this ReinstatementResponse.


        :param permit_reference_number: The permit_reference_number of this ReinstatementResponse.  # noqa: E501
        :type: str
        """

        self._permit_reference_number = permit_reference_number

    @property
    def reinstatement_status(self):
        """Gets the reinstatement_status of this ReinstatementResponse.  # noqa: E501


        :return: The reinstatement_status of this ReinstatementResponse.  # noqa: E501
        :rtype: ReinstatementStatusResponse
        """
        return self._reinstatement_status

    @reinstatement_status.setter
    def reinstatement_status(self, reinstatement_status):
        """Sets the reinstatement_status of this ReinstatementResponse.


        :param reinstatement_status: The reinstatement_status of this ReinstatementResponse.  # noqa: E501
        :type: ReinstatementStatusResponse
        """
        if reinstatement_status is None:
            raise ValueError("Invalid value for `reinstatement_status`, must not be `None`")  # noqa: E501

        self._reinstatement_status = reinstatement_status

    @property
    def reinstatement_status_string(self):
        """Gets the reinstatement_status_string of this ReinstatementResponse.  # noqa: E501


        :return: The reinstatement_status_string of this ReinstatementResponse.  # noqa: E501
        :rtype: str
        """
        return self._reinstatement_status_string

    @reinstatement_status_string.setter
    def reinstatement_status_string(self, reinstatement_status_string):
        """Sets the reinstatement_status_string of this ReinstatementResponse.


        :param reinstatement_status_string: The reinstatement_status_string of this ReinstatementResponse.  # noqa: E501
        :type: str
        """
        if reinstatement_status_string is None:
            raise ValueError("Invalid value for `reinstatement_status_string`, must not be `None`")  # noqa: E501

        self._reinstatement_status_string = reinstatement_status_string

    @property
    def reinstatement_date(self):
        """Gets the reinstatement_date of this ReinstatementResponse.  # noqa: E501


        :return: The reinstatement_date of this ReinstatementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._reinstatement_date

    @reinstatement_date.setter
    def reinstatement_date(self, reinstatement_date):
        """Sets the reinstatement_date of this ReinstatementResponse.


        :param reinstatement_date: The reinstatement_date of this ReinstatementResponse.  # noqa: E501
        :type: datetime
        """

        self._reinstatement_date = reinstatement_date

    @property
    def depth(self):
        """Gets the depth of this ReinstatementResponse.  # noqa: E501


        :return: The depth of this ReinstatementResponse.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this ReinstatementResponse.


        :param depth: The depth of this ReinstatementResponse.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def length(self):
        """Gets the length of this ReinstatementResponse.  # noqa: E501


        :return: The length of this ReinstatementResponse.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ReinstatementResponse.


        :param length: The length of this ReinstatementResponse.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def width(self):
        """Gets the width of this ReinstatementResponse.  # noqa: E501


        :return: The width of this ReinstatementResponse.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ReinstatementResponse.


        :param width: The width of this ReinstatementResponse.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def reinstatement_coordinates(self):
        """Gets the reinstatement_coordinates of this ReinstatementResponse.  # noqa: E501


        :return: The reinstatement_coordinates of this ReinstatementResponse.  # noqa: E501
        :rtype: object
        """
        return self._reinstatement_coordinates

    @reinstatement_coordinates.setter
    def reinstatement_coordinates(self, reinstatement_coordinates):
        """Sets the reinstatement_coordinates of this ReinstatementResponse.


        :param reinstatement_coordinates: The reinstatement_coordinates of this ReinstatementResponse.  # noqa: E501
        :type: object
        """
        if reinstatement_coordinates is None:
            raise ValueError("Invalid value for `reinstatement_coordinates`, must not be `None`")  # noqa: E501

        self._reinstatement_coordinates = reinstatement_coordinates

    @property
    def secondary_reinstatement_coordinates(self):
        """Gets the secondary_reinstatement_coordinates of this ReinstatementResponse.  # noqa: E501


        :return: The secondary_reinstatement_coordinates of this ReinstatementResponse.  # noqa: E501
        :rtype: object
        """
        return self._secondary_reinstatement_coordinates

    @secondary_reinstatement_coordinates.setter
    def secondary_reinstatement_coordinates(self, secondary_reinstatement_coordinates):
        """Sets the secondary_reinstatement_coordinates of this ReinstatementResponse.


        :param secondary_reinstatement_coordinates: The secondary_reinstatement_coordinates of this ReinstatementResponse.  # noqa: E501
        :type: object
        """

        self._secondary_reinstatement_coordinates = secondary_reinstatement_coordinates

    @property
    def location_description(self):
        """Gets the location_description of this ReinstatementResponse.  # noqa: E501


        :return: The location_description of this ReinstatementResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this ReinstatementResponse.


        :param location_description: The location_description of this ReinstatementResponse.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def end_date(self):
        """Gets the end_date of this ReinstatementResponse.  # noqa: E501


        :return: The end_date of this ReinstatementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ReinstatementResponse.


        :param end_date: The end_date of this ReinstatementResponse.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def date_created(self):
        """Gets the date_created of this ReinstatementResponse.  # noqa: E501


        :return: The date_created of this ReinstatementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ReinstatementResponse.


        :param date_created: The date_created of this ReinstatementResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ReinstatementResponse.  # noqa: E501


        :return: The date_modified of this ReinstatementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ReinstatementResponse.


        :param date_modified: The date_modified of this ReinstatementResponse.  # noqa: E501
        :type: datetime
        """
        if date_modified is None:
            raise ValueError("Invalid value for `date_modified`, must not be `None`")  # noqa: E501

        self._date_modified = date_modified

    @property
    def location_types(self):
        """Gets the location_types of this ReinstatementResponse.  # noqa: E501


        :return: The location_types of this ReinstatementResponse.  # noqa: E501
        :rtype: list[LocationTypeResponse]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this ReinstatementResponse.


        :param location_types: The location_types of this ReinstatementResponse.  # noqa: E501
        :type: list[LocationTypeResponse]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def location_types_string(self):
        """Gets the location_types_string of this ReinstatementResponse.  # noqa: E501


        :return: The location_types_string of this ReinstatementResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_types_string

    @location_types_string.setter
    def location_types_string(self, location_types_string):
        """Sets the location_types_string of this ReinstatementResponse.


        :param location_types_string: The location_types_string of this ReinstatementResponse.  # noqa: E501
        :type: list[str]
        """
        if location_types_string is None:
            raise ValueError("Invalid value for `location_types_string`, must not be `None`")  # noqa: E501

        self._location_types_string = location_types_string

    @property
    def reinstatement_evidence(self):
        """Gets the reinstatement_evidence of this ReinstatementResponse.  # noqa: E501


        :return: The reinstatement_evidence of this ReinstatementResponse.  # noqa: E501
        :rtype: bool
        """
        return self._reinstatement_evidence

    @reinstatement_evidence.setter
    def reinstatement_evidence(self, reinstatement_evidence):
        """Sets the reinstatement_evidence of this ReinstatementResponse.


        :param reinstatement_evidence: The reinstatement_evidence of this ReinstatementResponse.  # noqa: E501
        :type: bool
        """
        if reinstatement_evidence is None:
            raise ValueError("Invalid value for `reinstatement_evidence`, must not be `None`")  # noqa: E501

        self._reinstatement_evidence = reinstatement_evidence

    @property
    def files(self):
        """Gets the files of this ReinstatementResponse.  # noqa: E501


        :return: The files of this ReinstatementResponse.  # noqa: E501
        :rtype: list[FileSummaryResponse]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ReinstatementResponse.


        :param files: The files of this ReinstatementResponse.  # noqa: E501
        :type: list[FileSummaryResponse]
        """

        self._files = files

    @property
    def number_of_holes(self):
        """Gets the number_of_holes of this ReinstatementResponse.  # noqa: E501


        :return: The number_of_holes of this ReinstatementResponse.  # noqa: E501
        :rtype: float
        """
        return self._number_of_holes

    @number_of_holes.setter
    def number_of_holes(self, number_of_holes):
        """Sets the number_of_holes of this ReinstatementResponse.


        :param number_of_holes: The number_of_holes of this ReinstatementResponse.  # noqa: E501
        :type: float
        """

        self._number_of_holes = number_of_holes

    @property
    def is_active_reinstatement(self):
        """Gets the is_active_reinstatement of this ReinstatementResponse.  # noqa: E501


        :return: The is_active_reinstatement of this ReinstatementResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_reinstatement

    @is_active_reinstatement.setter
    def is_active_reinstatement(self, is_active_reinstatement):
        """Sets the is_active_reinstatement of this ReinstatementResponse.


        :param is_active_reinstatement: The is_active_reinstatement of this ReinstatementResponse.  # noqa: E501
        :type: bool
        """
        if is_active_reinstatement is None:
            raise ValueError("Invalid value for `is_active_reinstatement`, must not be `None`")  # noqa: E501

        self._is_active_reinstatement = is_active_reinstatement

    @property
    def response_to_remedial_works(self):
        """Gets the response_to_remedial_works of this ReinstatementResponse.  # noqa: E501


        :return: The response_to_remedial_works of this ReinstatementResponse.  # noqa: E501
        :rtype: bool
        """
        return self._response_to_remedial_works

    @response_to_remedial_works.setter
    def response_to_remedial_works(self, response_to_remedial_works):
        """Sets the response_to_remedial_works of this ReinstatementResponse.


        :param response_to_remedial_works: The response_to_remedial_works of this ReinstatementResponse.  # noqa: E501
        :type: bool
        """

        self._response_to_remedial_works = response_to_remedial_works

    @property
    def base_courses_affected(self):
        """Gets the base_courses_affected of this ReinstatementResponse.  # noqa: E501


        :return: The base_courses_affected of this ReinstatementResponse.  # noqa: E501
        :rtype: bool
        """
        return self._base_courses_affected

    @base_courses_affected.setter
    def base_courses_affected(self, base_courses_affected):
        """Sets the base_courses_affected of this ReinstatementResponse.


        :param base_courses_affected: The base_courses_affected of this ReinstatementResponse.  # noqa: E501
        :type: bool
        """

        self._base_courses_affected = base_courses_affected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReinstatementResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReinstatementResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
