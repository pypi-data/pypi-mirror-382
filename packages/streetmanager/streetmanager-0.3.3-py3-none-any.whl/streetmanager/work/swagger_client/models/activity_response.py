# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_reference_number': 'str',
        'usrn': 'float',
        'street_name': 'str',
        'town': 'str',
        'area_name': 'str',
        'road_category': 'float',
        'activity_coordinates': 'object',
        'activity_name': 'str',
        'activity_activity_type': 'ActivityActivityTypeResponse',
        'activity_activity_type_string': 'str',
        'activity_type_details': 'str',
        'contact_name': 'str',
        'contact_details': 'str',
        'start_date': 'datetime',
        'start_time': 'datetime',
        'end_date': 'datetime',
        'end_time': 'datetime',
        'location_types': 'list[LocationTypeResponse]',
        'location_types_string': 'list[str]',
        'activity_location_description': 'str',
        'traffic_management_type': 'TrafficManagementTypeResponse',
        'traffic_management_type_string': 'str',
        'collaborative_working': 'bool',
        'additional_info': 'str',
        'cancelled': 'bool',
        'cancelled_reason': 'str',
        'highway_authority_swa_code': 'str'
    }

    attribute_map = {
        'activity_reference_number': 'activity_reference_number',
        'usrn': 'usrn',
        'street_name': 'street_name',
        'town': 'town',
        'area_name': 'area_name',
        'road_category': 'road_category',
        'activity_coordinates': 'activity_coordinates',
        'activity_name': 'activity_name',
        'activity_activity_type': 'activity_activity_type',
        'activity_activity_type_string': 'activity_activity_type_string',
        'activity_type_details': 'activity_type_details',
        'contact_name': 'contact_name',
        'contact_details': 'contact_details',
        'start_date': 'start_date',
        'start_time': 'start_time',
        'end_date': 'end_date',
        'end_time': 'end_time',
        'location_types': 'location_types',
        'location_types_string': 'location_types_string',
        'activity_location_description': 'activity_location_description',
        'traffic_management_type': 'traffic_management_type',
        'traffic_management_type_string': 'traffic_management_type_string',
        'collaborative_working': 'collaborative_working',
        'additional_info': 'additional_info',
        'cancelled': 'cancelled',
        'cancelled_reason': 'cancelled_reason',
        'highway_authority_swa_code': 'highway_authority_swa_code'
    }

    def __init__(self, activity_reference_number=None, usrn=None, street_name=None, town=None, area_name=None, road_category=None, activity_coordinates=None, activity_name=None, activity_activity_type=None, activity_activity_type_string=None, activity_type_details=None, contact_name=None, contact_details=None, start_date=None, start_time=None, end_date=None, end_time=None, location_types=None, location_types_string=None, activity_location_description=None, traffic_management_type=None, traffic_management_type_string=None, collaborative_working=None, additional_info=None, cancelled=None, cancelled_reason=None, highway_authority_swa_code=None):  # noqa: E501
        """ActivityResponse - a model defined in Swagger"""  # noqa: E501
        self._activity_reference_number = None
        self._usrn = None
        self._street_name = None
        self._town = None
        self._area_name = None
        self._road_category = None
        self._activity_coordinates = None
        self._activity_name = None
        self._activity_activity_type = None
        self._activity_activity_type_string = None
        self._activity_type_details = None
        self._contact_name = None
        self._contact_details = None
        self._start_date = None
        self._start_time = None
        self._end_date = None
        self._end_time = None
        self._location_types = None
        self._location_types_string = None
        self._activity_location_description = None
        self._traffic_management_type = None
        self._traffic_management_type_string = None
        self._collaborative_working = None
        self._additional_info = None
        self._cancelled = None
        self._cancelled_reason = None
        self._highway_authority_swa_code = None
        self.discriminator = None
        self.activity_reference_number = activity_reference_number
        self.usrn = usrn
        if street_name is not None:
            self.street_name = street_name
        if town is not None:
            self.town = town
        if area_name is not None:
            self.area_name = area_name
        if road_category is not None:
            self.road_category = road_category
        self.activity_coordinates = activity_coordinates
        self.activity_name = activity_name
        self.activity_activity_type = activity_activity_type
        self.activity_activity_type_string = activity_activity_type_string
        if activity_type_details is not None:
            self.activity_type_details = activity_type_details
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_details is not None:
            self.contact_details = contact_details
        self.start_date = start_date
        if start_time is not None:
            self.start_time = start_time
        self.end_date = end_date
        if end_time is not None:
            self.end_time = end_time
        self.location_types = location_types
        self.location_types_string = location_types_string
        self.activity_location_description = activity_location_description
        self.traffic_management_type = traffic_management_type
        self.traffic_management_type_string = traffic_management_type_string
        self.collaborative_working = collaborative_working
        if additional_info is not None:
            self.additional_info = additional_info
        self.cancelled = cancelled
        if cancelled_reason is not None:
            self.cancelled_reason = cancelled_reason
        self.highway_authority_swa_code = highway_authority_swa_code

    @property
    def activity_reference_number(self):
        """Gets the activity_reference_number of this ActivityResponse.  # noqa: E501


        :return: The activity_reference_number of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_reference_number

    @activity_reference_number.setter
    def activity_reference_number(self, activity_reference_number):
        """Sets the activity_reference_number of this ActivityResponse.


        :param activity_reference_number: The activity_reference_number of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if activity_reference_number is None:
            raise ValueError("Invalid value for `activity_reference_number`, must not be `None`")  # noqa: E501

        self._activity_reference_number = activity_reference_number

    @property
    def usrn(self):
        """Gets the usrn of this ActivityResponse.  # noqa: E501


        :return: The usrn of this ActivityResponse.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this ActivityResponse.


        :param usrn: The usrn of this ActivityResponse.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def street_name(self):
        """Gets the street_name of this ActivityResponse.  # noqa: E501


        :return: The street_name of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this ActivityResponse.


        :param street_name: The street_name of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def town(self):
        """Gets the town of this ActivityResponse.  # noqa: E501


        :return: The town of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this ActivityResponse.


        :param town: The town of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area_name(self):
        """Gets the area_name of this ActivityResponse.  # noqa: E501


        :return: The area_name of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this ActivityResponse.


        :param area_name: The area_name of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def road_category(self):
        """Gets the road_category of this ActivityResponse.  # noqa: E501


        :return: The road_category of this ActivityResponse.  # noqa: E501
        :rtype: float
        """
        return self._road_category

    @road_category.setter
    def road_category(self, road_category):
        """Sets the road_category of this ActivityResponse.


        :param road_category: The road_category of this ActivityResponse.  # noqa: E501
        :type: float
        """

        self._road_category = road_category

    @property
    def activity_coordinates(self):
        """Gets the activity_coordinates of this ActivityResponse.  # noqa: E501


        :return: The activity_coordinates of this ActivityResponse.  # noqa: E501
        :rtype: object
        """
        return self._activity_coordinates

    @activity_coordinates.setter
    def activity_coordinates(self, activity_coordinates):
        """Sets the activity_coordinates of this ActivityResponse.


        :param activity_coordinates: The activity_coordinates of this ActivityResponse.  # noqa: E501
        :type: object
        """
        if activity_coordinates is None:
            raise ValueError("Invalid value for `activity_coordinates`, must not be `None`")  # noqa: E501

        self._activity_coordinates = activity_coordinates

    @property
    def activity_name(self):
        """Gets the activity_name of this ActivityResponse.  # noqa: E501


        :return: The activity_name of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this ActivityResponse.


        :param activity_name: The activity_name of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if activity_name is None:
            raise ValueError("Invalid value for `activity_name`, must not be `None`")  # noqa: E501

        self._activity_name = activity_name

    @property
    def activity_activity_type(self):
        """Gets the activity_activity_type of this ActivityResponse.  # noqa: E501


        :return: The activity_activity_type of this ActivityResponse.  # noqa: E501
        :rtype: ActivityActivityTypeResponse
        """
        return self._activity_activity_type

    @activity_activity_type.setter
    def activity_activity_type(self, activity_activity_type):
        """Sets the activity_activity_type of this ActivityResponse.


        :param activity_activity_type: The activity_activity_type of this ActivityResponse.  # noqa: E501
        :type: ActivityActivityTypeResponse
        """
        if activity_activity_type is None:
            raise ValueError("Invalid value for `activity_activity_type`, must not be `None`")  # noqa: E501

        self._activity_activity_type = activity_activity_type

    @property
    def activity_activity_type_string(self):
        """Gets the activity_activity_type_string of this ActivityResponse.  # noqa: E501


        :return: The activity_activity_type_string of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_activity_type_string

    @activity_activity_type_string.setter
    def activity_activity_type_string(self, activity_activity_type_string):
        """Sets the activity_activity_type_string of this ActivityResponse.


        :param activity_activity_type_string: The activity_activity_type_string of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if activity_activity_type_string is None:
            raise ValueError("Invalid value for `activity_activity_type_string`, must not be `None`")  # noqa: E501

        self._activity_activity_type_string = activity_activity_type_string

    @property
    def activity_type_details(self):
        """Gets the activity_type_details of this ActivityResponse.  # noqa: E501


        :return: The activity_type_details of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_type_details

    @activity_type_details.setter
    def activity_type_details(self, activity_type_details):
        """Sets the activity_type_details of this ActivityResponse.


        :param activity_type_details: The activity_type_details of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._activity_type_details = activity_type_details

    @property
    def contact_name(self):
        """Gets the contact_name of this ActivityResponse.  # noqa: E501


        :return: The contact_name of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this ActivityResponse.


        :param contact_name: The contact_name of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_details(self):
        """Gets the contact_details of this ActivityResponse.  # noqa: E501


        :return: The contact_details of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this ActivityResponse.


        :param contact_details: The contact_details of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._contact_details = contact_details

    @property
    def start_date(self):
        """Gets the start_date of this ActivityResponse.  # noqa: E501


        :return: The start_date of this ActivityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ActivityResponse.


        :param start_date: The start_date of this ActivityResponse.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def start_time(self):
        """Gets the start_time of this ActivityResponse.  # noqa: E501


        :return: The start_time of this ActivityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ActivityResponse.


        :param start_time: The start_time of this ActivityResponse.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_date(self):
        """Gets the end_date of this ActivityResponse.  # noqa: E501


        :return: The end_date of this ActivityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ActivityResponse.


        :param end_date: The end_date of this ActivityResponse.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def end_time(self):
        """Gets the end_time of this ActivityResponse.  # noqa: E501


        :return: The end_time of this ActivityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ActivityResponse.


        :param end_time: The end_time of this ActivityResponse.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def location_types(self):
        """Gets the location_types of this ActivityResponse.  # noqa: E501


        :return: The location_types of this ActivityResponse.  # noqa: E501
        :rtype: list[LocationTypeResponse]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this ActivityResponse.


        :param location_types: The location_types of this ActivityResponse.  # noqa: E501
        :type: list[LocationTypeResponse]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def location_types_string(self):
        """Gets the location_types_string of this ActivityResponse.  # noqa: E501


        :return: The location_types_string of this ActivityResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_types_string

    @location_types_string.setter
    def location_types_string(self, location_types_string):
        """Sets the location_types_string of this ActivityResponse.


        :param location_types_string: The location_types_string of this ActivityResponse.  # noqa: E501
        :type: list[str]
        """
        if location_types_string is None:
            raise ValueError("Invalid value for `location_types_string`, must not be `None`")  # noqa: E501

        self._location_types_string = location_types_string

    @property
    def activity_location_description(self):
        """Gets the activity_location_description of this ActivityResponse.  # noqa: E501


        :return: The activity_location_description of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_location_description

    @activity_location_description.setter
    def activity_location_description(self, activity_location_description):
        """Sets the activity_location_description of this ActivityResponse.


        :param activity_location_description: The activity_location_description of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if activity_location_description is None:
            raise ValueError("Invalid value for `activity_location_description`, must not be `None`")  # noqa: E501

        self._activity_location_description = activity_location_description

    @property
    def traffic_management_type(self):
        """Gets the traffic_management_type of this ActivityResponse.  # noqa: E501


        :return: The traffic_management_type of this ActivityResponse.  # noqa: E501
        :rtype: TrafficManagementTypeResponse
        """
        return self._traffic_management_type

    @traffic_management_type.setter
    def traffic_management_type(self, traffic_management_type):
        """Sets the traffic_management_type of this ActivityResponse.


        :param traffic_management_type: The traffic_management_type of this ActivityResponse.  # noqa: E501
        :type: TrafficManagementTypeResponse
        """
        if traffic_management_type is None:
            raise ValueError("Invalid value for `traffic_management_type`, must not be `None`")  # noqa: E501

        self._traffic_management_type = traffic_management_type

    @property
    def traffic_management_type_string(self):
        """Gets the traffic_management_type_string of this ActivityResponse.  # noqa: E501


        :return: The traffic_management_type_string of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._traffic_management_type_string

    @traffic_management_type_string.setter
    def traffic_management_type_string(self, traffic_management_type_string):
        """Sets the traffic_management_type_string of this ActivityResponse.


        :param traffic_management_type_string: The traffic_management_type_string of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if traffic_management_type_string is None:
            raise ValueError("Invalid value for `traffic_management_type_string`, must not be `None`")  # noqa: E501

        self._traffic_management_type_string = traffic_management_type_string

    @property
    def collaborative_working(self):
        """Gets the collaborative_working of this ActivityResponse.  # noqa: E501


        :return: The collaborative_working of this ActivityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._collaborative_working

    @collaborative_working.setter
    def collaborative_working(self, collaborative_working):
        """Sets the collaborative_working of this ActivityResponse.


        :param collaborative_working: The collaborative_working of this ActivityResponse.  # noqa: E501
        :type: bool
        """
        if collaborative_working is None:
            raise ValueError("Invalid value for `collaborative_working`, must not be `None`")  # noqa: E501

        self._collaborative_working = collaborative_working

    @property
    def additional_info(self):
        """Gets the additional_info of this ActivityResponse.  # noqa: E501


        :return: The additional_info of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this ActivityResponse.


        :param additional_info: The additional_info of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def cancelled(self):
        """Gets the cancelled of this ActivityResponse.  # noqa: E501


        :return: The cancelled of this ActivityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this ActivityResponse.


        :param cancelled: The cancelled of this ActivityResponse.  # noqa: E501
        :type: bool
        """
        if cancelled is None:
            raise ValueError("Invalid value for `cancelled`, must not be `None`")  # noqa: E501

        self._cancelled = cancelled

    @property
    def cancelled_reason(self):
        """Gets the cancelled_reason of this ActivityResponse.  # noqa: E501


        :return: The cancelled_reason of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_reason

    @cancelled_reason.setter
    def cancelled_reason(self, cancelled_reason):
        """Sets the cancelled_reason of this ActivityResponse.


        :param cancelled_reason: The cancelled_reason of this ActivityResponse.  # noqa: E501
        :type: str
        """

        self._cancelled_reason = cancelled_reason

    @property
    def highway_authority_swa_code(self):
        """Gets the highway_authority_swa_code of this ActivityResponse.  # noqa: E501


        :return: The highway_authority_swa_code of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority_swa_code

    @highway_authority_swa_code.setter
    def highway_authority_swa_code(self, highway_authority_swa_code):
        """Sets the highway_authority_swa_code of this ActivityResponse.


        :param highway_authority_swa_code: The highway_authority_swa_code of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if highway_authority_swa_code is None:
            raise ValueError("Invalid value for `highway_authority_swa_code`, must not be `None`")  # noqa: E501

        self._highway_authority_swa_code = highway_authority_swa_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
