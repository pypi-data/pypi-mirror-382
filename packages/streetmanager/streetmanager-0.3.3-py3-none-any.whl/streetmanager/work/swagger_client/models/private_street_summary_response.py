# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateStreetSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'private_street_reference_number': 'str',
        'proposed_start_date': 'datetime',
        'proposed_start_time': 'datetime',
        'proposed_end_date': 'datetime',
        'proposed_end_time': 'datetime',
        'private_street_status': 'PrivateStreetStatusResponse',
        'private_street_status_string': 'str'
    }

    attribute_map = {
        'private_street_reference_number': 'private_street_reference_number',
        'proposed_start_date': 'proposed_start_date',
        'proposed_start_time': 'proposed_start_time',
        'proposed_end_date': 'proposed_end_date',
        'proposed_end_time': 'proposed_end_time',
        'private_street_status': 'private_street_status',
        'private_street_status_string': 'private_street_status_string'
    }

    def __init__(self, private_street_reference_number=None, proposed_start_date=None, proposed_start_time=None, proposed_end_date=None, proposed_end_time=None, private_street_status=None, private_street_status_string=None):  # noqa: E501
        """PrivateStreetSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._private_street_reference_number = None
        self._proposed_start_date = None
        self._proposed_start_time = None
        self._proposed_end_date = None
        self._proposed_end_time = None
        self._private_street_status = None
        self._private_street_status_string = None
        self.discriminator = None
        self.private_street_reference_number = private_street_reference_number
        self.proposed_start_date = proposed_start_date
        if proposed_start_time is not None:
            self.proposed_start_time = proposed_start_time
        self.proposed_end_date = proposed_end_date
        if proposed_end_time is not None:
            self.proposed_end_time = proposed_end_time
        self.private_street_status = private_street_status
        self.private_street_status_string = private_street_status_string

    @property
    def private_street_reference_number(self):
        """Gets the private_street_reference_number of this PrivateStreetSummaryResponse.  # noqa: E501


        :return: The private_street_reference_number of this PrivateStreetSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._private_street_reference_number

    @private_street_reference_number.setter
    def private_street_reference_number(self, private_street_reference_number):
        """Sets the private_street_reference_number of this PrivateStreetSummaryResponse.


        :param private_street_reference_number: The private_street_reference_number of this PrivateStreetSummaryResponse.  # noqa: E501
        :type: str
        """
        if private_street_reference_number is None:
            raise ValueError("Invalid value for `private_street_reference_number`, must not be `None`")  # noqa: E501

        self._private_street_reference_number = private_street_reference_number

    @property
    def proposed_start_date(self):
        """Gets the proposed_start_date of this PrivateStreetSummaryResponse.  # noqa: E501


        :return: The proposed_start_date of this PrivateStreetSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_date

    @proposed_start_date.setter
    def proposed_start_date(self, proposed_start_date):
        """Sets the proposed_start_date of this PrivateStreetSummaryResponse.


        :param proposed_start_date: The proposed_start_date of this PrivateStreetSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_start_date is None:
            raise ValueError("Invalid value for `proposed_start_date`, must not be `None`")  # noqa: E501

        self._proposed_start_date = proposed_start_date

    @property
    def proposed_start_time(self):
        """Gets the proposed_start_time of this PrivateStreetSummaryResponse.  # noqa: E501


        :return: The proposed_start_time of this PrivateStreetSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_start_time

    @proposed_start_time.setter
    def proposed_start_time(self, proposed_start_time):
        """Sets the proposed_start_time of this PrivateStreetSummaryResponse.


        :param proposed_start_time: The proposed_start_time of this PrivateStreetSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_start_time = proposed_start_time

    @property
    def proposed_end_date(self):
        """Gets the proposed_end_date of this PrivateStreetSummaryResponse.  # noqa: E501


        :return: The proposed_end_date of this PrivateStreetSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_date

    @proposed_end_date.setter
    def proposed_end_date(self, proposed_end_date):
        """Sets the proposed_end_date of this PrivateStreetSummaryResponse.


        :param proposed_end_date: The proposed_end_date of this PrivateStreetSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if proposed_end_date is None:
            raise ValueError("Invalid value for `proposed_end_date`, must not be `None`")  # noqa: E501

        self._proposed_end_date = proposed_end_date

    @property
    def proposed_end_time(self):
        """Gets the proposed_end_time of this PrivateStreetSummaryResponse.  # noqa: E501


        :return: The proposed_end_time of this PrivateStreetSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._proposed_end_time

    @proposed_end_time.setter
    def proposed_end_time(self, proposed_end_time):
        """Sets the proposed_end_time of this PrivateStreetSummaryResponse.


        :param proposed_end_time: The proposed_end_time of this PrivateStreetSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._proposed_end_time = proposed_end_time

    @property
    def private_street_status(self):
        """Gets the private_street_status of this PrivateStreetSummaryResponse.  # noqa: E501


        :return: The private_street_status of this PrivateStreetSummaryResponse.  # noqa: E501
        :rtype: PrivateStreetStatusResponse
        """
        return self._private_street_status

    @private_street_status.setter
    def private_street_status(self, private_street_status):
        """Sets the private_street_status of this PrivateStreetSummaryResponse.


        :param private_street_status: The private_street_status of this PrivateStreetSummaryResponse.  # noqa: E501
        :type: PrivateStreetStatusResponse
        """
        if private_street_status is None:
            raise ValueError("Invalid value for `private_street_status`, must not be `None`")  # noqa: E501

        self._private_street_status = private_street_status

    @property
    def private_street_status_string(self):
        """Gets the private_street_status_string of this PrivateStreetSummaryResponse.  # noqa: E501


        :return: The private_street_status_string of this PrivateStreetSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._private_street_status_string

    @private_street_status_string.setter
    def private_street_status_string(self, private_street_status_string):
        """Sets the private_street_status_string of this PrivateStreetSummaryResponse.


        :param private_street_status_string: The private_street_status_string of this PrivateStreetSummaryResponse.  # noqa: E501
        :type: str
        """
        if private_street_status_string is None:
            raise ValueError("Invalid value for `private_street_status_string`, must not be `None`")  # noqa: E501

        self._private_street_status_string = private_street_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateStreetSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateStreetSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
