# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterialClassificationCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'highway_authority_swa_code': 'str',
        'material_classification_coordinates': 'object',
        'street_name': 'str',
        'town': 'str',
        'area_name': 'str',
        'usrn': 'float',
        'location_types': 'list[LocationType]',
        'file_id': 'float',
        'material_classification_classification': 'MaterialClassificationClassification',
        'hazardous_material_type': 'list[HazardousMaterialType]',
        'hazardous_material_type_other_description': 'str',
        'layer_affected': 'list[LayerAffected]',
        'sample_date': 'datetime',
        'location_description': 'str'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'highway_authority_swa_code': 'highway_authority_swa_code',
        'material_classification_coordinates': 'material_classification_coordinates',
        'street_name': 'street_name',
        'town': 'town',
        'area_name': 'area_name',
        'usrn': 'usrn',
        'location_types': 'location_types',
        'file_id': 'file_id',
        'material_classification_classification': 'material_classification_classification',
        'hazardous_material_type': 'hazardous_material_type',
        'hazardous_material_type_other_description': 'hazardous_material_type_other_description',
        'layer_affected': 'layer_affected',
        'sample_date': 'sample_date',
        'location_description': 'location_description'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, highway_authority_swa_code=None, material_classification_coordinates=None, street_name=None, town=None, area_name=None, usrn=None, location_types=None, file_id=None, material_classification_classification=None, hazardous_material_type=None, hazardous_material_type_other_description=None, layer_affected=None, sample_date=None, location_description=None):  # noqa: E501
        """MaterialClassificationCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._highway_authority_swa_code = None
        self._material_classification_coordinates = None
        self._street_name = None
        self._town = None
        self._area_name = None
        self._usrn = None
        self._location_types = None
        self._file_id = None
        self._material_classification_classification = None
        self._hazardous_material_type = None
        self._hazardous_material_type_other_description = None
        self._layer_affected = None
        self._sample_date = None
        self._location_description = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.highway_authority_swa_code = highway_authority_swa_code
        self.material_classification_coordinates = material_classification_coordinates
        if street_name is not None:
            self.street_name = street_name
        if town is not None:
            self.town = town
        if area_name is not None:
            self.area_name = area_name
        self.usrn = usrn
        self.location_types = location_types
        if file_id is not None:
            self.file_id = file_id
        self.material_classification_classification = material_classification_classification
        if hazardous_material_type is not None:
            self.hazardous_material_type = hazardous_material_type
        if hazardous_material_type_other_description is not None:
            self.hazardous_material_type_other_description = hazardous_material_type_other_description
        self.layer_affected = layer_affected
        self.sample_date = sample_date
        self.location_description = location_description

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this MaterialClassificationCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this MaterialClassificationCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this MaterialClassificationCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this MaterialClassificationCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def highway_authority_swa_code(self):
        """Gets the highway_authority_swa_code of this MaterialClassificationCreateRequest.  # noqa: E501

        Max length 4 characters  # noqa: E501

        :return: The highway_authority_swa_code of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority_swa_code

    @highway_authority_swa_code.setter
    def highway_authority_swa_code(self, highway_authority_swa_code):
        """Sets the highway_authority_swa_code of this MaterialClassificationCreateRequest.

        Max length 4 characters  # noqa: E501

        :param highway_authority_swa_code: The highway_authority_swa_code of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """
        if highway_authority_swa_code is None:
            raise ValueError("Invalid value for `highway_authority_swa_code`, must not be `None`")  # noqa: E501

        self._highway_authority_swa_code = highway_authority_swa_code

    @property
    def material_classification_coordinates(self):
        """Gets the material_classification_coordinates of this MaterialClassificationCreateRequest.  # noqa: E501

        Must be a GeoJSON geometry (using British National Grid easting and northing coordinate pairs) and must be a point Mandatory field Single GeoJSON Object  # noqa: E501

        :return: The material_classification_coordinates of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._material_classification_coordinates

    @material_classification_coordinates.setter
    def material_classification_coordinates(self, material_classification_coordinates):
        """Sets the material_classification_coordinates of this MaterialClassificationCreateRequest.

        Must be a GeoJSON geometry (using British National Grid easting and northing coordinate pairs) and must be a point Mandatory field Single GeoJSON Object  # noqa: E501

        :param material_classification_coordinates: The material_classification_coordinates of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: object
        """
        if material_classification_coordinates is None:
            raise ValueError("Invalid value for `material_classification_coordinates`, must not be `None`")  # noqa: E501

        self._material_classification_coordinates = material_classification_coordinates

    @property
    def street_name(self):
        """Gets the street_name of this MaterialClassificationCreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The street_name of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this MaterialClassificationCreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param street_name: The street_name of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def town(self):
        """Gets the town of this MaterialClassificationCreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The town of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this MaterialClassificationCreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param town: The town of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area_name(self):
        """Gets the area_name of this MaterialClassificationCreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The area_name of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this MaterialClassificationCreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param area_name: The area_name of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def usrn(self):
        """Gets the usrn of this MaterialClassificationCreateRequest.  # noqa: E501

        Is whole number between 1000001 and 99999999 inclusive See business rules section 1.4 - USRN  # noqa: E501

        :return: The usrn of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this MaterialClassificationCreateRequest.

        Is whole number between 1000001 and 99999999 inclusive See business rules section 1.4 - USRN  # noqa: E501

        :param usrn: The usrn of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def location_types(self):
        """Gets the location_types of this MaterialClassificationCreateRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The location_types of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: list[LocationType]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this MaterialClassificationCreateRequest.

        Array values must be unique  # noqa: E501

        :param location_types: The location_types of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: list[LocationType]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def file_id(self):
        """Gets the file_id of this MaterialClassificationCreateRequest.  # noqa: E501

        Can only be one file Limited to 10MBs  # noqa: E501

        :return: The file_id of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this MaterialClassificationCreateRequest.

        Can only be one file Limited to 10MBs  # noqa: E501

        :param file_id: The file_id of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: float
        """

        self._file_id = file_id

    @property
    def material_classification_classification(self):
        """Gets the material_classification_classification of this MaterialClassificationCreateRequest.  # noqa: E501


        :return: The material_classification_classification of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: MaterialClassificationClassification
        """
        return self._material_classification_classification

    @material_classification_classification.setter
    def material_classification_classification(self, material_classification_classification):
        """Sets the material_classification_classification of this MaterialClassificationCreateRequest.


        :param material_classification_classification: The material_classification_classification of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: MaterialClassificationClassification
        """
        if material_classification_classification is None:
            raise ValueError("Invalid value for `material_classification_classification`, must not be `None`")  # noqa: E501

        self._material_classification_classification = material_classification_classification

    @property
    def hazardous_material_type(self):
        """Gets the hazardous_material_type of this MaterialClassificationCreateRequest.  # noqa: E501

        Mandatory if material_classification_classification is hazardous  # noqa: E501

        :return: The hazardous_material_type of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: list[HazardousMaterialType]
        """
        return self._hazardous_material_type

    @hazardous_material_type.setter
    def hazardous_material_type(self, hazardous_material_type):
        """Sets the hazardous_material_type of this MaterialClassificationCreateRequest.

        Mandatory if material_classification_classification is hazardous  # noqa: E501

        :param hazardous_material_type: The hazardous_material_type of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: list[HazardousMaterialType]
        """

        self._hazardous_material_type = hazardous_material_type

    @property
    def hazardous_material_type_other_description(self):
        """Gets the hazardous_material_type_other_description of this MaterialClassificationCreateRequest.  # noqa: E501

        Mandatory if MaterialClassificationClassification is hazardous and hazardous_material_type is other Max 500 chars  # noqa: E501

        :return: The hazardous_material_type_other_description of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._hazardous_material_type_other_description

    @hazardous_material_type_other_description.setter
    def hazardous_material_type_other_description(self, hazardous_material_type_other_description):
        """Sets the hazardous_material_type_other_description of this MaterialClassificationCreateRequest.

        Mandatory if MaterialClassificationClassification is hazardous and hazardous_material_type is other Max 500 chars  # noqa: E501

        :param hazardous_material_type_other_description: The hazardous_material_type_other_description of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """

        self._hazardous_material_type_other_description = hazardous_material_type_other_description

    @property
    def layer_affected(self):
        """Gets the layer_affected of this MaterialClassificationCreateRequest.  # noqa: E501

        Mandatory  # noqa: E501

        :return: The layer_affected of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: list[LayerAffected]
        """
        return self._layer_affected

    @layer_affected.setter
    def layer_affected(self, layer_affected):
        """Sets the layer_affected of this MaterialClassificationCreateRequest.

        Mandatory  # noqa: E501

        :param layer_affected: The layer_affected of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: list[LayerAffected]
        """
        if layer_affected is None:
            raise ValueError("Invalid value for `layer_affected`, must not be `None`")  # noqa: E501

        self._layer_affected = layer_affected

    @property
    def sample_date(self):
        """Gets the sample_date of this MaterialClassificationCreateRequest.  # noqa: E501

        Mandatory Must be today or in the past  # noqa: E501

        :return: The sample_date of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_date

    @sample_date.setter
    def sample_date(self, sample_date):
        """Sets the sample_date of this MaterialClassificationCreateRequest.

        Mandatory Must be today or in the past  # noqa: E501

        :param sample_date: The sample_date of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: datetime
        """
        if sample_date is None:
            raise ValueError("Invalid value for `sample_date`, must not be `None`")  # noqa: E501

        self._sample_date = sample_date

    @property
    def location_description(self):
        """Gets the location_description of this MaterialClassificationCreateRequest.  # noqa: E501

        Mandatory  # noqa: E501

        :return: The location_description of this MaterialClassificationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this MaterialClassificationCreateRequest.

        Mandatory  # noqa: E501

        :param location_description: The location_description of this MaterialClassificationCreateRequest.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterialClassificationCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialClassificationCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
