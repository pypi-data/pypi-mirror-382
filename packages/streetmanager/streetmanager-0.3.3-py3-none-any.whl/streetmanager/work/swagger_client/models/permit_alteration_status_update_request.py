# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitAlterationStatusUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'alteration_status': 'AlterationStatus',
        'assessment_comments': 'str',
        'assessment_discount': 'float',
        'reasonable_period_end_date': 'datetime'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'alteration_status': 'alteration_status',
        'assessment_comments': 'assessment_comments',
        'assessment_discount': 'assessment_discount',
        'reasonable_period_end_date': 'reasonable_period_end_date'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, alteration_status=None, assessment_comments=None, assessment_discount=None, reasonable_period_end_date=None):  # noqa: E501
        """PermitAlterationStatusUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._alteration_status = None
        self._assessment_comments = None
        self._assessment_discount = None
        self._reasonable_period_end_date = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.alteration_status = alteration_status
        if assessment_comments is not None:
            self.assessment_comments = assessment_comments
        if assessment_discount is not None:
            self.assessment_discount = assessment_discount
        if reasonable_period_end_date is not None:
            self.reasonable_period_end_date = reasonable_period_end_date

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this PermitAlterationStatusUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this PermitAlterationStatusUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this PermitAlterationStatusUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this PermitAlterationStatusUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def alteration_status(self):
        """Gets the alteration_status of this PermitAlterationStatusUpdateRequest.  # noqa: E501


        :return: The alteration_status of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :rtype: AlterationStatus
        """
        return self._alteration_status

    @alteration_status.setter
    def alteration_status(self, alteration_status):
        """Sets the alteration_status of this PermitAlterationStatusUpdateRequest.


        :param alteration_status: The alteration_status of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :type: AlterationStatus
        """
        if alteration_status is None:
            raise ValueError("Invalid value for `alteration_status`, must not be `None`")  # noqa: E501

        self._alteration_status = alteration_status

    @property
    def assessment_comments(self):
        """Gets the assessment_comments of this PermitAlterationStatusUpdateRequest.  # noqa: E501

        Required if alteration_status = refused or granted_with_duration_challenge Max length 1500 characters  # noqa: E501

        :return: The assessment_comments of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._assessment_comments

    @assessment_comments.setter
    def assessment_comments(self, assessment_comments):
        """Sets the assessment_comments of this PermitAlterationStatusUpdateRequest.

        Required if alteration_status = refused or granted_with_duration_challenge Max length 1500 characters  # noqa: E501

        :param assessment_comments: The assessment_comments of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :type: str
        """

        self._assessment_comments = assessment_comments

    @property
    def assessment_discount(self):
        """Gets the assessment_discount of this PermitAlterationStatusUpdateRequest.  # noqa: E501

        Required if alteration_status = granted Is whole number between 0 and 100 inclusive  # noqa: E501

        :return: The assessment_discount of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :rtype: float
        """
        return self._assessment_discount

    @assessment_discount.setter
    def assessment_discount(self, assessment_discount):
        """Sets the assessment_discount of this PermitAlterationStatusUpdateRequest.

        Required if alteration_status = granted Is whole number between 0 and 100 inclusive  # noqa: E501

        :param assessment_discount: The assessment_discount of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :type: float
        """

        self._assessment_discount = assessment_discount

    @property
    def reasonable_period_end_date(self):
        """Gets the reasonable_period_end_date of this PermitAlterationStatusUpdateRequest.  # noqa: E501

        Required if alteration_status = granted_with_duration_challenge Must be on or after the permit proposed_end_date and before the alteration updated proposed_end_date  # noqa: E501

        :return: The reasonable_period_end_date of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._reasonable_period_end_date

    @reasonable_period_end_date.setter
    def reasonable_period_end_date(self, reasonable_period_end_date):
        """Sets the reasonable_period_end_date of this PermitAlterationStatusUpdateRequest.

        Required if alteration_status = granted_with_duration_challenge Must be on or after the permit proposed_end_date and before the alteration updated proposed_end_date  # noqa: E501

        :param reasonable_period_end_date: The reasonable_period_end_date of this PermitAlterationStatusUpdateRequest.  # noqa: E501
        :type: datetime
        """

        self._reasonable_period_end_date = reasonable_period_end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitAlterationStatusUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitAlterationStatusUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
