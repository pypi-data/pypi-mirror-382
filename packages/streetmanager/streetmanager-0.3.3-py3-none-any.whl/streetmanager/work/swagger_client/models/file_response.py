# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_id': 'float',
        'name': 'str',
        'created_date': 'datetime',
        'user_created_by': 'str',
        'swa_code': 'str',
        'organisation_name': 'str'
    }

    attribute_map = {
        'file_id': 'file_id',
        'name': 'name',
        'created_date': 'created_date',
        'user_created_by': 'user_created_by',
        'swa_code': 'swa_code',
        'organisation_name': 'organisation_name'
    }

    def __init__(self, file_id=None, name=None, created_date=None, user_created_by=None, swa_code=None, organisation_name=None):  # noqa: E501
        """FileResponse - a model defined in Swagger"""  # noqa: E501
        self._file_id = None
        self._name = None
        self._created_date = None
        self._user_created_by = None
        self._swa_code = None
        self._organisation_name = None
        self.discriminator = None
        self.file_id = file_id
        self.name = name
        self.created_date = created_date
        self.user_created_by = user_created_by
        self.swa_code = swa_code
        self.organisation_name = organisation_name

    @property
    def file_id(self):
        """Gets the file_id of this FileResponse.  # noqa: E501


        :return: The file_id of this FileResponse.  # noqa: E501
        :rtype: float
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileResponse.


        :param file_id: The file_id of this FileResponse.  # noqa: E501
        :type: float
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def name(self):
        """Gets the name of this FileResponse.  # noqa: E501


        :return: The name of this FileResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileResponse.


        :param name: The name of this FileResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def created_date(self):
        """Gets the created_date of this FileResponse.  # noqa: E501


        :return: The created_date of this FileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this FileResponse.


        :param created_date: The created_date of this FileResponse.  # noqa: E501
        :type: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def user_created_by(self):
        """Gets the user_created_by of this FileResponse.  # noqa: E501


        :return: The user_created_by of this FileResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_created_by

    @user_created_by.setter
    def user_created_by(self, user_created_by):
        """Sets the user_created_by of this FileResponse.


        :param user_created_by: The user_created_by of this FileResponse.  # noqa: E501
        :type: str
        """
        if user_created_by is None:
            raise ValueError("Invalid value for `user_created_by`, must not be `None`")  # noqa: E501

        self._user_created_by = user_created_by

    @property
    def swa_code(self):
        """Gets the swa_code of this FileResponse.  # noqa: E501


        :return: The swa_code of this FileResponse.  # noqa: E501
        :rtype: str
        """
        return self._swa_code

    @swa_code.setter
    def swa_code(self, swa_code):
        """Sets the swa_code of this FileResponse.


        :param swa_code: The swa_code of this FileResponse.  # noqa: E501
        :type: str
        """
        if swa_code is None:
            raise ValueError("Invalid value for `swa_code`, must not be `None`")  # noqa: E501

        self._swa_code = swa_code

    @property
    def organisation_name(self):
        """Gets the organisation_name of this FileResponse.  # noqa: E501


        :return: The organisation_name of this FileResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this FileResponse.


        :param organisation_name: The organisation_name of this FileResponse.  # noqa: E501
        :type: str
        """
        if organisation_name is None:
            raise ValueError("Invalid value for `organisation_name`, must not be `None`")  # noqa: E501

        self._organisation_name = organisation_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
