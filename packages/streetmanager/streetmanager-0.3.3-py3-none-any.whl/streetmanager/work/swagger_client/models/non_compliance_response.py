# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NonComplianceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'non_compliance_reference_number': 'str',
        'work_reference_number': 'str',
        'date_created': 'datetime',
        'non_compliance_status': 'NonComplianceStatusResponse',
        'non_compliance_status_string': 'str',
        'jsm_requested_by': 'str',
        'jsm_suggested_time': 'datetime',
        'jsm_status': 'AllOfNonComplianceResponseJsmStatus',
        'jsm_status_string': 'str',
        'promoter_response_status': 'AllOfNonComplianceResponsePromoterResponseStatus',
        'promoter_response_status_string': 'str',
        'promoter_response_update_date': 'datetime',
        'promoter_response_additional_details': 'str',
        'promoter_response_jsm_date': 'datetime',
        'ha_response_status': 'NonComplianceResponseStatusResponse',
        'ha_response_status_string': 'str',
        'ha_response_update_date': 'datetime',
        'ha_response_additional_details': 'str',
        'ha_response_jsm_date': 'datetime',
        'latest_inspection': 'InspectionResponse',
        'linked_inspections': 'list[InspectionSummaryResponse]',
        'linked_permits': 'list[PermitSummaryResponse]'
    }

    attribute_map = {
        'non_compliance_reference_number': 'non_compliance_reference_number',
        'work_reference_number': 'work_reference_number',
        'date_created': 'date_created',
        'non_compliance_status': 'non_compliance_status',
        'non_compliance_status_string': 'non_compliance_status_string',
        'jsm_requested_by': 'jsm_requested_by',
        'jsm_suggested_time': 'jsm_suggested_time',
        'jsm_status': 'jsm_status',
        'jsm_status_string': 'jsm_status_string',
        'promoter_response_status': 'promoter_response_status',
        'promoter_response_status_string': 'promoter_response_status_string',
        'promoter_response_update_date': 'promoter_response_update_date',
        'promoter_response_additional_details': 'promoter_response_additional_details',
        'promoter_response_jsm_date': 'promoter_response_jsm_date',
        'ha_response_status': 'ha_response_status',
        'ha_response_status_string': 'ha_response_status_string',
        'ha_response_update_date': 'ha_response_update_date',
        'ha_response_additional_details': 'ha_response_additional_details',
        'ha_response_jsm_date': 'ha_response_jsm_date',
        'latest_inspection': 'latest_inspection',
        'linked_inspections': 'linked_inspections',
        'linked_permits': 'linked_permits'
    }

    def __init__(self, non_compliance_reference_number=None, work_reference_number=None, date_created=None, non_compliance_status=None, non_compliance_status_string=None, jsm_requested_by=None, jsm_suggested_time=None, jsm_status=None, jsm_status_string=None, promoter_response_status=None, promoter_response_status_string=None, promoter_response_update_date=None, promoter_response_additional_details=None, promoter_response_jsm_date=None, ha_response_status=None, ha_response_status_string=None, ha_response_update_date=None, ha_response_additional_details=None, ha_response_jsm_date=None, latest_inspection=None, linked_inspections=None, linked_permits=None):  # noqa: E501
        """NonComplianceResponse - a model defined in Swagger"""  # noqa: E501
        self._non_compliance_reference_number = None
        self._work_reference_number = None
        self._date_created = None
        self._non_compliance_status = None
        self._non_compliance_status_string = None
        self._jsm_requested_by = None
        self._jsm_suggested_time = None
        self._jsm_status = None
        self._jsm_status_string = None
        self._promoter_response_status = None
        self._promoter_response_status_string = None
        self._promoter_response_update_date = None
        self._promoter_response_additional_details = None
        self._promoter_response_jsm_date = None
        self._ha_response_status = None
        self._ha_response_status_string = None
        self._ha_response_update_date = None
        self._ha_response_additional_details = None
        self._ha_response_jsm_date = None
        self._latest_inspection = None
        self._linked_inspections = None
        self._linked_permits = None
        self.discriminator = None
        self.non_compliance_reference_number = non_compliance_reference_number
        self.work_reference_number = work_reference_number
        self.date_created = date_created
        self.non_compliance_status = non_compliance_status
        self.non_compliance_status_string = non_compliance_status_string
        if jsm_requested_by is not None:
            self.jsm_requested_by = jsm_requested_by
        if jsm_suggested_time is not None:
            self.jsm_suggested_time = jsm_suggested_time
        if jsm_status is not None:
            self.jsm_status = jsm_status
        if jsm_status_string is not None:
            self.jsm_status_string = jsm_status_string
        if promoter_response_status is not None:
            self.promoter_response_status = promoter_response_status
        if promoter_response_status_string is not None:
            self.promoter_response_status_string = promoter_response_status_string
        if promoter_response_update_date is not None:
            self.promoter_response_update_date = promoter_response_update_date
        if promoter_response_additional_details is not None:
            self.promoter_response_additional_details = promoter_response_additional_details
        if promoter_response_jsm_date is not None:
            self.promoter_response_jsm_date = promoter_response_jsm_date
        self.ha_response_status = ha_response_status
        self.ha_response_status_string = ha_response_status_string
        if ha_response_update_date is not None:
            self.ha_response_update_date = ha_response_update_date
        if ha_response_additional_details is not None:
            self.ha_response_additional_details = ha_response_additional_details
        if ha_response_jsm_date is not None:
            self.ha_response_jsm_date = ha_response_jsm_date
        self.latest_inspection = latest_inspection
        self.linked_inspections = linked_inspections
        if linked_permits is not None:
            self.linked_permits = linked_permits

    @property
    def non_compliance_reference_number(self):
        """Gets the non_compliance_reference_number of this NonComplianceResponse.  # noqa: E501


        :return: The non_compliance_reference_number of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._non_compliance_reference_number

    @non_compliance_reference_number.setter
    def non_compliance_reference_number(self, non_compliance_reference_number):
        """Sets the non_compliance_reference_number of this NonComplianceResponse.


        :param non_compliance_reference_number: The non_compliance_reference_number of this NonComplianceResponse.  # noqa: E501
        :type: str
        """
        if non_compliance_reference_number is None:
            raise ValueError("Invalid value for `non_compliance_reference_number`, must not be `None`")  # noqa: E501

        self._non_compliance_reference_number = non_compliance_reference_number

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this NonComplianceResponse.  # noqa: E501


        :return: The work_reference_number of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this NonComplianceResponse.


        :param work_reference_number: The work_reference_number of this NonComplianceResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def date_created(self):
        """Gets the date_created of this NonComplianceResponse.  # noqa: E501


        :return: The date_created of this NonComplianceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this NonComplianceResponse.


        :param date_created: The date_created of this NonComplianceResponse.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def non_compliance_status(self):
        """Gets the non_compliance_status of this NonComplianceResponse.  # noqa: E501


        :return: The non_compliance_status of this NonComplianceResponse.  # noqa: E501
        :rtype: NonComplianceStatusResponse
        """
        return self._non_compliance_status

    @non_compliance_status.setter
    def non_compliance_status(self, non_compliance_status):
        """Sets the non_compliance_status of this NonComplianceResponse.


        :param non_compliance_status: The non_compliance_status of this NonComplianceResponse.  # noqa: E501
        :type: NonComplianceStatusResponse
        """
        if non_compliance_status is None:
            raise ValueError("Invalid value for `non_compliance_status`, must not be `None`")  # noqa: E501

        self._non_compliance_status = non_compliance_status

    @property
    def non_compliance_status_string(self):
        """Gets the non_compliance_status_string of this NonComplianceResponse.  # noqa: E501


        :return: The non_compliance_status_string of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._non_compliance_status_string

    @non_compliance_status_string.setter
    def non_compliance_status_string(self, non_compliance_status_string):
        """Sets the non_compliance_status_string of this NonComplianceResponse.


        :param non_compliance_status_string: The non_compliance_status_string of this NonComplianceResponse.  # noqa: E501
        :type: str
        """
        if non_compliance_status_string is None:
            raise ValueError("Invalid value for `non_compliance_status_string`, must not be `None`")  # noqa: E501

        self._non_compliance_status_string = non_compliance_status_string

    @property
    def jsm_requested_by(self):
        """Gets the jsm_requested_by of this NonComplianceResponse.  # noqa: E501


        :return: The jsm_requested_by of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._jsm_requested_by

    @jsm_requested_by.setter
    def jsm_requested_by(self, jsm_requested_by):
        """Sets the jsm_requested_by of this NonComplianceResponse.


        :param jsm_requested_by: The jsm_requested_by of this NonComplianceResponse.  # noqa: E501
        :type: str
        """

        self._jsm_requested_by = jsm_requested_by

    @property
    def jsm_suggested_time(self):
        """Gets the jsm_suggested_time of this NonComplianceResponse.  # noqa: E501


        :return: The jsm_suggested_time of this NonComplianceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._jsm_suggested_time

    @jsm_suggested_time.setter
    def jsm_suggested_time(self, jsm_suggested_time):
        """Sets the jsm_suggested_time of this NonComplianceResponse.


        :param jsm_suggested_time: The jsm_suggested_time of this NonComplianceResponse.  # noqa: E501
        :type: datetime
        """

        self._jsm_suggested_time = jsm_suggested_time

    @property
    def jsm_status(self):
        """Gets the jsm_status of this NonComplianceResponse.  # noqa: E501


        :return: The jsm_status of this NonComplianceResponse.  # noqa: E501
        :rtype: AllOfNonComplianceResponseJsmStatus
        """
        return self._jsm_status

    @jsm_status.setter
    def jsm_status(self, jsm_status):
        """Sets the jsm_status of this NonComplianceResponse.


        :param jsm_status: The jsm_status of this NonComplianceResponse.  # noqa: E501
        :type: AllOfNonComplianceResponseJsmStatus
        """

        self._jsm_status = jsm_status

    @property
    def jsm_status_string(self):
        """Gets the jsm_status_string of this NonComplianceResponse.  # noqa: E501


        :return: The jsm_status_string of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._jsm_status_string

    @jsm_status_string.setter
    def jsm_status_string(self, jsm_status_string):
        """Sets the jsm_status_string of this NonComplianceResponse.


        :param jsm_status_string: The jsm_status_string of this NonComplianceResponse.  # noqa: E501
        :type: str
        """

        self._jsm_status_string = jsm_status_string

    @property
    def promoter_response_status(self):
        """Gets the promoter_response_status of this NonComplianceResponse.  # noqa: E501


        :return: The promoter_response_status of this NonComplianceResponse.  # noqa: E501
        :rtype: AllOfNonComplianceResponsePromoterResponseStatus
        """
        return self._promoter_response_status

    @promoter_response_status.setter
    def promoter_response_status(self, promoter_response_status):
        """Sets the promoter_response_status of this NonComplianceResponse.


        :param promoter_response_status: The promoter_response_status of this NonComplianceResponse.  # noqa: E501
        :type: AllOfNonComplianceResponsePromoterResponseStatus
        """

        self._promoter_response_status = promoter_response_status

    @property
    def promoter_response_status_string(self):
        """Gets the promoter_response_status_string of this NonComplianceResponse.  # noqa: E501


        :return: The promoter_response_status_string of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_response_status_string

    @promoter_response_status_string.setter
    def promoter_response_status_string(self, promoter_response_status_string):
        """Sets the promoter_response_status_string of this NonComplianceResponse.


        :param promoter_response_status_string: The promoter_response_status_string of this NonComplianceResponse.  # noqa: E501
        :type: str
        """

        self._promoter_response_status_string = promoter_response_status_string

    @property
    def promoter_response_update_date(self):
        """Gets the promoter_response_update_date of this NonComplianceResponse.  # noqa: E501


        :return: The promoter_response_update_date of this NonComplianceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._promoter_response_update_date

    @promoter_response_update_date.setter
    def promoter_response_update_date(self, promoter_response_update_date):
        """Sets the promoter_response_update_date of this NonComplianceResponse.


        :param promoter_response_update_date: The promoter_response_update_date of this NonComplianceResponse.  # noqa: E501
        :type: datetime
        """

        self._promoter_response_update_date = promoter_response_update_date

    @property
    def promoter_response_additional_details(self):
        """Gets the promoter_response_additional_details of this NonComplianceResponse.  # noqa: E501


        :return: The promoter_response_additional_details of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_response_additional_details

    @promoter_response_additional_details.setter
    def promoter_response_additional_details(self, promoter_response_additional_details):
        """Sets the promoter_response_additional_details of this NonComplianceResponse.


        :param promoter_response_additional_details: The promoter_response_additional_details of this NonComplianceResponse.  # noqa: E501
        :type: str
        """

        self._promoter_response_additional_details = promoter_response_additional_details

    @property
    def promoter_response_jsm_date(self):
        """Gets the promoter_response_jsm_date of this NonComplianceResponse.  # noqa: E501


        :return: The promoter_response_jsm_date of this NonComplianceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._promoter_response_jsm_date

    @promoter_response_jsm_date.setter
    def promoter_response_jsm_date(self, promoter_response_jsm_date):
        """Sets the promoter_response_jsm_date of this NonComplianceResponse.


        :param promoter_response_jsm_date: The promoter_response_jsm_date of this NonComplianceResponse.  # noqa: E501
        :type: datetime
        """

        self._promoter_response_jsm_date = promoter_response_jsm_date

    @property
    def ha_response_status(self):
        """Gets the ha_response_status of this NonComplianceResponse.  # noqa: E501


        :return: The ha_response_status of this NonComplianceResponse.  # noqa: E501
        :rtype: NonComplianceResponseStatusResponse
        """
        return self._ha_response_status

    @ha_response_status.setter
    def ha_response_status(self, ha_response_status):
        """Sets the ha_response_status of this NonComplianceResponse.


        :param ha_response_status: The ha_response_status of this NonComplianceResponse.  # noqa: E501
        :type: NonComplianceResponseStatusResponse
        """
        if ha_response_status is None:
            raise ValueError("Invalid value for `ha_response_status`, must not be `None`")  # noqa: E501

        self._ha_response_status = ha_response_status

    @property
    def ha_response_status_string(self):
        """Gets the ha_response_status_string of this NonComplianceResponse.  # noqa: E501


        :return: The ha_response_status_string of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_response_status_string

    @ha_response_status_string.setter
    def ha_response_status_string(self, ha_response_status_string):
        """Sets the ha_response_status_string of this NonComplianceResponse.


        :param ha_response_status_string: The ha_response_status_string of this NonComplianceResponse.  # noqa: E501
        :type: str
        """
        if ha_response_status_string is None:
            raise ValueError("Invalid value for `ha_response_status_string`, must not be `None`")  # noqa: E501

        self._ha_response_status_string = ha_response_status_string

    @property
    def ha_response_update_date(self):
        """Gets the ha_response_update_date of this NonComplianceResponse.  # noqa: E501


        :return: The ha_response_update_date of this NonComplianceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._ha_response_update_date

    @ha_response_update_date.setter
    def ha_response_update_date(self, ha_response_update_date):
        """Sets the ha_response_update_date of this NonComplianceResponse.


        :param ha_response_update_date: The ha_response_update_date of this NonComplianceResponse.  # noqa: E501
        :type: datetime
        """

        self._ha_response_update_date = ha_response_update_date

    @property
    def ha_response_additional_details(self):
        """Gets the ha_response_additional_details of this NonComplianceResponse.  # noqa: E501


        :return: The ha_response_additional_details of this NonComplianceResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_response_additional_details

    @ha_response_additional_details.setter
    def ha_response_additional_details(self, ha_response_additional_details):
        """Sets the ha_response_additional_details of this NonComplianceResponse.


        :param ha_response_additional_details: The ha_response_additional_details of this NonComplianceResponse.  # noqa: E501
        :type: str
        """

        self._ha_response_additional_details = ha_response_additional_details

    @property
    def ha_response_jsm_date(self):
        """Gets the ha_response_jsm_date of this NonComplianceResponse.  # noqa: E501


        :return: The ha_response_jsm_date of this NonComplianceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._ha_response_jsm_date

    @ha_response_jsm_date.setter
    def ha_response_jsm_date(self, ha_response_jsm_date):
        """Sets the ha_response_jsm_date of this NonComplianceResponse.


        :param ha_response_jsm_date: The ha_response_jsm_date of this NonComplianceResponse.  # noqa: E501
        :type: datetime
        """

        self._ha_response_jsm_date = ha_response_jsm_date

    @property
    def latest_inspection(self):
        """Gets the latest_inspection of this NonComplianceResponse.  # noqa: E501


        :return: The latest_inspection of this NonComplianceResponse.  # noqa: E501
        :rtype: InspectionResponse
        """
        return self._latest_inspection

    @latest_inspection.setter
    def latest_inspection(self, latest_inspection):
        """Sets the latest_inspection of this NonComplianceResponse.


        :param latest_inspection: The latest_inspection of this NonComplianceResponse.  # noqa: E501
        :type: InspectionResponse
        """
        if latest_inspection is None:
            raise ValueError("Invalid value for `latest_inspection`, must not be `None`")  # noqa: E501

        self._latest_inspection = latest_inspection

    @property
    def linked_inspections(self):
        """Gets the linked_inspections of this NonComplianceResponse.  # noqa: E501


        :return: The linked_inspections of this NonComplianceResponse.  # noqa: E501
        :rtype: list[InspectionSummaryResponse]
        """
        return self._linked_inspections

    @linked_inspections.setter
    def linked_inspections(self, linked_inspections):
        """Sets the linked_inspections of this NonComplianceResponse.


        :param linked_inspections: The linked_inspections of this NonComplianceResponse.  # noqa: E501
        :type: list[InspectionSummaryResponse]
        """
        if linked_inspections is None:
            raise ValueError("Invalid value for `linked_inspections`, must not be `None`")  # noqa: E501

        self._linked_inspections = linked_inspections

    @property
    def linked_permits(self):
        """Gets the linked_permits of this NonComplianceResponse.  # noqa: E501


        :return: The linked_permits of this NonComplianceResponse.  # noqa: E501
        :rtype: list[PermitSummaryResponse]
        """
        return self._linked_permits

    @linked_permits.setter
    def linked_permits(self, linked_permits):
        """Sets the linked_permits of this NonComplianceResponse.


        :param linked_permits: The linked_permits of this NonComplianceResponse.  # noqa: E501
        :type: list[PermitSummaryResponse]
        """

        self._linked_permits = linked_permits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NonComplianceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonComplianceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
