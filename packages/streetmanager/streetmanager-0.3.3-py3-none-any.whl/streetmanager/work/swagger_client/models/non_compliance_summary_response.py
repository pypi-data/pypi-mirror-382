# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NonComplianceSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'non_compliance_reference_number': 'str',
        'non_compliance_date': 'datetime',
        'non_compliance_status': 'NonComplianceStatusResponse',
        'non_compliance_status_string': 'str'
    }

    attribute_map = {
        'non_compliance_reference_number': 'non_compliance_reference_number',
        'non_compliance_date': 'non_compliance_date',
        'non_compliance_status': 'non_compliance_status',
        'non_compliance_status_string': 'non_compliance_status_string'
    }

    def __init__(self, non_compliance_reference_number=None, non_compliance_date=None, non_compliance_status=None, non_compliance_status_string=None):  # noqa: E501
        """NonComplianceSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._non_compliance_reference_number = None
        self._non_compliance_date = None
        self._non_compliance_status = None
        self._non_compliance_status_string = None
        self.discriminator = None
        self.non_compliance_reference_number = non_compliance_reference_number
        self.non_compliance_date = non_compliance_date
        self.non_compliance_status = non_compliance_status
        self.non_compliance_status_string = non_compliance_status_string

    @property
    def non_compliance_reference_number(self):
        """Gets the non_compliance_reference_number of this NonComplianceSummaryResponse.  # noqa: E501


        :return: The non_compliance_reference_number of this NonComplianceSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._non_compliance_reference_number

    @non_compliance_reference_number.setter
    def non_compliance_reference_number(self, non_compliance_reference_number):
        """Sets the non_compliance_reference_number of this NonComplianceSummaryResponse.


        :param non_compliance_reference_number: The non_compliance_reference_number of this NonComplianceSummaryResponse.  # noqa: E501
        :type: str
        """
        if non_compliance_reference_number is None:
            raise ValueError("Invalid value for `non_compliance_reference_number`, must not be `None`")  # noqa: E501

        self._non_compliance_reference_number = non_compliance_reference_number

    @property
    def non_compliance_date(self):
        """Gets the non_compliance_date of this NonComplianceSummaryResponse.  # noqa: E501


        :return: The non_compliance_date of this NonComplianceSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._non_compliance_date

    @non_compliance_date.setter
    def non_compliance_date(self, non_compliance_date):
        """Sets the non_compliance_date of this NonComplianceSummaryResponse.


        :param non_compliance_date: The non_compliance_date of this NonComplianceSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if non_compliance_date is None:
            raise ValueError("Invalid value for `non_compliance_date`, must not be `None`")  # noqa: E501

        self._non_compliance_date = non_compliance_date

    @property
    def non_compliance_status(self):
        """Gets the non_compliance_status of this NonComplianceSummaryResponse.  # noqa: E501


        :return: The non_compliance_status of this NonComplianceSummaryResponse.  # noqa: E501
        :rtype: NonComplianceStatusResponse
        """
        return self._non_compliance_status

    @non_compliance_status.setter
    def non_compliance_status(self, non_compliance_status):
        """Sets the non_compliance_status of this NonComplianceSummaryResponse.


        :param non_compliance_status: The non_compliance_status of this NonComplianceSummaryResponse.  # noqa: E501
        :type: NonComplianceStatusResponse
        """
        if non_compliance_status is None:
            raise ValueError("Invalid value for `non_compliance_status`, must not be `None`")  # noqa: E501

        self._non_compliance_status = non_compliance_status

    @property
    def non_compliance_status_string(self):
        """Gets the non_compliance_status_string of this NonComplianceSummaryResponse.  # noqa: E501


        :return: The non_compliance_status_string of this NonComplianceSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._non_compliance_status_string

    @non_compliance_status_string.setter
    def non_compliance_status_string(self, non_compliance_status_string):
        """Sets the non_compliance_status_string of this NonComplianceSummaryResponse.


        :param non_compliance_status_string: The non_compliance_status_string of this NonComplianceSummaryResponse.  # noqa: E501
        :type: str
        """
        if non_compliance_status_string is None:
            raise ValueError("Invalid value for `non_compliance_status_string`, must not be `None`")  # noqa: E501

        self._non_compliance_status_string = non_compliance_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NonComplianceSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonComplianceSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
