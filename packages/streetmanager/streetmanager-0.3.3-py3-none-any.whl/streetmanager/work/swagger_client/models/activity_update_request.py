# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'activity_name': 'str',
        'activity_activity_type': 'ActivityActivityType',
        'activity_type_details': 'str',
        'contact_name': 'str',
        'contact_details': 'str',
        'start_date': 'datetime',
        'start_time': 'datetime',
        'end_date': 'datetime',
        'end_time': 'datetime',
        'location_types': 'list[LocationType]',
        'activity_location_description': 'str',
        'traffic_management_type': 'TrafficManagementType',
        'collaborative_working': 'bool',
        'additional_info': 'str'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'activity_name': 'activity_name',
        'activity_activity_type': 'activity_activity_type',
        'activity_type_details': 'activity_type_details',
        'contact_name': 'contact_name',
        'contact_details': 'contact_details',
        'start_date': 'start_date',
        'start_time': 'start_time',
        'end_date': 'end_date',
        'end_time': 'end_time',
        'location_types': 'location_types',
        'activity_location_description': 'activity_location_description',
        'traffic_management_type': 'traffic_management_type',
        'collaborative_working': 'collaborative_working',
        'additional_info': 'additional_info'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, activity_name=None, activity_activity_type=None, activity_type_details=None, contact_name=None, contact_details=None, start_date=None, start_time=None, end_date=None, end_time=None, location_types=None, activity_location_description=None, traffic_management_type=None, collaborative_working=None, additional_info=None):  # noqa: E501
        """ActivityUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._activity_name = None
        self._activity_activity_type = None
        self._activity_type_details = None
        self._contact_name = None
        self._contact_details = None
        self._start_date = None
        self._start_time = None
        self._end_date = None
        self._end_time = None
        self._location_types = None
        self._activity_location_description = None
        self._traffic_management_type = None
        self._collaborative_working = None
        self._additional_info = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.activity_name = activity_name
        self.activity_activity_type = activity_activity_type
        if activity_type_details is not None:
            self.activity_type_details = activity_type_details
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_details is not None:
            self.contact_details = contact_details
        self.start_date = start_date
        if start_time is not None:
            self.start_time = start_time
        self.end_date = end_date
        if end_time is not None:
            self.end_time = end_time
        self.location_types = location_types
        self.activity_location_description = activity_location_description
        self.traffic_management_type = traffic_management_type
        self.collaborative_working = collaborative_working
        if additional_info is not None:
            self.additional_info = additional_info

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this ActivityUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this ActivityUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this ActivityUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this ActivityUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def activity_name(self):
        """Gets the activity_name of this ActivityUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The activity_name of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this ActivityUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param activity_name: The activity_name of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """
        if activity_name is None:
            raise ValueError("Invalid value for `activity_name`, must not be `None`")  # noqa: E501

        self._activity_name = activity_name

    @property
    def activity_activity_type(self):
        """Gets the activity_activity_type of this ActivityUpdateRequest.  # noqa: E501


        :return: The activity_activity_type of this ActivityUpdateRequest.  # noqa: E501
        :rtype: ActivityActivityType
        """
        return self._activity_activity_type

    @activity_activity_type.setter
    def activity_activity_type(self, activity_activity_type):
        """Sets the activity_activity_type of this ActivityUpdateRequest.


        :param activity_activity_type: The activity_activity_type of this ActivityUpdateRequest.  # noqa: E501
        :type: ActivityActivityType
        """
        if activity_activity_type is None:
            raise ValueError("Invalid value for `activity_activity_type`, must not be `None`")  # noqa: E501

        self._activity_activity_type = activity_activity_type

    @property
    def activity_type_details(self):
        """Gets the activity_type_details of this ActivityUpdateRequest.  # noqa: E501

        Required if activity_activity_type = other Max length 100 characters  # noqa: E501

        :return: The activity_type_details of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._activity_type_details

    @activity_type_details.setter
    def activity_type_details(self, activity_type_details):
        """Sets the activity_type_details of this ActivityUpdateRequest.

        Required if activity_activity_type = other Max length 100 characters  # noqa: E501

        :param activity_type_details: The activity_type_details of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """

        self._activity_type_details = activity_type_details

    @property
    def contact_name(self):
        """Gets the contact_name of this ActivityUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The contact_name of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this ActivityUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param contact_name: The contact_name of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_details(self):
        """Gets the contact_details of this ActivityUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The contact_details of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this ActivityUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param contact_details: The contact_details of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """

        self._contact_details = contact_details

    @property
    def start_date(self):
        """Gets the start_date of this ActivityUpdateRequest.  # noqa: E501

        Must be in the future  # noqa: E501

        :return: The start_date of this ActivityUpdateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ActivityUpdateRequest.

        Must be in the future  # noqa: E501

        :param start_date: The start_date of this ActivityUpdateRequest.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def start_time(self):
        """Gets the start_time of this ActivityUpdateRequest.  # noqa: E501

        Must be in the future  # noqa: E501

        :return: The start_time of this ActivityUpdateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ActivityUpdateRequest.

        Must be in the future  # noqa: E501

        :param start_time: The start_time of this ActivityUpdateRequest.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_date(self):
        """Gets the end_date of this ActivityUpdateRequest.  # noqa: E501

        Must be after start_date  # noqa: E501

        :return: The end_date of this ActivityUpdateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ActivityUpdateRequest.

        Must be after start_date  # noqa: E501

        :param end_date: The end_date of this ActivityUpdateRequest.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def end_time(self):
        """Gets the end_time of this ActivityUpdateRequest.  # noqa: E501

        Must be after start_date  # noqa: E501

        :return: The end_time of this ActivityUpdateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ActivityUpdateRequest.

        Must be after start_date  # noqa: E501

        :param end_time: The end_time of this ActivityUpdateRequest.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def location_types(self):
        """Gets the location_types of this ActivityUpdateRequest.  # noqa: E501

        Array values must be unique  # noqa: E501

        :return: The location_types of this ActivityUpdateRequest.  # noqa: E501
        :rtype: list[LocationType]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this ActivityUpdateRequest.

        Array values must be unique  # noqa: E501

        :param location_types: The location_types of this ActivityUpdateRequest.  # noqa: E501
        :type: list[LocationType]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def activity_location_description(self):
        """Gets the activity_location_description of this ActivityUpdateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The activity_location_description of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._activity_location_description

    @activity_location_description.setter
    def activity_location_description(self, activity_location_description):
        """Sets the activity_location_description of this ActivityUpdateRequest.

        Max length 500 characters  # noqa: E501

        :param activity_location_description: The activity_location_description of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """
        if activity_location_description is None:
            raise ValueError("Invalid value for `activity_location_description`, must not be `None`")  # noqa: E501

        self._activity_location_description = activity_location_description

    @property
    def traffic_management_type(self):
        """Gets the traffic_management_type of this ActivityUpdateRequest.  # noqa: E501


        :return: The traffic_management_type of this ActivityUpdateRequest.  # noqa: E501
        :rtype: TrafficManagementType
        """
        return self._traffic_management_type

    @traffic_management_type.setter
    def traffic_management_type(self, traffic_management_type):
        """Sets the traffic_management_type of this ActivityUpdateRequest.


        :param traffic_management_type: The traffic_management_type of this ActivityUpdateRequest.  # noqa: E501
        :type: TrafficManagementType
        """
        if traffic_management_type is None:
            raise ValueError("Invalid value for `traffic_management_type`, must not be `None`")  # noqa: E501

        self._traffic_management_type = traffic_management_type

    @property
    def collaborative_working(self):
        """Gets the collaborative_working of this ActivityUpdateRequest.  # noqa: E501


        :return: The collaborative_working of this ActivityUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._collaborative_working

    @collaborative_working.setter
    def collaborative_working(self, collaborative_working):
        """Sets the collaborative_working of this ActivityUpdateRequest.


        :param collaborative_working: The collaborative_working of this ActivityUpdateRequest.  # noqa: E501
        :type: bool
        """
        if collaborative_working is None:
            raise ValueError("Invalid value for `collaborative_working`, must not be `None`")  # noqa: E501

        self._collaborative_working = collaborative_working

    @property
    def additional_info(self):
        """Gets the additional_info of this ActivityUpdateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The additional_info of this ActivityUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this ActivityUpdateRequest.

        Max length 500 characters  # noqa: E501

        :param additional_info: The additional_info of this ActivityUpdateRequest.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
