# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FPNCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'fpn_evidence': 'bool',
        'file_ids': 'list[float]',
        'offence_date': 'datetime',
        'offence_code': 'OffenceCode',
        'offence_details': 'str',
        'authorised_officer': 'str',
        'officer_contact_details': 'str',
        'officer_address': 'str',
        'representations_contact': 'str',
        'representations_contact_address': 'str',
        'payment_methods': 'list[PaymentMethod]',
        'permit_reference_number': 'str'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'fpn_evidence': 'fpn_evidence',
        'file_ids': 'file_ids',
        'offence_date': 'offence_date',
        'offence_code': 'offence_code',
        'offence_details': 'offence_details',
        'authorised_officer': 'authorised_officer',
        'officer_contact_details': 'officer_contact_details',
        'officer_address': 'officer_address',
        'representations_contact': 'representations_contact',
        'representations_contact_address': 'representations_contact_address',
        'payment_methods': 'payment_methods',
        'permit_reference_number': 'permit_reference_number'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, fpn_evidence=None, file_ids=None, offence_date=None, offence_code=None, offence_details=None, authorised_officer=None, officer_contact_details=None, officer_address=None, representations_contact=None, representations_contact_address=None, payment_methods=None, permit_reference_number=None):  # noqa: E501
        """FPNCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._fpn_evidence = None
        self._file_ids = None
        self._offence_date = None
        self._offence_code = None
        self._offence_details = None
        self._authorised_officer = None
        self._officer_contact_details = None
        self._officer_address = None
        self._representations_contact = None
        self._representations_contact_address = None
        self._payment_methods = None
        self._permit_reference_number = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.fpn_evidence = fpn_evidence
        if file_ids is not None:
            self.file_ids = file_ids
        self.offence_date = offence_date
        self.offence_code = offence_code
        self.offence_details = offence_details
        self.authorised_officer = authorised_officer
        self.officer_contact_details = officer_contact_details
        self.officer_address = officer_address
        self.representations_contact = representations_contact
        self.representations_contact_address = representations_contact_address
        self.payment_methods = payment_methods
        if permit_reference_number is not None:
            self.permit_reference_number = permit_reference_number

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this FPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this FPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this FPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this FPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this FPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this FPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def fpn_evidence(self):
        """Gets the fpn_evidence of this FPNCreateRequest.  # noqa: E501

        Whether FPN evidence has been supplied  # noqa: E501

        :return: The fpn_evidence of this FPNCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._fpn_evidence

    @fpn_evidence.setter
    def fpn_evidence(self, fpn_evidence):
        """Sets the fpn_evidence of this FPNCreateRequest.

        Whether FPN evidence has been supplied  # noqa: E501

        :param fpn_evidence: The fpn_evidence of this FPNCreateRequest.  # noqa: E501
        :type: bool
        """
        if fpn_evidence is None:
            raise ValueError("Invalid value for `fpn_evidence`, must not be `None`")  # noqa: E501

        self._fpn_evidence = fpn_evidence

    @property
    def file_ids(self):
        """Gets the file_ids of this FPNCreateRequest.  # noqa: E501

        Required if fpn_evidence = true Array values must be unique Must not contain null or undefined values A file_id can only be associated with one section of Street Manager See API specification Resource Guide > Works API > File upload for more information  # noqa: E501

        :return: The file_ids of this FPNCreateRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this FPNCreateRequest.

        Required if fpn_evidence = true Array values must be unique Must not contain null or undefined values A file_id can only be associated with one section of Street Manager See API specification Resource Guide > Works API > File upload for more information  # noqa: E501

        :param file_ids: The file_ids of this FPNCreateRequest.  # noqa: E501
        :type: list[float]
        """

        self._file_ids = file_ids

    @property
    def offence_date(self):
        """Gets the offence_date of this FPNCreateRequest.  # noqa: E501

        offence_date must be in the past  # noqa: E501

        :return: The offence_date of this FPNCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._offence_date

    @offence_date.setter
    def offence_date(self, offence_date):
        """Sets the offence_date of this FPNCreateRequest.

        offence_date must be in the past  # noqa: E501

        :param offence_date: The offence_date of this FPNCreateRequest.  # noqa: E501
        :type: datetime
        """
        if offence_date is None:
            raise ValueError("Invalid value for `offence_date`, must not be `None`")  # noqa: E501

        self._offence_date = offence_date

    @property
    def offence_code(self):
        """Gets the offence_code of this FPNCreateRequest.  # noqa: E501


        :return: The offence_code of this FPNCreateRequest.  # noqa: E501
        :rtype: OffenceCode
        """
        return self._offence_code

    @offence_code.setter
    def offence_code(self, offence_code):
        """Sets the offence_code of this FPNCreateRequest.


        :param offence_code: The offence_code of this FPNCreateRequest.  # noqa: E501
        :type: OffenceCode
        """
        if offence_code is None:
            raise ValueError("Invalid value for `offence_code`, must not be `None`")  # noqa: E501

        self._offence_code = offence_code

    @property
    def offence_details(self):
        """Gets the offence_details of this FPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The offence_details of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._offence_details

    @offence_details.setter
    def offence_details(self, offence_details):
        """Sets the offence_details of this FPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param offence_details: The offence_details of this FPNCreateRequest.  # noqa: E501
        :type: str
        """
        if offence_details is None:
            raise ValueError("Invalid value for `offence_details`, must not be `None`")  # noqa: E501

        self._offence_details = offence_details

    @property
    def authorised_officer(self):
        """Gets the authorised_officer of this FPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The authorised_officer of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._authorised_officer

    @authorised_officer.setter
    def authorised_officer(self, authorised_officer):
        """Sets the authorised_officer of this FPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param authorised_officer: The authorised_officer of this FPNCreateRequest.  # noqa: E501
        :type: str
        """
        if authorised_officer is None:
            raise ValueError("Invalid value for `authorised_officer`, must not be `None`")  # noqa: E501

        self._authorised_officer = authorised_officer

    @property
    def officer_contact_details(self):
        """Gets the officer_contact_details of this FPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The officer_contact_details of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._officer_contact_details

    @officer_contact_details.setter
    def officer_contact_details(self, officer_contact_details):
        """Sets the officer_contact_details of this FPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param officer_contact_details: The officer_contact_details of this FPNCreateRequest.  # noqa: E501
        :type: str
        """
        if officer_contact_details is None:
            raise ValueError("Invalid value for `officer_contact_details`, must not be `None`")  # noqa: E501

        self._officer_contact_details = officer_contact_details

    @property
    def officer_address(self):
        """Gets the officer_address of this FPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The officer_address of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._officer_address

    @officer_address.setter
    def officer_address(self, officer_address):
        """Sets the officer_address of this FPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param officer_address: The officer_address of this FPNCreateRequest.  # noqa: E501
        :type: str
        """
        if officer_address is None:
            raise ValueError("Invalid value for `officer_address`, must not be `None`")  # noqa: E501

        self._officer_address = officer_address

    @property
    def representations_contact(self):
        """Gets the representations_contact of this FPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The representations_contact of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._representations_contact

    @representations_contact.setter
    def representations_contact(self, representations_contact):
        """Sets the representations_contact of this FPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param representations_contact: The representations_contact of this FPNCreateRequest.  # noqa: E501
        :type: str
        """
        if representations_contact is None:
            raise ValueError("Invalid value for `representations_contact`, must not be `None`")  # noqa: E501

        self._representations_contact = representations_contact

    @property
    def representations_contact_address(self):
        """Gets the representations_contact_address of this FPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The representations_contact_address of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._representations_contact_address

    @representations_contact_address.setter
    def representations_contact_address(self, representations_contact_address):
        """Sets the representations_contact_address of this FPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param representations_contact_address: The representations_contact_address of this FPNCreateRequest.  # noqa: E501
        :type: str
        """
        if representations_contact_address is None:
            raise ValueError("Invalid value for `representations_contact_address`, must not be `None`")  # noqa: E501

        self._representations_contact_address = representations_contact_address

    @property
    def payment_methods(self):
        """Gets the payment_methods of this FPNCreateRequest.  # noqa: E501


        :return: The payment_methods of this FPNCreateRequest.  # noqa: E501
        :rtype: list[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this FPNCreateRequest.


        :param payment_methods: The payment_methods of this FPNCreateRequest.  # noqa: E501
        :type: list[PaymentMethod]
        """
        if payment_methods is None:
            raise ValueError("Invalid value for `payment_methods`, must not be `None`")  # noqa: E501

        self._payment_methods = payment_methods

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this FPNCreateRequest.  # noqa: E501

        The permit_reference_number of the associated permit  # noqa: E501

        :return: The permit_reference_number of this FPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this FPNCreateRequest.

        The permit_reference_number of the associated permit  # noqa: E501

        :param permit_reference_number: The permit_reference_number of this FPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._permit_reference_number = permit_reference_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FPNCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FPNCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
