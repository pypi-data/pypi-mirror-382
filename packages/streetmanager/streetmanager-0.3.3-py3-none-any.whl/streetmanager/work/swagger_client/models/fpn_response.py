# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FPNResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fpn_reference_number': 'str',
        'fpn_offence_type': 'OffenceCodeResponse',
        'fpn_offence_type_string': 'str',
        'issue_date_time': 'datetime',
        'fpn_status': 'FPNStatusResponse',
        'fpn_status_string': 'str',
        'status_changed_date': 'datetime',
        'location': 'str',
        'offence_date': 'datetime',
        'offence_details': 'str',
        'authorised_officer': 'str',
        'officer_contact_details': 'str',
        'officer_address': 'str',
        'representations_contact': 'str',
        'representations_contact_address': 'str',
        'payment_methods': 'list[PaymentMethodResponse]',
        'payment_methods_string': 'list[str]',
        'work_reference_number': 'str',
        'promoter_organisation': 'str',
        'ha_organisation': 'str',
        'files': 'list[FileSummaryResponse]',
        'permit_reference_number': 'str'
    }

    attribute_map = {
        'fpn_reference_number': 'fpn_reference_number',
        'fpn_offence_type': 'fpn_offence_type',
        'fpn_offence_type_string': 'fpn_offence_type_string',
        'issue_date_time': 'issue_date_time',
        'fpn_status': 'fpn_status',
        'fpn_status_string': 'fpn_status_string',
        'status_changed_date': 'status_changed_date',
        'location': 'location',
        'offence_date': 'offence_date',
        'offence_details': 'offence_details',
        'authorised_officer': 'authorised_officer',
        'officer_contact_details': 'officer_contact_details',
        'officer_address': 'officer_address',
        'representations_contact': 'representations_contact',
        'representations_contact_address': 'representations_contact_address',
        'payment_methods': 'payment_methods',
        'payment_methods_string': 'payment_methods_string',
        'work_reference_number': 'work_reference_number',
        'promoter_organisation': 'promoter_organisation',
        'ha_organisation': 'ha_organisation',
        'files': 'files',
        'permit_reference_number': 'permit_reference_number'
    }

    def __init__(self, fpn_reference_number=None, fpn_offence_type=None, fpn_offence_type_string=None, issue_date_time=None, fpn_status=None, fpn_status_string=None, status_changed_date=None, location=None, offence_date=None, offence_details=None, authorised_officer=None, officer_contact_details=None, officer_address=None, representations_contact=None, representations_contact_address=None, payment_methods=None, payment_methods_string=None, work_reference_number=None, promoter_organisation=None, ha_organisation=None, files=None, permit_reference_number=None):  # noqa: E501
        """FPNResponse - a model defined in Swagger"""  # noqa: E501
        self._fpn_reference_number = None
        self._fpn_offence_type = None
        self._fpn_offence_type_string = None
        self._issue_date_time = None
        self._fpn_status = None
        self._fpn_status_string = None
        self._status_changed_date = None
        self._location = None
        self._offence_date = None
        self._offence_details = None
        self._authorised_officer = None
        self._officer_contact_details = None
        self._officer_address = None
        self._representations_contact = None
        self._representations_contact_address = None
        self._payment_methods = None
        self._payment_methods_string = None
        self._work_reference_number = None
        self._promoter_organisation = None
        self._ha_organisation = None
        self._files = None
        self._permit_reference_number = None
        self.discriminator = None
        self.fpn_reference_number = fpn_reference_number
        self.fpn_offence_type = fpn_offence_type
        self.fpn_offence_type_string = fpn_offence_type_string
        self.issue_date_time = issue_date_time
        self.fpn_status = fpn_status
        self.fpn_status_string = fpn_status_string
        self.status_changed_date = status_changed_date
        self.location = location
        self.offence_date = offence_date
        self.offence_details = offence_details
        self.authorised_officer = authorised_officer
        self.officer_contact_details = officer_contact_details
        if officer_address is not None:
            self.officer_address = officer_address
        if representations_contact is not None:
            self.representations_contact = representations_contact
        if representations_contact_address is not None:
            self.representations_contact_address = representations_contact_address
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if payment_methods_string is not None:
            self.payment_methods_string = payment_methods_string
        self.work_reference_number = work_reference_number
        self.promoter_organisation = promoter_organisation
        self.ha_organisation = ha_organisation
        if files is not None:
            self.files = files
        if permit_reference_number is not None:
            self.permit_reference_number = permit_reference_number

    @property
    def fpn_reference_number(self):
        """Gets the fpn_reference_number of this FPNResponse.  # noqa: E501


        :return: The fpn_reference_number of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._fpn_reference_number

    @fpn_reference_number.setter
    def fpn_reference_number(self, fpn_reference_number):
        """Sets the fpn_reference_number of this FPNResponse.


        :param fpn_reference_number: The fpn_reference_number of this FPNResponse.  # noqa: E501
        :type: str
        """
        if fpn_reference_number is None:
            raise ValueError("Invalid value for `fpn_reference_number`, must not be `None`")  # noqa: E501

        self._fpn_reference_number = fpn_reference_number

    @property
    def fpn_offence_type(self):
        """Gets the fpn_offence_type of this FPNResponse.  # noqa: E501


        :return: The fpn_offence_type of this FPNResponse.  # noqa: E501
        :rtype: OffenceCodeResponse
        """
        return self._fpn_offence_type

    @fpn_offence_type.setter
    def fpn_offence_type(self, fpn_offence_type):
        """Sets the fpn_offence_type of this FPNResponse.


        :param fpn_offence_type: The fpn_offence_type of this FPNResponse.  # noqa: E501
        :type: OffenceCodeResponse
        """
        if fpn_offence_type is None:
            raise ValueError("Invalid value for `fpn_offence_type`, must not be `None`")  # noqa: E501

        self._fpn_offence_type = fpn_offence_type

    @property
    def fpn_offence_type_string(self):
        """Gets the fpn_offence_type_string of this FPNResponse.  # noqa: E501


        :return: The fpn_offence_type_string of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._fpn_offence_type_string

    @fpn_offence_type_string.setter
    def fpn_offence_type_string(self, fpn_offence_type_string):
        """Sets the fpn_offence_type_string of this FPNResponse.


        :param fpn_offence_type_string: The fpn_offence_type_string of this FPNResponse.  # noqa: E501
        :type: str
        """
        if fpn_offence_type_string is None:
            raise ValueError("Invalid value for `fpn_offence_type_string`, must not be `None`")  # noqa: E501

        self._fpn_offence_type_string = fpn_offence_type_string

    @property
    def issue_date_time(self):
        """Gets the issue_date_time of this FPNResponse.  # noqa: E501


        :return: The issue_date_time of this FPNResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date_time

    @issue_date_time.setter
    def issue_date_time(self, issue_date_time):
        """Sets the issue_date_time of this FPNResponse.


        :param issue_date_time: The issue_date_time of this FPNResponse.  # noqa: E501
        :type: datetime
        """
        if issue_date_time is None:
            raise ValueError("Invalid value for `issue_date_time`, must not be `None`")  # noqa: E501

        self._issue_date_time = issue_date_time

    @property
    def fpn_status(self):
        """Gets the fpn_status of this FPNResponse.  # noqa: E501


        :return: The fpn_status of this FPNResponse.  # noqa: E501
        :rtype: FPNStatusResponse
        """
        return self._fpn_status

    @fpn_status.setter
    def fpn_status(self, fpn_status):
        """Sets the fpn_status of this FPNResponse.


        :param fpn_status: The fpn_status of this FPNResponse.  # noqa: E501
        :type: FPNStatusResponse
        """
        if fpn_status is None:
            raise ValueError("Invalid value for `fpn_status`, must not be `None`")  # noqa: E501

        self._fpn_status = fpn_status

    @property
    def fpn_status_string(self):
        """Gets the fpn_status_string of this FPNResponse.  # noqa: E501


        :return: The fpn_status_string of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._fpn_status_string

    @fpn_status_string.setter
    def fpn_status_string(self, fpn_status_string):
        """Sets the fpn_status_string of this FPNResponse.


        :param fpn_status_string: The fpn_status_string of this FPNResponse.  # noqa: E501
        :type: str
        """
        if fpn_status_string is None:
            raise ValueError("Invalid value for `fpn_status_string`, must not be `None`")  # noqa: E501

        self._fpn_status_string = fpn_status_string

    @property
    def status_changed_date(self):
        """Gets the status_changed_date of this FPNResponse.  # noqa: E501


        :return: The status_changed_date of this FPNResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_date

    @status_changed_date.setter
    def status_changed_date(self, status_changed_date):
        """Sets the status_changed_date of this FPNResponse.


        :param status_changed_date: The status_changed_date of this FPNResponse.  # noqa: E501
        :type: datetime
        """
        if status_changed_date is None:
            raise ValueError("Invalid value for `status_changed_date`, must not be `None`")  # noqa: E501

        self._status_changed_date = status_changed_date

    @property
    def location(self):
        """Gets the location of this FPNResponse.  # noqa: E501


        :return: The location of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FPNResponse.


        :param location: The location of this FPNResponse.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def offence_date(self):
        """Gets the offence_date of this FPNResponse.  # noqa: E501


        :return: The offence_date of this FPNResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._offence_date

    @offence_date.setter
    def offence_date(self, offence_date):
        """Sets the offence_date of this FPNResponse.


        :param offence_date: The offence_date of this FPNResponse.  # noqa: E501
        :type: datetime
        """
        if offence_date is None:
            raise ValueError("Invalid value for `offence_date`, must not be `None`")  # noqa: E501

        self._offence_date = offence_date

    @property
    def offence_details(self):
        """Gets the offence_details of this FPNResponse.  # noqa: E501


        :return: The offence_details of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._offence_details

    @offence_details.setter
    def offence_details(self, offence_details):
        """Sets the offence_details of this FPNResponse.


        :param offence_details: The offence_details of this FPNResponse.  # noqa: E501
        :type: str
        """
        if offence_details is None:
            raise ValueError("Invalid value for `offence_details`, must not be `None`")  # noqa: E501

        self._offence_details = offence_details

    @property
    def authorised_officer(self):
        """Gets the authorised_officer of this FPNResponse.  # noqa: E501


        :return: The authorised_officer of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._authorised_officer

    @authorised_officer.setter
    def authorised_officer(self, authorised_officer):
        """Sets the authorised_officer of this FPNResponse.


        :param authorised_officer: The authorised_officer of this FPNResponse.  # noqa: E501
        :type: str
        """
        if authorised_officer is None:
            raise ValueError("Invalid value for `authorised_officer`, must not be `None`")  # noqa: E501

        self._authorised_officer = authorised_officer

    @property
    def officer_contact_details(self):
        """Gets the officer_contact_details of this FPNResponse.  # noqa: E501


        :return: The officer_contact_details of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._officer_contact_details

    @officer_contact_details.setter
    def officer_contact_details(self, officer_contact_details):
        """Sets the officer_contact_details of this FPNResponse.


        :param officer_contact_details: The officer_contact_details of this FPNResponse.  # noqa: E501
        :type: str
        """
        if officer_contact_details is None:
            raise ValueError("Invalid value for `officer_contact_details`, must not be `None`")  # noqa: E501

        self._officer_contact_details = officer_contact_details

    @property
    def officer_address(self):
        """Gets the officer_address of this FPNResponse.  # noqa: E501


        :return: The officer_address of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._officer_address

    @officer_address.setter
    def officer_address(self, officer_address):
        """Sets the officer_address of this FPNResponse.


        :param officer_address: The officer_address of this FPNResponse.  # noqa: E501
        :type: str
        """

        self._officer_address = officer_address

    @property
    def representations_contact(self):
        """Gets the representations_contact of this FPNResponse.  # noqa: E501


        :return: The representations_contact of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._representations_contact

    @representations_contact.setter
    def representations_contact(self, representations_contact):
        """Sets the representations_contact of this FPNResponse.


        :param representations_contact: The representations_contact of this FPNResponse.  # noqa: E501
        :type: str
        """

        self._representations_contact = representations_contact

    @property
    def representations_contact_address(self):
        """Gets the representations_contact_address of this FPNResponse.  # noqa: E501


        :return: The representations_contact_address of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._representations_contact_address

    @representations_contact_address.setter
    def representations_contact_address(self, representations_contact_address):
        """Sets the representations_contact_address of this FPNResponse.


        :param representations_contact_address: The representations_contact_address of this FPNResponse.  # noqa: E501
        :type: str
        """

        self._representations_contact_address = representations_contact_address

    @property
    def payment_methods(self):
        """Gets the payment_methods of this FPNResponse.  # noqa: E501


        :return: The payment_methods of this FPNResponse.  # noqa: E501
        :rtype: list[PaymentMethodResponse]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this FPNResponse.


        :param payment_methods: The payment_methods of this FPNResponse.  # noqa: E501
        :type: list[PaymentMethodResponse]
        """

        self._payment_methods = payment_methods

    @property
    def payment_methods_string(self):
        """Gets the payment_methods_string of this FPNResponse.  # noqa: E501


        :return: The payment_methods_string of this FPNResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods_string

    @payment_methods_string.setter
    def payment_methods_string(self, payment_methods_string):
        """Sets the payment_methods_string of this FPNResponse.


        :param payment_methods_string: The payment_methods_string of this FPNResponse.  # noqa: E501
        :type: list[str]
        """

        self._payment_methods_string = payment_methods_string

    @property
    def work_reference_number(self):
        """Gets the work_reference_number of this FPNResponse.  # noqa: E501


        :return: The work_reference_number of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_reference_number

    @work_reference_number.setter
    def work_reference_number(self, work_reference_number):
        """Sets the work_reference_number of this FPNResponse.


        :param work_reference_number: The work_reference_number of this FPNResponse.  # noqa: E501
        :type: str
        """
        if work_reference_number is None:
            raise ValueError("Invalid value for `work_reference_number`, must not be `None`")  # noqa: E501

        self._work_reference_number = work_reference_number

    @property
    def promoter_organisation(self):
        """Gets the promoter_organisation of this FPNResponse.  # noqa: E501


        :return: The promoter_organisation of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._promoter_organisation

    @promoter_organisation.setter
    def promoter_organisation(self, promoter_organisation):
        """Sets the promoter_organisation of this FPNResponse.


        :param promoter_organisation: The promoter_organisation of this FPNResponse.  # noqa: E501
        :type: str
        """
        if promoter_organisation is None:
            raise ValueError("Invalid value for `promoter_organisation`, must not be `None`")  # noqa: E501

        self._promoter_organisation = promoter_organisation

    @property
    def ha_organisation(self):
        """Gets the ha_organisation of this FPNResponse.  # noqa: E501


        :return: The ha_organisation of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._ha_organisation

    @ha_organisation.setter
    def ha_organisation(self, ha_organisation):
        """Sets the ha_organisation of this FPNResponse.


        :param ha_organisation: The ha_organisation of this FPNResponse.  # noqa: E501
        :type: str
        """
        if ha_organisation is None:
            raise ValueError("Invalid value for `ha_organisation`, must not be `None`")  # noqa: E501

        self._ha_organisation = ha_organisation

    @property
    def files(self):
        """Gets the files of this FPNResponse.  # noqa: E501


        :return: The files of this FPNResponse.  # noqa: E501
        :rtype: list[FileSummaryResponse]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FPNResponse.


        :param files: The files of this FPNResponse.  # noqa: E501
        :type: list[FileSummaryResponse]
        """

        self._files = files

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this FPNResponse.  # noqa: E501


        :return: The permit_reference_number of this FPNResponse.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this FPNResponse.


        :param permit_reference_number: The permit_reference_number of this FPNResponse.  # noqa: E501
        :type: str
        """

        self._permit_reference_number = permit_reference_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FPNResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FPNResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
