# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PbiSampleInspectionSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pbi_sample_inspection_reference_number': 'str',
        'inspection_category': 'InspectionCategoryResponse',
        'inspection_category_string': 'str',
        'sample_expiry_date': 'datetime'
    }

    attribute_map = {
        'pbi_sample_inspection_reference_number': 'pbi_sample_inspection_reference_number',
        'inspection_category': 'inspection_category',
        'inspection_category_string': 'inspection_category_string',
        'sample_expiry_date': 'sample_expiry_date'
    }

    def __init__(self, pbi_sample_inspection_reference_number=None, inspection_category=None, inspection_category_string=None, sample_expiry_date=None):  # noqa: E501
        """PbiSampleInspectionSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._pbi_sample_inspection_reference_number = None
        self._inspection_category = None
        self._inspection_category_string = None
        self._sample_expiry_date = None
        self.discriminator = None
        self.pbi_sample_inspection_reference_number = pbi_sample_inspection_reference_number
        self.inspection_category = inspection_category
        self.inspection_category_string = inspection_category_string
        self.sample_expiry_date = sample_expiry_date

    @property
    def pbi_sample_inspection_reference_number(self):
        """Gets the pbi_sample_inspection_reference_number of this PbiSampleInspectionSummaryResponse.  # noqa: E501


        :return: The pbi_sample_inspection_reference_number of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._pbi_sample_inspection_reference_number

    @pbi_sample_inspection_reference_number.setter
    def pbi_sample_inspection_reference_number(self, pbi_sample_inspection_reference_number):
        """Sets the pbi_sample_inspection_reference_number of this PbiSampleInspectionSummaryResponse.


        :param pbi_sample_inspection_reference_number: The pbi_sample_inspection_reference_number of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :type: str
        """
        if pbi_sample_inspection_reference_number is None:
            raise ValueError("Invalid value for `pbi_sample_inspection_reference_number`, must not be `None`")  # noqa: E501

        self._pbi_sample_inspection_reference_number = pbi_sample_inspection_reference_number

    @property
    def inspection_category(self):
        """Gets the inspection_category of this PbiSampleInspectionSummaryResponse.  # noqa: E501


        :return: The inspection_category of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :rtype: InspectionCategoryResponse
        """
        return self._inspection_category

    @inspection_category.setter
    def inspection_category(self, inspection_category):
        """Sets the inspection_category of this PbiSampleInspectionSummaryResponse.


        :param inspection_category: The inspection_category of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :type: InspectionCategoryResponse
        """
        if inspection_category is None:
            raise ValueError("Invalid value for `inspection_category`, must not be `None`")  # noqa: E501

        self._inspection_category = inspection_category

    @property
    def inspection_category_string(self):
        """Gets the inspection_category_string of this PbiSampleInspectionSummaryResponse.  # noqa: E501


        :return: The inspection_category_string of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_category_string

    @inspection_category_string.setter
    def inspection_category_string(self, inspection_category_string):
        """Sets the inspection_category_string of this PbiSampleInspectionSummaryResponse.


        :param inspection_category_string: The inspection_category_string of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :type: str
        """
        if inspection_category_string is None:
            raise ValueError("Invalid value for `inspection_category_string`, must not be `None`")  # noqa: E501

        self._inspection_category_string = inspection_category_string

    @property
    def sample_expiry_date(self):
        """Gets the sample_expiry_date of this PbiSampleInspectionSummaryResponse.  # noqa: E501


        :return: The sample_expiry_date of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_expiry_date

    @sample_expiry_date.setter
    def sample_expiry_date(self, sample_expiry_date):
        """Sets the sample_expiry_date of this PbiSampleInspectionSummaryResponse.


        :param sample_expiry_date: The sample_expiry_date of this PbiSampleInspectionSummaryResponse.  # noqa: E501
        :type: datetime
        """
        if sample_expiry_date is None:
            raise ValueError("Invalid value for `sample_expiry_date`, must not be `None`")  # noqa: E501

        self._sample_expiry_date = sample_expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PbiSampleInspectionSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PbiSampleInspectionSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
