# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Section74Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permit_reference_number': 'str',
        'section_74_reference_number': 'str',
        'date_created': 'datetime',
        'overrun_warning_reasons': 'list[OverrunWarningReasonResponse]',
        'overrun_warning_reasons_string': 'list[str]',
        'ha_status': 'Section74HAStatusResponse',
        'ha_status_string': 'str',
        'location_description': 'str',
        'location_types': 'list[LocationTypeResponse]',
        'location_types_string': 'list[str]',
        'inspection_date': 'datetime',
        'overrun_warning_details': 'str',
        'officer_name': 'str',
        'officer_contact_details': 'str',
        'section_74_evidence': 'bool',
        'files': 'list[FileSummaryResponse]',
        'latest_ha_response_date': 'datetime',
        'latest_promoter_response_date': 'datetime',
        'latest_ha_additional_details': 'str',
        'latest_promoter_additional_details': 'str',
        'ha_reason_for_dispute': 'str',
        'promoter_reason_for_dispute': 'str',
        'site_visited_date': 'datetime',
        'site_cleared_date': 'datetime',
        'ha_response_number_of_days_overrun': 'float',
        'draft_invoice_reference': 'str',
        'invoice_reference': 'str',
        'draft_invoice_amount': 'float',
        'final_agreed_amount': 'float',
        'promoter_status': 'AllOfSection74ResponsePromoterStatus',
        'promoter_status_string': 'str'
    }

    attribute_map = {
        'permit_reference_number': 'permit_reference_number',
        'section_74_reference_number': 'section_74_reference_number',
        'date_created': 'date_created',
        'overrun_warning_reasons': 'overrun_warning_reasons',
        'overrun_warning_reasons_string': 'overrun_warning_reasons_string',
        'ha_status': 'ha_status',
        'ha_status_string': 'ha_status_string',
        'location_description': 'location_description',
        'location_types': 'location_types',
        'location_types_string': 'location_types_string',
        'inspection_date': 'inspection_date',
        'overrun_warning_details': 'overrun_warning_details',
        'officer_name': 'officer_name',
        'officer_contact_details': 'officer_contact_details',
        'section_74_evidence': 'section_74_evidence',
        'files': 'files',
        'latest_ha_response_date': 'latest_ha_response_date',
        'latest_promoter_response_date': 'latest_promoter_response_date',
        'latest_ha_additional_details': 'latest_ha_additional_details',
        'latest_promoter_additional_details': 'latest_promoter_additional_details',
        'ha_reason_for_dispute': 'ha_reason_for_dispute',
        'promoter_reason_for_dispute': 'promoter_reason_for_dispute',
        'site_visited_date': 'site_visited_date',
        'site_cleared_date': 'site_cleared_date',
        'ha_response_number_of_days_overrun': 'ha_response_number_of_days_overrun',
        'draft_invoice_reference': 'draft_invoice_reference',
        'invoice_reference': 'invoice_reference',
        'draft_invoice_amount': 'draft_invoice_amount',
        'final_agreed_amount': 'final_agreed_amount',
        'promoter_status': 'promoter_status',
        'promoter_status_string': 'promoter_status_string'
    }

    def __init__(self, permit_reference_number=None, section_74_reference_number=None, date_created=None, overrun_warning_reasons=None, overrun_warning_reasons_string=None, ha_status=None, ha_status_string=None, location_description=None, location_types=None, location_types_string=None, inspection_date=None, overrun_warning_details=None, officer_name=None, officer_contact_details=None, section_74_evidence=None, files=None, latest_ha_response_date=None, latest_promoter_response_date=None, latest_ha_additional_details=None, latest_promoter_additional_details=None, ha_reason_for_dispute=None, promoter_reason_for_dispute=None, site_visited_date=None, site_cleared_date=None, ha_response_number_of_days_overrun=None, draft_invoice_reference=None, invoice_reference=None, draft_invoice_amount=None, final_agreed_amount=None, promoter_status=None, promoter_status_string=None):  # noqa: E501
        """Section74Response - a model defined in Swagger"""  # noqa: E501
        self._permit_reference_number = None
        self._section_74_reference_number = None
        self._date_created = None
        self._overrun_warning_reasons = None
        self._overrun_warning_reasons_string = None
        self._ha_status = None
        self._ha_status_string = None
        self._location_description = None
        self._location_types = None
        self._location_types_string = None
        self._inspection_date = None
        self._overrun_warning_details = None
        self._officer_name = None
        self._officer_contact_details = None
        self._section_74_evidence = None
        self._files = None
        self._latest_ha_response_date = None
        self._latest_promoter_response_date = None
        self._latest_ha_additional_details = None
        self._latest_promoter_additional_details = None
        self._ha_reason_for_dispute = None
        self._promoter_reason_for_dispute = None
        self._site_visited_date = None
        self._site_cleared_date = None
        self._ha_response_number_of_days_overrun = None
        self._draft_invoice_reference = None
        self._invoice_reference = None
        self._draft_invoice_amount = None
        self._final_agreed_amount = None
        self._promoter_status = None
        self._promoter_status_string = None
        self.discriminator = None
        self.permit_reference_number = permit_reference_number
        self.section_74_reference_number = section_74_reference_number
        self.date_created = date_created
        self.overrun_warning_reasons = overrun_warning_reasons
        self.overrun_warning_reasons_string = overrun_warning_reasons_string
        self.ha_status = ha_status
        self.ha_status_string = ha_status_string
        self.location_description = location_description
        self.location_types = location_types
        self.location_types_string = location_types_string
        self.inspection_date = inspection_date
        self.overrun_warning_details = overrun_warning_details
        self.officer_name = officer_name
        self.officer_contact_details = officer_contact_details
        self.section_74_evidence = section_74_evidence
        if files is not None:
            self.files = files
        if latest_ha_response_date is not None:
            self.latest_ha_response_date = latest_ha_response_date
        if latest_promoter_response_date is not None:
            self.latest_promoter_response_date = latest_promoter_response_date
        if latest_ha_additional_details is not None:
            self.latest_ha_additional_details = latest_ha_additional_details
        if latest_promoter_additional_details is not None:
            self.latest_promoter_additional_details = latest_promoter_additional_details
        if ha_reason_for_dispute is not None:
            self.ha_reason_for_dispute = ha_reason_for_dispute
        if promoter_reason_for_dispute is not None:
            self.promoter_reason_for_dispute = promoter_reason_for_dispute
        if site_visited_date is not None:
            self.site_visited_date = site_visited_date
        if site_cleared_date is not None:
            self.site_cleared_date = site_cleared_date
        if ha_response_number_of_days_overrun is not None:
            self.ha_response_number_of_days_overrun = ha_response_number_of_days_overrun
        if draft_invoice_reference is not None:
            self.draft_invoice_reference = draft_invoice_reference
        if invoice_reference is not None:
            self.invoice_reference = invoice_reference
        if draft_invoice_amount is not None:
            self.draft_invoice_amount = draft_invoice_amount
        if final_agreed_amount is not None:
            self.final_agreed_amount = final_agreed_amount
        if promoter_status is not None:
            self.promoter_status = promoter_status
        if promoter_status_string is not None:
            self.promoter_status_string = promoter_status_string

    @property
    def permit_reference_number(self):
        """Gets the permit_reference_number of this Section74Response.  # noqa: E501


        :return: The permit_reference_number of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._permit_reference_number

    @permit_reference_number.setter
    def permit_reference_number(self, permit_reference_number):
        """Sets the permit_reference_number of this Section74Response.


        :param permit_reference_number: The permit_reference_number of this Section74Response.  # noqa: E501
        :type: str
        """
        if permit_reference_number is None:
            raise ValueError("Invalid value for `permit_reference_number`, must not be `None`")  # noqa: E501

        self._permit_reference_number = permit_reference_number

    @property
    def section_74_reference_number(self):
        """Gets the section_74_reference_number of this Section74Response.  # noqa: E501


        :return: The section_74_reference_number of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._section_74_reference_number

    @section_74_reference_number.setter
    def section_74_reference_number(self, section_74_reference_number):
        """Sets the section_74_reference_number of this Section74Response.


        :param section_74_reference_number: The section_74_reference_number of this Section74Response.  # noqa: E501
        :type: str
        """
        if section_74_reference_number is None:
            raise ValueError("Invalid value for `section_74_reference_number`, must not be `None`")  # noqa: E501

        self._section_74_reference_number = section_74_reference_number

    @property
    def date_created(self):
        """Gets the date_created of this Section74Response.  # noqa: E501


        :return: The date_created of this Section74Response.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Section74Response.


        :param date_created: The date_created of this Section74Response.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def overrun_warning_reasons(self):
        """Gets the overrun_warning_reasons of this Section74Response.  # noqa: E501


        :return: The overrun_warning_reasons of this Section74Response.  # noqa: E501
        :rtype: list[OverrunWarningReasonResponse]
        """
        return self._overrun_warning_reasons

    @overrun_warning_reasons.setter
    def overrun_warning_reasons(self, overrun_warning_reasons):
        """Sets the overrun_warning_reasons of this Section74Response.


        :param overrun_warning_reasons: The overrun_warning_reasons of this Section74Response.  # noqa: E501
        :type: list[OverrunWarningReasonResponse]
        """
        if overrun_warning_reasons is None:
            raise ValueError("Invalid value for `overrun_warning_reasons`, must not be `None`")  # noqa: E501

        self._overrun_warning_reasons = overrun_warning_reasons

    @property
    def overrun_warning_reasons_string(self):
        """Gets the overrun_warning_reasons_string of this Section74Response.  # noqa: E501


        :return: The overrun_warning_reasons_string of this Section74Response.  # noqa: E501
        :rtype: list[str]
        """
        return self._overrun_warning_reasons_string

    @overrun_warning_reasons_string.setter
    def overrun_warning_reasons_string(self, overrun_warning_reasons_string):
        """Sets the overrun_warning_reasons_string of this Section74Response.


        :param overrun_warning_reasons_string: The overrun_warning_reasons_string of this Section74Response.  # noqa: E501
        :type: list[str]
        """
        if overrun_warning_reasons_string is None:
            raise ValueError("Invalid value for `overrun_warning_reasons_string`, must not be `None`")  # noqa: E501

        self._overrun_warning_reasons_string = overrun_warning_reasons_string

    @property
    def ha_status(self):
        """Gets the ha_status of this Section74Response.  # noqa: E501


        :return: The ha_status of this Section74Response.  # noqa: E501
        :rtype: Section74HAStatusResponse
        """
        return self._ha_status

    @ha_status.setter
    def ha_status(self, ha_status):
        """Sets the ha_status of this Section74Response.


        :param ha_status: The ha_status of this Section74Response.  # noqa: E501
        :type: Section74HAStatusResponse
        """
        if ha_status is None:
            raise ValueError("Invalid value for `ha_status`, must not be `None`")  # noqa: E501

        self._ha_status = ha_status

    @property
    def ha_status_string(self):
        """Gets the ha_status_string of this Section74Response.  # noqa: E501


        :return: The ha_status_string of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._ha_status_string

    @ha_status_string.setter
    def ha_status_string(self, ha_status_string):
        """Sets the ha_status_string of this Section74Response.


        :param ha_status_string: The ha_status_string of this Section74Response.  # noqa: E501
        :type: str
        """
        if ha_status_string is None:
            raise ValueError("Invalid value for `ha_status_string`, must not be `None`")  # noqa: E501

        self._ha_status_string = ha_status_string

    @property
    def location_description(self):
        """Gets the location_description of this Section74Response.  # noqa: E501


        :return: The location_description of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this Section74Response.


        :param location_description: The location_description of this Section74Response.  # noqa: E501
        :type: str
        """
        if location_description is None:
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def location_types(self):
        """Gets the location_types of this Section74Response.  # noqa: E501


        :return: The location_types of this Section74Response.  # noqa: E501
        :rtype: list[LocationTypeResponse]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this Section74Response.


        :param location_types: The location_types of this Section74Response.  # noqa: E501
        :type: list[LocationTypeResponse]
        """
        if location_types is None:
            raise ValueError("Invalid value for `location_types`, must not be `None`")  # noqa: E501

        self._location_types = location_types

    @property
    def location_types_string(self):
        """Gets the location_types_string of this Section74Response.  # noqa: E501


        :return: The location_types_string of this Section74Response.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_types_string

    @location_types_string.setter
    def location_types_string(self, location_types_string):
        """Sets the location_types_string of this Section74Response.


        :param location_types_string: The location_types_string of this Section74Response.  # noqa: E501
        :type: list[str]
        """
        if location_types_string is None:
            raise ValueError("Invalid value for `location_types_string`, must not be `None`")  # noqa: E501

        self._location_types_string = location_types_string

    @property
    def inspection_date(self):
        """Gets the inspection_date of this Section74Response.  # noqa: E501


        :return: The inspection_date of this Section74Response.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_date

    @inspection_date.setter
    def inspection_date(self, inspection_date):
        """Sets the inspection_date of this Section74Response.


        :param inspection_date: The inspection_date of this Section74Response.  # noqa: E501
        :type: datetime
        """
        if inspection_date is None:
            raise ValueError("Invalid value for `inspection_date`, must not be `None`")  # noqa: E501

        self._inspection_date = inspection_date

    @property
    def overrun_warning_details(self):
        """Gets the overrun_warning_details of this Section74Response.  # noqa: E501


        :return: The overrun_warning_details of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._overrun_warning_details

    @overrun_warning_details.setter
    def overrun_warning_details(self, overrun_warning_details):
        """Sets the overrun_warning_details of this Section74Response.


        :param overrun_warning_details: The overrun_warning_details of this Section74Response.  # noqa: E501
        :type: str
        """
        if overrun_warning_details is None:
            raise ValueError("Invalid value for `overrun_warning_details`, must not be `None`")  # noqa: E501

        self._overrun_warning_details = overrun_warning_details

    @property
    def officer_name(self):
        """Gets the officer_name of this Section74Response.  # noqa: E501


        :return: The officer_name of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._officer_name

    @officer_name.setter
    def officer_name(self, officer_name):
        """Sets the officer_name of this Section74Response.


        :param officer_name: The officer_name of this Section74Response.  # noqa: E501
        :type: str
        """
        if officer_name is None:
            raise ValueError("Invalid value for `officer_name`, must not be `None`")  # noqa: E501

        self._officer_name = officer_name

    @property
    def officer_contact_details(self):
        """Gets the officer_contact_details of this Section74Response.  # noqa: E501


        :return: The officer_contact_details of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._officer_contact_details

    @officer_contact_details.setter
    def officer_contact_details(self, officer_contact_details):
        """Sets the officer_contact_details of this Section74Response.


        :param officer_contact_details: The officer_contact_details of this Section74Response.  # noqa: E501
        :type: str
        """
        if officer_contact_details is None:
            raise ValueError("Invalid value for `officer_contact_details`, must not be `None`")  # noqa: E501

        self._officer_contact_details = officer_contact_details

    @property
    def section_74_evidence(self):
        """Gets the section_74_evidence of this Section74Response.  # noqa: E501


        :return: The section_74_evidence of this Section74Response.  # noqa: E501
        :rtype: bool
        """
        return self._section_74_evidence

    @section_74_evidence.setter
    def section_74_evidence(self, section_74_evidence):
        """Sets the section_74_evidence of this Section74Response.


        :param section_74_evidence: The section_74_evidence of this Section74Response.  # noqa: E501
        :type: bool
        """
        if section_74_evidence is None:
            raise ValueError("Invalid value for `section_74_evidence`, must not be `None`")  # noqa: E501

        self._section_74_evidence = section_74_evidence

    @property
    def files(self):
        """Gets the files of this Section74Response.  # noqa: E501


        :return: The files of this Section74Response.  # noqa: E501
        :rtype: list[FileSummaryResponse]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Section74Response.


        :param files: The files of this Section74Response.  # noqa: E501
        :type: list[FileSummaryResponse]
        """

        self._files = files

    @property
    def latest_ha_response_date(self):
        """Gets the latest_ha_response_date of this Section74Response.  # noqa: E501


        :return: The latest_ha_response_date of this Section74Response.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_ha_response_date

    @latest_ha_response_date.setter
    def latest_ha_response_date(self, latest_ha_response_date):
        """Sets the latest_ha_response_date of this Section74Response.


        :param latest_ha_response_date: The latest_ha_response_date of this Section74Response.  # noqa: E501
        :type: datetime
        """

        self._latest_ha_response_date = latest_ha_response_date

    @property
    def latest_promoter_response_date(self):
        """Gets the latest_promoter_response_date of this Section74Response.  # noqa: E501


        :return: The latest_promoter_response_date of this Section74Response.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_promoter_response_date

    @latest_promoter_response_date.setter
    def latest_promoter_response_date(self, latest_promoter_response_date):
        """Sets the latest_promoter_response_date of this Section74Response.


        :param latest_promoter_response_date: The latest_promoter_response_date of this Section74Response.  # noqa: E501
        :type: datetime
        """

        self._latest_promoter_response_date = latest_promoter_response_date

    @property
    def latest_ha_additional_details(self):
        """Gets the latest_ha_additional_details of this Section74Response.  # noqa: E501


        :return: The latest_ha_additional_details of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._latest_ha_additional_details

    @latest_ha_additional_details.setter
    def latest_ha_additional_details(self, latest_ha_additional_details):
        """Sets the latest_ha_additional_details of this Section74Response.


        :param latest_ha_additional_details: The latest_ha_additional_details of this Section74Response.  # noqa: E501
        :type: str
        """

        self._latest_ha_additional_details = latest_ha_additional_details

    @property
    def latest_promoter_additional_details(self):
        """Gets the latest_promoter_additional_details of this Section74Response.  # noqa: E501


        :return: The latest_promoter_additional_details of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._latest_promoter_additional_details

    @latest_promoter_additional_details.setter
    def latest_promoter_additional_details(self, latest_promoter_additional_details):
        """Sets the latest_promoter_additional_details of this Section74Response.


        :param latest_promoter_additional_details: The latest_promoter_additional_details of this Section74Response.  # noqa: E501
        :type: str
        """

        self._latest_promoter_additional_details = latest_promoter_additional_details

    @property
    def ha_reason_for_dispute(self):
        """Gets the ha_reason_for_dispute of this Section74Response.  # noqa: E501


        :return: The ha_reason_for_dispute of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._ha_reason_for_dispute

    @ha_reason_for_dispute.setter
    def ha_reason_for_dispute(self, ha_reason_for_dispute):
        """Sets the ha_reason_for_dispute of this Section74Response.


        :param ha_reason_for_dispute: The ha_reason_for_dispute of this Section74Response.  # noqa: E501
        :type: str
        """

        self._ha_reason_for_dispute = ha_reason_for_dispute

    @property
    def promoter_reason_for_dispute(self):
        """Gets the promoter_reason_for_dispute of this Section74Response.  # noqa: E501


        :return: The promoter_reason_for_dispute of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._promoter_reason_for_dispute

    @promoter_reason_for_dispute.setter
    def promoter_reason_for_dispute(self, promoter_reason_for_dispute):
        """Sets the promoter_reason_for_dispute of this Section74Response.


        :param promoter_reason_for_dispute: The promoter_reason_for_dispute of this Section74Response.  # noqa: E501
        :type: str
        """

        self._promoter_reason_for_dispute = promoter_reason_for_dispute

    @property
    def site_visited_date(self):
        """Gets the site_visited_date of this Section74Response.  # noqa: E501


        :return: The site_visited_date of this Section74Response.  # noqa: E501
        :rtype: datetime
        """
        return self._site_visited_date

    @site_visited_date.setter
    def site_visited_date(self, site_visited_date):
        """Sets the site_visited_date of this Section74Response.


        :param site_visited_date: The site_visited_date of this Section74Response.  # noqa: E501
        :type: datetime
        """

        self._site_visited_date = site_visited_date

    @property
    def site_cleared_date(self):
        """Gets the site_cleared_date of this Section74Response.  # noqa: E501


        :return: The site_cleared_date of this Section74Response.  # noqa: E501
        :rtype: datetime
        """
        return self._site_cleared_date

    @site_cleared_date.setter
    def site_cleared_date(self, site_cleared_date):
        """Sets the site_cleared_date of this Section74Response.


        :param site_cleared_date: The site_cleared_date of this Section74Response.  # noqa: E501
        :type: datetime
        """

        self._site_cleared_date = site_cleared_date

    @property
    def ha_response_number_of_days_overrun(self):
        """Gets the ha_response_number_of_days_overrun of this Section74Response.  # noqa: E501


        :return: The ha_response_number_of_days_overrun of this Section74Response.  # noqa: E501
        :rtype: float
        """
        return self._ha_response_number_of_days_overrun

    @ha_response_number_of_days_overrun.setter
    def ha_response_number_of_days_overrun(self, ha_response_number_of_days_overrun):
        """Sets the ha_response_number_of_days_overrun of this Section74Response.


        :param ha_response_number_of_days_overrun: The ha_response_number_of_days_overrun of this Section74Response.  # noqa: E501
        :type: float
        """

        self._ha_response_number_of_days_overrun = ha_response_number_of_days_overrun

    @property
    def draft_invoice_reference(self):
        """Gets the draft_invoice_reference of this Section74Response.  # noqa: E501


        :return: The draft_invoice_reference of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._draft_invoice_reference

    @draft_invoice_reference.setter
    def draft_invoice_reference(self, draft_invoice_reference):
        """Sets the draft_invoice_reference of this Section74Response.


        :param draft_invoice_reference: The draft_invoice_reference of this Section74Response.  # noqa: E501
        :type: str
        """

        self._draft_invoice_reference = draft_invoice_reference

    @property
    def invoice_reference(self):
        """Gets the invoice_reference of this Section74Response.  # noqa: E501


        :return: The invoice_reference of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._invoice_reference

    @invoice_reference.setter
    def invoice_reference(self, invoice_reference):
        """Sets the invoice_reference of this Section74Response.


        :param invoice_reference: The invoice_reference of this Section74Response.  # noqa: E501
        :type: str
        """

        self._invoice_reference = invoice_reference

    @property
    def draft_invoice_amount(self):
        """Gets the draft_invoice_amount of this Section74Response.  # noqa: E501


        :return: The draft_invoice_amount of this Section74Response.  # noqa: E501
        :rtype: float
        """
        return self._draft_invoice_amount

    @draft_invoice_amount.setter
    def draft_invoice_amount(self, draft_invoice_amount):
        """Sets the draft_invoice_amount of this Section74Response.


        :param draft_invoice_amount: The draft_invoice_amount of this Section74Response.  # noqa: E501
        :type: float
        """

        self._draft_invoice_amount = draft_invoice_amount

    @property
    def final_agreed_amount(self):
        """Gets the final_agreed_amount of this Section74Response.  # noqa: E501


        :return: The final_agreed_amount of this Section74Response.  # noqa: E501
        :rtype: float
        """
        return self._final_agreed_amount

    @final_agreed_amount.setter
    def final_agreed_amount(self, final_agreed_amount):
        """Sets the final_agreed_amount of this Section74Response.


        :param final_agreed_amount: The final_agreed_amount of this Section74Response.  # noqa: E501
        :type: float
        """

        self._final_agreed_amount = final_agreed_amount

    @property
    def promoter_status(self):
        """Gets the promoter_status of this Section74Response.  # noqa: E501


        :return: The promoter_status of this Section74Response.  # noqa: E501
        :rtype: AllOfSection74ResponsePromoterStatus
        """
        return self._promoter_status

    @promoter_status.setter
    def promoter_status(self, promoter_status):
        """Sets the promoter_status of this Section74Response.


        :param promoter_status: The promoter_status of this Section74Response.  # noqa: E501
        :type: AllOfSection74ResponsePromoterStatus
        """

        self._promoter_status = promoter_status

    @property
    def promoter_status_string(self):
        """Gets the promoter_status_string of this Section74Response.  # noqa: E501


        :return: The promoter_status_string of this Section74Response.  # noqa: E501
        :rtype: str
        """
        return self._promoter_status_string

    @promoter_status_string.setter
    def promoter_status_string(self, promoter_status_string):
        """Sets the promoter_status_string of this Section74Response.


        :param promoter_status_string: The promoter_status_string of this Section74Response.  # noqa: E501
        :type: str
        """

        self._promoter_status_string = promoter_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section74Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section74Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
