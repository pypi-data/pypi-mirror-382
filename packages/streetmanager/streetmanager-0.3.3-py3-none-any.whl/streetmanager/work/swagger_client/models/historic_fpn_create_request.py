# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoricFPNCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'promoter_swa_code': 'str',
        'highway_authority_swa_code': 'str',
        'works_coordinates': 'object',
        'street_name': 'str',
        'town': 'str',
        'area_name': 'str',
        'usrn': 'float',
        'road_category': 'float',
        'historical_permit_reference': 'str',
        'works_location_description': 'str',
        'description_of_work': 'str',
        'work_start_date': 'datetime',
        'work_end_date': 'datetime',
        'fpn_evidence': 'bool',
        'file_ids': 'list[float]',
        'offence_date': 'datetime',
        'offence_code': 'OffenceCode',
        'offence_details': 'str',
        'authorised_officer': 'str',
        'officer_contact_details': 'str',
        'officer_address': 'str',
        'representations_contact': 'str',
        'representations_contact_address': 'str',
        'payment_methods': 'list[PaymentMethod]'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'promoter_swa_code': 'promoter_swa_code',
        'highway_authority_swa_code': 'highway_authority_swa_code',
        'works_coordinates': 'works_coordinates',
        'street_name': 'street_name',
        'town': 'town',
        'area_name': 'area_name',
        'usrn': 'usrn',
        'road_category': 'road_category',
        'historical_permit_reference': 'historical_permit_reference',
        'works_location_description': 'works_location_description',
        'description_of_work': 'description_of_work',
        'work_start_date': 'work_start_date',
        'work_end_date': 'work_end_date',
        'fpn_evidence': 'fpn_evidence',
        'file_ids': 'file_ids',
        'offence_date': 'offence_date',
        'offence_code': 'offence_code',
        'offence_details': 'offence_details',
        'authorised_officer': 'authorised_officer',
        'officer_contact_details': 'officer_contact_details',
        'officer_address': 'officer_address',
        'representations_contact': 'representations_contact',
        'representations_contact_address': 'representations_contact_address',
        'payment_methods': 'payment_methods'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, promoter_swa_code=None, highway_authority_swa_code=None, works_coordinates=None, street_name=None, town=None, area_name=None, usrn=None, road_category=None, historical_permit_reference=None, works_location_description=None, description_of_work=None, work_start_date=None, work_end_date=None, fpn_evidence=None, file_ids=None, offence_date=None, offence_code=None, offence_details=None, authorised_officer=None, officer_contact_details=None, officer_address=None, representations_contact=None, representations_contact_address=None, payment_methods=None):  # noqa: E501
        """HistoricFPNCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._promoter_swa_code = None
        self._highway_authority_swa_code = None
        self._works_coordinates = None
        self._street_name = None
        self._town = None
        self._area_name = None
        self._usrn = None
        self._road_category = None
        self._historical_permit_reference = None
        self._works_location_description = None
        self._description_of_work = None
        self._work_start_date = None
        self._work_end_date = None
        self._fpn_evidence = None
        self._file_ids = None
        self._offence_date = None
        self._offence_code = None
        self._offence_details = None
        self._authorised_officer = None
        self._officer_contact_details = None
        self._officer_address = None
        self._representations_contact = None
        self._representations_contact_address = None
        self._payment_methods = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.promoter_swa_code = promoter_swa_code
        self.highway_authority_swa_code = highway_authority_swa_code
        self.works_coordinates = works_coordinates
        if street_name is not None:
            self.street_name = street_name
        if town is not None:
            self.town = town
        if area_name is not None:
            self.area_name = area_name
        self.usrn = usrn
        if road_category is not None:
            self.road_category = road_category
        self.historical_permit_reference = historical_permit_reference
        self.works_location_description = works_location_description
        if description_of_work is not None:
            self.description_of_work = description_of_work
        if work_start_date is not None:
            self.work_start_date = work_start_date
        if work_end_date is not None:
            self.work_end_date = work_end_date
        self.fpn_evidence = fpn_evidence
        if file_ids is not None:
            self.file_ids = file_ids
        self.offence_date = offence_date
        self.offence_code = offence_code
        self.offence_details = offence_details
        self.authorised_officer = authorised_officer
        self.officer_contact_details = officer_contact_details
        self.officer_address = officer_address
        self.representations_contact = representations_contact
        self.representations_contact_address = representations_contact_address
        self.payment_methods = payment_methods

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this HistoricFPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this HistoricFPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def promoter_swa_code(self):
        """Gets the promoter_swa_code of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 4 characters  # noqa: E501

        :return: The promoter_swa_code of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._promoter_swa_code

    @promoter_swa_code.setter
    def promoter_swa_code(self, promoter_swa_code):
        """Sets the promoter_swa_code of this HistoricFPNCreateRequest.

        Max length 4 characters  # noqa: E501

        :param promoter_swa_code: The promoter_swa_code of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if promoter_swa_code is None:
            raise ValueError("Invalid value for `promoter_swa_code`, must not be `None`")  # noqa: E501

        self._promoter_swa_code = promoter_swa_code

    @property
    def highway_authority_swa_code(self):
        """Gets the highway_authority_swa_code of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 4 characters  # noqa: E501

        :return: The highway_authority_swa_code of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._highway_authority_swa_code

    @highway_authority_swa_code.setter
    def highway_authority_swa_code(self, highway_authority_swa_code):
        """Sets the highway_authority_swa_code of this HistoricFPNCreateRequest.

        Max length 4 characters  # noqa: E501

        :param highway_authority_swa_code: The highway_authority_swa_code of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if highway_authority_swa_code is None:
            raise ValueError("Invalid value for `highway_authority_swa_code`, must not be `None`")  # noqa: E501

        self._highway_authority_swa_code = highway_authority_swa_code

    @property
    def works_coordinates(self):
        """Gets the works_coordinates of this HistoricFPNCreateRequest.  # noqa: E501

        Must be a GeoJSON geometry (using British National Grid easting and northing coordinate pairs) and must be a point, line string or polygon  # noqa: E501

        :return: The works_coordinates of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._works_coordinates

    @works_coordinates.setter
    def works_coordinates(self, works_coordinates):
        """Sets the works_coordinates of this HistoricFPNCreateRequest.

        Must be a GeoJSON geometry (using British National Grid easting and northing coordinate pairs) and must be a point, line string or polygon  # noqa: E501

        :param works_coordinates: The works_coordinates of this HistoricFPNCreateRequest.  # noqa: E501
        :type: object
        """
        if works_coordinates is None:
            raise ValueError("Invalid value for `works_coordinates`, must not be `None`")  # noqa: E501

        self._works_coordinates = works_coordinates

    @property
    def street_name(self):
        """Gets the street_name of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The street_name of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this HistoricFPNCreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param street_name: The street_name of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def town(self):
        """Gets the town of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The town of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this HistoricFPNCreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param town: The town of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def area_name(self):
        """Gets the area_name of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The area_name of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this HistoricFPNCreateRequest.

        Max length 100 characters Use Street Lookup API endpoint /nsg/streets to lookup this information If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param area_name: The area_name of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def usrn(self):
        """Gets the usrn of this HistoricFPNCreateRequest.  # noqa: E501

        Is whole number between 1000001 and 99999999 inclusive See business rules section 1.4 - USRN  # noqa: E501

        :return: The usrn of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._usrn

    @usrn.setter
    def usrn(self, usrn):
        """Sets the usrn of this HistoricFPNCreateRequest.

        Is whole number between 1000001 and 99999999 inclusive See business rules section 1.4 - USRN  # noqa: E501

        :param usrn: The usrn of this HistoricFPNCreateRequest.  # noqa: E501
        :type: float
        """
        if usrn is None:
            raise ValueError("Invalid value for `usrn`, must not be `None`")  # noqa: E501

        self._usrn = usrn

    @property
    def road_category(self):
        """Gets the road_category of this HistoricFPNCreateRequest.  # noqa: E501

        Is whole number between 0 and 10 inclusive If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :return: The road_category of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._road_category

    @road_category.setter
    def road_category(self, road_category):
        """Sets the road_category of this HistoricFPNCreateRequest.

        Is whole number between 0 and 10 inclusive If not provided, populated with NSG data related to supplied USRN  # noqa: E501

        :param road_category: The road_category of this HistoricFPNCreateRequest.  # noqa: E501
        :type: float
        """

        self._road_category = road_category

    @property
    def historical_permit_reference(self):
        """Gets the historical_permit_reference of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 24 characters Must be unique in the system, this will become the work_reference_number Must contain only alphanumeric characters, dashes and underscores  # noqa: E501

        :return: The historical_permit_reference of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._historical_permit_reference

    @historical_permit_reference.setter
    def historical_permit_reference(self, historical_permit_reference):
        """Sets the historical_permit_reference of this HistoricFPNCreateRequest.

        Max length 24 characters Must be unique in the system, this will become the work_reference_number Must contain only alphanumeric characters, dashes and underscores  # noqa: E501

        :param historical_permit_reference: The historical_permit_reference of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if historical_permit_reference is None:
            raise ValueError("Invalid value for `historical_permit_reference`, must not be `None`")  # noqa: E501

        self._historical_permit_reference = historical_permit_reference

    @property
    def works_location_description(self):
        """Gets the works_location_description of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The works_location_description of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._works_location_description

    @works_location_description.setter
    def works_location_description(self, works_location_description):
        """Sets the works_location_description of this HistoricFPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param works_location_description: The works_location_description of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if works_location_description is None:
            raise ValueError("Invalid value for `works_location_description`, must not be `None`")  # noqa: E501

        self._works_location_description = works_location_description

    @property
    def description_of_work(self):
        """Gets the description_of_work of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The description_of_work of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description_of_work

    @description_of_work.setter
    def description_of_work(self, description_of_work):
        """Sets the description_of_work of this HistoricFPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param description_of_work: The description_of_work of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """

        self._description_of_work = description_of_work

    @property
    def work_start_date(self):
        """Gets the work_start_date of this HistoricFPNCreateRequest.  # noqa: E501

        Date must be in the past  # noqa: E501

        :return: The work_start_date of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._work_start_date

    @work_start_date.setter
    def work_start_date(self, work_start_date):
        """Sets the work_start_date of this HistoricFPNCreateRequest.

        Date must be in the past  # noqa: E501

        :param work_start_date: The work_start_date of this HistoricFPNCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._work_start_date = work_start_date

    @property
    def work_end_date(self):
        """Gets the work_end_date of this HistoricFPNCreateRequest.  # noqa: E501

        Date must be in the past work_end_date must be after the date and time for work_start_date  # noqa: E501

        :return: The work_end_date of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._work_end_date

    @work_end_date.setter
    def work_end_date(self, work_end_date):
        """Sets the work_end_date of this HistoricFPNCreateRequest.

        Date must be in the past work_end_date must be after the date and time for work_start_date  # noqa: E501

        :param work_end_date: The work_end_date of this HistoricFPNCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._work_end_date = work_end_date

    @property
    def fpn_evidence(self):
        """Gets the fpn_evidence of this HistoricFPNCreateRequest.  # noqa: E501

        Whether FPN evidence has been supplied  # noqa: E501

        :return: The fpn_evidence of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._fpn_evidence

    @fpn_evidence.setter
    def fpn_evidence(self, fpn_evidence):
        """Sets the fpn_evidence of this HistoricFPNCreateRequest.

        Whether FPN evidence has been supplied  # noqa: E501

        :param fpn_evidence: The fpn_evidence of this HistoricFPNCreateRequest.  # noqa: E501
        :type: bool
        """
        if fpn_evidence is None:
            raise ValueError("Invalid value for `fpn_evidence`, must not be `None`")  # noqa: E501

        self._fpn_evidence = fpn_evidence

    @property
    def file_ids(self):
        """Gets the file_ids of this HistoricFPNCreateRequest.  # noqa: E501

        Required if fpn_evidence = true Array values must be unique Must not contain null or undefined values A file_id can only be associated with one section of Street Manager See API specification Resource Guide > Works API > File upload for more information  # noqa: E501

        :return: The file_ids of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this HistoricFPNCreateRequest.

        Required if fpn_evidence = true Array values must be unique Must not contain null or undefined values A file_id can only be associated with one section of Street Manager See API specification Resource Guide > Works API > File upload for more information  # noqa: E501

        :param file_ids: The file_ids of this HistoricFPNCreateRequest.  # noqa: E501
        :type: list[float]
        """

        self._file_ids = file_ids

    @property
    def offence_date(self):
        """Gets the offence_date of this HistoricFPNCreateRequest.  # noqa: E501

        offence_date must be in the past  # noqa: E501

        :return: The offence_date of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._offence_date

    @offence_date.setter
    def offence_date(self, offence_date):
        """Sets the offence_date of this HistoricFPNCreateRequest.

        offence_date must be in the past  # noqa: E501

        :param offence_date: The offence_date of this HistoricFPNCreateRequest.  # noqa: E501
        :type: datetime
        """
        if offence_date is None:
            raise ValueError("Invalid value for `offence_date`, must not be `None`")  # noqa: E501

        self._offence_date = offence_date

    @property
    def offence_code(self):
        """Gets the offence_code of this HistoricFPNCreateRequest.  # noqa: E501


        :return: The offence_code of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: OffenceCode
        """
        return self._offence_code

    @offence_code.setter
    def offence_code(self, offence_code):
        """Sets the offence_code of this HistoricFPNCreateRequest.


        :param offence_code: The offence_code of this HistoricFPNCreateRequest.  # noqa: E501
        :type: OffenceCode
        """
        if offence_code is None:
            raise ValueError("Invalid value for `offence_code`, must not be `None`")  # noqa: E501

        self._offence_code = offence_code

    @property
    def offence_details(self):
        """Gets the offence_details of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The offence_details of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._offence_details

    @offence_details.setter
    def offence_details(self, offence_details):
        """Sets the offence_details of this HistoricFPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param offence_details: The offence_details of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if offence_details is None:
            raise ValueError("Invalid value for `offence_details`, must not be `None`")  # noqa: E501

        self._offence_details = offence_details

    @property
    def authorised_officer(self):
        """Gets the authorised_officer of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The authorised_officer of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._authorised_officer

    @authorised_officer.setter
    def authorised_officer(self, authorised_officer):
        """Sets the authorised_officer of this HistoricFPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param authorised_officer: The authorised_officer of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if authorised_officer is None:
            raise ValueError("Invalid value for `authorised_officer`, must not be `None`")  # noqa: E501

        self._authorised_officer = authorised_officer

    @property
    def officer_contact_details(self):
        """Gets the officer_contact_details of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The officer_contact_details of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._officer_contact_details

    @officer_contact_details.setter
    def officer_contact_details(self, officer_contact_details):
        """Sets the officer_contact_details of this HistoricFPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param officer_contact_details: The officer_contact_details of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if officer_contact_details is None:
            raise ValueError("Invalid value for `officer_contact_details`, must not be `None`")  # noqa: E501

        self._officer_contact_details = officer_contact_details

    @property
    def officer_address(self):
        """Gets the officer_address of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The officer_address of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._officer_address

    @officer_address.setter
    def officer_address(self, officer_address):
        """Sets the officer_address of this HistoricFPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param officer_address: The officer_address of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if officer_address is None:
            raise ValueError("Invalid value for `officer_address`, must not be `None`")  # noqa: E501

        self._officer_address = officer_address

    @property
    def representations_contact(self):
        """Gets the representations_contact of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The representations_contact of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._representations_contact

    @representations_contact.setter
    def representations_contact(self, representations_contact):
        """Sets the representations_contact of this HistoricFPNCreateRequest.

        Max length 100 characters  # noqa: E501

        :param representations_contact: The representations_contact of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if representations_contact is None:
            raise ValueError("Invalid value for `representations_contact`, must not be `None`")  # noqa: E501

        self._representations_contact = representations_contact

    @property
    def representations_contact_address(self):
        """Gets the representations_contact_address of this HistoricFPNCreateRequest.  # noqa: E501

        Max length 500 characters  # noqa: E501

        :return: The representations_contact_address of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._representations_contact_address

    @representations_contact_address.setter
    def representations_contact_address(self, representations_contact_address):
        """Sets the representations_contact_address of this HistoricFPNCreateRequest.

        Max length 500 characters  # noqa: E501

        :param representations_contact_address: The representations_contact_address of this HistoricFPNCreateRequest.  # noqa: E501
        :type: str
        """
        if representations_contact_address is None:
            raise ValueError("Invalid value for `representations_contact_address`, must not be `None`")  # noqa: E501

        self._representations_contact_address = representations_contact_address

    @property
    def payment_methods(self):
        """Gets the payment_methods of this HistoricFPNCreateRequest.  # noqa: E501


        :return: The payment_methods of this HistoricFPNCreateRequest.  # noqa: E501
        :rtype: list[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this HistoricFPNCreateRequest.


        :param payment_methods: The payment_methods of this HistoricFPNCreateRequest.  # noqa: E501
        :type: list[PaymentMethod]
        """
        if payment_methods is None:
            raise ValueError("Invalid value for `payment_methods`, must not be `None`")  # noqa: E501

        self._payment_methods = payment_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoricFPNCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoricFPNCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
