# coding: utf-8

"""
    Street Manager API

    See API specification Resource Guide > Work API for more information on endpoints NOTE: Swagger Editor/UI does not display all description text for enumerations and child elements, check swagger.json for full description text  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermitStatusUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_user_identifier': 'str',
        'internal_user_name': 'str',
        'permit_status': 'PermitStatus',
        'additional_comments': 'str',
        'permit_cancellation_reason': 'AllOfPermitStatusUpdateRequestPermitCancellationReason',
        'permit_cancellation_reason_other': 'str'
    }

    attribute_map = {
        'internal_user_identifier': 'internal_user_identifier',
        'internal_user_name': 'internal_user_name',
        'permit_status': 'permit_status',
        'additional_comments': 'additional_comments',
        'permit_cancellation_reason': 'permit_cancellation_reason',
        'permit_cancellation_reason_other': 'permit_cancellation_reason_other'
    }

    def __init__(self, internal_user_identifier=None, internal_user_name=None, permit_status=None, additional_comments=None, permit_cancellation_reason=None, permit_cancellation_reason_other=None):  # noqa: E501
        """PermitStatusUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._internal_user_identifier = None
        self._internal_user_name = None
        self._permit_status = None
        self._additional_comments = None
        self._permit_cancellation_reason = None
        self._permit_cancellation_reason_other = None
        self.discriminator = None
        if internal_user_identifier is not None:
            self.internal_user_identifier = internal_user_identifier
        if internal_user_name is not None:
            self.internal_user_name = internal_user_name
        self.permit_status = permit_status
        if additional_comments is not None:
            self.additional_comments = additional_comments
        if permit_cancellation_reason is not None:
            self.permit_cancellation_reason = permit_cancellation_reason
        if permit_cancellation_reason_other is not None:
            self.permit_cancellation_reason_other = permit_cancellation_reason_other

    @property
    def internal_user_identifier(self):
        """Gets the internal_user_identifier of this PermitStatusUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_identifier of this PermitStatusUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_identifier

    @internal_user_identifier.setter
    def internal_user_identifier(self, internal_user_identifier):
        """Sets the internal_user_identifier of this PermitStatusUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_identifier: The internal_user_identifier of this PermitStatusUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_identifier = internal_user_identifier

    @property
    def internal_user_name(self):
        """Gets the internal_user_name of this PermitStatusUpdateRequest.  # noqa: E501

        Max length 100 characters  # noqa: E501

        :return: The internal_user_name of this PermitStatusUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._internal_user_name

    @internal_user_name.setter
    def internal_user_name(self, internal_user_name):
        """Sets the internal_user_name of this PermitStatusUpdateRequest.

        Max length 100 characters  # noqa: E501

        :param internal_user_name: The internal_user_name of this PermitStatusUpdateRequest.  # noqa: E501
        :type: str
        """

        self._internal_user_name = internal_user_name

    @property
    def permit_status(self):
        """Gets the permit_status of this PermitStatusUpdateRequest.  # noqa: E501


        :return: The permit_status of this PermitStatusUpdateRequest.  # noqa: E501
        :rtype: PermitStatus
        """
        return self._permit_status

    @permit_status.setter
    def permit_status(self, permit_status):
        """Sets the permit_status of this PermitStatusUpdateRequest.


        :param permit_status: The permit_status of this PermitStatusUpdateRequest.  # noqa: E501
        :type: PermitStatus
        """
        if permit_status is None:
            raise ValueError("Invalid value for `permit_status`, must not be `None`")  # noqa: E501

        self._permit_status = permit_status

    @property
    def additional_comments(self):
        """Gets the additional_comments of this PermitStatusUpdateRequest.  # noqa: E501

        Required if permit_status = refused Max length 500 characters  # noqa: E501

        :return: The additional_comments of this PermitStatusUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._additional_comments

    @additional_comments.setter
    def additional_comments(self, additional_comments):
        """Sets the additional_comments of this PermitStatusUpdateRequest.

        Required if permit_status = refused Max length 500 characters  # noqa: E501

        :param additional_comments: The additional_comments of this PermitStatusUpdateRequest.  # noqa: E501
        :type: str
        """

        self._additional_comments = additional_comments

    @property
    def permit_cancellation_reason(self):
        """Gets the permit_cancellation_reason of this PermitStatusUpdateRequest.  # noqa: E501


        :return: The permit_cancellation_reason of this PermitStatusUpdateRequest.  # noqa: E501
        :rtype: AllOfPermitStatusUpdateRequestPermitCancellationReason
        """
        return self._permit_cancellation_reason

    @permit_cancellation_reason.setter
    def permit_cancellation_reason(self, permit_cancellation_reason):
        """Sets the permit_cancellation_reason of this PermitStatusUpdateRequest.


        :param permit_cancellation_reason: The permit_cancellation_reason of this PermitStatusUpdateRequest.  # noqa: E501
        :type: AllOfPermitStatusUpdateRequestPermitCancellationReason
        """

        self._permit_cancellation_reason = permit_cancellation_reason

    @property
    def permit_cancellation_reason_other(self):
        """Gets the permit_cancellation_reason_other of this PermitStatusUpdateRequest.  # noqa: E501

        Required if permit_cancellation_reason is other  # noqa: E501

        :return: The permit_cancellation_reason_other of this PermitStatusUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._permit_cancellation_reason_other

    @permit_cancellation_reason_other.setter
    def permit_cancellation_reason_other(self, permit_cancellation_reason_other):
        """Sets the permit_cancellation_reason_other of this PermitStatusUpdateRequest.

        Required if permit_cancellation_reason is other  # noqa: E501

        :param permit_cancellation_reason_other: The permit_cancellation_reason_other of this PermitStatusUpdateRequest.  # noqa: E501
        :type: str
        """

        self._permit_cancellation_reason_other = permit_cancellation_reason_other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermitStatusUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitStatusUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
