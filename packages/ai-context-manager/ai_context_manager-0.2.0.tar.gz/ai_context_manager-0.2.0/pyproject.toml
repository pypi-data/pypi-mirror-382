[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-context-manager"
version = "0.2.0"
description = "Enterprise-grade context management system for AI agents with vector database support"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "AI Context Manager Team", email = "team@ai-context-manager.com" }
]
maintainers = [
    { name = "AI Context Manager Team", email = "team@ai-context-manager.com" }
]
keywords = [
    "ai", "context-management", "vector-database", "agents", "llm", "embeddings",
    "postgresql", "pgvector", "chromadb", "semantic-search", "memory-management"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]
requires-python = ">=3.9"

dependencies = [
    "openai",
    "requests",
    "jinja2",
    "tiktoken",
    "toml",
    "urllib3>=2.4.0,!=2.3.0"  # Fix security vulnerabilities CVE-2025-50181 and CVE-2025-50182
]

[project.optional-dependencies]
vector = [
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0; python_version >= '3.10'"
]
postgres = [
    "psycopg2-binary>=2.9.0",
    "numpy>=1.21.0"
]
production = [
    "psycopg2-binary>=2.9.0",
    "numpy>=1.21.0",
    "sentence-transformers>=2.2.0; python_version >= '3.10'"
]
cli = [
    "click>=8.0.0",
    "rich>=10.0.0"
]
performance = [
    "psutil>=5.8.0",
    "memory-profiler>=0.60.0"
]
all = [
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "psycopg2-binary>=2.9.0",
    "numpy>=1.21.0",
    "click>=8.0.0",
    "rich>=10.0.0",
    "psutil>=5.8.0"
]

[project.scripts]
ai-context = "ai_context_manager.cli:main"

[project.urls]
Homepage = "https://github.com/ai-context-manager/ai-context-manager"
Repository = "https://github.com/ai-context-manager/ai-context-manager"
Documentation = "https://docs.ai-context-manager.com"
Issues = "https://github.com/ai-context-manager/ai-context-manager/issues"
Changelog = "https://github.com/ai-context-manager/ai-context-manager/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["ai_context_manager*"]

[tool.setuptools.package-data]
"ai_context_manager" = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["ai_context_manager"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]