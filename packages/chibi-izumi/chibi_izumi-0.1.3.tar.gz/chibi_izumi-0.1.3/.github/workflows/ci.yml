name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run linting
      run: |
        uv run ruff check .
        uv run ruff format --check .

    - name: Run type checking
      run: |
        uv run mypy src/izumi/distage/
        uv run pyright src/izumi/distage/

    - name: Run tests
      run: uv run pytest -v --cov=src/izumi/distage --cov-report=xml

    - name: Run demos
      run: uv run python scripts.py demos

    - name: Validate README examples
      run: uv run python scripts.py readme

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Build package
      run: uv build

    - name: Check package
      run: |
        uv run python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'release' && github.event.action == 'published') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    environment:
      name: pypi
      url: https://pypi.org/p/chibi-izumi

    permissions:
      id-token: write  # Required for trusted publishing

    steps:
    - name: Get secrets from Bitwarden
      uses: bitwarden/sm-action@v2
      with:
        access_token: ${{ secrets.TOKEN_BITWARDEN_SM }}
        secrets: |
          c6212f4a-f129-47ec-9405-b35b0130b851 > PYPI_API_TOKEN

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ env.PYPI_API_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write  # Required for creating releases

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Extract release notes
      id: extract_notes
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

        # Try to extract release notes from the latest commit or tag message
        RELEASE_NOTES=$(git tag -l --format='%(contents)' "$TAG_NAME" | head -20)
        if [ -z "$RELEASE_NOTES" ]; then
          RELEASE_NOTES="Release $TAG_NAME"
        fi

        # Save release notes to file for multiline handling
        echo "$RELEASE_NOTES" > release_notes.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.extract_notes.outputs.tag_name }}
        name: Release ${{ steps.extract_notes.outputs.tag_name }}
        body_path: release_notes.txt
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: ${{ contains(steps.extract_notes.outputs.tag_name, '-') }}
        generate_release_notes: true
