ifneq ($(V),1)
.SILENT:
endif

# CORE VARIABLES

BINDING_MODULE := dggal
BINDING_NAME := dggal
MODULE := dggal
TARGET_NAME := $(MODULE)_c_fn
VERSION := 0.0.5
CONFIG := allinone
# CONTAINS_CXX := defined
ifndef COMPILER
COMPILER := default
endif

TARGET_TYPE = sharedlib

# FLAGS

ifndef DEBIAN_PACKAGE
CFLAGS = -Wcomment
LDFLAGS =
endif
PRJ_CFLAGS =
CECFLAGS =
OFLAGS = #-Wl,-nostdlib
LIBS =

ifdef DEBUG
NOSTRIP := y
endif

CONSOLE = -mwindows

# INCLUDES

DGGALCFN_ABSPATH := $(dir $(realpath $(firstword $(MAKEFILE_LIST))))

DGGAL_ABSPATH := $(realpath $(dir $(DGGALCFN_ABSPATH))../../)/

ifndef EC_SDK_SRC
EC_SDK_SRC := $(realpath $(dir $(DGGAL_ABSPATH)/)../eC)
endif

_CF_DIR = $(EC_SDK_SRC)/

include $(_CF_DIR)crossplatform.mk
include $(_CF_DIR)$(COMPILER).cf

# POST-INCLUDES VARIABLES

OBJ = obj/$(BINDING_NAME).$(CONFIG).$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/

RES =

ifdef LINUX_TARGET
TARGET = $(OBJ)$(LP)$(TARGET_NAME)$(SO).$(VERSION)
SONAME = -Wl,-soname,$(LP)$(MODULE)$(SO).0
else
TARGET = $(OBJ)$(LP)$(TARGET_NAME)$(SO)
SONAME =
endif

_OBJECTS = $(_DEP_OBJECTS) \
	$(OBJ)$(BINDING_NAME)$(O)

OBJECTS = $(_OBJECTS)

SOURCES = $(_DEP_SOURCES) \
	$(BINDING_NAME)_c.c

LIBS += $(SHAREDLIB) $(EXECUTABLE) $(LINKOPT)

ifndef STATIC_LIBRARY_TARGET
LIBS += \
   $(call _L,dggal_cStatic) \
	$(call _L,ecrt_cStatic) \
	$(call _L,dggalStatic) \
	$(call _L,ecrtStatic) \
	$(call _L,m) \
	$(call _L,z)
endif

PRJ_CFLAGS += \
	 $(if $(DEBUG), -g, -O2 -ffast-math) $(FPIC) -w -DDGGAL_ALLINONE -I. #-DECPRFX=eC_

#(SPECIFIC_FLAGS)#

PRJ_CFLAGS +=  -I../c -I$(EC_SDK_SRC)/bindings/c

OFLAGS += \
	-L$(DGGAL_ABSPATH)obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib \
	-L$(EC_SDK_SRC)/obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib

# PLATFORM-SPECIFIC OPTIONS

ifdef WINDOWS_TARGET

ifndef STATIC_LIBRARY_TARGET

OFLAGS += -static-libgcc

LIBS += \
	$(call _L,winmm) \
	$(call _L,kernel32) \
	$(call _L,user32) \
	$(call _L,mpr) \
	$(call _L,advapi32) \
	$(call _L,shell32)

endif

else
ifdef LINUX_TARGET

ifndef STATIC_LIBRARY_TARGET
ifneq ($(ARCH),x32)
ifneq ($(shell uname -m),x86_64)
# $(warning ARCH: $(ARCH) -- adding -Wl,--wrap=fcntl64 to OFLAGS)
OFLAGS += \
	 -Wl,--wrap=fcntl64
endif
endif
OFLAGS +=

LIBS += \
	$(call _L,pthread) \
	$(call _L,m) \
	$(call _L,dl)

endif

else
ifdef OSX_TARGET

ifndef STATIC_LIBRARY_TARGET
OFLAGS +=

LIBS += \
	$(call _L,pthread) \
	$(call _L,m) \
	$(call _L,dl)

endif

endif
endif
endif


# TARGETS

.PHONY: all
all: objdir $(TARGET);

.PHONY: objdir
objdir:
	$(call mkdir,$(OBJ))

$(SYMBOLS): | objdir
$(OBJECTS): | objdir
$(TARGET): $(SOURCES) $(OBJECTS) | objdir
	$(LD) $(OFLAGS) $(_OBJECTS) $(LIBS) -o $(TARGET) $(INSTALLNAME)
ifndef NOSTRIP
	$(STRIP) $(STRIPOPT) $(TARGET)
endif
ifdef LINUX_TARGET
ifdef LINUX_HOST
	$(if $(basename $(VER)),ln -sf $(LP)$(TARGET_NAME)$(SO)$(VER) $(OBJ)$(LP)$(TARGET_NAME)$(SO)$(basename $(VER)),)
	$(if $(basename $(basename $(VER))),ln -sf $(LP)$(TARGET_NAME)$(SO)$(VER) $(OBJ)$(LP)$(TARGET_NAME)$(SO)$(basename $(basename $(VER))),)
	$(if $(VER),ln -sf $(LP)$(TARGET_NAME)$(SO)$(VER) $(OBJ)$(LP)$(TARGET_NAME)$(SO),)
endif
endif
	$(call cp,$(TARGET),$(DGGAL_ABSPATH)$(SODESTDIR))
ifdef LINUX_TARGET
ifdef LINUX_HOST
	$(if $(basename $(basename $(VER))),ln -sf $(LP)$(TARGET_NAME)$(SO)$(VER) $(DGGAL_ABSPATH)$(SODESTDIR)$(LP)$(TARGET_NAME)$(SO)$(basename $(basename $(VER))),)
	$(if $(basename $(VER)),ln -sf $(LP)$(TARGET_NAME)$(SO)$(VER) $(DGGAL_ABSPATH)$(SODESTDIR)$(LP)$(TARGET_NAME)$(SO)$(basename $(VER)),)
	$(if $(VER),ln -sf $(LP)$(TARGET_NAME)$(SO)$(VER) $(DGGAL_ABSPATH)$(SODESTDIR)$(LP)$(TARGET_NAME)$(SO),)
endif
endif

# OBJECT RULES


$(OBJ)$(BINDING_NAME)$(O): $(BINDING_NAME)_c.c
	$(CC) $(CFLAGS) $(PRJ_CFLAGS) -c $(call quote_path,$<) -o $(call quote_path,$@)

.PHONY: cleantarget
cleantarget:
	$(call rm,$(TARGET))
ifdef LINUX_TARGET
ifdef LINUX_HOST
	$(call rm,$(OBJ)$(LP)$(TARGET_NAME)$(SO)$(basename $(basename $(VER))))
	$(call rm,$(OBJ)$(LP)$(TARGET_NAME)$(SO)$(basename $(VER)))
	$(call rm,$(OBJ)$(LP)$(TARGET_NAME)$(SO))
endif
endif

.PHONY: clean
clean: cleantarget
	$(call rm,$(_OBJECTS))

.PHONY: realclean
realclean: cleantarget
	$(call rmr,$(OBJ))

.PHONY: wipeclean
wipeclean:
	$(call rmr,obj/)

.PHONY: distclean
distclean:
	$(_MAKE) -f $(_CF_DIR)Cleanfile distclean distclean_all_subdirs

$(MAKEFILE_LIST): ;
$(SOURCES): ;
$(RESOURCES): ;
