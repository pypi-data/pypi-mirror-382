//
// SPDX-FileCopyrightText: Copyright 2023-2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the License); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an AS IS BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Automatically generated by tosaValidationGenerator for TOSA Specification 1.0.0draft
// Do not edit.

#pragma once

#include "tosa/tosa_validator.hpp"

namespace tosa
{
namespace validator
{
namespace checks
{
// Checks for TOSA Specification 1.0.0draft
void LevelCheck_1lz89reckvj8d(const regor::Operation *op, const Context &context);
void LevelCheck_2i1ithnrq06wi(const regor::Operation *op, const Context &context);
void LevelCheck_1wobi8axf7z2y(const regor::Operation *op, const Context &context);
void LevelCheck_1xppm0ufw64nq(const regor::Operation *op, const Context &context);
void LevelCheck_as2lzdd5d28b(const regor::Operation *op, const Context &context);
void LevelCheck_2n3xkkz3ip4mz(const regor::Operation *op, const Context &context);
void LevelCheck_3o7qpmmd9ga58(const regor::Operation *op, const Context &context);
void LevelCheck_16lxbjk2bszcz(const regor::Operation *op, const Context &context);
void LevelCheck_2kwfb08mbiwpg(const regor::Operation *op, const Context &context);
void LevelCheck_1l00wczs5w70i(const regor::Operation *op, const Context &context);
void LevelCheck_1hle41fus7cpl(const regor::Operation *op, const Context &context);
void LevelCheck_1npkwxnbypn8z(const regor::Operation *op, const Context &context);
void LevelCheck_olu6vs8y9f61(const regor::Operation *op, const Context &context);
void LevelCheck_3l4no1w1u6sq4(const regor::Operation *op, const Context &context);
void LevelCheck_1416gon2u3sue(const regor::Operation *op, const Context &context);
void LevelCheck_1wd03gtw7132o(const regor::Operation *op, const Context &context);
void LevelCheck_i8zuc5feuxbr(const regor::Operation *op, const Context &context);
void LevelCheck_17eyg1nicy12g(const regor::Operation *op, const Context &context);
void LevelCheck_6qao6e1mxke0(const regor::Operation *op, const Context &context);
void LevelCheck_pnaf5n03f8jg(const regor::Operation *op, const Context &context);
void LevelCheck_me421i5r5j13(const regor::Operation *op, const Context &context);
void LevelCheck_2ffhdgbz1kvxc(const regor::Operation *op, const Context &context);
void LevelCheck_a0x2apl3zoz(const regor::Operation *op, const Context &context);
void LevelCheck_1flzmpv6hubzc(const regor::Operation *op, const Context &context);
void LevelCheck_3tcyujqdy8gol(const regor::Operation *op, const Context &context);
void LevelCheck_1r40jc4ashh6o(const regor::Operation *op, const Context &context);
void LevelCheck_1u7rtl141felu(const regor::Operation *op, const Context &context);
void LevelCheck_3ufj7d9b3dpok(const regor::Operation *op, const Context &context);
void LevelCheck_2b1mift7kqw7v(const regor::Operation *op, const Context &context);
}  // namespace checks
}  // namespace validator
}  // namespace tosa
