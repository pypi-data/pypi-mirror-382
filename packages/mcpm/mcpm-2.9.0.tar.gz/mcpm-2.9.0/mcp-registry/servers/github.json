{
  "name": "github",
  "display_name": "GitHub Official MCP Server",
  "description": "The official GitHub MCP server written in Go. Provides comprehensive GitHub API integration including repository management, issue tracking, pull requests, code search, and more.",
  "repository": {
    "type": "git",
    "url": "https://github.com/github/github-mcp-server"
  },
  "homepage": "https://github.com/github/github-mcp-server",
  "author": {
    "name": "GitHub"
  },
  "license": "MIT",
  "categories": ["Dev Tools"],
  "tags": [
    "github",
    "code",
    "repository",
    "git",
    "issues",
    "pull-requests",
    "api"
  ],
  "arguments": {
    "GITHUB_PERSONAL_ACCESS_TOKEN": {
      "description": "GitHub Personal Access Token for authentication. Not required for http installation.",
      "required": true,
      "example": "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    }
  },
  "installations": {
    "http": {
      "type": "http",
      "url": "https://api.githubcopilot.com/mcp/",
      "description": "Run github mcp directly with OAuth",
      "recommended": true
    },
    "docker": {
      "type": "docker",
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "${GITHUB_PERSONAL_ACCESS_TOKEN}",
        "ghcr.io/github/github-mcp-server"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN}"
      },
      "description": "Run with Docker"
    }
  },
  "examples": [
    {
      "title": "List repositories",
      "description": "Get repositories for an organization or user",
      "prompt": "List all repositories for the organization 'modelcontextprotocol'"
    },
    {
      "title": "Search code",
      "description": "Search for code across GitHub",
      "prompt": "Find all TypeScript files that import '@modelcontextprotocol/sdk'"
    },
    {
      "title": "Create issue",
      "description": "Create a new issue in a repository",
      "prompt": "Create an issue in the repo owner/repo with title 'Bug: XYZ' and describe the problem"
    },
    {
      "title": "View pull requests",
      "description": "List and review pull requests",
      "prompt": "Show me all open pull requests in the kubernetes/kubernetes repository"
    },
    {
      "title": "Repository insights",
      "description": "Get statistics and insights about a repository",
      "prompt": "Show me the contributor statistics for the facebook/react repository"
    }
  ],
  "tools": [
    {
      "name": "list_repositories",
      "description": "List repositories for a user or organization",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Username or organization name"
          },
          "type": {
            "type": "string",
            "enum": ["all", "owner", "public", "private", "member"],
            "description": "Type of repositories to list"
          },
          "sort": {
            "type": "string",
            "enum": ["created", "updated", "pushed", "full_name"],
            "description": "Property to sort by"
          },
          "direction": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort direction"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page (max 100)"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["owner"]
      }
    },
    {
      "name": "get_repository",
      "description": "Get detailed information about a repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "search_code",
      "description": "Search for code on GitHub",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query using GitHub search syntax"
          },
          "sort": {
            "type": "string",
            "enum": ["indexed"],
            "description": "Sort field"
          },
          "order": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort order"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "create_issue",
      "description": "Create a new issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "title": {
            "type": "string",
            "description": "Issue title"
          },
          "body": {
            "type": "string",
            "description": "Issue body"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Usernames to assign"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Labels to add"
          },
          "milestone": {
            "type": "integer",
            "description": "Milestone number"
          }
        },
        "required": ["owner", "repo", "title"]
      }
    },
    {
      "name": "list_pull_requests",
      "description": "List pull requests for a repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "state": {
            "type": "string",
            "enum": ["open", "closed", "all"],
            "description": "State of pull requests"
          },
          "head": {
            "type": "string",
            "description": "Filter by head user or head organization and branch name"
          },
          "base": {
            "type": "string",
            "description": "Filter by base branch name"
          },
          "sort": {
            "type": "string",
            "enum": ["created", "updated", "popularity", "long-running"],
            "description": "What to sort by"
          },
          "direction": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort direction"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "get_pull_request",
      "description": "Get a specific pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pull_number": {
            "type": "integer",
            "description": "Pull request number"
          }
        },
        "required": ["owner", "repo", "pull_number"]
      }
    },
    {
      "name": "create_pull_request",
      "description": "Create a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "title": {
            "type": "string",
            "description": "Pull request title"
          },
          "head": {
            "type": "string",
            "description": "The name of the branch where your changes are implemented"
          },
          "base": {
            "type": "string",
            "description": "The name of the branch you want the changes pulled into"
          },
          "body": {
            "type": "string",
            "description": "Pull request body"
          },
          "maintainer_can_modify": {
            "type": "boolean",
            "description": "Whether maintainers can modify the pull request"
          },
          "draft": {
            "type": "boolean",
            "description": "Whether to create as draft"
          }
        },
        "required": ["owner", "repo", "title", "head", "base"]
      }
    },
    {
      "name": "merge_pull_request",
      "description": "Merge a pull request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pull_number": {
            "type": "integer",
            "description": "Pull request number"
          },
          "commit_title": {
            "type": "string",
            "description": "Title for the merge commit"
          },
          "commit_message": {
            "type": "string",
            "description": "Extra detail for merge commit message"
          },
          "sha": {
            "type": "string",
            "description": "SHA that pull request head must match"
          },
          "merge_method": {
            "type": "string",
            "enum": ["merge", "squash", "rebase"],
            "description": "Merge method to use"
          }
        },
        "required": ["owner", "repo", "pull_number"]
      }
    },
    {
      "name": "get_file_contents",
      "description": "Get contents of a file in a repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "path": {
            "type": "string",
            "description": "File path in the repository"
          },
          "ref": {
            "type": "string",
            "description": "Name of the commit/branch/tag"
          }
        },
        "required": ["owner", "repo", "path"]
      }
    },
    {
      "name": "create_or_update_file",
      "description": "Create or update a file in a repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "path": {
            "type": "string",
            "description": "File path in the repository"
          },
          "message": {
            "type": "string",
            "description": "Commit message"
          },
          "content": {
            "type": "string",
            "description": "The new file content (base64 encoded)"
          },
          "branch": {
            "type": "string",
            "description": "Branch name"
          },
          "sha": {
            "type": "string",
            "description": "Blob SHA of the file being replaced (required for updates)"
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "description": "Committer information"
          }
        },
        "required": ["owner", "repo", "path", "message", "content"]
      }
    },
    {
      "name": "list_issues",
      "description": "List issues for a repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "milestone": {
            "type": "string",
            "description": "Milestone number, 'none', or '*'"
          },
          "state": {
            "type": "string",
            "enum": ["open", "closed", "all"],
            "description": "Issue state"
          },
          "assignee": {
            "type": "string",
            "description": "User login, 'none', or '*'"
          },
          "creator": {
            "type": "string",
            "description": "User login"
          },
          "mentioned": {
            "type": "string",
            "description": "User login"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated label names"
          },
          "sort": {
            "type": "string",
            "enum": ["created", "updated", "comments"],
            "description": "What to sort by"
          },
          "direction": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort direction"
          },
          "since": {
            "type": "string",
            "description": "ISO 8601 timestamp"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "get_issue",
      "description": "Get a specific issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "issue_number": {
            "type": "integer",
            "description": "Issue number"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      }
    },
    {
      "name": "update_issue",
      "description": "Update an issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "issue_number": {
            "type": "integer",
            "description": "Issue number"
          },
          "title": {
            "type": "string",
            "description": "Issue title"
          },
          "body": {
            "type": "string",
            "description": "Issue body"
          },
          "state": {
            "type": "string",
            "enum": ["open", "closed"],
            "description": "Issue state"
          },
          "milestone": {
            "type": "integer",
            "description": "Milestone number"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Labels to set"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Usernames to assign"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      }
    },
    {
      "name": "add_issue_comment",
      "description": "Create a comment on an issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "issue_number": {
            "type": "integer",
            "description": "Issue number"
          },
          "body": {
            "type": "string",
            "description": "Comment body"
          }
        },
        "required": ["owner", "repo", "issue_number", "body"]
      }
    },
    {
      "name": "list_commits",
      "description": "List commits on a repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "sha": {
            "type": "string",
            "description": "SHA or branch to list commits from"
          },
          "path": {
            "type": "string",
            "description": "Only commits containing this path"
          },
          "author": {
            "type": "string",
            "description": "GitHub login or email"
          },
          "since": {
            "type": "string",
            "description": "ISO 8601 date"
          },
          "until": {
            "type": "string",
            "description": "ISO 8601 date"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "get_commit",
      "description": "Get a specific commit",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "ref": {
            "type": "string",
            "description": "Commit SHA"
          }
        },
        "required": ["owner", "repo", "ref"]
      }
    },
    {
      "name": "compare_commits",
      "description": "Compare two commits",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "base": {
            "type": "string",
            "description": "Base commit SHA"
          },
          "head": {
            "type": "string",
            "description": "Head commit SHA"
          }
        },
        "required": ["owner", "repo", "base", "head"]
      }
    },
    {
      "name": "list_branches",
      "description": "List repository branches",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "protected": {
            "type": "boolean",
            "description": "Filter by protected branches"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "get_branch",
      "description": "Get a specific branch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "branch": {
            "type": "string",
            "description": "Branch name"
          }
        },
        "required": ["owner", "repo", "branch"]
      }
    },
    {
      "name": "list_tags",
      "description": "List repository tags",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "list_releases",
      "description": "List repository releases",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "per_page": {
            "type": "integer",
            "description": "Results per page"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "get_release",
      "description": "Get a specific release",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "release_id": {
            "type": "integer",
            "description": "Release ID"
          }
        },
        "required": ["owner", "repo", "release_id"]
      }
    },
    {
      "name": "create_release",
      "description": "Create a release",
      "inputSchema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "tag_name": {
            "type": "string",
            "description": "Tag name for the release"
          },
          "target_commitish": {
            "type": "string",
            "description": "Target commitish (branch/commit SHA)"
          },
          "name": {
            "type": "string",
            "description": "Release name"
          },
          "body": {
            "type": "string",
            "description": "Release body text"
          },
          "draft": {
            "type": "boolean",
            "description": "Whether release is a draft"
          },
          "prerelease": {
            "type": "boolean",
            "description": "Whether release is a prerelease"
          }
        },
        "required": ["owner", "repo", "tag_name"]
      }
    }
  ],
  "is_official": true,
  "is_archived": false
}
