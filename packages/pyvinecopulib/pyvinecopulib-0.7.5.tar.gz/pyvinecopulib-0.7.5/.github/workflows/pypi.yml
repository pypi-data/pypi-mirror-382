name: Build Status

on:
  push:
    tags: ['v*']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  BOOST_VERSION: 1.84.0
  EIGEN_VERSION: 3.4.0
  EXPECTED_WHEEL_COUNT: 16  # 4 platforms × 4 unique wheels (ABI3 covers 3.12+)

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        python: [39, 310, 311, 312]
        cfg:
          - {
              os: ubuntu-latest,
              cibw_id: manylinux_x86_64,
              cc: gcc,
              cxx: g++,
              platform: x64,
              root_install_dir: "/home/runner/work",
            }
          - {
              os: ubuntu-latest,
              cibw_id: musllinux_x86_64,
              cc: gcc,
              cxx: g++,
              platform: x64,
              root_install_dir: "/home/runner/work",
            }
          # - { os: macos-13, cibw_id: macosx_x86_64, cc: clang, cxx: clang++, platform: x64, root_install_dir: '/Users/runner/work'} # intel runner
          - {
              os: macos-14,
              cibw_id: macosx_arm64,
              cc: clang,
              cxx: clang++,
              platform: arm64,
              root_install_dir: "/Users/runner/work",
            }
          - {
              os: windows-latest,
              cibw_id: win_amd64,
              cc: cl,
              cxx: cl,
              platform: x64,
              root_install_dir: 'D:\',
            }

    name: Build and test on ${{ matrix.cfg.os }} for cp${{ matrix.python }}-${{ matrix.cfg.cibw_id }}
    runs-on: ${{ matrix.cfg.os }}

    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        id: install-dependencies
        uses: vinecopulib/vinecopulib/.github/actions/install-dependencies@dev
        with:
          os: ${{ matrix.cfg.os }}
          platform: ${{ matrix.cfg.platform }}
          boost_install_dir: ${{ matrix.cfg.root_install_dir }}
          eigen_install_dir: ${{ matrix.cfg.root_install_dir }}
          boost_version: ${{ env.BOOST_VERSION }}
          eigen_version: ${{ env.EIGEN_VERSION }}
          wdm: "false"
      - name: Clean build artefacts
        shell: bash
        run: |
          rm -rf build wheelhouse
      - name: Build and test wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_REBUILD: 1
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.cfg.cibw_id }}
          CIBW_ENVIRONMENT_WINDOWS: Boost_INCLUDE_DIR='${{steps.install-dependencies.outputs.BOOST_ROOT}}\include' EIGEN3_INCLUDE_DIR='C:\ProgramData\chocolatey\lib\eigen\include'
          CIBW_ENVIRONMENT_MACOS: "Boost_INCLUDE_DIR=${{steps.install-dependencies.outputs.BOOST_ROOT}}/include EIGEN3_INCLUDE_DIR=${{matrix.cfg.root_install_dir}}/include/eigen3"
          CIBW_ENVIRONMENT_LINUX: "Boost_INCLUDE_DIR=/host${{steps.install-dependencies.outputs.BOOST_ROOT}}/include EIGEN3_INCLUDE_DIR=/host${{matrix.cfg.root_install_dir}}/include/eigen3"
          CIBW_ENVIRONMENT_PASS_LINUX: "Boost_INCLUDE_DIR EIGEN3_INCLUDE_DIR"
      - name: Inspect built wheel contents
        shell: bash
        run: |
          echo "Inspecting built wheel(s):"
          wheel=$(ls wheelhouse/*.whl)

          # 1. Verify the wheel is a valid ZIP archive
          unzip -t "$wheel" >/dev/null || {
            echo "::error file=$wheel::Corrupted or invalid wheel archive"
            exit 1
          }

          # 2. Check for stub or typing marker files
          unzip -l "$wheel" | grep -E '(__init__\.pyi|py\.typed)' || {
            echo "::error ::Expected stub or marker files not found in $wheel"
            exit 1
          }

          # 3. Verify wheel metadata and long description
          python3 -m pip install --quiet --no-cache-dir twine
          python3 -m twine check --strict wheelhouse/*.whl || {
            echo "::error ::Metadata check failed — would fail on PyPI upload."
            exit 1
          }
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.cfg.os }}-${{ matrix.python }}-${{ matrix.cfg.cibw_id }}
          path: ./wheelhouse/*.whl

  check_wheels:
    needs: build
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      actions: read
      contents: read

    name: Verify all built wheels

    steps:
      - name: Download cibw artifacts
        uses: actions/download-artifact@v5
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
        continue-on-error: true
      - name: Verify downloaded wheel integrity and metadata
        run: |
          echo "Verifying downloaded artifacts in dist/"

          N_WHEELS=$(find dist -type f -name '*.whl' | wc -l)
          N_EXPECTED=${EXPECTED_WHEEL_COUNT:-0}
          echo "Found $N_WHEELS wheel(s); expected $N_EXPECTED"

          if [ "$N_WHEELS" -ne "$N_EXPECTED" ]; then
            echo "::error ::Expected $N_EXPECTED wheels, found $N_WHEELS. Some matrix jobs failed or artifacts missing."
            ls -1 dist/
            exit 1
          fi

          echo "Listing wheel structure:"
          find dist -type f -name '*.whl' -printf "%P\n" | sort

          python3 -m pip install --quiet --no-cache-dir twine
          echo "Checking metadata consistency with twine..."
          python3 -m twine check --strict dist/* || {
            echo "::error ::Metadata check failed — would fail on PyPI upload."
            exit 1
          }

  install_and_unit_test:
    needs: build
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      fail-fast: false
      matrix:
        python: [39, 310, 311, 312, 313, 314]
        cfg:
          - { os: ubuntu-latest, cibw_id: manylinux_x86_64 }
          - { os: macos-14, cibw_id: macosx_arm64 }
          - { os: windows-latest, cibw_id: win_amd64 }
    name: Install wheel and run unit tests on ${{ matrix.cfg.os }} for cp${{ matrix.python }}-${{ matrix.cfg.cibw_id }}
    steps:
      - uses: actions/checkout@v4
      - name: Infer full Python version
        id: pyver
        shell: bash
        run: |
          short="${{ matrix.python }}"
          major="${short:0:1}"
          minor="${short:1}"
          echo "version=$major.$minor" >> $GITHUB_OUTPUT
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.pyver.outputs.version }}
      - name: Install Graphviz
        shell: bash
        run: |
          if [[ "${{ matrix.cfg.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y graphviz
          elif [[ "${{ matrix.cfg.os }}" == "macos-14" ]]; then
            brew install graphviz
          elif [[ "${{ matrix.cfg.os }}" == "windows-latest" ]]; then
            choco install graphviz -y
          fi
      - name: Install dev and examples dependencies
        run: |
          pip install tomli  # needed for Python < 3.11
          python scripts/get_dependencies.py dev examples --as-requirements > requirements.txt
          pip install -r requirements.txt
      # For Python <= 3.11: download its exact artifact
      - name: Download built wheel (<=3.11)
        if: ${{ matrix.python <= 311 }}
        uses: actions/download-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.cfg.os }}-${{ matrix.python }}-${{ matrix.cfg.cibw_id }}
          path: dist/
      # For Python >= 3.12: reuse the 3.12 ABI3 artifact
      - name: Download built wheel (>=3.12)
        if: ${{ matrix.python >= 312 }}
        uses: actions/download-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.cfg.os }}-312-${{ matrix.cfg.cibw_id }}
          path: dist/
      - name: Install wheel
        shell: bash
        run: |
          pip install dist/*.whl
      - name: Run tests
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_wait_seconds: 60
          shell: bash
          command: |
            pytest tests/ -r a
      # Override pytest defaults (in pyproject.toml):
      # - disable coverage (not meaningful for notebooks)
      # - run sequentially (-n 1)
      # - extend kernel timeout
      - name: Run notebooks as unit tests
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_wait_seconds: 60
          shell: bash
          command: |
            pytest --nbmake examples/ \
              -n 1 \
              --no-cov \
              --nbmake-timeout=600 \
              --nbmake-kernel=python3

  build_sdist:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Install dependencies
        id: install-dependencies
        uses: vinecopulib/vinecopulib/.github/actions/install-dependencies@dev
        with:
          os: "ubuntu-latest"
          boost_install_dir: "/home/runner/work"
          eigen_install_dir: "/home/runner/work"
          boost_version: ${{ env.BOOST_VERSION }}
          eigen_version: ${{ env.EIGEN_VERSION }}
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Upgrade pip and install build dependency
        run: |
          echo "Boost_INCLUDE_DIR=${{steps.install-dependencies.outputs.BOOST_ROOT}}/include" >> $GITHUB_ENV
          echo "EIGEN3_INCLUDE_DIR=/home/runner/work/include/eigen3" >> $GITHUB_ENV
          python -m pip install --upgrade pip
          pip install build
      - name: Lint and type check
        run: |
          pip install tomli  # Needed for Python < 3.11
          python scripts/get_dependencies.py dev --as-requirements > requirements.txt
          pip install -r requirements.txt
          ruff format --check
          ruff check
          mypy
      - name: Create source distribution
        run: |
          export Boost_INCLUDE_DIR=$Boost_INCLUDE_DIR
          export EIGEN3_INCLUDE_DIR=$EIGEN3_INCLUDE_DIR
          pipx run build --sdist
      - name: Install source distribution
        run: |
          export Boost_INCLUDE_DIR=$Boost_INCLUDE_DIR
          export EIGEN3_INCLUDE_DIR=$EIGEN3_INCLUDE_DIR
          pip install dist/*.tar.gz
      - name: Install dev dependencies for testing
        run: |
          pip install tomli  # Needed for Python < 3.11
          python scripts/get_dependencies.py dev --as-requirements > requirements.txt
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest tests/ -r a
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_to_pypi:
    needs: [build_sdist, check_wheels, install_and_unit_test]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      actions: read
      contents: read
    steps:
      - name: Download cibw artifacts
        uses: actions/download-artifact@v5
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Verify downloaded wheel integrity and metadata
        run: |
          echo "Verifying downloaded artifacts in dist/"

          N_WHEELS=$(find dist -type f -name '*.whl' | wc -l)
          N_EXPECTED=${EXPECTED_WHEEL_COUNT:-0}
          echo "Found $N_WHEELS wheel(s); expected $N_EXPECTED"

          if [ "$N_WHEELS" -ne "$N_EXPECTED" ]; then
            echo "::error ::Expected $N_EXPECTED wheels, found $N_WHEELS. Some matrix jobs failed or artifacts missing."
            ls -1 dist/
            exit 1
          fi

          echo "Listing wheel structure:"
          find dist -type f -name '*.whl' -printf "%P\n" | sort

          python3 -m pip install --quiet --no-cache-dir twine
          echo "Checking metadata consistency with twine..."
          python3 -m twine check dist/* || {
            echo "::error ::Metadata check failed — would fail on PyPI upload."
            exit 1
          }
      - name: Publish distribution Test PyPI
        if: |
          job.status == 'success'
            && github.base_ref == 'main'
            && github.head_ref == 'dev'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.test_pypi_password }}
          repository-url: https://test.pypi.org/legacy/
      - name: Publish distribution to PyPI
        if: |
          job.status == 'success'
            && github.event_name == 'push'
            && startsWith(github.event.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
