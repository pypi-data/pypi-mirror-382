# Pipeline Tool Configuration for the ssiamb pipeline workflow

# 1. INDEX BUILDING
# minimap2 -d ref.mmi ref.fasta
minimap2_index:
  path: ''          # Inherits from minimap2 tool when set via 'ssiamb config set minimap2'
  dump_index: true  # -d: Dump index to file (.mmi extension) (minimap2 default: false - keep in memory)
  kmer_size: 15     # -k: k-mer size, max 28 (minimap2 default: 15)
  window_size: 10   # -w: minimizer window size (minimap2 default: 10)
  split_index: "8G" # -I: split index for every ~NUM input bases (minimap2 default: 8G)
  extra_args: []

# bwa-mem2 index ref.fasta
bwa-mem2_index:
  path: ''              # Inherits from bwa-mem2 tool when set via 'ssiamb config set bwa-mem2'
  prefix: ''            # -p: Index file prefix (bwa-mem2 default: input filename)
  extra_args: []

# 2. READ MAPPING (produces sorted BAM)
# minimap2 -x PRESET -a -t THREADS -R "READ_GROUP" ref.mmi R1.fastq R2.fastq | samtools sort -@ THREADS -o output.bam
minimap2:
  path: ''
  preset: "sr"                          # -x: Short read preset
  output_alignments: true               # -a: Output alignments flag
  read_group_platform: "ILLUMINA"       # -R: Platform for read group (@RG\tPL:ILLUMINA)
  extra_args: []

# bwa-mem2 mem -t THREADS -R "READ_GROUP" ref.fasta R1.fastq R2.fastq | samtools sort -@ THREADS -o output.bam
bwa-mem2:
  path: ''
  read_group_platform: "ILLUMINA"       # -R: Platform for read group (@RG\tPL:ILLUMINA)
  extra_args: []

# 3A. VARIANT CALLING 
# callvariants.sh in=input.bam ref=ref.fasta vcf=output.vcf ploidy=1 clearfilters=t minallelefraction=0.0 minavgmapq=20 minquality=20 threads=4
bbtools:
  callvariants_path: ''        # Path to callvariants.sh executable
  ploidy: 1                    # ploidy=: Organism ploidy (bbtools default: 1)
  clearfilters: true           # clearfilters: Clear all filters to get raw variants (bbtools default: false)
  minallelefraction: 0.0       # minallelefraction=: Minimum allele fraction (bbtools default: 0.1)
  minavgmapq: 0                # minavgmapq=: Minimum average mapping quality (bbtools default: 0.0) - SET TO 0 TO DISABLE
  minquality: 12                # minquality=: Minimum base quality (bbtools default: 12.0) - SET TO 0 TO DISABLE
  extra_args: []

# bcftools mpileup -Ou --threads 4 -q 20 -Q 20 -B --max-depth 100000 -a FORMAT/AD,ADF,ADR,DP -d 1000 -f ref.fasta input.bam | bcftools view --threads 4 -Oz -o output.pileup.vcf.gz
bcftools:
  path: ''
  version_timeout: 5
  # bcftools mpileup -Ou --threads 4 -q 20 -Q 20 -B --max-depth 100000 -a FORMAT/AD,ADF,ADR,DP -d 1000 -f ref.fasta input.bam
  mpileup_output_type: "-Ou"         # -O: Output type (uncompressed BCF)
  mapq_min: 20                       # -q: Minimum mapping quality (bcftools default: 0)
  baseq_min: 20                      # -Q: Minimum base quality (bcftools default: 1)
  disable_baq: true                  # -B: Disable BAQ - per-Base Alignment Quality (bcftools default: enabled)
  max_depth: 100000                  # --max-depth: Maximum depth for pileup (bcftools default: 250)
  annotations: "FORMAT/AD,ADF,ADR,DP" # -a: Format field annotations to output
  mpileup_args: ["-d", "1000"]       # Additional mpileup arguments
  
  # bcftools view --threads 4 -Oz -o output.pileup.vcf.gz
  view_output_type: "-Oz"            # -O: Output type (compressed VCF)
  view_args: []                      # Additional view arguments

# 3B. DEPTH ANALYSIS (runs parallel with variant calling)
# mosdepth --mapq 30 --no-per-base --threads 4 prefix input.bam
mosdepth:
  path: ''
  window_size: 500                   # Internal parameter for region analysis (not used in current pipeline)
  skip_per_base: true                # --no-per-base: Skip per-base depth calculation (mosdepth default: calculate per-base)
  mapq_threshold: 30                 # --mapq: Minimum mapping quality for reads (mosdepth default: 0)
  # threads: Uses CLI thread count (4) - number of threads (mosdepth default: 0/auto)
  extra_args: []

# samtools depth -a input.bam
samtools:
  path: ''
  depth_args: ["-a"]                 # -a: Output all positions including zero coverage (samtools default: skip zero-coverage)
  # -q: Uses mapping quality filter from CLI if needed (samtools default: 0)
  # -Q: Uses base quality filter from CLI if needed (samtools default: 0)
  extra_args: []

# 4. VCF NORMALIZATION (always runs after variant calling)
# bcftools norm -f ref.fasta -m -both --atomize -cw -d exact -Oz -o output.normalized.vcf.gz input.vcf
vcf_normalization:
  path: ''  # Inherits from bcftools tool when set via 'ssiamb config set bcftools'
  split_multiallelic: ["-m", "-both"] # -m -both: Split multiallelic sites to biallelic (bcftools default: no splitting)
  atomize: true                       # --atomize: Decompose complex variants (bcftools default: false)
  check_ref: "w"                      # -c: Check REF alleles and warn (w) vs exit (e) (bcftools default: e)
  remove_duplicates: "exact"          # -d: Remove exact duplicate lines (bcftools default: no removal)
  output_type: "-Oz"                  # -O: Output type compressed VCF (bcftools default: -v uncompressed)
  extra_args: []

# 5. OPTIONAL OUTPUT COMPRESSION/INDEXING (only if --emit-* flags used)
# bgzip -c input.vcf > output.vcf.gz / bgzip -c input.bed > output.bed.gz  
bgzip:
  path: ''
  stdout_compress: true              # -c: Write to stdout, keep original files unchanged (bgzip default: compress in-place)
  # compression_level: Uses default compression level (bgzip default: -1)
  # threads: Uses single thread (bgzip default: 1)
  extra_args: []

# tabix -p vcf output.vcf.gz / tabix -p bed output.bed.gz
tabix:
  path: ''
  vcf_preset: "vcf"                  # -p vcf: Use VCF preset for indexing (tabix default: no preset)
  bed_preset: "bed"                  # -p bed: Use BED preset for indexing (tabix default: no preset)
  # force_overwrite: Uses default behavior (tabix default: ask before overwriting)
  extra_args: []