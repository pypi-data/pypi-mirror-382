# Authors: The scikit-plots developers
# SPDX-License-Identifier: BSD-3-Clause

"""Contains CITATION.bib contents at the time of building this package."""

######################################################################
## This file is generated by scikitplot's build process
## It contains CITATION.bib contents at the time of building this package.
######################################################################
import pathlib

from scikitplot import logger

_built_with_meson = True

__all__ = [
  "__bibtex__",
  "__citation__",
]

######################################################################
## Create CONFIG by CITATION.bib contents
######################################################################

CITATION = r"""% --------------------------------------------------------------------
% CITATION.bib file for
% This file provides citation information for users
% who want to cite the library, related papers, and books.
% --------------------------------------------------------------------

@software{scikit-plots:vlatest,
  author  = { The scikit-plots developers },
  license = { BSD-3-Clause },
  doi     = { 10.5281/zenodo.13367000 },
  month   = { 11 },
  title   = {{ scikit-plots: Machine Learning Visualization in Python }},
  url     = { https://github.com/scikit-plots/scikit-plots },
  version = { latest },
  year    = { 2024 },
  note    = { Documentation available at \url{ https://scikit-plots.github.io/dev } },
  message = { Scikit-plot is the result of an unartistic data scientist's dreadful realization that visualization is one of the most crucial components in the data science process, not just a mere afterthought. },
}"""

# Set the bibtex entry to the article referenced in CITATION.
def _get_bibtex(
  preferred_type:str = 'software',
  ):
    _bibtex = ''
    try:
        # Attempt to read the CITATION.bib file
        refs = (pathlib.Path(__file__).parent / "../CITATION.bib").read_text().split(f"@{preferred_type}")[1:][0]
        _bibtex = f"@{preferred_type}{refs}" if refs else ""
        logger.debug("_bibtex from file CITATION.bib")
    except FileNotFoundError:
        # If CITATION.bib file is not found,
        # fall back to the defined CITATION text string
        refs = CITATION.split(f"@{preferred_type}")[1:][0]
        _bibtex = f"@{preferred_type}{refs}" if refs else ""
        logger.debug("_bibtex from attr CITATION text")
    except Exception as e:
        # Handle any unexpected errors
        logger.error(f"Unexpected error while reading CITATION.bib: {e}")
    return _bibtex

__bibtex__ = __citation__ = _get_bibtex()

######################################################################
## ...
######################################################################
