# Authors: The scikit-plots developers
# SPDX-License-Identifier: BSD-3-Clause

# +-------------+------------------------------------------------------------+----------------------------+---------------------------------------------------------------+
# | Tool        | Create Environment                                         | ‚ö†Ô∏è Activate Environment    | Critical Notes                                                |
# +=============+============================================================+============================+===============================================================+
# | conda       | conda create -n py311 python=3.11                          | conda activate py311       | Full Anaconda distribution with many preinstalled packages.   |
# +-------------+------------------------------------------------------------+----------------------------+---------------------------------------------------------------+
# | miniconda   | conda create -n py311 python=3.11                          | conda activate py311       | Minimal installer. Lightweight. Recommended for most users.   |
# +-------------+------------------------------------------------------------+----------------------------+---------------------------------------------------------------+
# | mamba       | mamba create -n py311 python=3.11                          | conda activate py311       | Drop-in faster alternative to `conda`. Needs conda to run.    |
# +-------------+------------------------------------------------------------+----------------------------+---------------------------------------------------------------+
# | micromamba  | micromamba create -n py311 python=3.11                     | micromamba activate py311  | No Python or conda needed. Very fast. Shell hook required.    |
# +-------------+------------------------------------------------------------+----------------------------+---------------------------------------------------------------+

# Use conda if you want the full Anaconda experience on local machines. Full-featured but heavy. Best for GUI users or those needing full Anaconda.
# Use miniconda for lighter installs with more manual control. Lightweight, clean base. Ideal for custom setups.
# Use mamba for speed, especially when resolving complex dependencies interactively. Same usage as conda, but much faster. Great for large envs.
# Use micromamba in containers, CI/CD, or when minimal overhead is critical. Tiny single binary, perfect for Docker, CI/CD, and scripting.

# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Feature                 | conda      | miniconda    | mamba           | micromamba       | Critical Notes                                           |
# +=========================+============+============+========+==============+=========================================================================+
# | Size                    | Large      | Medium       | Large           | Very Small       | micromamba is ideal for minimal or embedded environments |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Language                | Python     | Python       | C++             | C++              | mamba/micromamba are faster due to compiled language     |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Installation            | GUI/CLI    | CLI          | via conda/pip   | Static binary    | micromamba: no Python needed, portable                   |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Speed                   | Slow       | Slow         | Fast            | Very Fast        | mamba/micromamba offer drastically faster performance    |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Conda env creation      | ‚úÖ         | ‚úÖ          | ‚úÖ              | ‚úÖ              | All support full conda environments                      |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Scripting / Docker      | ‚ö†Ô∏è Heavy   | ‚ö†Ô∏è Moderate | ‚ö†Ô∏è Heavy        | ‚úÖ Lightweight  | micromamba is best suited for Docker and automation      |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Activation support      | ‚úÖ         | ‚úÖ          | ‚úÖ              | ‚úÖ (via hook)   | micromamba requires manual shell integration             |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Use in CI/CD            | ‚ö†Ô∏è Slower  | ‚ö†Ô∏è Moderate | ‚úÖ Fast         | ‚úÖ Best         | micromamba is ideal for CI/CD pipelines                  |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | GPU support             | ‚úÖ         | ‚úÖ          | ‚úÖ              | ‚úÖ              | All support CUDA & GPU packages                          |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+
# | Platform support        | All        | All          | All             | All              | micromamba supports Linux/macOS/Windows (via shell)      |
# +-------------------------+------------+--------------+-----------------+------------------+----------------------------------------------------------+

# üõ† How to Use It
# -----------------------------------------------------------------------------
# This file installs optional/extended packages.
# Use it *after* installing default.yml:
#
#   conda env update --name your-env-name --file extended.yml
#
# Or create a new environment with both files:
#   conda create --name my-env
#   conda env update --name my-env --file default.yml
#   conda env update --name my-env --file extended.yml
#
# Extended includes:
# - Model tracking (MLflow, SQLAlchemy)
# - Deployment tools (FastAPI, Streamlit, Gunicorn)
# - Dev/test/documentation tooling
# -----------------------------------------------------------------------------

## ‚úÖ How to Set channel_priority Correctly
## üìÑ Example .condarc
## Default priority (non-strict), Strict priority locks package selection to channels by order, improving stability.
# channel_priority: strict

## You can place .condarc in:
## Your home directory: ~/.condarc
## Or set it system-wide (e.g., /etc/conda/.condarc)
## Or pass via command line:
##   - conda config --set channel_priority strict
---
name: py312

channels:
  - conda-forge    # ‚úÖ Preferred: community-driven, most packages, up-to-date, great for mamba/micromamba
  # - nvidia             # NVIDIA GPU libraries and drivers
  - defaults       # ‚òëÔ∏è Standard Official Anaconda-maintained packages fallback
  - anaconda       # ‚ö†Ô∏è Optional, if you need Anaconda snapshot of defaults; only include if reproducing Anaconda dist

dependencies:
  - python=3.12
  - ipykernel

  # üìä Model Tracking and DB
  - mlflow               # Model tracking
  - sqlalchemy           # SQL ORM
  - sqlparse             # SQL formatting

  # üöÄ Model Deployment
  - streamlit            # Web apps for ML
  - fastapi              # Async API framework
  - flask                # Minimal API framework
  - uvicorn              # ASGI server for FastAPI
  - waitress             # WSGI for Windows
  - gunicorn             # WSGI for Unix

  # ‚öôÔ∏è Development Tools
  - setuptools
  - wheel
  - build
  - pre_commit

  # üõ†Ô∏è C/C++ Dev & Compilation
  - conda-lock
  - meson
  - ninja
  - meson-python
  - cython
  - pybind11
  - pythran

  # üìö Documentation
  - sphinx
  - numpydoc

  # üß™ Testing
  - hypothesis
  - pytest
  - cython-lint
  - pandas-stubs

  # üì¶ Requirements generation
  - pipreqs
  - pipenv

  # üì¶ Optional pip section (can be removed if unused)
  # - pip
  # - pip:
  #     # - your-package
  #     - -r requirements/build.txt
  #     - aggdraw

  # üñºÔ∏è Additional Visualization
  # - aggdraw              # Antialiased drawing for PIL
