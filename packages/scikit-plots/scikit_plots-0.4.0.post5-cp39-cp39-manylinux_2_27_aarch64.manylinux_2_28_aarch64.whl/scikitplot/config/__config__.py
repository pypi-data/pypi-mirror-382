# fmt: off
# ruff: noqa
# ruff: noqa: PGH004
# flake8: noqa
# pylint: skip-file
# mypy: ignore-errors
# type: ignore

# This module was copied from the scipy project.
# https://github.com/scipy/scipy/blob/main/scipy/__config__.py.in

"""Contains system_info results at the time of building this package."""

######################################################################
## This file is generated by scikitplot's build process
## It contains system_info results at the time of building this package.
######################################################################
from enum import Enum

_built_with_meson = True

__all__ = ["show_config"]

######################################################################
## Create CONFIG dictionary
######################################################################

def _cleanup(d: dict):
  """
  Removes empty values in a `dict` recursively
  This ensures we remove values that Meson could not provide to CONFIG
  """
  if isinstance(d, dict):
    return { k: _cleanup(v) for k, v in d.items() if v != '' and _cleanup(v) != '' }
  else:
    return d

# Create a base CONFIG dictionary
CONFIG = _cleanup(
  {
    "Build Dependencies": {
      "blas": {
        "name": "scipy-openblas",
        "found": bool("True".lower().replace('false', '')),
        "version": "0.3.29.dev",
        "detection method": "pkgconfig",
        "include directory": r"/opt/_internal/cpython-3.9.23/lib/python3.9/site-packages/scipy_openblas64/include",
        "lib directory": r"/opt/_internal/cpython-3.9.23/lib/python3.9/site-packages/scipy_openblas64/lib",
        "openblas configuration": r"OpenBLAS 0.3.29.dev  USE64BITINT DYNAMIC_ARCH NO_AFFINITY neoversev2 MAX_THREADS=64",
        "pc file directory": r"/project/.openblas",
      },
      "lapack": {
        "name": "scipy-openblas",
        "found": bool("True".lower().replace('false', '')),
        "version": "0.3.29.dev",
        "detection method": "pkgconfig",
        "include directory": r"/opt/_internal/cpython-3.9.23/lib/python3.9/site-packages/scipy_openblas64/include",
        "lib directory": r"/opt/_internal/cpython-3.9.23/lib/python3.9/site-packages/scipy_openblas64/lib",
        "openblas configuration": r"OpenBLAS 0.3.29.dev  USE64BITINT DYNAMIC_ARCH NO_AFFINITY neoversev2 MAX_THREADS=64",
        "pc file directory": r"/project/.openblas",
      },
      "pybind11": {
        "name": "pybind11",
        "version": "3.0.1",
        "detection method": "config-tool",
        "include directory": r"unknown",
      },
    },
    "Compilers": {
      "fortran": {
        "name": "gcc",
        "linker": r"ld.bfd",
        "version": "14.2.1",
        "commands": r"gfortran",
        "args": r"",
        "linker args": r"",
      },
      "c": {
        "name": "gcc",
        "linker": r"ld.bfd",
        "version": "14.2.1",
        "commands": r"cc",
        "args": r"",
        "linker args": r"",
      },
      "c++": {
        "name": "gcc",
        "linker": r"ld.bfd",
        "version": "14.2.1",
        "commands": r"c++",
        "args": r"",
        "linker args": r"",
      },
      "cython": {
        "name": r"cython",
        "linker": r"cython",
        "version": r"3.1.4",
        "commands": r"cython",
        "args": r"",
        "linker args": r"",
      },
      "pythran": {
        "version": r"",
        "include directory": r""
      },
    },
    "Machine Information": {
      "build": {
        "cpu": r"aarch64",
        "family": r"aarch64",
        "endian": r"little",
        "system": r"linux",
      },
      "cross-compiled": bool("False".lower().replace('false', '')),
      "host": {
        "cpu": r"aarch64",
        "family": r"aarch64",
        "endian": r"little",
        "system": r"linux",
      },
    },
    "Python Information": {
      "path": r"/tmp/build-env-bjfjmsk6/bin/python",
      "version": "3.9",
    },
  }
)

######################################################################
## Display CONFIG dictionary
######################################################################

def _check_pyyaml():
  import yaml
  return yaml

# Define the Enum class for display modes
class DisplayModes(Enum):
  # Add Enum member for compare members reliably
  # to ensure they belong to DisplayModes.
  # Enum provides built-in methods like .name, .value, etc. that use raw values
  # When you want immutability, iterability, or additional methods associated with the members.
  # Type-Safe Comparisons: You want to ensure only valid members are used.
  # Avoiding Silent Errors: Typos or invalid values should raise explicit errors.
  # Boolean Logic: You need to check if a variable is a valid member of the enumeration.
  stdout = "stdout"  # Output to standard output
  dicts  = "dicts"   # Output as dictionaries

  def describe(self):
    if self == DisplayModes.stdout:
      return "Displays output to the terminal."
    elif self == DisplayModes.dicts:
      return "Displays output as dictionaries."

# Function that accepts either raw value or Enum member
def _set_display_mode(mode:str = 'stdout'):
  """
  Sets the display mode based on the provided raw value
  or Enum member.
  """
  # Handle if mode is a string (raw value) or an Enum member
  if isinstance(mode, str):
    try:
      mode = DisplayModes(mode)  # Convert string to Enum member
      print(f"Mode set to: {mode.name} ({mode.value})")
      print(mode.describe())  # Call the describe method for each mode
    except ValueError:
      print(f"Error: '{mode}' is not a valid DisplayMode.")
      return
  elif isinstance(mode, DisplayModes):
    print(f"Mode set to: {mode.name} ({mode.value})")
    print(mode.describe())  # Call the describe method for each mode
  else:
    print("Invalid type. Mode must be a string or a DisplayModes Enum member.")
    return

def show_config(mode=DisplayModes.stdout.value): # Value of the enum member
  """
  Show libraries and system information on which SciPy was built
  and is being used

  Parameters
  ----------
  mode : {`'stdout'`, `'dicts'`}, optional.
      Indicates how to display the config information.
      `'stdout'` prints to console, `'dicts'` returns a dictionary
      of the configuration.

  Returns
  -------
  out : {`dict`, `None`}
      If mode is `'dicts'`, a dict is returned, else None

  Notes
  -----
  1. The `'stdout'` mode will give more readable
     output if ``pyyaml`` is installed

  Examples
  --------
  .. jupyter-execute::

      >>> import scikitplot
      >>> scikitplot.show_config()
  """
  if mode == DisplayModes.stdout.value:
    try:  # Non-standard library, check import
      # Serializes a Python object (such as dictionaries) into a YAML-formatted string.
      yaml = _check_pyyaml()
      # Converts the dictionary to YAML format
      print(yaml.dump(CONFIG))
    except ModuleNotFoundError:
      # Serializes a Python object (e.g., a dictionary) into a JSON-formatted string.
      import json
      import warnings
      warnings.warn("Install `pyyaml` for better output", stacklevel=1)
      # Convert Python dictionary to JSON string
      print(json.dumps(CONFIG, indent=2, separators=(',', ': ')))
  elif mode == DisplayModes.dicts.value:
    try:  # Non-standard library, check import
      # print Python objects in a human-readable format
      from pprint import pprint
      # Pretty-print the dictionary like JSON string
      pprint(CONFIG)
    except ModuleNotFoundError:
      return CONFIG
  else:
    raise AttributeError(
      f"Invalid `mode`, use one of: {', '.join([e.value for e in DisplayModes])}"
    )

######################################################################
## ...
######################################################################
