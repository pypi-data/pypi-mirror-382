---
name: Python CI

"on":
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - released

env:
  DEBIAN_FRONTEND: noninteractive
  CARGO_INCREMENTAL: "false"
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        job:
          - black
          - mypy
          - ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: pipx install poetry || true
      - uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"
          cache: "poetry"
      - run: poetry install --only=dev
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: taiki-e/install-action@v2
        with:
          tool: just
      - run: poetry run just ci-lint-${{ matrix.job }}
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "pypy3.9"
          - "3.10"
          - "pypy3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.13t"
          - "3.14"
          - "3.14t"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: pipx install poetry || true
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - run: poetry install --only=dev
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: taiki-e/install-action@v2
        with:
          tool: just
      - run: poetry run just ci-build-python
      - uses: actions/upload-artifact@v4
        with:
          name: python-${{ matrix.python-version }}-build
          path: dist
  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        job:
          - mit
          # Several issues in k5test preventing us from running kadmind with it currently
          # - h5l
        python-version:
          - "3.9"
          - "pypy3.9"
          - "3.10"
          - "pypy3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.13t"
          - "3.14"
          - "3.14t"
    runs-on: ubuntu-latest
    env:
      KRB5_TRACE: /dev/stderr
    steps:
      - uses: actions/checkout@v5
      - shell: bash
        run: |
          pipx install poetry || true
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - run: poetry install --only=test
      - uses: taiki-e/install-action@v2
        with:
          tool: just
      - uses: actions/download-artifact@v5
        with:
          name: python-${{ matrix.python-version }}-build
          path: dist
      - run: |
          PATH="/usr/lib/heimdal-servers:$PATH" poetry run just ci-test-python-${{ matrix.job }}
  check-python:
    if: always()
    needs:
      - lint
      - build
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
  build-sdist:
    needs: check-python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - run: pipx install poetry || true
      - uses: actions/setup-python@v6
        with:
          python-version-file: pyproject.toml
          cache: "poetry"
      - run: poetry install --only=dev
      - uses: taiki-e/install-action@v2
        with:
          tool: just
      - run: poetry run just ci-build-python-sdist
      - uses: actions/upload-artifact@v4
        with:
          name: python-cibw-sdist
          path: dist/*.tar.gz
  build-wheels-matrix:
    needs: check-python
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - run: pipx install poetry || true
      - uses: actions/setup-python@v6
        with:
          python-version-file: pyproject.toml
          cache: "poetry"
      - run: poetry install --only=dev
      - id: set-matrix
        name: compute matrix
        run: |
          MATRIX="$(
            {
              poetry run cibuildwheel --print-build-identifiers --platform linux --archs x86_64,aarch64 \
                | sed 's/.*/{"cibw-only": "&", "os": "ubuntu-latest"}/' \
              && poetry run cibuildwheel --print-build-identifiers --platform macos --archs x86_64 \
                | sed 's/.*/{"cibw-only": "&", "os": "macos-13" }/' \
              && poetry run cibuildwheel --print-build-identifiers --platform macos --archs arm64 \
                | sed 's/.*/{"cibw-only": "&", "os": "macos-14" }/'
            } | jq --slurp --compact-output '{"include": .}'
          )"
          echo matrix="$MATRIX" >> "$GITHUB_OUTPUT"
  build-wheels:
    needs: build-wheels-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-wheels-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: docker/setup-qemu-action@v3
        if: runner.os == 'Linux'
        with:
          platforms: all
      - uses: pypa/cibuildwheel@v3.2.0
        with:
          only: "${{ matrix.cibw-only }}"
        env:
          RUSTC_WRAPPER: ""
      - uses: actions/upload-artifact@v4
        with:
          name: python-cibw-wheels-${{ matrix.cibw-only }}
          path: ./wheelhouse/*.whl
  merge-dist-artifacts:
    needs:
      - build-sdist
      - build-wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/upload-artifact/merge@v4
        with:
          name: python-dist
          pattern: python-cibw-*
          delete-merged: false
  release:
    needs:
      - check-python
      - merge-dist-artifacts
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/kadmin/version/')
    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: python-cibw-*
          path: dist
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1
