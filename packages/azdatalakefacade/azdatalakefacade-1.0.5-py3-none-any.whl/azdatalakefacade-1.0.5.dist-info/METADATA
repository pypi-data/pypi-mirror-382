Metadata-Version: 2.1
Name: azdatalakefacade
Version: 1.0.5
Summary: A package to implement a singleton for azure data storage gen2
Home-page: https://github.com/amedinag32/azdatalakefacade
Author: Alan Medina
Author-email: amedina.escom@hotmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: PyJWT (==2.9.0)
Requires-Dist: SQLAlchemy (==2.0.36)
Requires-Dist: azure-core (==1.32.0)
Requires-Dist: azure-data-tables (==12.6.0)
Requires-Dist: azure-identity (==1.19.0)
Requires-Dist: azure-storage-blob (==12.24.1)
Requires-Dist: azure-storage-file-datalake (==12.18.1)
Requires-Dist: azure-storage-queue (==12.12.0)
Requires-Dist: certifi (==2024.12.14)
Requires-Dist: cffi (==1.17.1)
Requires-Dist: charset-normalizer (==3.4.0)
Requires-Dist: cryptography (==44.0.0)
Requires-Dist: greenlet (==3.1.1)
Requires-Dist: idna (==3.10)
Requires-Dist: isodate (==0.7.2)
Requires-Dist: msal-extensions (==1.2.0)
Requires-Dist: msal (==1.31.1)
Requires-Dist: multidict (==6.1.0)
Requires-Dist: numpy (==1.24.4)
Requires-Dist: pandas (==2.0.3)
Requires-Dist: pandasql (==0.7.3)
Requires-Dist: portalocker (==2.10.1)
Requires-Dist: propcache (==0.2.0)
Requires-Dist: pycparser (==2.22)
Requires-Dist: python-dateutil (==2.9.0.post0)
Requires-Dist: pytz (==2024.2)
Requires-Dist: requests (==2.32.3)
Requires-Dist: six (==1.17.0)
Requires-Dist: typing-extensions (==4.12.2)
Requires-Dist: tzdata (==2024.2)
Requires-Dist: urllib3 (==2.2.3)
Requires-Dist: yarl (==1.15.2)


---

# AZ Data Lake

## Instalación

```bash
pip3 install azdatalakefacade
```

## Manual de uso
1. **Variables de Entorno**

| Variable | Tipo de dato |
|:-|-:|
|AZ_DATA_LAKE_STRING_CONNECTION|string|
|AZ_CONTAINNER_CLI|string|

2. **Funciones**:
   - **`upload_file(blob_name, data)`**: Este método permite subir un archivo a azure data storage gen2.
   - **`upsert_data_to_table(table_name, data)`**: Este método permite subir datos a una tabla de azure data storage gen2.
   - **`send_data_to_queue(queue_name, data)`**: Este método permite subir datos a una cola de azure data storage gen2.
   - **`get_messages_from_queue(queue_name, max_messages)`**: Este método permite obtener datos de una cola de azure data storage gen2.
   - **`get_table_data(table_name, partition_key, row_key)`**: Este método permite obtener datos de una tabla de azure data storage gen2.
   - **`get_all_table_data(table_name, partition_key, row_key)`**: Este método permite obtener una tabla de azure data storage gen2.
   - **`get_data_by_partition(table_name, partition_key, row_key)`**: Este método permite obtener los datos de una particion de una tabla de azure data storage gen2.
   - **`get_csv(blob_name)`**: Este método permite obtener datos de un csv de azure data storage gen2 y retorna un dataframe.

3. **Ejemplos de Uso**
```py
from azdatalakefacade.singleton import AzDataLakeSingleton

# Crear instancia del singleton
az = AzDataLakeSingleton()

# Consultar datos de un csv
content = az.get_csv(blob_name="mis_datos.csv")
print(content)

# Subir un archivo
az.upload_file("local.csv", az.read_file_as_bytes("local.csv"))

# Consulta datos de una tabla
data = az.get_table_data("unitest3", "480217418839", 23)
print(data)

# actualizar datos de una tabla
az.upsert_data_to_table(table_name="unitest3", data=data)

# obtener tabla completa
data = az.get_all_table_data("alarmassolis")
print("tabla obtenidos: ")
print(data)


# obtener particion de tabla
data = az.get_data_by_partition("alarmassolis", "1298491919449258694_2025_01")
print("tabla obtenidos: ")
print(data)



```

---

By: Alan Medina ⚙️


