[tool.poetry]
name = "qctrl-client"
version = "15.0.0"
description = "Q-CTRL Client"
license = "https://q-ctrl.com/terms"
authors = ["Q-CTRL <support@q-ctrl.com>"]
maintainers = ["Q-CTRL <support@q-ctrl.com>"]
readme = "README.md"
homepage = "https://q-ctrl.com"
documentation = "https://docs.q-ctrl.com"
keywords = [
  "black opal",
  "boulder opal",
  "fire opal",
  "nisq",
  "open controls",
  "q control",
  "q ctrl",
  "q-control",
  "q-ctrl",
  "qcontrol",
  "qctrl",
  "quantum",
  "quantum algorithms",
  "quantum circuits",
  "quantum coding",
  "quantum coding software",
  "quantum computing",
  "quantum control",
  "quantum control software",
  "quantum control theory",
  "quantum engineering",
  "quantum error correction",
  "quantum firmware",
  "quantum fundamentals",
  "quantum sensing",
  "qubit",
  "qudit",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Visualization",
  "Topic :: Software Development :: Embedded Systems",
  "Topic :: System :: Distributed Computing",
]
packages = [{ include = "qctrlclient" }]

[tool.poetry.urls]
LinkedIn = "https://www.linkedin.com/company/q-ctrl/"
Facebook = "https://www.facebook.com/qctrl"
X = "https://x.com/qctrlHQ"
YouTube = "https://www.youtube.com/qctrl"
GitHub = "https://github.com/qctrl"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = 'Artifactory'
url = 'https://qctrl.jfrog.io/artifactory/api/pypi/qctrl/simple/'
priority = "supplemental"

[tool.poetry.dependencies]
python = ">=3.10, <3.14"
PyJWT = "^2.0.0"
gql = "^3.0.0"
graphql-core = "^3.0.0"
oauthlib = "^3.0.0"
requests = "^2.0.0"
requests-oauthlib = "^2.0.0"
tenacity = "^9.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^7.0.0"
pytest-mock = "^3.12.0"
pre-commit = "^4.2.0"
ruff = "^0.13.3"
mypy = "^1.15.0"
types-requests = "^2.32.0.20250328"
deptry = "^0.23.0"
qctrl-mkdocs-theme = "^1.0.1"
mkdocs = "^1.6.1"

[tool.ruff]
target-version = "py310"

[tool.ruff.format]
exclude = [
  ".git",
  ".github",
  ".pytest_cache",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Rules to add back later
  "ANN",    # Missing type annotation
  "EM",     # Exception must not use a string literal (improves error message clarity)
  "D104",   # Missing docstring in public package

  # Against q-ctrl convention
  "DJ008",  # Model does not define `__str__` method
  "FIX",    # Line contains TODO
  "S101",   # Use of `assert` detected
  "TD002",  # Missing author in TODO

  # Overly prescriptive
  "CPY",     # Missing copyright notice at top of file
  "D105",    # Missing docstring in magic method
  "D205",    # 1 blank line required between summary line and description
  "D400",    # First line should end with a period
  "D401",    # First line of docstring should be in imperative mood
  "FBT",     # Boolean-typed positional arguments
  "SIM108",  # Use ternary operator instead of `if`-`else`-block
  "TRY003",  # Avoid specifying long messages outside the exception class


  # Previously excluded from pylint
  "D100",     # missing-module-docstring
  "FIX001",   # fixme
  "PLR0912",  # too-many-branches
  "PLR0913",  # too-many-arguments
  "PLR0914",  # too-many-locals
  "PLR0915",  # too-many-statements

  # conflict with other rules
  "D203",  # 1 blank line required before class docstring
  "D212",  # Multi-line docstring summary should start at the first line

  # conflict with formatter
  "COM812",  # Trailing comma missing
  "E501",    # Line too long ({width} > {limit})
  "ISC001",  # Implicitly concatenated string literals on one line

  # clashes with pydantic
  "RUF012",  # Mutable class attributes should be annotated with typing.ClassVar
]
exclude = [
  "venv",
]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401", "F403"] # ignore unused and * imports in __init__
"{_,test_,[0123456789],Mock,Test,conftest}*" = [ # ignore rules in test files
  "ARG001",  # unused arg
  "D",       # docstrings
  "PLR2004", # magic values
  "S",       # security
  "SLF001",  # private member access
]
"qctrlclient/auth/cli.py" = ["T201"]
"qctrlclient/auth/redirect_listener.py" = ["T201"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
python_version = "3.10"
strict = true  # Enables all mypy checks
allow_subclassing_any = true  # Not all third-party libraries are type-hinted
ignore_missing_imports = true  # Not all third-party libraries are type-hinted
allow_untyped_calls = true  # Not all third-party libraries are type-hinted
warn_return_any = false  # Not all third-party libraries are type-hinted
warn_unreachable = true  # Checks for unreachable code, often due to isinstance checks

[[tool.mypy.overrides]]
module = "tests.*"
disallow_incomplete_defs = false  # Pytest fixture usage is not worth retroactively type hinting
disallow_untyped_defs = false  # Pytest fixture usage is not worth retroactively type hinting

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.deptry]
extend_exclude = [
  "tests/.*",  # Exclude all test files
  "qctrlclient/pytest_plugin.py",  # Exclude pytest plugins
]

[tool.deptry.per_rule_ignores]
DEP002 = [                # Unused Dependencies
]
