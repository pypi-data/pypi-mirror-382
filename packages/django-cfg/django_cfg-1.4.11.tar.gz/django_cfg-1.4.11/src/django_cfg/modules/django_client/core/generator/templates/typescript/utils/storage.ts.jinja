/**
 * Storage adapters for cross-platform token storage.
 *
 * Supports:
 * - LocalStorage (browser)
 * - Cookies (SSR/browser)
 * - Memory (Node.js/Electron/testing)
 */

/**
 * Storage adapter interface for cross-platform token storage.
 */
export interface StorageAdapter {
  getItem(key: string): string | null;
  setItem(key: string, value: string): void;
  removeItem(key: string): void;
}

/**
 * LocalStorage adapter with safe try-catch for browser environments.
 * Works in modern browsers with localStorage support.
 */
export class LocalStorageAdapter implements StorageAdapter {
  getItem(key: string): string | null {
    try {
      if (typeof window !== 'undefined' && window.localStorage) {
        return localStorage.getItem(key);
      }
    } catch (error) {
      console.warn('LocalStorage not available:', error);
    }
    return null;
  }

  setItem(key: string, value: string): void {
    try {
      if (typeof window !== 'undefined' && window.localStorage) {
        localStorage.setItem(key, value);
      }
    } catch (error) {
      console.warn('LocalStorage not available:', error);
    }
  }

  removeItem(key: string): void {
    try {
      if (typeof window !== 'undefined' && window.localStorage) {
        localStorage.removeItem(key);
      }
    } catch (error) {
      console.warn('LocalStorage not available:', error);
    }
  }
}

/**
 * Cookie-based storage adapter for SSR and browser environments.
 * Useful for Next.js, Nuxt.js, and other SSR frameworks.
 */
export class CookieStorageAdapter implements StorageAdapter {
  getItem(key: string): string | null {
    try {
      if (typeof document === 'undefined') return null;
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${key}=`);
      if (parts.length === 2) {
        return parts.pop()?.split(';').shift() || null;
      }
    } catch (error) {
      console.warn('Cookies not available:', error);
    }
    return null;
  }

  setItem(key: string, value: string): void {
    try {
      if (typeof document !== 'undefined') {
        document.cookie = `${key}=${value}; path=/; max-age=31536000`;
      }
    } catch (error) {
      console.warn('Cookies not available:', error);
    }
  }

  removeItem(key: string): void {
    try {
      if (typeof document !== 'undefined') {
        document.cookie = `${key}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT`;
      }
    } catch (error) {
      console.warn('Cookies not available:', error);
    }
  }
}

/**
 * In-memory storage adapter for Node.js, Electron, and testing environments.
 * Data is stored in RAM and cleared when process exits.
 */
export class MemoryStorageAdapter implements StorageAdapter {
  private storage: Map<string, string> = new Map();

  getItem(key: string): string | null {
    return this.storage.get(key) || null;
  }

  setItem(key: string, value: string): void {
    this.storage.set(key, value);
  }

  removeItem(key: string): void {
    this.storage.delete(key);
  }
}
