package main

/*
#include <stdlib.h>
*/
import "C"
import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"time"
	"unsafe"

	_ "github.com/mattn/go-sqlite3"
	"go.mau.fi/whatsmeow"
	waProto "go.mau.fi/whatsmeow/binary/proto"
	"go.mau.fi/whatsmeow/store/sqlstore"
	"go.mau.fi/whatsmeow/types"
	"go.mau.fi/whatsmeow/types/events"
	waLog "go.mau.fi/whatsmeow/util/log"
	"google.golang.org/protobuf/proto"
)

type Response struct {
	Status       string   `json:"status"`
	Error        string   `json:"error,omitempty"`
	MessageID    string   `json:"message_id,omitempty"`
	LastMessages []string `json:"last_messages,omitempty"`
}

var lastReceivedMessages []string
var lastReceivedMessagesMu sync.Mutex

//export WaRun
func WaRun(dbURI, phone, message *C.char) *C.char {
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º C-—Å—Ç—Ä–æ–∫–∏ –≤ Go-—Å—Ç—Ä–æ–∫–∏
	goDBURI := C.GoString(dbURI)
	goPhone := C.GoString(phone)
	goMessage := C.GoString(message)

	// –í–ê–ñ–ù–û: –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
	fmt.Printf("[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç Python:\n")
	fmt.Printf("  DB: %s\n", goDBURI)
	fmt.Printf("  Phone: %s\n", goPhone)
	fmt.Printf("  Message: '%s' (–¥–ª–∏–Ω–∞: %d –±–∞–π—Ç)\n", goMessage, len(goMessage))

	resp := &Response{Status: "ok"}
	ctx := context.Background()

	lastReceivedMessagesMu.Lock()
	lastReceivedMessages = lastReceivedMessages[:0]
	lastReceivedMessagesMu.Unlock()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
	log := waLog.Stdout("Client", "INFO", true)
	container, err := sqlstore.New(ctx, "sqlite3", goDBURI, log)
	if err != nil {
		resp.Status = "error"
		resp.Error = fmt.Sprintf("failed to init db: %v", err)
		return marshalResponse(resp)
	}
	defer container.Close()

	deviceStore, err := container.GetFirstDevice(ctx)
	if err != nil {
		resp.Status = "error"
		resp.Error = fmt.Sprintf("failed to get device: %v", err)
		return marshalResponse(resp)
	}

	client := whatsmeow.NewClient(deviceStore, log)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	client.AddEventHandler(func(evt interface{}) {
		switch v := evt.(type) {
		case *events.Message:
			if v.Message == nil {
				return
			}
			text := v.Message.GetConversation()
			if text == "" && v.Message.ExtendedTextMessage != nil {
				text = v.Message.ExtendedTextMessage.GetText()
			}
			if text != "" {
				sender := "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"
				if v.Info.IsFromMe {
					sender = "–¢—ã"
				}
				msg := fmt.Sprintf("[%s] %s", sender, text)
				lastReceivedMessagesMu.Lock()
				lastReceivedMessages = append(lastReceivedMessages, msg)
				lastReceivedMessagesMu.Unlock()
				fmt.Println("üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg)
			}
		}
	})

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
	err = client.Connect()
	if err != nil {
		resp.Status = "error"
		resp.Error = fmt.Sprintf("failed to connect: %v", err)
		return marshalResponse(resp)
	}
	defer client.Disconnect()

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WhatsApp!")
	fmt.Println("–ñ–¥—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
	time.Sleep(3 * time.Second)

	recipientJID := types.NewJID(goPhone, types.DefaultUserServer)

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ - —ç—Ç–æ —Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è
	if goMessage == "" || len(goMessage) == 0 {
		fmt.Println("üìñ –†–µ–∂–∏–º —á—Ç–µ–Ω–∏—è (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")

		fmt.Println("üëÇ –°–ª—É—à–∞—é –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥...")
		time.Sleep(10 * time.Second)

		lastReceivedMessagesMu.Lock()
		if len(lastReceivedMessages) == 0 {
			fmt.Println("‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
		}

		resp.LastMessages = append([]string(nil), lastReceivedMessages...)
		lastReceivedMessagesMu.Unlock()
		return marshalResponse(resp)
	}

	// –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏
	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ...\n")
	fmt.Printf("   –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: '%s'\n", goMessage)
	fmt.Printf("   –ü–æ–ª—É—á–∞—Ç–µ–ª—é: %s\n", goPhone)

	// –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
	if goMessage == "" {
		resp.Status = "error"
		resp.Error = "message is empty after conversion"
		return marshalResponse(resp)
	}

	msgToSend := &waProto.Message{
		Conversation: proto.String(goMessage),
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏
	if msgToSend.Conversation == nil || *msgToSend.Conversation == "" {
		resp.Status = "error"
		resp.Error = "failed to create message proto"
		fmt.Println("‚ùå –û–®–ò–ë–ö–ê: Conversation = nil –∏–ª–∏ –ø—É—Å—Ç–∞—è!")
		return marshalResponse(resp)
	}

	fmt.Printf("‚úÖ Proto —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: '%s'\n", *msgToSend.Conversation)

	sendResp, err := client.SendMessage(context.Background(), recipientJID, msgToSend)
	if err != nil {
		resp.Status = "error"
		resp.Error = fmt.Sprintf("failed to send: %v", err)
		return marshalResponse(resp)
	}

	fmt.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: %s\n", sendResp.ID)
	resp.MessageID = sendResp.ID

	// –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	fmt.Println("üëÇ –°–ª—É—à–∞—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(10 * time.Second)

	lastReceivedMessagesMu.Lock()
	messagesCopy := append([]string(nil), lastReceivedMessages...)
	lastReceivedMessagesMu.Unlock()
	resp.LastMessages = messagesCopy

	fmt.Println("–û—Ç–∫–ª—é—á–∞—é—Å—å...")
	return marshalResponse(resp)
}

func marshalResponse(resp *Response) *C.char {
	data, _ := json.Marshal(resp)
	result := C.CString(string(data))
	fmt.Printf("üì¶ –û—Ç–≤–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: %s\n", string(data))
	return result
}

//export WaFree
func WaFree(ptr *C.char) {
	C.free(unsafe.Pointer(ptr))
}

func main() {}
