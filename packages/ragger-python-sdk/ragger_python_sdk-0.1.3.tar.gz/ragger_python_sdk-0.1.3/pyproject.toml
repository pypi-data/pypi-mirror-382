# Poetry Configuration for Ragger Python SDK
# ============================================
# This file replaces setup.py and requirements.txt with modern Python packaging standards.
# Poetry provides superior dependency management, virtual environment handling, and build tools.

[tool.poetry]
# Basic package metadata - corresponds to setup.py configuration
name = "ragger-python-sdk"
version = "0.1.3"
description = "Python SDK for ragger.ai RAG API"
authors = ["Ragger Team <support@ragger.ai>"]
readme = "README.md"
homepage = "https://github.com/RaggerAI/python-sdk"
repository = "https://github.com/RaggerAI/python-sdk"
documentation = "https://github.com/RaggerAI/python-sdk#readme"
license = "MIT"

# Package discovery - tells Poetry which directories contain our code
packages = [{ include = "ragger_sdk" }]

# Keywords for PyPI searchability - help users discover the SDK
keywords = [
  "rag",
  "retrieval",
  "augmented",
  "generation",
  "ai",
  "llm",
  "nlp",
  "vector",
  "search",
  "embeddings",
  "semantic-search",
  "document-processing",
]

# PyPI classifiers - categorize the package for users
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Text Processing :: Indexing",
]

[tool.poetry.dependencies]
# Production dependencies - these are installed when users do 'pip install ragger-python-sdk'
# These correspond to the current requirements.txt and setup.py install_requires

# Python version constraint - SDK supports Python 3.8.1+ (required by modern dev tools)
python = "^3.9"

# HTTP client for API communication - core dependency for all endpoint classes
requests = "^2.31.0"

# Environment variable loading - used in examples and optional for users
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
# Development dependencies - only installed when developing the SDK
# These replace the setup.py extras_require["dev"] section
# Install with: poetry install (includes dev) or poetry install --only dev

# Testing framework and coverage reporting
pytest = "^7.4"     # Core testing framework with modern features
pytest-cov = "^4.1" # Coverage reporting for pytest

# Code formatting and style
black = "^24.8.0" # Modern code formatter compatible with Click 8.x (security fix)
isort = "^5.13"   # Import sorting and organization

# Linting and static analysis
flake8 = "^6.0"               # Style guide enforcement (Python 3.8.1+ compatible)
flake8-docstrings = "^1.7"    # Docstring style checking
flake8-import-order = "^0.18" # Import order validation

# Type checking
mypy = "^1.8"            # Modern static type checker
types-requests = "^2.32" # Updated type stubs for requests library

# Development workflow tools
pre-commit = "^3.6" # Modern version for Python 3.9+
# Safety and security
safety = "^3.0" # Dependency vulnerability checking
bandit = "^1.7" # Security linting for Python
# tox = "^3.24"        # Testing across multiple Python versions
detect-secrets = "^1.5.0"

[tool.poetry.group.docs.dependencies]
# Documentation dependencies - for generating API docs and user guides
# Install with: poetry install --with docs

sphinx = "^4.0"                    # Documentation generation framework
sphinx-rtd-theme = "^1.0"          # Read the Docs theme for Sphinx
sphinx-autodoc-typehints = "^1.12" # Auto-generate type hints in docs
myst-parser = "^0.18"              # Markdown support in Sphinx

[tool.poetry.group.examples.dependencies]
# Dependencies specifically for running examples
# These are optional and only needed for example scripts
# Install with: poetry install --with examples

# jupyter = "^1.0" # For Jupyter notebook examples
# rich = "^12.0"   # For beautiful terminal output in examples
# click = "^8.0" # For CLI-based examples

[build-system]
# Modern Python build system specification
# This replaces the old setup.py build process
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool-specific configurations
# ============================

[tool.black]
# Black code formatter configuration
# Ensures consistent code style across the entire SDK

line-length = 100         # Match flake8 line length
target-version = ['py38'] # Target Python 3.8+ syntax
include = '\.pyi?$'       # Format .py and .pyi files

skip-string-normalization = true
# Preview features for better single-line import handling
preview = true

# Exclude directories that shouldn't be formatted
extend-exclude = '''
    /(
    # Version control and build artifacts
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
    | __pycache__
    )/
'''

[tool.isort]
# Import sorting configuration - STRICT single-line imports
profile = "black"                     # Base compatibility with Black
line_length = 100                     # Match Black line length
multi_line_output = 0                 # Grid mode for single imports per line
force_single_line = true              # Force every import to be on its own line
include_trailing_comma = false        # No trailing commas in single-line mode
use_parentheses = false               # No parentheses wrapping
ensure_newline_before_comments = true
force_grid_wrap = 0                   # Don't wrap in grids
split_on_trailing_comma = false       # Don't split based on commas

# Import organization - helps maintain clean code structure
known_first_party = ["ragger_sdk"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
# MyPy static type checking configuration
# Ensures type safety across the SDK codebase

python_version = "3.8"                  # Minimum supported Python version
warn_return_any = true                  # Warn about functions returning Any
warn_unused_configs = true              # Warn about unused mypy configurations
warn_redundant_casts = true             # Warn about unnecessary type casts
warn_unused_ignores = true              # Warn about unused # type: ignore comments
disallow_untyped_defs = true            # Require type annotations for better code quality
disallow_incomplete_defs = true         # Require complete type annotations for public functions
check_untyped_defs = true               # Type-check untyped function bodies
ignore_missing_imports = false          # Better error detection (use type: ignore where needed)
show_error_codes = true                 # Show specific error codes for easier fixing
disable_error_code = ["import-untyped"]

# Specific overrides for different parts of the codebase
[[tool.mypy.overrides]]
module = "ragger_sdk.endpoints.*"
disallow_untyped_defs = true      # Stricter typing for endpoint classes

[[tool.mypy.overrides]]
module = "ragger_sdk.client"
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false # More relaxed typing for tests

[tool.pytest.ini_options]
# Pytest testing framework configuration
# Defines how tests are discovered and executed

# Test discovery patterns
testpaths = ["tests"]                     # Look for tests in the tests/ directory
python_files = ["test_*.py", "*_test.py"] # Test file naming patterns
python_classes = ["Test*"]                # Test class naming patterns
python_functions = ["test_*"]             # Test function naming patterns

# Output and reporting
addopts = [
  "--strict-config",    # Treat config warnings as errors
  "--strict-markers",   # Treat unknown markers as errors
  "--disable-warnings", # Reduce noise in test output
  "--tb=short",         # Shorter traceback format
  "-ra",                # Show summary of all test results
]

# Test markers - for categorizing and selecting tests
markers = [
  "unit: Unit tests that don't require external dependencies",
  "integration: Integration tests that may require API access",
  "slow: Tests that take a long time to run",
  "network: Tests that require network access",
]

# Coverage reporting configuration
[tool.coverage.run]
source = ["ragger_sdk"] # Measure coverage for our package
branch = true # Include branch coverage
omit = [
  "*/tests/*",     # Exclude test files from coverage
  "*/examples/*",  # Exclude examples from coverage
  "*/__init__.py", # Exclude __init__.py files
]

[tool.coverage.report]
# Coverage reporting options
precision = 2        # Decimal places in coverage percentages
show_missing = true  # Show line numbers for missing coverage
skip_covered = false # Show files with 100% coverage
sort = "Cover"       # Sort by coverage percentage

# Exclude lines from coverage (e.g., debug code, type checking)
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov" # HTML coverage report directory
