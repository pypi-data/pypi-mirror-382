{"version":3,"file":"static/js/prism-lang.prism-odin.95d25af4.chunk.js","mappings":"qFAAC,SAAUA,GACV,IAAIC,EAAU,8EAEdD,EAAME,UAAUC,KAAO,CAOtB,QAAW,CACV,CACCC,QAAS,8EACTC,QAAQ,GAET,CACCD,QAAS,aACTC,QAAQ,GAET,CACCD,QAAS,eACTC,QAAQ,IAOV,KAAQ,CACPD,QAAS,kDACTC,QAAQ,EACRC,OAAQ,CACP,OAAUL,IAIZ,OAAU,CACT,CACCG,QAAS,UACTC,QAAQ,GAET,CACCD,QAAS,wBACTC,QAAQ,EACRC,OAAQ,CACP,OAAUL,KAKb,UAAa,CACZG,QAAS,OACTG,MAAO,YAGR,OAAU,qLAEV,QAAW,CACVH,QAAS,QACTG,MAAO,WAGR,uBAAwB,CACvBH,QAAS,mCACTG,MAAO,YAGR,QAAW,wPAKX,iBAAkB,CACjBH,QAAS,oBACTG,MAAO,YAGR,QAAW,yBAEX,0BAA2B,CAC1BH,QAAS,KACTG,MAAO,aAGR,UAAa,CACZH,QAAS,MACTG,MAAO,YAGR,MAAS,CACRH,QAAS,KACTG,MAAO,eAGR,SAAY,yDAEZ,YAAe,kBAEhB,CAlGA,CAkGCP,M","sources":["../node_modules/prismjs/components/prism-odin.js"],"sourcesContent":["(function (Prism) {\n\tvar escapes = /\\\\(?:[\"'\\\\abefnrtv]|0[0-7]{2}|U[\\dA-Fa-f]{6}|u[\\dA-Fa-f]{4}|x[\\dA-Fa-f]{2})/;\n\n\tPrism.languages.odin = {\n\t\t/**\n\t\t * The current implementation supports only 1 level of nesting.\n\t\t *\n\t\t * @author Michael Schmidt\n\t\t * @author edukisto\n\t\t */\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: /\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:\\*(?!\\/)|[^*])*(?:\\*\\/|$))*(?:\\*\\/|$)/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /#![^\\n\\r]*/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\/\\/[^\\n\\r]*/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\n\t\t/**\n\t\t * Should be found before strings because of '\"'\"- and '`'`-like sequences.\n\t\t */\n\t\t'char': {\n\t\t\tpattern: /'(?:\\\\(?:.|[0Uux][0-9A-Fa-f]{1,6})|[^\\n\\r'\\\\])'/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'symbol': escapes\n\t\t\t}\n\t\t},\n\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: /`[^`]*`/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\"(?:\\\\.|[^\\n\\r\"\\\\])*\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'symbol': escapes\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\n\t\t'directive': {\n\t\t\tpattern: /#\\w+/,\n\t\t\talias: 'property'\n\t\t},\n\n\t\t'number': /\\b0(?:b[01_]+|d[\\d_]+|h_*(?:(?:(?:[\\dA-Fa-f]_*){8}){1,2}|(?:[\\dA-Fa-f]_*){4})|o[0-7_]+|x[\\dA-F_a-f]+|z[\\dAB_ab]+)\\b|(?:\\b\\d+(?:\\.(?!\\.)\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d*)?[ijk]?(?!\\w)/,\n\n\t\t'discard': {\n\t\t\tpattern: /\\b_\\b/,\n\t\t\talias: 'keyword'\n\t\t},\n\n\t\t'procedure-definition': {\n\t\t\tpattern: /\\b\\w+(?=[ \\t]*(?::\\s*){2}proc\\b)/,\n\t\t\talias: 'function'\n\t\t},\n\n\t\t'keyword': /\\b(?:asm|auto_cast|bit_set|break|case|cast|context|continue|defer|distinct|do|dynamic|else|enum|fallthrough|for|foreign|if|import|in|map|matrix|not_in|or_else|or_return|package|proc|return|struct|switch|transmute|typeid|union|using|when|where)\\b/,\n\n\t\t/**\n\t\t * false, nil, true can be used as procedure names. \"_\" and keywords can't.\n\t\t */\n\t\t'procedure-name': {\n\t\t\tpattern: /\\b\\w+(?=[ \\t]*\\()/,\n\t\t\talias: 'function'\n\t\t},\n\n\t\t'boolean': /\\b(?:false|nil|true)\\b/,\n\n\t\t'constant-parameter-sign': {\n\t\t\tpattern: /\\$/,\n\t\t\talias: 'important'\n\t\t},\n\n\t\t'undefined': {\n\t\t\tpattern: /---/,\n\t\t\talias: 'operator'\n\t\t},\n\n\t\t'arrow': {\n\t\t\tpattern: /->/,\n\t\t\talias: 'punctuation'\n\t\t},\n\n\t\t'operator': /\\+\\+|--|\\.\\.[<=]?|(?:&~|[-!*+/=~]|[%&<>|]{1,2})=?|[?^]/,\n\n\t\t'punctuation': /[(),.:;@\\[\\]{}]/\n\t};\n}(Prism));\n"],"names":["Prism","escapes","languages","odin","pattern","greedy","inside","alias"],"sourceRoot":""}