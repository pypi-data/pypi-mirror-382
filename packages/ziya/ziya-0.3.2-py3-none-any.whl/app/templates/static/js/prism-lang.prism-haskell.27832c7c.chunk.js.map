{"version":3,"file":"static/js/prism-lang.prism-haskell.27832c7c.chunk.js","mappings":"oFAAAA,MAAMC,UAAUC,QAAU,CACzB,QAAW,CACVC,QAAS,4FACTC,YAAY,GAEb,KAAQ,CACPD,QAAS,sMACTE,MAAO,UAER,OAAU,CACTF,QAAS,+BACTG,QAAQ,GAET,QAAW,wHACX,mBAAoB,CAInBH,QAAS,sIACTC,YAAY,EACZG,OAAQ,CACP,QAAW,qCACX,YAAe,OAIjB,QAAW,yoDAEX,OAAU,4DACV,SAAY,CACX,CAECJ,QAAS,mCACTG,QAAQ,GAET,CAECH,QAAS,eACTC,YAAY,GASb,gFAGD,UAAa,CACZD,QAAS,mCACTI,OAAQ,CACP,YAAe,OAGjB,SAAY,CACXJ,QAAS,kCACTI,OAAQ,CACP,YAAe,OAGjB,YAAe,iBAGhBP,MAAMC,UAAUO,GAAKR,MAAMC,UAAUC,O","sources":["../node_modules/prismjs/components/prism-haskell.js"],"sourcesContent":["Prism.languages.haskell = {\n\t'comment': {\n\t\tpattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n\t\tlookbehind: true\n\t},\n\t'char': {\n\t\tpattern: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n\t\talias: 'string'\n\t},\n\t'string': {\n\t\tpattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n\t\tgreedy: true\n\t},\n\t'keyword': /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n\t'import-statement': {\n\t\t// The imported or hidden names are not included in this import\n\t\t// statement. This is because we want to highlight those exactly like\n\t\t// we do for the names in the program.\n\t\tpattern: /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'keyword': /\\b(?:as|hiding|import|qualified)\\b/,\n\t\t\t'punctuation': /\\./\n\t\t}\n\t},\n\t// These are builtin variables only. Constructors are highlighted later as a constant.\n\t'builtin': /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n\t// decimal integers and floating point numbers | octal integers | hexadecimal integers\n\t'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n\t'operator': [\n\t\t{\n\t\t\t// infix operator\n\t\t\tpattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\t// function composition\n\t\t\tpattern: /(\\s)\\.(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t// Most of this is needed because of the meaning of a single '.'.\n\t\t// If it stands alone freely, it is the function composition.\n\t\t// It may also be a separator between a module name and an identifier => no\n\t\t// operator. If it comes together with other special characters it is an\n\t\t// operator too.\n\t\t//\n\t\t// This regex means: /[-!#$%*+=?&@|~.:<>^\\\\\\/]+/ without /\\./.\n\t\t/[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/,\n\t],\n\t// In Haskell, nearly everything is a variable, do not highlight these.\n\t'hvariable': {\n\t\tpattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\n\t\tinside: {\n\t\t\t'punctuation': /\\./\n\t\t}\n\t},\n\t'constant': {\n\t\tpattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\n\t\tinside: {\n\t\t\t'punctuation': /\\./\n\t\t}\n\t},\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\nPrism.languages.hs = Prism.languages.haskell;\n"],"names":["Prism","languages","haskell","pattern","lookbehind","alias","greedy","inside","hs"],"sourceRoot":""}