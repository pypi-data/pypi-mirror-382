{"version":3,"file":"static/js/prism-lang.prism-http.83c7381a.chunk.js","mappings":"qFAAC,SAAUA,GAMV,SAASC,EAAcC,GACtB,OAAOC,OAAO,QAAUD,EAAO,yBAA0B,IAC1D,CAEAF,EAAMI,UAAUC,KAAO,CACtB,eAAgB,CACfC,QAAS,6GACTC,OAAQ,CAEP,OAAU,CACTD,QAAS,YACTE,MAAO,YAGR,iBAAkB,CACjBF,QAAS,mCACTG,YAAY,EACZD,MAAO,MACPD,OAAQP,EAAMI,UAAUM,KAGzB,eAAgB,CACfJ,QAAS,oBACTG,YAAY,EACZD,MAAO,cAIV,kBAAmB,CAClBF,QAAS,wBACTC,OAAQ,CAEP,eAAgB,CACfD,QAAS,gBACTE,MAAO,YAGR,cAAe,CACdF,QAAS,iBACTG,YAAY,EACZD,MAAO,UAGR,gBAAiB,CAChBF,QAAS,UACTG,YAAY,EACZD,MAAO,YAIV,OAAU,CACTF,QAAS,sCACTC,OAAQ,CACP,eAAgB,CACf,CACCD,QAASL,EAAc,0BAA0BU,QACjDF,YAAY,EACZD,MAAO,CAAC,MAAO,iBACfD,OAAQP,EAAMI,UAAUQ,KAEzB,CACCN,QAASL,EAAc,mCAAmCU,QAC1DF,YAAY,EACZD,MAAO,CAAC,OAAQ,kBAChBD,OAAQP,EAAMI,UAAUS,MAEzB,CACCP,QAASL,EAAc,4BAA4BU,QACnDF,YAAY,EACZD,MAAO,CAAC,OAAQ,kBAChBD,OAAQP,EAAMI,UAAUU,MAEzB,CACCR,QAASL,EAAc,QAAQU,QAC/BF,YAAY,IAGd,cAAe,CACdH,QAAS,SACTE,MAAO,WAER,YAAe,QAMlB,IA+BIO,EA/BAC,EAAQhB,EAAMI,UACda,EAAgB,CACnB,yBAA0BD,EAAME,WAChC,mBAAoBF,EAAMG,MAAQH,EAAME,WACxC,kBAAmBF,EAAMI,IACzB,WAAYJ,EAAMI,IAClB,YAAaJ,EAAMK,KACnB,WAAYL,EAAMM,IAClB,aAAcN,EAAMO,OAIjBC,EAAc,CACjB,oBAAoB,EACpB,mBAAmB,GASpB,SAASC,EAAiBC,GACzB,IAAIC,EAASD,EAAYE,QAAQ,YAAa,IAE9C,MAAO,MAAQF,EAAc,KADT,wBAA0BC,EAAS,gBACJ,GACpD,CAKA,IAAK,IAAID,KAAeT,EACvB,GAAIA,EAAcS,GAAc,CAC/BX,EAAUA,GAAW,CAAC,EAEtB,IAAIT,EAAUkB,EAAYE,GAAeD,EAAiBC,GAAeA,EACzEX,EAAQW,EAAYE,QAAQ,MAAO,MAAQ,CAC1CtB,QAASH,OACR,IAAM,mBAAmBQ,OAASL,EAAU,iDAAiDK,OAAS,IAMtG,mBAAmBA,OACnB,KAEDF,YAAY,EACZF,OAAQU,EAAcS,GAExB,CAEGX,GACHf,EAAMI,UAAUyB,aAAa,OAAQ,SAAUd,EAGhD,CAtJA,CAsJCf,M","sources":["../node_modules/prismjs/components/prism-http.js"],"sourcesContent":["(function (Prism) {\n\n\t/**\n\t * @param {string} name\n\t * @returns {RegExp}\n\t */\n\tfunction headerValueOf(name) {\n\t\treturn RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i');\n\t}\n\n\tPrism.languages.http = {\n\t\t'request-line': {\n\t\t\tpattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Method\n\t\t\t\t'method': {\n\t\t\t\t\tpattern: /^[A-Z]+\\b/,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t\t// Request Target e.g. http://example.com, /path/to/file\n\t\t\t\t'request-target': {\n\t\t\t\t\tpattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'url',\n\t\t\t\t\tinside: Prism.languages.uri\n\t\t\t\t},\n\t\t\t\t// HTTP Version\n\t\t\t\t'http-version': {\n\t\t\t\t\tpattern: /^(\\s)HTTP\\/[\\d.]+/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\t'response-status': {\n\t\t\tpattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Version\n\t\t\t\t'http-version': {\n\t\t\t\t\tpattern: /^HTTP\\/[\\d.]+/,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t\t// Status Code\n\t\t\t\t'status-code': {\n\t\t\t\t\tpattern: /^(\\s)\\d+(?=\\s)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'number'\n\t\t\t\t},\n\t\t\t\t// Reason Phrase\n\t\t\t\t'reason-phrase': {\n\t\t\t\t\tpattern: /^(\\s).+/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'header': {\n\t\t\tpattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n\t\t\tinside: {\n\t\t\t\t'header-value': [\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Content-Security-Policy/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['csp', 'languages-csp'],\n\t\t\t\t\t\tinside: Prism.languages.csp\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['hpkp', 'languages-hpkp'],\n\t\t\t\t\t\tinside: Prism.languages.hpkp\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Strict-Transport-Security/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['hsts', 'languages-hsts'],\n\t\t\t\t\t\tinside: Prism.languages.hsts\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/[^:]+/.source),\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'header-name': {\n\t\t\t\t\tpattern: /^[^:]+/,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'punctuation': /^:/\n\t\t\t}\n\t\t}\n\t};\n\n\t// Create a mapping of Content-Type headers to language definitions\n\tvar langs = Prism.languages;\n\tvar httpLanguages = {\n\t\t'application/javascript': langs.javascript,\n\t\t'application/json': langs.json || langs.javascript,\n\t\t'application/xml': langs.xml,\n\t\t'text/xml': langs.xml,\n\t\t'text/html': langs.html,\n\t\t'text/css': langs.css,\n\t\t'text/plain': langs.plain\n\t};\n\n\t// Declare which types can also be suffixes\n\tvar suffixTypes = {\n\t\t'application/json': true,\n\t\t'application/xml': true\n\t};\n\n\t/**\n\t * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n\t *\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tfunction getSuffixPattern(contentType) {\n\t\tvar suffix = contentType.replace(/^[a-z]+\\//, '');\n\t\tvar suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n\t\treturn '(?:' + contentType + '|' + suffixPattern + ')';\n\t}\n\n\t// Insert each content type parser that has its associated language\n\t// currently loaded.\n\tvar options;\n\tfor (var contentType in httpLanguages) {\n\t\tif (httpLanguages[contentType]) {\n\t\t\toptions = options || {};\n\n\t\t\tvar pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n\t\t\toptions[contentType.replace(/\\//g, '-')] = {\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t'(' + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + ')' +\n\t\t\t\t\t// This is a little interesting:\n\t\t\t\t\t// The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n\t\t\t\t\t// However, when writing code by hand (e.g. to display on a website) people can forget about this,\n\t\t\t\t\t// so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n\t\t\t\t\t// the body does not start with a [\\w-] character (as headers do).\n\t\t\t\t\t/[^ \\t\\w-][\\s\\S]*/.source,\n\t\t\t\t\t'i'\n\t\t\t\t),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: httpLanguages[contentType]\n\t\t\t};\n\t\t}\n\t}\n\tif (options) {\n\t\tPrism.languages.insertBefore('http', 'header', options);\n\t}\n\n}(Prism));\n"],"names":["Prism","headerValueOf","name","RegExp","languages","http","pattern","inside","alias","lookbehind","uri","source","csp","hpkp","hsts","options","langs","httpLanguages","javascript","json","xml","html","css","plain","suffixTypes","getSuffixPattern","contentType","suffix","replace","insertBefore"],"sourceRoot":""}