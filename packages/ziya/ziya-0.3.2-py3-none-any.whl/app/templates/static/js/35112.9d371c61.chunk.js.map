{"version":3,"file":"static/js/35112.9d371c61.chunk.js","mappings":"6LAgBA,MA+HA,EA/HgCA,KAC5B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAqB,KAChDG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAmB,KAEvDK,EAAAA,EAAAA,YAAU,KACNC,GAAe,IAGnB,MAAMA,EAAgBC,UAClB,IAEI,MAAMC,QAAiBC,MAAM,cACvBC,QAAoBF,EAASG,OAEnCP,EAAcM,EAAYE,QAAOC,IAAQA,EAAIC,WAAW,QAExD,MAAMC,EAA0B,GAGhC,IAAK,MAAMC,KAAYN,EAAa,CAEhC,GAAIM,EAASF,WAAW,KAAM,SAG9B,MAAMG,QAAyBR,MAAM,cAADS,OAAeF,IAC7CG,QAAkBF,EAAiBN,OAGnCS,EAAYD,EAAUP,QAAOS,GAAKA,EAAEC,SAAS,WAEnD,IAAK,MAAMC,KAAYH,EAAW,CAC9B,MAAMI,EAAWD,EAASE,QAAQ,QAAS,IACrCC,EAAU,GAAAR,OAAMM,EAAQ,WAE9B,GAAIL,EAAUQ,SAASD,GAAa,CAEhC,MAAOE,EAAaC,SAAuBC,QAAQC,IAAI,CACnDtB,MAAM,cAADS,OAAeF,EAAQ,KAAAE,OAAIK,IAAYS,MAAKC,GAAKA,EAAEC,SACxDzB,MAAM,cAADS,OAAeF,EAAQ,KAAAE,OAAIQ,IAAcM,MAAKC,GAAKA,EAAEC,WAG9DnB,EAAYoB,KAAK,CACbC,GAAG,GAADlB,OAAKF,EAAQ,KAAAE,OAAIM,GACnBa,KAAMb,EACNc,YAAY,GAADpB,OAAKF,EAAQ,OAAAE,OAAMM,GAC9Be,KAAMX,EACNY,cAAeX,EACfY,WAAYC,EAAkBd,GAC9Be,OAAQ,UACR3B,YAER,CACJ,CACJ,CAEAd,EAAaa,EACjB,CAAE,MAAO6B,GACLC,QAAQD,MAAM,4BAA6BA,GAC3CE,EAAAA,GAAQF,MAAM,4BAClB,GAGEF,EAAqBH,IAEvB,MAAMQ,EAAQR,EAAKQ,MAAM,sBACzB,OAAOA,EAAQA,EAAM,GAAK,EAAE,EAuDhC,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,MAAM,qCACL,C","sources":["components/ApplyDiffTest.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, message } from 'antd';\n\ninterface TestCase {\n    id: string;\n    name: string;\n    description: string;\n    diff: string;\n    targetFile: string;\n    targetContent: string;\n    status: 'pending' | 'success' | 'failed';\n    error?: string;\n    lastRun?: string;\n    category: string;\n}\n\nconst ApplyDiffTest: React.FC = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [testCases, setTestCases] = useState<TestCase[]>([]);\n    const [categories, setCategories] = useState<string[]>([]);\n\n    useEffect(() => {\n        loadTestCases();\n    });\n\n    const loadTestCases = async () => {\n        try {\n            // First, scan the testcases directory\n            const response = await fetch('/testcases');\n            const directories = await response.json();\n\n            setCategories(directories.filter(dir => !dir.startsWith('.')));\n\n            const loadedTests: TestCase[] = [];\n\n            // For each category directory\n            for (const category of directories) {\n                // Skip hidden directories and files\n                if (category.startsWith('.')) continue;\n\n                // Load all test cases in this category\n                const categoryResponse = await fetch(`/testcases/${category}`);\n                const testFiles = await categoryResponse.json();\n\n                // Look for pairs of .diff and .source files\n                const diffFiles = testFiles.filter(f => f.endsWith('.diff'));\n\n                for (const diffFile of diffFiles) {\n                    const baseName = diffFile.replace('.diff', '');\n                    const sourceFile = `${baseName}.source`;\n\n                    if (testFiles.includes(sourceFile)) {\n                        // Load the test case content\n                        const [diffContent, sourceContent] = await Promise.all([\n                            fetch(`/testcases/${category}/${diffFile}`).then(r => r.text()),\n                            fetch(`/testcases/${category}/${sourceFile}`).then(r => r.text())\n                        ]);\n\n                        loadedTests.push({\n                            id: `${category}-${baseName}`,\n                            name: baseName,\n                            description: `${category} - ${baseName}`,\n                            diff: diffContent,\n                            targetContent: sourceContent,\n                            targetFile: extractTargetFile(diffContent),\n                            status: 'pending',\n                            category\n                        });\n                    }\n                }\n            }\n\n            setTestCases(loadedTests);\n        } catch (error) {\n            console.error('Error loading test cases:', error);\n            message.error('Failed to load test cases');\n        }\n    };\n\n    const extractTargetFile = (diff: string): string => {\n        // Extract target file from diff header\n        const match = diff.match(/^\\+\\+\\+ b\\/(.*?)$/m);\n        return match ? match[1] : '';\n    };\n\n    const saveTestCases = (cases: TestCase[]) => {\n        try {\n            localStorage.setItem('ZIYA_DIFF_TEST_CASES', JSON.stringify(cases));\n            setTestCases(cases);\n        } catch (error) {\n            console.error('Error saving test cases:', error);\n        }\n    };\n\n    const runTest = async (testCase: TestCase) => {\n        try {\n            const response = await fetch('/api/apply-changes', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    diff: testCase.diff,\n                    filePath: testCase.targetFile\n                }),\n            });\n\n            // Get error text if response is not ok\n            const errorText = !response.ok ? await response.text() : undefined;\n\n            const newCases: TestCase[] = testCases.map(tc => tc.id === testCase.id\n                ? {\n                    ...tc,\n                    status: response.ok ? 'success' as const : 'failed' as const,\n                    error: errorText,\n                    lastRun: new Date().toISOString()\n                } : tc);\n\n            saveTestCases(newCases);\n\n            message.info(`Test ${response.ok ? 'succeeded' : 'failed'}`);\n        } catch (error) {\n\n            const newCases: TestCase[] = testCases.map(tc =>\n                tc.id === testCase.id ? {\n                    ...tc,\n                    status: 'failed' as const,\n                    error: error instanceof Error ? error.message : 'Unknown error',\n                    lastRun: new Date().toISOString()\n                } : tc\n            );\n\n            saveTestCases(newCases);\n            message.error('Test failed');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <Card title=\"Debug View: Apply Diff Test Cases\">\n        </Card>\n    );\n};\n\nexport default ApplyDiffTest;\n"],"names":["ApplyDiffTest","isLoading","setIsLoading","useState","testCases","setTestCases","categories","setCategories","useEffect","loadTestCases","async","response","fetch","directories","json","filter","dir","startsWith","loadedTests","category","categoryResponse","concat","testFiles","diffFiles","f","endsWith","diffFile","baseName","replace","sourceFile","includes","diffContent","sourceContent","Promise","all","then","r","text","push","id","name","description","diff","targetContent","targetFile","extractTargetFile","status","error","console","message","match","_jsx","Card","title"],"sourceRoot":""}