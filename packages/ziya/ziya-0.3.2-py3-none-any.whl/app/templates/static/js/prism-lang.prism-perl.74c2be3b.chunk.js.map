{"version":3,"file":"static/js/prism-lang.prism-perl.74c2be3b.chunk.js","mappings":"oFAAC,SAAUA,GAEV,IAAIC,EAAW,6GAA6GC,OAE5HF,EAAMG,UAAUC,KAAO,CACtB,QAAW,CACV,CAECC,QAAS,2BACTC,YAAY,EACZC,QAAQ,GAET,CACCF,QAAS,gBACTC,YAAY,EACZC,QAAQ,IAIV,OAAU,CACT,CACCF,QAASG,OACR,qCAAqCN,OACrC,MACA,CAEC,mDAAmDA,OAInD,2CAA2CA,OAM3CD,GACCQ,KAAK,KACP,KAEDF,QAAQ,GAIT,CACCF,QAAS,mCACTE,QAAQ,GAKT,CACCF,QAAS,wBACTE,QAAQ,IAGV,MAAS,CACR,CACCF,QAASG,OACR,+BAA+BN,OAC/B,MACA,CAEC,mDAAmDA,OAInD,2CAA2CA,OAM3CD,GACCQ,KAAK,KACP,IACA,mBAAmBP,QAEpBK,QAAQ,GAIT,CACCF,QAASG,OACR,yCAAyCN,OACzC,MACA,CAGC,8EAA8EA,OAI9E,sEAAsEA,OAOtED,EAAW,MAAMC,OAASD,GACzBQ,KAAK,KACP,IACA,qBAAqBP,QAEtBI,YAAY,EACZC,QAAQ,GAOT,CACCF,QAAS,4HACTE,QAAQ,IAKV,SAAY,CAEX,sBAEA,kBAEA,kBAEA,sDAEA,aAGA,qDAED,WAAc,CAEbF,QAAS,uBACTK,MAAO,UAER,WAAY,CAEXL,QAAS,kCACTK,MAAO,UAER,SAAY,CACXL,QAAS,mBACTC,YAAY,GAEb,QAAW,6MACX,OAAU,8GACV,SAAY,gNACZ,YAAe,eAGhB,CA3JA,CA2JCN,M","sources":["../node_modules/prismjs/components/prism-perl.js"],"sourcesContent":["(function (Prism) {\n\n\tvar brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n\n\tPrism.languages.perl = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\t// POD\n\t\t\t\tpattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\$])#.*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t// TODO Could be nice to handle Heredoc too.\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source +\n\t\t\t\t\t'(?:' +\n\t\t\t\t\t[\n\t\t\t\t\t\t// q/.../\n\t\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n\n\t\t\t\t\t\t// q a...a\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n\n\t\t\t\t\t\t// q(...)\n\t\t\t\t\t\t// q{...}\n\t\t\t\t\t\t// q[...]\n\t\t\t\t\t\t// q<...>\n\t\t\t\t\t\tbrackets,\n\t\t\t\t\t].join('|') +\n\t\t\t\t\t')'\n\t\t\t\t),\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// \"...\", `...`\n\t\t\t{\n\t\t\t\tpattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// '...'\n\t\t\t// FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n\t\t\t{\n\t\t\t\tpattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'regex': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source +\n\t\t\t\t\t'(?:' +\n\t\t\t\t\t[\n\t\t\t\t\t\t// m/.../\n\t\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n\n\t\t\t\t\t\t// m a...a\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n\n\t\t\t\t\t\t// m(...)\n\t\t\t\t\t\t// m{...}\n\t\t\t\t\t\t// m[...]\n\t\t\t\t\t\t// m<...>\n\t\t\t\t\t\tbrackets,\n\t\t\t\t\t].join('|') +\n\t\t\t\t\t')' +\n\t\t\t\t\t/[msixpodualngc]*/.source\n\t\t\t\t),\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// The lookbehinds prevent -s from breaking\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source +\n\t\t\t\t\t'(?:' +\n\t\t\t\t\t[\n\t\t\t\t\t\t// s/.../.../\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n\n\t\t\t\t\t\t// s a...a...a\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source,\n\n\t\t\t\t\t\t// s(...)(...)\n\t\t\t\t\t\t// s{...}{...}\n\t\t\t\t\t\t// s[...][...]\n\t\t\t\t\t\t// s<...><...>\n\t\t\t\t\t\t// s(...)[...]\n\t\t\t\t\t\tbrackets + /\\s*/.source + brackets,\n\t\t\t\t\t].join('|') +\n\t\t\t\t\t')' +\n\t\t\t\t\t/[msixpodualngcer]*/.source\n\t\t\t\t),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// /.../\n\t\t\t// The look-ahead tries to prevent two divisions on\n\t\t\t// the same line from being highlighted as regex.\n\t\t\t// This does not support multi-line regex.\n\t\t\t{\n\t\t\t\tpattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\n\t\t// FIXME Not sure about the handling of ::, ', and #\n\t\t'variable': [\n\t\t\t// ${^POSTMATCH}\n\t\t\t/[&*$@%]\\{\\^[A-Z]+\\}/,\n\t\t\t// $^V\n\t\t\t/[&*$@%]\\^[A-Z_]/,\n\t\t\t// ${...}\n\t\t\t/[&*$@%]#?(?=\\{)/,\n\t\t\t// $foo\n\t\t\t/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,\n\t\t\t// $1\n\t\t\t/[&*$@%]\\d+/,\n\t\t\t// $_, @_, %!\n\t\t\t// The negative lookahead prevents from breaking the %= operator\n\t\t\t/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n\t\t],\n\t\t'filehandle': {\n\t\t\t// <>, <FOO>, _\n\t\t\tpattern: /<(?![<=])\\S*?>|\\b_\\b/,\n\t\t\talias: 'symbol'\n\t\t},\n\t\t'v-string': {\n\t\t\t// v1.2, 1.2.3\n\t\t\tpattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n\t\t\talias: 'string'\n\t\t},\n\t\t'function': {\n\t\t\tpattern: /(\\bsub[ \\t]+)\\w+/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n\t\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n\t\t'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n\t\t'punctuation': /[{}[\\];(),:]/\n\t};\n\n}(Prism));\n"],"names":["Prism","brackets","source","languages","perl","pattern","lookbehind","greedy","RegExp","join","alias"],"sourceRoot":""}