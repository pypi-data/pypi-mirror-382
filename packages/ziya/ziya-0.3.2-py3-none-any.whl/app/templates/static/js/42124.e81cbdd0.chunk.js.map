{"version":3,"file":"static/js/42124.e81cbdd0.chunk.js","mappings":"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","sources":["components/AstStatusIndicator.tsx","apis/astApi.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Progress, Tooltip, Card } from 'antd';\nimport { AstStatus, fetchAstStatus } from '../apis/astApi';\nimport { useTheme } from '../context/ThemeContext';\n\n// Configuration\nconst AST_STATUS_CHECK_INTERVAL = 3000; // 3 seconds\n\n// Global request deduplication for AST status\nlet activeAstRequest: Promise<AstStatus> | null = null;\n\n/**\n * Format elapsed time in a human-readable format\n * @param seconds - Elapsed time in seconds\n * @returns Formatted time string\n */\nconst formatElapsedTime = (seconds: number | null): string => {\n  if (!seconds) return '';\n\n  if (seconds < 60) {\n    return `${Math.round(seconds)}s`;\n  } else if (seconds < 3600) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.round(seconds % 60);\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  }\n};\n\n/**\n * Trigger immediate AST status check (can be called from other components)\n */\nexport const triggerAstStatusCheck = () => {\n  // This could dispatch a custom event that the component listens for\n  window.dispatchEvent(new CustomEvent('ast-config-changed'));\n};\n\n/**\n * Deduplicated AST status fetch\n */\nconst fetchAstStatusDeduplicated = async (): Promise<AstStatus> => {\n  if (activeAstRequest) {\n    console.debug('Reusing existing AST status request');\n    return activeAstRequest;\n  }\n\n  activeAstRequest = fetchAstStatus();\n  const result = await activeAstRequest;\n  activeAstRequest = null;\n  return result;\n};\n\n/**\n * AST Status Indicator Component\n * Shows the current status of AST indexing\n */\nconst AstStatusIndicator: React.FC = () => {\n  const [status, setStatus] = useState<AstStatus | null>(null);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [hasSeenActiveIndexing, setHasSeenActiveIndexing] = useState<boolean>(false);\n  const { isDarkMode } = useTheme();\n\n  useEffect(() => {\n    // Early exit if AST is not enabled in environment\n    // Check if AST is enabled before making any API calls\n    const checkIfAstEnabled = () => {\n      // Simple check - if there's no AST environment indication, don't even try\n      const url = new URL(window.location.href);\n      const hasAstParam = url.searchParams.has('ast') || \n                         localStorage.getItem('ZIYA_AST_ENABLED') === 'true' ||\n                         document.querySelector('[data-ast-enabled]');\n      \n      return hasAstParam;\n    };\n    \n    if (!checkIfAstEnabled()) {\n      console.debug('AST not enabled, skipping status checks');\n      return;\n    }\n    \n    const abortController = new AbortController();\n    let timer: number | null = null;\n    let mounted = true;\n\n    const checkStatus = async () => {\n      // Check if component was unmounted\n      if (abortController.signal.aborted || !mounted) return;\n\n      try {\n        const astStatus = await fetchAstStatusDeduplicated();\n\n        // Double-check abort status after async operation\n        if (abortController.signal.aborted || !mounted) return;\n\n        if (mounted) {\n          setStatus(astStatus);\n\n          // Track if we've ever seen active indexing\n          if (astStatus.is_indexing || astStatus.is_complete) {\n            setHasSeenActiveIndexing(true);\n          }\n\n          // Show the indicator if indexing is in progress\n          if (astStatus.is_indexing || astStatus.error) {\n            setVisible(true);\n          }\n\n          // Hide the indicator 5 seconds after indexing completes\n          if (astStatus.is_complete && !astStatus.error) {\n            setTimeout(() => {\n              if (mounted) setVisible(false);\n            }, 5000);\n          }\n\n          // Continue checking if indexing is still in progress\n          if (astStatus.is_indexing && !astStatus.is_complete) {\n            timer = window.setTimeout(checkStatus, AST_STATUS_CHECK_INTERVAL);\n          }\n        }\n      } catch (error) {\n        // Ignore AbortError - it's expected during cleanup\n        if (error instanceof Error && error.name === 'AbortError') {\n          console.debug('AST status check aborted');\n          return;\n        }\n        console.error('Error checking AST status:', error);\n\n        // Only continue checking if we've previously seen active indexing\n        if (hasSeenActiveIndexing) {\n          // Try again after a delay\n          if (mounted) {\n            timer = window.setTimeout(checkStatus, AST_STATUS_CHECK_INTERVAL);\n          }\n        }\n      }\n    };\n\n    // Start checking AST status\n    checkStatus();\n\n    // Add event listener for page visibility changes\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        // Resume checking when page becomes visible\n        if (!timer && mounted) {\n          checkStatus();\n        }\n      } else {\n        // Pause checking when page is hidden\n        if (timer) {\n          window.clearTimeout(timer);\n          timer = null;\n        }\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Listen for AST config changes\n    const handleConfigChange = () => {\n      setHasSeenActiveIndexing(false); // Reset to allow fresh detection\n      checkStatus(); // Immediately check status\n    };\n\n    window.addEventListener('ast-config-changed', handleConfigChange);\n\n    // Cleanup\n    return () => {\n      mounted = false;\n      abortController.abort();\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('ast-config-changed', handleConfigChange);\n    };\n  }, [hasSeenActiveIndexing]);\n\n  // Don't render anything if there's no status, if it shouldn't be visible, or if we haven't seen active indexing\n  if (!status || !visible) {\n    return null;\n  }\n\n  // Render error state\n  if (status.error) {\n    // Only show error if we've previously seen active indexing\n    if (!hasSeenActiveIndexing) {\n      return null;\n    }\n\n    return (\n      <Card\n        className=\"ast-status-error\"\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          width: '300px',\n          backgroundColor: isDarkMode ? '#2a1f1f' : '#fff1f0',\n          borderColor: isDarkMode ? '#a61d24' : '#ffa39e',\n          color: isDarkMode ? '#ff7875' : undefined\n        }}\n      >\n        <div>\n          <strong>AST Indexing Error</strong>\n          <p>{status.error}</p>\n        </div>\n      </Card>\n    );\n  }\n\n  // Render indexing in progress\n  if (status.is_indexing && !status.is_complete) {\n    const elapsedStr = status.elapsed_seconds ? ` (${formatElapsedTime(status.elapsed_seconds)})` : '';\n\n    return (\n      <Card\n        className=\"ast-status-indicator\"\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          width: '300px',\n          backgroundColor: isDarkMode ? '#141414' : '#ffffff',\n          borderColor: isDarkMode ? '#303030' : '#d9d9d9',\n          color: isDarkMode ? '#ffffff' : undefined\n        }}\n      >\n        <div>\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\n            <strong>AST Indexing</strong>\n            <span>{status.completion_percentage}%{elapsedStr}</span>\n          </div>\n          <Tooltip title={`${status.indexed_files}/${status.total_files} files processed`}>\n            <Progress\n              percent={status.completion_percentage}\n              size=\"small\"\n              status=\"active\"\n              showInfo={false}\n            />\n          </Tooltip>\n          <div style={{ fontSize: '12px', color: '#8c8c8c', marginTop: '4px' }}>\n            {status.indexed_files}/{status.total_files} files processed\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  // Render completed state\n  if (status.is_complete) {\n    return (\n      <Card\n        className=\"ast-status-complete\"\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          width: '300px',\n          backgroundColor: isDarkMode ? '#162312' : '#f6ffed',\n          borderColor: isDarkMode ? '#389e0d' : '#b7eb8f',\n          color: isDarkMode ? '#ffffff' : undefined\n        }}\n      >\n        <div>\n          <strong>AST Indexing Complete</strong>\n          <div style={{ fontSize: '12px', color: '#8c8c8c', marginTop: '4px' }}>\n            {status.indexed_files} files indexed\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return null;\n};\n\nexport default AstStatusIndicator;\n","/**\n * API for AST-related functionality\n */\n\nexport interface AstStatus {\n  is_indexing: boolean;\n  completion_percentage: number;\n  is_complete: boolean;\n  indexed_files: number;\n  total_files: number;\n  elapsed_seconds: number | null;\n  error: string | null;\n}\n\n/**\n * Fetch the current status of AST indexing\n * @returns Promise with AST indexing status\n */\nexport const fetchAstStatus = async (): Promise<AstStatus> => {\n  try {\n    const response = await fetch('/api/ast/status');\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    \n    return await response.json() as AstStatus;\n  } catch (error) {\n    console.error('Error fetching AST status:', error);\n    // Return a default status object on error\n    return {\n      is_indexing: false,\n      completion_percentage: 0,\n      is_complete: false,\n      indexed_files: 0,\n      total_files: 0,\n      elapsed_seconds: null,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n};\n"],"names":["activeAstRequest","triggerAstStatusCheck","window","dispatchEvent","CustomEvent","fetchAstStatusDeduplicated","async","console","debug","response","fetch","ok","Error","concat","status","json","error","is_indexing","completion_percentage","is_complete","indexed_files","total_files","elapsed_seconds","message","fetchAstStatus","result","AstStatusIndicator","setStatus","useState","visible","setVisible","hasSeenActiveIndexing","setHasSeenActiveIndexing","isDarkMode","useTheme","useEffect","URL","location","href","searchParams","has","localStorage","getItem","document","querySelector","abortController","AbortController","timer","mounted","checkStatus","signal","aborted","astStatus","setTimeout","name","handleVisibilityChange","visibilityState","clearTimeout","addEventListener","handleConfigChange","abort","removeEventListener","_jsx","Card","className","style","position","bottom","right","width","backgroundColor","borderColor","color","undefined","children","_jsxs","elapsedStr","seconds","Math","round","minutes","floor","remainingSeconds","hours","formatElapsedTime","display","justifyContent","marginBottom","Tooltip","title","Progress","percent","size","showInfo","fontSize","marginTop"],"sourceRoot":""}