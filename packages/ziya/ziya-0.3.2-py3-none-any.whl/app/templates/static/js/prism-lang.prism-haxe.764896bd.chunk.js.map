{"version":3,"file":"static/js/prism-lang.prism-haxe.764896bd.chunk.js","mappings":"oFAAAA,MAAMC,UAAUC,KAAOF,MAAMC,UAAUE,OAAO,QAAS,CACtD,OAAU,CAETC,QAAS,yBACTC,QAAQ,GAET,aAAc,CACb,CACCD,QAAS,mFACTE,YAAY,GAGb,cAGD,QAAW,gUACX,SAAY,CACXF,QAAS,wCACTC,QAAQ,GAET,SAAY,oEAGbL,MAAMC,UAAUM,aAAa,OAAQ,SAAU,CAC9C,uBAAwB,CACvBH,QAAS,yBACTC,QAAQ,EACRG,OAAQ,CACP,cAAiB,CAChBJ,QAAS,gCACTE,YAAY,EACZE,OAAQ,CACP,4BAA6B,CAC5BJ,QAAS,aACTK,MAAO,eAER,WAAc,CACbL,QAAS,UACTI,OAAQR,MAAMC,UAAUC,QAI3B,OAAU,cAKbF,MAAMC,UAAUM,aAAa,OAAQ,aAAc,CAClD,MAAS,CACRH,QAAS,kCACTC,QAAQ,EACRG,OAAQ,CACP,cAAe,YACf,eAAgB,CACfJ,QAAS,uBACTE,YAAY,EACZG,MAAO,iBACPD,OAAQR,MAAMC,UAAUS,OAEzB,kBAAmB,eAKtBV,MAAMC,UAAUM,aAAa,OAAQ,UAAW,CAC/C,aAAgB,CACfH,QAAS,8BACTK,MAAO,YAER,SAAY,CACXL,QAAS,YACTK,MAAO,UAER,YAAe,CACdL,QAAS,mBACTK,MAAO,c","sources":["../node_modules/prismjs/components/prism-haxe.js"],"sourcesContent":["Prism.languages.haxe = Prism.languages.extend('clike', {\n\t'string': {\n\t\t// Strings can be multi-line\n\t\tpattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n\t\tgreedy: true\n\t},\n\t'class-name': [\n\t\t{\n\t\t\tpattern: /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n\t\t\tlookbehind: true,\n\t\t},\n\t\t// based on naming convention\n\t\t/\\b[A-Z]\\w*/\n\t],\n\t// The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n\t'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n\t'function': {\n\t\tpattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n\t\tgreedy: true\n\t},\n\t'operator': /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n});\n\nPrism.languages.insertBefore('haxe', 'string', {\n\t'string-interpolation': {\n\t\tpattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{?|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\t'expression': {\n\t\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\t\tinside: Prism.languages.haxe\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('haxe', 'class-name', {\n\t'regex': {\n\t\tpattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-flags': /\\b[a-z]+$/,\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^~\\/|\\/$/,\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('haxe', 'keyword', {\n\t'preprocessor': {\n\t\tpattern: /#(?:else|elseif|end|if)\\b.*/,\n\t\talias: 'property'\n\t},\n\t'metadata': {\n\t\tpattern: /@:?[\\w.]+/,\n\t\talias: 'symbol'\n\t},\n\t'reification': {\n\t\tpattern: /\\$(?:\\w+|(?=\\{))/,\n\t\talias: 'important'\n\t}\n});\n"],"names":["Prism","languages","haxe","extend","pattern","greedy","lookbehind","insertBefore","inside","alias","regex"],"sourceRoot":""}