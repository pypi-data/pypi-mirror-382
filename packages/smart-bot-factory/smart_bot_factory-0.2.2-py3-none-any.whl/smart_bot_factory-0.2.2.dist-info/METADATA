Metadata-Version: 2.4
Name: smart-bot-factory
Version: 0.2.2
Summary: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤
Author-email: Kopatych <kopatych@example.com>
License: MIT
License-File: LICENSE
Keywords: chatbot,cli,openai,supabase,telegram
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Communications :: Chat
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: aiogram>=3.4.1
Requires-Dist: click>=8.0.0
Requires-Dist: openai>=1.12.0
Requires-Dist: project-root-finder>=1.9
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: pytz>=2023.3
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: supabase>=2.3.4
Description-Content-Type: text/markdown

# Smart Bot Factory

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI, Telegram –∏ Supabase.

## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **ü§ñ AI Integration** - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI GPT –¥–ª—è —É–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
- **üì± Telegram Bot API** - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ aiogram 3.x
- **üíæ Supabase Backend** - –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —Å–µ—Å—Å–∏–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
- **üéØ Router System** - –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
- **‚è∞ Smart Scheduler** - –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- **üåç Global Handlers** - –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
- **üß™ Testing Suite** - –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤
- **üõ†Ô∏è CLI Tools** - –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
- **üë• Admin Panel** - –°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
- **üìä Analytics** - –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–ü–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:

- **Python 3.9+** (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.11+)
- **pip** –∏–ª–∏ **uv** –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏
- –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

### –ò–∑ PyPI (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

```bash
pip install smart_bot_factory
```

### –° –ø–æ–º–æ—â—å—é uv (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤)

```bash
uv add smart_bot_factory
```

### –ò–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

```bash
# –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git clone https://github.com/yourusername/chat-bots.git
cd chat-bots

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ uv
uv sync

# –ò–ª–∏ —á–µ—Ä–µ–∑ pip
pip install -e .
```

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏

```bash
pip install smart_bot_factory==0.1.8
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CLI:

```bash
sbf --help
```

–í—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:

1. **Telegram Bot Token**
   - –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ [@BotFather](https://t.me/botfather)
   - –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∏–¥–∞ `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`

2. **OpenAI API Key**
   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ [platform.openai.com](https://platform.openai.com)
   - –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ API Keys
   - –ö–ª—é—á –∏–º–µ–µ—Ç –≤–∏–¥ `sk-...`

3. **Supabase Project**
   - –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ [supabase.com](https://supabase.com)
   - –ü–æ–ª—É—á–∏—Ç–µ URL –ø—Ä–æ–µ–∫—Ç–∞ –∏ `anon` –∫–ª—é—á –≤ Project Settings ‚Üí API
   - –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ SQL —Å—Ö–µ–º—É –∏–∑ `smart_bot_factory/database/schema.sql`

## ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞

```bash
sbf create my-bot
```

–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç:
- üìÅ `bots/my-bot/` - –ø–∞–ø–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞
- üìÑ `my-bot.py` - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
- ‚öôÔ∏è `bots/my-bot/.env` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
- üìù `bots/my-bot/prompts/` - –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è AI
- üß™ `bots/my-bot/tests/` - —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

### 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ `bots/my-bot/.env`:

```env
# Telegram
TELEGRAM_BOT_TOKEN=your_bot_token

# Supabase
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_KEY=your_supabase_key

# OpenAI
OPENAI_API_KEY=sk-your-openai-key
OPENAI_MODEL=gpt-4o-mini

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_TELEGRAM_IDS=123456789,987654321
```

### 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞

```bash
sbf run my-bot
```

## üìö –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### Router System

Smart Bot Factory –∏—Å–ø–æ–ª—å–∑—É–µ—Ç **–¥–≤–∞ —Ç–∏–ø–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤** –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:

1. **EventRouter** - –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ (—Å–æ–±—ã—Ç–∏—è, –∑–∞–¥–∞—á–∏, –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
2. **TelegramRouter** - –¥–ª—è Telegram –∫–æ–º–∞–Ω–¥, —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤

```python
from smart_bot_factory.router import EventRouter, TelegramRouter
from smart_bot_factory.message import send_message_by_human
from smart_bot_factory.creation import BotBuilder
from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

# EventRouter - –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
event_router = EventRouter("my_bot_events")

@event_router.event_handler("appointment_booking", notify=True)
async def handle_booking(user_id: int, event_data: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! {event_data}"
    )
    return {"status": "success"}

# TelegramRouter - –¥–ª—è Telegram –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
telegram_router = TelegramRouter("my_bot_telegram")

@telegram_router.router.message(Command("price", "—Ü–µ–Ω–∞"))
async def handle_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    await message.answer("üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã...")

@telegram_router.router.message(F.text.contains("–ø–æ–º–æ—â—å"))
async def handle_help(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏"""
    await message.answer("üìñ –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = BotBuilder("my-bot")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–º–æ–∂–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É)
    bot.register_routers(event_router)  # EventRouter
    bot.register_telegram_routers(telegram_router)  # TelegramRouter
    
    await bot.build()
    await bot.start()
```

### TelegramRouter - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram

**TelegramRouter** –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π aiogram API:

#### –ö–æ–º–∞–Ω–¥—ã

```python
from smart_bot_factory.router import TelegramRouter
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

telegram_router = TelegramRouter("my_commands")

@telegram_router.router.message(Command("start", "—Å—Ç–∞—Ä—Ç"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç!")

@telegram_router.router.message(Command("price"))
async def cmd_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    await message.answer("üí∞ –¶–µ–Ω—ã:\n1. –ë–∞–∑–æ–≤—ã–π - 1000‚ÇΩ\n2. –ü—Ä–µ–º–∏—É–º - 5000‚ÇΩ")
```

#### –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–µ–∫—Å—Ç—É

```python
from aiogram import F

@telegram_router.router.message(F.text.lower().contains("—Ü–µ–Ω–∞"))
async def handle_price_question(message: Message, state: FSMContext):
    """–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ü–µ–Ω–µ"""
    await message.answer("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /price –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω")

@telegram_router.router.message(F.text.startswith("!"))
async def handle_commands(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å !"""
    command = message.text[1:]
    await message.answer(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
```

#### Callback Query

```python
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

@telegram_router.router.callback_query(F.data.startswith("buy_"))
async def handle_buy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏"""
    product_id = callback.data.split("_")[1]
    await callback.answer("–û—Ñ–æ—Ä–º–ª—è–µ–º...")
    await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä {product_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

@telegram_router.router.message(Command("catalog"))
async def show_catalog(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä 1", callback_data="buy_1")],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä 2", callback_data="buy_2")]
    ])
    await message.answer("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)
```

#### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤

```python
# –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ TelegramRouter –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
commands_router = TelegramRouter("commands")
admin_router = TelegramRouter("admin_commands")
callbacks_router = TelegramRouter("callbacks")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å—Ä–∞–∑—É
bot_builder.register_telegram_routers(
    commands_router,
    admin_router,
    callbacks_router
)
```

**–í–∞–∂–Ω–æ:** TelegramRouter - —ç—Ç–æ –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ aiogram Router, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É aiogram —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ `.router`.

### EventRouter - –¢–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π

#### 1. Event Handlers - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç AI:

```python
@router.event_handler("phone_collected", notify=True, once_only=True)
async def handle_phone(user_id: int, event_data: str):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ AI —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # event_data —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç AI
    phone = parse_phone(event_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CRM
    await save_to_crm(user_id, phone)
    
    return {"status": "saved", "phone": phone}
```

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- `notify` - —É–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ (default: False)
- `once_only` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (default: True)

#### 2. Scheduled Tasks - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

–ó–∞–¥–∞—á–∏ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

```python
@router.schedule_task("send_reminder", delay="2h", smart_check=True)
async def send_reminder(user_id: int, reminder_text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"üîî {reminder_text}"
    )
    return {"status": "sent"}
```

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- `delay` - –∑–∞–¥–µ—Ä–∂–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): `"1h"`, `"30m"`, `"2h 15m"`, `3600`
- `smart_check` - —É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (default: True)
- `once_only` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (default: True)
- `event_type` - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—é –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

**Smart Check:**
- –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –¥—Ä—É–≥–æ–π —ç—Ç–∞–ø
- –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç session_id –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

#### 3. Global Handlers - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

```python
@router.global_handler("mass_notification", delay="1h", notify=True)
async def send_announcement(announcement_text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç –∞–Ω–æ–Ω—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ 1 —á–∞—Å"""
    from smart_bot_factory.message import send_message_to_users_by_stage
    
    await send_message_to_users_by_stage(
        stage="introduction",
        message_text=announcement_text,
        bot_id="my-bot"
    )
    
    return {"status": "completed"}
```

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- `delay` - –∑–∞–¥–µ—Ä–∂–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- `notify` - —É–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ (default: False)
- `once_only` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (default: True)

### Event-Based Reminders

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:

```python
# –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
@router.event_handler("appointment_booking")
async def handle_booking(user_id: int, event_data: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞—Ç–∞, –≤—Ä–µ–º—è"""
    return {"status": "saved", "data": event_data}

# –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
@router.schedule_task(
    "appointment_reminder",
    delay="2h",
    event_type="appointment_booking"  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—é
)
async def remind_about_appointment(user_id: int, reminder_text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!"
    )
    return {"status": "sent"}
```

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
1. –ò–∑–≤–ª–µ—á–µ—Ç –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–∑ —Å–æ–±—ã—Ç–∏—è `appointment_booking`
2. –í—ã—á–∏—Å–ª–∏—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏)
3. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

## üõ†Ô∏è CLI –ö–æ–º–∞–Ω–¥—ã

```bash
# –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏
sbf create <bot-id>              # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
sbf create <bot-id> <template>   # –°–æ–∑–¥–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞
sbf copy <source> <new-id>       # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
sbf list                         # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
sbf rm <bot-id>                  # –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞

# –ó–∞–ø—É—Å–∫
sbf run <bot-id>                 # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
sbf test <bot-id>                # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
sbf test <bot-id> --file quick_scenarios.yaml
sbf test <bot-id> -v             # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
sbf test <bot-id> --max-concurrent 10

# –ü—Ä–æ–º–ø—Ç—ã
sbf prompts <bot-id>             # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
sbf prompts <bot-id> --edit welcome_message
sbf prompts <bot-id> --add new_prompt

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
sbf config <bot-id>              # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env
sbf path                         # –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sbf link                         # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UTM-—Å—Å—ã–ª–æ–∫
```

## üìù –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–ø—Ç–æ–≤

–ü—Ä–æ–º–ø—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ `bots/<bot-id>/prompts/`:

- `welcome_message.txt` - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
- `help_message.txt` - –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- `1sales_context.txt` - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–∞–∂
- `2product_info.txt` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
- `3objection_handling.txt` - –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏
- `final_instructions.txt` - –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI

AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç.

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ YAML:

```yaml
# bots/my-bot/tests/scenarios.yaml
scenarios:
  - name: "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º"
    steps:
      - user: "–ü—Ä–∏–≤–µ—Ç!"
        expect_stage: "introduction"
      
      - user: "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"
        expect_stage: "qualification"
        expect_events:
          - type: "appointment_request"
      
      - user: "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω, +79991234567, –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
        expect_events:
          - type: "appointment_booking"
          - type: "appointment_reminder"  # –î–æ–ª–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è
        expect_quality: ">= 8"
```

–ó–∞–ø—É—Å–∫:
```bash
sbf test my-bot --file scenarios.yaml -v
```

## üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

### –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

```python
from smart_bot_factory.message import send_message_by_human

await send_message_by_human(
    user_id=123456789,
    message_text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã",
    session_id="optional-session-id"
)
```

### –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ —ç—Ç–∞–ø—É

```python
from smart_bot_factory.message import send_message_to_users_by_stage

await send_message_to_users_by_stage(
    stage="introduction",
    message_text="üì¢ –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!",
    bot_id="my-bot"
)
```

## üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

Smart Bot Factory –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏:

- `sales_users` - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
- `sales_chat_sessions` - –°–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
- `sales_chat_messages` - –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
- `scheduled_events` - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–¥–∞—á–∏
- `admin_sessions` - –°–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

SQL —Å—Ö–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ `smart_bot_factory/database/`.

## üë• –°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

–î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ `.env`:

```env
ADMIN_TELEGRAM_IDS=123456789,987654321
ADMIN_SESSION_TIMEOUT_MINUTES=30
```

–ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç:
- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
- üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–µ—Å–ª–∏ `notify=True`)
- üõ†Ô∏è –î–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º

## üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã

#### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö EventRouter

```python
# handlers/main.py
main_router = EventRouter("main")

# handlers/admin.py
admin_router = EventRouter("admin")

# handlers/payments.py
payments_router = EventRouter("payments")

# app.py
bot = BotBuilder("my-bot")

# –ú–æ–∂–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É
bot.register_router(main_router)
bot.register_router(admin_router)

# –ò–ª–∏ –≤—Å–µ —Å—Ä–∞–∑—É
bot.register_routers(main_router, admin_router, payments_router)
```

#### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö TelegramRouter

```python
# telegram/commands.py
commands_router = TelegramRouter("commands")

@commands_router.router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!")

# telegram/callbacks.py
callbacks_router = TelegramRouter("callbacks")

@callbacks_router.router.callback_query(F.data.startswith("action_"))
async def handle_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!")

# app.py
bot = BotBuilder("my-bot")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ Telegram —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å—Ä–∞–∑—É
bot.register_telegram_routers(commands_router, callbacks_router)
```

#### –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ EventRouter –∏ TelegramRouter

```python
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
event_router = EventRouter("events")
telegram_router = TelegramRouter("telegram_handlers")

# EventRouter - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
@event_router.event_handler("payment_success")
async def handle_payment(user_id: int, event_data: str):
    await send_message_by_human(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
    return {"status": "success"}

# TelegramRouter - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@telegram_router.router.message(Command("balance"))
async def check_balance(message: Message, state: FSMContext):
    await message.answer("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 1000‚ÇΩ")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–∞ —Ç–∏–ø–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
bot_builder.register_routers(event_router)
bot_builder.register_telegram_routers(telegram_router)
```

### –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã (EventRouter)

```python
main_router = EventRouter("main")
payments_router = EventRouter("payments")

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π
main_router.include_router(payments_router)

bot.register_router(main_router)
```

### –†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

```python
from smart_bot_factory.supabase import SupabaseClient

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
supabase = SupabaseClient("my-bot")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
users = supabase.client.table('sales_users').select('*').eq('bot_id', 'my-bot').execute()
```

## üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
my-project/
‚îú‚îÄ‚îÄ bots/                      # –ü–∞–ø–∫–∞ —Å –±–æ—Ç–∞–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ my-bot/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ .env              # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ prompts/          # AI –ø—Ä–æ–º–ø—Ç—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tests/            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ files/            # –§–∞–π–ª—ã –±–æ—Ç–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ welcome_files/    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ reports/          # –û—Ç—á–µ—Ç—ã —Ç–µ—Å—Ç–æ–≤
‚îÇ   ‚îî‚îÄ‚îÄ another-bot/
‚îÇ       ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ my-bot.py                 # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
‚îú‚îÄ‚îÄ another-bot.py
‚îî‚îÄ‚îÄ .env                      # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
```

## üîÑ –ü—Ä–∏–º–µ—Ä—ã

### –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –±–æ—Ç–∞

```python
import asyncio

from smart_bot_factory.router import EventRouter, TelegramRouter
from smart_bot_factory.message import send_message_by_human, send_message_to_users_by_stage
from smart_bot_factory.supabase import SupabaseClient
from smart_bot_factory.creation import BotBuilder
from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
event_router = EventRouter("medical_bot_events")
telegram_router = TelegramRouter("medical_bot_telegram")
supabase_client = SupabaseClient("medical-bot")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (TelegramRouter)
@telegram_router.router.message(Command("appointment", "–∑–∞–ø–∏—Å—å"))
async def cmd_appointment(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"""
    await message.answer(
        "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º —É–∫–∞–∂–∏—Ç–µ:\n"
        "- –í–∞—à–µ –∏–º—è\n"
        "- –¢–µ–ª–µ—Ñ–æ–Ω\n"
        "- –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"
    )

@telegram_router.router.message(F.text.lower().contains("—Ü–µ–Ω–∞"))
async def handle_price_question(message: Message, state: FSMContext):
    """–í–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–∞—Ö"""
    await message.answer("üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /appointment –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º (EventRouter)
@event_router.event_handler("appointment_booking", notify=True)
async def handle_appointment(user_id: int, event_data: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É"""
    # event_data: "–∏–º—è: –ò–≤–∞–Ω, —Ç–µ–ª–µ—Ñ–æ–Ω: +79991234567, –¥–∞—Ç–∞: 2025-10-15, –≤—Ä–µ–º—è: 14:00"
    
    await send_message_by_human(
        user_id=user_id,
        message_text="‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å."
    )
    
    return {"status": "success", "data": event_data}

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞ (EventRouter)
@event_router.schedule_task(
    "appointment_reminder",
    delay="2h",
    event_type="appointment_booking"
)
async def remind_before_appointment(user_id: int, reminder_text: str):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏"""
    await send_message_by_human(
        user_id=user_id,
        message_text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!"
    )
    return {"status": "sent"}

# –ù–æ—á–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –≤—Å–µ—Ö (EventRouter)
@event_router.global_handler("daily_digest", delay="24h")
async def send_daily_digest(digest_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    await send_message_to_users_by_stage(
        stage="active",
        message_text=f"üìä –î–∞–π–¥–∂–µ—Å—Ç –¥–Ω—è:\n\n{digest_text}",
        bot_id="medical-bot"
    )

# –ó–∞–ø—É—Å–∫
async def main():
    bot = BotBuilder("medical-bot")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    bot.register_routers(event_router)  # EventRouter
    bot.register_telegram_routers(telegram_router)  # TelegramRouter
    
    await bot.build()
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main())
```

## üêõ –û—Ç–ª–∞–¥–∫–∞

–í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤ `.env`:

```env
DEBUG_MODE=true
LOG_LEVEL=DEBUG
```

–≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç:
- JSON –æ—Ç–≤–µ—Ç—ã –æ—Ç AI
- –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—É—Ç–µ—Ä–∞—Ö –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö

## üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

### –°–∏—Å—Ç–µ–º–Ω—ã–µ
- Python 3.9+ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.11+)
- pip –∏–ª–∏ uv –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏

### –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- aiogram 3.4.1+ - Telegram Bot API
- supabase 2.3.4+ - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- openai 1.12.0+ - AI –º–æ–¥–µ–ª—å
- click 8.0.0+ - CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- python-dotenv 1.0.1+ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.

### –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
- Telegram Bot Token ([@BotFather](https://t.me/botfather))
- OpenAI API Key ([platform.openai.com](https://platform.openai.com))
- Supabase Project ([supabase.com](https://supabase.com))

–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. —Ä–∞–∑–¥–µ–ª [–£—Å—Ç–∞–Ω–æ–≤–∫–∞](#-—É—Å—Ç–∞–Ω–æ–≤–∫–∞).

## ü§ù –í–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç

–ú—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞! 

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License - —Å–º. [LICENSE](LICENSE)

## üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Supabase](https://supabase.com/docs)
- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è OpenAI](https://platform.openai.com/docs)
- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è aiogram](https://docs.aiogram.dev/)

## üí° –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–π—Ç–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.

---

–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö –±–æ—Ç–æ–≤
