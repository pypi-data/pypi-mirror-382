import asyncio
import logging

from smart_bot_factory.router import EventRouter, TelegramRouter
from smart_bot_factory.message import send_message_by_human, send_message_to_users_by_stage, send_message
from smart_bot_factory.supabase import SupabaseClient
from smart_bot_factory.creation import BotBuilder

logger = logging.getLogger(__name__)

# =============================================================================
# –°–û–ó–î–ê–ù–ò–ï –†–û–£–¢–ï–†–û–í
# =============================================================================

# –†–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
event_router = EventRouter("best-valera_events")

# –†–æ—É—Ç–µ—Ä –¥–ª—è Telegram (–∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
telegram_router_1 = TelegramRouter("best-valera_telegram")
telegram_router_2 = TelegramRouter("best-valera_telegram_2")

supabase_client = SupabaseClient("best-valera")

# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BOT BUILDER (–Ω—É–∂–µ–Ω –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ on_start)
# =============================================================================

bot_builder = BotBuilder("best-valera")

# =============================================================================
# TELEGRAM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π aiogram API)
# =============================================================================

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö on_start (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ /start)
# =============================================================================

@bot_builder.on_start
async def custom_start_handler(user_id: int, session_id: str, message: Message, state: FSMContext):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ /start
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.
    """
    # –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω—ã", callback_data="prices")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
    ])
    
    await message.answer(
        "üéØ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=keyboard
    )

# =============================================================================
# –•–£–ö–ò –î–õ–Ø –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# =============================================================================

# –•–£–ö 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@bot_builder.validate_message
async def validate_service_names(message, supabase_client):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —É—Å–ª—É–≥"""
    # –ü—Ä–∏–º–µ—Ä: –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    incorrect_names = ["–º–∞—Å—Å–∞—à", "–ø–µ–¥–µ–∫—é—Ä", "–º–∞–∫–∏—è—à"]
    
    if message.text:
        for incorrect in incorrect_names:
            if incorrect in message.text.lower():
                await message.answer(
                    f"‚ùó –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É?\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                )
                return False  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É AI
    
    return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

# –•–£–ö 2: –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
@bot_builder.enrich_prompt
async def add_client_info_to_prompt(system_prompt, user_id, session_id, supabase_client):
    """–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –ø—Ä–æ–º–ø—Ç"""
    try:
        session = await supabase_client.get_active_session(user_id)
        
        if session and session.get('metadata'):
            phone = session['metadata'].get('phone')
            name = session['metadata'].get('confirmed_name') or session['metadata'].get('telegram_name')
            
            if phone:
                client_info = f"\n\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:\n- –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                if name:
                    client_info += f"\n- –ò–º—è: {name}"
                client_info += "\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π –≠–¢–û–¢ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è!"
                
                return system_prompt + client_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
    
    return system_prompt

# –•–£–ö 3: –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API)
@bot_builder.enrich_context
async def add_external_api_data(messages, user_id, session_id):
    """–î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º"""
    # –ü—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ YClients, –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM –∏ —Ç.–¥.
    # messages.append({
    #     "role": "system",
    #     "content": "–†–µ–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: ..."
    # })
    return messages

# –•–£–ö 4: –§–∏–ª—å—Ç—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
@bot_builder.filter_send
async def allow_all_messages(user_id, response_text):
    """–†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ —É—Å–ª–æ–≤–∏—é)"""
    # –ü—Ä–∏–º–µ—Ä: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # if is_processing(user_id):
    #     return False
    return True

@telegram_router_1.router.message(Command("price", "—Ü–µ–Ω–∞"))
async def handle_price_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    await message.answer(
        "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\n"
        "üì¶ –ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç - 1000‚ÇΩ\n"
        "üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - 2000‚ÇΩ\n"
        "üì¶ –ü—Ä–µ–º–∏—É–º - 5000‚ÇΩ"
    )

@telegram_router_2.router.message(F.text & (F.text.lower().contains("—Ü–µ–Ω–∞") | F.text.lower().contains("—Å—Ç–æ–∏–º–æ—Å—Ç—å")))
async def handle_price_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ü–µ–Ω–µ"""
    await message.answer("üí° –ù–∞–ø–∏—à–∏—Ç–µ /price —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –≤ on_start
@telegram_router_1.router.callback_query(F.data == "catalog")
async def handle_catalog(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥"""
    await callback.answer()
    
    # –ü—Ä–∏–º–µ—Ä: –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message —Å —Ñ–∞–π–ª–∞–º–∏
    await send_message(
        message=callback.message,
        text="üìñ –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n1. –¢–æ–≤–∞—Ä 1\n2. –¢–æ–≤–∞—Ä 2\n3. –¢–æ–≤–∞—Ä 3",
        supabase_client=supabase_client,
        files_list=[],  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã: ["catalog.pdf"]
        parse_mode="Markdown"
    )

@telegram_router_1.router.callback_query(F.data == "prices")
async def handle_prices(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¶–µ–Ω—ã"""
    await callback.answer()
    await callback.message.answer("üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\nüì¶ –ë–∞–∑–æ–≤—ã–π - 1000‚ÇΩ\nüì¶ –ü—Ä–µ–º–∏—É–º - 5000‚ÇΩ")

@telegram_router_1.router.callback_query(F.data == "contact")
async def handle_contact(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–≤—è–∑–∞—Ç—å—Å—è"""
    await callback.answer()
    await callback.message.answer("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\nEmail: info@example.com")

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
# =============================================================================

@event_router.event_handler("example_event")
async def handle_example_event(user_id: int, event_data: str):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –î–∞–Ω–Ω—ã–µ: {event_data}"
    )
    
    return {
        "status": "success",
        "message": "–°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    }

# =============================================================================
# –í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –û–î–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================================================================

@event_router.schedule_task("send_reminder", delay="1h")
async def send_user_reminder(user_id: int, reminder_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
    )
    
    return {
        "status": "reminder_sent",
        "message": f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
    }

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
# =============================================================================

@event_router.global_handler("mass_notification", delay="1h", notify=True)
async def send_global_announcement(announcement_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–æ–Ω—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞"""
   
    await send_message_to_users_by_stage(
        stage="introduction",
        message_text=announcement_text,
        bot_id="best-valera"
    )

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # bot_builder —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ (–¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @bot_builder.on_start)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –ü–ï–†–ï–î —Å–±–æ—Ä–∫–æ–π (–º–æ–∂–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É)
        bot_builder.register_routers(event_router)  # –†–æ—É—Ç–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
        bot_builder.register_telegram_routers(telegram_router_1, telegram_router_2)  # Telegram —Ä–æ—É—Ç–µ—Ä—ã
        
        await bot_builder.build()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot_builder.start()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
