import asyncio

from smart_bot_factory.router import EventRouter, TelegramRouter
from smart_bot_factory.message import send_message_by_human, send_message_to_users_by_stage
from smart_bot_factory.supabase import SupabaseClient
from smart_bot_factory.creation import BotBuilder

# =============================================================================
# –°–û–ó–î–ê–ù–ò–ï –†–û–£–¢–ï–†–û–í
# =============================================================================

# –†–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
event_router = EventRouter("best-valera_events")

# –†–æ—É—Ç–µ—Ä –¥–ª—è Telegram (–∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
telegram_router_1 = TelegramRouter("best-valera_telegram")
telegram_router_2 = TelegramRouter("best-valera_telegram_2")

supabase_client = SupabaseClient("best-valera")

# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BOT BUILDER (–Ω—É–∂–µ–Ω –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ on_start)
# =============================================================================

bot_builder = BotBuilder("best-valera")

# =============================================================================
# TELEGRAM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π aiogram API)
# =============================================================================

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö on_start (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ /start)
# =============================================================================

@bot_builder.on_start
async def custom_start_handler(user_id: int, session_id: str, message: Message, state: FSMContext):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ /start
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.
    """
    # –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω—ã", callback_data="prices")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
    ])
    
    await message.answer(
        "üéØ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=keyboard
    )

@telegram_router_1.router.message(Command("price", "—Ü–µ–Ω–∞"))
async def handle_price_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    await message.answer(
        "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\n"
        "üì¶ –ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç - 1000‚ÇΩ\n"
        "üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - 2000‚ÇΩ\n"
        "üì¶ –ü—Ä–µ–º–∏—É–º - 5000‚ÇΩ"
    )

@telegram_router_2.router.message(F.text & (F.text.lower().contains("—Ü–µ–Ω–∞") | F.text.lower().contains("—Å—Ç–æ–∏–º–æ—Å—Ç—å")))
async def handle_price_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ü–µ–Ω–µ"""
    await message.answer("üí° –ù–∞–ø–∏—à–∏—Ç–µ /price —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –≤ on_start
@telegram_router_1.router.callback_query(F.data == "catalog")
async def handle_catalog(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥"""
    await callback.answer()
    await callback.message.answer("üìñ –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n1. –¢–æ–≤–∞—Ä 1\n2. –¢–æ–≤–∞—Ä 2\n3. –¢–æ–≤–∞—Ä 3")

@telegram_router_1.router.callback_query(F.data == "prices")
async def handle_prices(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¶–µ–Ω—ã"""
    await callback.answer()
    await callback.message.answer("üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\nüì¶ –ë–∞–∑–æ–≤—ã–π - 1000‚ÇΩ\nüì¶ –ü—Ä–µ–º–∏—É–º - 5000‚ÇΩ")

@telegram_router_1.router.callback_query(F.data == "contact")
async def handle_contact(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–≤—è–∑–∞—Ç—å—Å—è"""
    await callback.answer()
    await callback.message.answer("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\nEmail: info@example.com")

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
# =============================================================================

@event_router.event_handler("example_event")
async def handle_example_event(user_id: int, event_data: str):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –î–∞–Ω–Ω—ã–µ: {event_data}"
    )
    
    return {
        "status": "success",
        "message": "–°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    }

# =============================================================================
# –í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –û–î–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================================================================

@event_router.schedule_task("send_reminder", delay="1h")
async def send_user_reminder(user_id: int, reminder_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
    )
    
    return {
        "status": "reminder_sent",
        "message": f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
    }

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
# =============================================================================

@event_router.global_handler("mass_notification", delay="1h", notify=True)
async def send_global_announcement(announcement_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–æ–Ω—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞"""
   
    await send_message_to_users_by_stage(
        stage="introduction",
        message_text=announcement_text,
        bot_id="best-valera"
    )

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # bot_builder —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ (–¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @bot_builder.on_start)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –ü–ï–†–ï–î —Å–±–æ—Ä–∫–æ–π (–º–æ–∂–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É)
        bot_builder.register_routers(event_router)  # –†–æ—É—Ç–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
        bot_builder.register_telegram_routers(telegram_router_1, telegram_router_2)  # Telegram —Ä–æ—É—Ç–µ—Ä—ã
        
        await bot_builder.build()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot_builder.start()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
