name: ci/cd

on:
  push:
    # only on branch pushes
    branches: [ '**' ]
    tags-ignore: [ '**' ]

jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.7


  ############################################################################
  # LINTERS
  #############################################################################

  flake8:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.3
        with:
          max-complexity: 10  # ideal is ~10-15

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0


  ############################################################################
  # PACKAGING
  #############################################################################

  py-setup:
    if: ${{ github.actor != 'dependabot[bot]' }} # dependabot cannot access PAT
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - uses: WIPACrepo/wipac-dev-py-setup-action@v5.5
        with:
          mode: PACKAGING_AND_PYPI
          python_min: 3.9
          pypi_name: wipac-dev-tools
          author: WIPAC Developers
          author_email: developers@icecube.wisc.edu
          keywords_comma: "WIPAC, python tools, utilities"
          auto_mypy_option: True

  py-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: WIPACrepo/wipac-dev-py-dependencies-action@v3.2


  ############################################################################
  # TESTS
  #############################################################################

  prep-pytest:
    runs-on: ubuntu-latest
    outputs:
      pytest_info_json: ${{ steps.set.outputs.pytest_info_json }}
      pytest_ignore_args: ${{ steps.set.outputs.pytest_ignore_args }}
    steps:
      - name: Define outputs
        id: set
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"


          #
          # *** HERE ARE THE TEST FILES & THEIR RESPECTIVE INSTALL OPTIONS ***
          #
          # Define test info directly as a JSON list of "file:[extras]" strings
          # - The 'vanilla' test is one that has no (or minimal) install extras
          # - Any test file listed will be ignored in the vanilla tests
          #
          PYTEST_INFO_JSON='[
            "vanilla:[tests]",
            "prometheus_tools_test.py:[tests,prometheus]",
            "mongo_jsonschema_tools_test.py:[tests,mongo,jsonschema]"
          ]'
          
          
          # format json
          PYTEST_INFO_JSON=$(echo "$PYTEST_INFO_JSON" | sed ':a;N;$!ba;s/,\s*\]/\]/') # remove trailing comma 
          PYTEST_INFO_JSON=$(echo "$PYTEST_INFO_JSON" | jq -c '.') # put on one line
          echo $PYTEST_INFO_JSON

          # Assemble ignore args by extracting the filename part
          PYTEST_IGNORE_ARGS=""
          for file in $(jq -r '.[] | split(":")[0]' <<< "$PYTEST_INFO_JSON"); do
            if [[ "$file" != "vanilla" ]]; then
              PYTEST_IGNORE_ARGS+=" --ignore=tests/$file"
            fi
          done
          echo $PYTEST_IGNORE_ARGS

          # output
          echo "pytest_info_json=$PYTEST_INFO_JSON" >> "$GITHUB_OUTPUT"
          echo "pytest_ignore_args=$PYTEST_IGNORE_ARGS" >> "$GITHUB_OUTPUT"

  tests:
    needs: [ py-versions, prep-pytest ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
        pytest_info: ${{ fromJSON(needs.prep-pytest.outputs.pytest_info_json) }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.py3 }}
      - name: Parse file and extras from pytest_info
        id: parse
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          PYTEST_INFO="${{ matrix.pytest_info }}"
          # "file:[extras]"
          FILE="${PYTEST_INFO%%:*}"     # before `:`
          EXTRAS="${PYTEST_INFO#*:}"    # after  `:`
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "extras=$EXTRAS" >> "$GITHUB_OUTPUT"
      - name: Install dependencies
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          pip install --upgrade pip wheel setuptools
          pip install ".${{ steps.parse.outputs.extras }}"
      - name: Run tests
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          if [[ "${{ steps.parse.outputs.file }}" == "vanilla" ]]; then
            pytest -vvvv ${{ needs.prep-pytest.outputs.pytest_ignore_args }}
          else
            pytest -vvvv "tests/${{ steps.parse.outputs.file }}"
          fi


  ############################################################################
  # TAG + RELEASE
  #############################################################################

  tag-and-release:
    # only run on main/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      py-versions,
      flake8,
      mypy,
      py-setup,
      py-dependencies,
      tests,
    ]
    uses: WIPACrepo/wipac-dev-workflows/.github/workflows/tag-and-release.yml@v1.16
    permissions: # for GITHUB_TOKEN
      contents: write
    with:
      project-type: python
      python-version: "${{ fromJSON(needs.py-versions.outputs.matrix)[0] }}"
      release-artifacts: |
        py-dependencies-logs
      publish-to-pypi: true
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
