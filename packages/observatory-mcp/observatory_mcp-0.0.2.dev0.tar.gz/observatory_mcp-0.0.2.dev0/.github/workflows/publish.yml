name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      pypi-repo:
        description: 'PyPI repository (pypi or testpypi)'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - pypi
          - testpypi

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required for creating releases and uploading assets

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags for setuptools_scm

    - name: Extract version from tag
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          # Extract version from release tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Release version: $VERSION (from git tag)"
        else
          # For manual triggers, get version from setuptools_scm
          VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Package version: $VERSION (from git)"
        fi
        echo "‚ÑπÔ∏è  Version is automatically managed by setuptools_scm from git tags"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools_scm>=8.0

    - name: Build package
      run: |
        echo "üî® Building version ${{ steps.get_version.outputs.version }}"
        python -m build
        echo ""
        echo "üì¶ Built packages:"
        ls -lh dist/
        echo ""
        echo "‚úÖ Build complete!"

    - name: Verify package version
      run: |
        echo "üîç Verifying built packages..."
        echo ""
        echo "üì¶ Built files:"
        ls -lh dist/
        echo ""
        
        # Extract actual version from built wheel filename
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        BUILT_VERSION=$(basename $WHEEL_FILE | sed 's/observatory_mcp-\(.*\)-py3.*/\1/')
        
        echo "‚úÖ Built version: $BUILT_VERSION"
        echo "üìã Expected from tag: ${{ steps.get_version.outputs.version }}"
        echo ""
        
        # Verify both wheel and tarball exist
        if ls dist/*.whl 1> /dev/null 2>&1; then
          echo "‚úÖ Wheel file: $(ls dist/*.whl)"
        else
          echo "‚ùå ERROR: No wheel file found!"
          exit 1
        fi
        
        if ls dist/*.tar.gz 1> /dev/null 2>&1; then
          echo "‚úÖ Tarball: $(ls dist/*.tar.gz)"
        else
          echo "‚ùå ERROR: No tarball found!"
          exit 1
        fi
        
        echo ""
        echo "‚úÖ Package verification complete!"
        echo "‚ÑπÔ∏è  Version $BUILT_VERSION will be published to PyPI"

    - name: Check package
      run: |
        echo "üîç Validating package metadata..."
        twine check dist/*
        echo "‚úÖ Package validation passed"
        echo ""
        echo "üì¶ Package contents:"
        ls -lh dist/

    - name: Publish to Test PyPI
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.pypi-repo == 'testpypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Publish to PyPI
      if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.pypi-repo == 'pypi')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true  # Skip if version already exists

    - name: Create GitHub Release Assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
