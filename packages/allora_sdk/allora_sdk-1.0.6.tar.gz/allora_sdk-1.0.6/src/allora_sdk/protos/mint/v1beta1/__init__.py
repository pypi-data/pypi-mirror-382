# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mint/v1beta1/genesis.proto, mint/v1beta1/query.proto, mint/v1beta1/tx.proto, mint/v1beta1/types.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "GenesisState",
    "MsgAsyncStub",
    "MsgStub",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "Params",
    "QueryAsyncStub",
    "QueryEmissionInfoRequest",
    "QueryEmissionInfoResponse",
    "QueryInflationRequest",
    "QueryInflationResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryStub",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ...message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the mint module's genesis state.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """

    previous_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    previous target emission rewards per unit staked token
    """

    previous_block_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    ecosystem_tokens_minted: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    number of tokens minted into the ecosystem treasury
    """


default_message_pool.register_message("mint.v1beta1", "GenesisState", GenesisState)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

    Since: cosmos-sdk 0.47
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/mint parameters to update.

    NOTE: All parameters must be supplied.
    """


default_message_pool.register_message(
    "mint.v1beta1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "mint.v1beta1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters for the x/mint module.
    """

    mint_denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    type of coin to mint
    """

    max_supply: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    maximum total supply of the coin
    """

    f_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    ecosystem treasury fraction ideally emitted per unit time
    """

    one_month_smoothing_degree: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    one month exponential moving average smoothing factor, alpha_e in the paper
    """

    ecosystem_treasury_percent_of_total_supply: "str" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply is reserved and locked in the ecosystem
    treasury
    """

    foundation_treasury_percent_of_total_supply: "str" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is unlocked and usable in the
    foundation treasury
    """

    participants_percent_of_total_supply: "str" = betterproto2.field(
        7, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is unlocked and usable by partipicants
    at the genesis
    """

    investors_percent_of_total_supply: "str" = betterproto2.field(
        8, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is locked in the investors bucket at
    the genesis
    """

    team_percent_of_total_supply: "str" = betterproto2.field(
        9, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is locked in the team bucket at the
    genesis
    """

    maximum_monthly_percentage_yield: "str" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )
    """
    The capped max monthly percentage yield (like %APY)
    """

    investors_preseed_percent_of_total_supply: "str" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is locked in the preseed investors
    bucket at the genesis
    """


default_message_pool.register_message("mint.v1beta1", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryEmissionInfoRequest(betterproto2.Message):
    """
    query for a big dump of mint module info
    """

    pass


default_message_pool.register_message(
    "mint.v1beta1", "QueryEmissionInfoRequest", QueryEmissionInfoRequest
)


@dataclass(eq=False, repr=False)
class QueryEmissionInfoResponse(betterproto2.Message):
    """
    return information about the emissions rate on query
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    ecosystem_balance: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    previous_block_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    ecosystem_mint_supply_remaining: "str" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )

    blocks_per_month: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)

    block_height_target_e_i_last_calculated: "int" = betterproto2.field(
        6, betterproto2.TYPE_UINT64
    )

    block_height_target_e_i_next_calculated: "int" = betterproto2.field(
        7, betterproto2.TYPE_UINT64
    )

    network_staked_tokens: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    locked_vesting_tokens_total: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    locked_vesting_tokens_investors_preseed: "str" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )

    locked_vesting_tokens_investors_seed: "str" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )

    locked_vesting_tokens_team: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)

    ecosystem_locked: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    circulating_supply: "str" = betterproto2.field(14, betterproto2.TYPE_STRING)

    max_supply: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    target_emission_rate_per_unit_staked_token: "str" = betterproto2.field(
        16, betterproto2.TYPE_STRING
    )

    reputers_percent: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)

    validators_percent: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)

    maximum_monthly_emission_per_unit_staked_token: "str" = betterproto2.field(
        19, betterproto2.TYPE_STRING
    )

    target_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        20, betterproto2.TYPE_STRING
    )

    emission_per_unit_staked_token: "str" = betterproto2.field(
        21, betterproto2.TYPE_STRING
    )

    emission_per_month: "str" = betterproto2.field(22, betterproto2.TYPE_STRING)

    block_emission: "str" = betterproto2.field(23, betterproto2.TYPE_STRING)

    validator_cut: "str" = betterproto2.field(24, betterproto2.TYPE_STRING)

    allora_rewards_cut: "str" = betterproto2.field(25, betterproto2.TYPE_STRING)

    previous_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        26, betterproto2.TYPE_STRING
    )


default_message_pool.register_message(
    "mint.v1beta1", "QueryEmissionInfoResponse", QueryEmissionInfoResponse
)


@dataclass(eq=False, repr=False)
class QueryInflationRequest(betterproto2.Message):
    """
    QueryInflationRequest is the request type for the Query/Inflation RPC method.
    """

    pass


default_message_pool.register_message(
    "mint.v1beta1", "QueryInflationRequest", QueryInflationRequest
)


@dataclass(eq=False, repr=False)
class QueryInflationResponse(betterproto2.Message):
    """
    QueryInflationResponse is the response type for the Query/Inflation RPC
    method.
    """

    inflation: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    inflation is the current minting inflation value.
    """


default_message_pool.register_message(
    "mint.v1beta1", "QueryInflationResponse", QueryInflationResponse
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "mint.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "mint.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


class MsgStub:
    """
    Msg defines the x/mint Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        update params. Only callable by someone on the emissions module whitelist
        """

        return self._channel.unary_unary(
            "/mint.v1beta1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the x/mint Msg service.
    """

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        update params. Only callable by someone on the emissions module whitelist
        """

        return await self._unary_unary(
            "/mint.v1beta1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query provides defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params returns the total set of minting parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/mint.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def inflation(
        self, message: "QueryInflationRequest | None" = None
    ) -> "QueryInflationResponse":
        """
        Inflation returns the current minting inflation value.
        """

        if message is None:
            message = QueryInflationRequest()

        return self._channel.unary_unary(
            "/mint.v1beta1.Query/Inflation",
            QueryInflationRequest.SerializeToString,
            QueryInflationResponse.FromString,
        )(message)

    def emission_info(
        self, message: "QueryEmissionInfoRequest | None" = None
    ) -> "QueryEmissionInfoResponse":
        if message is None:
            message = QueryEmissionInfoRequest()

        return self._channel.unary_unary(
            "/mint.v1beta1.Query/EmissionInfo",
            QueryEmissionInfoRequest.SerializeToString,
            QueryEmissionInfoResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query provides defines the gRPC querier service.
    """

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params returns the total set of minting parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/mint.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def inflation(
        self,
        message: "QueryInflationRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryInflationResponse":
        """
        Inflation returns the current minting inflation value.
        """

        if message is None:
            message = QueryInflationRequest()

        return await self._unary_unary(
            "/mint.v1beta1.Query/Inflation",
            message,
            QueryInflationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def emission_info(
        self,
        message: "QueryEmissionInfoRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryEmissionInfoResponse":
        if message is None:
            message = QueryEmissionInfoRequest()

        return await self._unary_unary(
            "/mint.v1beta1.Query/EmissionInfo",
            message,
            QueryEmissionInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
