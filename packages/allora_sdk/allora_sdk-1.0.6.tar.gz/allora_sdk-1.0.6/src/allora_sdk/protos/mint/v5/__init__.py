# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mint/v5/genesis.proto, mint/v5/query.proto, mint/v5/tx.proto, mint/v5/types.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "GenesisState",
    "MsgServiceAsyncStub",
    "MsgServiceStub",
    "Params",
    "QueryServiceAsyncStub",
    "QueryServiceEmissionInfoRequest",
    "QueryServiceEmissionInfoResponse",
    "QueryServiceInflationRequest",
    "QueryServiceInflationResponse",
    "QueryServiceParamsRequest",
    "QueryServiceParamsResponse",
    "QueryServiceStub",
    "RecalculateTargetEmissionRequest",
    "RecalculateTargetEmissionResponse",
    "UpdateParamsRequest",
    "UpdateParamsResponse",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ...message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the mint module's genesis state.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """

    previous_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    previous target emission rewards per unit staked token
    """

    previous_block_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    ecosystem_tokens_minted: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    number of tokens minted into the ecosystem treasury
    """

    months_unlocked: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    number of months already unlocked for investor token vesting purposes
    """


default_message_pool.register_message("mint.v5", "GenesisState", GenesisState)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters for the x/mint module.
    """

    mint_denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    type of coin to mint
    """

    max_supply: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    maximum total supply of the coin
    """

    f_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    ecosystem treasury fraction ideally emitted per unit time
    """

    one_month_smoothing_degree: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    one month exponential moving average smoothing factor, alpha_e in the paper
    """

    ecosystem_treasury_percent_of_total_supply: "str" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply is reserved and locked in the ecosystem
    treasury
    """

    foundation_treasury_percent_of_total_supply: "str" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is unlocked and usable in the
    foundation treasury
    """

    participants_percent_of_total_supply: "str" = betterproto2.field(
        7, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is unlocked and usable by partipicants
    at the genesis
    """

    investors_percent_of_total_supply: "str" = betterproto2.field(
        8, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is locked in the investors bucket at
    the genesis
    """

    team_percent_of_total_supply: "str" = betterproto2.field(
        9, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is locked in the team bucket at the
    genesis
    """

    maximum_monthly_percentage_yield: "str" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )
    """
    The capped max monthly percentage yield (like %APY)
    """

    investors_preseed_percent_of_total_supply: "str" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )
    """
    percentage of the total supply that is locked in the preseed investors
    bucket at the genesis
    """

    emission_enabled: "bool" = betterproto2.field(12, betterproto2.TYPE_BOOL)
    """
    Whether or not the network is allowed to emit any rewards
    Must be set to true to allow the network to pay out rewards.
    """


default_message_pool.register_message("mint.v5", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryServiceEmissionInfoRequest(betterproto2.Message):
    """
    query for a big dump of mint module info
    """

    pass


default_message_pool.register_message(
    "mint.v5", "QueryServiceEmissionInfoRequest", QueryServiceEmissionInfoRequest
)


@dataclass(eq=False, repr=False)
class QueryServiceEmissionInfoResponse(betterproto2.Message):
    """
    return information about the emissions rate on query
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    ecosystem_balance: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    previous_block_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    ecosystem_mint_supply_remaining: "str" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )

    blocks_per_month: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)

    block_height_target_e_i_last_calculated: "int" = betterproto2.field(
        6, betterproto2.TYPE_UINT64
    )

    block_height_target_e_i_next_calculated: "int" = betterproto2.field(
        7, betterproto2.TYPE_UINT64
    )

    network_staked_tokens: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    locked_vesting_tokens_total: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    locked_vesting_tokens_investors_preseed: "str" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )

    locked_vesting_tokens_investors_seed: "str" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )

    locked_vesting_tokens_team: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)

    ecosystem_locked: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    circulating_supply: "str" = betterproto2.field(14, betterproto2.TYPE_STRING)

    max_supply: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    target_emission_rate_per_unit_staked_token: "str" = betterproto2.field(
        16, betterproto2.TYPE_STRING
    )

    reputers_percent: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)

    validators_percent: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)

    maximum_monthly_emission_per_unit_staked_token: "str" = betterproto2.field(
        19, betterproto2.TYPE_STRING
    )

    target_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        20, betterproto2.TYPE_STRING
    )

    emission_per_unit_staked_token: "str" = betterproto2.field(
        21, betterproto2.TYPE_STRING
    )

    emission_per_month: "str" = betterproto2.field(22, betterproto2.TYPE_STRING)

    block_emission: "str" = betterproto2.field(23, betterproto2.TYPE_STRING)

    validator_cut: "str" = betterproto2.field(24, betterproto2.TYPE_STRING)

    allora_rewards_cut: "str" = betterproto2.field(25, betterproto2.TYPE_STRING)

    previous_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        26, betterproto2.TYPE_STRING
    )

    months_already_unlocked: "str" = betterproto2.field(27, betterproto2.TYPE_STRING)

    updated_months_unlocked: "str" = betterproto2.field(28, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v5", "QueryServiceEmissionInfoResponse", QueryServiceEmissionInfoResponse
)


@dataclass(eq=False, repr=False)
class QueryServiceInflationRequest(betterproto2.Message):
    """
    QueryServiceInflationRequest is the request type for the Query/Inflation RPC method.
    """

    pass


default_message_pool.register_message(
    "mint.v5", "QueryServiceInflationRequest", QueryServiceInflationRequest
)


@dataclass(eq=False, repr=False)
class QueryServiceInflationResponse(betterproto2.Message):
    """
    QueryServiceInflationResponse is the response type for the Query/Inflation RPC
    method.
    """

    inflation: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    inflation is the current minting inflation value.
    """


default_message_pool.register_message(
    "mint.v5", "QueryServiceInflationResponse", QueryServiceInflationResponse
)


@dataclass(eq=False, repr=False)
class QueryServiceParamsRequest(betterproto2.Message):
    """
    QueryServiceParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "mint.v5", "QueryServiceParamsRequest", QueryServiceParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryServiceParamsResponse(betterproto2.Message):
    """
    QueryServiceParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "mint.v5", "QueryServiceParamsResponse", QueryServiceParamsResponse
)


@dataclass(eq=False, repr=False)
class RecalculateTargetEmissionRequest(betterproto2.Message):
    """
    Force a recalculation of the target emission right now.
    This indirectly controls recalculating the inflation rate for the network
    and the stakers APY %.
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v5", "RecalculateTargetEmissionRequest", RecalculateTargetEmissionRequest
)


@dataclass(eq=False, repr=False)
class RecalculateTargetEmissionResponse(betterproto2.Message):
    """
    response from recalculating the target emission
    """

    pass


default_message_pool.register_message(
    "mint.v5", "RecalculateTargetEmissionResponse", RecalculateTargetEmissionResponse
)


@dataclass(eq=False, repr=False)
class UpdateParamsRequest(betterproto2.Message):
    """
    UpdateParams allows an update to the minting parameters of the module.
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/mint parameters to update.

    NOTE: All parameters must be supplied.
    """

    recalculate_target_emission: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    allow updating params to also force a recalculation of the target emission
    """

    blocks_per_month: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    blocksPerMonth is used/updateable by both the mint and emissions module.
    """


default_message_pool.register_message(
    "mint.v5", "UpdateParamsRequest", UpdateParamsRequest
)


@dataclass(eq=False, repr=False)
class UpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.
    """

    pass


default_message_pool.register_message(
    "mint.v5", "UpdateParamsResponse", UpdateParamsResponse
)


class MsgServiceStub:
    """
    Msg defines the x/mint Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "UpdateParamsRequest") -> "UpdateParamsResponse":
        """
        update params. Only callable by someone on the emissions module whitelist
        """

        return self._channel.unary_unary(
            "/mint.v5.MsgService/UpdateParams",
            UpdateParamsRequest.SerializeToString,
            UpdateParamsResponse.FromString,
        )(message)

    def recalculate_target_emission(
        self, message: "RecalculateTargetEmissionRequest"
    ) -> "RecalculateTargetEmissionResponse":
        """
        force a target emission calculation right now. Otherwise waits until the
        end of params.BlocksPerMonth
        """

        return self._channel.unary_unary(
            "/mint.v5.MsgService/RecalculateTargetEmission",
            RecalculateTargetEmissionRequest.SerializeToString,
            RecalculateTargetEmissionResponse.FromString,
        )(message)


class MsgServiceAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the x/mint Msg service.
    """

    async def update_params(
        self,
        message: "UpdateParamsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateParamsResponse":
        """
        update params. Only callable by someone on the emissions module whitelist
        """

        return await self._unary_unary(
            "/mint.v5.MsgService/UpdateParams",
            message,
            UpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def recalculate_target_emission(
        self,
        message: "RecalculateTargetEmissionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RecalculateTargetEmissionResponse":
        """
        force a target emission calculation right now. Otherwise waits until the
        end of params.BlocksPerMonth
        """

        return await self._unary_unary(
            "/mint.v5.MsgService/RecalculateTargetEmission",
            message,
            RecalculateTargetEmissionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryServiceStub:
    """
    QueryService provides defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(
        self, message: "QueryServiceParamsRequest | None" = None
    ) -> "QueryServiceParamsResponse":
        """
        Params returns the total set of minting parameters.
        """

        if message is None:
            message = QueryServiceParamsRequest()

        return self._channel.unary_unary(
            "/mint.v5.QueryService/Params",
            QueryServiceParamsRequest.SerializeToString,
            QueryServiceParamsResponse.FromString,
        )(message)

    def inflation(
        self, message: "QueryServiceInflationRequest | None" = None
    ) -> "QueryServiceInflationResponse":
        """
        Inflation returns the current minting inflation value.
        """

        if message is None:
            message = QueryServiceInflationRequest()

        return self._channel.unary_unary(
            "/mint.v5.QueryService/Inflation",
            QueryServiceInflationRequest.SerializeToString,
            QueryServiceInflationResponse.FromString,
        )(message)

    def emission_info(
        self, message: "QueryServiceEmissionInfoRequest | None" = None
    ) -> "QueryServiceEmissionInfoResponse":
        if message is None:
            message = QueryServiceEmissionInfoRequest()

        return self._channel.unary_unary(
            "/mint.v5.QueryService/EmissionInfo",
            QueryServiceEmissionInfoRequest.SerializeToString,
            QueryServiceEmissionInfoResponse.FromString,
        )(message)


class QueryServiceAsyncStub(betterproto2.ServiceStub):
    """
    QueryService provides defines the gRPC querier service.
    """

    async def params(
        self,
        message: "QueryServiceParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryServiceParamsResponse":
        """
        Params returns the total set of minting parameters.
        """

        if message is None:
            message = QueryServiceParamsRequest()

        return await self._unary_unary(
            "/mint.v5.QueryService/Params",
            message,
            QueryServiceParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def inflation(
        self,
        message: "QueryServiceInflationRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryServiceInflationResponse":
        """
        Inflation returns the current minting inflation value.
        """

        if message is None:
            message = QueryServiceInflationRequest()

        return await self._unary_unary(
            "/mint.v5.QueryService/Inflation",
            message,
            QueryServiceInflationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def emission_info(
        self,
        message: "QueryServiceEmissionInfoRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryServiceEmissionInfoResponse":
        if message is None:
            message = QueryServiceEmissionInfoRequest()

        return await self._unary_unary(
            "/mint.v5.QueryService/EmissionInfo",
            message,
            QueryServiceEmissionInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
