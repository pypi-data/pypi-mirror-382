# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tendermint/types/block.proto, tendermint/types/evidence.proto, tendermint/types/params.proto, tendermint/types/types.proto, tendermint/types/validator.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AbciParams",
    "Block",
    "BlockId",
    "BlockIdFlag",
    "BlockMeta",
    "BlockParams",
    "Commit",
    "CommitSig",
    "ConsensusParams",
    "Data",
    "DuplicateVoteEvidence",
    "Evidence",
    "EvidenceList",
    "EvidenceParams",
    "ExtendedCommit",
    "ExtendedCommitSig",
    "HashedParams",
    "Header",
    "LightBlock",
    "LightClientAttackEvidence",
    "Part",
    "PartSetHeader",
    "Proposal",
    "SignedHeader",
    "SignedMsgType",
    "SimpleValidator",
    "TxProof",
    "Validator",
    "ValidatorParams",
    "ValidatorSet",
    "VersionParams",
    "Vote",
)

import builtins
import datetime
from dataclasses import dataclass

import betterproto2

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class BlockIdFlag(betterproto2.Enum):
    """
    BlockIdFlag indicates which BlockID the signature is for
    """

    UNKNOWN = 0
    """
    indicates an error condition
    """

    ABSENT = 1
    """
    the vote was not received
    """

    COMMIT = 2
    """
    voted for the block that received the majority
    """

    NIL = 3
    """
    voted for nil
    """

    betterproto_proto_names = {
        0: "BLOCK_ID_FLAG_UNKNOWN",
        1: "BLOCK_ID_FLAG_ABSENT",
        2: "BLOCK_ID_FLAG_COMMIT",
        3: "BLOCK_ID_FLAG_NIL",
    }


class SignedMsgType(betterproto2.Enum):
    """
    SignedMsgType is a type of signed message in the consensus.
    """

    UNKNOWN = 0

    PREVOTE = 1
    """
    Votes
    """

    PRECOMMIT = 2

    PROPOSAL = 32
    """
    Proposals
    """

    betterproto_proto_names = {
        0: "SIGNED_MSG_TYPE_UNKNOWN",
        1: "SIGNED_MSG_TYPE_PREVOTE",
        2: "SIGNED_MSG_TYPE_PRECOMMIT",
        32: "SIGNED_MSG_TYPE_PROPOSAL",
    }


@dataclass(eq=False, repr=False)
class AbciParams(betterproto2.Message):
    """
    ABCIParams configure functionality specific to the Application Blockchain Interface.
    """

    vote_extensions_enable_height: "int" = betterproto2.field(
        1, betterproto2.TYPE_INT64
    )
    """
    vote_extensions_enable_height configures the first height during which
    vote extensions will be enabled. During this specified height, and for all
    subsequent heights, precommit messages that do not contain valid extension data
    will be considered invalid. Prior to this height, vote extensions will not
    be used or accepted by validators on the network.

    Once enabled, vote extensions will be created by the application in ExtendVote,
    passed to the application for validation in VerifyVoteExtension and given
    to the application to use when proposing a block during PrepareProposal.
    """


default_message_pool.register_message("tendermint.types", "ABCIParams", AbciParams)


@dataclass(eq=False, repr=False)
class Block(betterproto2.Message):
    header: "Header | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    data: "Data | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    evidence: "EvidenceList | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    last_commit: "Commit | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("tendermint.types", "Block", Block)


@dataclass(eq=False, repr=False)
class BlockId(betterproto2.Message):
    """
    BlockID
    """

    hash: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    part_set_header: "PartSetHeader | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("tendermint.types", "BlockID", BlockId)


@dataclass(eq=False, repr=False)
class BlockMeta(betterproto2.Message):
    block_id: "BlockId | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    block_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    header: "Header | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    num_txs: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)


default_message_pool.register_message("tendermint.types", "BlockMeta", BlockMeta)


@dataclass(eq=False, repr=False)
class BlockParams(betterproto2.Message):
    """
    BlockParams contains limits on the block size.
    """

    max_bytes: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Max block size, in bytes.
    Note: must be greater than 0
    """

    max_gas: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    Max gas per block.
    Note: must be greater or equal to -1
    """


default_message_pool.register_message("tendermint.types", "BlockParams", BlockParams)


@dataclass(eq=False, repr=False)
class Commit(betterproto2.Message):
    """
    Commit contains the evidence that a block was committed by a set of validators.
    """

    height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    round: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    block_id: "BlockId | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    signatures: "list[CommitSig]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("tendermint.types", "Commit", Commit)


@dataclass(eq=False, repr=False)
class CommitSig(betterproto2.Message):
    """
    CommitSig is a part of the Vote included in a Commit.
    """

    block_id_flag: "BlockIdFlag" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: BlockIdFlag(0)
    )

    validator_address: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    timestamp: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )

    signature: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)


default_message_pool.register_message("tendermint.types", "CommitSig", CommitSig)


@dataclass(eq=False, repr=False)
class ConsensusParams(betterproto2.Message):
    """
    ConsensusParams contains consensus critical parameters that determine the
    validity of blocks.
    """

    block: "BlockParams | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    evidence: "EvidenceParams | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    validator: "ValidatorParams | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    version: "VersionParams | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    abci: "AbciParams | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "tendermint.types", "ConsensusParams", ConsensusParams
)


@dataclass(eq=False, repr=False)
class Data(betterproto2.Message):
    """
    Data contains the set of transactions included in the block
    """

    txs: "list[bytes]" = betterproto2.field(1, betterproto2.TYPE_BYTES, repeated=True)
    """
    Txs that will be applied by state @ block.Height+1.
    NOTE: not all txs here are valid.  We're just agreeing on the order first.
    This means that block.AppHash does not include these txs.
    """


default_message_pool.register_message("tendermint.types", "Data", Data)


@dataclass(eq=False, repr=False)
class DuplicateVoteEvidence(betterproto2.Message):
    """
    DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
    """

    vote_a: "Vote | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    vote_b: "Vote | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    total_voting_power: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    validator_power: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)

    timestamp: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )


default_message_pool.register_message(
    "tendermint.types", "DuplicateVoteEvidence", DuplicateVoteEvidence
)


@dataclass(eq=False, repr=False)
class Evidence(betterproto2.Message):
    """


    Oneofs:
        - sum:
    """

    duplicate_vote_evidence: "DuplicateVoteEvidence | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="sum"
    )

    light_client_attack_evidence: "LightClientAttackEvidence | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="sum")
    )


default_message_pool.register_message("tendermint.types", "Evidence", Evidence)


@dataclass(eq=False, repr=False)
class EvidenceList(betterproto2.Message):
    evidence: "list[Evidence]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("tendermint.types", "EvidenceList", EvidenceList)


@dataclass(eq=False, repr=False)
class EvidenceParams(betterproto2.Message):
    """
    EvidenceParams determine how we handle evidence of malfeasance.
    """

    max_age_num_blocks: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Max age of evidence, in blocks.

    The basic formula for calculating this is: MaxAgeDuration / {average block
    time}.
    """

    max_age_duration: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Duration,
        optional=True,
    )
    """
    Max age of evidence, in time.

    It should correspond with an app's "unbonding period" or other similar
    mechanism for handling [Nothing-At-Stake
    attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
    """

    max_bytes: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)
    """
    This sets the maximum size of total evidence in bytes that can be committed in a single block.
    and should fall comfortably under the max block bytes.
    Default is 1048576 or 1MB
    """


default_message_pool.register_message(
    "tendermint.types", "EvidenceParams", EvidenceParams
)


@dataclass(eq=False, repr=False)
class ExtendedCommit(betterproto2.Message):
    height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    round: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    block_id: "BlockId | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    extended_signatures: "list[ExtendedCommitSig]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "tendermint.types", "ExtendedCommit", ExtendedCommit
)


@dataclass(eq=False, repr=False)
class ExtendedCommitSig(betterproto2.Message):
    """
    ExtendedCommitSig retains all the same fields as CommitSig but adds vote
    extension-related fields. We use two signatures to ensure backwards compatibility.
    That is the digest of the original signature is still the same in prior versions
    """

    block_id_flag: "BlockIdFlag" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: BlockIdFlag(0)
    )

    validator_address: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    timestamp: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )

    signature: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)

    extension: "bytes" = betterproto2.field(5, betterproto2.TYPE_BYTES)
    """
    Vote extension data
    """

    extension_signature: "bytes" = betterproto2.field(6, betterproto2.TYPE_BYTES)
    """
    Vote extension signature
    """


default_message_pool.register_message(
    "tendermint.types", "ExtendedCommitSig", ExtendedCommitSig
)


@dataclass(eq=False, repr=False)
class HashedParams(betterproto2.Message):
    """
    HashedParams is a subset of ConsensusParams.

    It is hashed into the Header.ConsensusHash.
    """

    block_max_bytes: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    block_max_gas: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message("tendermint.types", "HashedParams", HashedParams)


@dataclass(eq=False, repr=False)
class Header(betterproto2.Message):
    """
    --------------------------------

    Header defines the structure of a block header.
    """

    version: "_version__.Consensus | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    basic block info
    """

    chain_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    time: "datetime.datetime | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )

    last_block_id: "BlockId | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    prev block info
    """

    last_commit_hash: "bytes" = betterproto2.field(6, betterproto2.TYPE_BYTES)
    """
    hashes of block data

    commit from validators from the last block
    """

    data_hash: "bytes" = betterproto2.field(7, betterproto2.TYPE_BYTES)
    """
    transactions
    """

    validators_hash: "bytes" = betterproto2.field(8, betterproto2.TYPE_BYTES)
    """
    hashes from the app output from the prev block

    validators for the current block
    """

    next_validators_hash: "bytes" = betterproto2.field(9, betterproto2.TYPE_BYTES)
    """
    validators for the next block
    """

    consensus_hash: "bytes" = betterproto2.field(10, betterproto2.TYPE_BYTES)
    """
    consensus params for current block
    """

    app_hash: "bytes" = betterproto2.field(11, betterproto2.TYPE_BYTES)
    """
    state after txs from the previous block
    """

    last_results_hash: "bytes" = betterproto2.field(12, betterproto2.TYPE_BYTES)
    """
    root hash of all results from the txs from the previous block
    """

    evidence_hash: "bytes" = betterproto2.field(13, betterproto2.TYPE_BYTES)
    """
    consensus info

    evidence included in the block
    """

    proposer_address: "bytes" = betterproto2.field(14, betterproto2.TYPE_BYTES)
    """
    original proposer of the block
    """


default_message_pool.register_message("tendermint.types", "Header", Header)


@dataclass(eq=False, repr=False)
class LightBlock(betterproto2.Message):
    signed_header: "SignedHeader | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    validator_set: "ValidatorSet | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("tendermint.types", "LightBlock", LightBlock)


@dataclass(eq=False, repr=False)
class LightClientAttackEvidence(betterproto2.Message):
    """
    LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
    """

    conflicting_block: "LightBlock | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    common_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    byzantine_validators: "list[Validator]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    total_voting_power: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)

    timestamp: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )


default_message_pool.register_message(
    "tendermint.types", "LightClientAttackEvidence", LightClientAttackEvidence
)


@dataclass(eq=False, repr=False)
class Part(betterproto2.Message):
    index: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    bytes: "builtins.bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    proof: "_crypto__.Proof | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("tendermint.types", "Part", Part)


@dataclass(eq=False, repr=False)
class PartSetHeader(betterproto2.Message):
    """
    PartsetHeader
    """

    total: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    hash: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "tendermint.types", "PartSetHeader", PartSetHeader
)


@dataclass(eq=False, repr=False)
class Proposal(betterproto2.Message):
    type: "SignedMsgType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: SignedMsgType(0)
    )

    height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    round: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)

    pol_round: "int" = betterproto2.field(4, betterproto2.TYPE_INT32)

    block_id: "BlockId | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    timestamp: "datetime.datetime | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )

    signature: "bytes" = betterproto2.field(7, betterproto2.TYPE_BYTES)


default_message_pool.register_message("tendermint.types", "Proposal", Proposal)


@dataclass(eq=False, repr=False)
class SignedHeader(betterproto2.Message):
    header: "Header | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    commit: "Commit | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("tendermint.types", "SignedHeader", SignedHeader)


@dataclass(eq=False, repr=False)
class SimpleValidator(betterproto2.Message):
    pub_key: "_crypto__.PublicKey | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    voting_power: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "tendermint.types", "SimpleValidator", SimpleValidator
)


@dataclass(eq=False, repr=False)
class TxProof(betterproto2.Message):
    """
    TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
    """

    root_hash: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    data: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    proof: "_crypto__.Proof | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("tendermint.types", "TxProof", TxProof)


@dataclass(eq=False, repr=False)
class Validator(betterproto2.Message):
    address: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    pub_key: "_crypto__.PublicKey | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    voting_power: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    proposer_priority: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)


default_message_pool.register_message("tendermint.types", "Validator", Validator)


@dataclass(eq=False, repr=False)
class ValidatorParams(betterproto2.Message):
    """
    ValidatorParams restrict the public key types validators can use.
    NOTE: uses ABCI pubkey naming, not Amino names.
    """

    pub_key_types: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "tendermint.types", "ValidatorParams", ValidatorParams
)


@dataclass(eq=False, repr=False)
class ValidatorSet(betterproto2.Message):
    validators: "list[Validator]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    proposer: "Validator | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    total_voting_power: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)


default_message_pool.register_message("tendermint.types", "ValidatorSet", ValidatorSet)


@dataclass(eq=False, repr=False)
class VersionParams(betterproto2.Message):
    """
    VersionParams contains the ABCI application version.
    """

    app: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "tendermint.types", "VersionParams", VersionParams
)


@dataclass(eq=False, repr=False)
class Vote(betterproto2.Message):
    """
    Vote represents a prevote or precommit vote from validators for
    consensus.
    """

    type: "SignedMsgType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: SignedMsgType(0)
    )

    height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    round: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)

    block_id: "BlockId | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    zero if vote is nil.
    """

    timestamp: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )

    validator_address: "bytes" = betterproto2.field(6, betterproto2.TYPE_BYTES)

    validator_index: "int" = betterproto2.field(7, betterproto2.TYPE_INT32)

    signature: "bytes" = betterproto2.field(8, betterproto2.TYPE_BYTES)
    """
    Vote signature by the validator if they participated in consensus for the
    associated block.
    """

    extension: "bytes" = betterproto2.field(9, betterproto2.TYPE_BYTES)
    """
    Vote extension provided by the application. Only valid for precommit
    messages.
    """

    extension_signature: "bytes" = betterproto2.field(10, betterproto2.TYPE_BYTES)
    """
    Vote extension signature by the validator if they participated in
    consensus for the associated block.
    Only valid for precommit messages.
    """


default_message_pool.register_message("tendermint.types", "Vote", Vote)


from ...google import protobuf as __google__protobuf__
from .. import crypto as _crypto__
from .. import version as _version__
