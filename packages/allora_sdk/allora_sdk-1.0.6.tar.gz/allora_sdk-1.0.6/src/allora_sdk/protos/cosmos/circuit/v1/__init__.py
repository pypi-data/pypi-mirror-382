# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/circuit/v1/query.proto, cosmos/circuit/v1/tx.proto, cosmos/circuit/v1/types.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AccountResponse",
    "AccountsResponse",
    "DisabledListResponse",
    "GenesisAccountPermissions",
    "GenesisState",
    "MsgAsyncStub",
    "MsgAuthorizeCircuitBreaker",
    "MsgAuthorizeCircuitBreakerResponse",
    "MsgResetCircuitBreaker",
    "MsgResetCircuitBreakerResponse",
    "MsgStub",
    "MsgTripCircuitBreaker",
    "MsgTripCircuitBreakerResponse",
    "Permissions",
    "PermissionsLevel",
    "QueryAccountRequest",
    "QueryAccountsRequest",
    "QueryAsyncStub",
    "QueryDisabledListRequest",
    "QueryStub",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class PermissionsLevel(betterproto2.Enum):
    """
    Level is the permission level.
    """

    NONE_UNSPECIFIED = 0
    """
    LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit
    breaker permissions.
    """

    SOME_MSGS = 1
    """
    LEVEL_SOME_MSGS indicates that the account will have permission to
    trip or reset the circuit breaker for some Msg type URLs. If this level
    is chosen, a non-empty list of Msg type URLs must be provided in
    limit_type_urls.
    """

    ALL_MSGS = 2
    """
    LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit
    breaker for Msg's of all type URLs.
    """

    SUPER_ADMIN = 3
    """
    LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker
    actions and can grant permissions to other accounts.
    """

    betterproto_proto_names = {
        0: "LEVEL_NONE_UNSPECIFIED",
        1: "LEVEL_SOME_MSGS",
        2: "LEVEL_ALL_MSGS",
        3: "LEVEL_SUPER_ADMIN",
    }


@dataclass(eq=False, repr=False)
class AccountResponse(betterproto2.Message):
    """
    AccountResponse is the response type for the Query/Account RPC method.
    """

    permission: "Permissions | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.circuit.v1", "AccountResponse", AccountResponse
)


@dataclass(eq=False, repr=False)
class AccountsResponse(betterproto2.Message):
    """
    AccountsResponse is the response type for the Query/Accounts RPC method.
    """

    accounts: "list[GenesisAccountPermissions]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.circuit.v1", "AccountsResponse", AccountsResponse
)


@dataclass(eq=False, repr=False)
class DisabledListResponse(betterproto2.Message):
    """
    DisabledListResponse is the response type for the Query/DisabledList RPC method.
    """

    disabled_list: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "cosmos.circuit.v1", "DisabledListResponse", DisabledListResponse
)


@dataclass(eq=False, repr=False)
class GenesisAccountPermissions(betterproto2.Message):
    """
    GenesisAccountPermissions is the account permissions for the circuit breaker in genesis
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    permissions: "Permissions | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.circuit.v1", "GenesisAccountPermissions", GenesisAccountPermissions
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState is the state that must be provided at genesis.
    """

    account_permissions: "list[GenesisAccountPermissions]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    disabled_type_urls: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message("cosmos.circuit.v1", "GenesisState", GenesisState)


@dataclass(eq=False, repr=False)
class MsgAuthorizeCircuitBreaker(betterproto2.Message):
    """
    MsgAuthorizeCircuitBreaker defines the Msg/AuthorizeCircuitBreaker request type.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    granter is the granter of the circuit breaker permissions and must have
    LEVEL_SUPER_ADMIN.
    """

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    grantee is the account authorized with the provided permissions.
    """

    permissions: "Permissions | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    permissions are the circuit breaker permissions that the grantee receives.
    These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
    be specified to revoke all permissions.
    """


default_message_pool.register_message(
    "cosmos.circuit.v1", "MsgAuthorizeCircuitBreaker", MsgAuthorizeCircuitBreaker
)


@dataclass(eq=False, repr=False)
class MsgAuthorizeCircuitBreakerResponse(betterproto2.Message):
    """
    MsgAuthorizeCircuitBreakerResponse defines the Msg/AuthorizeCircuitBreaker response type.
    """

    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "cosmos.circuit.v1",
    "MsgAuthorizeCircuitBreakerResponse",
    MsgAuthorizeCircuitBreakerResponse,
)


@dataclass(eq=False, repr=False)
class MsgResetCircuitBreaker(betterproto2.Message):
    """
    MsgResetCircuitBreaker defines the Msg/ResetCircuitBreaker request type.
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the account authorized to trip or reset the circuit breaker.
    """

    msg_type_urls: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    msg_type_urls specifies a list of Msg type URLs to resume processing. If
    it is left empty all Msg processing for type URLs that the account is
    authorized to trip will resume.
    """


default_message_pool.register_message(
    "cosmos.circuit.v1", "MsgResetCircuitBreaker", MsgResetCircuitBreaker
)


@dataclass(eq=False, repr=False)
class MsgResetCircuitBreakerResponse(betterproto2.Message):
    """
    MsgResetCircuitBreakerResponse defines the Msg/ResetCircuitBreaker response type.
    """

    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "cosmos.circuit.v1",
    "MsgResetCircuitBreakerResponse",
    MsgResetCircuitBreakerResponse,
)


@dataclass(eq=False, repr=False)
class MsgTripCircuitBreaker(betterproto2.Message):
    """
    MsgTripCircuitBreaker defines the Msg/TripCircuitBreaker request type.
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the account authorized to trip the circuit breaker.
    """

    msg_type_urls: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    msg_type_urls specifies a list of type URLs to immediately stop processing.
    IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY.
    This value is validated against the authority's permissions and if the
    authority does not have permissions to trip the specified msg type URLs
    (or all URLs), the operation will fail.
    """


default_message_pool.register_message(
    "cosmos.circuit.v1", "MsgTripCircuitBreaker", MsgTripCircuitBreaker
)


@dataclass(eq=False, repr=False)
class MsgTripCircuitBreakerResponse(betterproto2.Message):
    """
    MsgTripCircuitBreakerResponse defines the Msg/TripCircuitBreaker response type.
    """

    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "cosmos.circuit.v1", "MsgTripCircuitBreakerResponse", MsgTripCircuitBreakerResponse
)


@dataclass(eq=False, repr=False)
class Permissions(betterproto2.Message):
    """
    Permissions are the permissions that an account has to trip
    or reset the circuit breaker.
    """

    level: "PermissionsLevel" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: PermissionsLevel(0)
    )
    """
    level is the level of permissions granted to this account.
    """

    limit_type_urls: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type
    URLs that the account can trip. It is an error to use limit_type_urls with
    a level other than LEVEL_SOME_MSGS.
    """


default_message_pool.register_message("cosmos.circuit.v1", "Permissions", Permissions)


@dataclass(eq=False, repr=False)
class QueryAccountRequest(betterproto2.Message):
    """
    QueryAccountRequest is the request type for the Query/Account RPC method.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.circuit.v1", "QueryAccountRequest", QueryAccountRequest
)


@dataclass(eq=False, repr=False)
class QueryAccountsRequest(betterproto2.Message):
    """
    QueryAccountsRequest is the request type for the Query/Accounts RPC method.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.circuit.v1", "QueryAccountsRequest", QueryAccountsRequest
)


@dataclass(eq=False, repr=False)
class QueryDisabledListRequest(betterproto2.Message):
    """
    QueryDisableListRequest is the request type for the Query/DisabledList RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.circuit.v1", "QueryDisabledListRequest", QueryDisabledListRequest
)


class MsgStub:
    """
    Msg defines the circuit Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def authorize_circuit_breaker(
        self, message: "MsgAuthorizeCircuitBreaker"
    ) -> "MsgAuthorizeCircuitBreakerResponse":
        """
        AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another
        account's circuit breaker permissions.
        """

        return self._channel.unary_unary(
            "/cosmos.circuit.v1.Msg/AuthorizeCircuitBreaker",
            MsgAuthorizeCircuitBreaker.SerializeToString,
            MsgAuthorizeCircuitBreakerResponse.FromString,
        )(message)

    def trip_circuit_breaker(
        self, message: "MsgTripCircuitBreaker"
    ) -> "MsgTripCircuitBreakerResponse":
        """
        TripCircuitBreaker pauses processing of Msg's in the state machine.
        """

        return self._channel.unary_unary(
            "/cosmos.circuit.v1.Msg/TripCircuitBreaker",
            MsgTripCircuitBreaker.SerializeToString,
            MsgTripCircuitBreakerResponse.FromString,
        )(message)

    def reset_circuit_breaker(
        self, message: "MsgResetCircuitBreaker"
    ) -> "MsgResetCircuitBreakerResponse":
        """
        ResetCircuitBreaker resumes processing of Msg's in the state machine that
        have been been paused using TripCircuitBreaker.
        """

        return self._channel.unary_unary(
            "/cosmos.circuit.v1.Msg/ResetCircuitBreaker",
            MsgResetCircuitBreaker.SerializeToString,
            MsgResetCircuitBreakerResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the circuit Msg service.
    """

    async def authorize_circuit_breaker(
        self,
        message: "MsgAuthorizeCircuitBreaker",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgAuthorizeCircuitBreakerResponse":
        """
        AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another
        account's circuit breaker permissions.
        """

        return await self._unary_unary(
            "/cosmos.circuit.v1.Msg/AuthorizeCircuitBreaker",
            message,
            MsgAuthorizeCircuitBreakerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def trip_circuit_breaker(
        self,
        message: "MsgTripCircuitBreaker",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgTripCircuitBreakerResponse":
        """
        TripCircuitBreaker pauses processing of Msg's in the state machine.
        """

        return await self._unary_unary(
            "/cosmos.circuit.v1.Msg/TripCircuitBreaker",
            message,
            MsgTripCircuitBreakerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reset_circuit_breaker(
        self,
        message: "MsgResetCircuitBreaker",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgResetCircuitBreakerResponse":
        """
        ResetCircuitBreaker resumes processing of Msg's in the state machine that
        have been been paused using TripCircuitBreaker.
        """

        return await self._unary_unary(
            "/cosmos.circuit.v1.Msg/ResetCircuitBreaker",
            message,
            MsgResetCircuitBreakerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the circuit gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def account(self, message: "QueryAccountRequest") -> "AccountResponse":
        """
        Account returns account permissions.
        """

        return self._channel.unary_unary(
            "/cosmos.circuit.v1.Query/Account",
            QueryAccountRequest.SerializeToString,
            AccountResponse.FromString,
        )(message)

    def accounts(self, message: "QueryAccountsRequest") -> "AccountsResponse":
        """
        Account returns account permissions.
        """

        return self._channel.unary_unary(
            "/cosmos.circuit.v1.Query/Accounts",
            QueryAccountsRequest.SerializeToString,
            AccountsResponse.FromString,
        )(message)

    def disabled_list(
        self, message: "QueryDisabledListRequest | None" = None
    ) -> "DisabledListResponse":
        """
        DisabledList returns a list of disabled message urls
        """

        if message is None:
            message = QueryDisabledListRequest()

        return self._channel.unary_unary(
            "/cosmos.circuit.v1.Query/DisabledList",
            QueryDisabledListRequest.SerializeToString,
            DisabledListResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the circuit gRPC querier service.
    """

    async def account(
        self,
        message: "QueryAccountRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AccountResponse":
        """
        Account returns account permissions.
        """

        return await self._unary_unary(
            "/cosmos.circuit.v1.Query/Account",
            message,
            AccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def accounts(
        self,
        message: "QueryAccountsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AccountsResponse":
        """
        Account returns account permissions.
        """

        return await self._unary_unary(
            "/cosmos.circuit.v1.Query/Accounts",
            message,
            AccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disabled_list(
        self,
        message: "QueryDisabledListRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DisabledListResponse":
        """
        DisabledList returns a list of disabled message urls
        """

        if message is None:
            message = QueryDisabledListRequest()

        return await self._unary_unary(
            "/cosmos.circuit.v1.Query/DisabledList",
            message,
            DisabledListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...base.query import v1beta1 as __base__query__v1beta1__
