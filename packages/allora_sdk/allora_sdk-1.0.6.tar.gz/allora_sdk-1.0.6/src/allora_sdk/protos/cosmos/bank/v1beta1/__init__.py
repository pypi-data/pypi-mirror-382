# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/bank/v1beta1/authz.proto, cosmos/bank/v1beta1/bank.proto, cosmos/bank/v1beta1/genesis.proto, cosmos/bank/v1beta1/query.proto, cosmos/bank/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Balance",
    "DenomOwner",
    "DenomUnit",
    "GenesisState",
    "Input",
    "Metadata",
    "MsgAsyncStub",
    "MsgMultiSend",
    "MsgMultiSendResponse",
    "MsgSend",
    "MsgSendResponse",
    "MsgSetSendEnabled",
    "MsgSetSendEnabledResponse",
    "MsgStub",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "Output",
    "Params",
    "QueryAllBalancesRequest",
    "QueryAllBalancesResponse",
    "QueryAsyncStub",
    "QueryBalanceRequest",
    "QueryBalanceResponse",
    "QueryDenomMetadataByQueryStringRequest",
    "QueryDenomMetadataByQueryStringResponse",
    "QueryDenomMetadataRequest",
    "QueryDenomMetadataResponse",
    "QueryDenomOwnersByQueryRequest",
    "QueryDenomOwnersByQueryResponse",
    "QueryDenomOwnersRequest",
    "QueryDenomOwnersResponse",
    "QueryDenomsMetadataRequest",
    "QueryDenomsMetadataResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QuerySendEnabledRequest",
    "QuerySendEnabledResponse",
    "QuerySpendableBalanceByDenomRequest",
    "QuerySpendableBalanceByDenomResponse",
    "QuerySpendableBalancesRequest",
    "QuerySpendableBalancesResponse",
    "QueryStub",
    "QuerySupplyOfRequest",
    "QuerySupplyOfResponse",
    "QueryTotalSupplyRequest",
    "QueryTotalSupplyResponse",
    "SendAuthorization",
    "SendEnabled",
    "Supply",
)

import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Balance(betterproto2.Message):
    """
    Balance defines an account address and balance pair used in the bank module's
    genesis state.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the address of the balance holder.
    """

    coins: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    coins defines the different coins this balance holds.
    """


default_message_pool.register_message("cosmos.bank.v1beta1", "Balance", Balance)


@dataclass(eq=False, repr=False)
class DenomOwner(betterproto2.Message):
    """
    DenomOwner defines structure representing an account that owns or holds a
    particular denominated token. It contains the account address and account
    balance of the denominated token.

    Since: cosmos-sdk 0.46
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address defines the address that owns a particular denomination.
    """

    balance: "__base__v1beta1__.Coin | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    balance is the balance of the denominated coin for an account.
    """


default_message_pool.register_message("cosmos.bank.v1beta1", "DenomOwner", DenomOwner)


@dataclass(eq=False, repr=False)
class DenomUnit(betterproto2.Message):
    """
    DenomUnit represents a struct that describes a given
    denomination unit of the basic token.
    """

    denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    denom represents the string name of the given denom unit (e.g uatom).
    """

    exponent: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    exponent represents power of 10 exponent that one must
    raise the base_denom to in order to equal the given DenomUnit's denom
    1 denom = 10^exponent base_denom
    (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
    exponent = 6, thus: 1 atom = 10^6 uatom).
    """

    aliases: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    aliases is a list of string aliases for the given denom
    """


default_message_pool.register_message("cosmos.bank.v1beta1", "DenomUnit", DenomUnit)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the bank module's genesis state.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """

    balances: "list[Balance]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    balances is an array containing the balances of all the accounts.
    """

    supply: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    supply represents the total supply. If it is left empty, then supply will be calculated based on the provided
    balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
    """

    denom_metadata: "list[Metadata]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    denom_metadata defines the metadata of the different coins.
    """

    send_enabled: "list[SendEnabled]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    send_enabled defines the denoms where send is enabled or disabled.

    Since: cosmos-sdk 0.47
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class Input(betterproto2.Message):
    """
    Input models transaction input.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    coins: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("cosmos.bank.v1beta1", "Input", Input)


@dataclass(eq=False, repr=False)
class Metadata(betterproto2.Message):
    """
    Metadata represents a struct that describes
    a basic token.
    """

    description: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    denom_units: "list[DenomUnit]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    denom_units represents the list of DenomUnit's for a given coin
    """

    base: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    base represents the base denom (should be the DenomUnit with exponent = 0).
    """

    display: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    display indicates the suggested denom that should be
    displayed in clients.
    """

    name: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    name defines the name of the token (eg: Cosmos Atom)

    Since: cosmos-sdk 0.43
    """

    symbol: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
    be the same as the display.

    Since: cosmos-sdk 0.43
    """

    uri: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    URI to a document (on or off-chain) that contains additional information. Optional.

    Since: cosmos-sdk 0.46
    """

    uri_hash: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    URIHash is a sha256 hash of a document pointed by URI. It's used to verify that
    the document didn't change. Optional.

    Since: cosmos-sdk 0.46
    """


default_message_pool.register_message("cosmos.bank.v1beta1", "Metadata", Metadata)


@dataclass(eq=False, repr=False)
class MsgMultiSend(betterproto2.Message):
    """
    MsgMultiSend represents an arbitrary multi-in, multi-out send message.
    """

    inputs: "list[Input]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Inputs, despite being `repeated`, only allows one sender input. This is
    checked in MsgMultiSend's ValidateBasic.
    """

    outputs: "list[Output]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "MsgMultiSend", MsgMultiSend
)


@dataclass(eq=False, repr=False)
class MsgMultiSendResponse(betterproto2.Message):
    """
    MsgMultiSendResponse defines the Msg/MultiSend response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "MsgMultiSendResponse", MsgMultiSendResponse
)


@dataclass(eq=False, repr=False)
class MsgSend(betterproto2.Message):
    """
    MsgSend represents a message to send coins from one account to another.
    """

    from_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    to_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("cosmos.bank.v1beta1", "MsgSend", MsgSend)


@dataclass(eq=False, repr=False)
class MsgSendResponse(betterproto2.Message):
    """
    MsgSendResponse defines the Msg/Send response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "MsgSendResponse", MsgSendResponse
)


@dataclass(eq=False, repr=False)
class MsgSetSendEnabled(betterproto2.Message):
    """
    MsgSetSendEnabled is the Msg/SetSendEnabled request type.

    Only entries to add/update/delete need to be included.
    Existing SendEnabled entries that are not included in this
    message are left unchanged.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module.
    """

    send_enabled: "list[SendEnabled]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    send_enabled is the list of entries to add or update.
    """

    use_default_for: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    use_default_for is a list of denoms that should use the params.default_send_enabled value.
    Denoms listed here will have their SendEnabled entries deleted.
    If a denom is included that doesn't have a SendEnabled entry,
    it will be ignored.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "MsgSetSendEnabled", MsgSetSendEnabled
)


@dataclass(eq=False, repr=False)
class MsgSetSendEnabledResponse(betterproto2.Message):
    """
    MsgSetSendEnabledResponse defines the Msg/SetSendEnabled response type.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "MsgSetSendEnabledResponse", MsgSetSendEnabledResponse
)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/bank parameters to update.

    NOTE: All parameters must be supplied.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class Output(betterproto2.Message):
    """
    Output models transaction outputs.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    coins: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("cosmos.bank.v1beta1", "Output", Output)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters for the bank module.
    """

    send_enabled: "list[SendEnabled]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Deprecated: Use of SendEnabled in params is deprecated.
    For genesis, use the newly added send_enabled field in the genesis object.
    Storage, lookup, and manipulation of this information is now in the keeper.

    As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
    """

    default_send_enabled: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("send_enabled"):
            warnings.warn("Params.send_enabled is deprecated", DeprecationWarning)


default_message_pool.register_message("cosmos.bank.v1beta1", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryAllBalancesRequest(betterproto2.Message):
    """
    QueryBalanceRequest is the request type for the Query/AllBalances RPC method.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the address to query balances for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """

    resolve_denom: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    resolve_denom is the flag to resolve the denom into a human-readable form from the metadata.

    Since: cosmos-sdk 0.50
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryAllBalancesRequest", QueryAllBalancesRequest
)


@dataclass(eq=False, repr=False)
class QueryAllBalancesResponse(betterproto2.Message):
    """
    QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
    method.
    """

    balances: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    balances is the balances of all the coins.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryAllBalancesResponse", QueryAllBalancesResponse
)


@dataclass(eq=False, repr=False)
class QueryBalanceRequest(betterproto2.Message):
    """
    QueryBalanceRequest is the request type for the Query/Balance RPC method.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the address to query balances for.
    """

    denom: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    denom is the coin denom to query balances for.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryBalanceRequest", QueryBalanceRequest
)


@dataclass(eq=False, repr=False)
class QueryBalanceResponse(betterproto2.Message):
    """
    QueryBalanceResponse is the response type for the Query/Balance RPC method.
    """

    balance: "__base__v1beta1__.Coin | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    balance is the balance of the coin.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryBalanceResponse", QueryBalanceResponse
)


@dataclass(eq=False, repr=False)
class QueryDenomMetadataByQueryStringRequest(betterproto2.Message):
    """
    QueryDenomMetadataByQueryStringRequest is the request type for the Query/DenomMetadata RPC method.
    Identical with QueryDenomMetadataRequest but receives denom as query string.
    """

    denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    denom is the coin denom to query the metadata for.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QueryDenomMetadataByQueryStringRequest",
    QueryDenomMetadataByQueryStringRequest,
)


@dataclass(eq=False, repr=False)
class QueryDenomMetadataByQueryStringResponse(betterproto2.Message):
    """
    QueryDenomMetadataByQueryStringResponse is the response type for the Query/DenomMetadata RPC
    method. Identical with QueryDenomMetadataResponse but receives denom as query string in request.
    """

    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    metadata describes and provides all the client information for the requested token.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QueryDenomMetadataByQueryStringResponse",
    QueryDenomMetadataByQueryStringResponse,
)


@dataclass(eq=False, repr=False)
class QueryDenomMetadataRequest(betterproto2.Message):
    """
    QueryDenomMetadataRequest is the request type for the Query/DenomMetadata RPC method.
    """

    denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    denom is the coin denom to query the metadata for.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryDenomMetadataRequest", QueryDenomMetadataRequest
)


@dataclass(eq=False, repr=False)
class QueryDenomMetadataResponse(betterproto2.Message):
    """
    QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
    method.
    """

    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    metadata describes and provides all the client information for the requested token.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryDenomMetadataResponse", QueryDenomMetadataResponse
)


@dataclass(eq=False, repr=False)
class QueryDenomOwnersByQueryRequest(betterproto2.Message):
    """
    QueryDenomOwnersByQueryRequest defines the request type for the DenomOwnersByQuery RPC query,
    which queries for a paginated set of all account holders of a particular
    denomination.

    Since: cosmos-sdk 0.50.3
    """

    denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    denom defines the coin denomination to query all account holders for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QueryDenomOwnersByQueryRequest",
    QueryDenomOwnersByQueryRequest,
)


@dataclass(eq=False, repr=False)
class QueryDenomOwnersByQueryResponse(betterproto2.Message):
    """
    QueryDenomOwnersByQueryResponse defines the RPC response of a DenomOwnersByQuery RPC query.

    Since: cosmos-sdk 0.50.3
    """

    denom_owners: "list[DenomOwner]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QueryDenomOwnersByQueryResponse",
    QueryDenomOwnersByQueryResponse,
)


@dataclass(eq=False, repr=False)
class QueryDenomOwnersRequest(betterproto2.Message):
    """
    QueryDenomOwnersRequest defines the request type for the DenomOwners RPC query,
    which queries for a paginated set of all account holders of a particular
    denomination.
    """

    denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    denom defines the coin denomination to query all account holders for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryDenomOwnersRequest", QueryDenomOwnersRequest
)


@dataclass(eq=False, repr=False)
class QueryDenomOwnersResponse(betterproto2.Message):
    """
    QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.

    Since: cosmos-sdk 0.46
    """

    denom_owners: "list[DenomOwner]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryDenomOwnersResponse", QueryDenomOwnersResponse
)


@dataclass(eq=False, repr=False)
class QueryDenomsMetadataRequest(betterproto2.Message):
    """
    QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata RPC method.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryDenomsMetadataRequest", QueryDenomsMetadataRequest
)


@dataclass(eq=False, repr=False)
class QueryDenomsMetadataResponse(betterproto2.Message):
    """
    QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
    method.
    """

    metadatas: "list[Metadata]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    metadata provides the client information for all the registered tokens.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryDenomsMetadataResponse", QueryDenomsMetadataResponse
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest defines the request type for querying x/bank parameters.
    """

    pass


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse defines the response type for querying x/bank parameters.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params provides the parameters of the bank module.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


@dataclass(eq=False, repr=False)
class QuerySendEnabledRequest(betterproto2.Message):
    """
    QuerySendEnabledRequest defines the RPC request for looking up SendEnabled entries.

    Since: cosmos-sdk 0.47
    """

    denoms: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    denoms is the specific denoms you want look up. Leave empty to get all entries.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        99, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request. This field is
    only read if the denoms field is empty.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QuerySendEnabledRequest", QuerySendEnabledRequest
)


@dataclass(eq=False, repr=False)
class QuerySendEnabledResponse(betterproto2.Message):
    """
    QuerySendEnabledResponse defines the RPC response of a SendEnable query.

    Since: cosmos-sdk 0.47
    """

    send_enabled: "list[SendEnabled]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        99, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response. This field is only
    populated if the denoms field in the request is empty.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QuerySendEnabledResponse", QuerySendEnabledResponse
)


@dataclass(eq=False, repr=False)
class QuerySpendableBalanceByDenomRequest(betterproto2.Message):
    """
    QuerySpendableBalanceByDenomRequest defines the gRPC request structure for
    querying an account's spendable balance for a specific denom.

    Since: cosmos-sdk 0.47
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the address to query balances for.
    """

    denom: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    denom is the coin denom to query balances for.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QuerySpendableBalanceByDenomRequest",
    QuerySpendableBalanceByDenomRequest,
)


@dataclass(eq=False, repr=False)
class QuerySpendableBalanceByDenomResponse(betterproto2.Message):
    """
    QuerySpendableBalanceByDenomResponse defines the gRPC response structure for
    querying an account's spendable balance for a specific denom.

    Since: cosmos-sdk 0.47
    """

    balance: "__base__v1beta1__.Coin | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    balance is the balance of the coin.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QuerySpendableBalanceByDenomResponse",
    QuerySpendableBalanceByDenomResponse,
)


@dataclass(eq=False, repr=False)
class QuerySpendableBalancesRequest(betterproto2.Message):
    """
    QuerySpendableBalancesRequest defines the gRPC request structure for querying
    an account's spendable balances.

    Since: cosmos-sdk 0.46
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the address to query spendable balances for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QuerySpendableBalancesRequest",
    QuerySpendableBalancesRequest,
)


@dataclass(eq=False, repr=False)
class QuerySpendableBalancesResponse(betterproto2.Message):
    """
    QuerySpendableBalancesResponse defines the gRPC response structure for querying
    an account's spendable balances.

    Since: cosmos-sdk 0.46
    """

    balances: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    balances is the spendable balances of all the coins.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1",
    "QuerySpendableBalancesResponse",
    QuerySpendableBalancesResponse,
)


@dataclass(eq=False, repr=False)
class QuerySupplyOfRequest(betterproto2.Message):
    """
    QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method.
    """

    denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    denom is the coin denom to query balances for.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QuerySupplyOfRequest", QuerySupplyOfRequest
)


@dataclass(eq=False, repr=False)
class QuerySupplyOfResponse(betterproto2.Message):
    """
    QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
    """

    amount: "__base__v1beta1__.Coin | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    amount is the supply of the coin.
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QuerySupplyOfResponse", QuerySupplyOfResponse
)


@dataclass(eq=False, repr=False)
class QueryTotalSupplyRequest(betterproto2.Message):
    """
    QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC
    method.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.

    Since: cosmos-sdk 0.43
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryTotalSupplyRequest", QueryTotalSupplyRequest
)


@dataclass(eq=False, repr=False)
class QueryTotalSupplyResponse(betterproto2.Message):
    """
    QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
    method
    """

    supply: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    supply is the supply of the coins
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.

    Since: cosmos-sdk 0.43
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "QueryTotalSupplyResponse", QueryTotalSupplyResponse
)


@dataclass(eq=False, repr=False)
class SendAuthorization(betterproto2.Message):
    """
    SendAuthorization allows the grantee to spend up to spend_limit coins from
    the granter's account.

    Since: cosmos-sdk 0.43
    """

    spend_limit: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    allow_list: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    allow_list specifies an optional list of addresses to whom the grantee can send tokens on behalf of the
    granter. If omitted, any recipient is allowed.

    Since: cosmos-sdk 0.47
    """


default_message_pool.register_message(
    "cosmos.bank.v1beta1", "SendAuthorization", SendAuthorization
)


@dataclass(eq=False, repr=False)
class SendEnabled(betterproto2.Message):
    """
    SendEnabled maps coin denom to a send_enabled status (whether a denom is
    sendable).
    """

    denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    enabled: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message("cosmos.bank.v1beta1", "SendEnabled", SendEnabled)


@dataclass(eq=False, repr=False)
class Supply(betterproto2.Message):
    """
    Supply represents a struct that passively keeps track of the total supply
    amounts in the network.
    This message is deprecated now that supply is indexed by denom.
    """

    total: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    def __post_init__(self) -> None:
        warnings.warn("Supply is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message("cosmos.bank.v1beta1", "Supply", Supply)


class MsgStub:
    """
    Msg defines the bank Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def send(self, message: "MsgSend") -> "MsgSendResponse":
        """
        Send defines a method for sending coins from one account to another account.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Msg/Send",
            MsgSend.SerializeToString,
            MsgSendResponse.FromString,
        )(message)

    def multi_send(self, message: "MsgMultiSend") -> "MsgMultiSendResponse":
        """
        MultiSend defines a method for sending coins from some accounts to other accounts.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Msg/MultiSend",
            MsgMultiSend.SerializeToString,
            MsgMultiSendResponse.FromString,
        )(message)

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/bank module parameters.
        The authority is defined in the keeper.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)

    def set_send_enabled(
        self, message: "MsgSetSendEnabled"
    ) -> "MsgSetSendEnabledResponse":
        """
        SetSendEnabled is a governance operation for setting the SendEnabled flag
        on any number of Denoms. Only the entries to add or update should be
        included. Entries that already exist in the store, but that aren't
        included in this message, will be left unchanged.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Msg/SetSendEnabled",
            MsgSetSendEnabled.SerializeToString,
            MsgSetSendEnabledResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the bank Msg service.
    """

    async def send(
        self,
        message: "MsgSend",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgSendResponse":
        """
        Send defines a method for sending coins from one account to another account.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/Send",
            message,
            MsgSendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def multi_send(
        self,
        message: "MsgMultiSend",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgMultiSendResponse":
        """
        MultiSend defines a method for sending coins from some accounts to other accounts.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/MultiSend",
            message,
            MsgMultiSendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/bank module parameters.
        The authority is defined in the keeper.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_send_enabled(
        self,
        message: "MsgSetSendEnabled",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgSetSendEnabledResponse":
        """
        SetSendEnabled is a governance operation for setting the SendEnabled flag
        on any number of Denoms. Only the entries to add or update should be
        included. Entries that already exist in the store, but that aren't
        included in this message, will be left unchanged.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/SetSendEnabled",
            message,
            MsgSetSendEnabledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def balance(self, message: "QueryBalanceRequest") -> "QueryBalanceResponse":
        """
        Balance queries the balance of a single coin for a single account.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/Balance",
            QueryBalanceRequest.SerializeToString,
            QueryBalanceResponse.FromString,
        )(message)

    def all_balances(
        self, message: "QueryAllBalancesRequest"
    ) -> "QueryAllBalancesResponse":
        """
        AllBalances queries the balance of all coins for a single account.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/AllBalances",
            QueryAllBalancesRequest.SerializeToString,
            QueryAllBalancesResponse.FromString,
        )(message)

    def spendable_balances(
        self, message: "QuerySpendableBalancesRequest"
    ) -> "QuerySpendableBalancesResponse":
        """
        SpendableBalances queries the spendable balance of all coins for a single
        account.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/SpendableBalances",
            QuerySpendableBalancesRequest.SerializeToString,
            QuerySpendableBalancesResponse.FromString,
        )(message)

    def spendable_balance_by_denom(
        self, message: "QuerySpendableBalanceByDenomRequest"
    ) -> "QuerySpendableBalanceByDenomResponse":
        """
        SpendableBalanceByDenom queries the spendable balance of a single denom for
        a single account.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
            QuerySpendableBalanceByDenomRequest.SerializeToString,
            QuerySpendableBalanceByDenomResponse.FromString,
        )(message)

    def total_supply(
        self, message: "QueryTotalSupplyRequest"
    ) -> "QueryTotalSupplyResponse":
        """
        TotalSupply queries the total supply of all coins.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/TotalSupply",
            QueryTotalSupplyRequest.SerializeToString,
            QueryTotalSupplyResponse.FromString,
        )(message)

    def supply_of(self, message: "QuerySupplyOfRequest") -> "QuerySupplyOfResponse":
        """
        SupplyOf queries the supply of a single coin.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/SupplyOf",
            QuerySupplyOfRequest.SerializeToString,
            QuerySupplyOfResponse.FromString,
        )(message)

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params queries the parameters of x/bank module.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def denom_metadata(
        self, message: "QueryDenomMetadataRequest"
    ) -> "QueryDenomMetadataResponse":
        """
        DenomMetadata queries the client metadata of a given coin denomination.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomMetadata",
            QueryDenomMetadataRequest.SerializeToString,
            QueryDenomMetadataResponse.FromString,
        )(message)

    def denom_metadata_by_query_string(
        self, message: "QueryDenomMetadataByQueryStringRequest"
    ) -> "QueryDenomMetadataByQueryStringResponse":
        """
        DenomMetadataByQueryString queries the client metadata of a given coin denomination.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomMetadataByQueryString",
            QueryDenomMetadataByQueryStringRequest.SerializeToString,
            QueryDenomMetadataByQueryStringResponse.FromString,
        )(message)

    def denoms_metadata(
        self, message: "QueryDenomsMetadataRequest"
    ) -> "QueryDenomsMetadataResponse":
        """
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomsMetadata",
            QueryDenomsMetadataRequest.SerializeToString,
            QueryDenomsMetadataResponse.FromString,
        )(message)

    def denom_owners(
        self, message: "QueryDenomOwnersRequest"
    ) -> "QueryDenomOwnersResponse":
        """
        DenomOwners queries for all account addresses that own a particular token
        denomination.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomOwners",
            QueryDenomOwnersRequest.SerializeToString,
            QueryDenomOwnersResponse.FromString,
        )(message)

    def denom_owners_by_query(
        self, message: "QueryDenomOwnersByQueryRequest"
    ) -> "QueryDenomOwnersByQueryResponse":
        """
        DenomOwnersByQuery queries for all account addresses that own a particular token
        denomination.

        Since: cosmos-sdk 0.50.3
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomOwnersByQuery",
            QueryDenomOwnersByQueryRequest.SerializeToString,
            QueryDenomOwnersByQueryResponse.FromString,
        )(message)

    def send_enabled(
        self, message: "QuerySendEnabledRequest"
    ) -> "QuerySendEnabledResponse":
        """
        SendEnabled queries for SendEnabled entries.

        This query only returns denominations that have specific SendEnabled settings.
        Any denomination that does not have a specific setting will use the default
        params.default_send_enabled, and will not be returned by this query.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.bank.v1beta1.Query/SendEnabled",
            QuerySendEnabledRequest.SerializeToString,
            QuerySendEnabledResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def balance(
        self,
        message: "QueryBalanceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryBalanceResponse":
        """
        Balance queries the balance of a single coin for a single account.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/Balance",
            message,
            QueryBalanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def all_balances(
        self,
        message: "QueryAllBalancesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAllBalancesResponse":
        """
        AllBalances queries the balance of all coins for a single account.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/AllBalances",
            message,
            QueryAllBalancesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def spendable_balances(
        self,
        message: "QuerySpendableBalancesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySpendableBalancesResponse":
        """
        SpendableBalances queries the spendable balance of all coins for a single
        account.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SpendableBalances",
            message,
            QuerySpendableBalancesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def spendable_balance_by_denom(
        self,
        message: "QuerySpendableBalanceByDenomRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySpendableBalanceByDenomResponse":
        """
        SpendableBalanceByDenom queries the spendable balance of a single denom for
        a single account.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
            message,
            QuerySpendableBalanceByDenomResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def total_supply(
        self,
        message: "QueryTotalSupplyRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTotalSupplyResponse":
        """
        TotalSupply queries the total supply of all coins.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/TotalSupply",
            message,
            QueryTotalSupplyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def supply_of(
        self,
        message: "QuerySupplyOfRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySupplyOfResponse":
        """
        SupplyOf queries the supply of a single coin.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SupplyOf",
            message,
            QuerySupplyOfResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params queries the parameters of x/bank module.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def denom_metadata(
        self,
        message: "QueryDenomMetadataRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDenomMetadataResponse":
        """
        DenomMetadata queries the client metadata of a given coin denomination.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomMetadata",
            message,
            QueryDenomMetadataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def denom_metadata_by_query_string(
        self,
        message: "QueryDenomMetadataByQueryStringRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDenomMetadataByQueryStringResponse":
        """
        DenomMetadataByQueryString queries the client metadata of a given coin denomination.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomMetadataByQueryString",
            message,
            QueryDenomMetadataByQueryStringResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def denoms_metadata(
        self,
        message: "QueryDenomsMetadataRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDenomsMetadataResponse":
        """
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomsMetadata",
            message,
            QueryDenomsMetadataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def denom_owners(
        self,
        message: "QueryDenomOwnersRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDenomOwnersResponse":
        """
        DenomOwners queries for all account addresses that own a particular token
        denomination.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomOwners",
            message,
            QueryDenomOwnersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def denom_owners_by_query(
        self,
        message: "QueryDenomOwnersByQueryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDenomOwnersByQueryResponse":
        """
        DenomOwnersByQuery queries for all account addresses that own a particular token
        denomination.

        Since: cosmos-sdk 0.50.3
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomOwnersByQuery",
            message,
            QueryDenomOwnersByQueryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_enabled(
        self,
        message: "QuerySendEnabledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySendEnabledResponse":
        """
        SendEnabled queries for SendEnabled entries.

        This query only returns denominations that have specific SendEnabled settings.
        Any denomination that does not have a specific setting will use the default
        params.default_send_enabled, and will not be returned by this query.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SendEnabled",
            message,
            QuerySendEnabledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...base import v1beta1 as __base__v1beta1__
from ...base.query import v1beta1 as __base__query__v1beta1__
