# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/evidence/v1beta1/evidence.proto, cosmos/evidence/v1beta1/genesis.proto, cosmos/evidence/v1beta1/query.proto, cosmos/evidence/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Equivocation",
    "GenesisState",
    "MsgAsyncStub",
    "MsgStub",
    "MsgSubmitEvidence",
    "MsgSubmitEvidenceResponse",
    "QueryAllEvidenceRequest",
    "QueryAllEvidenceResponse",
    "QueryAsyncStub",
    "QueryEvidenceRequest",
    "QueryEvidenceResponse",
    "QueryStub",
)

import datetime
import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Equivocation(betterproto2.Message):
    """
    Equivocation implements the Evidence interface and defines evidence of double
    signing misbehavior.
    """

    height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    height is the equivocation height.
    """

    time: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    time is the equivocation time.
    """

    power: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)
    """
    power is the equivocation validator power.
    """

    consensus_address: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    consensus_address is the equivocation validator consensus address.
    """


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "Equivocation", Equivocation
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the evidence module's genesis state.
    """

    evidence: "list[___google__protobuf__.Any]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    evidence defines all the evidence at genesis.
    """


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class MsgSubmitEvidence(betterproto2.Message):
    """
    MsgSubmitEvidence represents a message that supports submitting arbitrary
    Evidence of misbehavior such as equivocation or counterfactual signing.
    """

    submitter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    submitter is the signer account address of evidence.
    """

    evidence: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    evidence defines the evidence of misbehavior.
    """


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "MsgSubmitEvidence", MsgSubmitEvidence
)


@dataclass(eq=False, repr=False)
class MsgSubmitEvidenceResponse(betterproto2.Message):
    """
    MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
    """

    hash: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)
    """
    hash defines the hash of the evidence.
    """


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "MsgSubmitEvidenceResponse", MsgSubmitEvidenceResponse
)


@dataclass(eq=False, repr=False)
class QueryAllEvidenceRequest(betterproto2.Message):
    """
    QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
    method.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "QueryAllEvidenceRequest", QueryAllEvidenceRequest
)


@dataclass(eq=False, repr=False)
class QueryAllEvidenceResponse(betterproto2.Message):
    """
    QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
    method.
    """

    evidence: "list[___google__protobuf__.Any]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    evidence returns all evidences.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "QueryAllEvidenceResponse", QueryAllEvidenceResponse
)


@dataclass(eq=False, repr=False)
class QueryEvidenceRequest(betterproto2.Message):
    """
    QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
    """

    evidence_hash: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    evidence_hash defines the hash of the requested evidence.
    Deprecated: Use hash, a HEX encoded string, instead.
    """

    hash: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    hash defines the evidence hash of the requested evidence.

    Since: cosmos-sdk 0.47
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("evidence_hash"):
            warnings.warn(
                "QueryEvidenceRequest.evidence_hash is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "QueryEvidenceRequest", QueryEvidenceRequest
)


@dataclass(eq=False, repr=False)
class QueryEvidenceResponse(betterproto2.Message):
    """
    QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
    """

    evidence: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    evidence returns the requested evidence.
    """


default_message_pool.register_message(
    "cosmos.evidence.v1beta1", "QueryEvidenceResponse", QueryEvidenceResponse
)


class MsgStub:
    """
    Msg defines the evidence Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def submit_evidence(
        self, message: "MsgSubmitEvidence"
    ) -> "MsgSubmitEvidenceResponse":
        """
        SubmitEvidence submits an arbitrary Evidence of misbehavior such as equivocation or
        counterfactual signing.
        """

        return self._channel.unary_unary(
            "/cosmos.evidence.v1beta1.Msg/SubmitEvidence",
            MsgSubmitEvidence.SerializeToString,
            MsgSubmitEvidenceResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the evidence Msg service.
    """

    async def submit_evidence(
        self,
        message: "MsgSubmitEvidence",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgSubmitEvidenceResponse":
        """
        SubmitEvidence submits an arbitrary Evidence of misbehavior such as equivocation or
        counterfactual signing.
        """

        return await self._unary_unary(
            "/cosmos.evidence.v1beta1.Msg/SubmitEvidence",
            message,
            MsgSubmitEvidenceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def evidence(self, message: "QueryEvidenceRequest") -> "QueryEvidenceResponse":
        """
        Evidence queries evidence based on evidence hash.
        """

        return self._channel.unary_unary(
            "/cosmos.evidence.v1beta1.Query/Evidence",
            QueryEvidenceRequest.SerializeToString,
            QueryEvidenceResponse.FromString,
        )(message)

    def all_evidence(
        self, message: "QueryAllEvidenceRequest"
    ) -> "QueryAllEvidenceResponse":
        """
        AllEvidence queries all evidence.
        """

        return self._channel.unary_unary(
            "/cosmos.evidence.v1beta1.Query/AllEvidence",
            QueryAllEvidenceRequest.SerializeToString,
            QueryAllEvidenceResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def evidence(
        self,
        message: "QueryEvidenceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryEvidenceResponse":
        """
        Evidence queries evidence based on evidence hash.
        """

        return await self._unary_unary(
            "/cosmos.evidence.v1beta1.Query/Evidence",
            message,
            QueryEvidenceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def all_evidence(
        self,
        message: "QueryAllEvidenceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAllEvidenceResponse":
        """
        AllEvidence queries all evidence.
        """

        return await self._unary_unary(
            "/cosmos.evidence.v1beta1.Query/AllEvidence",
            message,
            QueryAllEvidenceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...base.query import v1beta1 as __base__query__v1beta1__
