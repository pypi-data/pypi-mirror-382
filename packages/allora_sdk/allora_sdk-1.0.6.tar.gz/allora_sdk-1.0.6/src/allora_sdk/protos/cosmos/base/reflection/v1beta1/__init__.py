# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/base/reflection/v1beta1/reflection.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ListAllInterfacesRequest",
    "ListAllInterfacesResponse",
    "ListImplementationsRequest",
    "ListImplementationsResponse",
    "ReflectionServiceAsyncStub",
    "ReflectionServiceStub",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class ListAllInterfacesRequest(betterproto2.Message):
    """
    ListAllInterfacesRequest is the request type of the ListAllInterfaces RPC.
    """

    pass


default_message_pool.register_message(
    "cosmos.base.reflection.v1beta1",
    "ListAllInterfacesRequest",
    ListAllInterfacesRequest,
)


@dataclass(eq=False, repr=False)
class ListAllInterfacesResponse(betterproto2.Message):
    """
    ListAllInterfacesResponse is the response type of the ListAllInterfaces RPC.
    """

    interface_names: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    interface_names is an array of all the registered interfaces.
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v1beta1",
    "ListAllInterfacesResponse",
    ListAllInterfacesResponse,
)


@dataclass(eq=False, repr=False)
class ListImplementationsRequest(betterproto2.Message):
    """
    ListImplementationsRequest is the request type of the ListImplementations
    RPC.
    """

    interface_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    interface_name defines the interface to query the implementations for.
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v1beta1",
    "ListImplementationsRequest",
    ListImplementationsRequest,
)


@dataclass(eq=False, repr=False)
class ListImplementationsResponse(betterproto2.Message):
    """
    ListImplementationsResponse is the response type of the ListImplementations
    RPC.
    """

    implementation_message_names: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "cosmos.base.reflection.v1beta1",
    "ListImplementationsResponse",
    ListImplementationsResponse,
)


class ReflectionServiceStub:
    """
    ReflectionService defines a service for interface reflection.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def list_all_interfaces(
        self, message: "ListAllInterfacesRequest | None" = None
    ) -> "ListAllInterfacesResponse":
        """
        ListAllInterfaces lists all the interfaces registered in the interface
        registry.
        """

        if message is None:
            message = ListAllInterfacesRequest()

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v1beta1.ReflectionService/ListAllInterfaces",
            ListAllInterfacesRequest.SerializeToString,
            ListAllInterfacesResponse.FromString,
        )(message)

    def list_implementations(
        self, message: "ListImplementationsRequest"
    ) -> "ListImplementationsResponse":
        """
        ListImplementations list all the concrete types that implement a given
        interface.
        """

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v1beta1.ReflectionService/ListImplementations",
            ListImplementationsRequest.SerializeToString,
            ListImplementationsResponse.FromString,
        )(message)


class ReflectionServiceAsyncStub(betterproto2.ServiceStub):
    """
    ReflectionService defines a service for interface reflection.
    """

    async def list_all_interfaces(
        self,
        message: "ListAllInterfacesRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListAllInterfacesResponse":
        """
        ListAllInterfaces lists all the interfaces registered in the interface
        registry.
        """

        if message is None:
            message = ListAllInterfacesRequest()

        return await self._unary_unary(
            "/cosmos.base.reflection.v1beta1.ReflectionService/ListAllInterfaces",
            message,
            ListAllInterfacesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_implementations(
        self,
        message: "ListImplementationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListImplementationsResponse":
        """
        ListImplementations list all the concrete types that implement a given
        interface.
        """

        return await self._unary_unary(
            "/cosmos.base.reflection.v1beta1.ReflectionService/ListImplementations",
            message,
            ListImplementationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
