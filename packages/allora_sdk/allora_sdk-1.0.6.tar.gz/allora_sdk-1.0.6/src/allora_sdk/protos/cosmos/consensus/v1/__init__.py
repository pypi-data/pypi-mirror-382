# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/consensus/v1/query.proto, cosmos/consensus/v1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "MsgAsyncStub",
    "MsgStub",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "QueryAsyncStub",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryStub",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    block: "___tendermint__types__.BlockParams | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/consensus parameters to update.
    VersionsParams is not included in this Msg because it is tracked
    separarately in x/upgrade.

    NOTE: All parameters must be supplied.
    """

    evidence: "___tendermint__types__.EvidenceParams | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    validator: "___tendermint__types__.ValidatorParams | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    abci: "___tendermint__types__.AbciParams | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Since: cosmos-sdk 0.50
    """


default_message_pool.register_message(
    "cosmos.consensus.v1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.
    """

    pass


default_message_pool.register_message(
    "cosmos.consensus.v1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest defines the request type for querying x/consensus parameters.
    """

    pass


default_message_pool.register_message(
    "cosmos.consensus.v1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse defines the response type for querying x/consensus parameters.
    """

    params: "___tendermint__types__.ConsensusParams | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params are the tendermint consensus params stored in the consensus module.
    Please note that `params.version` is not populated in this response, it is
    tracked separately in the x/upgrade module.
    """


default_message_pool.register_message(
    "cosmos.consensus.v1", "QueryParamsResponse", QueryParamsResponse
)


class MsgStub:
    """
    Msg defines the consensus Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/consensus module parameters.
        The authority is defined in the keeper.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.consensus.v1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the consensus Msg service.
    """

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/consensus module parameters.
        The authority is defined in the keeper.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.consensus.v1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params queries the parameters of x/consensus module.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/cosmos.consensus.v1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params queries the parameters of x/consensus module.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.consensus.v1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....tendermint import types as ___tendermint__types__
