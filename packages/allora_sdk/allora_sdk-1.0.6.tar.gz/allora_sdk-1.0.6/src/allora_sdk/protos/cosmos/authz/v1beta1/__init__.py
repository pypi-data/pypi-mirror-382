# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/authz/v1beta1/authz.proto, cosmos/authz/v1beta1/event.proto, cosmos/authz/v1beta1/genesis.proto, cosmos/authz/v1beta1/query.proto, cosmos/authz/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EventGrant",
    "EventRevoke",
    "GenericAuthorization",
    "GenesisState",
    "Grant",
    "GrantAuthorization",
    "GrantQueueItem",
    "MsgAsyncStub",
    "MsgExec",
    "MsgExecResponse",
    "MsgGrant",
    "MsgGrantResponse",
    "MsgRevoke",
    "MsgRevokeResponse",
    "MsgStub",
    "QueryAsyncStub",
    "QueryGranteeGrantsRequest",
    "QueryGranteeGrantsResponse",
    "QueryGranterGrantsRequest",
    "QueryGranterGrantsResponse",
    "QueryGrantsRequest",
    "QueryGrantsResponse",
    "QueryStub",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class EventGrant(betterproto2.Message):
    """
    EventGrant is emitted on Msg/Grant
    """

    msg_type_url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Msg type URL for which an autorization is granted
    """

    granter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Granter account address
    """

    grantee: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Grantee account address
    """


default_message_pool.register_message("cosmos.authz.v1beta1", "EventGrant", EventGrant)


@dataclass(eq=False, repr=False)
class EventRevoke(betterproto2.Message):
    """
    EventRevoke is emitted on Msg/Revoke
    """

    msg_type_url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Msg type URL for which an autorization is revoked
    """

    granter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Granter account address
    """

    grantee: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Grantee account address
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "EventRevoke", EventRevoke
)


@dataclass(eq=False, repr=False)
class GenericAuthorization(betterproto2.Message):
    """
    GenericAuthorization gives the grantee unrestricted permissions to execute
    the provided method on behalf of the granter's account.
    """

    msg: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Msg, identified by it's type URL, to grant unrestricted permissions to execute
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "GenericAuthorization", GenericAuthorization
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the authz module's genesis state.
    """

    authorization: "list[GrantAuthorization]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class Grant(betterproto2.Message):
    """
    Grant gives permissions to execute
    the provide method with expiration time.
    """

    authorization: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    expiration: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    time when the grant will expire and will be pruned. If null, then the grant
    doesn't have a time expiration (other conditions  in `authorization`
    may apply to invalidate the grant)
    """


default_message_pool.register_message("cosmos.authz.v1beta1", "Grant", Grant)


@dataclass(eq=False, repr=False)
class GrantAuthorization(betterproto2.Message):
    """
    GrantAuthorization extends a grant with both the addresses of the grantee and granter.
    It is used in genesis.proto and query.proto
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    authorization: "___google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    expiration: "datetime.datetime | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "GrantAuthorization", GrantAuthorization
)


@dataclass(eq=False, repr=False)
class GrantQueueItem(betterproto2.Message):
    """
    GrantQueueItem contains the list of TypeURL of a sdk.Msg.
    """

    msg_type_urls: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    msg_type_urls contains the list of TypeURL of a sdk.Msg.
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "GrantQueueItem", GrantQueueItem
)


@dataclass(eq=False, repr=False)
class MsgExec(betterproto2.Message):
    """
    MsgExec attempts to execute the provided messages using
    authorizations granted to the grantee. Each message should have only
    one signer corresponding to the granter of the authorization.
    """

    grantee: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    msgs: "list[___google__protobuf__.Any]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Execute Msg.
    The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg))
    triple and validate it.
    """


default_message_pool.register_message("cosmos.authz.v1beta1", "MsgExec", MsgExec)


@dataclass(eq=False, repr=False)
class MsgExecResponse(betterproto2.Message):
    """
    MsgExecResponse defines the Msg/MsgExecResponse response type.
    """

    results: "list[bytes]" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "MsgExecResponse", MsgExecResponse
)


@dataclass(eq=False, repr=False)
class MsgGrant(betterproto2.Message):
    """
    MsgGrant is a request type for Grant method. It declares authorization to the grantee
    on behalf of the granter with the provided expiration time.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    grant: "Grant | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("cosmos.authz.v1beta1", "MsgGrant", MsgGrant)


@dataclass(eq=False, repr=False)
class MsgGrantResponse(betterproto2.Message):
    """
    MsgGrantResponse defines the Msg/MsgGrant response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "MsgGrantResponse", MsgGrantResponse
)


@dataclass(eq=False, repr=False)
class MsgRevoke(betterproto2.Message):
    """
    MsgRevoke revokes any authorization with the provided sdk.Msg type on the
    granter's account with that has been granted to the grantee.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    msg_type_url: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message("cosmos.authz.v1beta1", "MsgRevoke", MsgRevoke)


@dataclass(eq=False, repr=False)
class MsgRevokeResponse(betterproto2.Message):
    """
    MsgRevokeResponse defines the Msg/MsgRevokeResponse response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "MsgRevokeResponse", MsgRevokeResponse
)


@dataclass(eq=False, repr=False)
class QueryGranteeGrantsRequest(betterproto2.Message):
    """
    QueryGranteeGrantsRequest is the request type for the Query/GranteeGrants RPC method.
    """

    grantee: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "QueryGranteeGrantsRequest", QueryGranteeGrantsRequest
)


@dataclass(eq=False, repr=False)
class QueryGranteeGrantsResponse(betterproto2.Message):
    """
    QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method.
    """

    grants: "list[GrantAuthorization]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    grants is a list of grants granted to the grantee.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the response.
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "QueryGranteeGrantsResponse", QueryGranteeGrantsResponse
)


@dataclass(eq=False, repr=False)
class QueryGranterGrantsRequest(betterproto2.Message):
    """
    QueryGranterGrantsRequest is the request type for the Query/GranterGrants RPC method.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "QueryGranterGrantsRequest", QueryGranterGrantsRequest
)


@dataclass(eq=False, repr=False)
class QueryGranterGrantsResponse(betterproto2.Message):
    """
    QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method.
    """

    grants: "list[GrantAuthorization]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    grants is a list of grants granted by the granter.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the response.
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "QueryGranterGrantsResponse", QueryGranterGrantsResponse
)


@dataclass(eq=False, repr=False)
class QueryGrantsRequest(betterproto2.Message):
    """
    QueryGrantsRequest is the request type for the Query/Grants RPC method.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    msg_type_url: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional, msg_type_url, when set, will query only grants matching given msg type.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "QueryGrantsRequest", QueryGrantsRequest
)


@dataclass(eq=False, repr=False)
class QueryGrantsResponse(betterproto2.Message):
    """
    QueryGrantsResponse is the response type for the Query/Authorizations RPC method.
    """

    grants: "list[Grant]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    authorizations is a list of grants granted for grantee by granter.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the response.
    """


default_message_pool.register_message(
    "cosmos.authz.v1beta1", "QueryGrantsResponse", QueryGrantsResponse
)


class MsgStub:
    """
    Msg defines the authz Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def grant(self, message: "MsgGrant") -> "MsgGrantResponse":
        """
        Grant grants the provided authorization to the grantee on the granter's
        account with the provided expiration time. If there is already a grant
        for the given (granter, grantee, Authorization) triple, then the grant
        will be overwritten.
        """

        return self._channel.unary_unary(
            "/cosmos.authz.v1beta1.Msg/Grant",
            MsgGrant.SerializeToString,
            MsgGrantResponse.FromString,
        )(message)

    def exec(self, message: "MsgExec") -> "MsgExecResponse":
        """
        Exec attempts to execute the provided messages using
        authorizations granted to the grantee. Each message should have only
        one signer corresponding to the granter of the authorization.
        """

        return self._channel.unary_unary(
            "/cosmos.authz.v1beta1.Msg/Exec",
            MsgExec.SerializeToString,
            MsgExecResponse.FromString,
        )(message)

    def revoke(self, message: "MsgRevoke") -> "MsgRevokeResponse":
        """
        Revoke revokes any authorization corresponding to the provided method name on the
        granter's account that has been granted to the grantee.
        """

        return self._channel.unary_unary(
            "/cosmos.authz.v1beta1.Msg/Revoke",
            MsgRevoke.SerializeToString,
            MsgRevokeResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the authz Msg service.
    """

    async def grant(
        self,
        message: "MsgGrant",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgGrantResponse":
        """
        Grant grants the provided authorization to the grantee on the granter's
        account with the provided expiration time. If there is already a grant
        for the given (granter, grantee, Authorization) triple, then the grant
        will be overwritten.
        """

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Msg/Grant",
            message,
            MsgGrantResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def exec(
        self,
        message: "MsgExec",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgExecResponse":
        """
        Exec attempts to execute the provided messages using
        authorizations granted to the grantee. Each message should have only
        one signer corresponding to the granter of the authorization.
        """

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Msg/Exec",
            message,
            MsgExecResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke(
        self,
        message: "MsgRevoke",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRevokeResponse":
        """
        Revoke revokes any authorization corresponding to the provided method name on the
        granter's account that has been granted to the grantee.
        """

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Msg/Revoke",
            message,
            MsgRevokeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def grants(self, message: "QueryGrantsRequest") -> "QueryGrantsResponse":
        """
        Returns list of `Authorization`, granted to the grantee by the granter.
        """

        return self._channel.unary_unary(
            "/cosmos.authz.v1beta1.Query/Grants",
            QueryGrantsRequest.SerializeToString,
            QueryGrantsResponse.FromString,
        )(message)

    def granter_grants(
        self, message: "QueryGranterGrantsRequest"
    ) -> "QueryGranterGrantsResponse":
        """
        GranterGrants returns list of `GrantAuthorization`, granted by granter.

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.authz.v1beta1.Query/GranterGrants",
            QueryGranterGrantsRequest.SerializeToString,
            QueryGranterGrantsResponse.FromString,
        )(message)

    def grantee_grants(
        self, message: "QueryGranteeGrantsRequest"
    ) -> "QueryGranteeGrantsResponse":
        """
        GranteeGrants returns a list of `GrantAuthorization` by grantee.

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.authz.v1beta1.Query/GranteeGrants",
            QueryGranteeGrantsRequest.SerializeToString,
            QueryGranteeGrantsResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def grants(
        self,
        message: "QueryGrantsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGrantsResponse":
        """
        Returns list of `Authorization`, granted to the grantee by the granter.
        """

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Query/Grants",
            message,
            QueryGrantsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def granter_grants(
        self,
        message: "QueryGranterGrantsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGranterGrantsResponse":
        """
        GranterGrants returns list of `GrantAuthorization`, granted by granter.

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Query/GranterGrants",
            message,
            QueryGranterGrantsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def grantee_grants(
        self,
        message: "QueryGranteeGrantsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGranteeGrantsResponse":
        """
        GranteeGrants returns a list of `GrantAuthorization` by grantee.

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Query/GranteeGrants",
            message,
            QueryGranteeGrantsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...base.query import v1beta1 as __base__query__v1beta1__
