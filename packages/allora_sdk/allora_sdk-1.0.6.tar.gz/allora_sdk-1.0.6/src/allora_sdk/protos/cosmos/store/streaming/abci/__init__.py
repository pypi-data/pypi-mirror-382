# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/store/streaming/abci/grpc.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AbciListenerServiceAsyncStub",
    "AbciListenerServiceStub",
    "ListenCommitRequest",
    "ListenCommitResponse",
    "ListenFinalizeBlockRequest",
    "ListenFinalizeBlockResponse",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class ListenCommitRequest(betterproto2.Message):
    """
    ListenCommitRequest is the request type for the ListenCommit RPC method
    """

    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    explicitly pass in block height as ResponseCommit does not contain this info
    """

    res: "____tendermint__abci__.ResponseCommit | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    change_set: "list[__v1beta1__.StoreKvPair]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.store.streaming.abci", "ListenCommitRequest", ListenCommitRequest
)


@dataclass(eq=False, repr=False)
class ListenCommitResponse(betterproto2.Message):
    """
    ListenCommitResponse is the response type for the ListenCommit RPC method
    """

    pass


default_message_pool.register_message(
    "cosmos.store.streaming.abci", "ListenCommitResponse", ListenCommitResponse
)


@dataclass(eq=False, repr=False)
class ListenFinalizeBlockRequest(betterproto2.Message):
    """
    ListenEndBlockRequest is the request type for the ListenEndBlock RPC method
    """

    req: "____tendermint__abci__.RequestFinalizeBlock | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    res: "____tendermint__abci__.ResponseFinalizeBlock | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.store.streaming.abci",
    "ListenFinalizeBlockRequest",
    ListenFinalizeBlockRequest,
)


@dataclass(eq=False, repr=False)
class ListenFinalizeBlockResponse(betterproto2.Message):
    """
    ListenEndBlockResponse is the response type for the ListenEndBlock RPC method
    """

    pass


default_message_pool.register_message(
    "cosmos.store.streaming.abci",
    "ListenFinalizeBlockResponse",
    ListenFinalizeBlockResponse,
)


class AbciListenerServiceStub:
    """
    ABCIListenerService is the service for the BaseApp ABCIListener interface
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def listen_finalize_block(
        self, message: "ListenFinalizeBlockRequest"
    ) -> "ListenFinalizeBlockResponse":
        """
        ListenFinalizeBlock is the corresponding endpoint for ABCIListener.ListenEndBlock
        """

        return self._channel.unary_unary(
            "/cosmos.store.streaming.abci.ABCIListenerService/ListenFinalizeBlock",
            ListenFinalizeBlockRequest.SerializeToString,
            ListenFinalizeBlockResponse.FromString,
        )(message)

    def listen_commit(self, message: "ListenCommitRequest") -> "ListenCommitResponse":
        """
        ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit
        """

        return self._channel.unary_unary(
            "/cosmos.store.streaming.abci.ABCIListenerService/ListenCommit",
            ListenCommitRequest.SerializeToString,
            ListenCommitResponse.FromString,
        )(message)


class AbciListenerServiceAsyncStub(betterproto2.ServiceStub):
    """
    ABCIListenerService is the service for the BaseApp ABCIListener interface
    """

    async def listen_finalize_block(
        self,
        message: "ListenFinalizeBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListenFinalizeBlockResponse":
        """
        ListenFinalizeBlock is the corresponding endpoint for ABCIListener.ListenEndBlock
        """

        return await self._unary_unary(
            "/cosmos.store.streaming.abci.ABCIListenerService/ListenFinalizeBlock",
            message,
            ListenFinalizeBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def listen_commit(
        self,
        message: "ListenCommitRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListenCommitResponse":
        """
        ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit
        """

        return await self._unary_unary(
            "/cosmos.store.streaming.abci.ABCIListenerService/ListenCommit",
            message,
            ListenCommitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .....tendermint import abci as ____tendermint__abci__
from ... import v1beta1 as __v1beta1__
