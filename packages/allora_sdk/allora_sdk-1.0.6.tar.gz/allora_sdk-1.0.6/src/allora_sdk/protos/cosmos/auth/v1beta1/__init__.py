# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/auth/v1beta1/auth.proto, cosmos/auth/v1beta1/genesis.proto, cosmos/auth/v1beta1/query.proto, cosmos/auth/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AddressBytesToStringRequest",
    "AddressBytesToStringResponse",
    "AddressStringToBytesRequest",
    "AddressStringToBytesResponse",
    "BaseAccount",
    "Bech32PrefixRequest",
    "Bech32PrefixResponse",
    "GenesisState",
    "ModuleAccount",
    "ModuleCredential",
    "MsgAsyncStub",
    "MsgStub",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "Params",
    "QueryAccountAddressByIdRequest",
    "QueryAccountAddressByIdResponse",
    "QueryAccountInfoRequest",
    "QueryAccountInfoResponse",
    "QueryAccountRequest",
    "QueryAccountResponse",
    "QueryAccountsRequest",
    "QueryAccountsResponse",
    "QueryAsyncStub",
    "QueryModuleAccountByNameRequest",
    "QueryModuleAccountByNameResponse",
    "QueryModuleAccountsRequest",
    "QueryModuleAccountsResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryStub",
)

import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class AddressBytesToStringRequest(betterproto2.Message):
    """
    AddressBytesToStringRequest is the request type for AddressString rpc method.

    Since: cosmos-sdk 0.46
    """

    address_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "AddressBytesToStringRequest", AddressBytesToStringRequest
)


@dataclass(eq=False, repr=False)
class AddressBytesToStringResponse(betterproto2.Message):
    """
    AddressBytesToStringResponse is the response type for AddressString rpc method.

    Since: cosmos-sdk 0.46
    """

    address_string: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "AddressBytesToStringResponse", AddressBytesToStringResponse
)


@dataclass(eq=False, repr=False)
class AddressStringToBytesRequest(betterproto2.Message):
    """
    AddressStringToBytesRequest is the request type for AccountBytes rpc method.

    Since: cosmos-sdk 0.46
    """

    address_string: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "AddressStringToBytesRequest", AddressStringToBytesRequest
)


@dataclass(eq=False, repr=False)
class AddressStringToBytesResponse(betterproto2.Message):
    """
    AddressStringToBytesResponse is the response type for AddressBytes rpc method.

    Since: cosmos-sdk 0.46
    """

    address_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "AddressStringToBytesResponse", AddressStringToBytesResponse
)


@dataclass(eq=False, repr=False)
class BaseAccount(betterproto2.Message):
    """
    BaseAccount defines a base account type. It contains all the necessary fields
    for basic account functionality. Any custom account type should extend this
    type for additional functionality (e.g. vesting).
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    pub_key: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    account_number: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    sequence: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)


default_message_pool.register_message("cosmos.auth.v1beta1", "BaseAccount", BaseAccount)


@dataclass(eq=False, repr=False)
class Bech32PrefixRequest(betterproto2.Message):
    """
    Bech32PrefixRequest is the request type for Bech32Prefix rpc method.

    Since: cosmos-sdk 0.46
    """

    pass


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "Bech32PrefixRequest", Bech32PrefixRequest
)


@dataclass(eq=False, repr=False)
class Bech32PrefixResponse(betterproto2.Message):
    """
    Bech32PrefixResponse is the response type for Bech32Prefix rpc method.

    Since: cosmos-sdk 0.46
    """

    bech32_prefix: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "Bech32PrefixResponse", Bech32PrefixResponse
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the auth module's genesis state.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """

    accounts: "list[___google__protobuf__.Any]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    accounts are the accounts present at genesis.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class ModuleAccount(betterproto2.Message):
    """
    ModuleAccount defines an account for modules that holds coins on a pool.
    """

    base_account: "BaseAccount | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    permissions: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "ModuleAccount", ModuleAccount
)


@dataclass(eq=False, repr=False)
class ModuleCredential(betterproto2.Message):
    """
    ModuleCredential represents a unclaimable pubkey for base accounts controlled by modules.

    Since: cosmos-sdk 0.47
    """

    module_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    module_name is the name of the module used for address derivation (passed into address.Module).
    """

    derivation_keys: "list[bytes]" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, repeated=True
    )
    """
    derivation_keys is for deriving a module account address (passed into address.Module)
    adding more keys creates sub-account addresses (passed into address.Derive)
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "ModuleCredential", ModuleCredential
)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/auth parameters to update.

    NOTE: All parameters must be supplied.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters for the auth module.
    """

    max_memo_characters: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    tx_sig_limit: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    tx_size_cost_per_byte: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    sig_verify_cost_ed25519: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)

    sig_verify_cost_secp256k1: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)


default_message_pool.register_message("cosmos.auth.v1beta1", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryAccountAddressByIdRequest(betterproto2.Message):
    """
    QueryAccountAddressByIDRequest is the request type for AccountAddressByID rpc method

    Since: cosmos-sdk 0.46.2
    """

    id: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Deprecated, use account_id instead

    id is the account number of the address to be queried. This field
    should have been an uint64 (like all account numbers), and will be
    updated to uint64 in a future version of the auth query.
    """

    account_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    account_id is the account number of the address to be queried.

    Since: cosmos-sdk 0.47
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("id"):
            warnings.warn(
                "QueryAccountAddressByIdRequest.id is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "cosmos.auth.v1beta1",
    "QueryAccountAddressByIDRequest",
    QueryAccountAddressByIdRequest,
)


@dataclass(eq=False, repr=False)
class QueryAccountAddressByIdResponse(betterproto2.Message):
    """
    QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method

    Since: cosmos-sdk 0.46.2
    """

    account_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.auth.v1beta1",
    "QueryAccountAddressByIDResponse",
    QueryAccountAddressByIdResponse,
)


@dataclass(eq=False, repr=False)
class QueryAccountInfoRequest(betterproto2.Message):
    """
    QueryAccountInfoRequest is the Query/AccountInfo request type.

    Since: cosmos-sdk 0.47
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the account address string.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryAccountInfoRequest", QueryAccountInfoRequest
)


@dataclass(eq=False, repr=False)
class QueryAccountInfoResponse(betterproto2.Message):
    """
    QueryAccountInfoResponse is the Query/AccountInfo response type.

    Since: cosmos-sdk 0.47
    """

    info: "BaseAccount | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    info is the account info which is represented by BaseAccount.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryAccountInfoResponse", QueryAccountInfoResponse
)


@dataclass(eq=False, repr=False)
class QueryAccountRequest(betterproto2.Message):
    """
    QueryAccountRequest is the request type for the Query/Account RPC method.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address defines the address to query for.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryAccountRequest", QueryAccountRequest
)


@dataclass(eq=False, repr=False)
class QueryAccountResponse(betterproto2.Message):
    """
    QueryAccountResponse is the response type for the Query/Account RPC method.
    """

    account: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    account defines the account of the corresponding address.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryAccountResponse", QueryAccountResponse
)


@dataclass(eq=False, repr=False)
class QueryAccountsRequest(betterproto2.Message):
    """
    QueryAccountsRequest is the request type for the Query/Accounts RPC method.

    Since: cosmos-sdk 0.43
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryAccountsRequest", QueryAccountsRequest
)


@dataclass(eq=False, repr=False)
class QueryAccountsResponse(betterproto2.Message):
    """
    QueryAccountsResponse is the response type for the Query/Accounts RPC method.

    Since: cosmos-sdk 0.43
    """

    accounts: "list[___google__protobuf__.Any]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    accounts are the existing accounts
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryAccountsResponse", QueryAccountsResponse
)


@dataclass(eq=False, repr=False)
class QueryModuleAccountByNameRequest(betterproto2.Message):
    """
    QueryModuleAccountByNameRequest is the request type for the Query/ModuleAccountByName RPC method.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.auth.v1beta1",
    "QueryModuleAccountByNameRequest",
    QueryModuleAccountByNameRequest,
)


@dataclass(eq=False, repr=False)
class QueryModuleAccountByNameResponse(betterproto2.Message):
    """
    QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method.
    """

    account: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.auth.v1beta1",
    "QueryModuleAccountByNameResponse",
    QueryModuleAccountByNameResponse,
)


@dataclass(eq=False, repr=False)
class QueryModuleAccountsRequest(betterproto2.Message):
    """
    QueryModuleAccountsRequest is the request type for the Query/ModuleAccounts RPC method.

    Since: cosmos-sdk 0.46
    """

    pass


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryModuleAccountsRequest", QueryModuleAccountsRequest
)


@dataclass(eq=False, repr=False)
class QueryModuleAccountsResponse(betterproto2.Message):
    """
    QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.

    Since: cosmos-sdk 0.46
    """

    accounts: "list[___google__protobuf__.Any]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryModuleAccountsResponse", QueryModuleAccountsResponse
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "cosmos.auth.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


class MsgStub:
    """
    Msg defines the x/auth Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a (governance) operation for updating the x/auth module
        parameters. The authority defaults to the x/gov module account.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the x/auth Msg service.
    """

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a (governance) operation for updating the x/auth module
        parameters. The authority defaults to the x/gov module account.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def accounts(self, message: "QueryAccountsRequest") -> "QueryAccountsResponse":
        """
        Accounts returns all the existing accounts.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.43
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/Accounts",
            QueryAccountsRequest.SerializeToString,
            QueryAccountsResponse.FromString,
        )(message)

    def account(self, message: "QueryAccountRequest") -> "QueryAccountResponse":
        """
        Account returns account details based on address.
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/Account",
            QueryAccountRequest.SerializeToString,
            QueryAccountResponse.FromString,
        )(message)

    def account_address_by_id(
        self, message: "QueryAccountAddressByIdRequest"
    ) -> "QueryAccountAddressByIdResponse":
        """
        AccountAddressByID returns account address based on account number.

        Since: cosmos-sdk 0.46.2
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/AccountAddressByID",
            QueryAccountAddressByIdRequest.SerializeToString,
            QueryAccountAddressByIdResponse.FromString,
        )(message)

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params queries all parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def module_accounts(
        self, message: "QueryModuleAccountsRequest | None" = None
    ) -> "QueryModuleAccountsResponse":
        """
        ModuleAccounts returns all the existing module accounts.

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = QueryModuleAccountsRequest()

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/ModuleAccounts",
            QueryModuleAccountsRequest.SerializeToString,
            QueryModuleAccountsResponse.FromString,
        )(message)

    def module_account_by_name(
        self, message: "QueryModuleAccountByNameRequest"
    ) -> "QueryModuleAccountByNameResponse":
        """
        ModuleAccountByName returns the module account info by module name
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/ModuleAccountByName",
            QueryModuleAccountByNameRequest.SerializeToString,
            QueryModuleAccountByNameResponse.FromString,
        )(message)

    def bech_32_prefix(
        self, message: "Bech32PrefixRequest | None" = None
    ) -> "Bech32PrefixResponse":
        """
        Bech32Prefix queries bech32Prefix

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = Bech32PrefixRequest()

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/Bech32Prefix",
            Bech32PrefixRequest.SerializeToString,
            Bech32PrefixResponse.FromString,
        )(message)

    def address_bytes_to_string(
        self, message: "AddressBytesToStringRequest"
    ) -> "AddressBytesToStringResponse":
        """
        AddressBytesToString converts Account Address bytes to string

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/AddressBytesToString",
            AddressBytesToStringRequest.SerializeToString,
            AddressBytesToStringResponse.FromString,
        )(message)

    def address_string_to_bytes(
        self, message: "AddressStringToBytesRequest"
    ) -> "AddressStringToBytesResponse":
        """
        AddressStringToBytes converts Address string to bytes

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/AddressStringToBytes",
            AddressStringToBytesRequest.SerializeToString,
            AddressStringToBytesResponse.FromString,
        )(message)

    def account_info(
        self, message: "QueryAccountInfoRequest"
    ) -> "QueryAccountInfoResponse":
        """
        AccountInfo queries account info which is common to all account types.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.auth.v1beta1.Query/AccountInfo",
            QueryAccountInfoRequest.SerializeToString,
            QueryAccountInfoResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def accounts(
        self,
        message: "QueryAccountsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAccountsResponse":
        """
        Accounts returns all the existing accounts.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.

        Since: cosmos-sdk 0.43
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Accounts",
            message,
            QueryAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def account(
        self,
        message: "QueryAccountRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAccountResponse":
        """
        Account returns account details based on address.
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Account",
            message,
            QueryAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def account_address_by_id(
        self,
        message: "QueryAccountAddressByIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAccountAddressByIdResponse":
        """
        AccountAddressByID returns account address based on account number.

        Since: cosmos-sdk 0.46.2
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AccountAddressByID",
            message,
            QueryAccountAddressByIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params queries all parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def module_accounts(
        self,
        message: "QueryModuleAccountsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryModuleAccountsResponse":
        """
        ModuleAccounts returns all the existing module accounts.

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = QueryModuleAccountsRequest()

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/ModuleAccounts",
            message,
            QueryModuleAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def module_account_by_name(
        self,
        message: "QueryModuleAccountByNameRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryModuleAccountByNameResponse":
        """
        ModuleAccountByName returns the module account info by module name
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/ModuleAccountByName",
            message,
            QueryModuleAccountByNameResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bech_32_prefix(
        self,
        message: "Bech32PrefixRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Bech32PrefixResponse":
        """
        Bech32Prefix queries bech32Prefix

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = Bech32PrefixRequest()

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Bech32Prefix",
            message,
            Bech32PrefixResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def address_bytes_to_string(
        self,
        message: "AddressBytesToStringRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddressBytesToStringResponse":
        """
        AddressBytesToString converts Account Address bytes to string

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AddressBytesToString",
            message,
            AddressBytesToStringResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def address_string_to_bytes(
        self,
        message: "AddressStringToBytesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddressStringToBytesResponse":
        """
        AddressStringToBytes converts Address string to bytes

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AddressStringToBytes",
            message,
            AddressStringToBytesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def account_info(
        self,
        message: "QueryAccountInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAccountInfoResponse":
        """
        AccountInfo queries account info which is common to all account types.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AccountInfo",
            message,
            QueryAccountInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...base.query import v1beta1 as __base__query__v1beta1__
