# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/store/v1beta1/commit_info.proto, cosmos/store/v1beta1/listening.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "BlockMetadata",
    "CommitId",
    "CommitInfo",
    "StoreInfo",
    "StoreKvPair",
)

import datetime
from dataclasses import dataclass

import betterproto2

from ....message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class BlockMetadata(betterproto2.Message):
    """
    BlockMetadata contains all the abci event data of a block
    the file streamer dump them into files together with the state changes.
    """

    response_commit: "___tendermint__abci__.ResponseCommit | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    request_finalize_block: "___tendermint__abci__.RequestFinalizeBlock | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )

    response_finalize_block: "___tendermint__abci__.ResponseFinalizeBlock | None" = (
        betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    TODO: should we renumber this?
    """


default_message_pool.register_message(
    "cosmos.store.v1beta1", "BlockMetadata", BlockMetadata
)


@dataclass(eq=False, repr=False)
class CommitId(betterproto2.Message):
    """
    CommitID defines the commitment information when a specific store is
    committed.
    """

    version: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    hash: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)


default_message_pool.register_message("cosmos.store.v1beta1", "CommitID", CommitId)


@dataclass(eq=False, repr=False)
class CommitInfo(betterproto2.Message):
    """
    CommitInfo defines commit information used by the multi-store when committing
    a version/height.
    """

    version: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    store_infos: "list[StoreInfo]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    timestamp: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )


default_message_pool.register_message("cosmos.store.v1beta1", "CommitInfo", CommitInfo)


@dataclass(eq=False, repr=False)
class StoreInfo(betterproto2.Message):
    """
    StoreInfo defines store-specific commit information. It contains a reference
    between a store name and the commit ID.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    commit_id: "CommitId | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("cosmos.store.v1beta1", "StoreInfo", StoreInfo)


@dataclass(eq=False, repr=False)
class StoreKvPair(betterproto2.Message):
    """
    StoreKVPair is a KVStore KVPair used for listening to state changes (Sets and Deletes)
    It optionally includes the StoreKey for the originating KVStore and a Boolean flag to distinguish between Sets and
    Deletes

    Since: cosmos-sdk 0.43
    """

    store_key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    the store key for the KVStore this pair originates from
    """

    delete: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    true indicates a delete operation, false indicates a set operation
    """

    key: "bytes" = betterproto2.field(3, betterproto2.TYPE_BYTES)

    value: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "cosmos.store.v1beta1", "StoreKVPair", StoreKvPair
)


from ....google import protobuf as ___google__protobuf__
from ....tendermint import abci as ___tendermint__abci__
