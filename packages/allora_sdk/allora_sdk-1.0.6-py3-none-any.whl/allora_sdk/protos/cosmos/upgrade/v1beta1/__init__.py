# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/upgrade/v1beta1/query.proto, cosmos/upgrade/v1beta1/tx.proto, cosmos/upgrade/v1beta1/upgrade.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CancelSoftwareUpgradeProposal",
    "ModuleVersion",
    "MsgAsyncStub",
    "MsgCancelUpgrade",
    "MsgCancelUpgradeResponse",
    "MsgSoftwareUpgrade",
    "MsgSoftwareUpgradeResponse",
    "MsgStub",
    "Plan",
    "QueryAppliedPlanRequest",
    "QueryAppliedPlanResponse",
    "QueryAsyncStub",
    "QueryAuthorityRequest",
    "QueryAuthorityResponse",
    "QueryCurrentPlanRequest",
    "QueryCurrentPlanResponse",
    "QueryModuleVersionsRequest",
    "QueryModuleVersionsResponse",
    "QueryStub",
    "QueryUpgradedConsensusStateRequest",
    "QueryUpgradedConsensusStateResponse",
    "SoftwareUpgradeProposal",
)

import datetime
import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class CancelSoftwareUpgradeProposal(betterproto2.Message):
    """
    CancelSoftwareUpgradeProposal is a gov Content type for cancelling a software
    upgrade.
    Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
    proposals, see MsgCancelUpgrade.
    """

    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    title of the proposal
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    description of the proposal
    """

    def __post_init__(self) -> None:
        warnings.warn("CancelSoftwareUpgradeProposal is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1",
    "CancelSoftwareUpgradeProposal",
    CancelSoftwareUpgradeProposal,
)


@dataclass(eq=False, repr=False)
class ModuleVersion(betterproto2.Message):
    """
    ModuleVersion specifies a module and its consensus version.

    Since: cosmos-sdk 0.43
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    name of the app module
    """

    version: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    consensus version of the app module
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "ModuleVersion", ModuleVersion
)


@dataclass(eq=False, repr=False)
class MsgCancelUpgrade(betterproto2.Message):
    """
    MsgCancelUpgrade is the Msg/CancelUpgrade request type.

    Since: cosmos-sdk 0.46
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "MsgCancelUpgrade", MsgCancelUpgrade
)


@dataclass(eq=False, repr=False)
class MsgCancelUpgradeResponse(betterproto2.Message):
    """
    MsgCancelUpgradeResponse is the Msg/CancelUpgrade response type.

    Since: cosmos-sdk 0.46
    """

    pass


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "MsgCancelUpgradeResponse", MsgCancelUpgradeResponse
)


@dataclass(eq=False, repr=False)
class MsgSoftwareUpgrade(betterproto2.Message):
    """
    MsgSoftwareUpgrade is the Msg/SoftwareUpgrade request type.

    Since: cosmos-sdk 0.46
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    plan: "Plan | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    plan is the upgrade plan.
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "MsgSoftwareUpgrade", MsgSoftwareUpgrade
)


@dataclass(eq=False, repr=False)
class MsgSoftwareUpgradeResponse(betterproto2.Message):
    """
    MsgSoftwareUpgradeResponse is the Msg/SoftwareUpgrade response type.

    Since: cosmos-sdk 0.46
    """

    pass


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "MsgSoftwareUpgradeResponse", MsgSoftwareUpgradeResponse
)


@dataclass(eq=False, repr=False)
class Plan(betterproto2.Message):
    """
    Plan specifies information about a planned upgrade and when it should occur.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Sets the name for the upgrade. This name will be used by the upgraded
    version of the software to apply any special "on-upgrade" commands during
    the first BeginBlock method after the upgrade is applied. It is also used
    to detect whether a software version can handle a given upgrade. If no
    upgrade handler with this name has been set in the software, it will be
    assumed that the software is out-of-date when the upgrade Time or Height is
    reached and the software will exit.
    """

    time: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
    has been removed from the SDK.
    If this field is not empty, an error will be thrown.
    """

    height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)
    """
    The height at which the upgrade must be performed.
    """

    info: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Any application specific upgrade info to be included on-chain
    such as a git commit that validators could automatically upgrade to
    """

    upgraded_client_state: "___google__protobuf__.Any | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
    moved to the IBC module in the sub module 02-client.
    If this field is not empty, an error will be thrown.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("time"):
            warnings.warn("Plan.time is deprecated", DeprecationWarning)
        if self.is_set("upgraded_client_state"):
            warnings.warn(
                "Plan.upgraded_client_state is deprecated", DeprecationWarning
            )


default_message_pool.register_message("cosmos.upgrade.v1beta1", "Plan", Plan)


@dataclass(eq=False, repr=False)
class QueryAppliedPlanRequest(betterproto2.Message):
    """
    QueryCurrentPlanRequest is the request type for the Query/AppliedPlan RPC
    method.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    name is the name of the applied plan to query for.
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryAppliedPlanRequest", QueryAppliedPlanRequest
)


@dataclass(eq=False, repr=False)
class QueryAppliedPlanResponse(betterproto2.Message):
    """
    QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
    method.
    """

    height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    height is the block height at which the plan was applied.
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryAppliedPlanResponse", QueryAppliedPlanResponse
)


@dataclass(eq=False, repr=False)
class QueryAuthorityRequest(betterproto2.Message):
    """
    QueryAuthorityRequest is the request type for Query/Authority

    Since: cosmos-sdk 0.46
    """

    pass


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryAuthorityRequest", QueryAuthorityRequest
)


@dataclass(eq=False, repr=False)
class QueryAuthorityResponse(betterproto2.Message):
    """
    QueryAuthorityResponse is the response type for Query/Authority

    Since: cosmos-sdk 0.46
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryAuthorityResponse", QueryAuthorityResponse
)


@dataclass(eq=False, repr=False)
class QueryCurrentPlanRequest(betterproto2.Message):
    """
    QueryCurrentPlanRequest is the request type for the Query/CurrentPlan RPC
    method.
    """

    pass


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryCurrentPlanRequest", QueryCurrentPlanRequest
)


@dataclass(eq=False, repr=False)
class QueryCurrentPlanResponse(betterproto2.Message):
    """
    QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
    method.
    """

    plan: "Plan | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    plan is the current upgrade plan.
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryCurrentPlanResponse", QueryCurrentPlanResponse
)


@dataclass(eq=False, repr=False)
class QueryModuleVersionsRequest(betterproto2.Message):
    """
    QueryModuleVersionsRequest is the request type for the Query/ModuleVersions
    RPC method.

    Since: cosmos-sdk 0.43
    """

    module_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    module_name is a field to query a specific module
    consensus version from state. Leaving this empty will
    fetch the full list of module versions from state
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryModuleVersionsRequest", QueryModuleVersionsRequest
)


@dataclass(eq=False, repr=False)
class QueryModuleVersionsResponse(betterproto2.Message):
    """
    QueryModuleVersionsResponse is the response type for the Query/ModuleVersions
    RPC method.

    Since: cosmos-sdk 0.43
    """

    module_versions: "list[ModuleVersion]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    module_versions is a list of module names with their consensus versions.
    """


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "QueryModuleVersionsResponse", QueryModuleVersionsResponse
)


@dataclass(eq=False, repr=False)
class QueryUpgradedConsensusStateRequest(betterproto2.Message):
    """
    QueryUpgradedConsensusStateRequest is the request type for the Query/UpgradedConsensusState
    RPC method.
    """

    last_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    last height of the current chain must be sent in request
    as this is the height under which next consensus state is stored
    """

    def __post_init__(self) -> None:
        warnings.warn(
            "QueryUpgradedConsensusStateRequest is deprecated", DeprecationWarning
        )
        super().__post_init__()


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1",
    "QueryUpgradedConsensusStateRequest",
    QueryUpgradedConsensusStateRequest,
)


@dataclass(eq=False, repr=False)
class QueryUpgradedConsensusStateResponse(betterproto2.Message):
    """
    QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState
    RPC method.
    """

    upgraded_consensus_state: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    Since: cosmos-sdk 0.43
    """

    def __post_init__(self) -> None:
        warnings.warn(
            "QueryUpgradedConsensusStateResponse is deprecated", DeprecationWarning
        )
        super().__post_init__()


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1",
    "QueryUpgradedConsensusStateResponse",
    QueryUpgradedConsensusStateResponse,
)


@dataclass(eq=False, repr=False)
class SoftwareUpgradeProposal(betterproto2.Message):
    """
    SoftwareUpgradeProposal is a gov Content type for initiating a software
    upgrade.
    Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
    proposals, see MsgSoftwareUpgrade.
    """

    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    title of the proposal
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    description of the proposal
    """

    plan: "Plan | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    plan of the proposal
    """

    def __post_init__(self) -> None:
        warnings.warn("SoftwareUpgradeProposal is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message(
    "cosmos.upgrade.v1beta1", "SoftwareUpgradeProposal", SoftwareUpgradeProposal
)


class MsgStub:
    """
    Msg defines the upgrade Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def software_upgrade(
        self, message: "MsgSoftwareUpgrade"
    ) -> "MsgSoftwareUpgradeResponse":
        """
        SoftwareUpgrade is a governance operation for initiating a software upgrade.

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.upgrade.v1beta1.Msg/SoftwareUpgrade",
            MsgSoftwareUpgrade.SerializeToString,
            MsgSoftwareUpgradeResponse.FromString,
        )(message)

    def cancel_upgrade(self, message: "MsgCancelUpgrade") -> "MsgCancelUpgradeResponse":
        """
        CancelUpgrade is a governance operation for cancelling a previously
        approved software upgrade.

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.upgrade.v1beta1.Msg/CancelUpgrade",
            MsgCancelUpgrade.SerializeToString,
            MsgCancelUpgradeResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the upgrade Msg service.
    """

    async def software_upgrade(
        self,
        message: "MsgSoftwareUpgrade",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgSoftwareUpgradeResponse":
        """
        SoftwareUpgrade is a governance operation for initiating a software upgrade.

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Msg/SoftwareUpgrade",
            message,
            MsgSoftwareUpgradeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_upgrade(
        self,
        message: "MsgCancelUpgrade",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgCancelUpgradeResponse":
        """
        CancelUpgrade is a governance operation for cancelling a previously
        approved software upgrade.

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Msg/CancelUpgrade",
            message,
            MsgCancelUpgradeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC upgrade querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def current_plan(
        self, message: "QueryCurrentPlanRequest | None" = None
    ) -> "QueryCurrentPlanResponse":
        """
        CurrentPlan queries the current upgrade plan.
        """

        if message is None:
            message = QueryCurrentPlanRequest()

        return self._channel.unary_unary(
            "/cosmos.upgrade.v1beta1.Query/CurrentPlan",
            QueryCurrentPlanRequest.SerializeToString,
            QueryCurrentPlanResponse.FromString,
        )(message)

    def applied_plan(
        self, message: "QueryAppliedPlanRequest"
    ) -> "QueryAppliedPlanResponse":
        """
        AppliedPlan queries a previously applied upgrade plan by its name.
        """

        return self._channel.unary_unary(
            "/cosmos.upgrade.v1beta1.Query/AppliedPlan",
            QueryAppliedPlanRequest.SerializeToString,
            QueryAppliedPlanResponse.FromString,
        )(message)

    def upgraded_consensus_state(
        self, message: "QueryUpgradedConsensusStateRequest"
    ) -> "QueryUpgradedConsensusStateResponse":
        """
        UpgradedConsensusState queries the consensus state that will serve
        as a trusted kernel for the next version of this chain. It will only be
        stored at the last height of this chain.
        UpgradedConsensusState RPC not supported with legacy querier
        This rpc is deprecated now that IBC has its own replacement
        (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
        """

        warnings.warn(
            "Query.upgraded_consensus_state is deprecated", DeprecationWarning
        )

        return self._channel.unary_unary(
            "/cosmos.upgrade.v1beta1.Query/UpgradedConsensusState",
            QueryUpgradedConsensusStateRequest.SerializeToString,
            QueryUpgradedConsensusStateResponse.FromString,
        )(message)

    def module_versions(
        self, message: "QueryModuleVersionsRequest"
    ) -> "QueryModuleVersionsResponse":
        """
        ModuleVersions queries the list of module versions from state.

        Since: cosmos-sdk 0.43
        """

        return self._channel.unary_unary(
            "/cosmos.upgrade.v1beta1.Query/ModuleVersions",
            QueryModuleVersionsRequest.SerializeToString,
            QueryModuleVersionsResponse.FromString,
        )(message)

    def authority(
        self, message: "QueryAuthorityRequest | None" = None
    ) -> "QueryAuthorityResponse":
        """
        Returns the account with authority to conduct upgrades

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = QueryAuthorityRequest()

        return self._channel.unary_unary(
            "/cosmos.upgrade.v1beta1.Query/Authority",
            QueryAuthorityRequest.SerializeToString,
            QueryAuthorityResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC upgrade querier service.
    """

    async def current_plan(
        self,
        message: "QueryCurrentPlanRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryCurrentPlanResponse":
        """
        CurrentPlan queries the current upgrade plan.
        """

        if message is None:
            message = QueryCurrentPlanRequest()

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/CurrentPlan",
            message,
            QueryCurrentPlanResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def applied_plan(
        self,
        message: "QueryAppliedPlanRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAppliedPlanResponse":
        """
        AppliedPlan queries a previously applied upgrade plan by its name.
        """

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/AppliedPlan",
            message,
            QueryAppliedPlanResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upgraded_consensus_state(
        self,
        message: "QueryUpgradedConsensusStateRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryUpgradedConsensusStateResponse":
        """
        UpgradedConsensusState queries the consensus state that will serve
        as a trusted kernel for the next version of this chain. It will only be
        stored at the last height of this chain.
        UpgradedConsensusState RPC not supported with legacy querier
        This rpc is deprecated now that IBC has its own replacement
        (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
        """

        warnings.warn(
            "Query.upgraded_consensus_state is deprecated", DeprecationWarning
        )

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/UpgradedConsensusState",
            message,
            QueryUpgradedConsensusStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def module_versions(
        self,
        message: "QueryModuleVersionsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryModuleVersionsResponse":
        """
        ModuleVersions queries the list of module versions from state.

        Since: cosmos-sdk 0.43
        """

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/ModuleVersions",
            message,
            QueryModuleVersionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def authority(
        self,
        message: "QueryAuthorityRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAuthorityResponse":
        """
        Returns the account with authority to conduct upgrades

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = QueryAuthorityRequest()

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/Authority",
            message,
            QueryAuthorityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
