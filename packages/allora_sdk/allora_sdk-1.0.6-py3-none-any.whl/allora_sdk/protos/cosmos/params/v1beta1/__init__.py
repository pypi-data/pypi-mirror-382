# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/params/v1beta1/params.proto, cosmos/params/v1beta1/query.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ParamChange",
    "ParameterChangeProposal",
    "QueryAsyncStub",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryStub",
    "QuerySubspacesRequest",
    "QuerySubspacesResponse",
    "Subspace",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class ParamChange(betterproto2.Message):
    """
    ParamChange defines an individual parameter change, for use in
    ParameterChangeProposal.
    """

    subspace: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    value: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.params.v1beta1", "ParamChange", ParamChange
)


@dataclass(eq=False, repr=False)
class ParameterChangeProposal(betterproto2.Message):
    """
    ParameterChangeProposal defines a proposal to change one or more parameters.
    """

    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    changes: "list[ParamChange]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.params.v1beta1", "ParameterChangeProposal", ParameterChangeProposal
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is request type for the Query/Params RPC method.
    """

    subspace: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    subspace defines the module to query the parameter for.
    """

    key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    key defines the key of the parameter in the subspace.
    """


default_message_pool.register_message(
    "cosmos.params.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    param: "ParamChange | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    param defines the queried parameter.
    """


default_message_pool.register_message(
    "cosmos.params.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


@dataclass(eq=False, repr=False)
class QuerySubspacesRequest(betterproto2.Message):
    """
    QuerySubspacesRequest defines a request type for querying for all registered
    subspaces and all keys for a subspace.

    Since: cosmos-sdk 0.46
    """

    pass


default_message_pool.register_message(
    "cosmos.params.v1beta1", "QuerySubspacesRequest", QuerySubspacesRequest
)


@dataclass(eq=False, repr=False)
class QuerySubspacesResponse(betterproto2.Message):
    """
    QuerySubspacesResponse defines the response types for querying for all
    registered subspaces and all keys for a subspace.

    Since: cosmos-sdk 0.46
    """

    subspaces: "list[Subspace]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.params.v1beta1", "QuerySubspacesResponse", QuerySubspacesResponse
)


@dataclass(eq=False, repr=False)
class Subspace(betterproto2.Message):
    """
    Subspace defines a parameter subspace name and all the keys that exist for
    the subspace.

    Since: cosmos-sdk 0.46
    """

    subspace: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    keys: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message("cosmos.params.v1beta1", "Subspace", Subspace)


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(self, message: "QueryParamsRequest") -> "QueryParamsResponse":
        """
        Params queries a specific parameter of a module, given its subspace and
        key.
        """

        return self._channel.unary_unary(
            "/cosmos.params.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def subspaces(
        self, message: "QuerySubspacesRequest | None" = None
    ) -> "QuerySubspacesResponse":
        """
        Subspaces queries for all registered subspaces and all keys for a subspace.

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = QuerySubspacesRequest()

        return self._channel.unary_unary(
            "/cosmos.params.v1beta1.Query/Subspaces",
            QuerySubspacesRequest.SerializeToString,
            QuerySubspacesResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def params(
        self,
        message: "QueryParamsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params queries a specific parameter of a module, given its subspace and
        key.
        """

        return await self._unary_unary(
            "/cosmos.params.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def subspaces(
        self,
        message: "QuerySubspacesRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySubspacesResponse":
        """
        Subspaces queries for all registered subspaces and all keys for a subspace.

        Since: cosmos-sdk 0.46
        """

        if message is None:
            message = QuerySubspacesRequest()

        return await self._unary_unary(
            "/cosmos.params.v1beta1.Query/Subspaces",
            message,
            QuerySubspacesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
