# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/gov/v1beta1/genesis.proto, cosmos/gov/v1beta1/gov.proto, cosmos/gov/v1beta1/query.proto, cosmos/gov/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Deposit",
    "DepositParams",
    "GenesisState",
    "MsgAsyncStub",
    "MsgDeposit",
    "MsgDepositResponse",
    "MsgStub",
    "MsgSubmitProposal",
    "MsgSubmitProposalResponse",
    "MsgVote",
    "MsgVoteResponse",
    "MsgVoteWeighted",
    "MsgVoteWeightedResponse",
    "Proposal",
    "ProposalStatus",
    "QueryAsyncStub",
    "QueryDepositRequest",
    "QueryDepositResponse",
    "QueryDepositsRequest",
    "QueryDepositsResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryProposalRequest",
    "QueryProposalResponse",
    "QueryProposalsRequest",
    "QueryProposalsResponse",
    "QueryStub",
    "QueryTallyResultRequest",
    "QueryTallyResultResponse",
    "QueryVoteRequest",
    "QueryVoteResponse",
    "QueryVotesRequest",
    "QueryVotesResponse",
    "TallyParams",
    "TallyResult",
    "TextProposal",
    "Vote",
    "VoteOption",
    "VotingParams",
    "WeightedVoteOption",
)

import datetime
import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ProposalStatus(betterproto2.Enum):
    """
    ProposalStatus enumerates the valid statuses of a proposal.
    """

    UNSPECIFIED = 0
    """
    PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
    """

    DEPOSIT_PERIOD = 1
    """
    PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
    period.
    """

    VOTING_PERIOD = 2
    """
    PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
    period.
    """

    PASSED = 3
    """
    PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
    passed.
    """

    REJECTED = 4
    """
    PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
    been rejected.
    """

    FAILED = 5
    """
    PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
    failed.
    """

    betterproto_proto_names = {
        0: "PROPOSAL_STATUS_UNSPECIFIED",
        1: "PROPOSAL_STATUS_DEPOSIT_PERIOD",
        2: "PROPOSAL_STATUS_VOTING_PERIOD",
        3: "PROPOSAL_STATUS_PASSED",
        4: "PROPOSAL_STATUS_REJECTED",
        5: "PROPOSAL_STATUS_FAILED",
    }


class VoteOption(betterproto2.Enum):
    """
    VoteOption enumerates the valid vote options for a given governance proposal.
    """

    UNSPECIFIED = 0
    """
    VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
    """

    YES = 1
    """
    VOTE_OPTION_YES defines a yes vote option.
    """

    ABSTAIN = 2
    """
    VOTE_OPTION_ABSTAIN defines an abstain vote option.
    """

    NO = 3
    """
    VOTE_OPTION_NO defines a no vote option.
    """

    NO_WITH_VETO = 4
    """
    VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    """

    betterproto_proto_names = {
        0: "VOTE_OPTION_UNSPECIFIED",
        1: "VOTE_OPTION_YES",
        2: "VOTE_OPTION_ABSTAIN",
        3: "VOTE_OPTION_NO",
        4: "VOTE_OPTION_NO_WITH_VETO",
    }


@dataclass(eq=False, repr=False)
class Deposit(betterproto2.Message):
    """
    Deposit defines an amount deposited by an account address to an active
    proposal.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    depositor: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    depositor defines the deposit addresses from the proposals.
    """

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    amount to be deposited by depositor.
    """


default_message_pool.register_message("cosmos.gov.v1beta1", "Deposit", Deposit)


@dataclass(eq=False, repr=False)
class DepositParams(betterproto2.Message):
    """
    DepositParams defines the params for deposits on governance proposals.
    """

    min_deposit: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Minimum deposit for a proposal to enter voting period.
    """

    max_deposit_period: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    Maximum period for Atom holders to deposit on a proposal. Initial value: 2
    months.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "DepositParams", DepositParams
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the gov module's genesis state.
    """

    starting_proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    starting_proposal_id is the ID of the starting proposal.
    """

    deposits: "list[Deposit]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    deposits defines all the deposits present at genesis.
    """

    votes: "list[Vote]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    votes defines all the votes present at genesis.
    """

    proposals: "list[Proposal]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    proposals defines all the proposals present at genesis.
    """

    deposit_params: "DepositParams | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    deposit_params defines all the parameters related to deposit.
    """

    voting_params: "VotingParams | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    voting_params defines all the parameters related to voting.
    """

    tally_params: "TallyParams | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    tally_params defines all the parameters related to tally.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class MsgDeposit(betterproto2.Message):
    """
    MsgDeposit defines a message to submit a deposit to an existing proposal.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    depositor: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    depositor defines the deposit addresses from the proposals.
    """

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    amount to be deposited by depositor.
    """


default_message_pool.register_message("cosmos.gov.v1beta1", "MsgDeposit", MsgDeposit)


@dataclass(eq=False, repr=False)
class MsgDepositResponse(betterproto2.Message):
    """
    MsgDepositResponse defines the Msg/Deposit response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "MsgDepositResponse", MsgDepositResponse
)


@dataclass(eq=False, repr=False)
class MsgSubmitProposal(betterproto2.Message):
    """
    MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary
    proposal Content.
    """

    content: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    content is the proposal's content.
    """

    initial_deposit: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    initial_deposit is the deposit value that must be paid at proposal submission.
    """

    proposer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    proposer is the account address of the proposer.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "MsgSubmitProposal", MsgSubmitProposal
)


@dataclass(eq=False, repr=False)
class MsgSubmitProposalResponse(betterproto2.Message):
    """
    MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "MsgSubmitProposalResponse", MsgSubmitProposalResponse
)


@dataclass(eq=False, repr=False)
class MsgVote(betterproto2.Message):
    """
    MsgVote defines a message to cast a vote.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    voter: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    voter is the voter address for the proposal.
    """

    option: "VoteOption" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: VoteOption(0)
    )
    """
    option defines the vote option.
    """


default_message_pool.register_message("cosmos.gov.v1beta1", "MsgVote", MsgVote)


@dataclass(eq=False, repr=False)
class MsgVoteResponse(betterproto2.Message):
    """
    MsgVoteResponse defines the Msg/Vote response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "MsgVoteResponse", MsgVoteResponse
)


@dataclass(eq=False, repr=False)
class MsgVoteWeighted(betterproto2.Message):
    """
    MsgVoteWeighted defines a message to cast a vote.

    Since: cosmos-sdk 0.43
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    voter: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    voter is the voter address for the proposal.
    """

    options: "list[WeightedVoteOption]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    options defines the weighted vote options.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "MsgVoteWeighted", MsgVoteWeighted
)


@dataclass(eq=False, repr=False)
class MsgVoteWeightedResponse(betterproto2.Message):
    """
    MsgVoteWeightedResponse defines the Msg/VoteWeighted response type.

    Since: cosmos-sdk 0.43
    """

    pass


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "MsgVoteWeightedResponse", MsgVoteWeightedResponse
)


@dataclass(eq=False, repr=False)
class Proposal(betterproto2.Message):
    """
    Proposal defines the core field members of a governance proposal.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    content: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    content is the proposal's content.
    """

    status: "ProposalStatus" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ProposalStatus(0)
    )
    """
    status defines the proposal status.
    """

    final_tally_result: "TallyResult | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    final_tally_result is the final tally result of the proposal. When
    querying a proposal via gRPC, this field is not populated until the
    proposal's voting period has ended.
    """

    submit_time: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    submit_time is the time of proposal submission.
    """

    deposit_end_time: "datetime.datetime | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    deposit_end_time is the end time for deposition.
    """

    total_deposit: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    total_deposit is the total deposit on the proposal.
    """

    voting_start_time: "datetime.datetime | None" = betterproto2.field(
        8,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    voting_start_time is the starting time to vote on a proposal.
    """

    voting_end_time: "datetime.datetime | None" = betterproto2.field(
        9,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    voting_end_time is the end time of voting on a proposal.
    """


default_message_pool.register_message("cosmos.gov.v1beta1", "Proposal", Proposal)


@dataclass(eq=False, repr=False)
class QueryDepositRequest(betterproto2.Message):
    """
    QueryDepositRequest is the request type for the Query/Deposit RPC method.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    depositor: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    depositor defines the deposit addresses from the proposals.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryDepositRequest", QueryDepositRequest
)


@dataclass(eq=False, repr=False)
class QueryDepositResponse(betterproto2.Message):
    """
    QueryDepositResponse is the response type for the Query/Deposit RPC method.
    """

    deposit: "Deposit | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    deposit defines the requested deposit.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryDepositResponse", QueryDepositResponse
)


@dataclass(eq=False, repr=False)
class QueryDepositsRequest(betterproto2.Message):
    """
    QueryDepositsRequest is the request type for the Query/Deposits RPC method.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryDepositsRequest", QueryDepositsRequest
)


@dataclass(eq=False, repr=False)
class QueryDepositsResponse(betterproto2.Message):
    """
    QueryDepositsResponse is the response type for the Query/Deposits RPC method.
    """

    deposits: "list[Deposit]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    deposits defines the requested deposits.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryDepositsResponse", QueryDepositsResponse
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    params_type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    params_type defines which parameters to query for, can be one of "voting",
    "tallying" or "deposit".
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    voting_params: "VotingParams | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    voting_params defines the parameters related to voting.
    """

    deposit_params: "DepositParams | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    deposit_params defines the parameters related to deposit.
    """

    tally_params: "TallyParams | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    tally_params defines the parameters related to tally.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


@dataclass(eq=False, repr=False)
class QueryProposalRequest(betterproto2.Message):
    """
    QueryProposalRequest is the request type for the Query/Proposal RPC method.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryProposalRequest", QueryProposalRequest
)


@dataclass(eq=False, repr=False)
class QueryProposalResponse(betterproto2.Message):
    """
    QueryProposalResponse is the response type for the Query/Proposal RPC method.
    """

    proposal: "Proposal | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryProposalResponse", QueryProposalResponse
)


@dataclass(eq=False, repr=False)
class QueryProposalsRequest(betterproto2.Message):
    """
    QueryProposalsRequest is the request type for the Query/Proposals RPC method.
    """

    proposal_status: "ProposalStatus" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ProposalStatus(0)
    )
    """
    proposal_status defines the status of the proposals.
    """

    voter: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    voter defines the voter address for the proposals.
    """

    depositor: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    depositor defines the deposit addresses from the proposals.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryProposalsRequest", QueryProposalsRequest
)


@dataclass(eq=False, repr=False)
class QueryProposalsResponse(betterproto2.Message):
    """
    QueryProposalsResponse is the response type for the Query/Proposals RPC
    method.
    """

    proposals: "list[Proposal]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    proposals defines all the requested governance proposals.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryProposalsResponse", QueryProposalsResponse
)


@dataclass(eq=False, repr=False)
class QueryTallyResultRequest(betterproto2.Message):
    """
    QueryTallyResultRequest is the request type for the Query/Tally RPC method.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryTallyResultRequest", QueryTallyResultRequest
)


@dataclass(eq=False, repr=False)
class QueryTallyResultResponse(betterproto2.Message):
    """
    QueryTallyResultResponse is the response type for the Query/Tally RPC method.
    """

    tally: "TallyResult | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    tally defines the requested tally.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryTallyResultResponse", QueryTallyResultResponse
)


@dataclass(eq=False, repr=False)
class QueryVoteRequest(betterproto2.Message):
    """
    QueryVoteRequest is the request type for the Query/Vote RPC method.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    voter: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    voter defines the voter address for the proposals.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryVoteRequest", QueryVoteRequest
)


@dataclass(eq=False, repr=False)
class QueryVoteResponse(betterproto2.Message):
    """
    QueryVoteResponse is the response type for the Query/Vote RPC method.
    """

    vote: "Vote | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    vote defines the queried vote.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryVoteResponse", QueryVoteResponse
)


@dataclass(eq=False, repr=False)
class QueryVotesRequest(betterproto2.Message):
    """
    QueryVotesRequest is the request type for the Query/Votes RPC method.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryVotesRequest", QueryVotesRequest
)


@dataclass(eq=False, repr=False)
class QueryVotesResponse(betterproto2.Message):
    """
    QueryVotesResponse is the response type for the Query/Votes RPC method.
    """

    votes: "list[Vote]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    votes defines the queried votes.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "QueryVotesResponse", QueryVotesResponse
)


@dataclass(eq=False, repr=False)
class TallyParams(betterproto2.Message):
    """
    TallyParams defines the params for tallying votes on governance proposals.
    """

    quorum: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    Minimum percentage of total stake needed to vote for a result to be
    considered valid.
    """

    threshold: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
    """

    veto_threshold: "bytes" = betterproto2.field(3, betterproto2.TYPE_BYTES)
    """
    Minimum value of Veto votes to Total votes ratio for proposal to be
    vetoed. Default value: 1/3.
    """


default_message_pool.register_message("cosmos.gov.v1beta1", "TallyParams", TallyParams)


@dataclass(eq=False, repr=False)
class TallyResult(betterproto2.Message):
    """
    TallyResult defines a standard tally for a governance proposal.
    """

    yes: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    yes is the number of yes votes on a proposal.
    """

    abstain: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    abstain is the number of abstain votes on a proposal.
    """

    no: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    no is the number of no votes on a proposal.
    """

    no_with_veto: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    no_with_veto is the number of no with veto votes on a proposal.
    """


default_message_pool.register_message("cosmos.gov.v1beta1", "TallyResult", TallyResult)


@dataclass(eq=False, repr=False)
class TextProposal(betterproto2.Message):
    """
    TextProposal defines a standard text proposal whose changes need to be
    manually updated in case of approval.
    """

    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    title of the proposal.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    description associated with the proposal.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "TextProposal", TextProposal
)


@dataclass(eq=False, repr=False)
class Vote(betterproto2.Message):
    """
    Vote defines a vote on a governance proposal.
    A Vote consists of a proposal ID, the voter, and the vote option.
    """

    proposal_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    proposal_id defines the unique id of the proposal.
    """

    voter: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    voter is the voter address of the proposal.
    """

    option: "VoteOption" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: VoteOption(0)
    )
    """
    Deprecated: Prefer to use `options` instead. This field is set in queries
    if and only if `len(options) == 1` and that option has weight 1. In all
    other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
    """

    options: "list[WeightedVoteOption]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    options is the weighted vote options.

    Since: cosmos-sdk 0.43
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("option"):
            warnings.warn("Vote.option is deprecated", DeprecationWarning)


default_message_pool.register_message("cosmos.gov.v1beta1", "Vote", Vote)


@dataclass(eq=False, repr=False)
class VotingParams(betterproto2.Message):
    """
    VotingParams defines the params for voting on governance proposals.
    """

    voting_period: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    Duration of the voting period.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "VotingParams", VotingParams
)


@dataclass(eq=False, repr=False)
class WeightedVoteOption(betterproto2.Message):
    """
    WeightedVoteOption defines a unit of vote for vote split.

    Since: cosmos-sdk 0.43
    """

    option: "VoteOption" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: VoteOption(0)
    )
    """
    option defines the valid vote options, it must not contain duplicate vote options.
    """

    weight: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    weight is the vote weight associated with the vote option.
    """


default_message_pool.register_message(
    "cosmos.gov.v1beta1", "WeightedVoteOption", WeightedVoteOption
)


class MsgStub:
    """
    Msg defines the gov Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def submit_proposal(
        self, message: "MsgSubmitProposal"
    ) -> "MsgSubmitProposalResponse":
        """
        SubmitProposal defines a method to create new proposal given a content.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Msg/SubmitProposal",
            MsgSubmitProposal.SerializeToString,
            MsgSubmitProposalResponse.FromString,
        )(message)

    def vote(self, message: "MsgVote") -> "MsgVoteResponse":
        """
        Vote defines a method to add a vote on a specific proposal.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Msg/Vote",
            MsgVote.SerializeToString,
            MsgVoteResponse.FromString,
        )(message)

    def vote_weighted(self, message: "MsgVoteWeighted") -> "MsgVoteWeightedResponse":
        """
        VoteWeighted defines a method to add a weighted vote on a specific proposal.

        Since: cosmos-sdk 0.43
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Msg/VoteWeighted",
            MsgVoteWeighted.SerializeToString,
            MsgVoteWeightedResponse.FromString,
        )(message)

    def deposit(self, message: "MsgDeposit") -> "MsgDepositResponse":
        """
        Deposit defines a method to add deposit on a specific proposal.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Msg/Deposit",
            MsgDeposit.SerializeToString,
            MsgDepositResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the gov Msg service.
    """

    async def submit_proposal(
        self,
        message: "MsgSubmitProposal",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgSubmitProposalResponse":
        """
        SubmitProposal defines a method to create new proposal given a content.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/SubmitProposal",
            message,
            MsgSubmitProposalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vote(
        self,
        message: "MsgVote",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgVoteResponse":
        """
        Vote defines a method to add a vote on a specific proposal.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/Vote",
            message,
            MsgVoteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vote_weighted(
        self,
        message: "MsgVoteWeighted",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgVoteWeightedResponse":
        """
        VoteWeighted defines a method to add a weighted vote on a specific proposal.

        Since: cosmos-sdk 0.43
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/VoteWeighted",
            message,
            MsgVoteWeightedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit(
        self,
        message: "MsgDeposit",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgDepositResponse":
        """
        Deposit defines a method to add deposit on a specific proposal.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Msg/Deposit",
            message,
            MsgDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service for gov module
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def proposal(self, message: "QueryProposalRequest") -> "QueryProposalResponse":
        """
        Proposal queries proposal details based on ProposalID.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/Proposal",
            QueryProposalRequest.SerializeToString,
            QueryProposalResponse.FromString,
        )(message)

    def proposals(self, message: "QueryProposalsRequest") -> "QueryProposalsResponse":
        """
        Proposals queries all proposals based on given status.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/Proposals",
            QueryProposalsRequest.SerializeToString,
            QueryProposalsResponse.FromString,
        )(message)

    def vote(self, message: "QueryVoteRequest") -> "QueryVoteResponse":
        """
        Vote queries voted information based on proposalID, voterAddr.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/Vote",
            QueryVoteRequest.SerializeToString,
            QueryVoteResponse.FromString,
        )(message)

    def votes(self, message: "QueryVotesRequest") -> "QueryVotesResponse":
        """
        Votes queries votes of a given proposal.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/Votes",
            QueryVotesRequest.SerializeToString,
            QueryVotesResponse.FromString,
        )(message)

    def params(self, message: "QueryParamsRequest") -> "QueryParamsResponse":
        """
        Params queries all parameters of the gov module.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def deposit(self, message: "QueryDepositRequest") -> "QueryDepositResponse":
        """
        Deposit queries single deposit information based on proposalID, depositor address.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/Deposit",
            QueryDepositRequest.SerializeToString,
            QueryDepositResponse.FromString,
        )(message)

    def deposits(self, message: "QueryDepositsRequest") -> "QueryDepositsResponse":
        """
        Deposits queries all deposits of a single proposal.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/Deposits",
            QueryDepositsRequest.SerializeToString,
            QueryDepositsResponse.FromString,
        )(message)

    def tally_result(
        self, message: "QueryTallyResultRequest"
    ) -> "QueryTallyResultResponse":
        """
        TallyResult queries the tally of a proposal vote.
        """

        return self._channel.unary_unary(
            "/cosmos.gov.v1beta1.Query/TallyResult",
            QueryTallyResultRequest.SerializeToString,
            QueryTallyResultResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service for gov module
    """

    async def proposal(
        self,
        message: "QueryProposalRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryProposalResponse":
        """
        Proposal queries proposal details based on ProposalID.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/Proposal",
            message,
            QueryProposalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def proposals(
        self,
        message: "QueryProposalsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryProposalsResponse":
        """
        Proposals queries all proposals based on given status.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/Proposals",
            message,
            QueryProposalsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vote(
        self,
        message: "QueryVoteRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryVoteResponse":
        """
        Vote queries voted information based on proposalID, voterAddr.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/Vote",
            message,
            QueryVoteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def votes(
        self,
        message: "QueryVotesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryVotesResponse":
        """
        Votes queries votes of a given proposal.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/Votes",
            message,
            QueryVotesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        message: "QueryParamsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params queries all parameters of the gov module.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit(
        self,
        message: "QueryDepositRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDepositResponse":
        """
        Deposit queries single deposit information based on proposalID, depositor address.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/Deposit",
            message,
            QueryDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposits(
        self,
        message: "QueryDepositsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDepositsResponse":
        """
        Deposits queries all deposits of a single proposal.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/Deposits",
            message,
            QueryDepositsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tally_result(
        self,
        message: "QueryTallyResultRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTallyResultResponse":
        """
        TallyResult queries the tally of a proposal vote.
        """

        return await self._unary_unary(
            "/cosmos.gov.v1beta1.Query/TallyResult",
            message,
            QueryTallyResultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...base import v1beta1 as __base__v1beta1__
from ...base.query import v1beta1 as __base__query__v1beta1__
