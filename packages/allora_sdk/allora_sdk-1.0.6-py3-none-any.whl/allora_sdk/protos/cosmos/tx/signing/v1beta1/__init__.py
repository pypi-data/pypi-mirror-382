# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/tx/signing/v1beta1/signing.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "SignMode",
    "SignatureDescriptor",
    "SignatureDescriptorData",
    "SignatureDescriptorDataMulti",
    "SignatureDescriptorDataSingle",
    "SignatureDescriptors",
)

from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class SignMode(betterproto2.Enum):
    """
    SignMode represents a signing mode with its own security guarantees.

    This enum should be considered a registry of all known sign modes
    in the Cosmos ecosystem. Apps are not expected to support all known
    sign modes. Apps that would like to support custom  sign modes are
    encouraged to open a small PR against this file to add a new case
    to this SignMode enum describing their sign mode so that different
    apps have a consistent version of this enum.
    """

    UNSPECIFIED = 0
    """
    SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
    rejected.
    """

    DIRECT = 1
    """
    SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
    verified with raw bytes from Tx.
    """

    TEXTUAL = 2
    """
    SIGN_MODE_TEXTUAL is a future signing mode that will verify some
    human-readable textual representation on top of the binary representation
    from SIGN_MODE_DIRECT.

    Since: cosmos-sdk 0.50
    """

    DIRECT_AUX = 3
    """
    SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
    SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
    require signers signing over other signers' `signer_info`.

    Since: cosmos-sdk 0.46
    """

    LEGACY_AMINO_JSON = 127
    """
    SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
    Amino JSON and will be removed in the future.
    """

    EIP_191 = 191
    """
    SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
    SDK. Ref: https://eips.ethereum.org/EIPS/eip-191

    Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
    but is not implemented on the SDK by default. To enable EIP-191, you need
    to pass a custom `TxConfig` that has an implementation of
    `SignModeHandler` for EIP-191. The SDK may decide to fully support
    EIP-191 in the future.

    Since: cosmos-sdk 0.45.2
    """

    betterproto_proto_names = {
        0: "SIGN_MODE_UNSPECIFIED",
        1: "SIGN_MODE_DIRECT",
        2: "SIGN_MODE_TEXTUAL",
        3: "SIGN_MODE_DIRECT_AUX",
        127: "SIGN_MODE_LEGACY_AMINO_JSON",
        191: "SIGN_MODE_EIP_191",
    }


@dataclass(eq=False, repr=False)
class SignatureDescriptor(betterproto2.Message):
    """
    SignatureDescriptor is a convenience type which represents the full data for
    a signature including the public key of the signer, signing modes and the
    signature itself. It is primarily used for coordinating signatures between
    clients.
    """

    public_key: "____google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    public_key is the public key of the signer
    """

    data: "SignatureDescriptorData | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    sequence: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    sequence is the sequence of the account, which describes the
    number of committed transactions signed by a given address. It is used to prevent
    replay attacks.
    """


default_message_pool.register_message(
    "cosmos.tx.signing.v1beta1", "SignatureDescriptor", SignatureDescriptor
)


@dataclass(eq=False, repr=False)
class SignatureDescriptorData(betterproto2.Message):
    """
    Data represents signature data

    Oneofs:
        - sum: sum is the oneof that specifies whether this represents single or multi-signature data
    """

    single: "SignatureDescriptorDataSingle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="sum"
    )
    """
    single represents a single signer
    """

    multi: "SignatureDescriptorDataMulti | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="sum"
    )
    """
    multi represents a multisig signer
    """


default_message_pool.register_message(
    "cosmos.tx.signing.v1beta1", "SignatureDescriptor.Data", SignatureDescriptorData
)


@dataclass(eq=False, repr=False)
class SignatureDescriptorDataMulti(betterproto2.Message):
    """
    Multi is the signature data for a multisig public key
    """

    bitarray: "___crypto__multisig__v1beta1__.CompactBitArray | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    bitarray specifies which keys within the multisig are signing
    """

    signatures: "list[SignatureDescriptorData]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    signatures is the signatures of the multi-signature
    """


default_message_pool.register_message(
    "cosmos.tx.signing.v1beta1",
    "SignatureDescriptor.Data.Multi",
    SignatureDescriptorDataMulti,
)


@dataclass(eq=False, repr=False)
class SignatureDescriptorDataSingle(betterproto2.Message):
    """
    Single is the signature data for a single signer
    """

    mode: "SignMode" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: SignMode(0)
    )
    """
    mode is the signing mode of the single signer
    """

    signature: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    signature is the raw signature bytes
    """


default_message_pool.register_message(
    "cosmos.tx.signing.v1beta1",
    "SignatureDescriptor.Data.Single",
    SignatureDescriptorDataSingle,
)


@dataclass(eq=False, repr=False)
class SignatureDescriptors(betterproto2.Message):
    """
    SignatureDescriptors wraps multiple SignatureDescriptor's.
    """

    signatures: "list[SignatureDescriptor]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    signatures are the signature descriptors
    """


default_message_pool.register_message(
    "cosmos.tx.signing.v1beta1", "SignatureDescriptors", SignatureDescriptors
)


from .....google import protobuf as ____google__protobuf__
from ....crypto.multisig import v1beta1 as ___crypto__multisig__v1beta1__
