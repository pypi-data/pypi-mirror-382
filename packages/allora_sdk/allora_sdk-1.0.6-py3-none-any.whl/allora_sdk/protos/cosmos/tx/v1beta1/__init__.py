# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/tx/v1beta1/service.proto, cosmos/tx/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AuthInfo",
    "AuxSignerData",
    "BroadcastMode",
    "BroadcastTxRequest",
    "BroadcastTxResponse",
    "Fee",
    "GetBlockWithTxsRequest",
    "GetBlockWithTxsResponse",
    "GetTxRequest",
    "GetTxResponse",
    "GetTxsEventRequest",
    "GetTxsEventResponse",
    "ModeInfo",
    "ModeInfoMulti",
    "ModeInfoSingle",
    "OrderBy",
    "ServiceAsyncStub",
    "ServiceStub",
    "SignDoc",
    "SignDocDirectAux",
    "SignerInfo",
    "SimulateRequest",
    "SimulateResponse",
    "Tip",
    "Tx",
    "TxBody",
    "TxDecodeAminoRequest",
    "TxDecodeAminoResponse",
    "TxDecodeRequest",
    "TxDecodeResponse",
    "TxEncodeAminoRequest",
    "TxEncodeAminoResponse",
    "TxEncodeRequest",
    "TxEncodeResponse",
    "TxRaw",
)

import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class BroadcastMode(betterproto2.Enum):
    """
    BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC
    method.
    """

    UNSPECIFIED = 0
    """
    zero-value for mode ordering
    """

    BLOCK = 1
    """
    DEPRECATED: use BROADCAST_MODE_SYNC instead,
    BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.
    """

    SYNC = 2
    """
    BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits
    for a CheckTx execution response only.
    """

    ASYNC = 3
    """
    BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client
    returns immediately.
    """

    betterproto_proto_names = {
        0: "BROADCAST_MODE_UNSPECIFIED",
        1: "BROADCAST_MODE_BLOCK",
        2: "BROADCAST_MODE_SYNC",
        3: "BROADCAST_MODE_ASYNC",
    }


class OrderBy(betterproto2.Enum):
    """
    OrderBy defines the sorting order
    """

    UNSPECIFIED = 0
    """
    ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults
    to ASC in this case.
    """

    ASC = 1
    """
    ORDER_BY_ASC defines ascending order
    """

    DESC = 2
    """
    ORDER_BY_DESC defines descending order
    """

    betterproto_proto_names = {
        0: "ORDER_BY_UNSPECIFIED",
        1: "ORDER_BY_ASC",
        2: "ORDER_BY_DESC",
    }


@dataclass(eq=False, repr=False)
class AuthInfo(betterproto2.Message):
    """
    AuthInfo describes the fee and signer modes that are used to sign a
    transaction.
    """

    signer_infos: "list[SignerInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    signer_infos defines the signing modes for the required signers. The number
    and order of elements must match the required signers from TxBody's
    messages. The first element is the primary signer and the one which pays
    the fee.
    """

    fee: "Fee | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Fee is the fee and gas limit for the transaction. The first signer is the
    primary signer and the one which pays the fee. The fee can be calculated
    based on the cost of evaluating the body and doing signature verification
    of the signers. This can be estimated via simulation.
    """

    tip: "Tip | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Tip is the optional tip used for transactions fees paid in another denom.

    This field is ignored if the chain didn't enable tips, i.e. didn't add the
    `TipDecorator` in its posthandler.

    Since: cosmos-sdk 0.46
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("tip"):
            warnings.warn("AuthInfo.tip is deprecated", DeprecationWarning)


default_message_pool.register_message("cosmos.tx.v1beta1", "AuthInfo", AuthInfo)


@dataclass(eq=False, repr=False)
class AuxSignerData(betterproto2.Message):
    """
    AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
    tipper) builds and sends to the fee payer (who will build and broadcast the
    actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
    by the node if sent directly as-is.

    Since: cosmos-sdk 0.46
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the bech32-encoded address of the auxiliary signer. If using
    AuxSignerData across different chains, the bech32 prefix of the target
    chain (where the final transaction is broadcasted) should be used.
    """

    sign_doc: "SignDocDirectAux | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
    signs. Note: we use the same sign doc even if we're signing with
    LEGACY_AMINO_JSON.
    """

    mode: "_signing__v1beta1__.SignMode" = betterproto2.field(
        3,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: _signing__v1beta1__.SignMode(0),
    )
    """
    mode is the signing mode of the single signer.
    """

    sig: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)
    """
    sig is the signature of the sign doc.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "AuxSignerData", AuxSignerData
)


@dataclass(eq=False, repr=False)
class BroadcastTxRequest(betterproto2.Message):
    """
    BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
    RPC method.
    """

    tx_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    tx_bytes is the raw transaction.
    """

    mode: "BroadcastMode" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: BroadcastMode(0)
    )


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "BroadcastTxRequest", BroadcastTxRequest
)


@dataclass(eq=False, repr=False)
class BroadcastTxResponse(betterproto2.Message):
    """
    BroadcastTxResponse is the response type for the
    Service.BroadcastTx method.
    """

    tx_response: "__base__abci__v1beta1__.TxResponse | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    tx_response is the queried TxResponses.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "BroadcastTxResponse", BroadcastTxResponse
)


@dataclass(eq=False, repr=False)
class Fee(betterproto2.Message):
    """
    Fee includes the amount of coins paid in fees and the maximum
    gas to be used by the transaction. The ratio yields an effective "gasprice",
    which must be above some miminum to be accepted into the mempool.
    """

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    amount is the amount of coins to be paid as a fee
    """

    gas_limit: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    gas_limit is the maximum gas that can be used in transaction processing
    before an out of gas error occurs
    """

    payer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
    the payer must be a tx signer (and thus have signed this field in AuthInfo).
    setting this field does *not* change the ordering of required signers for the transaction.
    """

    granter: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
    to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
    not support fee grants, this will fail
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "Fee", Fee)


@dataclass(eq=False, repr=False)
class GetBlockWithTxsRequest(betterproto2.Message):
    """
    GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
    RPC method.

    Since: cosmos-sdk 0.45.2
    """

    height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    height is the height of the block to query.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines a pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "GetBlockWithTxsRequest", GetBlockWithTxsRequest
)


@dataclass(eq=False, repr=False)
class GetBlockWithTxsResponse(betterproto2.Message):
    """
    GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs
    method.

    Since: cosmos-sdk 0.45.2
    """

    txs: "list[Tx]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    txs are the transactions in the block.
    """

    block_id: "___tendermint__types__.BlockId | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    block: "___tendermint__types__.Block | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines a pagination for the response.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "GetBlockWithTxsResponse", GetBlockWithTxsResponse
)


@dataclass(eq=False, repr=False)
class GetTxRequest(betterproto2.Message):
    """
    GetTxRequest is the request type for the Service.GetTx
    RPC method.
    """

    hash: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    hash is the tx hash to query, encoded as a hex string.
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "GetTxRequest", GetTxRequest)


@dataclass(eq=False, repr=False)
class GetTxResponse(betterproto2.Message):
    """
    GetTxResponse is the response type for the Service.GetTx method.
    """

    tx: "Tx | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    tx is the queried transaction.
    """

    tx_response: "__base__abci__v1beta1__.TxResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    tx_response is the queried TxResponses.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "GetTxResponse", GetTxResponse
)


@dataclass(eq=False, repr=False)
class GetTxsEventRequest(betterproto2.Message):
    """
    GetTxsEventRequest is the request type for the Service.TxsByEvents
    RPC method.
    """

    events: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    events is the list of transaction event type.
    Deprecated post v0.47.x: use query instead, which should contain a valid
    events query.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines a pagination for the request.
    Deprecated post v0.46.x: use page and limit instead.
    """

    order_by: "OrderBy" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: OrderBy(0)
    )

    page: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    page is the page number to query, starts at 1. If not provided, will
    default to first page.
    """

    limit: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)
    """
    limit is the total number of results to be returned in the result page.
    If left empty it will default to a value to be set by each app.
    """

    query: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    query defines the transaction event query that is proxied to Tendermint's
    TxSearch RPC method. The query must be valid.

    Since cosmos-sdk 0.50
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("events"):
            warnings.warn("GetTxsEventRequest.events is deprecated", DeprecationWarning)
        if self.is_set("pagination"):
            warnings.warn(
                "GetTxsEventRequest.pagination is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "GetTxsEventRequest", GetTxsEventRequest
)


@dataclass(eq=False, repr=False)
class GetTxsEventResponse(betterproto2.Message):
    """
    GetTxsEventResponse is the response type for the Service.TxsByEvents
    RPC method.
    """

    txs: "list[Tx]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    txs is the list of queried transactions.
    """

    tx_responses: "list[__base__abci__v1beta1__.TxResponse]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    tx_responses is the list of queried TxResponses.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines a pagination for the response.
    Deprecated post v0.46.x: use total instead.
    """

    total: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    total is total number of results available
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("pagination"):
            warnings.warn(
                "GetTxsEventResponse.pagination is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "GetTxsEventResponse", GetTxsEventResponse
)


@dataclass(eq=False, repr=False)
class ModeInfo(betterproto2.Message):
    """
    ModeInfo describes the signing mode of a single or nested multisig signer.

    Oneofs:
        - sum: sum is the oneof that specifies whether this represents a single or nested
            multisig signer
    """

    single: "ModeInfoSingle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="sum"
    )
    """
    single represents a single signer
    """

    multi: "ModeInfoMulti | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="sum"
    )
    """
    multi represents a nested multisig signer
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "ModeInfo", ModeInfo)


@dataclass(eq=False, repr=False)
class ModeInfoMulti(betterproto2.Message):
    """
    Multi is the mode info for a multisig public key
    """

    bitarray: "__crypto__multisig__v1beta1__.CompactBitArray | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    bitarray specifies which keys within the multisig are signing
    """

    mode_infos: "list[ModeInfo]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    mode_infos is the corresponding modes of the signers of the multisig
    which could include nested multisig public keys
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "ModeInfo.Multi", ModeInfoMulti
)


@dataclass(eq=False, repr=False)
class ModeInfoSingle(betterproto2.Message):
    """
    Single is the mode info for a single signer. It is structured as a message
    to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
    future
    """

    mode: "_signing__v1beta1__.SignMode" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: _signing__v1beta1__.SignMode(0),
    )
    """
    mode is the signing mode of the single signer
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "ModeInfo.Single", ModeInfoSingle
)


@dataclass(eq=False, repr=False)
class SignDoc(betterproto2.Message):
    """
    SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT.
    """

    body_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    body_bytes is protobuf serialization of a TxBody that matches the
    representation in TxRaw.
    """

    auth_info_bytes: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
    representation in TxRaw.
    """

    chain_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    chain_id is the unique identifier of the chain this transaction targets.
    It prevents signed transactions from being used on another chain by an
    attacker
    """

    account_number: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    account_number is the account number of the account in state
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "SignDoc", SignDoc)


@dataclass(eq=False, repr=False)
class SignDocDirectAux(betterproto2.Message):
    """
    SignDocDirectAux is the type used for generating sign bytes for
    SIGN_MODE_DIRECT_AUX.

    Since: cosmos-sdk 0.46
    """

    body_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    body_bytes is protobuf serialization of a TxBody that matches the
    representation in TxRaw.
    """

    public_key: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    public_key is the public key of the signing account.
    """

    chain_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    chain_id is the identifier of the chain this transaction targets.
    It prevents signed transactions from being used on another chain by an
    attacker.
    """

    account_number: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    account_number is the account number of the account in state.
    """

    sequence: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)
    """
    sequence is the sequence number of the signing account.
    """

    tip: "Tip | None" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    """
    tips have been depreacted and should not be used
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("tip"):
            warnings.warn("SignDocDirectAux.tip is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "SignDocDirectAux", SignDocDirectAux
)


@dataclass(eq=False, repr=False)
class SignerInfo(betterproto2.Message):
    """
    SignerInfo describes the public key and signing mode of a single top-level
    signer.
    """

    public_key: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    public_key is the public key of the signer. It is optional for accounts
    that already exist in state. If unset, the verifier can use the required \\
    signer address for this position and lookup the public key.
    """

    mode_info: "ModeInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    mode_info describes the signing mode of the signer and is a nested
    structure to support nested multisig pubkey's
    """

    sequence: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    sequence is the sequence of the account, which describes the
    number of committed transactions signed by a given address. It is used to
    prevent replay attacks.
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "SignerInfo", SignerInfo)


@dataclass(eq=False, repr=False)
class SimulateRequest(betterproto2.Message):
    """
    SimulateRequest is the request type for the Service.Simulate
    RPC method.
    """

    tx: "Tx | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    tx is the transaction to simulate.
    Deprecated. Send raw tx bytes instead.
    """

    tx_bytes: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    tx_bytes is the raw transaction.

    Since: cosmos-sdk 0.43
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("tx"):
            warnings.warn("SimulateRequest.tx is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "SimulateRequest", SimulateRequest
)


@dataclass(eq=False, repr=False)
class SimulateResponse(betterproto2.Message):
    """
    SimulateResponse is the response type for the
    Service.SimulateRPC method.
    """

    gas_info: "__base__abci__v1beta1__.GasInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    gas_info is the information about gas used in the simulation.
    """

    result: "__base__abci__v1beta1__.Result | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    result is the result of the simulation.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "SimulateResponse", SimulateResponse
)


@dataclass(eq=False, repr=False)
class Tip(betterproto2.Message):
    """
    Tip is the tip used for meta-transactions.

    Since: cosmos-sdk 0.46
    """

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    amount is the amount of the tip
    """

    tipper: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    tipper is the address of the account paying for the tip
    """

    def __post_init__(self) -> None:
        warnings.warn("Tip is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message("cosmos.tx.v1beta1", "Tip", Tip)


@dataclass(eq=False, repr=False)
class Tx(betterproto2.Message):
    """
    Tx is the standard type used for broadcasting transactions.
    """

    body: "TxBody | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    body is the processable content of the transaction
    """

    auth_info: "AuthInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    auth_info is the authorization related content of the transaction,
    specifically signers, signer modes and fee
    """

    signatures: "list[bytes]" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, repeated=True
    )
    """
    signatures is a list of signatures that matches the length and order of
    AuthInfo's signer_infos to allow connecting signature meta information like
    public key and signing mode by position.
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "Tx", Tx)


@dataclass(eq=False, repr=False)
class TxBody(betterproto2.Message):
    """
    TxBody is the body of a transaction that all signers sign over.
    """

    messages: "list[___google__protobuf__.Any]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    messages is a list of messages to be executed. The required signers of
    those messages define the number and order of elements in AuthInfo's
    signer_infos and Tx's signatures. Each required signer address is added to
    the list only the first time it occurs.
    By convention, the first required signer (usually from the first message)
    is referred to as the primary signer and pays the fee for the whole
    transaction.
    """

    memo: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    memo is any arbitrary note/comment to be added to the transaction.
    WARNING: in clients, any publicly exposed text should not be called memo,
    but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
    """

    timeout_height: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    timeout is the block height after which this transaction will not
    be processed by the chain
    """

    extension_options: "list[___google__protobuf__.Any]" = betterproto2.field(
        1023, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    extension_options are arbitrary options that can be added by chains
    when the default options are not sufficient. If any of these are present
    and can't be handled, the transaction will be rejected
    """

    non_critical_extension_options: "list[___google__protobuf__.Any]" = (
        betterproto2.field(2047, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    extension_options are arbitrary options that can be added by chains
    when the default options are not sufficient. If any of these are present
    and can't be handled, they will be ignored
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "TxBody", TxBody)


@dataclass(eq=False, repr=False)
class TxDecodeAminoRequest(betterproto2.Message):
    """
    TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino
    RPC method.

    Since: cosmos-sdk 0.47
    """

    amino_binary: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxDecodeAminoRequest", TxDecodeAminoRequest
)


@dataclass(eq=False, repr=False)
class TxDecodeAminoResponse(betterproto2.Message):
    """
    TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino
    RPC method.

    Since: cosmos-sdk 0.47
    """

    amino_json: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxDecodeAminoResponse", TxDecodeAminoResponse
)


@dataclass(eq=False, repr=False)
class TxDecodeRequest(betterproto2.Message):
    """
    TxDecodeRequest is the request type for the Service.TxDecode
    RPC method.

    Since: cosmos-sdk 0.47
    """

    tx_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    tx_bytes is the raw transaction.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxDecodeRequest", TxDecodeRequest
)


@dataclass(eq=False, repr=False)
class TxDecodeResponse(betterproto2.Message):
    """
    TxDecodeResponse is the response type for the
    Service.TxDecode method.

    Since: cosmos-sdk 0.47
    """

    tx: "Tx | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    tx is the decoded transaction.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxDecodeResponse", TxDecodeResponse
)


@dataclass(eq=False, repr=False)
class TxEncodeAminoRequest(betterproto2.Message):
    """
    TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino
    RPC method.

    Since: cosmos-sdk 0.47
    """

    amino_json: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxEncodeAminoRequest", TxEncodeAminoRequest
)


@dataclass(eq=False, repr=False)
class TxEncodeAminoResponse(betterproto2.Message):
    """
    TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino
    RPC method.

    Since: cosmos-sdk 0.47
    """

    amino_binary: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxEncodeAminoResponse", TxEncodeAminoResponse
)


@dataclass(eq=False, repr=False)
class TxEncodeRequest(betterproto2.Message):
    """
    TxEncodeRequest is the request type for the Service.TxEncode
    RPC method.

    Since: cosmos-sdk 0.47
    """

    tx: "Tx | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    tx is the transaction to encode.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxEncodeRequest", TxEncodeRequest
)


@dataclass(eq=False, repr=False)
class TxEncodeResponse(betterproto2.Message):
    """
    TxEncodeResponse is the response type for the
    Service.TxEncode method.

    Since: cosmos-sdk 0.47
    """

    tx_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    tx_bytes is the encoded transaction bytes.
    """


default_message_pool.register_message(
    "cosmos.tx.v1beta1", "TxEncodeResponse", TxEncodeResponse
)


@dataclass(eq=False, repr=False)
class TxRaw(betterproto2.Message):
    """
    TxRaw is a variant of Tx that pins the signer's exact binary representation
    of body and auth_info. This is used for signing, broadcasting and
    verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and
    the hash `sha256(serialize(tx: TxRaw))` becomes the "txhash", commonly used
    as the transaction ID.
    """

    body_bytes: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    body_bytes is a protobuf serialization of a TxBody that matches the
    representation in SignDoc.
    """

    auth_info_bytes: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
    representation in SignDoc.
    """

    signatures: "list[bytes]" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, repeated=True
    )
    """
    signatures is a list of signatures that matches the length and order of
    AuthInfo's signer_infos to allow connecting signature meta information like
    public key and signing mode by position.
    """


default_message_pool.register_message("cosmos.tx.v1beta1", "TxRaw", TxRaw)


class ServiceStub:
    """
    Service defines a gRPC service for interacting with transactions.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def simulate(self, message: "SimulateRequest") -> "SimulateResponse":
        """
        Simulate simulates executing a transaction for estimating gas usage.
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/Simulate",
            SimulateRequest.SerializeToString,
            SimulateResponse.FromString,
        )(message)

    def get_tx(self, message: "GetTxRequest") -> "GetTxResponse":
        """
        GetTx fetches a tx by hash.
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/GetTx",
            GetTxRequest.SerializeToString,
            GetTxResponse.FromString,
        )(message)

    def broadcast_tx(self, message: "BroadcastTxRequest") -> "BroadcastTxResponse":
        """
        BroadcastTx broadcast transaction.
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/BroadcastTx",
            BroadcastTxRequest.SerializeToString,
            BroadcastTxResponse.FromString,
        )(message)

    def get_txs_event(self, message: "GetTxsEventRequest") -> "GetTxsEventResponse":
        """
        GetTxsEvent fetches txs by event.
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/GetTxsEvent",
            GetTxsEventRequest.SerializeToString,
            GetTxsEventResponse.FromString,
        )(message)

    def get_block_with_txs(
        self, message: "GetBlockWithTxsRequest"
    ) -> "GetBlockWithTxsResponse":
        """
        GetBlockWithTxs fetches a block with decoded txs.

        Since: cosmos-sdk 0.45.2
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/GetBlockWithTxs",
            GetBlockWithTxsRequest.SerializeToString,
            GetBlockWithTxsResponse.FromString,
        )(message)

    def tx_decode(self, message: "TxDecodeRequest") -> "TxDecodeResponse":
        """
        TxDecode decodes the transaction.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/TxDecode",
            TxDecodeRequest.SerializeToString,
            TxDecodeResponse.FromString,
        )(message)

    def tx_encode(self, message: "TxEncodeRequest") -> "TxEncodeResponse":
        """
        TxEncode encodes the transaction.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/TxEncode",
            TxEncodeRequest.SerializeToString,
            TxEncodeResponse.FromString,
        )(message)

    def tx_encode_amino(
        self, message: "TxEncodeAminoRequest"
    ) -> "TxEncodeAminoResponse":
        """
        TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/TxEncodeAmino",
            TxEncodeAminoRequest.SerializeToString,
            TxEncodeAminoResponse.FromString,
        )(message)

    def tx_decode_amino(
        self, message: "TxDecodeAminoRequest"
    ) -> "TxDecodeAminoResponse":
        """
        TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.tx.v1beta1.Service/TxDecodeAmino",
            TxDecodeAminoRequest.SerializeToString,
            TxDecodeAminoResponse.FromString,
        )(message)


class ServiceAsyncStub(betterproto2.ServiceStub):
    """
    Service defines a gRPC service for interacting with transactions.
    """

    async def simulate(
        self,
        message: "SimulateRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "SimulateResponse":
        """
        Simulate simulates executing a transaction for estimating gas usage.
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/Simulate",
            message,
            SimulateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_tx(
        self,
        message: "GetTxRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTxResponse":
        """
        GetTx fetches a tx by hash.
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/GetTx",
            message,
            GetTxResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def broadcast_tx(
        self,
        message: "BroadcastTxRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BroadcastTxResponse":
        """
        BroadcastTx broadcast transaction.
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/BroadcastTx",
            message,
            BroadcastTxResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_txs_event(
        self,
        message: "GetTxsEventRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTxsEventResponse":
        """
        GetTxsEvent fetches txs by event.
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/GetTxsEvent",
            message,
            GetTxsEventResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_block_with_txs(
        self,
        message: "GetBlockWithTxsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetBlockWithTxsResponse":
        """
        GetBlockWithTxs fetches a block with decoded txs.

        Since: cosmos-sdk 0.45.2
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/GetBlockWithTxs",
            message,
            GetBlockWithTxsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tx_decode(
        self,
        message: "TxDecodeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "TxDecodeResponse":
        """
        TxDecode decodes the transaction.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/TxDecode",
            message,
            TxDecodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tx_encode(
        self,
        message: "TxEncodeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "TxEncodeResponse":
        """
        TxEncode encodes the transaction.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/TxEncode",
            message,
            TxEncodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tx_encode_amino(
        self,
        message: "TxEncodeAminoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "TxEncodeAminoResponse":
        """
        TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/TxEncodeAmino",
            message,
            TxEncodeAminoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tx_decode_amino(
        self,
        message: "TxDecodeAminoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "TxDecodeAminoResponse":
        """
        TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.tx.v1beta1.Service/TxDecodeAmino",
            message,
            TxDecodeAminoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ....tendermint import types as ___tendermint__types__
from ...base import v1beta1 as __base__v1beta1__
from ...base.abci import v1beta1 as __base__abci__v1beta1__
from ...base.query import v1beta1 as __base__query__v1beta1__
from ...crypto.multisig import v1beta1 as __crypto__multisig__v1beta1__
from ..signing import v1beta1 as _signing__v1beta1__
