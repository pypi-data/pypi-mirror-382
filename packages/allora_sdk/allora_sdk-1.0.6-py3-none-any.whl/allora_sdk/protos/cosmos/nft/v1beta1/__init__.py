# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/nft/v1beta1/event.proto, cosmos/nft/v1beta1/genesis.proto, cosmos/nft/v1beta1/nft.proto, cosmos/nft/v1beta1/query.proto, cosmos/nft/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Class",
    "Entry",
    "EventBurn",
    "EventMint",
    "EventSend",
    "GenesisState",
    "MsgAsyncStub",
    "MsgSend",
    "MsgSendResponse",
    "MsgStub",
    "Nft",
    "QueryAsyncStub",
    "QueryBalanceRequest",
    "QueryBalanceResponse",
    "QueryClassRequest",
    "QueryClassResponse",
    "QueryClassesRequest",
    "QueryClassesResponse",
    "QueryNfTsRequest",
    "QueryNfTsResponse",
    "QueryNftRequest",
    "QueryNftResponse",
    "QueryOwnerRequest",
    "QueryOwnerResponse",
    "QueryStub",
    "QuerySupplyRequest",
    "QuerySupplyResponse",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Class(betterproto2.Message):
    """
    Class defines the class of the nft type.
    """

    id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
    """

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    name defines the human-readable name of the NFT classification. Optional
    """

    symbol: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    symbol is an abbreviated name for nft classification. Optional
    """

    description: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    description is a brief description of nft classification. Optional
    """

    uri: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
    """

    uri_hash: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    uri_hash is a hash of the document pointed by uri. Optional
    """

    data: "___google__protobuf__.Any | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    data is the app specific metadata of the NFT class. Optional
    """


default_message_pool.register_message("cosmos.nft.v1beta1", "Class", Class)


@dataclass(eq=False, repr=False)
class Entry(betterproto2.Message):
    """
    Entry Defines all nft owned by a person
    """

    owner: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    owner is the owner address of the following nft
    """

    nfts: "list[Nft]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    nfts is a group of nfts of the same owner
    """


default_message_pool.register_message("cosmos.nft.v1beta1", "Entry", Entry)


@dataclass(eq=False, repr=False)
class EventBurn(betterproto2.Message):
    """
    EventBurn is emitted on Burn
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """

    id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    id is a unique identifier of the nft
    """

    owner: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    owner is the owner address of the nft
    """


default_message_pool.register_message("cosmos.nft.v1beta1", "EventBurn", EventBurn)


@dataclass(eq=False, repr=False)
class EventMint(betterproto2.Message):
    """
    EventMint is emitted on Mint
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """

    id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    id is a unique identifier of the nft
    """

    owner: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    owner is the owner address of the nft
    """


default_message_pool.register_message("cosmos.nft.v1beta1", "EventMint", EventMint)


@dataclass(eq=False, repr=False)
class EventSend(betterproto2.Message):
    """
    EventSend is emitted on Msg/Send
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """

    id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    id is a unique identifier of the nft
    """

    sender: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    sender is the address of the owner of nft
    """

    receiver: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    receiver is the receiver address of nft
    """


default_message_pool.register_message("cosmos.nft.v1beta1", "EventSend", EventSend)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the nft module's genesis state.
    """

    classes: "list[Class]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    class defines the class of the nft type.
    """

    entries: "list[Entry]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    entry defines all nft owned by a person.
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class MsgSend(betterproto2.Message):
    """
    MsgSend represents a message to send a nft from one account to another account.
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id defines the unique identifier of the nft classification, similar to the contract address of ERC721
    """

    id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    id defines the unique identification of nft
    """

    sender: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    sender is the address of the owner of nft
    """

    receiver: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    receiver is the receiver address of nft
    """


default_message_pool.register_message("cosmos.nft.v1beta1", "MsgSend", MsgSend)


@dataclass(eq=False, repr=False)
class MsgSendResponse(betterproto2.Message):
    """
    MsgSendResponse defines the Msg/Send response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "MsgSendResponse", MsgSendResponse
)


@dataclass(eq=False, repr=False)
class Nft(betterproto2.Message):
    """
    NFT defines the NFT.
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the NFT, similar to the contract address of ERC721
    """

    id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    id is a unique identifier of the NFT
    """

    uri: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    uri for the NFT metadata stored off chain
    """

    uri_hash: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    uri_hash is a hash of the document pointed by uri
    """

    data: "___google__protobuf__.Any | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    data is an app specific data of the NFT. Optional
    """


default_message_pool.register_message("cosmos.nft.v1beta1", "NFT", Nft)


@dataclass(eq=False, repr=False)
class QueryBalanceRequest(betterproto2.Message):
    """
    QueryBalanceRequest is the request type for the Query/Balance RPC method
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """

    owner: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    owner is the owner address of the nft
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryBalanceRequest", QueryBalanceRequest
)


@dataclass(eq=False, repr=False)
class QueryBalanceResponse(betterproto2.Message):
    """
    QueryBalanceResponse is the response type for the Query/Balance RPC method
    """

    amount: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    amount is the number of all NFTs of a given class owned by the owner
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryBalanceResponse", QueryBalanceResponse
)


@dataclass(eq=False, repr=False)
class QueryClassesRequest(betterproto2.Message):
    """
    QueryClassesRequest is the request type for the Query/Classes RPC method
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryClassesRequest", QueryClassesRequest
)


@dataclass(eq=False, repr=False)
class QueryClassesResponse(betterproto2.Message):
    """
    QueryClassesResponse is the response type for the Query/Classes RPC method
    """

    classes: "list[Class]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    class defines the class of the nft type.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryClassesResponse", QueryClassesResponse
)


@dataclass(eq=False, repr=False)
class QueryClassRequest(betterproto2.Message):
    """
    QueryClassRequest is the request type for the Query/Class RPC method
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryClassRequest", QueryClassRequest
)


@dataclass(eq=False, repr=False)
class QueryClassResponse(betterproto2.Message):
    """
    QueryClassResponse is the response type for the Query/Class RPC method
    """

    class_: "Class | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    class defines the class of the nft type.
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryClassResponse", QueryClassResponse
)


@dataclass(eq=False, repr=False)
class QueryNftRequest(betterproto2.Message):
    """
    QueryNFTRequest is the request type for the Query/NFT RPC method
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """

    id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    id is a unique identifier of the NFT
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryNFTRequest", QueryNftRequest
)


@dataclass(eq=False, repr=False)
class QueryNftResponse(betterproto2.Message):
    """
    QueryNFTResponse is the response type for the Query/NFT RPC method
    """

    nft: "Nft | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    owner is the owner address of the nft
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryNFTResponse", QueryNftResponse
)


@dataclass(eq=False, repr=False)
class QueryNfTsRequest(betterproto2.Message):
    """
    QueryNFTstRequest is the request type for the Query/NFTs RPC method
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """

    owner: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    owner is the owner address of the nft
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryNFTsRequest", QueryNfTsRequest
)


@dataclass(eq=False, repr=False)
class QueryNfTsResponse(betterproto2.Message):
    """
    QueryNFTsResponse is the response type for the Query/NFTs RPC methods
    """

    nfts: "list[Nft]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    NFT defines the NFT
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryNFTsResponse", QueryNfTsResponse
)


@dataclass(eq=False, repr=False)
class QueryOwnerRequest(betterproto2.Message):
    """
    QueryOwnerRequest is the request type for the Query/Owner RPC method
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """

    id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    id is a unique identifier of the NFT
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryOwnerRequest", QueryOwnerRequest
)


@dataclass(eq=False, repr=False)
class QueryOwnerResponse(betterproto2.Message):
    """
    QueryOwnerResponse is the response type for the Query/Owner RPC method
    """

    owner: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    owner is the owner address of the nft
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QueryOwnerResponse", QueryOwnerResponse
)


@dataclass(eq=False, repr=False)
class QuerySupplyRequest(betterproto2.Message):
    """
    QuerySupplyRequest is the request type for the Query/Supply RPC method
    """

    class_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    class_id associated with the nft
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QuerySupplyRequest", QuerySupplyRequest
)


@dataclass(eq=False, repr=False)
class QuerySupplyResponse(betterproto2.Message):
    """
    QuerySupplyResponse is the response type for the Query/Supply RPC method
    """

    amount: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    amount is the number of all NFTs from the given class
    """


default_message_pool.register_message(
    "cosmos.nft.v1beta1", "QuerySupplyResponse", QuerySupplyResponse
)


class MsgStub:
    """
    Msg defines the nft Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def send(self, message: "MsgSend") -> "MsgSendResponse":
        """
        Send defines a method to send a nft from one account to another account.
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Msg/Send",
            MsgSend.SerializeToString,
            MsgSendResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the nft Msg service.
    """

    async def send(
        self,
        message: "MsgSend",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgSendResponse":
        """
        Send defines a method to send a nft from one account to another account.
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Msg/Send",
            message,
            MsgSendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def balance(self, message: "QueryBalanceRequest") -> "QueryBalanceResponse":
        """
        Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Query/Balance",
            QueryBalanceRequest.SerializeToString,
            QueryBalanceResponse.FromString,
        )(message)

    def owner(self, message: "QueryOwnerRequest") -> "QueryOwnerResponse":
        """
        Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Query/Owner",
            QueryOwnerRequest.SerializeToString,
            QueryOwnerResponse.FromString,
        )(message)

    def supply(self, message: "QuerySupplyRequest") -> "QuerySupplyResponse":
        """
        Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Query/Supply",
            QuerySupplyRequest.SerializeToString,
            QuerySupplyResponse.FromString,
        )(message)

    def nf_ts(self, message: "QueryNfTsRequest") -> "QueryNfTsResponse":
        """
        NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
        ERC721Enumerable
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Query/NFTs",
            QueryNfTsRequest.SerializeToString,
            QueryNfTsResponse.FromString,
        )(message)

    def nft(self, message: "QueryNftRequest") -> "QueryNftResponse":
        """
        NFT queries an NFT based on its class and id.
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Query/NFT",
            QueryNftRequest.SerializeToString,
            QueryNftResponse.FromString,
        )(message)

    def class_(self, message: "QueryClassRequest") -> "QueryClassResponse":
        """
        Class queries an NFT class based on its id
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Query/Class",
            QueryClassRequest.SerializeToString,
            QueryClassResponse.FromString,
        )(message)

    def classes(self, message: "QueryClassesRequest") -> "QueryClassesResponse":
        """
        Classes queries all NFT classes
        """

        return self._channel.unary_unary(
            "/cosmos.nft.v1beta1.Query/Classes",
            QueryClassesRequest.SerializeToString,
            QueryClassesResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def balance(
        self,
        message: "QueryBalanceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryBalanceResponse":
        """
        Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Query/Balance",
            message,
            QueryBalanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def owner(
        self,
        message: "QueryOwnerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryOwnerResponse":
        """
        Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Query/Owner",
            message,
            QueryOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def supply(
        self,
        message: "QuerySupplyRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySupplyResponse":
        """
        Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Query/Supply",
            message,
            QuerySupplyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def nf_ts(
        self,
        message: "QueryNfTsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryNfTsResponse":
        """
        NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
        ERC721Enumerable
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Query/NFTs",
            message,
            QueryNfTsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def nft(
        self,
        message: "QueryNftRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryNftResponse":
        """
        NFT queries an NFT based on its class and id.
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Query/NFT",
            message,
            QueryNftResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def class_(
        self,
        message: "QueryClassRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryClassResponse":
        """
        Class queries an NFT class based on its id
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Query/Class",
            message,
            QueryClassResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def classes(
        self,
        message: "QueryClassesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryClassesResponse":
        """
        Classes queries all NFT classes
        """

        return await self._unary_unary(
            "/cosmos.nft.v1beta1.Query/Classes",
            message,
            QueryClassesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...base.query import v1beta1 as __base__query__v1beta1__
