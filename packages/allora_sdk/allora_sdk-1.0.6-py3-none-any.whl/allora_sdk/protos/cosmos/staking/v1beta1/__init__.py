# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/staking/v1beta1/authz.proto, cosmos/staking/v1beta1/genesis.proto, cosmos/staking/v1beta1/query.proto, cosmos/staking/v1beta1/staking.proto, cosmos/staking/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AuthorizationType",
    "BondStatus",
    "Commission",
    "CommissionRates",
    "Delegation",
    "DelegationResponse",
    "Description",
    "DvPair",
    "DvPairs",
    "DvvTriplet",
    "DvvTriplets",
    "GenesisState",
    "HistoricalInfo",
    "Infraction",
    "LastValidatorPower",
    "MsgAsyncStub",
    "MsgBeginRedelegate",
    "MsgBeginRedelegateResponse",
    "MsgCancelUnbondingDelegation",
    "MsgCancelUnbondingDelegationResponse",
    "MsgCreateValidator",
    "MsgCreateValidatorResponse",
    "MsgDelegate",
    "MsgDelegateResponse",
    "MsgEditValidator",
    "MsgEditValidatorResponse",
    "MsgStub",
    "MsgUndelegate",
    "MsgUndelegateResponse",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "Params",
    "Pool",
    "QueryAsyncStub",
    "QueryDelegationRequest",
    "QueryDelegationResponse",
    "QueryDelegatorDelegationsRequest",
    "QueryDelegatorDelegationsResponse",
    "QueryDelegatorUnbondingDelegationsRequest",
    "QueryDelegatorUnbondingDelegationsResponse",
    "QueryDelegatorValidatorRequest",
    "QueryDelegatorValidatorResponse",
    "QueryDelegatorValidatorsRequest",
    "QueryDelegatorValidatorsResponse",
    "QueryHistoricalInfoRequest",
    "QueryHistoricalInfoResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryPoolRequest",
    "QueryPoolResponse",
    "QueryRedelegationsRequest",
    "QueryRedelegationsResponse",
    "QueryStub",
    "QueryUnbondingDelegationRequest",
    "QueryUnbondingDelegationResponse",
    "QueryValidatorDelegationsRequest",
    "QueryValidatorDelegationsResponse",
    "QueryValidatorRequest",
    "QueryValidatorResponse",
    "QueryValidatorUnbondingDelegationsRequest",
    "QueryValidatorUnbondingDelegationsResponse",
    "QueryValidatorsRequest",
    "QueryValidatorsResponse",
    "Redelegation",
    "RedelegationEntry",
    "RedelegationEntryResponse",
    "RedelegationResponse",
    "StakeAuthorization",
    "StakeAuthorizationValidators",
    "UnbondingDelegation",
    "UnbondingDelegationEntry",
    "ValAddresses",
    "Validator",
    "ValidatorUpdates",
)

import datetime
import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class AuthorizationType(betterproto2.Enum):
    """
    AuthorizationType defines the type of staking module authorization type

    Since: cosmos-sdk 0.43
    """

    UNSPECIFIED = 0
    """
    AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
    """

    DELEGATE = 1
    """
    AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
    """

    UNDELEGATE = 2
    """
    AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
    """

    REDELEGATE = 3
    """
    AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
    """

    CANCEL_UNBONDING_DELEGATION = 4
    """
    AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION defines an authorization type for Msg/MsgCancelUnbondingDelegation
    """

    betterproto_proto_names = {
        0: "AUTHORIZATION_TYPE_UNSPECIFIED",
        1: "AUTHORIZATION_TYPE_DELEGATE",
        2: "AUTHORIZATION_TYPE_UNDELEGATE",
        3: "AUTHORIZATION_TYPE_REDELEGATE",
        4: "AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION",
    }


class BondStatus(betterproto2.Enum):
    """
    BondStatus is the status of a validator.
    """

    UNSPECIFIED = 0
    """
    UNSPECIFIED defines an invalid validator status.
    """

    UNBONDED = 1
    """
    UNBONDED defines a validator that is not bonded.
    """

    UNBONDING = 2
    """
    UNBONDING defines a validator that is unbonding.
    """

    BONDED = 3
    """
    BONDED defines a validator that is bonded.
    """

    betterproto_proto_names = {
        0: "BOND_STATUS_UNSPECIFIED",
        1: "BOND_STATUS_UNBONDED",
        2: "BOND_STATUS_UNBONDING",
        3: "BOND_STATUS_BONDED",
    }


class Infraction(betterproto2.Enum):
    """
    Infraction indicates the infraction a validator commited.
    """

    UNSPECIFIED = 0
    """
    UNSPECIFIED defines an empty infraction.
    """

    DOUBLE_SIGN = 1
    """
    DOUBLE_SIGN defines a validator that double-signs a block.
    """

    DOWNTIME = 2
    """
    DOWNTIME defines a validator that missed signing too many blocks.
    """

    betterproto_proto_names = {
        0: "INFRACTION_UNSPECIFIED",
        1: "INFRACTION_DOUBLE_SIGN",
        2: "INFRACTION_DOWNTIME",
    }


@dataclass(eq=False, repr=False)
class Commission(betterproto2.Message):
    """
    Commission defines commission parameters for a given validator.
    """

    commission_rates: "CommissionRates | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    commission_rates defines the initial commission rates to be used for creating a validator.
    """

    update_time: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    update_time is the last time the commission rate was changed.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "Commission", Commission
)


@dataclass(eq=False, repr=False)
class CommissionRates(betterproto2.Message):
    """
    CommissionRates defines the initial commission rates to be used for creating
    a validator.
    """

    rate: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    rate is the commission rate charged to delegators, as a fraction.
    """

    max_rate: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
    """

    max_change_rate: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "CommissionRates", CommissionRates
)


@dataclass(eq=False, repr=False)
class Delegation(betterproto2.Message):
    """
    Delegation represents the bond with tokens held by an account. It is
    owned by one delegator, and is associated with the voting power of one
    validator.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address is the encoded address of the delegator.
    """

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_address is the encoded address of the validator.
    """

    shares: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    shares define the delegation shares received.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "Delegation", Delegation
)


@dataclass(eq=False, repr=False)
class DelegationResponse(betterproto2.Message):
    """
    DelegationResponse is equivalent to Delegation except that it contains a
    balance in addition to shares which is more suitable for client responses.
    """

    delegation: "Delegation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    balance: "__base__v1beta1__.Coin | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "DelegationResponse", DelegationResponse
)


@dataclass(eq=False, repr=False)
class Description(betterproto2.Message):
    """
    Description defines a validator description.
    """

    moniker: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    moniker defines a human-readable name for the validator.
    """

    identity: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    identity defines an optional identity signature (ex. UPort or Keybase).
    """

    website: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    website defines an optional website link.
    """

    security_contact: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    security_contact defines an optional email for security contact.
    """

    details: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    details define other optional details.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "Description", Description
)


@dataclass(eq=False, repr=False)
class DvPair(betterproto2.Message):
    """
    DVPair is struct that just has a delegator-validator pair with no other data.
    It is intended to be used as a marshalable pointer. For example, a DVPair can
    be used to construct the key to getting an UnbondingDelegation from state.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("cosmos.staking.v1beta1", "DVPair", DvPair)


@dataclass(eq=False, repr=False)
class DvPairs(betterproto2.Message):
    """
    DVPairs defines an array of DVPair objects.
    """

    pairs: "list[DvPair]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("cosmos.staking.v1beta1", "DVPairs", DvPairs)


@dataclass(eq=False, repr=False)
class DvvTriplet(betterproto2.Message):
    """
    DVVTriplet is struct that just has a delegator-validator-validator triplet
    with no other data. It is intended to be used as a marshalable pointer. For
    example, a DVVTriplet can be used to construct the key to getting a
    Redelegation from state.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_src_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    validator_dst_address: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "DVVTriplet", DvvTriplet
)


@dataclass(eq=False, repr=False)
class DvvTriplets(betterproto2.Message):
    """
    DVVTriplets defines an array of DVVTriplet objects.
    """

    triplets: "list[DvvTriplet]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "DVVTriplets", DvvTriplets
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the staking module's genesis state.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of related to deposit.
    """

    last_total_power: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    last_total_power tracks the total amounts of bonded tokens recorded during
    the previous end block.
    """

    last_validator_powers: "list[LastValidatorPower]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    last_validator_powers is a special index that provides a historical list
    of the last-block's bonded validators.
    """

    validators: "list[Validator]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    validators defines the validator set at genesis.
    """

    delegations: "list[Delegation]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    delegations defines the delegations active at genesis.
    """

    unbonding_delegations: "list[UnbondingDelegation]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    unbonding_delegations defines the unbonding delegations active at genesis.
    """

    redelegations: "list[Redelegation]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    redelegations defines the redelegations active at genesis.
    """

    exported: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    exported defines a bool to identify whether the chain dealing with exported or initialized genesis.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class HistoricalInfo(betterproto2.Message):
    """
    HistoricalInfo contains header and validator information for a given block.
    It is stored as part of staking module's state, which persists the `n` most
    recent HistoricalInfo
    (`n` is set by the staking module's `historical_entries` parameter).
    """

    header: "___tendermint__types__.Header | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    valset: "list[Validator]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "HistoricalInfo", HistoricalInfo
)


@dataclass(eq=False, repr=False)
class LastValidatorPower(betterproto2.Message):
    """
    LastValidatorPower required for validator set update logic.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the address of the validator.
    """

    power: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    power defines the power of the validator.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "LastValidatorPower", LastValidatorPower
)


@dataclass(eq=False, repr=False)
class MsgBeginRedelegate(betterproto2.Message):
    """
    MsgBeginRedelegate defines a SDK message for performing a redelegation
    of coins from a delegator and source validator to a destination validator.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_src_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    validator_dst_address: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "__base__v1beta1__.Coin | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgBeginRedelegate", MsgBeginRedelegate
)


@dataclass(eq=False, repr=False)
class MsgBeginRedelegateResponse(betterproto2.Message):
    """
    MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
    """

    completion_time: "datetime.datetime | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgBeginRedelegateResponse", MsgBeginRedelegateResponse
)


@dataclass(eq=False, repr=False)
class MsgCancelUnbondingDelegation(betterproto2.Message):
    """
    MsgCancelUnbondingDelegation defines the SDK message for performing a cancel unbonding delegation for delegator

    Since: cosmos-sdk 0.46
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    amount: "__base__v1beta1__.Coin | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    amount is always less than or equal to unbonding delegation entry balance
    """

    creation_height: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)
    """
    creation_height is the height which the unbonding took place.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "MsgCancelUnbondingDelegation",
    MsgCancelUnbondingDelegation,
)


@dataclass(eq=False, repr=False)
class MsgCancelUnbondingDelegationResponse(betterproto2.Message):
    """
    MsgCancelUnbondingDelegationResponse

    Since: cosmos-sdk 0.46
    """

    pass


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "MsgCancelUnbondingDelegationResponse",
    MsgCancelUnbondingDelegationResponse,
)


@dataclass(eq=False, repr=False)
class MsgCreateValidator(betterproto2.Message):
    """
    MsgCreateValidator defines a SDK message for creating a new validator.
    """

    description: "Description | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    commission: "CommissionRates | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    min_self_delegation: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    delegator_address: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Deprecated: Use of Delegator Address in MsgCreateValidator is deprecated.
    The validator address bytes and delegator address bytes refer to the same account while creating validator (defer
    only in bech32 notation).
    """

    validator_address: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    pubkey: "___google__protobuf__.Any | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "__base__v1beta1__.Coin | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("delegator_address"):
            warnings.warn(
                "MsgCreateValidator.delegator_address is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgCreateValidator", MsgCreateValidator
)


@dataclass(eq=False, repr=False)
class MsgCreateValidatorResponse(betterproto2.Message):
    """
    MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgCreateValidatorResponse", MsgCreateValidatorResponse
)


@dataclass(eq=False, repr=False)
class MsgDelegate(betterproto2.Message):
    """
    MsgDelegate defines a SDK message for performing a delegation of coins
    from a delegator to a validator.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    amount: "__base__v1beta1__.Coin | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgDelegate", MsgDelegate
)


@dataclass(eq=False, repr=False)
class MsgDelegateResponse(betterproto2.Message):
    """
    MsgDelegateResponse defines the Msg/Delegate response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgDelegateResponse", MsgDelegateResponse
)


@dataclass(eq=False, repr=False)
class MsgEditValidator(betterproto2.Message):
    """
    MsgEditValidator defines a SDK message for editing an existing validator.
    """

    description: "Description | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    commission_rate: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    We pass a reference to the new commission rate and min self delegation as
    it's not mandatory to update. If not updated, the deserialized rate will be
    zero with no way to distinguish if an update was intended.
    REF: #2373
    """

    min_self_delegation: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgEditValidator", MsgEditValidator
)


@dataclass(eq=False, repr=False)
class MsgEditValidatorResponse(betterproto2.Message):
    """
    MsgEditValidatorResponse defines the Msg/EditValidator response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgEditValidatorResponse", MsgEditValidatorResponse
)


@dataclass(eq=False, repr=False)
class MsgUndelegate(betterproto2.Message):
    """
    MsgUndelegate defines a SDK message for performing an undelegation from a
    delegate and a validator.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    amount: "__base__v1beta1__.Coin | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgUndelegate", MsgUndelegate
)


@dataclass(eq=False, repr=False)
class MsgUndelegateResponse(betterproto2.Message):
    """
    MsgUndelegateResponse defines the Msg/Undelegate response type.
    """

    completion_time: "datetime.datetime | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )

    amount: "__base__v1beta1__.Coin | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    amount returns the amount of undelegated coins

    Since: cosmos-sdk 0.50
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgUndelegateResponse", MsgUndelegateResponse
)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/staking parameters to update.

    NOTE: All parameters must be supplied.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters for the x/staking module.
    """

    unbonding_time: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    unbonding_time is the time duration of unbonding.
    """

    max_validators: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    max_validators is the maximum number of validators.
    """

    max_entries: "int" = betterproto2.field(3, betterproto2.TYPE_UINT32)
    """
    max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
    """

    historical_entries: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    historical_entries is the number of historical entries to persist.
    """

    bond_denom: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    bond_denom defines the bondable coin denomination.
    """

    min_commission_rate: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
    """


default_message_pool.register_message("cosmos.staking.v1beta1", "Params", Params)


@dataclass(eq=False, repr=False)
class Pool(betterproto2.Message):
    """
    Pool is used for tracking bonded and not-bonded token supply of the bond
    denomination.
    """

    not_bonded_tokens: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    bonded_tokens: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("cosmos.staking.v1beta1", "Pool", Pool)


@dataclass(eq=False, repr=False)
class QueryDelegationRequest(betterproto2.Message):
    """
    QueryDelegationRequest is request type for the Query/Delegation RPC method.
    """

    delegator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_addr defines the delegator address to query for.
    """

    validator_addr: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_addr defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryDelegationRequest", QueryDelegationRequest
)


@dataclass(eq=False, repr=False)
class QueryDelegationResponse(betterproto2.Message):
    """
    QueryDelegationResponse is response type for the Query/Delegation RPC method.
    """

    delegation_response: "DelegationResponse | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    delegation_responses defines the delegation info of a delegation.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryDelegationResponse", QueryDelegationResponse
)


@dataclass(eq=False, repr=False)
class QueryDelegatorDelegationsRequest(betterproto2.Message):
    """
    QueryDelegatorDelegationsRequest is request type for the
    Query/DelegatorDelegations RPC method.
    """

    delegator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_addr defines the delegator address to query for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorDelegationsRequest",
    QueryDelegatorDelegationsRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorDelegationsResponse(betterproto2.Message):
    """
    QueryDelegatorDelegationsResponse is response type for the
    Query/DelegatorDelegations RPC method.
    """

    delegation_responses: "list[DelegationResponse]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    delegation_responses defines all the delegations' info of a delegator.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorDelegationsResponse",
    QueryDelegatorDelegationsResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorUnbondingDelegationsRequest(betterproto2.Message):
    """
    QueryDelegatorUnbondingDelegationsRequest is request type for the
    Query/DelegatorUnbondingDelegations RPC method.
    """

    delegator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_addr defines the delegator address to query for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorUnbondingDelegationsRequest",
    QueryDelegatorUnbondingDelegationsRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorUnbondingDelegationsResponse(betterproto2.Message):
    """
    QueryUnbondingDelegatorDelegationsResponse is response type for the
    Query/UnbondingDelegatorDelegations RPC method.
    """

    unbonding_responses: "list[UnbondingDelegation]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorUnbondingDelegationsResponse",
    QueryDelegatorUnbondingDelegationsResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorValidatorRequest(betterproto2.Message):
    """
    QueryDelegatorValidatorRequest is request type for the
    Query/DelegatorValidator RPC method.
    """

    delegator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_addr defines the delegator address to query for.
    """

    validator_addr: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_addr defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorValidatorRequest",
    QueryDelegatorValidatorRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorValidatorResponse(betterproto2.Message):
    """
    QueryDelegatorValidatorResponse response type for the
    Query/DelegatorValidator RPC method.
    """

    validator: "Validator | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    validator defines the validator info.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorValidatorResponse",
    QueryDelegatorValidatorResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorValidatorsRequest(betterproto2.Message):
    """
    QueryDelegatorValidatorsRequest is request type for the
    Query/DelegatorValidators RPC method.
    """

    delegator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_addr defines the delegator address to query for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorValidatorsRequest",
    QueryDelegatorValidatorsRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorValidatorsResponse(betterproto2.Message):
    """
    QueryDelegatorValidatorsResponse is response type for the
    Query/DelegatorValidators RPC method.
    """

    validators: "list[Validator]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    validators defines the validators' info of a delegator.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryDelegatorValidatorsResponse",
    QueryDelegatorValidatorsResponse,
)


@dataclass(eq=False, repr=False)
class QueryHistoricalInfoRequest(betterproto2.Message):
    """
    QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
    method.
    """

    height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    height defines at which height to query the historical info.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryHistoricalInfoRequest", QueryHistoricalInfoRequest
)


@dataclass(eq=False, repr=False)
class QueryHistoricalInfoResponse(betterproto2.Message):
    """
    QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
    method.
    """

    hist: "HistoricalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    hist defines the historical info at the given height.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryHistoricalInfoResponse", QueryHistoricalInfoResponse
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is request type for the Query/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params holds all the parameters of this module.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


@dataclass(eq=False, repr=False)
class QueryPoolRequest(betterproto2.Message):
    """
    QueryPoolRequest is request type for the Query/Pool RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryPoolRequest", QueryPoolRequest
)


@dataclass(eq=False, repr=False)
class QueryPoolResponse(betterproto2.Message):
    """
    QueryPoolResponse is response type for the Query/Pool RPC method.
    """

    pool: "Pool | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pool defines the pool info.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryPoolResponse", QueryPoolResponse
)


@dataclass(eq=False, repr=False)
class QueryRedelegationsRequest(betterproto2.Message):
    """
    QueryRedelegationsRequest is request type for the Query/Redelegations RPC
    method.
    """

    delegator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_addr defines the delegator address to query for.
    """

    src_validator_addr: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    src_validator_addr defines the validator address to redelegate from.
    """

    dst_validator_addr: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    dst_validator_addr defines the validator address to redelegate to.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryRedelegationsRequest", QueryRedelegationsRequest
)


@dataclass(eq=False, repr=False)
class QueryRedelegationsResponse(betterproto2.Message):
    """
    QueryRedelegationsResponse is response type for the Query/Redelegations RPC
    method.
    """

    redelegation_responses: "list[RedelegationResponse]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryRedelegationsResponse", QueryRedelegationsResponse
)


@dataclass(eq=False, repr=False)
class QueryUnbondingDelegationRequest(betterproto2.Message):
    """
    QueryUnbondingDelegationRequest is request type for the
    Query/UnbondingDelegation RPC method.
    """

    delegator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_addr defines the delegator address to query for.
    """

    validator_addr: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_addr defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryUnbondingDelegationRequest",
    QueryUnbondingDelegationRequest,
)


@dataclass(eq=False, repr=False)
class QueryUnbondingDelegationResponse(betterproto2.Message):
    """
    QueryDelegationResponse is response type for the Query/UnbondingDelegation
    RPC method.
    """

    unbond: "UnbondingDelegation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    unbond defines the unbonding information of a delegation.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryUnbondingDelegationResponse",
    QueryUnbondingDelegationResponse,
)


@dataclass(eq=False, repr=False)
class QueryValidatorDelegationsRequest(betterproto2.Message):
    """
    QueryValidatorDelegationsRequest is request type for the
    Query/ValidatorDelegations RPC method
    """

    validator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_addr defines the validator address to query for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryValidatorDelegationsRequest",
    QueryValidatorDelegationsRequest,
)


@dataclass(eq=False, repr=False)
class QueryValidatorDelegationsResponse(betterproto2.Message):
    """
    QueryValidatorDelegationsResponse is response type for the
    Query/ValidatorDelegations RPC method
    """

    delegation_responses: "list[DelegationResponse]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryValidatorDelegationsResponse",
    QueryValidatorDelegationsResponse,
)


@dataclass(eq=False, repr=False)
class QueryValidatorRequest(betterproto2.Message):
    """
    QueryValidatorRequest is response type for the Query/Validator RPC method
    """

    validator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_addr defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryValidatorRequest", QueryValidatorRequest
)


@dataclass(eq=False, repr=False)
class QueryValidatorResponse(betterproto2.Message):
    """
    QueryValidatorResponse is response type for the Query/Validator RPC method
    """

    validator: "Validator | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    validator defines the validator info.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryValidatorResponse", QueryValidatorResponse
)


@dataclass(eq=False, repr=False)
class QueryValidatorsRequest(betterproto2.Message):
    """
    QueryValidatorsRequest is request type for Query/Validators RPC method.
    """

    status: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    status enables to query for validators matching a given status.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryValidatorsRequest", QueryValidatorsRequest
)


@dataclass(eq=False, repr=False)
class QueryValidatorsResponse(betterproto2.Message):
    """
    QueryValidatorsResponse is response type for the Query/Validators RPC method
    """

    validators: "list[Validator]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    validators contains all the queried validators.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "QueryValidatorsResponse", QueryValidatorsResponse
)


@dataclass(eq=False, repr=False)
class QueryValidatorUnbondingDelegationsRequest(betterproto2.Message):
    """
    QueryValidatorUnbondingDelegationsRequest is required type for the
    Query/ValidatorUnbondingDelegations RPC method
    """

    validator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_addr defines the validator address to query for.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryValidatorUnbondingDelegationsRequest",
    QueryValidatorUnbondingDelegationsRequest,
)


@dataclass(eq=False, repr=False)
class QueryValidatorUnbondingDelegationsResponse(betterproto2.Message):
    """
    QueryValidatorUnbondingDelegationsResponse is response type for the
    Query/ValidatorUnbondingDelegations RPC method.
    """

    unbonding_responses: "list[UnbondingDelegation]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "QueryValidatorUnbondingDelegationsResponse",
    QueryValidatorUnbondingDelegationsResponse,
)


@dataclass(eq=False, repr=False)
class Redelegation(betterproto2.Message):
    """
    Redelegation contains the list of a particular delegator's redelegating bonds
    from a particular source validator to a particular destination validator.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address is the bech32-encoded address of the delegator.
    """

    validator_src_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_src_address is the validator redelegation source operator address.
    """

    validator_dst_address: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    validator_dst_address is the validator redelegation destination operator address.
    """

    entries: "list[RedelegationEntry]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    entries are the redelegation entries.

    redelegation entries
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "Redelegation", Redelegation
)


@dataclass(eq=False, repr=False)
class RedelegationEntry(betterproto2.Message):
    """
    RedelegationEntry defines a redelegation object with relevant metadata.
    """

    creation_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    creation_height  defines the height which the redelegation took place.
    """

    completion_time: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    completion_time defines the unix time for redelegation completion.
    """

    initial_balance: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    initial_balance defines the initial balance when redelegation started.
    """

    shares_dst: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    shares_dst is the amount of destination-validator shares created by redelegation.
    """

    unbonding_id: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)
    """
    Incrementing id that uniquely identifies this entry
    """

    unbonding_on_hold_ref_count: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)
    """
    Strictly positive if this entry's unbonding has been stopped by external modules
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "RedelegationEntry", RedelegationEntry
)


@dataclass(eq=False, repr=False)
class RedelegationEntryResponse(betterproto2.Message):
    """
    RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
    contains a balance in addition to shares which is more suitable for client
    responses.
    """

    redelegation_entry: "RedelegationEntry | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    balance: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "RedelegationEntryResponse", RedelegationEntryResponse
)


@dataclass(eq=False, repr=False)
class RedelegationResponse(betterproto2.Message):
    """
    RedelegationResponse is equivalent to a Redelegation except that its entries
    contain a balance in addition to shares which is more suitable for client
    responses.
    """

    redelegation: "Redelegation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    entries: "list[RedelegationEntryResponse]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "RedelegationResponse", RedelegationResponse
)


@dataclass(eq=False, repr=False)
class StakeAuthorization(betterproto2.Message):
    """
    StakeAuthorization defines authorization for delegate/undelegate/redelegate.

    Since: cosmos-sdk 0.43

    Oneofs:
        - validators: validators is the oneof that represents either allow_list or deny_list
    """

    max_tokens: "__base__v1beta1__.Coin | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
    empty, there is no spend limit and any amount of coins can be delegated.
    """

    allow_list: "StakeAuthorizationValidators | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="validators"
    )
    """
    allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
    account.
    """

    deny_list: "StakeAuthorizationValidators | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="validators"
    )
    """
    deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
    """

    authorization_type: "AuthorizationType" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: AuthorizationType(0)
    )
    """
    authorization_type defines one of AuthorizationType.
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "StakeAuthorization", StakeAuthorization
)


@dataclass(eq=False, repr=False)
class StakeAuthorizationValidators(betterproto2.Message):
    """
    Validators defines list of validator addresses.
    """

    address: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1",
    "StakeAuthorization.Validators",
    StakeAuthorizationValidators,
)


@dataclass(eq=False, repr=False)
class UnbondingDelegation(betterproto2.Message):
    """
    UnbondingDelegation stores all of a single delegator's unbonding bonds
    for a single validator in an time-ordered list.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address is the encoded address of the delegator.
    """

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_address is the encoded address of the validator.
    """

    entries: "list[UnbondingDelegationEntry]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    entries are the unbonding delegation entries.

    unbonding delegation entries
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "UnbondingDelegation", UnbondingDelegation
)


@dataclass(eq=False, repr=False)
class UnbondingDelegationEntry(betterproto2.Message):
    """
    UnbondingDelegationEntry defines an unbonding object with relevant metadata.
    """

    creation_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    creation_height is the height which the unbonding took place.
    """

    completion_time: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    completion_time is the unix time for unbonding completion.
    """

    initial_balance: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    initial_balance defines the tokens initially scheduled to receive at completion.
    """

    balance: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    balance defines the tokens to receive at completion.
    """

    unbonding_id: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)
    """
    Incrementing id that uniquely identifies this entry
    """

    unbonding_on_hold_ref_count: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)
    """
    Strictly positive if this entry's unbonding has been stopped by external modules
    """


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "UnbondingDelegationEntry", UnbondingDelegationEntry
)


@dataclass(eq=False, repr=False)
class ValAddresses(betterproto2.Message):
    """
    ValAddresses defines a repeated set of validator addresses.
    """

    addresses: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "ValAddresses", ValAddresses
)


@dataclass(eq=False, repr=False)
class Validator(betterproto2.Message):
    """
    Validator defines a validator, together with the total amount of the
    Validator's bond shares and their exchange rate to coins. Slashing results in
    a decrease in the exchange rate, allowing correct calculation of future
    undelegations without iterating over delegators. When coins are delegated to
    this validator, the validator is credited with a delegation whose number of
    bond shares is based on the amount of coins delegated divided by the current
    exchange rate. Voting power can be calculated as total bonded shares
    multiplied by exchange rate.
    """

    operator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    operator_address defines the address of the validator's operator; bech encoded in JSON.
    """

    consensus_pubkey: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
    """

    jailed: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    jailed defined whether the validator has been jailed from bonded status or not.
    """

    status: "BondStatus" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: BondStatus(0)
    )
    """
    status is the validator status (bonded/unbonding/unbonded).
    """

    tokens: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    tokens define the delegated tokens (incl. self-delegation).
    """

    delegator_shares: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    delegator_shares defines total shares issued to a validator's delegators.
    """

    description: "Description | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    description defines the description terms for the validator.
    """

    unbonding_height: "int" = betterproto2.field(8, betterproto2.TYPE_INT64)
    """
    unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
    """

    unbonding_time: "datetime.datetime | None" = betterproto2.field(
        9,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
    """

    commission: "Commission | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    commission defines the commission parameters.
    """

    min_self_delegation: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)
    """
    min_self_delegation is the validator's self declared minimum self delegation.

    Since: cosmos-sdk 0.46
    """

    unbonding_on_hold_ref_count: "int" = betterproto2.field(12, betterproto2.TYPE_INT64)
    """
    strictly positive if this validator's unbonding has been stopped by external modules
    """

    unbonding_ids: "list[int]" = betterproto2.field(
        13, betterproto2.TYPE_UINT64, repeated=True
    )
    """
    list of unbonding ids, each uniquely identifing an unbonding of this validator
    """


default_message_pool.register_message("cosmos.staking.v1beta1", "Validator", Validator)


@dataclass(eq=False, repr=False)
class ValidatorUpdates(betterproto2.Message):
    """
    ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
    TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
    """

    updates: "list[___tendermint__abci__.ValidatorUpdate]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.staking.v1beta1", "ValidatorUpdates", ValidatorUpdates
)


class MsgStub:
    """
    Msg defines the staking Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def create_validator(
        self, message: "MsgCreateValidator"
    ) -> "MsgCreateValidatorResponse":
        """
        CreateValidator defines a method for creating a new validator.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Msg/CreateValidator",
            MsgCreateValidator.SerializeToString,
            MsgCreateValidatorResponse.FromString,
        )(message)

    def edit_validator(self, message: "MsgEditValidator") -> "MsgEditValidatorResponse":
        """
        EditValidator defines a method for editing an existing validator.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Msg/EditValidator",
            MsgEditValidator.SerializeToString,
            MsgEditValidatorResponse.FromString,
        )(message)

    def delegate(self, message: "MsgDelegate") -> "MsgDelegateResponse":
        """
        Delegate defines a method for performing a delegation of coins
        from a delegator to a validator.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Msg/Delegate",
            MsgDelegate.SerializeToString,
            MsgDelegateResponse.FromString,
        )(message)

    def begin_redelegate(
        self, message: "MsgBeginRedelegate"
    ) -> "MsgBeginRedelegateResponse":
        """
        BeginRedelegate defines a method for performing a redelegation
        of coins from a delegator and source validator to a destination validator.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
            MsgBeginRedelegate.SerializeToString,
            MsgBeginRedelegateResponse.FromString,
        )(message)

    def undelegate(self, message: "MsgUndelegate") -> "MsgUndelegateResponse":
        """
        Undelegate defines a method for performing an undelegation from a
        delegate and a validator.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Msg/Undelegate",
            MsgUndelegate.SerializeToString,
            MsgUndelegateResponse.FromString,
        )(message)

    def cancel_unbonding_delegation(
        self, message: "MsgCancelUnbondingDelegation"
    ) -> "MsgCancelUnbondingDelegationResponse":
        """
        CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
        and delegate back to previous validator.

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation",
            MsgCancelUnbondingDelegation.SerializeToString,
            MsgCancelUnbondingDelegationResponse.FromString,
        )(message)

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines an operation for updating the x/staking module
        parameters.
        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the staking Msg service.
    """

    async def create_validator(
        self,
        message: "MsgCreateValidator",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgCreateValidatorResponse":
        """
        CreateValidator defines a method for creating a new validator.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/CreateValidator",
            message,
            MsgCreateValidatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def edit_validator(
        self,
        message: "MsgEditValidator",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgEditValidatorResponse":
        """
        EditValidator defines a method for editing an existing validator.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/EditValidator",
            message,
            MsgEditValidatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegate(
        self,
        message: "MsgDelegate",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgDelegateResponse":
        """
        Delegate defines a method for performing a delegation of coins
        from a delegator to a validator.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/Delegate",
            message,
            MsgDelegateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def begin_redelegate(
        self,
        message: "MsgBeginRedelegate",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgBeginRedelegateResponse":
        """
        BeginRedelegate defines a method for performing a redelegation
        of coins from a delegator and source validator to a destination validator.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
            message,
            MsgBeginRedelegateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def undelegate(
        self,
        message: "MsgUndelegate",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUndelegateResponse":
        """
        Undelegate defines a method for performing an undelegation from a
        delegate and a validator.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/Undelegate",
            message,
            MsgUndelegateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_unbonding_delegation(
        self,
        message: "MsgCancelUnbondingDelegation",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgCancelUnbondingDelegationResponse":
        """
        CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
        and delegate back to previous validator.

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation",
            message,
            MsgCancelUnbondingDelegationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines an operation for updating the x/staking module
        parameters.
        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def validators(
        self, message: "QueryValidatorsRequest"
    ) -> "QueryValidatorsResponse":
        """
        Validators queries all validators that match the given status.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/Validators",
            QueryValidatorsRequest.SerializeToString,
            QueryValidatorsResponse.FromString,
        )(message)

    def validator(self, message: "QueryValidatorRequest") -> "QueryValidatorResponse":
        """
        Validator queries validator info for given validator address.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/Validator",
            QueryValidatorRequest.SerializeToString,
            QueryValidatorResponse.FromString,
        )(message)

    def validator_delegations(
        self, message: "QueryValidatorDelegationsRequest"
    ) -> "QueryValidatorDelegationsResponse":
        """
        ValidatorDelegations queries delegate info for given validator.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/ValidatorDelegations",
            QueryValidatorDelegationsRequest.SerializeToString,
            QueryValidatorDelegationsResponse.FromString,
        )(message)

    def validator_unbonding_delegations(
        self, message: "QueryValidatorUnbondingDelegationsRequest"
    ) -> "QueryValidatorUnbondingDelegationsResponse":
        """
        ValidatorUnbondingDelegations queries unbonding delegations of a validator.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations",
            QueryValidatorUnbondingDelegationsRequest.SerializeToString,
            QueryValidatorUnbondingDelegationsResponse.FromString,
        )(message)

    def delegation(
        self, message: "QueryDelegationRequest"
    ) -> "QueryDelegationResponse":
        """
        Delegation queries delegate info for given validator delegator pair.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/Delegation",
            QueryDelegationRequest.SerializeToString,
            QueryDelegationResponse.FromString,
        )(message)

    def unbonding_delegation(
        self, message: "QueryUnbondingDelegationRequest"
    ) -> "QueryUnbondingDelegationResponse":
        """
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/UnbondingDelegation",
            QueryUnbondingDelegationRequest.SerializeToString,
            QueryUnbondingDelegationResponse.FromString,
        )(message)

    def delegator_delegations(
        self, message: "QueryDelegatorDelegationsRequest"
    ) -> "QueryDelegatorDelegationsResponse":
        """
        DelegatorDelegations queries all delegations of a given delegator address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorDelegations",
            QueryDelegatorDelegationsRequest.SerializeToString,
            QueryDelegatorDelegationsResponse.FromString,
        )(message)

    def delegator_unbonding_delegations(
        self, message: "QueryDelegatorUnbondingDelegationsRequest"
    ) -> "QueryDelegatorUnbondingDelegationsResponse":
        """
        DelegatorUnbondingDelegations queries all unbonding delegations of a given
        delegator address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations",
            QueryDelegatorUnbondingDelegationsRequest.SerializeToString,
            QueryDelegatorUnbondingDelegationsResponse.FromString,
        )(message)

    def redelegations(
        self, message: "QueryRedelegationsRequest"
    ) -> "QueryRedelegationsResponse":
        """
        Redelegations queries redelegations of given address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/Redelegations",
            QueryRedelegationsRequest.SerializeToString,
            QueryRedelegationsResponse.FromString,
        )(message)

    def delegator_validators(
        self, message: "QueryDelegatorValidatorsRequest"
    ) -> "QueryDelegatorValidatorsResponse":
        """
        DelegatorValidators queries all validators info for given delegator
        address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorValidators",
            QueryDelegatorValidatorsRequest.SerializeToString,
            QueryDelegatorValidatorsResponse.FromString,
        )(message)

    def delegator_validator(
        self, message: "QueryDelegatorValidatorRequest"
    ) -> "QueryDelegatorValidatorResponse":
        """
        DelegatorValidator queries validator info for given delegator validator
        pair.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorValidator",
            QueryDelegatorValidatorRequest.SerializeToString,
            QueryDelegatorValidatorResponse.FromString,
        )(message)

    def historical_info(
        self, message: "QueryHistoricalInfoRequest"
    ) -> "QueryHistoricalInfoResponse":
        """
        HistoricalInfo queries the historical info for given height.
        """

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/HistoricalInfo",
            QueryHistoricalInfoRequest.SerializeToString,
            QueryHistoricalInfoResponse.FromString,
        )(message)

    def pool(self, message: "QueryPoolRequest | None" = None) -> "QueryPoolResponse":
        """
        Pool queries the pool info.
        """

        if message is None:
            message = QueryPoolRequest()

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/Pool",
            QueryPoolRequest.SerializeToString,
            QueryPoolResponse.FromString,
        )(message)

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Parameters queries the staking parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/cosmos.staking.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def validators(
        self,
        message: "QueryValidatorsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorsResponse":
        """
        Validators queries all validators that match the given status.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Validators",
            message,
            QueryValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validator(
        self,
        message: "QueryValidatorRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorResponse":
        """
        Validator queries validator info for given validator address.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Validator",
            message,
            QueryValidatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validator_delegations(
        self,
        message: "QueryValidatorDelegationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorDelegationsResponse":
        """
        ValidatorDelegations queries delegate info for given validator.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/ValidatorDelegations",
            message,
            QueryValidatorDelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validator_unbonding_delegations(
        self,
        message: "QueryValidatorUnbondingDelegationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorUnbondingDelegationsResponse":
        """
        ValidatorUnbondingDelegations queries unbonding delegations of a validator.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations",
            message,
            QueryValidatorUnbondingDelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegation(
        self,
        message: "QueryDelegationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegationResponse":
        """
        Delegation queries delegate info for given validator delegator pair.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Delegation",
            message,
            QueryDelegationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unbonding_delegation(
        self,
        message: "QueryUnbondingDelegationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryUnbondingDelegationResponse":
        """
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/UnbondingDelegation",
            message,
            QueryUnbondingDelegationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegator_delegations(
        self,
        message: "QueryDelegatorDelegationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegatorDelegationsResponse":
        """
        DelegatorDelegations queries all delegations of a given delegator address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorDelegations",
            message,
            QueryDelegatorDelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegator_unbonding_delegations(
        self,
        message: "QueryDelegatorUnbondingDelegationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegatorUnbondingDelegationsResponse":
        """
        DelegatorUnbondingDelegations queries all unbonding delegations of a given
        delegator address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations",
            message,
            QueryDelegatorUnbondingDelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def redelegations(
        self,
        message: "QueryRedelegationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryRedelegationsResponse":
        """
        Redelegations queries redelegations of given address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Redelegations",
            message,
            QueryRedelegationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegator_validators(
        self,
        message: "QueryDelegatorValidatorsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegatorValidatorsResponse":
        """
        DelegatorValidators queries all validators info for given delegator
        address.

        When called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorValidators",
            message,
            QueryDelegatorValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegator_validator(
        self,
        message: "QueryDelegatorValidatorRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegatorValidatorResponse":
        """
        DelegatorValidator queries validator info for given delegator validator
        pair.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorValidator",
            message,
            QueryDelegatorValidatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def historical_info(
        self,
        message: "QueryHistoricalInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryHistoricalInfoResponse":
        """
        HistoricalInfo queries the historical info for given height.
        """

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/HistoricalInfo",
            message,
            QueryHistoricalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pool(
        self,
        message: "QueryPoolRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryPoolResponse":
        """
        Pool queries the pool info.
        """

        if message is None:
            message = QueryPoolRequest()

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Pool",
            message,
            QueryPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Parameters queries the staking parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ....tendermint import abci as ___tendermint__abci__
from ....tendermint import types as ___tendermint__types__
from ...base import v1beta1 as __base__v1beta1__
from ...base.query import v1beta1 as __base__query__v1beta1__
