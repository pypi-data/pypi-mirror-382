# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/base/abci/v1beta1/abci.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AbciMessageLog",
    "Attribute",
    "GasInfo",
    "MsgData",
    "Result",
    "SearchBlocksResult",
    "SearchTxsResult",
    "SimulationResponse",
    "StringEvent",
    "TxMsgData",
    "TxResponse",
)

import warnings
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class AbciMessageLog(betterproto2.Message):
    """
    ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
    """

    msg_index: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    log: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    events: "list[StringEvent]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Events contains a slice of Event objects that were emitted during some
    execution.
    """


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "ABCIMessageLog", AbciMessageLog
)


@dataclass(eq=False, repr=False)
class Attribute(betterproto2.Message):
    """
    Attribute defines an attribute wrapper where the key and value are
    strings instead of raw bytes.
    """

    key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "Attribute", Attribute
)


@dataclass(eq=False, repr=False)
class GasInfo(betterproto2.Message):
    """
    GasInfo defines tx execution gas context.
    """

    gas_wanted: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    GasWanted is the maximum units of work we allow this tx to perform.
    """

    gas_used: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    GasUsed is the amount of gas actually consumed.
    """


default_message_pool.register_message("cosmos.base.abci.v1beta1", "GasInfo", GasInfo)


@dataclass(eq=False, repr=False)
class MsgData(betterproto2.Message):
    """
    MsgData defines the data returned in a Result object during message
    execution.
    """

    msg_type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    data: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    def __post_init__(self) -> None:
        warnings.warn("MsgData is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message("cosmos.base.abci.v1beta1", "MsgData", MsgData)


@dataclass(eq=False, repr=False)
class Result(betterproto2.Message):
    """
    Result is the union of ResponseFormat and ResponseCheckTx.
    """

    data: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    Data is any data returned from message or handler execution. It MUST be
    length prefixed in order to separate data from multiple message executions.
    Deprecated. This field is still populated, but prefer msg_response instead
    because it also contains the Msg response typeURL.
    """

    log: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Log contains the log information from message or handler execution.
    """

    events: "list[____tendermint__abci__.Event]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Events contains a slice of Event objects that were emitted during message
    or handler execution.
    """

    msg_responses: "list[____google__protobuf__.Any]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    msg_responses contains the Msg handler responses type packed in Anys.

    Since: cosmos-sdk 0.46
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("data"):
            warnings.warn("Result.data is deprecated", DeprecationWarning)


default_message_pool.register_message("cosmos.base.abci.v1beta1", "Result", Result)


@dataclass(eq=False, repr=False)
class SearchBlocksResult(betterproto2.Message):
    """
    SearchBlocksResult defines a structure for querying blocks pageable
    """

    total_count: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Count of all blocks
    """

    count: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    Count of blocks in current page
    """

    page_number: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)
    """
    Index of current page, start from 1
    """

    page_total: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)
    """
    Count of total pages
    """

    limit: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)
    """
    Max count blocks per page
    """

    blocks: "list[____tendermint__types__.Block]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of blocks in current page
    """


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "SearchBlocksResult", SearchBlocksResult
)


@dataclass(eq=False, repr=False)
class SearchTxsResult(betterproto2.Message):
    """
    SearchTxsResult defines a structure for querying txs pageable
    """

    total_count: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    Count of all txs
    """

    count: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    Count of txs in current page
    """

    page_number: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    Index of current page, start from 1
    """

    page_total: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    Count of total pages
    """

    limit: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)
    """
    Max count txs per page
    """

    txs: "list[TxResponse]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of txs in current page
    """


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "SearchTxsResult", SearchTxsResult
)


@dataclass(eq=False, repr=False)
class SimulationResponse(betterproto2.Message):
    """
    SimulationResponse defines the response generated when a transaction is
    successfully simulated.
    """

    gas_info: "GasInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    result: "Result | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "SimulationResponse", SimulationResponse
)


@dataclass(eq=False, repr=False)
class StringEvent(betterproto2.Message):
    """
    StringEvent defines en Event object wrapper where all the attributes
    contain key/value pairs that are strings instead of raw bytes.
    """

    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    attributes: "list[Attribute]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "StringEvent", StringEvent
)


@dataclass(eq=False, repr=False)
class TxMsgData(betterproto2.Message):
    """
    TxMsgData defines a list of MsgData. A transaction will have a MsgData object
    for each message.
    """

    data: "list[MsgData]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    data field is deprecated and not populated.
    """

    msg_responses: "list[____google__protobuf__.Any]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    msg_responses contains the Msg handler responses packed into Anys.

    Since: cosmos-sdk 0.46
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("data"):
            warnings.warn("TxMsgData.data is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "TxMsgData", TxMsgData
)


@dataclass(eq=False, repr=False)
class TxResponse(betterproto2.Message):
    """
    TxResponse defines a structure containing relevant tx data and metadata. The
    tags are stringified and the log is JSON decoded.
    """

    height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    The block height
    """

    txhash: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The transaction hash.
    """

    codespace: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Namespace for the Code
    """

    code: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    Response code.
    """

    data: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Result bytes, if any.
    """

    raw_log: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The output of the application's logger (raw string). May be
    non-deterministic.
    """

    logs: "list[AbciMessageLog]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The output of the application's logger (typed). May be non-deterministic.
    """

    info: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    Additional information. May be non-deterministic.
    """

    gas_wanted: "int" = betterproto2.field(9, betterproto2.TYPE_INT64)
    """
    Amount of gas requested for transaction.
    """

    gas_used: "int" = betterproto2.field(10, betterproto2.TYPE_INT64)
    """
    Amount of gas consumed by transaction.
    """

    tx: "____google__protobuf__.Any | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The request transaction bytes.
    """

    timestamp: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)
    """
    Time of the previous block. For heights > 1, it's the weighted median of
    the timestamps of the valid votes in the block.LastCommit. For height == 1,
    it's genesis time.
    """

    events: "list[____tendermint__abci__.Event]" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Events defines all the events emitted by processing a transaction. Note,
    these events include those emitted by processing all the messages and those
    emitted from the ante. Whereas Logs contains the events, with
    additional metadata, emitted only by processing the messages.

    Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
    """


default_message_pool.register_message(
    "cosmos.base.abci.v1beta1", "TxResponse", TxResponse
)


from .....google import protobuf as ____google__protobuf__
from .....tendermint import abci as ____tendermint__abci__
from .....tendermint import types as ____tendermint__types__
