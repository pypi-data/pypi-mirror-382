# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/base/node/v1beta1/query.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ConfigRequest",
    "ConfigResponse",
    "ServiceAsyncStub",
    "ServiceStub",
    "StatusRequest",
    "StatusResponse",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class ConfigRequest(betterproto2.Message):
    """
    ConfigRequest defines the request structure for the Config gRPC query.
    """

    pass


default_message_pool.register_message(
    "cosmos.base.node.v1beta1", "ConfigRequest", ConfigRequest
)


@dataclass(eq=False, repr=False)
class ConfigResponse(betterproto2.Message):
    """
    ConfigResponse defines the response structure for the Config gRPC query.
    """

    minimum_gas_price: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    pruning_keep_recent: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    pruning_interval: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    halt_height: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "cosmos.base.node.v1beta1", "ConfigResponse", ConfigResponse
)


@dataclass(eq=False, repr=False)
class StatusRequest(betterproto2.Message):
    """
    StateRequest defines the request structure for the status of a node.
    """

    pass


default_message_pool.register_message(
    "cosmos.base.node.v1beta1", "StatusRequest", StatusRequest
)


@dataclass(eq=False, repr=False)
class StatusResponse(betterproto2.Message):
    """
    StateResponse defines the response structure for the status of a node.
    """

    earliest_store_height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    earliest block height available in the store
    """

    height: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    current block height
    """

    timestamp: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Timestamp,
        optional=True,
    )
    """
    block height timestamp
    """

    app_hash: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)
    """
    app hash of the current block
    """

    validator_hash: "bytes" = betterproto2.field(5, betterproto2.TYPE_BYTES)
    """
    validator hash provided by the consensus header
    """


default_message_pool.register_message(
    "cosmos.base.node.v1beta1", "StatusResponse", StatusResponse
)


class ServiceStub:
    """
    Service defines the gRPC querier service for node related queries.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def config(self, message: "ConfigRequest | None" = None) -> "ConfigResponse":
        """
        Config queries for the operator configuration.
        """

        if message is None:
            message = ConfigRequest()

        return self._channel.unary_unary(
            "/cosmos.base.node.v1beta1.Service/Config",
            ConfigRequest.SerializeToString,
            ConfigResponse.FromString,
        )(message)

    def status(self, message: "StatusRequest | None" = None) -> "StatusResponse":
        """
        Status queries for the node status.
        """

        if message is None:
            message = StatusRequest()

        return self._channel.unary_unary(
            "/cosmos.base.node.v1beta1.Service/Status",
            StatusRequest.SerializeToString,
            StatusResponse.FromString,
        )(message)


class ServiceAsyncStub(betterproto2.ServiceStub):
    """
    Service defines the gRPC querier service for node related queries.
    """

    async def config(
        self,
        message: "ConfigRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ConfigResponse":
        """
        Config queries for the operator configuration.
        """

        if message is None:
            message = ConfigRequest()

        return await self._unary_unary(
            "/cosmos.base.node.v1beta1.Service/Config",
            message,
            ConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def status(
        self,
        message: "StatusRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "StatusResponse":
        """
        Status queries for the node status.
        """

        if message is None:
            message = StatusRequest()

        return await self._unary_unary(
            "/cosmos.base.node.v1beta1.Service/Status",
            message,
            StatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .....google import protobuf as ____google__protobuf__
