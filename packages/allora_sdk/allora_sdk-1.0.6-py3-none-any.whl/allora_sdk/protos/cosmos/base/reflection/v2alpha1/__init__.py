# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/base/reflection/v2alpha1/reflection.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AppDescriptor",
    "AuthnDescriptor",
    "ChainDescriptor",
    "CodecDescriptor",
    "ConfigurationDescriptor",
    "GetAuthnDescriptorRequest",
    "GetAuthnDescriptorResponse",
    "GetChainDescriptorRequest",
    "GetChainDescriptorResponse",
    "GetCodecDescriptorRequest",
    "GetCodecDescriptorResponse",
    "GetConfigurationDescriptorRequest",
    "GetConfigurationDescriptorResponse",
    "GetQueryServicesDescriptorRequest",
    "GetQueryServicesDescriptorResponse",
    "GetTxDescriptorRequest",
    "GetTxDescriptorResponse",
    "InterfaceAcceptingMessageDescriptor",
    "InterfaceDescriptor",
    "InterfaceImplementerDescriptor",
    "MsgDescriptor",
    "QueryMethodDescriptor",
    "QueryServiceDescriptor",
    "QueryServicesDescriptor",
    "ReflectionServiceAsyncStub",
    "ReflectionServiceStub",
    "SigningModeDescriptor",
    "TxDescriptor",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class AppDescriptor(betterproto2.Message):
    """
    AppDescriptor describes a cosmos-sdk based application
    """

    authn: "AuthnDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    AuthnDescriptor provides information on how to authenticate transactions on the application
    NOTE: experimental and subject to change in future releases.
    """

    chain: "ChainDescriptor | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    chain provides the chain descriptor
    """

    codec: "CodecDescriptor | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    codec provides metadata information regarding codec related types
    """

    configuration: "ConfigurationDescriptor | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    configuration provides metadata information regarding the sdk.Config type
    """

    query_services: "QueryServicesDescriptor | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    query_services provides metadata information regarding the available queriable endpoints
    """

    tx: "TxDescriptor | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    tx provides metadata information regarding how to send transactions to the given application
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "AppDescriptor", AppDescriptor
)


@dataclass(eq=False, repr=False)
class AuthnDescriptor(betterproto2.Message):
    """
    AuthnDescriptor provides information on how to sign transactions without relying
    on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
    """

    sign_modes: "list[SigningModeDescriptor]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    sign_modes defines the supported signature algorithm
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "AuthnDescriptor", AuthnDescriptor
)


@dataclass(eq=False, repr=False)
class ChainDescriptor(betterproto2.Message):
    """
    ChainDescriptor describes chain information of the application
    """

    id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    id is the chain id
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "ChainDescriptor", ChainDescriptor
)


@dataclass(eq=False, repr=False)
class CodecDescriptor(betterproto2.Message):
    """
    CodecDescriptor describes the registered interfaces and provides metadata information on the types
    """

    interfaces: "list[InterfaceDescriptor]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    interfaces is a list of the registerted interfaces descriptors
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "CodecDescriptor", CodecDescriptor
)


@dataclass(eq=False, repr=False)
class ConfigurationDescriptor(betterproto2.Message):
    """
    ConfigurationDescriptor contains metadata information on the sdk.Config
    """

    bech32_account_address_prefix: "str" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    bech32_account_address_prefix is the account address prefix
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "ConfigurationDescriptor",
    ConfigurationDescriptor,
)


@dataclass(eq=False, repr=False)
class GetAuthnDescriptorRequest(betterproto2.Message):
    """
    GetAuthnDescriptorRequest is the request used for the GetAuthnDescriptor RPC
    """

    pass


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetAuthnDescriptorRequest",
    GetAuthnDescriptorRequest,
)


@dataclass(eq=False, repr=False)
class GetAuthnDescriptorResponse(betterproto2.Message):
    """
    GetAuthnDescriptorResponse is the response returned by the GetAuthnDescriptor RPC
    """

    authn: "AuthnDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    authn describes how to authenticate to the application when sending transactions
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetAuthnDescriptorResponse",
    GetAuthnDescriptorResponse,
)


@dataclass(eq=False, repr=False)
class GetChainDescriptorRequest(betterproto2.Message):
    """
    GetChainDescriptorRequest is the request used for the GetChainDescriptor RPC
    """

    pass


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetChainDescriptorRequest",
    GetChainDescriptorRequest,
)


@dataclass(eq=False, repr=False)
class GetChainDescriptorResponse(betterproto2.Message):
    """
    GetChainDescriptorResponse is the response returned by the GetChainDescriptor RPC
    """

    chain: "ChainDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    chain describes application chain information
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetChainDescriptorResponse",
    GetChainDescriptorResponse,
)


@dataclass(eq=False, repr=False)
class GetCodecDescriptorRequest(betterproto2.Message):
    """
    GetCodecDescriptorRequest is the request used for the GetCodecDescriptor RPC
    """

    pass


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetCodecDescriptorRequest",
    GetCodecDescriptorRequest,
)


@dataclass(eq=False, repr=False)
class GetCodecDescriptorResponse(betterproto2.Message):
    """
    GetCodecDescriptorResponse is the response returned by the GetCodecDescriptor RPC
    """

    codec: "CodecDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    codec describes the application codec such as registered interfaces and implementations
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetCodecDescriptorResponse",
    GetCodecDescriptorResponse,
)


@dataclass(eq=False, repr=False)
class GetConfigurationDescriptorRequest(betterproto2.Message):
    """
    GetConfigurationDescriptorRequest is the request used for the GetConfigurationDescriptor RPC
    """

    pass


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetConfigurationDescriptorRequest",
    GetConfigurationDescriptorRequest,
)


@dataclass(eq=False, repr=False)
class GetConfigurationDescriptorResponse(betterproto2.Message):
    """
    GetConfigurationDescriptorResponse is the response returned by the GetConfigurationDescriptor RPC
    """

    config: "ConfigurationDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    config describes the application's sdk.Config
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetConfigurationDescriptorResponse",
    GetConfigurationDescriptorResponse,
)


@dataclass(eq=False, repr=False)
class GetQueryServicesDescriptorRequest(betterproto2.Message):
    """
    GetQueryServicesDescriptorRequest is the request used for the GetQueryServicesDescriptor RPC
    """

    pass


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetQueryServicesDescriptorRequest",
    GetQueryServicesDescriptorRequest,
)


@dataclass(eq=False, repr=False)
class GetQueryServicesDescriptorResponse(betterproto2.Message):
    """
    GetQueryServicesDescriptorResponse is the response returned by the GetQueryServicesDescriptor RPC
    """

    queries: "QueryServicesDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    queries provides information on the available queryable services
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetQueryServicesDescriptorResponse",
    GetQueryServicesDescriptorResponse,
)


@dataclass(eq=False, repr=False)
class GetTxDescriptorRequest(betterproto2.Message):
    """
    GetTxDescriptorRequest is the request used for the GetTxDescriptor RPC
    """

    pass


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "GetTxDescriptorRequest", GetTxDescriptorRequest
)


@dataclass(eq=False, repr=False)
class GetTxDescriptorResponse(betterproto2.Message):
    """
    GetTxDescriptorResponse is the response returned by the GetTxDescriptor RPC
    """

    tx: "TxDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    tx provides information on msgs that can be forwarded to the application
    alongside the accepted transaction protobuf type
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "GetTxDescriptorResponse",
    GetTxDescriptorResponse,
)


@dataclass(eq=False, repr=False)
class InterfaceAcceptingMessageDescriptor(betterproto2.Message):
    """
    InterfaceAcceptingMessageDescriptor describes a protobuf message which contains
    an interface represented as a google.protobuf.Any
    """

    fullname: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    fullname is the protobuf fullname of the type containing the interface
    """

    field_descriptor_names: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    field_descriptor_names is a list of the protobuf name (not fullname) of the field
    which contains the interface as google.protobuf.Any (the interface is the same, but
    it can be in multiple fields of the same proto message)
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "InterfaceAcceptingMessageDescriptor",
    InterfaceAcceptingMessageDescriptor,
)


@dataclass(eq=False, repr=False)
class InterfaceDescriptor(betterproto2.Message):
    """
    InterfaceDescriptor describes the implementation of an interface
    """

    fullname: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    fullname is the name of the interface
    """

    interface_accepting_messages: "list[InterfaceAcceptingMessageDescriptor]" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    interface_accepting_messages contains information regarding the proto messages which contain the interface as
    google.protobuf.Any field
    """

    interface_implementers: "list[InterfaceImplementerDescriptor]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    interface_implementers is a list of the descriptors of the interface implementers
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "InterfaceDescriptor", InterfaceDescriptor
)


@dataclass(eq=False, repr=False)
class InterfaceImplementerDescriptor(betterproto2.Message):
    """
    InterfaceImplementerDescriptor describes an interface implementer
    """

    fullname: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    fullname is the protobuf queryable name of the interface implementer
    """

    type_url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    type_url defines the type URL used when marshalling the type as any
    this is required so we can provide type safe google.protobuf.Any marshalling and
    unmarshalling, making sure that we don't accept just 'any' type
    in our interface fields
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "InterfaceImplementerDescriptor",
    InterfaceImplementerDescriptor,
)


@dataclass(eq=False, repr=False)
class MsgDescriptor(betterproto2.Message):
    """
    MsgDescriptor describes a cosmos-sdk message that can be delivered with a transaction
    """

    msg_type_url: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    msg_type_url contains the TypeURL of a sdk.Msg.
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "MsgDescriptor", MsgDescriptor
)


@dataclass(eq=False, repr=False)
class QueryMethodDescriptor(betterproto2.Message):
    """
    QueryMethodDescriptor describes a queryable method of a query service
    no other info is provided beside method name and tendermint queryable path
    because it would be redundant with the grpc reflection service
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    name is the protobuf name (not fullname) of the method
    """

    full_query_path: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    full_query_path is the path that can be used to query
    this method via tendermint abci.Query
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "QueryMethodDescriptor", QueryMethodDescriptor
)


@dataclass(eq=False, repr=False)
class QueryServiceDescriptor(betterproto2.Message):
    """
    QueryServiceDescriptor describes a cosmos-sdk queryable service
    """

    fullname: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    fullname is the protobuf fullname of the service descriptor
    """

    is_module: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    is_module describes if this service is actually exposed by an application's module
    """

    methods: "list[QueryMethodDescriptor]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    methods provides a list of query service methods
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "QueryServiceDescriptor", QueryServiceDescriptor
)


@dataclass(eq=False, repr=False)
class QueryServicesDescriptor(betterproto2.Message):
    """
    QueryServicesDescriptor contains the list of cosmos-sdk queriable services
    """

    query_services: "list[QueryServiceDescriptor]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    query_services is a list of cosmos-sdk QueryServiceDescriptor
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1",
    "QueryServicesDescriptor",
    QueryServicesDescriptor,
)


@dataclass(eq=False, repr=False)
class SigningModeDescriptor(betterproto2.Message):
    """
    SigningModeDescriptor provides information on a signing flow of the application
    NOTE(fdymylja): here we could go as far as providing an entire flow on how
    to sign a message given a SigningModeDescriptor, but it's better to think about
    this another time
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    name defines the unique name of the signing mode
    """

    number: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    number is the unique int32 identifier for the sign_mode enum
    """

    authn_info_provider_method_fullname: "str" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    authn_info_provider_method_fullname defines the fullname of the method to call to get
    the metadata required to authenticate using the provided sign_modes
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "SigningModeDescriptor", SigningModeDescriptor
)


@dataclass(eq=False, repr=False)
class TxDescriptor(betterproto2.Message):
    """
    TxDescriptor describes the accepted transaction type
    """

    fullname: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    fullname is the protobuf fullname of the raw transaction type (for instance the tx.Tx type)
    it is not meant to support polymorphism of transaction types, it is supposed to be used by
    reflection clients to understand if they can handle a specific transaction type in an application.
    """

    msgs: "list[MsgDescriptor]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    msgs lists the accepted application messages (sdk.Msg)
    """


default_message_pool.register_message(
    "cosmos.base.reflection.v2alpha1", "TxDescriptor", TxDescriptor
)


class ReflectionServiceStub:
    """
    ReflectionService defines a service for application reflection.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_authn_descriptor(
        self, message: "GetAuthnDescriptorRequest | None" = None
    ) -> "GetAuthnDescriptorResponse":
        """
        GetAuthnDescriptor returns information on how to authenticate transactions in the application
        NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
        future releases of the cosmos-sdk.
        """

        if message is None:
            message = GetAuthnDescriptorRequest()

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetAuthnDescriptor",
            GetAuthnDescriptorRequest.SerializeToString,
            GetAuthnDescriptorResponse.FromString,
        )(message)

    def get_chain_descriptor(
        self, message: "GetChainDescriptorRequest | None" = None
    ) -> "GetChainDescriptorResponse":
        """
        GetChainDescriptor returns the description of the chain
        """

        if message is None:
            message = GetChainDescriptorRequest()

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetChainDescriptor",
            GetChainDescriptorRequest.SerializeToString,
            GetChainDescriptorResponse.FromString,
        )(message)

    def get_codec_descriptor(
        self, message: "GetCodecDescriptorRequest | None" = None
    ) -> "GetCodecDescriptorResponse":
        """
        GetCodecDescriptor returns the descriptor of the codec of the application
        """

        if message is None:
            message = GetCodecDescriptorRequest()

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetCodecDescriptor",
            GetCodecDescriptorRequest.SerializeToString,
            GetCodecDescriptorResponse.FromString,
        )(message)

    def get_configuration_descriptor(
        self, message: "GetConfigurationDescriptorRequest | None" = None
    ) -> "GetConfigurationDescriptorResponse":
        """
        GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
        """

        if message is None:
            message = GetConfigurationDescriptorRequest()

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetConfigurationDescriptor",
            GetConfigurationDescriptorRequest.SerializeToString,
            GetConfigurationDescriptorResponse.FromString,
        )(message)

    def get_query_services_descriptor(
        self, message: "GetQueryServicesDescriptorRequest | None" = None
    ) -> "GetQueryServicesDescriptorResponse":
        """
        GetQueryServicesDescriptor returns the available gRPC queryable services of the application
        """

        if message is None:
            message = GetQueryServicesDescriptorRequest()

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetQueryServicesDescriptor",
            GetQueryServicesDescriptorRequest.SerializeToString,
            GetQueryServicesDescriptorResponse.FromString,
        )(message)

    def get_tx_descriptor(
        self, message: "GetTxDescriptorRequest | None" = None
    ) -> "GetTxDescriptorResponse":
        """
        GetTxDescriptor returns information on the used transaction object and available msgs that can be used
        """

        if message is None:
            message = GetTxDescriptorRequest()

        return self._channel.unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetTxDescriptor",
            GetTxDescriptorRequest.SerializeToString,
            GetTxDescriptorResponse.FromString,
        )(message)


class ReflectionServiceAsyncStub(betterproto2.ServiceStub):
    """
    ReflectionService defines a service for application reflection.
    """

    async def get_authn_descriptor(
        self,
        message: "GetAuthnDescriptorRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetAuthnDescriptorResponse":
        """
        GetAuthnDescriptor returns information on how to authenticate transactions in the application
        NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
        future releases of the cosmos-sdk.
        """

        if message is None:
            message = GetAuthnDescriptorRequest()

        return await self._unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetAuthnDescriptor",
            message,
            GetAuthnDescriptorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_chain_descriptor(
        self,
        message: "GetChainDescriptorRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetChainDescriptorResponse":
        """
        GetChainDescriptor returns the description of the chain
        """

        if message is None:
            message = GetChainDescriptorRequest()

        return await self._unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetChainDescriptor",
            message,
            GetChainDescriptorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_codec_descriptor(
        self,
        message: "GetCodecDescriptorRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCodecDescriptorResponse":
        """
        GetCodecDescriptor returns the descriptor of the codec of the application
        """

        if message is None:
            message = GetCodecDescriptorRequest()

        return await self._unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetCodecDescriptor",
            message,
            GetCodecDescriptorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_configuration_descriptor(
        self,
        message: "GetConfigurationDescriptorRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetConfigurationDescriptorResponse":
        """
        GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
        """

        if message is None:
            message = GetConfigurationDescriptorRequest()

        return await self._unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetConfigurationDescriptor",
            message,
            GetConfigurationDescriptorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_query_services_descriptor(
        self,
        message: "GetQueryServicesDescriptorRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetQueryServicesDescriptorResponse":
        """
        GetQueryServicesDescriptor returns the available gRPC queryable services of the application
        """

        if message is None:
            message = GetQueryServicesDescriptorRequest()

        return await self._unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetQueryServicesDescriptor",
            message,
            GetQueryServicesDescriptorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_tx_descriptor(
        self,
        message: "GetTxDescriptorRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTxDescriptorResponse":
        """
        GetTxDescriptor returns information on the used transaction object and available msgs that can be used
        """

        if message is None:
            message = GetTxDescriptorRequest()

        return await self._unary_unary(
            "/cosmos.base.reflection.v2alpha1.ReflectionService/GetTxDescriptor",
            message,
            GetTxDescriptorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
