# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/slashing/v1beta1/genesis.proto, cosmos/slashing/v1beta1/query.proto, cosmos/slashing/v1beta1/slashing.proto, cosmos/slashing/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "GenesisState",
    "MissedBlock",
    "MsgAsyncStub",
    "MsgStub",
    "MsgUnjail",
    "MsgUnjailResponse",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "Params",
    "QueryAsyncStub",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QuerySigningInfoRequest",
    "QuerySigningInfoResponse",
    "QuerySigningInfosRequest",
    "QuerySigningInfosResponse",
    "QueryStub",
    "SigningInfo",
    "ValidatorMissedBlocks",
    "ValidatorSigningInfo",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the slashing module's genesis state.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """

    signing_infos: "list[SigningInfo]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    signing_infos represents a map between validator addresses and their
    signing infos.
    """

    missed_blocks: "list[ValidatorMissedBlocks]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    missed_blocks represents a map between validator addresses and their
    missed blocks.
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class MissedBlock(betterproto2.Message):
    """
    MissedBlock contains height and missed status as boolean.
    """

    index: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    index is the height at which the block was missed.
    """

    missed: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    missed is the missed status.
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "MissedBlock", MissedBlock
)


@dataclass(eq=False, repr=False)
class MsgUnjail(betterproto2.Message):
    """
    MsgUnjail defines the Msg/Unjail request type
    """

    validator_addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("cosmos.slashing.v1beta1", "MsgUnjail", MsgUnjail)


@dataclass(eq=False, repr=False)
class MsgUnjailResponse(betterproto2.Message):
    """
    MsgUnjailResponse defines the Msg/Unjail response type
    """

    pass


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "MsgUnjailResponse", MsgUnjailResponse
)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/slashing parameters to update.

    NOTE: All parameters must be supplied.
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params represents the parameters used for by the slashing module.
    """

    signed_blocks_window: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    min_signed_per_window: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    downtime_jail_duration: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )

    slash_fraction_double_sign: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)

    slash_fraction_downtime: "bytes" = betterproto2.field(5, betterproto2.TYPE_BYTES)


default_message_pool.register_message("cosmos.slashing.v1beta1", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method
    """

    pass


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


@dataclass(eq=False, repr=False)
class QuerySigningInfoRequest(betterproto2.Message):
    """
    QuerySigningInfoRequest is the request type for the Query/SigningInfo RPC
    method
    """

    cons_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    cons_address is the address to query signing info of
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "QuerySigningInfoRequest", QuerySigningInfoRequest
)


@dataclass(eq=False, repr=False)
class QuerySigningInfoResponse(betterproto2.Message):
    """
    QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
    method
    """

    val_signing_info: "ValidatorSigningInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    val_signing_info is the signing info of requested val cons address
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "QuerySigningInfoResponse", QuerySigningInfoResponse
)


@dataclass(eq=False, repr=False)
class QuerySigningInfosRequest(betterproto2.Message):
    """
    QuerySigningInfosRequest is the request type for the Query/SigningInfos RPC
    method
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "QuerySigningInfosRequest", QuerySigningInfosRequest
)


@dataclass(eq=False, repr=False)
class QuerySigningInfosResponse(betterproto2.Message):
    """
    QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
    method
    """

    info: "list[ValidatorSigningInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    info is the signing info of all validators
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "QuerySigningInfosResponse", QuerySigningInfosResponse
)


@dataclass(eq=False, repr=False)
class SigningInfo(betterproto2.Message):
    """
    SigningInfo stores validator signing info of corresponding address.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the validator address.
    """

    validator_signing_info: "ValidatorSigningInfo | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    validator_signing_info represents the signing info of this validator.
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "SigningInfo", SigningInfo
)


@dataclass(eq=False, repr=False)
class ValidatorMissedBlocks(betterproto2.Message):
    """
    ValidatorMissedBlocks contains array of missed blocks of corresponding
    address.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    address is the validator address.
    """

    missed_blocks: "list[MissedBlock]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    missed_blocks is an array of missed blocks by the validator.
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "ValidatorMissedBlocks", ValidatorMissedBlocks
)


@dataclass(eq=False, repr=False)
class ValidatorSigningInfo(betterproto2.Message):
    """
    ValidatorSigningInfo defines a validator's signing info for monitoring their
    liveness activity.
    """

    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    start_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    Height at which validator was first a candidate OR was un-jailed
    """

    index_offset: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)
    """
    Index which is incremented every time a validator is bonded in a block and
    _may_ have signed a pre-commit or not. This in conjunction with the
    signed_blocks_window param determines the index in the missed block bitmap.
    """

    jailed_until: "datetime.datetime | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Timestamp until which the validator is jailed due to liveness downtime.
    """

    tombstoned: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    Whether or not a validator has been tombstoned (killed out of validator
    set). It is set once the validator commits an equivocation or for any other
    configured misbehavior.
    """

    missed_blocks_counter: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)
    """
    A counter of missed (unsigned) blocks. It is used to avoid unnecessary
    reads in the missed block bitmap.
    """


default_message_pool.register_message(
    "cosmos.slashing.v1beta1", "ValidatorSigningInfo", ValidatorSigningInfo
)


class MsgStub:
    """
    Msg defines the slashing Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def unjail(self, message: "MsgUnjail") -> "MsgUnjailResponse":
        """
        Unjail defines a method for unjailing a jailed validator, thus returning
        them into the bonded validator set, so they can begin receiving provisions
        and rewards again.
        """

        return self._channel.unary_unary(
            "/cosmos.slashing.v1beta1.Msg/Unjail",
            MsgUnjail.SerializeToString,
            MsgUnjailResponse.FromString,
        )(message)

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/slashing module
        parameters. The authority defaults to the x/gov module account.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.slashing.v1beta1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the slashing Msg service.
    """

    async def unjail(
        self,
        message: "MsgUnjail",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUnjailResponse":
        """
        Unjail defines a method for unjailing a jailed validator, thus returning
        them into the bonded validator set, so they can begin receiving provisions
        and rewards again.
        """

        return await self._unary_unary(
            "/cosmos.slashing.v1beta1.Msg/Unjail",
            message,
            MsgUnjailResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/slashing module
        parameters. The authority defaults to the x/gov module account.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.slashing.v1beta1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query provides defines the gRPC querier service
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params queries the parameters of slashing module
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/cosmos.slashing.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def signing_info(
        self, message: "QuerySigningInfoRequest"
    ) -> "QuerySigningInfoResponse":
        """
        SigningInfo queries the signing info of given cons address
        """

        return self._channel.unary_unary(
            "/cosmos.slashing.v1beta1.Query/SigningInfo",
            QuerySigningInfoRequest.SerializeToString,
            QuerySigningInfoResponse.FromString,
        )(message)

    def signing_infos(
        self, message: "QuerySigningInfosRequest"
    ) -> "QuerySigningInfosResponse":
        """
        SigningInfos queries signing info of all validators
        """

        return self._channel.unary_unary(
            "/cosmos.slashing.v1beta1.Query/SigningInfos",
            QuerySigningInfosRequest.SerializeToString,
            QuerySigningInfosResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query provides defines the gRPC querier service
    """

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params queries the parameters of slashing module
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.slashing.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def signing_info(
        self,
        message: "QuerySigningInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySigningInfoResponse":
        """
        SigningInfo queries the signing info of given cons address
        """

        return await self._unary_unary(
            "/cosmos.slashing.v1beta1.Query/SigningInfo",
            message,
            QuerySigningInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def signing_infos(
        self,
        message: "QuerySigningInfosRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QuerySigningInfosResponse":
        """
        SigningInfos queries signing info of all validators
        """

        return await self._unary_unary(
            "/cosmos.slashing.v1beta1.Query/SigningInfos",
            message,
            QuerySigningInfosResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...base.query import v1beta1 as __base__query__v1beta1__
