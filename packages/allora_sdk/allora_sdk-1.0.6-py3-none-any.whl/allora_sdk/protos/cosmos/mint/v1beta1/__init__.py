# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/mint/v1beta1/genesis.proto, cosmos/mint/v1beta1/mint.proto, cosmos/mint/v1beta1/query.proto, cosmos/mint/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "GenesisState",
    "Minter",
    "MsgAsyncStub",
    "MsgStub",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "Params",
    "QueryAnnualProvisionsRequest",
    "QueryAnnualProvisionsResponse",
    "QueryAsyncStub",
    "QueryInflationRequest",
    "QueryInflationResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryStub",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the mint module's genesis state.
    """

    minter: "Minter | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    minter is a space for holding current inflation information.
    """

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class Minter(betterproto2.Message):
    """
    Minter represents the minting state.
    """

    inflation: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    current annual inflation rate
    """

    annual_provisions: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    current annual expected provisions
    """


default_message_pool.register_message("cosmos.mint.v1beta1", "Minter", Minter)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/mint parameters to update.

    NOTE: All parameters must be supplied.
    """


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters for the x/mint module.
    """

    mint_denom: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    type of coin to mint
    """

    inflation_rate_change: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    maximum annual change in inflation rate
    """

    inflation_max: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    maximum inflation rate
    """

    inflation_min: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    minimum inflation rate
    """

    goal_bonded: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    goal of percent bonded atoms
    """

    blocks_per_year: "int" = betterproto2.field(6, betterproto2.TYPE_UINT64)
    """
    expected blocks per year
    """


default_message_pool.register_message("cosmos.mint.v1beta1", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryAnnualProvisionsRequest(betterproto2.Message):
    """
    QueryAnnualProvisionsRequest is the request type for the
    Query/AnnualProvisions RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "QueryAnnualProvisionsRequest", QueryAnnualProvisionsRequest
)


@dataclass(eq=False, repr=False)
class QueryAnnualProvisionsResponse(betterproto2.Message):
    """
    QueryAnnualProvisionsResponse is the response type for the
    Query/AnnualProvisions RPC method.
    """

    annual_provisions: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    annual_provisions is the current minting annual provisions value.
    """


default_message_pool.register_message(
    "cosmos.mint.v1beta1",
    "QueryAnnualProvisionsResponse",
    QueryAnnualProvisionsResponse,
)


@dataclass(eq=False, repr=False)
class QueryInflationRequest(betterproto2.Message):
    """
    QueryInflationRequest is the request type for the Query/Inflation RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "QueryInflationRequest", QueryInflationRequest
)


@dataclass(eq=False, repr=False)
class QueryInflationResponse(betterproto2.Message):
    """
    QueryInflationResponse is the response type for the Query/Inflation RPC
    method.
    """

    inflation: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    inflation is the current minting inflation value.
    """


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "QueryInflationResponse", QueryInflationResponse
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "cosmos.mint.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


class MsgStub:
    """
    Msg defines the x/mint Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/mint module
        parameters. The authority is defaults to the x/gov module account.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.mint.v1beta1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the x/mint Msg service.
    """

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/mint module
        parameters. The authority is defaults to the x/gov module account.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.mint.v1beta1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query provides defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params returns the total set of minting parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/cosmos.mint.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def inflation(
        self, message: "QueryInflationRequest | None" = None
    ) -> "QueryInflationResponse":
        """
        Inflation returns the current minting inflation value.
        """

        if message is None:
            message = QueryInflationRequest()

        return self._channel.unary_unary(
            "/cosmos.mint.v1beta1.Query/Inflation",
            QueryInflationRequest.SerializeToString,
            QueryInflationResponse.FromString,
        )(message)

    def annual_provisions(
        self, message: "QueryAnnualProvisionsRequest | None" = None
    ) -> "QueryAnnualProvisionsResponse":
        """
        AnnualProvisions current minting annual provisions value.
        """

        if message is None:
            message = QueryAnnualProvisionsRequest()

        return self._channel.unary_unary(
            "/cosmos.mint.v1beta1.Query/AnnualProvisions",
            QueryAnnualProvisionsRequest.SerializeToString,
            QueryAnnualProvisionsResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query provides defines the gRPC querier service.
    """

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params returns the total set of minting parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.mint.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def inflation(
        self,
        message: "QueryInflationRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryInflationResponse":
        """
        Inflation returns the current minting inflation value.
        """

        if message is None:
            message = QueryInflationRequest()

        return await self._unary_unary(
            "/cosmos.mint.v1beta1.Query/Inflation",
            message,
            QueryInflationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def annual_provisions(
        self,
        message: "QueryAnnualProvisionsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAnnualProvisionsResponse":
        """
        AnnualProvisions current minting annual provisions value.
        """

        if message is None:
            message = QueryAnnualProvisionsRequest()

        return await self._unary_unary(
            "/cosmos.mint.v1beta1.Query/AnnualProvisions",
            message,
            QueryAnnualProvisionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
