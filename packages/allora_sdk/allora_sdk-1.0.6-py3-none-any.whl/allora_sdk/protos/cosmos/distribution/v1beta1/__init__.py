# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/distribution/v1beta1/distribution.proto, cosmos/distribution/v1beta1/genesis.proto, cosmos/distribution/v1beta1/query.proto, cosmos/distribution/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CommunityPoolSpendProposal",
    "CommunityPoolSpendProposalWithDeposit",
    "DelegationDelegatorReward",
    "DelegatorStartingInfo",
    "DelegatorStartingInfoRecord",
    "DelegatorWithdrawInfo",
    "FeePool",
    "GenesisState",
    "MsgAsyncStub",
    "MsgCommunityPoolSpend",
    "MsgCommunityPoolSpendResponse",
    "MsgDepositValidatorRewardsPool",
    "MsgDepositValidatorRewardsPoolResponse",
    "MsgFundCommunityPool",
    "MsgFundCommunityPoolResponse",
    "MsgSetWithdrawAddress",
    "MsgSetWithdrawAddressResponse",
    "MsgStub",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "MsgWithdrawDelegatorReward",
    "MsgWithdrawDelegatorRewardResponse",
    "MsgWithdrawValidatorCommission",
    "MsgWithdrawValidatorCommissionResponse",
    "Params",
    "QueryAsyncStub",
    "QueryCommunityPoolRequest",
    "QueryCommunityPoolResponse",
    "QueryDelegationRewardsRequest",
    "QueryDelegationRewardsResponse",
    "QueryDelegationTotalRewardsRequest",
    "QueryDelegationTotalRewardsResponse",
    "QueryDelegatorValidatorsRequest",
    "QueryDelegatorValidatorsResponse",
    "QueryDelegatorWithdrawAddressRequest",
    "QueryDelegatorWithdrawAddressResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryStub",
    "QueryValidatorCommissionRequest",
    "QueryValidatorCommissionResponse",
    "QueryValidatorDistributionInfoRequest",
    "QueryValidatorDistributionInfoResponse",
    "QueryValidatorOutstandingRewardsRequest",
    "QueryValidatorOutstandingRewardsResponse",
    "QueryValidatorSlashesRequest",
    "QueryValidatorSlashesResponse",
    "ValidatorAccumulatedCommission",
    "ValidatorAccumulatedCommissionRecord",
    "ValidatorCurrentRewards",
    "ValidatorCurrentRewardsRecord",
    "ValidatorHistoricalRewards",
    "ValidatorHistoricalRewardsRecord",
    "ValidatorOutstandingRewards",
    "ValidatorOutstandingRewardsRecord",
    "ValidatorSlashEvent",
    "ValidatorSlashEventRecord",
    "ValidatorSlashEvents",
)

import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class CommunityPoolSpendProposal(betterproto2.Message):
    """
    CommunityPoolSpendProposal details a proposal for use of community funds,
    together with how many coins are proposed to be spent, and to which
    recipient account.

    Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no
    longer a need for an explicit CommunityPoolSpendProposal. To spend community
    pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov
    module via a v1 governance proposal.
    """

    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    recipient: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )

    def __post_init__(self) -> None:
        warnings.warn("CommunityPoolSpendProposal is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "CommunityPoolSpendProposal",
    CommunityPoolSpendProposal,
)


@dataclass(eq=False, repr=False)
class CommunityPoolSpendProposalWithDeposit(betterproto2.Message):
    """
    CommunityPoolSpendProposalWithDeposit defines a CommunityPoolSpendProposal
    with a deposit
    """

    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    recipient: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    deposit: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "CommunityPoolSpendProposalWithDeposit",
    CommunityPoolSpendProposalWithDeposit,
)


@dataclass(eq=False, repr=False)
class DelegationDelegatorReward(betterproto2.Message):
    """
    DelegationDelegatorReward represents the properties
    of a delegator's delegation reward.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reward: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "DelegationDelegatorReward",
    DelegationDelegatorReward,
)


@dataclass(eq=False, repr=False)
class DelegatorStartingInfo(betterproto2.Message):
    """
    DelegatorStartingInfo represents the starting info for a delegator reward
    period. It tracks the previous validator period, the delegation's amount of
    staking token, and the creation height (to check later on if any slashes have
    occurred). NOTE: Even though validators are slashed to whole staking tokens,
    the delegators within the validator may be left with less than a full token,
    thus sdk.Dec is used.
    """

    previous_period: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    stake: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    height: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "DelegatorStartingInfo", DelegatorStartingInfo
)


@dataclass(eq=False, repr=False)
class DelegatorStartingInfoRecord(betterproto2.Message):
    """
    DelegatorStartingInfoRecord used for import / export via genesis json.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address is the address of the delegator.
    """

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_address is the address of the validator.
    """

    starting_info: "DelegatorStartingInfo | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    starting_info defines the starting info of a delegator.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "DelegatorStartingInfoRecord",
    DelegatorStartingInfoRecord,
)


@dataclass(eq=False, repr=False)
class DelegatorWithdrawInfo(betterproto2.Message):
    """
    DelegatorWithdrawInfo is the address for where distributions rewards are
    withdrawn to by default this struct is only used at genesis to feed in
    default withdraw addresses.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address is the address of the delegator.
    """

    withdraw_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    withdraw_address is the address to withdraw the delegation rewards to.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "DelegatorWithdrawInfo", DelegatorWithdrawInfo
)


@dataclass(eq=False, repr=False)
class FeePool(betterproto2.Message):
    """
    FeePool is the global fee pool for distribution.
    """

    community_pool: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("cosmos.distribution.v1beta1", "FeePool", FeePool)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState defines the distribution module's genesis state.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """

    fee_pool: "FeePool | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    fee_pool defines the fee pool at genesis.
    """

    delegator_withdraw_infos: "list[DelegatorWithdrawInfo]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    fee_pool defines the delegator withdraw infos at genesis.
    """

    previous_proposer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    fee_pool defines the previous proposer at genesis.
    """

    outstanding_rewards: "list[ValidatorOutstandingRewardsRecord]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    fee_pool defines the outstanding rewards of all validators at genesis.
    """

    validator_accumulated_commissions: "list[ValidatorAccumulatedCommissionRecord]" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    fee_pool defines the accumulated commissions of all validators at genesis.
    """

    validator_historical_rewards: "list[ValidatorHistoricalRewardsRecord]" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    fee_pool defines the historical rewards of all validators at genesis.
    """

    validator_current_rewards: "list[ValidatorCurrentRewardsRecord]" = (
        betterproto2.field(8, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    fee_pool defines the current rewards of all validators at genesis.
    """

    delegator_starting_infos: "list[DelegatorStartingInfoRecord]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    fee_pool defines the delegator starting infos at genesis.
    """

    validator_slash_events: "list[ValidatorSlashEventRecord]" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    fee_pool defines the validator slash events at genesis.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class MsgCommunityPoolSpend(betterproto2.Message):
    """
    MsgCommunityPoolSpend defines a message for sending tokens from the community
    pool to another account. This message is typically executed via a governance
    proposal with the governance module being the executing authority.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    recipient: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "MsgCommunityPoolSpend", MsgCommunityPoolSpend
)


@dataclass(eq=False, repr=False)
class MsgCommunityPoolSpendResponse(betterproto2.Message):
    """
    MsgCommunityPoolSpendResponse defines the response to executing a
    MsgCommunityPoolSpend message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgCommunityPoolSpendResponse",
    MsgCommunityPoolSpendResponse,
)


@dataclass(eq=False, repr=False)
class MsgDepositValidatorRewardsPool(betterproto2.Message):
    """
    DepositValidatorRewardsPool defines the request structure to provide
    additional rewards to delegators from a specific validator.

    Since: cosmos-sdk 0.50
    """

    depositor: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgDepositValidatorRewardsPool",
    MsgDepositValidatorRewardsPool,
)


@dataclass(eq=False, repr=False)
class MsgDepositValidatorRewardsPoolResponse(betterproto2.Message):
    """
    MsgDepositValidatorRewardsPoolResponse defines the response to executing a
    MsgDepositValidatorRewardsPool message.

    Since: cosmos-sdk 0.50
    """

    pass


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgDepositValidatorRewardsPoolResponse",
    MsgDepositValidatorRewardsPoolResponse,
)


@dataclass(eq=False, repr=False)
class MsgFundCommunityPool(betterproto2.Message):
    """
    MsgFundCommunityPool allows an account to directly
    fund the community pool.
    """

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    depositor: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "MsgFundCommunityPool", MsgFundCommunityPool
)


@dataclass(eq=False, repr=False)
class MsgFundCommunityPoolResponse(betterproto2.Message):
    """
    MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgFundCommunityPoolResponse",
    MsgFundCommunityPoolResponse,
)


@dataclass(eq=False, repr=False)
class MsgSetWithdrawAddress(betterproto2.Message):
    """
    MsgSetWithdrawAddress sets the withdraw address for
    a delegator (or validator self-delegation).
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    withdraw_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "MsgSetWithdrawAddress", MsgSetWithdrawAddress
)


@dataclass(eq=False, repr=False)
class MsgSetWithdrawAddressResponse(betterproto2.Message):
    """
    MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
    type.
    """

    pass


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgSetWithdrawAddressResponse",
    MsgSetWithdrawAddressResponse,
)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

    Since: cosmos-sdk 0.47
    """

    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/distribution parameters to update.

    NOTE: All parameters must be supplied.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.

    Since: cosmos-sdk 0.47
    """

    pass


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class MsgWithdrawDelegatorReward(betterproto2.Message):
    """
    MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
    from a single validator.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgWithdrawDelegatorReward",
    MsgWithdrawDelegatorReward,
)


@dataclass(eq=False, repr=False)
class MsgWithdrawDelegatorRewardResponse(betterproto2.Message):
    """
    MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
    response type.
    """

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Since: cosmos-sdk 0.46
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgWithdrawDelegatorRewardResponse",
    MsgWithdrawDelegatorRewardResponse,
)


@dataclass(eq=False, repr=False)
class MsgWithdrawValidatorCommission(betterproto2.Message):
    """
    MsgWithdrawValidatorCommission withdraws the full commission to the validator
    address.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgWithdrawValidatorCommission",
    MsgWithdrawValidatorCommission,
)


@dataclass(eq=False, repr=False)
class MsgWithdrawValidatorCommissionResponse(betterproto2.Message):
    """
    MsgWithdrawValidatorCommissionResponse defines the
    Msg/WithdrawValidatorCommission response type.
    """

    amount: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Since: cosmos-sdk 0.46
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "MsgWithdrawValidatorCommissionResponse",
    MsgWithdrawValidatorCommissionResponse,
)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the set of params for the distribution module.
    """

    community_tax: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    base_proposer_reward: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Deprecated: The base_proposer_reward field is deprecated and is no longer used
    in the x/distribution module's reward mechanism.
    """

    bonus_proposer_reward: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Deprecated: The bonus_proposer_reward field is deprecated and is no longer used
    in the x/distribution module's reward mechanism.
    """

    withdraw_addr_enabled: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("base_proposer_reward"):
            warnings.warn(
                "Params.base_proposer_reward is deprecated", DeprecationWarning
            )
        if self.is_set("bonus_proposer_reward"):
            warnings.warn(
                "Params.bonus_proposer_reward is deprecated", DeprecationWarning
            )


default_message_pool.register_message("cosmos.distribution.v1beta1", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryCommunityPoolRequest(betterproto2.Message):
    """
    QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC
    method.
    """

    pass


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryCommunityPoolRequest",
    QueryCommunityPoolRequest,
)


@dataclass(eq=False, repr=False)
class QueryCommunityPoolResponse(betterproto2.Message):
    """
    QueryCommunityPoolResponse is the response type for the Query/CommunityPool
    RPC method.
    """

    pool: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    pool defines community pool's coins.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryCommunityPoolResponse",
    QueryCommunityPoolResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegationRewardsRequest(betterproto2.Message):
    """
    QueryDelegationRewardsRequest is the request type for the
    Query/DelegationRewards RPC method.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address defines the delegator address to query for.
    """

    validator_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    validator_address defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegationRewardsRequest",
    QueryDelegationRewardsRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegationRewardsResponse(betterproto2.Message):
    """
    QueryDelegationRewardsResponse is the response type for the
    Query/DelegationRewards RPC method.
    """

    rewards: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    rewards defines the rewards accrued by a delegation.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegationRewardsResponse",
    QueryDelegationRewardsResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegationTotalRewardsRequest(betterproto2.Message):
    """
    QueryDelegationTotalRewardsRequest is the request type for the
    Query/DelegationTotalRewards RPC method.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address defines the delegator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegationTotalRewardsRequest",
    QueryDelegationTotalRewardsRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegationTotalRewardsResponse(betterproto2.Message):
    """
    QueryDelegationTotalRewardsResponse is the response type for the
    Query/DelegationTotalRewards RPC method.
    """

    rewards: "list[DelegationDelegatorReward]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    rewards defines all the rewards accrued by a delegator.
    """

    total: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    total defines the sum of all the rewards.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegationTotalRewardsResponse",
    QueryDelegationTotalRewardsResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorValidatorsRequest(betterproto2.Message):
    """
    QueryDelegatorValidatorsRequest is the request type for the
    Query/DelegatorValidators RPC method.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address defines the delegator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegatorValidatorsRequest",
    QueryDelegatorValidatorsRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorValidatorsResponse(betterproto2.Message):
    """
    QueryDelegatorValidatorsResponse is the response type for the
    Query/DelegatorValidators RPC method.
    """

    validators: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    validators defines the validators a delegator is delegating for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegatorValidatorsResponse",
    QueryDelegatorValidatorsResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorWithdrawAddressRequest(betterproto2.Message):
    """
    QueryDelegatorWithdrawAddressRequest is the request type for the
    Query/DelegatorWithdrawAddress RPC method.
    """

    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    delegator_address defines the delegator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegatorWithdrawAddressRequest",
    QueryDelegatorWithdrawAddressRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegatorWithdrawAddressResponse(betterproto2.Message):
    """
    QueryDelegatorWithdrawAddressResponse is the response type for the
    Query/DelegatorWithdrawAddress RPC method.
    """

    withdraw_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    withdraw_address defines the delegator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryDelegatorWithdrawAddressResponse",
    QueryDelegatorWithdrawAddressResponse,
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "QueryParamsResponse", QueryParamsResponse
)


@dataclass(eq=False, repr=False)
class QueryValidatorCommissionRequest(betterproto2.Message):
    """
    QueryValidatorCommissionRequest is the request type for the
    Query/ValidatorCommission RPC method
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorCommissionRequest",
    QueryValidatorCommissionRequest,
)


@dataclass(eq=False, repr=False)
class QueryValidatorCommissionResponse(betterproto2.Message):
    """
    QueryValidatorCommissionResponse is the response type for the
    Query/ValidatorCommission RPC method
    """

    commission: "ValidatorAccumulatedCommission | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    commission defines the commission the validator received.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorCommissionResponse",
    QueryValidatorCommissionResponse,
)


@dataclass(eq=False, repr=False)
class QueryValidatorDistributionInfoRequest(betterproto2.Message):
    """
    QueryValidatorDistributionInfoRequest is the request type for the Query/ValidatorDistributionInfo RPC method.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorDistributionInfoRequest",
    QueryValidatorDistributionInfoRequest,
)


@dataclass(eq=False, repr=False)
class QueryValidatorDistributionInfoResponse(betterproto2.Message):
    """
    QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method.
    """

    operator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    operator_address defines the validator operator address.
    """

    self_bond_rewards: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    self_bond_rewards defines the self delegations rewards.
    """

    commission: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    commission defines the commission the validator received.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorDistributionInfoResponse",
    QueryValidatorDistributionInfoResponse,
)


@dataclass(eq=False, repr=False)
class QueryValidatorOutstandingRewardsRequest(betterproto2.Message):
    """
    QueryValidatorOutstandingRewardsRequest is the request type for the
    Query/ValidatorOutstandingRewards RPC method.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address defines the validator address to query for.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorOutstandingRewardsRequest",
    QueryValidatorOutstandingRewardsRequest,
)


@dataclass(eq=False, repr=False)
class QueryValidatorOutstandingRewardsResponse(betterproto2.Message):
    """
    QueryValidatorOutstandingRewardsResponse is the response type for the
    Query/ValidatorOutstandingRewards RPC method.
    """

    rewards: "ValidatorOutstandingRewards | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorOutstandingRewardsResponse",
    QueryValidatorOutstandingRewardsResponse,
)


@dataclass(eq=False, repr=False)
class QueryValidatorSlashesRequest(betterproto2.Message):
    """
    QueryValidatorSlashesRequest is the request type for the
    Query/ValidatorSlashes RPC method
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address defines the validator address to query for.
    """

    starting_height: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    starting_height defines the optional starting height to query the slashes.
    """

    ending_height: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    starting_height defines the optional ending height to query the slashes.
    """

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an optional pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorSlashesRequest",
    QueryValidatorSlashesRequest,
)


@dataclass(eq=False, repr=False)
class QueryValidatorSlashesResponse(betterproto2.Message):
    """
    QueryValidatorSlashesResponse is the response type for the
    Query/ValidatorSlashes RPC method.
    """

    slashes: "list[ValidatorSlashEvent]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    slashes defines the slashes the validator received.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines the pagination in the response.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "QueryValidatorSlashesResponse",
    QueryValidatorSlashesResponse,
)


@dataclass(eq=False, repr=False)
class ValidatorAccumulatedCommission(betterproto2.Message):
    """
    ValidatorAccumulatedCommission represents accumulated commission
    for a validator kept as a running counter, can be withdrawn at any time.
    """

    commission: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorAccumulatedCommission",
    ValidatorAccumulatedCommission,
)


@dataclass(eq=False, repr=False)
class ValidatorAccumulatedCommissionRecord(betterproto2.Message):
    """
    ValidatorAccumulatedCommissionRecord is used for import / export via genesis
    json.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address is the address of the validator.
    """

    accumulated: "ValidatorAccumulatedCommission | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    accumulated is the accumulated commission of a validator.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorAccumulatedCommissionRecord",
    ValidatorAccumulatedCommissionRecord,
)


@dataclass(eq=False, repr=False)
class ValidatorCurrentRewards(betterproto2.Message):
    """
    ValidatorCurrentRewards represents current rewards and current
    period for a validator kept as a running counter and incremented
    each block as long as the validator's tokens remain constant.
    """

    rewards: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    period: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "ValidatorCurrentRewards", ValidatorCurrentRewards
)


@dataclass(eq=False, repr=False)
class ValidatorCurrentRewardsRecord(betterproto2.Message):
    """
    ValidatorCurrentRewardsRecord is used for import / export via genesis json.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address is the address of the validator.
    """

    rewards: "ValidatorCurrentRewards | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    rewards defines the current rewards of a validator.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorCurrentRewardsRecord",
    ValidatorCurrentRewardsRecord,
)


@dataclass(eq=False, repr=False)
class ValidatorHistoricalRewards(betterproto2.Message):
    """
    ValidatorHistoricalRewards represents historical rewards for a validator.
    Height is implicit within the store key.
    Cumulative reward ratio is the sum from the zeroeth period
    until this period of rewards / tokens, per the spec.
    The reference count indicates the number of objects
    which might need to reference this historical entry at any point.
    ReferenceCount =
       number of outstanding delegations which ended the associated period (and
       might need to read that record)
     + number of slashes which ended the associated period (and might need to
     read that record)
     + one per validator for the zeroeth period, set on initialization
    """

    cumulative_reward_ratio: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    reference_count: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorHistoricalRewards",
    ValidatorHistoricalRewards,
)


@dataclass(eq=False, repr=False)
class ValidatorHistoricalRewardsRecord(betterproto2.Message):
    """
    ValidatorHistoricalRewardsRecord is used for import / export via genesis
    json.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address is the address of the validator.
    """

    period: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    period defines the period the historical rewards apply to.
    """

    rewards: "ValidatorHistoricalRewards | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    rewards defines the historical rewards of a validator.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorHistoricalRewardsRecord",
    ValidatorHistoricalRewardsRecord,
)


@dataclass(eq=False, repr=False)
class ValidatorOutstandingRewards(betterproto2.Message):
    """
    ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
    for a validator inexpensive to track, allows simple sanity checks.
    """

    rewards: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorOutstandingRewards",
    ValidatorOutstandingRewards,
)


@dataclass(eq=False, repr=False)
class ValidatorOutstandingRewardsRecord(betterproto2.Message):
    """
    ValidatorOutstandingRewardsRecord is used for import/export via genesis json.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address is the address of the validator.
    """

    outstanding_rewards: "list[__base__v1beta1__.DecCoin]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    outstanding_rewards represents the outstanding rewards of a validator.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorOutstandingRewardsRecord",
    ValidatorOutstandingRewardsRecord,
)


@dataclass(eq=False, repr=False)
class ValidatorSlashEvent(betterproto2.Message):
    """
    ValidatorSlashEvent represents a validator slash event.
    Height is implicit within the store key.
    This is needed to calculate appropriate amount of staking tokens
    for delegations which are withdrawn after a slash has occurred.
    """

    validator_period: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    fraction: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "ValidatorSlashEvent", ValidatorSlashEvent
)


@dataclass(eq=False, repr=False)
class ValidatorSlashEventRecord(betterproto2.Message):
    """
    ValidatorSlashEventRecord is used for import / export via genesis json.
    """

    validator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    validator_address is the address of the validator.
    """

    height: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    height defines the block height at which the slash event occurred.
    """

    period: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    period is the period of the slash event.
    """

    validator_slash_event: "ValidatorSlashEvent | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    validator_slash_event describes the slash event.
    """


default_message_pool.register_message(
    "cosmos.distribution.v1beta1",
    "ValidatorSlashEventRecord",
    ValidatorSlashEventRecord,
)


@dataclass(eq=False, repr=False)
class ValidatorSlashEvents(betterproto2.Message):
    """
    ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
    """

    validator_slash_events: "list[ValidatorSlashEvent]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.distribution.v1beta1", "ValidatorSlashEvents", ValidatorSlashEvents
)


class MsgStub:
    """
    Msg defines the distribution Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def set_withdraw_address(
        self, message: "MsgSetWithdrawAddress"
    ) -> "MsgSetWithdrawAddressResponse":
        """
        SetWithdrawAddress defines a method to change the withdraw address
        for a delegator (or validator self-delegation).
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress",
            MsgSetWithdrawAddress.SerializeToString,
            MsgSetWithdrawAddressResponse.FromString,
        )(message)

    def withdraw_delegator_reward(
        self, message: "MsgWithdrawDelegatorReward"
    ) -> "MsgWithdrawDelegatorRewardResponse":
        """
        WithdrawDelegatorReward defines a method to withdraw rewards of delegator
        from a single validator.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward",
            MsgWithdrawDelegatorReward.SerializeToString,
            MsgWithdrawDelegatorRewardResponse.FromString,
        )(message)

    def withdraw_validator_commission(
        self, message: "MsgWithdrawValidatorCommission"
    ) -> "MsgWithdrawValidatorCommissionResponse":
        """
        WithdrawValidatorCommission defines a method to withdraw the
        full commission to the validator address.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission",
            MsgWithdrawValidatorCommission.SerializeToString,
            MsgWithdrawValidatorCommissionResponse.FromString,
        )(message)

    def fund_community_pool(
        self, message: "MsgFundCommunityPool"
    ) -> "MsgFundCommunityPoolResponse":
        """
        FundCommunityPool defines a method to allow an account to directly
        fund the community pool.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Msg/FundCommunityPool",
            MsgFundCommunityPool.SerializeToString,
            MsgFundCommunityPoolResponse.FromString,
        )(message)

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/distribution
        module parameters. The authority is defined in the keeper.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)

    def community_pool_spend(
        self, message: "MsgCommunityPoolSpend"
    ) -> "MsgCommunityPoolSpendResponse":
        """
        CommunityPoolSpend defines a governance operation for sending tokens from
        the community pool in the x/distribution module to another account, which
        could be the governance module itself. The authority is defined in the
        keeper.

        Since: cosmos-sdk 0.47
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Msg/CommunityPoolSpend",
            MsgCommunityPoolSpend.SerializeToString,
            MsgCommunityPoolSpendResponse.FromString,
        )(message)

    def deposit_validator_rewards_pool(
        self, message: "MsgDepositValidatorRewardsPool"
    ) -> "MsgDepositValidatorRewardsPoolResponse":
        """
        DepositValidatorRewardsPool defines a method to provide additional rewards
        to delegators to a specific validator.

        Since: cosmos-sdk 0.50
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Msg/DepositValidatorRewardsPool",
            MsgDepositValidatorRewardsPool.SerializeToString,
            MsgDepositValidatorRewardsPoolResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the distribution Msg service.
    """

    async def set_withdraw_address(
        self,
        message: "MsgSetWithdrawAddress",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgSetWithdrawAddressResponse":
        """
        SetWithdrawAddress defines a method to change the withdraw address
        for a delegator (or validator self-delegation).
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress",
            message,
            MsgSetWithdrawAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw_delegator_reward(
        self,
        message: "MsgWithdrawDelegatorReward",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgWithdrawDelegatorRewardResponse":
        """
        WithdrawDelegatorReward defines a method to withdraw rewards of delegator
        from a single validator.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward",
            message,
            MsgWithdrawDelegatorRewardResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw_validator_commission(
        self,
        message: "MsgWithdrawValidatorCommission",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgWithdrawValidatorCommissionResponse":
        """
        WithdrawValidatorCommission defines a method to withdraw the
        full commission to the validator address.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission",
            message,
            MsgWithdrawValidatorCommissionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_community_pool(
        self,
        message: "MsgFundCommunityPool",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgFundCommunityPoolResponse":
        """
        FundCommunityPool defines a method to allow an account to directly
        fund the community pool.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/FundCommunityPool",
            message,
            MsgFundCommunityPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        """
        UpdateParams defines a governance operation for updating the x/distribution
        module parameters. The authority is defined in the keeper.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def community_pool_spend(
        self,
        message: "MsgCommunityPoolSpend",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgCommunityPoolSpendResponse":
        """
        CommunityPoolSpend defines a governance operation for sending tokens from
        the community pool in the x/distribution module to another account, which
        could be the governance module itself. The authority is defined in the
        keeper.

        Since: cosmos-sdk 0.47
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/CommunityPoolSpend",
            message,
            MsgCommunityPoolSpendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit_validator_rewards_pool(
        self,
        message: "MsgDepositValidatorRewardsPool",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgDepositValidatorRewardsPoolResponse":
        """
        DepositValidatorRewardsPool defines a method to provide additional rewards
        to delegators to a specific validator.

        Since: cosmos-sdk 0.50
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/DepositValidatorRewardsPool",
            message,
            MsgDepositValidatorRewardsPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service for distribution module.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params queries params of the distribution module.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def validator_distribution_info(
        self, message: "QueryValidatorDistributionInfoRequest"
    ) -> "QueryValidatorDistributionInfoResponse":
        """
        ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo",
            QueryValidatorDistributionInfoRequest.SerializeToString,
            QueryValidatorDistributionInfoResponse.FromString,
        )(message)

    def validator_outstanding_rewards(
        self, message: "QueryValidatorOutstandingRewardsRequest"
    ) -> "QueryValidatorOutstandingRewardsResponse":
        """
        ValidatorOutstandingRewards queries rewards of a validator address.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
            QueryValidatorOutstandingRewardsRequest.SerializeToString,
            QueryValidatorOutstandingRewardsResponse.FromString,
        )(message)

    def validator_commission(
        self, message: "QueryValidatorCommissionRequest"
    ) -> "QueryValidatorCommissionResponse":
        """
        ValidatorCommission queries accumulated commission for a validator.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
            QueryValidatorCommissionRequest.SerializeToString,
            QueryValidatorCommissionResponse.FromString,
        )(message)

    def validator_slashes(
        self, message: "QueryValidatorSlashesRequest"
    ) -> "QueryValidatorSlashesResponse":
        """
        ValidatorSlashes queries slash events of a validator.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
            QueryValidatorSlashesRequest.SerializeToString,
            QueryValidatorSlashesResponse.FromString,
        )(message)

    def delegation_rewards(
        self, message: "QueryDelegationRewardsRequest"
    ) -> "QueryDelegationRewardsResponse":
        """
        DelegationRewards queries the total rewards accrued by a delegation.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegationRewards",
            QueryDelegationRewardsRequest.SerializeToString,
            QueryDelegationRewardsResponse.FromString,
        )(message)

    def delegation_total_rewards(
        self, message: "QueryDelegationTotalRewardsRequest"
    ) -> "QueryDelegationTotalRewardsResponse":
        """
        DelegationTotalRewards queries the total rewards accrued by each
        validator.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
            QueryDelegationTotalRewardsRequest.SerializeToString,
            QueryDelegationTotalRewardsResponse.FromString,
        )(message)

    def delegator_validators(
        self, message: "QueryDelegatorValidatorsRequest"
    ) -> "QueryDelegatorValidatorsResponse":
        """
        DelegatorValidators queries the validators of a delegator.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
            QueryDelegatorValidatorsRequest.SerializeToString,
            QueryDelegatorValidatorsResponse.FromString,
        )(message)

    def delegator_withdraw_address(
        self, message: "QueryDelegatorWithdrawAddressRequest"
    ) -> "QueryDelegatorWithdrawAddressResponse":
        """
        DelegatorWithdrawAddress queries withdraw address of a delegator.
        """

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
            QueryDelegatorWithdrawAddressRequest.SerializeToString,
            QueryDelegatorWithdrawAddressResponse.FromString,
        )(message)

    def community_pool(
        self, message: "QueryCommunityPoolRequest | None" = None
    ) -> "QueryCommunityPoolResponse":
        """
        CommunityPool queries the community pool coins.
        """

        if message is None:
            message = QueryCommunityPoolRequest()

        return self._channel.unary_unary(
            "/cosmos.distribution.v1beta1.Query/CommunityPool",
            QueryCommunityPoolRequest.SerializeToString,
            QueryCommunityPoolResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service for distribution module.
    """

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params queries params of the distribution module.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validator_distribution_info(
        self,
        message: "QueryValidatorDistributionInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorDistributionInfoResponse":
        """
        ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo",
            message,
            QueryValidatorDistributionInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validator_outstanding_rewards(
        self,
        message: "QueryValidatorOutstandingRewardsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorOutstandingRewardsResponse":
        """
        ValidatorOutstandingRewards queries rewards of a validator address.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
            message,
            QueryValidatorOutstandingRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validator_commission(
        self,
        message: "QueryValidatorCommissionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorCommissionResponse":
        """
        ValidatorCommission queries accumulated commission for a validator.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
            message,
            QueryValidatorCommissionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validator_slashes(
        self,
        message: "QueryValidatorSlashesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryValidatorSlashesResponse":
        """
        ValidatorSlashes queries slash events of a validator.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
            message,
            QueryValidatorSlashesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegation_rewards(
        self,
        message: "QueryDelegationRewardsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegationRewardsResponse":
        """
        DelegationRewards queries the total rewards accrued by a delegation.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegationRewards",
            message,
            QueryDelegationRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegation_total_rewards(
        self,
        message: "QueryDelegationTotalRewardsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegationTotalRewardsResponse":
        """
        DelegationTotalRewards queries the total rewards accrued by each
        validator.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
            message,
            QueryDelegationTotalRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegator_validators(
        self,
        message: "QueryDelegatorValidatorsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegatorValidatorsResponse":
        """
        DelegatorValidators queries the validators of a delegator.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
            message,
            QueryDelegatorValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegator_withdraw_address(
        self,
        message: "QueryDelegatorWithdrawAddressRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegatorWithdrawAddressResponse":
        """
        DelegatorWithdrawAddress queries withdraw address of a delegator.
        """

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
            message,
            QueryDelegatorWithdrawAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def community_pool(
        self,
        message: "QueryCommunityPoolRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryCommunityPoolResponse":
        """
        CommunityPool queries the community pool coins.
        """

        if message is None:
            message = QueryCommunityPoolRequest()

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/CommunityPool",
            message,
            QueryCommunityPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...base import v1beta1 as __base__v1beta1__
from ...base.query import v1beta1 as __base__query__v1beta1__
