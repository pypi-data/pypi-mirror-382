# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/crypto/multisig/v1beta1/multisig.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CompactBitArray",
    "MultiSignature",
)

from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class CompactBitArray(betterproto2.Message):
    """
    CompactBitArray is an implementation of a space efficient bit array.
    This is used to ensure that the encoded data takes up a minimal amount of
    space after proto encoding.
    This is not thread safe, and is not intended for concurrent usage.
    """

    extra_bits_stored: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    elems: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "cosmos.crypto.multisig.v1beta1", "CompactBitArray", CompactBitArray
)


@dataclass(eq=False, repr=False)
class MultiSignature(betterproto2.Message):
    """
    MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
    See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
    signed and with which modes.
    """

    signatures: "list[bytes]" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "cosmos.crypto.multisig.v1beta1", "MultiSignature", MultiSignature
)
