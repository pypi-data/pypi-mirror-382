# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/feegrant/v1beta1/feegrant.proto, cosmos/feegrant/v1beta1/genesis.proto, cosmos/feegrant/v1beta1/query.proto, cosmos/feegrant/v1beta1/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AllowedMsgAllowance",
    "BasicAllowance",
    "GenesisState",
    "Grant",
    "MsgAsyncStub",
    "MsgGrantAllowance",
    "MsgGrantAllowanceResponse",
    "MsgPruneAllowances",
    "MsgPruneAllowancesResponse",
    "MsgRevokeAllowance",
    "MsgRevokeAllowanceResponse",
    "MsgStub",
    "PeriodicAllowance",
    "QueryAllowanceRequest",
    "QueryAllowanceResponse",
    "QueryAllowancesByGranterRequest",
    "QueryAllowancesByGranterResponse",
    "QueryAllowancesRequest",
    "QueryAllowancesResponse",
    "QueryAsyncStub",
    "QueryStub",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class AllowedMsgAllowance(betterproto2.Message):
    """
    AllowedMsgAllowance creates allowance only for specified message types.
    """

    allowance: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    allowance can be any of basic and periodic fee allowance.
    """

    allowed_messages: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    allowed_messages are the messages for which the grantee has the access.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "AllowedMsgAllowance", AllowedMsgAllowance
)


@dataclass(eq=False, repr=False)
class BasicAllowance(betterproto2.Message):
    """
    BasicAllowance implements Allowance with a one-time grant of coins
    that optionally expires. The grantee can use up to SpendLimit to cover fees.
    """

    spend_limit: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    spend_limit specifies the maximum amount of coins that can be spent
    by this allowance and will be updated as coins are spent. If it is
    empty, there is no spend limit and any amount of coins can be spent.
    """

    expiration: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    expiration specifies an optional time when this allowance expires
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "BasicAllowance", BasicAllowance
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState contains a set of fee allowances, persisted from the store
    """

    allowances: "list[Grant]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "GenesisState", GenesisState
)


@dataclass(eq=False, repr=False)
class Grant(betterproto2.Message):
    """
    Grant is stored in the KVStore to record a grant with full context
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    granter is the address of the user granting an allowance of their funds.
    """

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    grantee is the address of the user being granted an allowance of another user's funds.
    """

    allowance: "___google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    allowance can be any of basic, periodic, allowed fee allowance.
    """


default_message_pool.register_message("cosmos.feegrant.v1beta1", "Grant", Grant)


@dataclass(eq=False, repr=False)
class MsgGrantAllowance(betterproto2.Message):
    """
    MsgGrantAllowance adds permission for Grantee to spend up to Allowance
    of fees from the account of Granter.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    granter is the address of the user granting an allowance of their funds.
    """

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    grantee is the address of the user being granted an allowance of another user's funds.
    """

    allowance: "___google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    allowance can be any of basic, periodic, allowed fee allowance.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "MsgGrantAllowance", MsgGrantAllowance
)


@dataclass(eq=False, repr=False)
class MsgGrantAllowanceResponse(betterproto2.Message):
    """
    MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "MsgGrantAllowanceResponse", MsgGrantAllowanceResponse
)


@dataclass(eq=False, repr=False)
class MsgPruneAllowances(betterproto2.Message):
    """
    MsgPruneAllowances prunes expired fee allowances.

    Since cosmos-sdk 0.50
    """

    pruner: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    pruner is the address of the user pruning expired allowances.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "MsgPruneAllowances", MsgPruneAllowances
)


@dataclass(eq=False, repr=False)
class MsgPruneAllowancesResponse(betterproto2.Message):
    """
    MsgPruneAllowancesResponse defines the Msg/PruneAllowancesResponse response type.

    Since cosmos-sdk 0.50
    """

    pass


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "MsgPruneAllowancesResponse", MsgPruneAllowancesResponse
)


@dataclass(eq=False, repr=False)
class MsgRevokeAllowance(betterproto2.Message):
    """
    MsgRevokeAllowance removes any existing Allowance from Granter to Grantee.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    granter is the address of the user granting an allowance of their funds.
    """

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    grantee is the address of the user being granted an allowance of another user's funds.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "MsgRevokeAllowance", MsgRevokeAllowance
)


@dataclass(eq=False, repr=False)
class MsgRevokeAllowanceResponse(betterproto2.Message):
    """
    MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type.
    """

    pass


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "MsgRevokeAllowanceResponse", MsgRevokeAllowanceResponse
)


@dataclass(eq=False, repr=False)
class PeriodicAllowance(betterproto2.Message):
    """
    PeriodicAllowance extends Allowance to allow for both a maximum cap,
    as well as a limit per time period.
    """

    basic: "BasicAllowance | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    basic specifies a struct of `BasicAllowance`
    """

    period: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    period specifies the time duration in which period_spend_limit coins can
    be spent before that allowance is reset
    """

    period_spend_limit: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    period_spend_limit specifies the maximum number of coins that can be spent
    in the period
    """

    period_can_spend: "list[__base__v1beta1__.Coin]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    period_can_spend is the number of coins left to be spent before the period_reset time
    """

    period_reset: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    period_reset is the time at which this period resets and a new one begins,
    it is calculated from the start time of the first transaction after the
    last period ended
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "PeriodicAllowance", PeriodicAllowance
)


@dataclass(eq=False, repr=False)
class QueryAllowanceRequest(betterproto2.Message):
    """
    QueryAllowanceRequest is the request type for the Query/Allowance RPC method.
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    granter is the address of the user granting an allowance of their funds.
    """

    grantee: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    grantee is the address of the user being granted an allowance of another user's funds.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "QueryAllowanceRequest", QueryAllowanceRequest
)


@dataclass(eq=False, repr=False)
class QueryAllowanceResponse(betterproto2.Message):
    """
    QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
    """

    allowance: "Grant | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    allowance is a allowance granted for grantee by granter.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "QueryAllowanceResponse", QueryAllowanceResponse
)


@dataclass(eq=False, repr=False)
class QueryAllowancesByGranterRequest(betterproto2.Message):
    """
    QueryAllowancesByGranterRequest is the request type for the Query/AllowancesByGranter RPC method.

    Since: cosmos-sdk 0.46
    """

    granter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1",
    "QueryAllowancesByGranterRequest",
    QueryAllowancesByGranterRequest,
)


@dataclass(eq=False, repr=False)
class QueryAllowancesByGranterResponse(betterproto2.Message):
    """
    QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.

    Since: cosmos-sdk 0.46
    """

    allowances: "list[Grant]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    allowances that have been issued by the granter.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the response.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1",
    "QueryAllowancesByGranterResponse",
    QueryAllowancesByGranterResponse,
)


@dataclass(eq=False, repr=False)
class QueryAllowancesRequest(betterproto2.Message):
    """
    QueryAllowancesRequest is the request type for the Query/Allowances RPC method.
    """

    grantee: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    pagination: "__base__query__v1beta1__.PageRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the request.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "QueryAllowancesRequest", QueryAllowancesRequest
)


@dataclass(eq=False, repr=False)
class QueryAllowancesResponse(betterproto2.Message):
    """
    QueryAllowancesResponse is the response type for the Query/Allowances RPC method.
    """

    allowances: "list[Grant]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    allowances are allowance's granted for grantee by granter.
    """

    pagination: "__base__query__v1beta1__.PageResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    pagination defines an pagination for the response.
    """


default_message_pool.register_message(
    "cosmos.feegrant.v1beta1", "QueryAllowancesResponse", QueryAllowancesResponse
)


class MsgStub:
    """
    Msg defines the feegrant msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def grant_allowance(
        self, message: "MsgGrantAllowance"
    ) -> "MsgGrantAllowanceResponse":
        """
        GrantAllowance grants fee allowance to the grantee on the granter's
        account with the provided expiration time.
        """

        return self._channel.unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/GrantAllowance",
            MsgGrantAllowance.SerializeToString,
            MsgGrantAllowanceResponse.FromString,
        )(message)

    def revoke_allowance(
        self, message: "MsgRevokeAllowance"
    ) -> "MsgRevokeAllowanceResponse":
        """
        RevokeAllowance revokes any fee allowance of granter's account that
        has been granted to the grantee.
        """

        return self._channel.unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/RevokeAllowance",
            MsgRevokeAllowance.SerializeToString,
            MsgRevokeAllowanceResponse.FromString,
        )(message)

    def prune_allowances(
        self, message: "MsgPruneAllowances"
    ) -> "MsgPruneAllowancesResponse":
        """
        PruneAllowances prunes expired fee allowances, currently up to 75 at a time.

        Since cosmos-sdk 0.50
        """

        return self._channel.unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/PruneAllowances",
            MsgPruneAllowances.SerializeToString,
            MsgPruneAllowancesResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the feegrant msg service.
    """

    async def grant_allowance(
        self,
        message: "MsgGrantAllowance",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgGrantAllowanceResponse":
        """
        GrantAllowance grants fee allowance to the grantee on the granter's
        account with the provided expiration time.
        """

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/GrantAllowance",
            message,
            MsgGrantAllowanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_allowance(
        self,
        message: "MsgRevokeAllowance",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRevokeAllowanceResponse":
        """
        RevokeAllowance revokes any fee allowance of granter's account that
        has been granted to the grantee.
        """

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/RevokeAllowance",
            message,
            MsgRevokeAllowanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def prune_allowances(
        self,
        message: "MsgPruneAllowances",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgPruneAllowancesResponse":
        """
        PruneAllowances prunes expired fee allowances, currently up to 75 at a time.

        Since cosmos-sdk 0.50
        """

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/PruneAllowances",
            message,
            MsgPruneAllowancesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Query defines the gRPC querier service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def allowance(self, message: "QueryAllowanceRequest") -> "QueryAllowanceResponse":
        """
        Allowance returns granted allwance to the grantee by the granter.
        """

        return self._channel.unary_unary(
            "/cosmos.feegrant.v1beta1.Query/Allowance",
            QueryAllowanceRequest.SerializeToString,
            QueryAllowanceResponse.FromString,
        )(message)

    def allowances(
        self, message: "QueryAllowancesRequest"
    ) -> "QueryAllowancesResponse":
        """
        Allowances returns all the grants for the given grantee address.
        """

        return self._channel.unary_unary(
            "/cosmos.feegrant.v1beta1.Query/Allowances",
            QueryAllowancesRequest.SerializeToString,
            QueryAllowancesResponse.FromString,
        )(message)

    def allowances_by_granter(
        self, message: "QueryAllowancesByGranterRequest"
    ) -> "QueryAllowancesByGranterResponse":
        """
        AllowancesByGranter returns all the grants given by an address

        Since: cosmos-sdk 0.46
        """

        return self._channel.unary_unary(
            "/cosmos.feegrant.v1beta1.Query/AllowancesByGranter",
            QueryAllowancesByGranterRequest.SerializeToString,
            QueryAllowancesByGranterResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Query defines the gRPC querier service.
    """

    async def allowance(
        self,
        message: "QueryAllowanceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAllowanceResponse":
        """
        Allowance returns granted allwance to the grantee by the granter.
        """

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Query/Allowance",
            message,
            QueryAllowanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def allowances(
        self,
        message: "QueryAllowancesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAllowancesResponse":
        """
        Allowances returns all the grants for the given grantee address.
        """

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Query/Allowances",
            message,
            QueryAllowancesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def allowances_by_granter(
        self,
        message: "QueryAllowancesByGranterRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryAllowancesByGranterResponse":
        """
        AllowancesByGranter returns all the grants given by an address

        Since: cosmos-sdk 0.46
        """

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Query/AllowancesByGranter",
            message,
            QueryAllowancesByGranterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...base import v1beta1 as __base__v1beta1__
from ...base.query import v1beta1 as __base__query__v1beta1__
