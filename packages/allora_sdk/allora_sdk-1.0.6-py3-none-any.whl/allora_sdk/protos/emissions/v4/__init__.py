# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: emissions/v4/events.proto, emissions/v4/params.proto, emissions/v4/query.proto, emissions/v4/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ActorType",
    "AddStakeRequest",
    "AddStakeResponse",
    "AddToWhitelistAdminRequest",
    "AddToWhitelistAdminResponse",
    "CancelRemoveDelegateStakeRequest",
    "CancelRemoveDelegateStakeResponse",
    "CancelRemoveStakeRequest",
    "CancelRemoveStakeResponse",
    "CreateNewTopicRequest",
    "CreateNewTopicResponse",
    "DelegateStakeRequest",
    "DelegateStakeResponse",
    "EventEmaScoresSet",
    "EventForecastTaskScoreSet",
    "EventNetworkLossSet",
    "EventReputerLastCommitSet",
    "EventRewardsSettled",
    "EventScoresSet",
    "EventTopicRewardsSet",
    "EventWorkerLastCommitSet",
    "FundTopicRequest",
    "FundTopicResponse",
    "GetActiveTopicsAtBlockRequest",
    "GetActiveTopicsAtBlockResponse",
    "GetActiveTopicsRequest",
    "GetActiveTopicsResponse",
    "GetCurrentLowestForecasterScoreRequest",
    "GetCurrentLowestForecasterScoreResponse",
    "GetCurrentLowestInfererScoreRequest",
    "GetCurrentLowestInfererScoreResponse",
    "GetCurrentLowestReputerScoreRequest",
    "GetCurrentLowestReputerScoreResponse",
    "GetDelegateRewardPerShareRequest",
    "GetDelegateRewardPerShareResponse",
    "GetDelegateStakeInTopicInReputerRequest",
    "GetDelegateStakeInTopicInReputerResponse",
    "GetDelegateStakePlacementRequest",
    "GetDelegateStakePlacementResponse",
    "GetDelegateStakeRemovalInfoRequest",
    "GetDelegateStakeRemovalInfoResponse",
    "GetDelegateStakeRemovalRequest",
    "GetDelegateStakeRemovalResponse",
    "GetDelegateStakeRemovalsUpUntilBlockRequest",
    "GetDelegateStakeRemovalsUpUntilBlockResponse",
    "GetDelegateStakeUponReputerRequest",
    "GetDelegateStakeUponReputerResponse",
    "GetForecastScoresUntilBlockRequest",
    "GetForecastScoresUntilBlockResponse",
    "GetForecasterNetworkRegretRequest",
    "GetForecasterNetworkRegretResponse",
    "GetForecasterScoreEmaRequest",
    "GetForecasterScoreEmaResponse",
    "GetForecastsAtBlockRequest",
    "GetForecastsAtBlockResponse",
    "GetInferenceScoresUntilBlockRequest",
    "GetInferenceScoresUntilBlockResponse",
    "GetInferencesAtBlockRequest",
    "GetInferencesAtBlockResponse",
    "GetInfererNetworkRegretRequest",
    "GetInfererNetworkRegretResponse",
    "GetInfererScoreEmaRequest",
    "GetInfererScoreEmaResponse",
    "GetLatestAvailableNetworkInferencesRequest",
    "GetLatestAvailableNetworkInferencesResponse",
    "GetLatestNetworkInferencesRequest",
    "GetLatestNetworkInferencesResponse",
    "GetLatestTopicInferencesRequest",
    "GetLatestTopicInferencesResponse",
    "GetListeningCoefficientRequest",
    "GetListeningCoefficientResponse",
    "GetMultiReputerStakeInTopicRequest",
    "GetMultiReputerStakeInTopicResponse",
    "GetNaiveInfererNetworkRegretRequest",
    "GetNaiveInfererNetworkRegretResponse",
    "GetNetworkInferencesAtBlockRequest",
    "GetNetworkInferencesAtBlockResponse",
    "GetNetworkLossBundleAtBlockRequest",
    "GetNetworkLossBundleAtBlockResponse",
    "GetNextChurningBlockByTopicIdRequest",
    "GetNextChurningBlockByTopicIdResponse",
    "GetNextTopicIdRequest",
    "GetNextTopicIdResponse",
    "GetOneInForecasterNetworkRegretRequest",
    "GetOneInForecasterNetworkRegretResponse",
    "GetOneOutForecasterForecasterNetworkRegretRequest",
    "GetOneOutForecasterForecasterNetworkRegretResponse",
    "GetOneOutForecasterInfererNetworkRegretRequest",
    "GetOneOutForecasterInfererNetworkRegretResponse",
    "GetOneOutInfererForecasterNetworkRegretRequest",
    "GetOneOutInfererForecasterNetworkRegretResponse",
    "GetOneOutInfererInfererNetworkRegretRequest",
    "GetOneOutInfererInfererNetworkRegretResponse",
    "GetParamsRequest",
    "GetParamsResponse",
    "GetPreviousForecastRewardFractionRequest",
    "GetPreviousForecastRewardFractionResponse",
    "GetPreviousInferenceRewardFractionRequest",
    "GetPreviousInferenceRewardFractionResponse",
    "GetPreviousPercentageRewardToStakedReputersRequest",
    "GetPreviousPercentageRewardToStakedReputersResponse",
    "GetPreviousReputerRewardFractionRequest",
    "GetPreviousReputerRewardFractionResponse",
    "GetPreviousTopicQuantileForecasterScoreEmaRequest",
    "GetPreviousTopicQuantileForecasterScoreEmaResponse",
    "GetPreviousTopicQuantileInfererScoreEmaRequest",
    "GetPreviousTopicQuantileInfererScoreEmaResponse",
    "GetPreviousTopicQuantileReputerScoreEmaRequest",
    "GetPreviousTopicQuantileReputerScoreEmaResponse",
    "GetPreviousTopicWeightRequest",
    "GetPreviousTopicWeightResponse",
    "GetReputerLossBundlesAtBlockRequest",
    "GetReputerLossBundlesAtBlockResponse",
    "GetReputerNodeInfoRequest",
    "GetReputerNodeInfoResponse",
    "GetReputerScoreEmaRequest",
    "GetReputerScoreEmaResponse",
    "GetReputerStakeInTopicRequest",
    "GetReputerStakeInTopicResponse",
    "GetReputersScoresAtBlockRequest",
    "GetReputersScoresAtBlockResponse",
    "GetStakeFromDelegatorInTopicInReputerRequest",
    "GetStakeFromDelegatorInTopicInReputerResponse",
    "GetStakeFromDelegatorInTopicRequest",
    "GetStakeFromDelegatorInTopicResponse",
    "GetStakeFromReputerInTopicInSelfRequest",
    "GetStakeFromReputerInTopicInSelfResponse",
    "GetStakeRemovalForReputerAndTopicIdRequest",
    "GetStakeRemovalForReputerAndTopicIdResponse",
    "GetStakeRemovalInfoRequest",
    "GetStakeRemovalInfoResponse",
    "GetStakeRemovalsUpUntilBlockRequest",
    "GetStakeRemovalsUpUntilBlockResponse",
    "GetStakeReputerAuthorityRequest",
    "GetStakeReputerAuthorityResponse",
    "GetTopicFeeRevenueRequest",
    "GetTopicFeeRevenueResponse",
    "GetTopicLastReputerCommitInfoRequest",
    "GetTopicLastReputerCommitInfoResponse",
    "GetTopicLastWorkerCommitInfoRequest",
    "GetTopicLastWorkerCommitInfoResponse",
    "GetTopicRequest",
    "GetTopicResponse",
    "GetTopicRewardNonceRequest",
    "GetTopicRewardNonceResponse",
    "GetTopicStakeRequest",
    "GetTopicStakeResponse",
    "GetTotalRewardToDistributeRequest",
    "GetTotalRewardToDistributeResponse",
    "GetTotalStakeRequest",
    "GetTotalStakeResponse",
    "GetUnfulfilledReputerNoncesRequest",
    "GetUnfulfilledReputerNoncesResponse",
    "GetUnfulfilledWorkerNoncesRequest",
    "GetUnfulfilledWorkerNoncesResponse",
    "GetWorkerForecastScoresAtBlockRequest",
    "GetWorkerForecastScoresAtBlockResponse",
    "GetWorkerInferenceScoresAtBlockRequest",
    "GetWorkerInferenceScoresAtBlockResponse",
    "GetWorkerLatestInferenceByTopicIdRequest",
    "GetWorkerLatestInferenceByTopicIdResponse",
    "GetWorkerNodeInfoRequest",
    "GetWorkerNodeInfoResponse",
    "InsertReputerPayloadRequest",
    "InsertReputerPayloadResponse",
    "InsertWorkerPayloadRequest",
    "InsertWorkerPayloadResponse",
    "IsReputerNonceUnfulfilledRequest",
    "IsReputerNonceUnfulfilledResponse",
    "IsReputerRegisteredInTopicIdRequest",
    "IsReputerRegisteredInTopicIdResponse",
    "IsTopicActiveRequest",
    "IsTopicActiveResponse",
    "IsWhitelistAdminRequest",
    "IsWhitelistAdminResponse",
    "IsWorkerNonceUnfulfilledRequest",
    "IsWorkerNonceUnfulfilledResponse",
    "IsWorkerRegisteredInTopicIdRequest",
    "IsWorkerRegisteredInTopicIdResponse",
    "MsgServiceAsyncStub",
    "MsgServiceStub",
    "OptionalParams",
    "Params",
    "QueryServiceAsyncStub",
    "QueryServiceStub",
    "RegisterRequest",
    "RegisterResponse",
    "RemoveDelegateStakeRequest",
    "RemoveDelegateStakeResponse",
    "RemoveFromWhitelistAdminRequest",
    "RemoveFromWhitelistAdminResponse",
    "RemoveRegistrationRequest",
    "RemoveRegistrationResponse",
    "RemoveStakeRequest",
    "RemoveStakeResponse",
    "RewardDelegateStakeRequest",
    "RewardDelegateStakeResponse",
    "TopicExistsRequest",
    "TopicExistsResponse",
    "UpdateParamsRequest",
    "UpdateParamsResponse",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ...message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ActorType(betterproto2.Enum):
    """
    We choose a denormalized schema for events to balance the size and number of
    events, as well as the complexity of likely downstream write and read
    patterns. One likely cares about how the topic performs in totality and may
    want to update topic state after all topic information is in, or in some
    chronological order. If one normalizs by actor type, then the event volume is
    likely to be much higher and one would have to wait an undetermined amount of
    time (how many actors participated
    == how many events to wait for) to update an topic state-level metric.
    Furthermore, we know that the size of each of these messages is bounded by
    the global parameters that bound the max number of actors and topics. If one
    were to track per-actor-per-type metrics, then one immediately knows that
    they were included and participated or not in the topic at a particular block
    height as soon as one event from the topic is recorded.
    """

    INFERER_UNSPECIFIED = 0

    FORECASTER = 1

    REPUTER = 2

    betterproto_proto_names = {
        0: "ACTOR_TYPE_INFERER_UNSPECIFIED",
        1: "ACTOR_TYPE_FORECASTER",
        2: "ACTOR_TYPE_REPUTER",
    }


@dataclass(eq=False, repr=False)
class AddStakeRequest(betterproto2.Message):
    """
    /  Staking
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "AddStakeRequest", AddStakeRequest
)


@dataclass(eq=False, repr=False)
class AddStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "AddStakeResponse", AddStakeResponse
)


@dataclass(eq=False, repr=False)
class AddToWhitelistAdminRequest(betterproto2.Message):
    """
    /  Whitelist
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "AddToWhitelistAdminRequest", AddToWhitelistAdminRequest
)


@dataclass(eq=False, repr=False)
class AddToWhitelistAdminResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "AddToWhitelistAdminResponse", AddToWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class CancelRemoveDelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "CancelRemoveDelegateStakeRequest", CancelRemoveDelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class CancelRemoveDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4",
    "CancelRemoveDelegateStakeResponse",
    CancelRemoveDelegateStakeResponse,
)


@dataclass(eq=False, repr=False)
class CancelRemoveStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "CancelRemoveStakeRequest", CancelRemoveStakeRequest
)


@dataclass(eq=False, repr=False)
class CancelRemoveStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "CancelRemoveStakeResponse", CancelRemoveStakeResponse
)


@dataclass(eq=False, repr=False)
class CreateNewTopicRequest(betterproto2.Message):
    """
    / TOPICS
    """

    creator: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    creator is the message sender.
    """

    metadata: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    loss_method: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    epoch_length: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)

    ground_truth_lag: "int" = betterproto2.field(8, betterproto2.TYPE_INT64)

    p_norm: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)

    alpha_regret: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)

    allow_negative: "bool" = betterproto2.field(12, betterproto2.TYPE_BOOL)

    epsilon: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    worker_submission_window: "int" = betterproto2.field(14, betterproto2.TYPE_INT64)

    merit_sortition_alpha: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    active_inferer_quantile: "str" = betterproto2.field(16, betterproto2.TYPE_STRING)

    active_forecaster_quantile: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)

    active_reputer_quantile: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "CreateNewTopicRequest", CreateNewTopicRequest
)


@dataclass(eq=False, repr=False)
class CreateNewTopicResponse(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "CreateNewTopicResponse", CreateNewTopicResponse
)


@dataclass(eq=False, repr=False)
class DelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "DelegateStakeRequest", DelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class DelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "DelegateStakeResponse", DelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class EventEmaScoresSet(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    nonce: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    scores: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)

    is_active: "list[bool]" = betterproto2.field(
        6, betterproto2.TYPE_BOOL, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4", "EventEMAScoresSet", EventEmaScoresSet
)


@dataclass(eq=False, repr=False)
class EventForecastTaskScoreSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    score: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "EventForecastTaskScoreSet", EventForecastTaskScoreSet
)


@dataclass(eq=False, repr=False)
class EventNetworkLossSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    value_bundle: "_v3__.ValueBundle | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "EventNetworkLossSet", EventNetworkLossSet
)


@dataclass(eq=False, repr=False)
class EventReputerLastCommitSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    nonce: "_v3__.Nonce | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "EventReputerLastCommitSet", EventReputerLastCommitSet
)


@dataclass(eq=False, repr=False)
class EventRewardsSettled(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    rewards: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4", "EventRewardsSettled", EventRewardsSettled
)


@dataclass(eq=False, repr=False)
class EventScoresSet(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    scores: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message("emissions.v4", "EventScoresSet", EventScoresSet)


@dataclass(eq=False, repr=False)
class EventTopicRewardsSet(betterproto2.Message):
    topic_ids: "list[int]" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, repeated=True
    )

    rewards: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4", "EventTopicRewardsSet", EventTopicRewardsSet
)


@dataclass(eq=False, repr=False)
class EventWorkerLastCommitSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    nonce: "_v3__.Nonce | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "EventWorkerLastCommitSet", EventWorkerLastCommitSet
)


@dataclass(eq=False, repr=False)
class FundTopicRequest(betterproto2.Message):
    """
    Inferences are requested by consumers who fund topics by sending ALLO to
    ecosystem account via TopicFund messages
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    how many funds to send from alice with this Inference Request
    """


default_message_pool.register_message(
    "emissions.v4", "FundTopicRequest", FundTopicRequest
)


@dataclass(eq=False, repr=False)
class FundTopicResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "FundTopicResponse", FundTopicResponse
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsAtBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "GetActiveTopicsAtBlockRequest", GetActiveTopicsAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsAtBlockResponse(betterproto2.Message):
    topics: "list[_v3__.Topic]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "_v3__.SimpleCursorPaginationResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetActiveTopicsAtBlockResponse", GetActiveTopicsAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsRequest(betterproto2.Message):
    pagination: "_v3__.SimpleCursorPaginationRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetActiveTopicsRequest", GetActiveTopicsRequest
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsResponse(betterproto2.Message):
    topics: "list[_v3__.Topic]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "_v3__.SimpleCursorPaginationResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetActiveTopicsResponse", GetActiveTopicsResponse
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestForecasterScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetCurrentLowestForecasterScoreRequest",
    GetCurrentLowestForecasterScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestForecasterScoreResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetCurrentLowestForecasterScoreResponse",
    GetCurrentLowestForecasterScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestInfererScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetCurrentLowestInfererScoreRequest",
    GetCurrentLowestInfererScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestInfererScoreResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetCurrentLowestInfererScoreResponse",
    GetCurrentLowestInfererScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestReputerScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetCurrentLowestReputerScoreRequest",
    GetCurrentLowestReputerScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestReputerScoreResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetCurrentLowestReputerScoreResponse",
    GetCurrentLowestReputerScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateRewardPerShareRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetDelegateRewardPerShareRequest", GetDelegateRewardPerShareRequest
)


@dataclass(eq=False, repr=False)
class GetDelegateRewardPerShareResponse(betterproto2.Message):
    reward_per_share: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateRewardPerShareResponse",
    GetDelegateRewardPerShareResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeInTopicInReputerRequest(betterproto2.Message):
    reputer_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeInTopicInReputerRequest",
    GetDelegateStakeInTopicInReputerRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeInTopicInReputerResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeInTopicInReputerResponse",
    GetDelegateStakeInTopicInReputerResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakePlacementRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    target: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetDelegateStakePlacementRequest", GetDelegateStakePlacementRequest
)


@dataclass(eq=False, repr=False)
class GetDelegateStakePlacementResponse(betterproto2.Message):
    delegator_info: "_v3__.DelegatorInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakePlacementResponse",
    GetDelegateStakePlacementResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeRemovalInfoRequest",
    GetDelegateStakeRemovalInfoRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalInfoResponse(betterproto2.Message):
    removal: "_v3__.DelegateStakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeRemovalInfoResponse",
    GetDelegateStakeRemovalInfoResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetDelegateStakeRemovalRequest", GetDelegateStakeRemovalRequest
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalResponse(betterproto2.Message):
    stake_removal_info: "_v3__.DelegateStakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetDelegateStakeRemovalResponse", GetDelegateStakeRemovalResponse
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalsUpUntilBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeRemovalsUpUntilBlockRequest",
    GetDelegateStakeRemovalsUpUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalsUpUntilBlockResponse(betterproto2.Message):
    removals: "list[_v3__.DelegateStakeRemovalInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeRemovalsUpUntilBlockResponse",
    GetDelegateStakeRemovalsUpUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeUponReputerRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    target: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeUponReputerRequest",
    GetDelegateStakeUponReputerRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeUponReputerResponse(betterproto2.Message):
    stake: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetDelegateStakeUponReputerResponse",
    GetDelegateStakeUponReputerResponse,
)


@dataclass(eq=False, repr=False)
class GetForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetForecasterNetworkRegretRequest",
    GetForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetForecasterNetworkRegretResponse",
    GetForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetForecasterScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetForecasterScoreEmaRequest", GetForecasterScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class GetForecasterScoreEmaResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetForecasterScoreEmaResponse", GetForecasterScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class GetForecastsAtBlockRequest(betterproto2.Message):
    """
    Returns the forecasts on a topic posted at a block height
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "GetForecastsAtBlockRequest", GetForecastsAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetForecastsAtBlockResponse(betterproto2.Message):
    """
    Returns the forecasts on a topic posted at a block height

    NOTE: The amount field is a Uint which implements the custom method
    signatures required by gogoproto.
    """

    forecasts: "_v3__.Forecasts | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetForecastsAtBlockResponse", GetForecastsAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetForecastScoresUntilBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetForecastScoresUntilBlockRequest",
    GetForecastScoresUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetForecastScoresUntilBlockResponse(betterproto2.Message):
    scores: "list[_v3__.Score]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetForecastScoresUntilBlockResponse",
    GetForecastScoresUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetInferencesAtBlockRequest(betterproto2.Message):
    """
    Returns the inferences on a topic posted at a block height
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "GetInferencesAtBlockRequest", GetInferencesAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetInferencesAtBlockResponse(betterproto2.Message):
    """
    Returns the inferences on a topic posted at a block height

    NOTE: The amount field is a Uint which implements the custom method
    signatures required by gogoproto.
    """

    inferences: "_v3__.Inferences | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetInferencesAtBlockResponse", GetInferencesAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetInferenceScoresUntilBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetInferenceScoresUntilBlockRequest",
    GetInferenceScoresUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetInferenceScoresUntilBlockResponse(betterproto2.Message):
    scores: "list[_v3__.Score]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetInferenceScoresUntilBlockResponse",
    GetInferenceScoresUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetInfererNetworkRegretRequest", GetInfererNetworkRegretRequest
)


@dataclass(eq=False, repr=False)
class GetInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetInfererNetworkRegretResponse", GetInfererNetworkRegretResponse
)


@dataclass(eq=False, repr=False)
class GetInfererScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetInfererScoreEmaRequest", GetInfererScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class GetInfererScoreEmaResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetInfererScoreEmaResponse", GetInfererScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetLatestAvailableNetworkInferencesRequest",
    GetLatestAvailableNetworkInferencesRequest,
)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecast_implied_inferences: "list[_v3__.WorkerAttributedValue]" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetLatestAvailableNetworkInferencesResponse",
    GetLatestAvailableNetworkInferencesResponse,
)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetLatestNetworkInferencesRequest",
    GetLatestNetworkInferencesRequest,
)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecast_implied_inferences: "list[_v3__.WorkerAttributedValue]" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetLatestNetworkInferencesResponse",
    GetLatestNetworkInferencesResponse,
)


@dataclass(eq=False, repr=False)
class GetLatestTopicInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetLatestTopicInferencesRequest", GetLatestTopicInferencesRequest
)


@dataclass(eq=False, repr=False)
class GetLatestTopicInferencesResponse(betterproto2.Message):
    inferences: "_v3__.Inferences | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "GetLatestTopicInferencesResponse", GetLatestTopicInferencesResponse
)


@dataclass(eq=False, repr=False)
class GetListeningCoefficientRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetListeningCoefficientRequest", GetListeningCoefficientRequest
)


@dataclass(eq=False, repr=False)
class GetListeningCoefficientResponse(betterproto2.Message):
    listening_coefficient: "_v3__.ListeningCoefficient | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetListeningCoefficientResponse", GetListeningCoefficientResponse
)


@dataclass(eq=False, repr=False)
class GetMultiReputerStakeInTopicRequest(betterproto2.Message):
    addresses: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetMultiReputerStakeInTopicRequest",
    GetMultiReputerStakeInTopicRequest,
)


@dataclass(eq=False, repr=False)
class GetMultiReputerStakeInTopicResponse(betterproto2.Message):
    amounts: "list[_v3__.StakeInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetMultiReputerStakeInTopicResponse",
    GetMultiReputerStakeInTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetNaiveInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetNaiveInfererNetworkRegretRequest",
    GetNaiveInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetNaiveInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetNaiveInfererNetworkRegretResponse",
    GetNaiveInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height_last_inference: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetNetworkInferencesAtBlockRequest",
    GetNetworkInferencesAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetNetworkInferencesAtBlockResponse",
    GetNetworkInferencesAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetNetworkLossBundleAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetNetworkLossBundleAtBlockRequest",
    GetNetworkLossBundleAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetNetworkLossBundleAtBlockResponse(betterproto2.Message):
    loss_bundle: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetNetworkLossBundleAtBlockResponse",
    GetNetworkLossBundleAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetNextChurningBlockByTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetNextChurningBlockByTopicIdRequest",
    GetNextChurningBlockByTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class GetNextChurningBlockByTopicIdResponse(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetNextChurningBlockByTopicIdResponse",
    GetNextChurningBlockByTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class GetNextTopicIdRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "GetNextTopicIdRequest", GetNextTopicIdRequest
)


@dataclass(eq=False, repr=False)
class GetNextTopicIdResponse(betterproto2.Message):
    next_topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetNextTopicIdResponse", GetNextTopicIdResponse
)


@dataclass(eq=False, repr=False)
class GetOneInForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetOneInForecasterNetworkRegretRequest",
    GetOneInForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneInForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetOneInForecasterNetworkRegretResponse",
    GetOneInForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutForecasterForecasterNetworkRegretRequest",
    GetOneOutForecasterForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutForecasterForecasterNetworkRegretResponse",
    GetOneOutForecasterForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutForecasterInfererNetworkRegretRequest",
    GetOneOutForecasterInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutForecasterInfererNetworkRegretResponse",
    GetOneOutForecasterInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutInfererForecasterNetworkRegretRequest",
    GetOneOutInfererForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutInfererForecasterNetworkRegretResponse",
    GetOneOutInfererForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutInfererInfererNetworkRegretRequest",
    GetOneOutInfererInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetOneOutInfererInfererNetworkRegretResponse",
    GetOneOutInfererInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetParamsRequest(betterproto2.Message):
    """
    GetParamsRequest is the request type for the Get/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "emissions.v4", "GetParamsRequest", GetParamsRequest
)


@dataclass(eq=False, repr=False)
class GetParamsResponse(betterproto2.Message):
    """
    GetParamsResponse is the response type for the Get/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "emissions.v4", "GetParamsResponse", GetParamsResponse
)


@dataclass(eq=False, repr=False)
class GetPreviousForecastRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousForecastRewardFractionRequest",
    GetPreviousForecastRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousForecastRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousForecastRewardFractionResponse",
    GetPreviousForecastRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousInferenceRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousInferenceRewardFractionRequest",
    GetPreviousInferenceRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousInferenceRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousInferenceRewardFractionResponse",
    GetPreviousInferenceRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousPercentageRewardToStakedReputersRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousPercentageRewardToStakedReputersRequest",
    GetPreviousPercentageRewardToStakedReputersRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousPercentageRewardToStakedReputersResponse(betterproto2.Message):
    percentage_reward: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousPercentageRewardToStakedReputersResponse",
    GetPreviousPercentageRewardToStakedReputersResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousReputerRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousReputerRewardFractionRequest",
    GetPreviousReputerRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousReputerRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousReputerRewardFractionResponse",
    GetPreviousReputerRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileForecasterScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousTopicQuantileForecasterScoreEmaRequest",
    GetPreviousTopicQuantileForecasterScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileForecasterScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousTopicQuantileForecasterScoreEmaResponse",
    GetPreviousTopicQuantileForecasterScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileInfererScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousTopicQuantileInfererScoreEmaRequest",
    GetPreviousTopicQuantileInfererScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileInfererScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousTopicQuantileInfererScoreEmaResponse",
    GetPreviousTopicQuantileInfererScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileReputerScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousTopicQuantileReputerScoreEmaRequest",
    GetPreviousTopicQuantileReputerScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileReputerScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetPreviousTopicQuantileReputerScoreEmaResponse",
    GetPreviousTopicQuantileReputerScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicWeightRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetPreviousTopicWeightRequest", GetPreviousTopicWeightRequest
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicWeightResponse(betterproto2.Message):
    weight: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4", "GetPreviousTopicWeightResponse", GetPreviousTopicWeightResponse
)


@dataclass(eq=False, repr=False)
class GetReputerLossBundlesAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetReputerLossBundlesAtBlockRequest",
    GetReputerLossBundlesAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetReputerLossBundlesAtBlockResponse(betterproto2.Message):
    loss_bundles: "_v3__.ReputerValueBundles | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetReputerLossBundlesAtBlockResponse",
    GetReputerLossBundlesAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetReputerNodeInfoRequest(betterproto2.Message):
    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetReputerNodeInfoRequest", GetReputerNodeInfoRequest
)


@dataclass(eq=False, repr=False)
class GetReputerNodeInfoResponse(betterproto2.Message):
    node_info: "_v3__.OffchainNode | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetReputerNodeInfoResponse", GetReputerNodeInfoResponse
)


@dataclass(eq=False, repr=False)
class GetReputerScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetReputerScoreEmaRequest", GetReputerScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class GetReputerScoreEmaResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetReputerScoreEmaResponse", GetReputerScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class GetReputersScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "GetReputersScoresAtBlockRequest", GetReputersScoresAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetReputersScoresAtBlockResponse(betterproto2.Message):
    scores: "_v3__.Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetReputersScoresAtBlockResponse", GetReputersScoresAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetReputerStakeInTopicRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetReputerStakeInTopicRequest", GetReputerStakeInTopicRequest
)


@dataclass(eq=False, repr=False)
class GetReputerStakeInTopicResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetReputerStakeInTopicResponse", GetReputerStakeInTopicResponse
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicInReputerRequest(betterproto2.Message):
    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeFromDelegatorInTopicInReputerRequest",
    GetStakeFromDelegatorInTopicInReputerRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicInReputerResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeFromDelegatorInTopicInReputerResponse",
    GetStakeFromDelegatorInTopicInReputerResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicRequest(betterproto2.Message):
    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeFromDelegatorInTopicRequest",
    GetStakeFromDelegatorInTopicRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeFromDelegatorInTopicResponse",
    GetStakeFromDelegatorInTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeFromReputerInTopicInSelfRequest(betterproto2.Message):
    reputer_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeFromReputerInTopicInSelfRequest",
    GetStakeFromReputerInTopicInSelfRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeFromReputerInTopicInSelfResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeFromReputerInTopicInSelfResponse",
    GetStakeFromReputerInTopicInSelfResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalForReputerAndTopicIdRequest(betterproto2.Message):
    reputer: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeRemovalForReputerAndTopicIdRequest",
    GetStakeRemovalForReputerAndTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalForReputerAndTopicIdResponse(betterproto2.Message):
    stake_removal_info: "_v3__.StakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeRemovalForReputerAndTopicIdResponse",
    GetStakeRemovalForReputerAndTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetStakeRemovalInfoRequest", GetStakeRemovalInfoRequest
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalInfoResponse(betterproto2.Message):
    removal: "_v3__.StakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetStakeRemovalInfoResponse", GetStakeRemovalInfoResponse
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalsUpUntilBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeRemovalsUpUntilBlockRequest",
    GetStakeRemovalsUpUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalsUpUntilBlockResponse(betterproto2.Message):
    removals: "list[_v3__.StakeRemovalInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetStakeRemovalsUpUntilBlockResponse",
    GetStakeRemovalsUpUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeReputerAuthorityRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetStakeReputerAuthorityRequest", GetStakeReputerAuthorityRequest
)


@dataclass(eq=False, repr=False)
class GetStakeReputerAuthorityResponse(betterproto2.Message):
    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetStakeReputerAuthorityResponse", GetStakeReputerAuthorityResponse
)


@dataclass(eq=False, repr=False)
class GetTopicFeeRevenueRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetTopicFeeRevenueRequest", GetTopicFeeRevenueRequest
)


@dataclass(eq=False, repr=False)
class GetTopicFeeRevenueResponse(betterproto2.Message):
    fee_revenue: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetTopicFeeRevenueResponse", GetTopicFeeRevenueResponse
)


@dataclass(eq=False, repr=False)
class GetTopicLastReputerCommitInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetTopicLastReputerCommitInfoRequest",
    GetTopicLastReputerCommitInfoRequest,
)


@dataclass(eq=False, repr=False)
class GetTopicLastReputerCommitInfoResponse(betterproto2.Message):
    last_commit: "_v3__.TimestampedActorNonce | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetTopicLastReputerCommitInfoResponse",
    GetTopicLastReputerCommitInfoResponse,
)


@dataclass(eq=False, repr=False)
class GetTopicLastWorkerCommitInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetTopicLastWorkerCommitInfoRequest",
    GetTopicLastWorkerCommitInfoRequest,
)


@dataclass(eq=False, repr=False)
class GetTopicLastWorkerCommitInfoResponse(betterproto2.Message):
    last_commit: "_v3__.TimestampedActorNonce | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetTopicLastWorkerCommitInfoResponse",
    GetTopicLastWorkerCommitInfoResponse,
)


@dataclass(eq=False, repr=False)
class GetTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetTopicRequest", GetTopicRequest
)


@dataclass(eq=False, repr=False)
class GetTopicResponse(betterproto2.Message):
    topic: "_v3__.Topic | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    weight: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    effective_revenue: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetTopicResponse", GetTopicResponse
)


@dataclass(eq=False, repr=False)
class GetTopicRewardNonceRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetTopicRewardNonceRequest", GetTopicRewardNonceRequest
)


@dataclass(eq=False, repr=False)
class GetTopicRewardNonceResponse(betterproto2.Message):
    nonce: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "GetTopicRewardNonceResponse", GetTopicRewardNonceResponse
)


@dataclass(eq=False, repr=False)
class GetTopicStakeRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "GetTopicStakeRequest", GetTopicStakeRequest
)


@dataclass(eq=False, repr=False)
class GetTopicStakeResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetTopicStakeResponse", GetTopicStakeResponse
)


@dataclass(eq=False, repr=False)
class GetTotalRewardToDistributeRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4",
    "GetTotalRewardToDistributeRequest",
    GetTotalRewardToDistributeRequest,
)


@dataclass(eq=False, repr=False)
class GetTotalRewardToDistributeResponse(betterproto2.Message):
    total_reward: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetTotalRewardToDistributeResponse",
    GetTotalRewardToDistributeResponse,
)


@dataclass(eq=False, repr=False)
class GetTotalStakeRequest(betterproto2.Message):
    """
    Total Stake returns the total amount of stake in the system
    """

    pass


default_message_pool.register_message(
    "emissions.v4", "GetTotalStakeRequest", GetTotalStakeRequest
)


@dataclass(eq=False, repr=False)
class GetTotalStakeResponse(betterproto2.Message):
    """
    Total Stake returns the total amount of stake in the system

    NOTE: The amount field is an Int which implements the custom method
    signatures required by gogoproto.
    """

    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetTotalStakeResponse", GetTotalStakeResponse
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledReputerNoncesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetUnfulfilledReputerNoncesRequest",
    GetUnfulfilledReputerNoncesRequest,
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledReputerNoncesResponse(betterproto2.Message):
    nonces: "_v3__.ReputerRequestNonces | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetUnfulfilledReputerNoncesResponse",
    GetUnfulfilledReputerNoncesResponse,
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledWorkerNoncesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetUnfulfilledWorkerNoncesRequest",
    GetUnfulfilledWorkerNoncesRequest,
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledWorkerNoncesResponse(betterproto2.Message):
    nonces: "_v3__.Nonces | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetUnfulfilledWorkerNoncesResponse",
    GetUnfulfilledWorkerNoncesResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerForecastScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetWorkerForecastScoresAtBlockRequest",
    GetWorkerForecastScoresAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetWorkerForecastScoresAtBlockResponse(betterproto2.Message):
    scores: "_v3__.Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetWorkerForecastScoresAtBlockResponse",
    GetWorkerForecastScoresAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerInferenceScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4",
    "GetWorkerInferenceScoresAtBlockRequest",
    GetWorkerInferenceScoresAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetWorkerInferenceScoresAtBlockResponse(betterproto2.Message):
    scores: "_v3__.Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetWorkerInferenceScoresAtBlockResponse",
    GetWorkerInferenceScoresAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerLatestInferenceByTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "GetWorkerLatestInferenceByTopicIdRequest",
    GetWorkerLatestInferenceByTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class GetWorkerLatestInferenceByTopicIdResponse(betterproto2.Message):
    latest_inference: "_v3__.Inference | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4",
    "GetWorkerLatestInferenceByTopicIdResponse",
    GetWorkerLatestInferenceByTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerNodeInfoRequest(betterproto2.Message):
    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "GetWorkerNodeInfoRequest", GetWorkerNodeInfoRequest
)


@dataclass(eq=False, repr=False)
class GetWorkerNodeInfoResponse(betterproto2.Message):
    node_info: "_v3__.OffchainNode | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "GetWorkerNodeInfoResponse", GetWorkerNodeInfoResponse
)


@dataclass(eq=False, repr=False)
class InsertReputerPayloadRequest(betterproto2.Message):
    """
    / Worker and Reputer Interface
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer_value_bundle: "_v3__.ReputerValueBundle | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "InsertReputerPayloadRequest", InsertReputerPayloadRequest
)


@dataclass(eq=False, repr=False)
class InsertReputerPayloadResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "InsertReputerPayloadResponse", InsertReputerPayloadResponse
)


@dataclass(eq=False, repr=False)
class InsertWorkerPayloadRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    worker_data_bundle: "_v3__.WorkerDataBundle | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "InsertWorkerPayloadRequest", InsertWorkerPayloadRequest
)


@dataclass(eq=False, repr=False)
class InsertWorkerPayloadResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "InsertWorkerPayloadResponse", InsertWorkerPayloadResponse
)


@dataclass(eq=False, repr=False)
class IsReputerNonceUnfulfilledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "IsReputerNonceUnfulfilledRequest", IsReputerNonceUnfulfilledRequest
)


@dataclass(eq=False, repr=False)
class IsReputerNonceUnfulfilledResponse(betterproto2.Message):
    is_reputer_nonce_unfulfilled: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4",
    "IsReputerNonceUnfulfilledResponse",
    IsReputerNonceUnfulfilledResponse,
)


@dataclass(eq=False, repr=False)
class IsReputerRegisteredInTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "IsReputerRegisteredInTopicIdRequest",
    IsReputerRegisteredInTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class IsReputerRegisteredInTopicIdResponse(betterproto2.Message):
    is_registered: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4",
    "IsReputerRegisteredInTopicIdResponse",
    IsReputerRegisteredInTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class IsTopicActiveRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "IsTopicActiveRequest", IsTopicActiveRequest
)


@dataclass(eq=False, repr=False)
class IsTopicActiveResponse(betterproto2.Message):
    is_active: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4", "IsTopicActiveResponse", IsTopicActiveResponse
)


@dataclass(eq=False, repr=False)
class IsWhitelistAdminRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "IsWhitelistAdminRequest", IsWhitelistAdminRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistAdminResponse(betterproto2.Message):
    is_admin: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4", "IsWhitelistAdminResponse", IsWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class IsWorkerNonceUnfulfilledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v4", "IsWorkerNonceUnfulfilledRequest", IsWorkerNonceUnfulfilledRequest
)


@dataclass(eq=False, repr=False)
class IsWorkerNonceUnfulfilledResponse(betterproto2.Message):
    is_worker_nonce_unfulfilled: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4", "IsWorkerNonceUnfulfilledResponse", IsWorkerNonceUnfulfilledResponse
)


@dataclass(eq=False, repr=False)
class IsWorkerRegisteredInTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4",
    "IsWorkerRegisteredInTopicIdRequest",
    IsWorkerRegisteredInTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class IsWorkerRegisteredInTopicIdResponse(betterproto2.Message):
    is_registered: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4",
    "IsWorkerRegisteredInTopicIdResponse",
    IsWorkerRegisteredInTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class OptionalParams(betterproto2.Message):
    """
    / PARAMS

    Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
    and including google themselves
    https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
    we instead use a repeated field with a single element to represent an
    optional field and if the repeated field is empty, it is considered to be the
    same as if the field was not set
    """

    version: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    max_serialized_msg_length: "list[int]" = betterproto2.field(
        2, betterproto2.TYPE_INT64, repeated=True
    )

    min_topic_weight: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    required_minimum_stake: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )

    remove_stake_delay_window: "list[int]" = betterproto2.field(
        6, betterproto2.TYPE_INT64, repeated=True
    )

    min_epoch_length: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_INT64, repeated=True
    )

    beta_entropy: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )

    learning_rate: "list[str]" = betterproto2.field(
        9, betterproto2.TYPE_STRING, repeated=True
    )

    max_gradient_threshold: "list[str]" = betterproto2.field(
        10, betterproto2.TYPE_STRING, repeated=True
    )

    min_stake_fraction: "list[str]" = betterproto2.field(
        11, betterproto2.TYPE_STRING, repeated=True
    )

    max_unfulfilled_worker_requests: "list[int]" = betterproto2.field(
        13, betterproto2.TYPE_UINT64, repeated=True
    )

    max_unfulfilled_reputer_requests: "list[int]" = betterproto2.field(
        14, betterproto2.TYPE_UINT64, repeated=True
    )

    topic_reward_stake_importance: "list[str]" = betterproto2.field(
        15, betterproto2.TYPE_STRING, repeated=True
    )

    topic_reward_fee_revenue_importance: "list[str]" = betterproto2.field(
        16, betterproto2.TYPE_STRING, repeated=True
    )

    topic_reward_alpha: "list[str]" = betterproto2.field(
        17, betterproto2.TYPE_STRING, repeated=True
    )

    task_reward_alpha: "list[str]" = betterproto2.field(
        18, betterproto2.TYPE_STRING, repeated=True
    )

    validators_vs_allora_percent_reward: "list[str]" = betterproto2.field(
        19, betterproto2.TYPE_STRING, repeated=True
    )

    max_samples_to_scale_scores: "list[int]" = betterproto2.field(
        20, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_inferers_to_reward: "list[int]" = betterproto2.field(
        21, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_forecasters_to_reward: "list[int]" = betterproto2.field(
        22, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_reputers_to_reward: "list[int]" = betterproto2.field(
        23, betterproto2.TYPE_UINT64, repeated=True
    )

    create_topic_fee: "list[str]" = betterproto2.field(
        24, betterproto2.TYPE_STRING, repeated=True
    )

    gradient_descent_max_iters: "list[int]" = betterproto2.field(
        25, betterproto2.TYPE_UINT64, repeated=True
    )

    registration_fee: "list[str]" = betterproto2.field(
        28, betterproto2.TYPE_STRING, repeated=True
    )

    default_page_limit: "list[int]" = betterproto2.field(
        29, betterproto2.TYPE_UINT64, repeated=True
    )

    max_page_limit: "list[int]" = betterproto2.field(
        30, betterproto2.TYPE_UINT64, repeated=True
    )

    min_epoch_length_record_limit: "list[int]" = betterproto2.field(
        31, betterproto2.TYPE_INT64, repeated=True
    )

    blocks_per_month: "list[int]" = betterproto2.field(
        32, betterproto2.TYPE_UINT64, repeated=True
    )

    p_reward_inference: "list[str]" = betterproto2.field(
        33, betterproto2.TYPE_STRING, repeated=True
    )

    p_reward_forecast: "list[str]" = betterproto2.field(
        34, betterproto2.TYPE_STRING, repeated=True
    )

    p_reward_reputer: "list[str]" = betterproto2.field(
        35, betterproto2.TYPE_STRING, repeated=True
    )

    c_reward_inference: "list[str]" = betterproto2.field(
        36, betterproto2.TYPE_STRING, repeated=True
    )

    c_reward_forecast: "list[str]" = betterproto2.field(
        37, betterproto2.TYPE_STRING, repeated=True
    )

    c_norm: "list[str]" = betterproto2.field(
        38, betterproto2.TYPE_STRING, repeated=True
    )

    epsilon_reputer: "list[str]" = betterproto2.field(
        40, betterproto2.TYPE_STRING, repeated=True
    )

    half_max_process_stake_removals_end_block: "list[int]" = betterproto2.field(
        42, betterproto2.TYPE_UINT64, repeated=True
    )

    data_sending_fee: "list[str]" = betterproto2.field(
        43, betterproto2.TYPE_STRING, repeated=True
    )

    epsilon_safe_div: "list[str]" = betterproto2.field(
        44, betterproto2.TYPE_STRING, repeated=True
    )

    max_elements_per_forecast: "list[int]" = betterproto2.field(
        45, betterproto2.TYPE_UINT64, repeated=True
    )

    max_active_topics_per_block: "list[int]" = betterproto2.field(
        46, betterproto2.TYPE_UINT64, repeated=True
    )

    max_string_length: "list[int]" = betterproto2.field(
        47, betterproto2.TYPE_UINT64, repeated=True
    )


default_message_pool.register_message("emissions.v4", "OptionalParams", OptionalParams)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters of the module.
    """

    version: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    version of the protocol should be in lockstep with
    """

    max_serialized_msg_length: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    github release tag version

    max length of input data for msg and query server calls
    """

    min_topic_weight: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    total unmet demand for a topic < this => don't run inference
    """

    required_minimum_stake: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    solicatation or weight-adjustment

    minimum amount of tokens to send to stake as a reputer or worker
    """

    remove_stake_delay_window: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)
    """
    how long to wait (blocks) before allowed to remove stake
    """

    min_epoch_length: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)
    """
    fastest allowable topic epoch and cadence of a
    """

    beta_entropy: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    repeating inference request

    controls resilience of reward payouts against copycat workers
    """

    learning_rate: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)
    """
    speed of gradient descent
    """

    max_gradient_threshold: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    gradient descent stops when gradient falls below this
    """

    min_stake_fraction: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)
    """
    minimum fraction of stake to listen to when setting consensus listening
    """

    max_unfulfilled_worker_requests: "int" = betterproto2.field(
        13, betterproto2.TYPE_UINT64
    )
    """
    coefficients

    max num worker request nonces to keep track of per topic
    """

    max_unfulfilled_reputer_requests: "int" = betterproto2.field(
        14, betterproto2.TYPE_UINT64
    )
    """
    max num reputer request nonces to keep track of per topic
    """

    topic_reward_stake_importance: "str" = betterproto2.field(
        15, betterproto2.TYPE_STRING
    )
    """
    The exponent μ represents the importance of stake in the reward of a
    """

    topic_reward_fee_revenue_importance: "str" = betterproto2.field(
        16, betterproto2.TYPE_STRING
    )
    """
    topic and has a fiducial value of 0.5

    The exponent ν represents the importance of fee revenue in the reward of
    """

    topic_reward_alpha: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)
    """
    a topic and has a fiducial value of 0.5

    global exponential moving average parameter. Fiducial value of 0.9375 on
    """

    task_reward_alpha: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)
    """
    a monthly timescale, 0.5 for weekly updates

    global exponential moving average parameter. Fiducial value of 0.1 used
    """

    validators_vs_allora_percent_reward: "str" = betterproto2.field(
        19, betterproto2.TYPE_STRING
    )
    """
    to calculate ~U_ij, ~V_ik, ~W_im

    percent of total supply rewarded to cosmos network validators, rest goes
    """

    max_samples_to_scale_scores: "int" = betterproto2.field(
        20, betterproto2.TYPE_UINT64
    )
    """
    to allora reputers workers etc

    number of scores to use for standard deviation calculation
    """

    max_top_inferers_to_reward: "int" = betterproto2.field(21, betterproto2.TYPE_UINT64)
    """
    max number of top inferers by score to reward
    """

    max_top_forecasters_to_reward: "int" = betterproto2.field(
        22, betterproto2.TYPE_UINT64
    )
    """
    max number of top forecasters by score to reward
    """

    max_top_reputers_to_reward: "int" = betterproto2.field(23, betterproto2.TYPE_UINT64)
    """
    max number of top reputers by score to reward
    """

    create_topic_fee: "str" = betterproto2.field(24, betterproto2.TYPE_STRING)
    """
    topic registration fee
    """

    gradient_descent_max_iters: "int" = betterproto2.field(25, betterproto2.TYPE_UINT64)
    """
    max number of gradient descent iterations
    """

    registration_fee: "str" = betterproto2.field(28, betterproto2.TYPE_STRING)
    """
    registration fee for reputer or worker
    """

    default_page_limit: "int" = betterproto2.field(29, betterproto2.TYPE_UINT64)
    """
    default limit for pagination
    """

    max_page_limit: "int" = betterproto2.field(30, betterproto2.TYPE_UINT64)
    """
    max limit for pagination
    """

    min_epoch_length_record_limit: "int" = betterproto2.field(
        31, betterproto2.TYPE_INT64
    )
    """
    min number of epochs to keep network losses, reputer losses, inferences,
    forecasts
    """

    blocks_per_month: "int" = betterproto2.field(32, betterproto2.TYPE_UINT64)
    """
    block emission rate in number of blocks expected per month
    """

    p_reward_inference: "str" = betterproto2.field(33, betterproto2.TYPE_STRING)

    p_reward_forecast: "str" = betterproto2.field(34, betterproto2.TYPE_STRING)

    p_reward_reputer: "str" = betterproto2.field(35, betterproto2.TYPE_STRING)

    c_reward_inference: "str" = betterproto2.field(36, betterproto2.TYPE_STRING)

    c_reward_forecast: "str" = betterproto2.field(37, betterproto2.TYPE_STRING)

    c_norm: "str" = betterproto2.field(38, betterproto2.TYPE_STRING)

    epsilon_reputer: "str" = betterproto2.field(40, betterproto2.TYPE_STRING)
    """
    a small tolerance quantity used to cap reputer scores at infinitesimally
    """

    half_max_process_stake_removals_end_block: "int" = betterproto2.field(
        42, betterproto2.TYPE_UINT64
    )
    """
    close proximities

    max amount of stake removals to process in an ABCI end block.
    """

    epsilon_safe_div: "str" = betterproto2.field(43, betterproto2.TYPE_STRING)
    """
    Applied twice once for stakeRemovals and once for
    DelegateStakeRemovals, so actual max is this number times two
    """

    data_sending_fee: "str" = betterproto2.field(44, betterproto2.TYPE_STRING)
    """
    / a small tolerance quantity used to cap division by zero
    """

    max_elements_per_forecast: "int" = betterproto2.field(45, betterproto2.TYPE_UINT64)
    """
    payload sending fee for reputer or worker

    max number of top forecasters by score to reward
    """

    max_active_topics_per_block: "int" = betterproto2.field(
        46, betterproto2.TYPE_UINT64
    )
    """
    max number of active topics per block
    """

    max_string_length: "int" = betterproto2.field(47, betterproto2.TYPE_UINT64)
    """
    max permittible length of strings uploaded to the chain
    """


default_message_pool.register_message("emissions.v4", "Params", Params)


@dataclass(eq=False, repr=False)
class RegisterRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)

    owner: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    is_reputer: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4", "RegisterRequest", RegisterRequest
)


@dataclass(eq=False, repr=False)
class RegisterResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "RegisterResponse", RegisterResponse
)


@dataclass(eq=False, repr=False)
class RemoveDelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "RemoveDelegateStakeRequest", RemoveDelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class RemoveDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "RemoveDelegateStakeResponse", RemoveDelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class RemoveFromWhitelistAdminRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "RemoveFromWhitelistAdminRequest", RemoveFromWhitelistAdminRequest
)


@dataclass(eq=False, repr=False)
class RemoveFromWhitelistAdminResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "RemoveFromWhitelistAdminResponse", RemoveFromWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class RemoveRegistrationRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    is_reputer: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4", "RemoveRegistrationRequest", RemoveRegistrationRequest
)


@dataclass(eq=False, repr=False)
class RemoveRegistrationResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "RemoveRegistrationResponse", RemoveRegistrationResponse
)


@dataclass(eq=False, repr=False)
class RemoveStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "RemoveStakeRequest", RemoveStakeRequest
)


@dataclass(eq=False, repr=False)
class RemoveStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "RemoveStakeResponse", RemoveStakeResponse
)


@dataclass(eq=False, repr=False)
class RewardDelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v4", "RewardDelegateStakeRequest", RewardDelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class RewardDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "RewardDelegateStakeResponse", RewardDelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class TopicExistsRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v4", "TopicExistsRequest", TopicExistsRequest
)


@dataclass(eq=False, repr=False)
class TopicExistsResponse(betterproto2.Message):
    exists: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v4", "TopicExistsResponse", TopicExistsResponse
)


@dataclass(eq=False, repr=False)
class UpdateParamsRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    params: "OptionalParams | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v4", "UpdateParamsRequest", UpdateParamsRequest
)


@dataclass(eq=False, repr=False)
class UpdateParamsResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v4", "UpdateParamsResponse", UpdateParamsResponse
)


class MsgServiceStub:
    """
    Msg defines the module Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "UpdateParamsRequest") -> "UpdateParamsResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/UpdateParams",
            UpdateParamsRequest.SerializeToString,
            UpdateParamsResponse.FromString,
        )(message)

    def create_new_topic(
        self, message: "CreateNewTopicRequest"
    ) -> "CreateNewTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/CreateNewTopic",
            CreateNewTopicRequest.SerializeToString,
            CreateNewTopicResponse.FromString,
        )(message)

    def register(self, message: "RegisterRequest") -> "RegisterResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/Register",
            RegisterRequest.SerializeToString,
            RegisterResponse.FromString,
        )(message)

    def remove_registration(
        self, message: "RemoveRegistrationRequest"
    ) -> "RemoveRegistrationResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/RemoveRegistration",
            RemoveRegistrationRequest.SerializeToString,
            RemoveRegistrationResponse.FromString,
        )(message)

    def add_stake(self, message: "AddStakeRequest") -> "AddStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/AddStake",
            AddStakeRequest.SerializeToString,
            AddStakeResponse.FromString,
        )(message)

    def remove_stake(self, message: "RemoveStakeRequest") -> "RemoveStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/RemoveStake",
            RemoveStakeRequest.SerializeToString,
            RemoveStakeResponse.FromString,
        )(message)

    def cancel_remove_stake(
        self, message: "CancelRemoveStakeRequest"
    ) -> "CancelRemoveStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/CancelRemoveStake",
            CancelRemoveStakeRequest.SerializeToString,
            CancelRemoveStakeResponse.FromString,
        )(message)

    def delegate_stake(
        self, message: "DelegateStakeRequest"
    ) -> "DelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/DelegateStake",
            DelegateStakeRequest.SerializeToString,
            DelegateStakeResponse.FromString,
        )(message)

    def reward_delegate_stake(
        self, message: "RewardDelegateStakeRequest"
    ) -> "RewardDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/RewardDelegateStake",
            RewardDelegateStakeRequest.SerializeToString,
            RewardDelegateStakeResponse.FromString,
        )(message)

    def remove_delegate_stake(
        self, message: "RemoveDelegateStakeRequest"
    ) -> "RemoveDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/RemoveDelegateStake",
            RemoveDelegateStakeRequest.SerializeToString,
            RemoveDelegateStakeResponse.FromString,
        )(message)

    def cancel_remove_delegate_stake(
        self, message: "CancelRemoveDelegateStakeRequest"
    ) -> "CancelRemoveDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/CancelRemoveDelegateStake",
            CancelRemoveDelegateStakeRequest.SerializeToString,
            CancelRemoveDelegateStakeResponse.FromString,
        )(message)

    def fund_topic(self, message: "FundTopicRequest") -> "FundTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/FundTopic",
            FundTopicRequest.SerializeToString,
            FundTopicResponse.FromString,
        )(message)

    def add_to_whitelist_admin(
        self, message: "AddToWhitelistAdminRequest"
    ) -> "AddToWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/AddToWhitelistAdmin",
            AddToWhitelistAdminRequest.SerializeToString,
            AddToWhitelistAdminResponse.FromString,
        )(message)

    def remove_from_whitelist_admin(
        self, message: "RemoveFromWhitelistAdminRequest"
    ) -> "RemoveFromWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/RemoveFromWhitelistAdmin",
            RemoveFromWhitelistAdminRequest.SerializeToString,
            RemoveFromWhitelistAdminResponse.FromString,
        )(message)

    def insert_worker_payload(
        self, message: "InsertWorkerPayloadRequest"
    ) -> "InsertWorkerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/InsertWorkerPayload",
            InsertWorkerPayloadRequest.SerializeToString,
            InsertWorkerPayloadResponse.FromString,
        )(message)

    def insert_reputer_payload(
        self, message: "InsertReputerPayloadRequest"
    ) -> "InsertReputerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v4.MsgService/InsertReputerPayload",
            InsertReputerPayloadRequest.SerializeToString,
            InsertReputerPayloadResponse.FromString,
        )(message)


class MsgServiceAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the module Msg service.
    """

    async def update_params(
        self,
        message: "UpdateParamsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateParamsResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/UpdateParams",
            message,
            UpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_new_topic(
        self,
        message: "CreateNewTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateNewTopicResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/CreateNewTopic",
            message,
            CreateNewTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register(
        self,
        message: "RegisterRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RegisterResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/Register",
            message,
            RegisterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_registration(
        self,
        message: "RemoveRegistrationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveRegistrationResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/RemoveRegistration",
            message,
            RemoveRegistrationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_stake(
        self,
        message: "AddStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/AddStake",
            message,
            AddStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_stake(
        self,
        message: "RemoveStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/RemoveStake",
            message,
            RemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_stake(
        self,
        message: "CancelRemoveStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CancelRemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/CancelRemoveStake",
            message,
            CancelRemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegate_stake(
        self,
        message: "DelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/DelegateStake",
            message,
            DelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reward_delegate_stake(
        self,
        message: "RewardDelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RewardDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/RewardDelegateStake",
            message,
            RewardDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_delegate_stake(
        self,
        message: "RemoveDelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/RemoveDelegateStake",
            message,
            RemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_delegate_stake(
        self,
        message: "CancelRemoveDelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CancelRemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/CancelRemoveDelegateStake",
            message,
            CancelRemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_topic(
        self,
        message: "FundTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "FundTopicResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/FundTopic",
            message,
            FundTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_whitelist_admin(
        self,
        message: "AddToWhitelistAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/AddToWhitelistAdmin",
            message,
            AddToWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_whitelist_admin(
        self,
        message: "RemoveFromWhitelistAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/RemoveFromWhitelistAdmin",
            message,
            RemoveFromWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_worker_payload(
        self,
        message: "InsertWorkerPayloadRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "InsertWorkerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/InsertWorkerPayload",
            message,
            InsertWorkerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_reputer_payload(
        self,
        message: "InsertReputerPayloadRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "InsertReputerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v4.MsgService/InsertReputerPayload",
            message,
            InsertReputerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryServiceStub:
    """
    Msg defines the module Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_params(
        self, message: "GetParamsRequest | None" = None
    ) -> "GetParamsResponse":
        """
        Params returns the module parameters.
        """

        if message is None:
            message = GetParamsRequest()

        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetParams",
            GetParamsRequest.SerializeToString,
            GetParamsResponse.FromString,
        )(message)

    def get_next_topic_id(
        self, message: "GetNextTopicIdRequest | None" = None
    ) -> "GetNextTopicIdResponse":
        if message is None:
            message = GetNextTopicIdRequest()

        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetNextTopicId",
            GetNextTopicIdRequest.SerializeToString,
            GetNextTopicIdResponse.FromString,
        )(message)

    def get_topic(self, message: "GetTopicRequest") -> "GetTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTopic",
            GetTopicRequest.SerializeToString,
            GetTopicResponse.FromString,
        )(message)

    def get_worker_latest_inference_by_topic_id(
        self, message: "GetWorkerLatestInferenceByTopicIdRequest"
    ) -> "GetWorkerLatestInferenceByTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetWorkerLatestInferenceByTopicId",
            GetWorkerLatestInferenceByTopicIdRequest.SerializeToString,
            GetWorkerLatestInferenceByTopicIdResponse.FromString,
        )(message)

    def get_inferences_at_block(
        self, message: "GetInferencesAtBlockRequest"
    ) -> "GetInferencesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetInferencesAtBlock",
            GetInferencesAtBlockRequest.SerializeToString,
            GetInferencesAtBlockResponse.FromString,
        )(message)

    def get_latest_topic_inferences(
        self, message: "GetLatestTopicInferencesRequest"
    ) -> "GetLatestTopicInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetLatestTopicInferences",
            GetLatestTopicInferencesRequest.SerializeToString,
            GetLatestTopicInferencesResponse.FromString,
        )(message)

    def get_forecasts_at_block(
        self, message: "GetForecastsAtBlockRequest"
    ) -> "GetForecastsAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetForecastsAtBlock",
            GetForecastsAtBlockRequest.SerializeToString,
            GetForecastsAtBlockResponse.FromString,
        )(message)

    def get_network_loss_bundle_at_block(
        self, message: "GetNetworkLossBundleAtBlockRequest"
    ) -> "GetNetworkLossBundleAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetNetworkLossBundleAtBlock",
            GetNetworkLossBundleAtBlockRequest.SerializeToString,
            GetNetworkLossBundleAtBlockResponse.FromString,
        )(message)

    def get_total_stake(
        self, message: "GetTotalStakeRequest | None" = None
    ) -> "GetTotalStakeResponse":
        if message is None:
            message = GetTotalStakeRequest()

        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTotalStake",
            GetTotalStakeRequest.SerializeToString,
            GetTotalStakeResponse.FromString,
        )(message)

    def get_reputer_stake_in_topic(
        self, message: "GetReputerStakeInTopicRequest"
    ) -> "GetReputerStakeInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetReputerStakeInTopic",
            GetReputerStakeInTopicRequest.SerializeToString,
            GetReputerStakeInTopicResponse.FromString,
        )(message)

    def get_multi_reputer_stake_in_topic(
        self, message: "GetMultiReputerStakeInTopicRequest"
    ) -> "GetMultiReputerStakeInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetMultiReputerStakeInTopic",
            GetMultiReputerStakeInTopicRequest.SerializeToString,
            GetMultiReputerStakeInTopicResponse.FromString,
        )(message)

    def get_stake_from_reputer_in_topic_in_self(
        self, message: "GetStakeFromReputerInTopicInSelfRequest"
    ) -> "GetStakeFromReputerInTopicInSelfResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetStakeFromReputerInTopicInSelf",
            GetStakeFromReputerInTopicInSelfRequest.SerializeToString,
            GetStakeFromReputerInTopicInSelfResponse.FromString,
        )(message)

    def get_delegate_stake_in_topic_in_reputer(
        self, message: "GetDelegateStakeInTopicInReputerRequest"
    ) -> "GetDelegateStakeInTopicInReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeInTopicInReputer",
            GetDelegateStakeInTopicInReputerRequest.SerializeToString,
            GetDelegateStakeInTopicInReputerResponse.FromString,
        )(message)

    def get_stake_from_delegator_in_topic_in_reputer(
        self, message: "GetStakeFromDelegatorInTopicInReputerRequest"
    ) -> "GetStakeFromDelegatorInTopicInReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetStakeFromDelegatorInTopicInReputer",
            GetStakeFromDelegatorInTopicInReputerRequest.SerializeToString,
            GetStakeFromDelegatorInTopicInReputerResponse.FromString,
        )(message)

    def get_stake_from_delegator_in_topic(
        self, message: "GetStakeFromDelegatorInTopicRequest"
    ) -> "GetStakeFromDelegatorInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetStakeFromDelegatorInTopic",
            GetStakeFromDelegatorInTopicRequest.SerializeToString,
            GetStakeFromDelegatorInTopicResponse.FromString,
        )(message)

    def get_topic_stake(
        self, message: "GetTopicStakeRequest"
    ) -> "GetTopicStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTopicStake",
            GetTopicStakeRequest.SerializeToString,
            GetTopicStakeResponse.FromString,
        )(message)

    def get_stake_removals_up_until_block(
        self, message: "GetStakeRemovalsUpUntilBlockRequest"
    ) -> "GetStakeRemovalsUpUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetStakeRemovalsUpUntilBlock",
            GetStakeRemovalsUpUntilBlockRequest.SerializeToString,
            GetStakeRemovalsUpUntilBlockResponse.FromString,
        )(message)

    def get_delegate_stake_removals_up_until_block(
        self, message: "GetDelegateStakeRemovalsUpUntilBlockRequest"
    ) -> "GetDelegateStakeRemovalsUpUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeRemovalsUpUntilBlock",
            GetDelegateStakeRemovalsUpUntilBlockRequest.SerializeToString,
            GetDelegateStakeRemovalsUpUntilBlockResponse.FromString,
        )(message)

    def get_stake_removal_info(
        self, message: "GetStakeRemovalInfoRequest"
    ) -> "GetStakeRemovalInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetStakeRemovalInfo",
            GetStakeRemovalInfoRequest.SerializeToString,
            GetStakeRemovalInfoResponse.FromString,
        )(message)

    def get_delegate_stake_removal_info(
        self, message: "GetDelegateStakeRemovalInfoRequest"
    ) -> "GetDelegateStakeRemovalInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeRemovalInfo",
            GetDelegateStakeRemovalInfoRequest.SerializeToString,
            GetDelegateStakeRemovalInfoResponse.FromString,
        )(message)

    def get_worker_node_info(
        self, message: "GetWorkerNodeInfoRequest"
    ) -> "GetWorkerNodeInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetWorkerNodeInfo",
            GetWorkerNodeInfoRequest.SerializeToString,
            GetWorkerNodeInfoResponse.FromString,
        )(message)

    def get_reputer_node_info(
        self, message: "GetReputerNodeInfoRequest"
    ) -> "GetReputerNodeInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetReputerNodeInfo",
            GetReputerNodeInfoRequest.SerializeToString,
            GetReputerNodeInfoResponse.FromString,
        )(message)

    def is_worker_registered_in_topic_id(
        self, message: "IsWorkerRegisteredInTopicIdRequest"
    ) -> "IsWorkerRegisteredInTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/IsWorkerRegisteredInTopicId",
            IsWorkerRegisteredInTopicIdRequest.SerializeToString,
            IsWorkerRegisteredInTopicIdResponse.FromString,
        )(message)

    def is_reputer_registered_in_topic_id(
        self, message: "IsReputerRegisteredInTopicIdRequest"
    ) -> "IsReputerRegisteredInTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/IsReputerRegisteredInTopicId",
            IsReputerRegisteredInTopicIdRequest.SerializeToString,
            IsReputerRegisteredInTopicIdResponse.FromString,
        )(message)

    def get_network_inferences_at_block(
        self, message: "GetNetworkInferencesAtBlockRequest"
    ) -> "GetNetworkInferencesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetNetworkInferencesAtBlock",
            GetNetworkInferencesAtBlockRequest.SerializeToString,
            GetNetworkInferencesAtBlockResponse.FromString,
        )(message)

    def get_latest_network_inferences(
        self, message: "GetLatestNetworkInferencesRequest"
    ) -> "GetLatestNetworkInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetLatestNetworkInferences",
            GetLatestNetworkInferencesRequest.SerializeToString,
            GetLatestNetworkInferencesResponse.FromString,
        )(message)

    def get_latest_available_network_inferences(
        self, message: "GetLatestAvailableNetworkInferencesRequest"
    ) -> "GetLatestAvailableNetworkInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetLatestAvailableNetworkInferences",
            GetLatestAvailableNetworkInferencesRequest.SerializeToString,
            GetLatestAvailableNetworkInferencesResponse.FromString,
        )(message)

    def is_worker_nonce_unfulfilled(
        self, message: "IsWorkerNonceUnfulfilledRequest"
    ) -> "IsWorkerNonceUnfulfilledResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/IsWorkerNonceUnfulfilled",
            IsWorkerNonceUnfulfilledRequest.SerializeToString,
            IsWorkerNonceUnfulfilledResponse.FromString,
        )(message)

    def is_reputer_nonce_unfulfilled(
        self, message: "IsReputerNonceUnfulfilledRequest"
    ) -> "IsReputerNonceUnfulfilledResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/IsReputerNonceUnfulfilled",
            IsReputerNonceUnfulfilledRequest.SerializeToString,
            IsReputerNonceUnfulfilledResponse.FromString,
        )(message)

    def get_unfulfilled_worker_nonces(
        self, message: "GetUnfulfilledWorkerNoncesRequest"
    ) -> "GetUnfulfilledWorkerNoncesResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetUnfulfilledWorkerNonces",
            GetUnfulfilledWorkerNoncesRequest.SerializeToString,
            GetUnfulfilledWorkerNoncesResponse.FromString,
        )(message)

    def get_unfulfilled_reputer_nonces(
        self, message: "GetUnfulfilledReputerNoncesRequest"
    ) -> "GetUnfulfilledReputerNoncesResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetUnfulfilledReputerNonces",
            GetUnfulfilledReputerNoncesRequest.SerializeToString,
            GetUnfulfilledReputerNoncesResponse.FromString,
        )(message)

    def get_inferer_network_regret(
        self, message: "GetInfererNetworkRegretRequest"
    ) -> "GetInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetInfererNetworkRegret",
            GetInfererNetworkRegretRequest.SerializeToString,
            GetInfererNetworkRegretResponse.FromString,
        )(message)

    def get_forecaster_network_regret(
        self, message: "GetForecasterNetworkRegretRequest"
    ) -> "GetForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetForecasterNetworkRegret",
            GetForecasterNetworkRegretRequest.SerializeToString,
            GetForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_one_in_forecaster_network_regret(
        self, message: "GetOneInForecasterNetworkRegretRequest"
    ) -> "GetOneInForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetOneInForecasterNetworkRegret",
            GetOneInForecasterNetworkRegretRequest.SerializeToString,
            GetOneInForecasterNetworkRegretResponse.FromString,
        )(message)

    def is_whitelist_admin(
        self, message: "IsWhitelistAdminRequest"
    ) -> "IsWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/IsWhitelistAdmin",
            IsWhitelistAdminRequest.SerializeToString,
            IsWhitelistAdminResponse.FromString,
        )(message)

    def get_topic_last_worker_commit_info(
        self, message: "GetTopicLastWorkerCommitInfoRequest"
    ) -> "GetTopicLastWorkerCommitInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTopicLastWorkerCommitInfo",
            GetTopicLastWorkerCommitInfoRequest.SerializeToString,
            GetTopicLastWorkerCommitInfoResponse.FromString,
        )(message)

    def get_topic_last_reputer_commit_info(
        self, message: "GetTopicLastReputerCommitInfoRequest"
    ) -> "GetTopicLastReputerCommitInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTopicLastReputerCommitInfo",
            GetTopicLastReputerCommitInfoRequest.SerializeToString,
            GetTopicLastReputerCommitInfoResponse.FromString,
        )(message)

    def get_topic_reward_nonce(
        self, message: "GetTopicRewardNonceRequest"
    ) -> "GetTopicRewardNonceResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTopicRewardNonce",
            GetTopicRewardNonceRequest.SerializeToString,
            GetTopicRewardNonceResponse.FromString,
        )(message)

    def get_reputer_loss_bundles_at_block(
        self, message: "GetReputerLossBundlesAtBlockRequest"
    ) -> "GetReputerLossBundlesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetReputerLossBundlesAtBlock",
            GetReputerLossBundlesAtBlockRequest.SerializeToString,
            GetReputerLossBundlesAtBlockResponse.FromString,
        )(message)

    def get_stake_reputer_authority(
        self, message: "GetStakeReputerAuthorityRequest"
    ) -> "GetStakeReputerAuthorityResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetStakeReputerAuthority",
            GetStakeReputerAuthorityRequest.SerializeToString,
            GetStakeReputerAuthorityResponse.FromString,
        )(message)

    def get_delegate_stake_placement(
        self, message: "GetDelegateStakePlacementRequest"
    ) -> "GetDelegateStakePlacementResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakePlacement",
            GetDelegateStakePlacementRequest.SerializeToString,
            GetDelegateStakePlacementResponse.FromString,
        )(message)

    def get_delegate_stake_upon_reputer(
        self, message: "GetDelegateStakeUponReputerRequest"
    ) -> "GetDelegateStakeUponReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeUponReputer",
            GetDelegateStakeUponReputerRequest.SerializeToString,
            GetDelegateStakeUponReputerResponse.FromString,
        )(message)

    def get_delegate_reward_per_share(
        self, message: "GetDelegateRewardPerShareRequest"
    ) -> "GetDelegateRewardPerShareResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetDelegateRewardPerShare",
            GetDelegateRewardPerShareRequest.SerializeToString,
            GetDelegateRewardPerShareResponse.FromString,
        )(message)

    def get_stake_removal_for_reputer_and_topic_id(
        self, message: "GetStakeRemovalForReputerAndTopicIdRequest"
    ) -> "GetStakeRemovalForReputerAndTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetStakeRemovalForReputerAndTopicId",
            GetStakeRemovalForReputerAndTopicIdRequest.SerializeToString,
            GetStakeRemovalForReputerAndTopicIdResponse.FromString,
        )(message)

    def get_delegate_stake_removal(
        self, message: "GetDelegateStakeRemovalRequest"
    ) -> "GetDelegateStakeRemovalResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeRemoval",
            GetDelegateStakeRemovalRequest.SerializeToString,
            GetDelegateStakeRemovalResponse.FromString,
        )(message)

    def get_previous_topic_weight(
        self, message: "GetPreviousTopicWeightRequest"
    ) -> "GetPreviousTopicWeightResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicWeight",
            GetPreviousTopicWeightRequest.SerializeToString,
            GetPreviousTopicWeightResponse.FromString,
        )(message)

    def topic_exists(self, message: "TopicExistsRequest") -> "TopicExistsResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/TopicExists",
            TopicExistsRequest.SerializeToString,
            TopicExistsResponse.FromString,
        )(message)

    def is_topic_active(
        self, message: "IsTopicActiveRequest"
    ) -> "IsTopicActiveResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/IsTopicActive",
            IsTopicActiveRequest.SerializeToString,
            IsTopicActiveResponse.FromString,
        )(message)

    def get_topic_fee_revenue(
        self, message: "GetTopicFeeRevenueRequest"
    ) -> "GetTopicFeeRevenueResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTopicFeeRevenue",
            GetTopicFeeRevenueRequest.SerializeToString,
            GetTopicFeeRevenueResponse.FromString,
        )(message)

    def get_inferer_score_ema(
        self, message: "GetInfererScoreEmaRequest"
    ) -> "GetInfererScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetInfererScoreEma",
            GetInfererScoreEmaRequest.SerializeToString,
            GetInfererScoreEmaResponse.FromString,
        )(message)

    def get_forecaster_score_ema(
        self, message: "GetForecasterScoreEmaRequest"
    ) -> "GetForecasterScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetForecasterScoreEma",
            GetForecasterScoreEmaRequest.SerializeToString,
            GetForecasterScoreEmaResponse.FromString,
        )(message)

    def get_reputer_score_ema(
        self, message: "GetReputerScoreEmaRequest"
    ) -> "GetReputerScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetReputerScoreEma",
            GetReputerScoreEmaRequest.SerializeToString,
            GetReputerScoreEmaResponse.FromString,
        )(message)

    def get_inference_scores_until_block(
        self, message: "GetInferenceScoresUntilBlockRequest"
    ) -> "GetInferenceScoresUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetInferenceScoresUntilBlock",
            GetInferenceScoresUntilBlockRequest.SerializeToString,
            GetInferenceScoresUntilBlockResponse.FromString,
        )(message)

    def get_previous_topic_quantile_forecaster_score_ema(
        self, message: "GetPreviousTopicQuantileForecasterScoreEmaRequest"
    ) -> "GetPreviousTopicQuantileForecasterScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicQuantileForecasterScoreEma",
            GetPreviousTopicQuantileForecasterScoreEmaRequest.SerializeToString,
            GetPreviousTopicQuantileForecasterScoreEmaResponse.FromString,
        )(message)

    def get_previous_topic_quantile_inferer_score_ema(
        self, message: "GetPreviousTopicQuantileInfererScoreEmaRequest"
    ) -> "GetPreviousTopicQuantileInfererScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicQuantileInfererScoreEma",
            GetPreviousTopicQuantileInfererScoreEmaRequest.SerializeToString,
            GetPreviousTopicQuantileInfererScoreEmaResponse.FromString,
        )(message)

    def get_previous_topic_quantile_reputer_score_ema(
        self, message: "GetPreviousTopicQuantileReputerScoreEmaRequest"
    ) -> "GetPreviousTopicQuantileReputerScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicQuantileReputerScoreEma",
            GetPreviousTopicQuantileReputerScoreEmaRequest.SerializeToString,
            GetPreviousTopicQuantileReputerScoreEmaResponse.FromString,
        )(message)

    def get_worker_inference_scores_at_block(
        self, message: "GetWorkerInferenceScoresAtBlockRequest"
    ) -> "GetWorkerInferenceScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetWorkerInferenceScoresAtBlock",
            GetWorkerInferenceScoresAtBlockRequest.SerializeToString,
            GetWorkerInferenceScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_inferer_score(
        self, message: "GetCurrentLowestInfererScoreRequest"
    ) -> "GetCurrentLowestInfererScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetCurrentLowestInfererScore",
            GetCurrentLowestInfererScoreRequest.SerializeToString,
            GetCurrentLowestInfererScoreResponse.FromString,
        )(message)

    def get_forecast_scores_until_block(
        self, message: "GetForecastScoresUntilBlockRequest"
    ) -> "GetForecastScoresUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetForecastScoresUntilBlock",
            GetForecastScoresUntilBlockRequest.SerializeToString,
            GetForecastScoresUntilBlockResponse.FromString,
        )(message)

    def get_worker_forecast_scores_at_block(
        self, message: "GetWorkerForecastScoresAtBlockRequest"
    ) -> "GetWorkerForecastScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetWorkerForecastScoresAtBlock",
            GetWorkerForecastScoresAtBlockRequest.SerializeToString,
            GetWorkerForecastScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_forecaster_score(
        self, message: "GetCurrentLowestForecasterScoreRequest"
    ) -> "GetCurrentLowestForecasterScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetCurrentLowestForecasterScore",
            GetCurrentLowestForecasterScoreRequest.SerializeToString,
            GetCurrentLowestForecasterScoreResponse.FromString,
        )(message)

    def get_reputers_scores_at_block(
        self, message: "GetReputersScoresAtBlockRequest"
    ) -> "GetReputersScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetReputersScoresAtBlock",
            GetReputersScoresAtBlockRequest.SerializeToString,
            GetReputersScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_reputer_score(
        self, message: "GetCurrentLowestReputerScoreRequest"
    ) -> "GetCurrentLowestReputerScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetCurrentLowestReputerScore",
            GetCurrentLowestReputerScoreRequest.SerializeToString,
            GetCurrentLowestReputerScoreResponse.FromString,
        )(message)

    def get_listening_coefficient(
        self, message: "GetListeningCoefficientRequest"
    ) -> "GetListeningCoefficientResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetListeningCoefficient",
            GetListeningCoefficientRequest.SerializeToString,
            GetListeningCoefficientResponse.FromString,
        )(message)

    def get_previous_reputer_reward_fraction(
        self, message: "GetPreviousReputerRewardFractionRequest"
    ) -> "GetPreviousReputerRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousReputerRewardFraction",
            GetPreviousReputerRewardFractionRequest.SerializeToString,
            GetPreviousReputerRewardFractionResponse.FromString,
        )(message)

    def get_previous_inference_reward_fraction(
        self, message: "GetPreviousInferenceRewardFractionRequest"
    ) -> "GetPreviousInferenceRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousInferenceRewardFraction",
            GetPreviousInferenceRewardFractionRequest.SerializeToString,
            GetPreviousInferenceRewardFractionResponse.FromString,
        )(message)

    def get_previous_forecast_reward_fraction(
        self, message: "GetPreviousForecastRewardFractionRequest"
    ) -> "GetPreviousForecastRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousForecastRewardFraction",
            GetPreviousForecastRewardFractionRequest.SerializeToString,
            GetPreviousForecastRewardFractionResponse.FromString,
        )(message)

    def get_previous_percentage_reward_to_staked_reputers(
        self,
        message: "GetPreviousPercentageRewardToStakedReputersRequest | None" = None,
    ) -> "GetPreviousPercentageRewardToStakedReputersResponse":
        if message is None:
            message = GetPreviousPercentageRewardToStakedReputersRequest()

        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetPreviousPercentageRewardToStakedReputers",
            GetPreviousPercentageRewardToStakedReputersRequest.SerializeToString,
            GetPreviousPercentageRewardToStakedReputersResponse.FromString,
        )(message)

    def get_total_reward_to_distribute(
        self, message: "GetTotalRewardToDistributeRequest | None" = None
    ) -> "GetTotalRewardToDistributeResponse":
        if message is None:
            message = GetTotalRewardToDistributeRequest()

        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetTotalRewardToDistribute",
            GetTotalRewardToDistributeRequest.SerializeToString,
            GetTotalRewardToDistributeResponse.FromString,
        )(message)

    def get_naive_inferer_network_regret(
        self, message: "GetNaiveInfererNetworkRegretRequest"
    ) -> "GetNaiveInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetNaiveInfererNetworkRegret",
            GetNaiveInfererNetworkRegretRequest.SerializeToString,
            GetNaiveInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_inferer_inferer_network_regret(
        self, message: "GetOneOutInfererInfererNetworkRegretRequest"
    ) -> "GetOneOutInfererInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetOneOutInfererInfererNetworkRegret",
            GetOneOutInfererInfererNetworkRegretRequest.SerializeToString,
            GetOneOutInfererInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_inferer_forecaster_network_regret(
        self, message: "GetOneOutInfererForecasterNetworkRegretRequest"
    ) -> "GetOneOutInfererForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetOneOutInfererForecasterNetworkRegret",
            GetOneOutInfererForecasterNetworkRegretRequest.SerializeToString,
            GetOneOutInfererForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_forecaster_inferer_network_regret(
        self, message: "GetOneOutForecasterInfererNetworkRegretRequest"
    ) -> "GetOneOutForecasterInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetOneOutForecasterInfererNetworkRegret",
            GetOneOutForecasterInfererNetworkRegretRequest.SerializeToString,
            GetOneOutForecasterInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_forecaster_forecaster_network_regret(
        self, message: "GetOneOutForecasterForecasterNetworkRegretRequest"
    ) -> "GetOneOutForecasterForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetOneOutForecasterForecasterNetworkRegret",
            GetOneOutForecasterForecasterNetworkRegretRequest.SerializeToString,
            GetOneOutForecasterForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_active_topics_at_block(
        self, message: "GetActiveTopicsAtBlockRequest"
    ) -> "GetActiveTopicsAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetActiveTopicsAtBlock",
            GetActiveTopicsAtBlockRequest.SerializeToString,
            GetActiveTopicsAtBlockResponse.FromString,
        )(message)

    def get_next_churning_block_by_topic_id(
        self, message: "GetNextChurningBlockByTopicIdRequest"
    ) -> "GetNextChurningBlockByTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v4.QueryService/GetNextChurningBlockByTopicId",
            GetNextChurningBlockByTopicIdRequest.SerializeToString,
            GetNextChurningBlockByTopicIdResponse.FromString,
        )(message)


class QueryServiceAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the module Msg service.
    """

    async def get_params(
        self,
        message: "GetParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetParamsResponse":
        """
        Params returns the module parameters.
        """

        if message is None:
            message = GetParamsRequest()

        return await self._unary_unary(
            "/emissions.v4.QueryService/GetParams",
            message,
            GetParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_topic_id(
        self,
        message: "GetNextTopicIdRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNextTopicIdResponse":
        if message is None:
            message = GetNextTopicIdRequest()

        return await self._unary_unary(
            "/emissions.v4.QueryService/GetNextTopicId",
            message,
            GetNextTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic(
        self,
        message: "GetTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTopic",
            message,
            GetTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_latest_inference_by_topic_id(
        self,
        message: "GetWorkerLatestInferenceByTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerLatestInferenceByTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetWorkerLatestInferenceByTopicId",
            message,
            GetWorkerLatestInferenceByTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferences_at_block(
        self,
        message: "GetInferencesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetInferencesAtBlock",
            message,
            GetInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_topic_inferences(
        self,
        message: "GetLatestTopicInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestTopicInferencesResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetLatestTopicInferences",
            message,
            GetLatestTopicInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecasts_at_block(
        self,
        message: "GetForecastsAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecastsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetForecastsAtBlock",
            message,
            GetForecastsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_loss_bundle_at_block(
        self,
        message: "GetNetworkLossBundleAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNetworkLossBundleAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetNetworkLossBundleAtBlock",
            message,
            GetNetworkLossBundleAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_stake(
        self,
        message: "GetTotalStakeRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTotalStakeResponse":
        if message is None:
            message = GetTotalStakeRequest()

        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTotalStake",
            message,
            GetTotalStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_stake_in_topic(
        self,
        message: "GetReputerStakeInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetReputerStakeInTopic",
            message,
            GetReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_multi_reputer_stake_in_topic(
        self,
        message: "GetMultiReputerStakeInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetMultiReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetMultiReputerStakeInTopic",
            message,
            GetMultiReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_reputer_in_topic_in_self(
        self,
        message: "GetStakeFromReputerInTopicInSelfRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeFromReputerInTopicInSelfResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetStakeFromReputerInTopicInSelf",
            message,
            GetStakeFromReputerInTopicInSelfResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_in_topic_in_reputer(
        self,
        message: "GetDelegateStakeInTopicInReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeInTopicInReputer",
            message,
            GetDelegateStakeInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic_in_reputer(
        self,
        message: "GetStakeFromDelegatorInTopicInReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeFromDelegatorInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetStakeFromDelegatorInTopicInReputer",
            message,
            GetStakeFromDelegatorInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic(
        self,
        message: "GetStakeFromDelegatorInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeFromDelegatorInTopicResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetStakeFromDelegatorInTopic",
            message,
            GetStakeFromDelegatorInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_stake(
        self,
        message: "GetTopicStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicStakeResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTopicStake",
            message,
            GetTopicStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removals_up_until_block(
        self,
        message: "GetStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetStakeRemovalsUpUntilBlock",
            message,
            GetStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removals_up_until_block(
        self,
        message: "GetDelegateStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeRemovalsUpUntilBlock",
            message,
            GetDelegateStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_info(
        self,
        message: "GetStakeRemovalInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetStakeRemovalInfo",
            message,
            GetStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal_info(
        self,
        message: "GetDelegateStakeRemovalInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeRemovalInfo",
            message,
            GetDelegateStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_node_info(
        self,
        message: "GetWorkerNodeInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetWorkerNodeInfo",
            message,
            GetWorkerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_node_info(
        self,
        message: "GetReputerNodeInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetReputerNodeInfo",
            message,
            GetReputerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_registered_in_topic_id(
        self,
        message: "IsWorkerRegisteredInTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWorkerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/IsWorkerRegisteredInTopicId",
            message,
            IsWorkerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_registered_in_topic_id(
        self,
        message: "IsReputerRegisteredInTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsReputerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/IsReputerRegisteredInTopicId",
            message,
            IsReputerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_inferences_at_block(
        self,
        message: "GetNetworkInferencesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNetworkInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetNetworkInferencesAtBlock",
            message,
            GetNetworkInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_network_inferences(
        self,
        message: "GetLatestNetworkInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetLatestNetworkInferences",
            message,
            GetLatestNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_available_network_inferences(
        self,
        message: "GetLatestAvailableNetworkInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestAvailableNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetLatestAvailableNetworkInferences",
            message,
            GetLatestAvailableNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_nonce_unfulfilled(
        self,
        message: "IsWorkerNonceUnfulfilledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWorkerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/IsWorkerNonceUnfulfilled",
            message,
            IsWorkerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_nonce_unfulfilled(
        self,
        message: "IsReputerNonceUnfulfilledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsReputerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/IsReputerNonceUnfulfilled",
            message,
            IsReputerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_worker_nonces(
        self,
        message: "GetUnfulfilledWorkerNoncesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetUnfulfilledWorkerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetUnfulfilledWorkerNonces",
            message,
            GetUnfulfilledWorkerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_reputer_nonces(
        self,
        message: "GetUnfulfilledReputerNoncesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetUnfulfilledReputerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetUnfulfilledReputerNonces",
            message,
            GetUnfulfilledReputerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_network_regret(
        self,
        message: "GetInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetInfererNetworkRegret",
            message,
            GetInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_network_regret(
        self,
        message: "GetForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetForecasterNetworkRegret",
            message,
            GetForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_in_forecaster_network_regret(
        self,
        message: "GetOneInForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneInForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetOneInForecasterNetworkRegret",
            message,
            GetOneInForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelist_admin(
        self,
        message: "IsWhitelistAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/IsWhitelistAdmin",
            message,
            IsWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_worker_commit_info(
        self,
        message: "GetTopicLastWorkerCommitInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicLastWorkerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTopicLastWorkerCommitInfo",
            message,
            GetTopicLastWorkerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_reputer_commit_info(
        self,
        message: "GetTopicLastReputerCommitInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicLastReputerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTopicLastReputerCommitInfo",
            message,
            GetTopicLastReputerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_reward_nonce(
        self,
        message: "GetTopicRewardNonceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicRewardNonceResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTopicRewardNonce",
            message,
            GetTopicRewardNonceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_loss_bundles_at_block(
        self,
        message: "GetReputerLossBundlesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerLossBundlesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetReputerLossBundlesAtBlock",
            message,
            GetReputerLossBundlesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_reputer_authority(
        self,
        message: "GetStakeReputerAuthorityRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeReputerAuthorityResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetStakeReputerAuthority",
            message,
            GetStakeReputerAuthorityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_placement(
        self,
        message: "GetDelegateStakePlacementRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakePlacementResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakePlacement",
            message,
            GetDelegateStakePlacementResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_upon_reputer(
        self,
        message: "GetDelegateStakeUponReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeUponReputerResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeUponReputer",
            message,
            GetDelegateStakeUponReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_reward_per_share(
        self,
        message: "GetDelegateRewardPerShareRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateRewardPerShareResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetDelegateRewardPerShare",
            message,
            GetDelegateRewardPerShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_for_reputer_and_topic_id(
        self,
        message: "GetStakeRemovalForReputerAndTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeRemovalForReputerAndTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetStakeRemovalForReputerAndTopicId",
            message,
            GetStakeRemovalForReputerAndTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal(
        self,
        message: "GetDelegateStakeRemovalRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeRemovalResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetDelegateStakeRemoval",
            message,
            GetDelegateStakeRemovalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_weight(
        self,
        message: "GetPreviousTopicWeightRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicWeightResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicWeight",
            message,
            GetPreviousTopicWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def topic_exists(
        self,
        message: "TopicExistsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "TopicExistsResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/TopicExists",
            message,
            TopicExistsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_active(
        self,
        message: "IsTopicActiveRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsTopicActiveResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/IsTopicActive",
            message,
            IsTopicActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_fee_revenue(
        self,
        message: "GetTopicFeeRevenueRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicFeeRevenueResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTopicFeeRevenue",
            message,
            GetTopicFeeRevenueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_score_ema(
        self,
        message: "GetInfererScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetInfererScoreEma",
            message,
            GetInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_score_ema(
        self,
        message: "GetForecasterScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetForecasterScoreEma",
            message,
            GetForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_score_ema(
        self,
        message: "GetReputerScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetReputerScoreEma",
            message,
            GetReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inference_scores_until_block(
        self,
        message: "GetInferenceScoresUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInferenceScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetInferenceScoresUntilBlock",
            message,
            GetInferenceScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_forecaster_score_ema(
        self,
        message: "GetPreviousTopicQuantileForecasterScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicQuantileForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicQuantileForecasterScoreEma",
            message,
            GetPreviousTopicQuantileForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_inferer_score_ema(
        self,
        message: "GetPreviousTopicQuantileInfererScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicQuantileInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicQuantileInfererScoreEma",
            message,
            GetPreviousTopicQuantileInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_reputer_score_ema(
        self,
        message: "GetPreviousTopicQuantileReputerScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicQuantileReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousTopicQuantileReputerScoreEma",
            message,
            GetPreviousTopicQuantileReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_inference_scores_at_block(
        self,
        message: "GetWorkerInferenceScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerInferenceScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetWorkerInferenceScoresAtBlock",
            message,
            GetWorkerInferenceScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_inferer_score(
        self,
        message: "GetCurrentLowestInfererScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCurrentLowestInfererScoreResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetCurrentLowestInfererScore",
            message,
            GetCurrentLowestInfererScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecast_scores_until_block(
        self,
        message: "GetForecastScoresUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecastScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetForecastScoresUntilBlock",
            message,
            GetForecastScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_forecast_scores_at_block(
        self,
        message: "GetWorkerForecastScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerForecastScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetWorkerForecastScoresAtBlock",
            message,
            GetWorkerForecastScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_forecaster_score(
        self,
        message: "GetCurrentLowestForecasterScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCurrentLowestForecasterScoreResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetCurrentLowestForecasterScore",
            message,
            GetCurrentLowestForecasterScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputers_scores_at_block(
        self,
        message: "GetReputersScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputersScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetReputersScoresAtBlock",
            message,
            GetReputersScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_reputer_score(
        self,
        message: "GetCurrentLowestReputerScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCurrentLowestReputerScoreResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetCurrentLowestReputerScore",
            message,
            GetCurrentLowestReputerScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_listening_coefficient(
        self,
        message: "GetListeningCoefficientRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetListeningCoefficientResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetListeningCoefficient",
            message,
            GetListeningCoefficientResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_reputer_reward_fraction(
        self,
        message: "GetPreviousReputerRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousReputerRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousReputerRewardFraction",
            message,
            GetPreviousReputerRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_inference_reward_fraction(
        self,
        message: "GetPreviousInferenceRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousInferenceRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousInferenceRewardFraction",
            message,
            GetPreviousInferenceRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_forecast_reward_fraction(
        self,
        message: "GetPreviousForecastRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousForecastRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousForecastRewardFraction",
            message,
            GetPreviousForecastRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_percentage_reward_to_staked_reputers(
        self,
        message: "GetPreviousPercentageRewardToStakedReputersRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousPercentageRewardToStakedReputersResponse":
        if message is None:
            message = GetPreviousPercentageRewardToStakedReputersRequest()

        return await self._unary_unary(
            "/emissions.v4.QueryService/GetPreviousPercentageRewardToStakedReputers",
            message,
            GetPreviousPercentageRewardToStakedReputersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_reward_to_distribute(
        self,
        message: "GetTotalRewardToDistributeRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTotalRewardToDistributeResponse":
        if message is None:
            message = GetTotalRewardToDistributeRequest()

        return await self._unary_unary(
            "/emissions.v4.QueryService/GetTotalRewardToDistribute",
            message,
            GetTotalRewardToDistributeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_naive_inferer_network_regret(
        self,
        message: "GetNaiveInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNaiveInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetNaiveInfererNetworkRegret",
            message,
            GetNaiveInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_inferer_network_regret(
        self,
        message: "GetOneOutInfererInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutInfererInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetOneOutInfererInfererNetworkRegret",
            message,
            GetOneOutInfererInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_forecaster_network_regret(
        self,
        message: "GetOneOutInfererForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutInfererForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetOneOutInfererForecasterNetworkRegret",
            message,
            GetOneOutInfererForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_inferer_network_regret(
        self,
        message: "GetOneOutForecasterInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutForecasterInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetOneOutForecasterInfererNetworkRegret",
            message,
            GetOneOutForecasterInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_forecaster_network_regret(
        self,
        message: "GetOneOutForecasterForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutForecasterForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetOneOutForecasterForecasterNetworkRegret",
            message,
            GetOneOutForecasterForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_topics_at_block(
        self,
        message: "GetActiveTopicsAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetActiveTopicsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetActiveTopicsAtBlock",
            message,
            GetActiveTopicsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_churning_block_by_topic_id(
        self,
        message: "GetNextChurningBlockByTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNextChurningBlockByTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v4.QueryService/GetNextChurningBlockByTopicId",
            message,
            GetNextChurningBlockByTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .. import v3 as _v3__
