# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: emissions/v3/events.proto, emissions/v3/genesis.proto, emissions/v3/inference.proto, emissions/v3/node.proto, emissions/v3/nonce.proto, emissions/v3/params.proto, emissions/v3/query.proto, emissions/v3/reputer.proto, emissions/v3/score.proto, emissions/v3/stake.proto, emissions/v3/topic.proto, emissions/v3/tx.proto, emissions/v3/types.proto, emissions/v3/worker.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ActorIdTopicIdBlockHeight",
    "ActorType",
    "BlockHeightAndTopicIds",
    "BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo",
    "BlockHeightTopicIdReputerStakeRemovalInfo",
    "BlockHeightTopicIdWeightPair",
    "BlockHeightTopicIds",
    "DelegateStakePlacement",
    "DelegateStakeRemovalInfo",
    "DelegatorInfo",
    "DelegatorReputerTopicIdBlockHeight",
    "EventNetworkLossSet",
    "EventRewardsSettled",
    "EventScoresSet",
    "Forecast",
    "ForecastElement",
    "Forecasts",
    "GenesisState",
    "Inference",
    "InferenceForecastBundle",
    "Inferences",
    "LibP2PKeyAndOffchainNode",
    "ListeningCoefficient",
    "MsgAddStake",
    "MsgAddStakeResponse",
    "MsgAddToWhitelistAdmin",
    "MsgAddToWhitelistAdminResponse",
    "MsgAsyncStub",
    "MsgCancelRemoveDelegateStake",
    "MsgCancelRemoveDelegateStakeResponse",
    "MsgCancelRemoveStake",
    "MsgCancelRemoveStakeResponse",
    "MsgCreateNewTopic",
    "MsgCreateNewTopicResponse",
    "MsgDelegateStake",
    "MsgDelegateStakeResponse",
    "MsgFundTopic",
    "MsgFundTopicResponse",
    "MsgInsertReputerPayload",
    "MsgInsertReputerPayloadResponse",
    "MsgInsertWorkerPayload",
    "MsgInsertWorkerPayloadResponse",
    "MsgRegister",
    "MsgRegisterResponse",
    "MsgRemoveDelegateStake",
    "MsgRemoveDelegateStakeResponse",
    "MsgRemoveFromWhitelistAdmin",
    "MsgRemoveFromWhitelistAdminResponse",
    "MsgRemoveRegistration",
    "MsgRemoveRegistrationResponse",
    "MsgRemoveStake",
    "MsgRemoveStakeResponse",
    "MsgRewardDelegateStake",
    "MsgRewardDelegateStakeResponse",
    "MsgStub",
    "MsgUpdateParams",
    "MsgUpdateParamsResponse",
    "Nonce",
    "Nonces",
    "OffchainNode",
    "OneOutInfererForecasterValues",
    "OptionalParams",
    "Params",
    "QueryActiveTopicsAtBlockRequest",
    "QueryActiveTopicsAtBlockResponse",
    "QueryActiveTopicsRequest",
    "QueryActiveTopicsResponse",
    "QueryAsyncStub",
    "QueryCurrentLowestForecasterScoreRequest",
    "QueryCurrentLowestForecasterScoreResponse",
    "QueryCurrentLowestInfererScoreRequest",
    "QueryCurrentLowestInfererScoreResponse",
    "QueryCurrentLowestReputerScoreRequest",
    "QueryCurrentLowestReputerScoreResponse",
    "QueryDelegateRewardPerShareRequest",
    "QueryDelegateRewardPerShareResponse",
    "QueryDelegateStakeInTopicInReputerRequest",
    "QueryDelegateStakeInTopicInReputerResponse",
    "QueryDelegateStakePlacementRequest",
    "QueryDelegateStakePlacementResponse",
    "QueryDelegateStakeRemovalInfoRequest",
    "QueryDelegateStakeRemovalInfoResponse",
    "QueryDelegateStakeRemovalRequest",
    "QueryDelegateStakeRemovalResponse",
    "QueryDelegateStakeRemovalsUpUntilBlockRequest",
    "QueryDelegateStakeRemovalsUpUntilBlockResponse",
    "QueryDelegateStakeUponReputerRequest",
    "QueryDelegateStakeUponReputerResponse",
    "QueryForecastScoresUntilBlockRequest",
    "QueryForecastScoresUntilBlockResponse",
    "QueryForecasterNetworkRegretRequest",
    "QueryForecasterNetworkRegretResponse",
    "QueryForecastsAtBlockRequest",
    "QueryForecastsAtBlockResponse",
    "QueryGetForecasterScoreEmaRequest",
    "QueryGetForecasterScoreEmaResponse",
    "QueryGetInfererScoreEmaRequest",
    "QueryGetInfererScoreEmaResponse",
    "QueryGetPreviousTopicQuantileForecasterScoreEmaRequest",
    "QueryGetPreviousTopicQuantileForecasterScoreEmaResponse",
    "QueryGetPreviousTopicQuantileInfererScoreEmaRequest",
    "QueryGetPreviousTopicQuantileInfererScoreEmaResponse",
    "QueryGetPreviousTopicQuantileReputerScoreEmaRequest",
    "QueryGetPreviousTopicQuantileReputerScoreEmaResponse",
    "QueryGetReputerScoreEmaRequest",
    "QueryGetReputerScoreEmaResponse",
    "QueryInferenceScoresUntilBlockRequest",
    "QueryInferenceScoresUntilBlockResponse",
    "QueryInferencesAtBlockRequest",
    "QueryInferencesAtBlockResponse",
    "QueryInfererNetworkRegretRequest",
    "QueryInfererNetworkRegretResponse",
    "QueryIsReputerNonceUnfulfilledRequest",
    "QueryIsReputerNonceUnfulfilledResponse",
    "QueryIsReputerRegisteredInTopicIdRequest",
    "QueryIsReputerRegisteredInTopicIdResponse",
    "QueryIsTopicActiveRequest",
    "QueryIsTopicActiveResponse",
    "QueryIsWhitelistAdminRequest",
    "QueryIsWhitelistAdminResponse",
    "QueryIsWorkerNonceUnfulfilledRequest",
    "QueryIsWorkerNonceUnfulfilledResponse",
    "QueryIsWorkerRegisteredInTopicIdRequest",
    "QueryIsWorkerRegisteredInTopicIdResponse",
    "QueryLatestAvailableNetworkInferencesRequest",
    "QueryLatestAvailableNetworkInferencesResponse",
    "QueryLatestNetworkInferencesRequest",
    "QueryLatestNetworkInferencesResponse",
    "QueryLatestTopicInferencesRequest",
    "QueryLatestTopicInferencesResponse",
    "QueryListeningCoefficientRequest",
    "QueryListeningCoefficientResponse",
    "QueryMultiReputerStakeInTopicRequest",
    "QueryMultiReputerStakeInTopicResponse",
    "QueryNaiveInfererNetworkRegretRequest",
    "QueryNaiveInfererNetworkRegretResponse",
    "QueryNetworkInferencesAtBlockRequest",
    "QueryNetworkInferencesAtBlockResponse",
    "QueryNetworkLossBundleAtBlockRequest",
    "QueryNetworkLossBundleAtBlockResponse",
    "QueryNextChurningBlockByTopicIdRequest",
    "QueryNextChurningBlockByTopicIdResponse",
    "QueryNextTopicIdRequest",
    "QueryNextTopicIdResponse",
    "QueryOneInForecasterNetworkRegretRequest",
    "QueryOneInForecasterNetworkRegretResponse",
    "QueryOneOutForecasterForecasterNetworkRegretRequest",
    "QueryOneOutForecasterForecasterNetworkRegretResponse",
    "QueryOneOutForecasterInfererNetworkRegretRequest",
    "QueryOneOutForecasterInfererNetworkRegretResponse",
    "QueryOneOutInfererForecasterNetworkRegretRequest",
    "QueryOneOutInfererForecasterNetworkRegretResponse",
    "QueryOneOutInfererInfererNetworkRegretRequest",
    "QueryOneOutInfererInfererNetworkRegretResponse",
    "QueryParamsRequest",
    "QueryParamsResponse",
    "QueryPreviousForecastRewardFractionRequest",
    "QueryPreviousForecastRewardFractionResponse",
    "QueryPreviousInferenceRewardFractionRequest",
    "QueryPreviousInferenceRewardFractionResponse",
    "QueryPreviousPercentageRewardToStakedReputersRequest",
    "QueryPreviousPercentageRewardToStakedReputersResponse",
    "QueryPreviousReputerRewardFractionRequest",
    "QueryPreviousReputerRewardFractionResponse",
    "QueryPreviousTopicWeightRequest",
    "QueryPreviousTopicWeightResponse",
    "QueryReputerLossBundlesAtBlockRequest",
    "QueryReputerLossBundlesAtBlockResponse",
    "QueryReputerNodeInfoRequest",
    "QueryReputerNodeInfoResponse",
    "QueryReputerStakeInTopicRequest",
    "QueryReputerStakeInTopicResponse",
    "QueryReputersScoresAtBlockRequest",
    "QueryReputersScoresAtBlockResponse",
    "QueryRewardableTopicsRequest",
    "QueryRewardableTopicsResponse",
    "QueryStakeFromDelegatorInTopicInReputerRequest",
    "QueryStakeFromDelegatorInTopicInReputerResponse",
    "QueryStakeFromDelegatorInTopicRequest",
    "QueryStakeFromDelegatorInTopicResponse",
    "QueryStakeFromReputerInTopicInSelfRequest",
    "QueryStakeFromReputerInTopicInSelfResponse",
    "QueryStakeRemovalForReputerAndTopicIdRequest",
    "QueryStakeRemovalForReputerAndTopicIdResponse",
    "QueryStakeRemovalInfoRequest",
    "QueryStakeRemovalInfoResponse",
    "QueryStakeRemovalsUpUntilBlockRequest",
    "QueryStakeRemovalsUpUntilBlockResponse",
    "QueryStakeReputerAuthorityRequest",
    "QueryStakeReputerAuthorityResponse",
    "QueryStub",
    "QueryTopicExistsRequest",
    "QueryTopicExistsResponse",
    "QueryTopicFeeRevenueRequest",
    "QueryTopicFeeRevenueResponse",
    "QueryTopicLastReputerCommitInfoRequest",
    "QueryTopicLastReputerCommitInfoResponse",
    "QueryTopicLastWorkerCommitInfoRequest",
    "QueryTopicLastWorkerCommitInfoResponse",
    "QueryTopicRequest",
    "QueryTopicResponse",
    "QueryTopicRewardNonceRequest",
    "QueryTopicRewardNonceResponse",
    "QueryTopicStakeRequest",
    "QueryTopicStakeResponse",
    "QueryTotalRewardToDistributeRequest",
    "QueryTotalRewardToDistributeResponse",
    "QueryTotalStakeRequest",
    "QueryTotalStakeResponse",
    "QueryUnfulfilledReputerNoncesRequest",
    "QueryUnfulfilledReputerNoncesResponse",
    "QueryUnfulfilledWorkerNoncesRequest",
    "QueryUnfulfilledWorkerNoncesResponse",
    "QueryWorkerForecastScoresAtBlockRequest",
    "QueryWorkerForecastScoresAtBlockResponse",
    "QueryWorkerInferenceScoresAtBlockRequest",
    "QueryWorkerInferenceScoresAtBlockResponse",
    "QueryWorkerLatestInferenceRequest",
    "QueryWorkerLatestInferenceResponse",
    "QueryWorkerNodeInfoRequest",
    "QueryWorkerNodeInfoResponse",
    "RegretInformedWeight",
    "ReputerRequestNonce",
    "ReputerRequestNonces",
    "ReputerValueBundle",
    "ReputerValueBundles",
    "Score",
    "Scores",
    "SimpleCursorPaginationRequest",
    "SimpleCursorPaginationResponse",
    "StakeInfo",
    "StakePlacement",
    "StakeRemovalInfo",
    "TimestampedActorNonce",
    "TimestampedValue",
    "Topic",
    "TopicAndActorId",
    "TopicIdActorIdActorIdTimeStampedValue",
    "TopicIdActorIdDec",
    "TopicIdActorIdForecast",
    "TopicIdActorIdInference",
    "TopicIdActorIdInt",
    "TopicIdActorIdListeningCoefficient",
    "TopicIdActorIdScore",
    "TopicIdActorIdTimeStampedValue",
    "TopicIdAndBlockHeight",
    "TopicIdAndDec",
    "TopicIdAndInt",
    "TopicIdAndNonces",
    "TopicIdAndReputerRequestNonces",
    "TopicIdAndTopic",
    "TopicIdBlockHeightForecasts",
    "TopicIdBlockHeightInferences",
    "TopicIdBlockHeightReputerValueBundles",
    "TopicIdBlockHeightScores",
    "TopicIdBlockHeightValueBundles",
    "TopicIdDelegatorReputerDelegatorInfo",
    "TopicIdTimestampedActorNonce",
    "TopicIdWeightPair",
    "TopicIds",
    "TopicList",
    "ValueBundle",
    "WithheldWorkerAttributedValue",
    "WorkerAttributedValue",
    "WorkerDataBundle",
    "WorkerDataBundles",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ...message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ActorType(betterproto2.Enum):
    """
    We choose a denormalized schema for events to balance the size and number of
    events, as well as the complexity of likely downstream write and read
    patterns. One likely cares about how the topic performs in totality and may
    want to update topic state after all topic information is in, or in some
    chronological order. If one normalizs by actor type, then the event volume is
    likely to be much higher and one would have to wait an undetermined amount of
    time (how many actors participated
    == how many events to wait for) to update an topic state-level metric.
    Furthermore, we know that the size of each of these messages is bounded by
    the global parameters that bound the max number of actors and topics. If one
    were to track per-actor-per-type metrics, then one immediately knows that
    they were included and participated or not in the topic at a particular block
    height as soon as one event from the topic is recorded.
    """

    INFERER = 0

    FORECASTER = 1

    REPUTER = 2


@dataclass(eq=False, repr=False)
class ActorIdTopicIdBlockHeight(betterproto2.Message):
    actor_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "ActorIdTopicIdBlockHeight", ActorIdTopicIdBlockHeight
)


@dataclass(eq=False, repr=False)
class BlockHeightAndTopicIds(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_ids: "list[int]" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3", "BlockHeightAndTopicIds", BlockHeightAndTopicIds
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    delegate_stake_removal_info: "DelegateStakeRemovalInfo | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo",
    BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo,
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdReputerStakeRemovalInfo(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    stake_removal_info: "StakeRemovalInfo | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "BlockHeightTopicIdReputerStakeRemovalInfo",
    BlockHeightTopicIdReputerStakeRemovalInfo,
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIds(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_ids: "TopicIds | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "BlockHeightTopicIds", BlockHeightTopicIds
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdWeightPair(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_weight: "TopicIdWeightPair | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "BlockHeightTopicIdWeightPair", BlockHeightTopicIdWeightPair
)


@dataclass(eq=False, repr=False)
class DelegateStakePlacement(betterproto2.Message):
    """
    Bad naming convention, only used in StakeRemovals
    DEPRECATED in ConsensusVersion = 2
    TO BE DELETED in ConsensusVersion = 3
    """

    block_removal_started: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    delegator: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "DelegateStakePlacement", DelegateStakePlacement
)


@dataclass(eq=False, repr=False)
class DelegateStakeRemovalInfo(betterproto2.Message):
    """
    Introduced in ConsensusVersion = 2
    """

    block_removal_started: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    delegator: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    block_removal_completed: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "DelegateStakeRemovalInfo", DelegateStakeRemovalInfo
)


@dataclass(eq=False, repr=False)
class DelegatorInfo(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reward_debt: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "DelegatorInfo", DelegatorInfo)


@dataclass(eq=False, repr=False)
class DelegatorReputerTopicIdBlockHeight(betterproto2.Message):
    delegator: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "DelegatorReputerTopicIdBlockHeight",
    DelegatorReputerTopicIdBlockHeight,
)


@dataclass(eq=False, repr=False)
class EventNetworkLossSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    value_bundle: "ValueBundle | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "EventNetworkLossSet", EventNetworkLossSet
)


@dataclass(eq=False, repr=False)
class EventRewardsSettled(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    rewards: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3", "EventRewardsSettled", EventRewardsSettled
)


@dataclass(eq=False, repr=False)
class EventScoresSet(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    scores: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message("emissions.v3", "EventScoresSet", EventScoresSet)


@dataclass(eq=False, repr=False)
class Forecast(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    forecast_elements: "list[ForecastElement]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )

    extra_data: "bytes" = betterproto2.field(5, betterproto2.TYPE_BYTES)


default_message_pool.register_message("emissions.v3", "Forecast", Forecast)


@dataclass(eq=False, repr=False)
class ForecastElement(betterproto2.Message):
    inferer: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "ForecastElement", ForecastElement
)


@dataclass(eq=False, repr=False)
class Forecasts(betterproto2.Message):
    forecasts: "list[Forecast]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("emissions.v3", "Forecasts", Forecasts)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState is the state that must be provided at genesis.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines all the parameters of the module.
    """

    next_topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    / TOPIC
    the next topic id to be used, equal to the number of topics that have been
    created
    """

    topics: "list[TopicIdAndTopic]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    every topic that has been created indexed by their topicId starting from 1
    (0 is reserved for the root network)
    """

    active_topics: "list[int]" = betterproto2.field(
        5, betterproto2.TYPE_UINT64, repeated=True
    )

    rewardable_topics: "list[int]" = betterproto2.field(
        6, betterproto2.TYPE_UINT64, repeated=True
    )
    """
    every topic that has been churned and ready to be rewarded i.e. reputer
    losses have been committed
    """

    topic_workers: "list[TopicAndActorId]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    for a topic, what is every worker node that has registered to it?
    """

    topic_reputers: "list[TopicAndActorId]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    for a topic, what is every reputer node that has registered to it?
    """

    topic_reward_nonce: "list[TopicIdAndBlockHeight]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic) -> nonce/block height
    """

    inferer_scores_by_block: "list[TopicIdBlockHeightScores]" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / SCORES
    map of (topic, block_height, worker) -> score
    """

    forecaster_scores_by_block: "list[TopicIdBlockHeightScores]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, worker) -> score
    """

    reputer_scores_by_block: "list[TopicIdBlockHeightScores]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, reputer) -> score
    """

    inferer_score_emas: "list[TopicIdActorIdScore]" = betterproto2.field(
        60, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, worker) -> score
    """

    forecaster_score_emas: "list[TopicIdActorIdScore]" = betterproto2.field(
        61, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, worker) -> score
    """

    reputer_score_emas: "list[TopicIdActorIdScore]" = betterproto2.field(
        62, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, reputer) -> score
    """

    reputer_listening_coefficient: "list[TopicIdActorIdListeningCoefficient]" = (
        betterproto2.field(16, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    map of (topic, reputer) -> listening coefficient
    """

    previous_reputer_reward_fraction: "list[TopicIdActorIdDec]" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, reputer) -> previous reward (used for EMA)
    """

    previous_inference_reward_fraction: "list[TopicIdActorIdDec]" = betterproto2.field(
        18, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, worker) -> previous reward for inference (used for EMA)
    """

    previous_forecast_reward_fraction: "list[TopicIdActorIdDec]" = betterproto2.field(
        19, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, worker) -> previous reward for forecast (used for EMA)
    """

    previous_forecaster_score_ratio: "list[TopicIdAndDec]" = betterproto2.field(
        20, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic) -> ratio of forecaster score
    """

    total_stake: "str" = betterproto2.field(21, betterproto2.TYPE_STRING)
    """
    / STAKING

    total sum stake of all stakers on the network
    """

    topic_stake: "list[TopicIdAndInt]" = betterproto2.field(
        22, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    for every topic, how much total stake does that topic have accumulated?
    """

    stake_reputer_authority: "list[TopicIdActorIdInt]" = betterproto2.field(
        23, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    stake reputer placed in topic + delegate stake placed in them,
    signalling their total authority on the topic
    (topic Id, reputer) -> stake from reputer on self +
    stakeFromDelegatorsUponReputer
    """

    stake_sum_from_delegator: "list[TopicIdActorIdInt]" = betterproto2.field(
        24, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic id, delegator) -> total amount of stake in that topic placed
    by that delegator
    """

    delegated_stakes: "list[TopicIdDelegatorReputerDelegatorInfo]" = betterproto2.field(
        25, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic id, delegator, reputer) -> amount of stake that has been
    placed by that delegator on that target
    """

    stake_from_delegators_upon_reputer: "list[TopicIdActorIdInt]" = betterproto2.field(
        26, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic id, reputer) -> total amount of stake that has been placed on
    that reputer by delegators
    """

    delegate_reward_per_share: "list[TopicIdActorIdDec]" = betterproto2.field(
        27, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topicId, reputer) -> share of delegate reward
    """

    stake_removals_by_block: "list[BlockHeightTopicIdReputerStakeRemovalInfo]" = (
        betterproto2.field(28, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    stake removals are double indexed to avoid O(n) lookups when removing stake
    map of (blockHeight, topic, reputer) -> removal information for that
    reputer
    """

    stake_removals_by_actor: "list[ActorIdTopicIdBlockHeight]" = betterproto2.field(
        29, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    key set of (reputer, topic, blockHeight) to existence of a removal in the
    forwards map
    """

    delegate_stake_removals_by_block: "list[BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo]" = betterproto2.field(
        30, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    delegate stake removals are double indexed to avoid O(n) lookups when
    removing stake map of (blockHeight, topic, delegator, reputer staked upon)
    -> (list of reputers delegated upon and info) to have stake removed at that
    block
    """

    delegate_stake_removals_by_actor: "list[DelegatorReputerTopicIdBlockHeight]" = (
        betterproto2.field(31, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    key set of (delegator, reputer, topicId, blockHeight) to existence of a
    removal in the forwards map
    """

    inferences: "list[TopicIdActorIdInference]" = betterproto2.field(
        32, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / MISC GLOBAL STATE
    map of (topic, worker) -> inference
    """

    forecasts: "list[TopicIdActorIdForecast]" = betterproto2.field(
        33, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, worker) -> forecast[]
    """

    workers: "list[LibP2PKeyAndOffchainNode]" = betterproto2.field(
        34, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of worker id to node data about that worker
    """

    reputers: "list[LibP2PKeyAndOffchainNode]" = betterproto2.field(
        35, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of reputer id to node data about that reputer
    """

    topic_fee_revenue: "list[TopicIdAndInt]" = betterproto2.field(
        36, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    fee revenue collected by a topic over the course of the last reward cadence
    """

    previous_topic_weight: "list[TopicIdAndDec]" = betterproto2.field(
        37, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    store previous weights for exponential moving average in rewards calc
    """

    all_inferences: "list[TopicIdBlockHeightInferences]" = betterproto2.field(
        38, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height) -> Inference
    """

    all_forecasts: "list[TopicIdBlockHeightForecasts]" = betterproto2.field(
        39, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height) -> Forecast
    """

    all_loss_bundles: "list[TopicIdBlockHeightReputerValueBundles]" = (
        betterproto2.field(40, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    map of (topic, block_height) -> ReputerValueBundles (1 per reputer active
    at that time)
    """

    network_loss_bundles: "list[TopicIdBlockHeightValueBundles]" = betterproto2.field(
        41, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height) -> ValueBundle (1 network wide bundle per
    timestep)
    """

    previous_percentage_reward_to_staked_reputers: "str" = betterproto2.field(
        42, betterproto2.TYPE_STRING
    )
    """
    Percentage of all rewards, paid out to staked reputers, during the previous
    reward cadence. Used by mint module
    """

    open_worker_windows: "list[BlockHeightAndTopicIds]" = betterproto2.field(
        55, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / NONCES

    map of open worker nonce windows for topics on particular block heights
    """

    unfulfilled_worker_nonces: "list[TopicIdAndNonces]" = betterproto2.field(
        43, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic) -> unfulfilled nonces
    """

    unfulfilled_reputer_nonces: "list[TopicIdAndReputerRequestNonces]" = (
        betterproto2.field(44, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    map of (topic) -> unfulfilled nonces
    """

    last_drip_block: "list[TopicIdAndBlockHeight]" = betterproto2.field(
        56, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic) -> last dripped block
    """

    latest_inferer_network_regrets: "list[TopicIdActorIdTimeStampedValue]" = (
        betterproto2.field(45, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    / REGRETS
    map of (topic, worker) -> regret of worker from comparing loss of worker
    relative to loss of other inferers
    """

    latest_forecaster_network_regrets: "list[TopicIdActorIdTimeStampedValue]" = (
        betterproto2.field(46, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    map of (topic, worker) -> regret of worker from comparing loss of worker
    relative to loss of other forecasters
    """

    latest_one_in_forecaster_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        47, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, forecaster, inferer) -> R^+_{ij_kk} regret of forecaster
    loss from comparing one-in loss with all network inferer (3rd index)
    regrets L_ij made under the regime of the one-in forecaster (2nd index)
    """

    latest_naive_inferer_network_regrets: "list[TopicIdActorIdTimeStampedValue]" = (
        betterproto2.field(48, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    the forecaster (2nd index) regrets made under the regime of the same
    forecaster as a one-in forecaster
    """

    latest_one_out_inferer_inferer_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        49, betterproto2.TYPE_MESSAGE, repeated=True
    )

    latest_one_out_inferer_forecaster_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        50, betterproto2.TYPE_MESSAGE, repeated=True
    )

    latest_one_out_forecaster_inferer_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        51, betterproto2.TYPE_MESSAGE, repeated=True
    )

    latest_one_out_forecaster_forecaster_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        52, betterproto2.TYPE_MESSAGE, repeated=True
    )

    core_team_addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    / WHITELISTS
    """

    topic_last_worker_commit: "list[TopicIdTimestampedActorNonce]" = betterproto2.field(
        53, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / RECORD COMMITS
    """

    topic_last_reputer_commit: "list[TopicIdTimestampedActorNonce]" = (
        betterproto2.field(54, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    topic_to_next_possible_churning_block: "list[TopicIdAndBlockHeight]" = (
        betterproto2.field(57, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    ACTIVE TOPIC
    """

    block_to_active_topics: "list[BlockHeightTopicIds]" = betterproto2.field(
        58, betterproto2.TYPE_MESSAGE, repeated=True
    )

    block_to_lowest_active_topic_weight: "list[BlockHeightTopicIdWeightPair]" = (
        betterproto2.field(59, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    previous_topic_quantile_inferer_score_ema: "list[TopicIdAndDec]" = (
        betterproto2.field(63, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    EMA
    """

    previous_topic_quantile_forecaster_score_ema: "list[TopicIdAndDec]" = (
        betterproto2.field(64, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    previous_topic_quantile_reputer_score_ema: "list[TopicIdAndDec]" = (
        betterproto2.field(65, betterproto2.TYPE_MESSAGE, repeated=True)
    )


default_message_pool.register_message("emissions.v3", "GenesisState", GenesisState)


@dataclass(eq=False, repr=False)
class Inference(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    value: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    extra_data: "bytes" = betterproto2.field(5, betterproto2.TYPE_BYTES)

    proof: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "Inference", Inference)


@dataclass(eq=False, repr=False)
class InferenceForecastBundle(betterproto2.Message):
    inference: "Inference | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    forecast: "Forecast | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "InferenceForecastBundle", InferenceForecastBundle
)


@dataclass(eq=False, repr=False)
class Inferences(betterproto2.Message):
    inferences: "list[Inference]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("emissions.v3", "Inferences", Inferences)


@dataclass(eq=False, repr=False)
class LibP2PKeyAndOffchainNode(betterproto2.Message):
    lib_p_2p_key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    offchain_node: "OffchainNode | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "LibP2pKeyAndOffchainNode", LibP2PKeyAndOffchainNode
)


@dataclass(eq=False, repr=False)
class ListeningCoefficient(betterproto2.Message):
    coefficient: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "ListeningCoefficient", ListeningCoefficient
)


@dataclass(eq=False, repr=False)
class MsgAddStake(betterproto2.Message):
    """
    /  Staking
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "MsgAddStake", MsgAddStake)


@dataclass(eq=False, repr=False)
class MsgAddStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgAddStakeResponse", MsgAddStakeResponse
)


@dataclass(eq=False, repr=False)
class MsgAddToWhitelistAdmin(betterproto2.Message):
    """
    /  Whitelist
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgAddToWhitelistAdmin", MsgAddToWhitelistAdmin
)


@dataclass(eq=False, repr=False)
class MsgAddToWhitelistAdminResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgAddToWhitelistAdminResponse", MsgAddToWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class MsgCancelRemoveDelegateStake(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgCancelRemoveDelegateStake", MsgCancelRemoveDelegateStake
)


@dataclass(eq=False, repr=False)
class MsgCancelRemoveDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3",
    "MsgCancelRemoveDelegateStakeResponse",
    MsgCancelRemoveDelegateStakeResponse,
)


@dataclass(eq=False, repr=False)
class MsgCancelRemoveStake(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "MsgCancelRemoveStake", MsgCancelRemoveStake
)


@dataclass(eq=False, repr=False)
class MsgCancelRemoveStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgCancelRemoveStakeResponse", MsgCancelRemoveStakeResponse
)


@dataclass(eq=False, repr=False)
class MsgCreateNewTopic(betterproto2.Message):
    """
    / TOPICS
    """

    creator: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    creator is the message sender.
    """

    metadata: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    loss_method: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    epoch_length: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)

    ground_truth_lag: "int" = betterproto2.field(8, betterproto2.TYPE_INT64)

    p_norm: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)

    alpha_regret: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)

    allow_negative: "bool" = betterproto2.field(12, betterproto2.TYPE_BOOL)

    epsilon: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    worker_submission_window: "int" = betterproto2.field(14, betterproto2.TYPE_INT64)

    merit_sortition_alpha: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    active_inferer_quantile: "str" = betterproto2.field(16, betterproto2.TYPE_STRING)

    active_forecaster_quantile: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)

    active_reputer_quantile: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgCreateNewTopic", MsgCreateNewTopic
)


@dataclass(eq=False, repr=False)
class MsgCreateNewTopicResponse(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "MsgCreateNewTopicResponse", MsgCreateNewTopicResponse
)


@dataclass(eq=False, repr=False)
class MsgDelegateStake(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgDelegateStake", MsgDelegateStake
)


@dataclass(eq=False, repr=False)
class MsgDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgDelegateStakeResponse", MsgDelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class MsgFundTopic(betterproto2.Message):
    """
    Inferences are requested by consumers who fund topics by sending ALLO to
    ecosystem account via TopicFund messages
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    how many funds to send from alice with this Inference Request
    """


default_message_pool.register_message("emissions.v3", "MsgFundTopic", MsgFundTopic)


@dataclass(eq=False, repr=False)
class MsgFundTopicResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgFundTopicResponse", MsgFundTopicResponse
)


@dataclass(eq=False, repr=False)
class MsgInsertReputerPayload(betterproto2.Message):
    """
    / Worker and Reputer Interface
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer_value_bundle: "ReputerValueBundle | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "MsgInsertReputerPayload", MsgInsertReputerPayload
)


@dataclass(eq=False, repr=False)
class MsgInsertReputerPayloadResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgInsertReputerPayloadResponse", MsgInsertReputerPayloadResponse
)


@dataclass(eq=False, repr=False)
class MsgInsertWorkerPayload(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    worker_data_bundle: "WorkerDataBundle | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "MsgInsertWorkerPayload", MsgInsertWorkerPayload
)


@dataclass(eq=False, repr=False)
class MsgInsertWorkerPayloadResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgInsertWorkerPayloadResponse", MsgInsertWorkerPayloadResponse
)


@dataclass(eq=False, repr=False)
class MsgRegister(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)

    owner: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    is_reputer: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)


default_message_pool.register_message("emissions.v3", "MsgRegister", MsgRegister)


@dataclass(eq=False, repr=False)
class MsgRegisterResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgRegisterResponse", MsgRegisterResponse
)


@dataclass(eq=False, repr=False)
class MsgRemoveDelegateStake(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgRemoveDelegateStake", MsgRemoveDelegateStake
)


@dataclass(eq=False, repr=False)
class MsgRemoveDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgRemoveDelegateStakeResponse", MsgRemoveDelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class MsgRemoveFromWhitelistAdmin(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgRemoveFromWhitelistAdmin", MsgRemoveFromWhitelistAdmin
)


@dataclass(eq=False, repr=False)
class MsgRemoveFromWhitelistAdminResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3",
    "MsgRemoveFromWhitelistAdminResponse",
    MsgRemoveFromWhitelistAdminResponse,
)


@dataclass(eq=False, repr=False)
class MsgRemoveRegistration(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    is_reputer: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3", "MsgRemoveRegistration", MsgRemoveRegistration
)


@dataclass(eq=False, repr=False)
class MsgRemoveRegistrationResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgRemoveRegistrationResponse", MsgRemoveRegistrationResponse
)


@dataclass(eq=False, repr=False)
class MsgRemoveStake(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "MsgRemoveStake", MsgRemoveStake)


@dataclass(eq=False, repr=False)
class MsgRemoveStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgRemoveStakeResponse", MsgRemoveStakeResponse
)


@dataclass(eq=False, repr=False)
class MsgRewardDelegateStake(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "MsgRewardDelegateStake", MsgRewardDelegateStake
)


@dataclass(eq=False, repr=False)
class MsgRewardDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgRewardDelegateStakeResponse", MsgRewardDelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    params: "OptionalParams | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "MsgUpdateParams", MsgUpdateParams
)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "MsgUpdateParamsResponse", MsgUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class Nonce(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    block height of the request
    """


default_message_pool.register_message("emissions.v3", "Nonce", Nonce)


@dataclass(eq=False, repr=False)
class Nonces(betterproto2.Message):
    nonces: "list[Nonce]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("emissions.v3", "Nonces", Nonces)


@dataclass(eq=False, repr=False)
class OffchainNode(betterproto2.Message):
    owner: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    node_address: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "OffchainNode", OffchainNode)


@dataclass(eq=False, repr=False)
class OneOutInfererForecasterValues(betterproto2.Message):
    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    one_out_inferer_values: "list[WithheldWorkerAttributedValue]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3", "OneOutInfererForecasterValues", OneOutInfererForecasterValues
)


@dataclass(eq=False, repr=False)
class OptionalParams(betterproto2.Message):
    """
    / PARAMS

    Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
    and including google themselves
    https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
    we instead use a repeated field with a single element to represent an
    optional field and if the repeated field is empty, it is considered to be the
    same as if the field was not set
    """

    version: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    max_serialized_msg_length: "list[int]" = betterproto2.field(
        2, betterproto2.TYPE_INT64, repeated=True
    )

    min_topic_weight: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    required_minimum_stake: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )

    remove_stake_delay_window: "list[int]" = betterproto2.field(
        6, betterproto2.TYPE_INT64, repeated=True
    )

    min_epoch_length: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_INT64, repeated=True
    )

    beta_entropy: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )

    learning_rate: "list[str]" = betterproto2.field(
        9, betterproto2.TYPE_STRING, repeated=True
    )

    max_gradient_threshold: "list[str]" = betterproto2.field(
        10, betterproto2.TYPE_STRING, repeated=True
    )

    min_stake_fraction: "list[str]" = betterproto2.field(
        11, betterproto2.TYPE_STRING, repeated=True
    )

    max_unfulfilled_worker_requests: "list[int]" = betterproto2.field(
        13, betterproto2.TYPE_UINT64, repeated=True
    )

    max_unfulfilled_reputer_requests: "list[int]" = betterproto2.field(
        14, betterproto2.TYPE_UINT64, repeated=True
    )

    topic_reward_stake_importance: "list[str]" = betterproto2.field(
        15, betterproto2.TYPE_STRING, repeated=True
    )

    topic_reward_fee_revenue_importance: "list[str]" = betterproto2.field(
        16, betterproto2.TYPE_STRING, repeated=True
    )

    topic_reward_alpha: "list[str]" = betterproto2.field(
        17, betterproto2.TYPE_STRING, repeated=True
    )

    task_reward_alpha: "list[str]" = betterproto2.field(
        18, betterproto2.TYPE_STRING, repeated=True
    )

    validators_vs_allora_percent_reward: "list[str]" = betterproto2.field(
        19, betterproto2.TYPE_STRING, repeated=True
    )

    max_samples_to_scale_scores: "list[int]" = betterproto2.field(
        20, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_inferers_to_reward: "list[int]" = betterproto2.field(
        21, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_forecasters_to_reward: "list[int]" = betterproto2.field(
        22, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_reputers_to_reward: "list[int]" = betterproto2.field(
        23, betterproto2.TYPE_UINT64, repeated=True
    )

    create_topic_fee: "list[str]" = betterproto2.field(
        24, betterproto2.TYPE_STRING, repeated=True
    )

    gradient_descent_max_iters: "list[int]" = betterproto2.field(
        25, betterproto2.TYPE_UINT64, repeated=True
    )

    registration_fee: "list[str]" = betterproto2.field(
        28, betterproto2.TYPE_STRING, repeated=True
    )

    default_page_limit: "list[int]" = betterproto2.field(
        29, betterproto2.TYPE_UINT64, repeated=True
    )

    max_page_limit: "list[int]" = betterproto2.field(
        30, betterproto2.TYPE_UINT64, repeated=True
    )

    min_epoch_length_record_limit: "list[int]" = betterproto2.field(
        31, betterproto2.TYPE_INT64, repeated=True
    )

    blocks_per_month: "list[int]" = betterproto2.field(
        32, betterproto2.TYPE_UINT64, repeated=True
    )

    p_reward_inference: "list[str]" = betterproto2.field(
        33, betterproto2.TYPE_STRING, repeated=True
    )

    p_reward_forecast: "list[str]" = betterproto2.field(
        34, betterproto2.TYPE_STRING, repeated=True
    )

    p_reward_reputer: "list[str]" = betterproto2.field(
        35, betterproto2.TYPE_STRING, repeated=True
    )

    c_reward_inference: "list[str]" = betterproto2.field(
        36, betterproto2.TYPE_STRING, repeated=True
    )

    c_reward_forecast: "list[str]" = betterproto2.field(
        37, betterproto2.TYPE_STRING, repeated=True
    )

    c_norm: "list[str]" = betterproto2.field(
        38, betterproto2.TYPE_STRING, repeated=True
    )

    epsilon_reputer: "list[str]" = betterproto2.field(
        40, betterproto2.TYPE_STRING, repeated=True
    )

    half_max_process_stake_removals_end_block: "list[int]" = betterproto2.field(
        42, betterproto2.TYPE_UINT64, repeated=True
    )

    data_sending_fee: "list[str]" = betterproto2.field(
        43, betterproto2.TYPE_STRING, repeated=True
    )

    epsilon_safe_div: "list[str]" = betterproto2.field(
        44, betterproto2.TYPE_STRING, repeated=True
    )

    max_elements_per_forecast: "list[int]" = betterproto2.field(
        45, betterproto2.TYPE_UINT64, repeated=True
    )

    max_active_topics_per_block: "list[int]" = betterproto2.field(
        46, betterproto2.TYPE_UINT64, repeated=True
    )


default_message_pool.register_message("emissions.v3", "OptionalParams", OptionalParams)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters of the module.
    """

    version: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    version of the protocol should be in lockstep with
    """

    max_serialized_msg_length: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    github release tag version

    max length of input data for msg and query server calls
    """

    min_topic_weight: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    total unmet demand for a topic < this => don't run inference
    """

    required_minimum_stake: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    solicatation or weight-adjustment

    minimum amount of tokens to send to stake as a reputer or worker
    """

    remove_stake_delay_window: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)
    """
    how long to wait (blocks) before allowed to remove stake
    """

    min_epoch_length: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)
    """
    fastest allowable topic epoch and cadence of a
    """

    beta_entropy: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    repeating inference request

    controls resilience of reward payouts against copycat workers
    """

    learning_rate: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)
    """
    speed of gradient descent
    """

    max_gradient_threshold: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    gradient descent stops when gradient falls below this
    """

    min_stake_fraction: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)
    """
    minimum fraction of stake to listen to when setting consensus listening
    """

    max_unfulfilled_worker_requests: "int" = betterproto2.field(
        13, betterproto2.TYPE_UINT64
    )
    """
    coefficients

    max num worker request nonces to keep track of per topic
    """

    max_unfulfilled_reputer_requests: "int" = betterproto2.field(
        14, betterproto2.TYPE_UINT64
    )
    """
    max num reputer request nonces to keep track of per topic
    """

    topic_reward_stake_importance: "str" = betterproto2.field(
        15, betterproto2.TYPE_STRING
    )
    """
    The exponent μ represents the importance of stake in the reward of a
    """

    topic_reward_fee_revenue_importance: "str" = betterproto2.field(
        16, betterproto2.TYPE_STRING
    )
    """
    topic and has a fiducial value of 0.5

    The exponent ν represents the importance of fee revenue in the reward of
    """

    topic_reward_alpha: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)
    """
    a topic and has a fiducial value of 0.5

    global exponential moving average parameter. Fiducial value of 0.9375 on
    """

    task_reward_alpha: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)
    """
    a monthly timescale, 0.5 for weekly updates

    global exponential moving average parameter. Fiducial value of 0.1 used
    """

    validators_vs_allora_percent_reward: "str" = betterproto2.field(
        19, betterproto2.TYPE_STRING
    )
    """
    to calculate ~U_ij, ~V_ik, ~W_im

    percent of total supply rewarded to cosmos network validators, rest goes
    """

    max_samples_to_scale_scores: "int" = betterproto2.field(
        20, betterproto2.TYPE_UINT64
    )
    """
    to allora reputers workers etc

    number of scores to use for standard deviation calculation
    """

    max_top_inferers_to_reward: "int" = betterproto2.field(21, betterproto2.TYPE_UINT64)
    """
    max number of top inferers by score to reward
    """

    max_top_forecasters_to_reward: "int" = betterproto2.field(
        22, betterproto2.TYPE_UINT64
    )
    """
    max number of top forecasters by score to reward
    """

    max_top_reputers_to_reward: "int" = betterproto2.field(23, betterproto2.TYPE_UINT64)
    """
    max number of top reputers by score to reward
    """

    create_topic_fee: "str" = betterproto2.field(24, betterproto2.TYPE_STRING)
    """
    topic registration fee
    """

    gradient_descent_max_iters: "int" = betterproto2.field(25, betterproto2.TYPE_UINT64)
    """
    max number of gradient descent iterations
    """

    registration_fee: "str" = betterproto2.field(28, betterproto2.TYPE_STRING)
    """
    registration fee for reputer or worker
    """

    default_page_limit: "int" = betterproto2.field(29, betterproto2.TYPE_UINT64)
    """
    default limit for pagination
    """

    max_page_limit: "int" = betterproto2.field(30, betterproto2.TYPE_UINT64)
    """
    max limit for pagination
    """

    min_epoch_length_record_limit: "int" = betterproto2.field(
        31, betterproto2.TYPE_INT64
    )
    """
    min number of epochs to keep network losses, reputer losses, inferences,
    forecasts
    """

    blocks_per_month: "int" = betterproto2.field(32, betterproto2.TYPE_UINT64)
    """
    block emission rate in number of blocks expected per month
    """

    p_reward_inference: "str" = betterproto2.field(33, betterproto2.TYPE_STRING)

    p_reward_forecast: "str" = betterproto2.field(34, betterproto2.TYPE_STRING)

    p_reward_reputer: "str" = betterproto2.field(35, betterproto2.TYPE_STRING)

    c_reward_inference: "str" = betterproto2.field(36, betterproto2.TYPE_STRING)

    c_reward_forecast: "str" = betterproto2.field(37, betterproto2.TYPE_STRING)

    c_norm: "str" = betterproto2.field(38, betterproto2.TYPE_STRING)

    epsilon_reputer: "str" = betterproto2.field(40, betterproto2.TYPE_STRING)
    """
    a small tolerance quantity used to cap reputer scores at infinitesimally
    """

    half_max_process_stake_removals_end_block: "int" = betterproto2.field(
        42, betterproto2.TYPE_UINT64
    )
    """
    close proximities

    max amount of stake removals to process in an ABCI end block.
    """

    epsilon_safe_div: "str" = betterproto2.field(43, betterproto2.TYPE_STRING)
    """
    Applied twice once for stakeRemovals and once for
    DelegateStakeRemovals, so actual max is this number times two
    """

    data_sending_fee: "str" = betterproto2.field(44, betterproto2.TYPE_STRING)
    """
    / a small tolerance quantity used to cap division by zero
    """

    max_elements_per_forecast: "int" = betterproto2.field(45, betterproto2.TYPE_UINT64)
    """
    payload sending fee for reputer or worker

    max number of top forecasters by score to reward
    """

    max_active_topics_per_block: "int" = betterproto2.field(
        46, betterproto2.TYPE_UINT64
    )
    """
    max number of active topics per block
    """


default_message_pool.register_message("emissions.v3", "Params", Params)


@dataclass(eq=False, repr=False)
class QueryActiveTopicsAtBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "QueryActiveTopicsAtBlockRequest", QueryActiveTopicsAtBlockRequest
)


@dataclass(eq=False, repr=False)
class QueryActiveTopicsAtBlockResponse(betterproto2.Message):
    topics: "list[Topic]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "SimpleCursorPaginationResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryActiveTopicsAtBlockResponse", QueryActiveTopicsAtBlockResponse
)


@dataclass(eq=False, repr=False)
class QueryActiveTopicsRequest(betterproto2.Message):
    pagination: "SimpleCursorPaginationRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryActiveTopicsRequest", QueryActiveTopicsRequest
)


@dataclass(eq=False, repr=False)
class QueryActiveTopicsResponse(betterproto2.Message):
    topics: "list[Topic]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "SimpleCursorPaginationResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryActiveTopicsResponse", QueryActiveTopicsResponse
)


@dataclass(eq=False, repr=False)
class QueryCurrentLowestForecasterScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryCurrentLowestForecasterScoreRequest",
    QueryCurrentLowestForecasterScoreRequest,
)


@dataclass(eq=False, repr=False)
class QueryCurrentLowestForecasterScoreResponse(betterproto2.Message):
    score: "Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryCurrentLowestForecasterScoreResponse",
    QueryCurrentLowestForecasterScoreResponse,
)


@dataclass(eq=False, repr=False)
class QueryCurrentLowestInfererScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryCurrentLowestInfererScoreRequest",
    QueryCurrentLowestInfererScoreRequest,
)


@dataclass(eq=False, repr=False)
class QueryCurrentLowestInfererScoreResponse(betterproto2.Message):
    score: "Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryCurrentLowestInfererScoreResponse",
    QueryCurrentLowestInfererScoreResponse,
)


@dataclass(eq=False, repr=False)
class QueryCurrentLowestReputerScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryCurrentLowestReputerScoreRequest",
    QueryCurrentLowestReputerScoreRequest,
)


@dataclass(eq=False, repr=False)
class QueryCurrentLowestReputerScoreResponse(betterproto2.Message):
    score: "Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryCurrentLowestReputerScoreResponse",
    QueryCurrentLowestReputerScoreResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegateRewardPerShareRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateRewardPerShareRequest",
    QueryDelegateRewardPerShareRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegateRewardPerShareResponse(betterproto2.Message):
    reward_per_share: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateRewardPerShareResponse",
    QueryDelegateRewardPerShareResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeInTopicInReputerRequest(betterproto2.Message):
    reputer_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeInTopicInReputerRequest",
    QueryDelegateStakeInTopicInReputerRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeInTopicInReputerResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeInTopicInReputerResponse",
    QueryDelegateStakeInTopicInReputerResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakePlacementRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    target: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakePlacementRequest",
    QueryDelegateStakePlacementRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakePlacementResponse(betterproto2.Message):
    delegator_info: "DelegatorInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakePlacementResponse",
    QueryDelegateStakePlacementResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeRemovalInfoRequest",
    QueryDelegateStakeRemovalInfoRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalInfoResponse(betterproto2.Message):
    removal: "DelegateStakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeRemovalInfoResponse",
    QueryDelegateStakeRemovalInfoResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryDelegateStakeRemovalRequest", QueryDelegateStakeRemovalRequest
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalResponse(betterproto2.Message):
    stake_removal_info: "DelegateStakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeRemovalResponse",
    QueryDelegateStakeRemovalResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalsUpUntilBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeRemovalsUpUntilBlockRequest",
    QueryDelegateStakeRemovalsUpUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalsUpUntilBlockResponse(betterproto2.Message):
    removals: "list[DelegateStakeRemovalInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeRemovalsUpUntilBlockResponse",
    QueryDelegateStakeRemovalsUpUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeUponReputerRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    target: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeUponReputerRequest",
    QueryDelegateStakeUponReputerRequest,
)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeUponReputerResponse(betterproto2.Message):
    stake: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryDelegateStakeUponReputerResponse",
    QueryDelegateStakeUponReputerResponse,
)


@dataclass(eq=False, repr=False)
class QueryForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryForecasterNetworkRegretRequest",
    QueryForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class QueryForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryForecasterNetworkRegretResponse",
    QueryForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryForecastsAtBlockRequest(betterproto2.Message):
    """
    Returns the forecasts on a topic posted at a block height
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "QueryForecastsAtBlockRequest", QueryForecastsAtBlockRequest
)


@dataclass(eq=False, repr=False)
class QueryForecastsAtBlockResponse(betterproto2.Message):
    """
    Returns the forecasts on a topic posted at a block height

    NOTE: The amount field is a Uint which implements the custom method
    signatures required by gogoproto.
    """

    forecasts: "Forecasts | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryForecastsAtBlockResponse", QueryForecastsAtBlockResponse
)


@dataclass(eq=False, repr=False)
class QueryForecastScoresUntilBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryForecastScoresUntilBlockRequest",
    QueryForecastScoresUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryForecastScoresUntilBlockResponse(betterproto2.Message):
    scores: "list[Score]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryForecastScoresUntilBlockResponse",
    QueryForecastScoresUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryGetForecasterScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetForecasterScoreEmaRequest",
    QueryGetForecasterScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class QueryGetForecasterScoreEmaResponse(betterproto2.Message):
    score: "Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetForecasterScoreEmaResponse",
    QueryGetForecasterScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class QueryGetInfererScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryGetInfererScoreEmaRequest", QueryGetInfererScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class QueryGetInfererScoreEmaResponse(betterproto2.Message):
    score: "Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryGetInfererScoreEmaResponse", QueryGetInfererScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class QueryGetPreviousTopicQuantileForecasterScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetPreviousTopicQuantileForecasterScoreEmaRequest",
    QueryGetPreviousTopicQuantileForecasterScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class QueryGetPreviousTopicQuantileForecasterScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetPreviousTopicQuantileForecasterScoreEmaResponse",
    QueryGetPreviousTopicQuantileForecasterScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class QueryGetPreviousTopicQuantileInfererScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetPreviousTopicQuantileInfererScoreEmaRequest",
    QueryGetPreviousTopicQuantileInfererScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class QueryGetPreviousTopicQuantileInfererScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetPreviousTopicQuantileInfererScoreEmaResponse",
    QueryGetPreviousTopicQuantileInfererScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class QueryGetPreviousTopicQuantileReputerScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetPreviousTopicQuantileReputerScoreEmaRequest",
    QueryGetPreviousTopicQuantileReputerScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class QueryGetPreviousTopicQuantileReputerScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryGetPreviousTopicQuantileReputerScoreEmaResponse",
    QueryGetPreviousTopicQuantileReputerScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class QueryGetReputerScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryGetReputerScoreEmaRequest", QueryGetReputerScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class QueryGetReputerScoreEmaResponse(betterproto2.Message):
    score: "Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryGetReputerScoreEmaResponse", QueryGetReputerScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class QueryInferencesAtBlockRequest(betterproto2.Message):
    """
    Returns the inferences on a topic posted at a block height
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "QueryInferencesAtBlockRequest", QueryInferencesAtBlockRequest
)


@dataclass(eq=False, repr=False)
class QueryInferencesAtBlockResponse(betterproto2.Message):
    """
    Returns the inferences on a topic posted at a block height

    NOTE: The amount field is a Uint which implements the custom method
    signatures required by gogoproto.
    """

    inferences: "Inferences | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryInferencesAtBlockResponse", QueryInferencesAtBlockResponse
)


@dataclass(eq=False, repr=False)
class QueryInferenceScoresUntilBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryInferenceScoresUntilBlockRequest",
    QueryInferenceScoresUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryInferenceScoresUntilBlockResponse(betterproto2.Message):
    scores: "list[Score]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryInferenceScoresUntilBlockResponse",
    QueryInferenceScoresUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryInfererNetworkRegretRequest", QueryInfererNetworkRegretRequest
)


@dataclass(eq=False, repr=False)
class QueryInfererNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryInfererNetworkRegretResponse",
    QueryInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryIsReputerNonceUnfulfilledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsReputerNonceUnfulfilledRequest",
    QueryIsReputerNonceUnfulfilledRequest,
)


@dataclass(eq=False, repr=False)
class QueryIsReputerNonceUnfulfilledResponse(betterproto2.Message):
    is_reputer_nonce_unfulfilled: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsReputerNonceUnfulfilledResponse",
    QueryIsReputerNonceUnfulfilledResponse,
)


@dataclass(eq=False, repr=False)
class QueryIsReputerRegisteredInTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsReputerRegisteredInTopicIdRequest",
    QueryIsReputerRegisteredInTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class QueryIsReputerRegisteredInTopicIdResponse(betterproto2.Message):
    is_registered: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsReputerRegisteredInTopicIdResponse",
    QueryIsReputerRegisteredInTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class QueryIsTopicActiveRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryIsTopicActiveRequest", QueryIsTopicActiveRequest
)


@dataclass(eq=False, repr=False)
class QueryIsTopicActiveResponse(betterproto2.Message):
    is_active: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3", "QueryIsTopicActiveResponse", QueryIsTopicActiveResponse
)


@dataclass(eq=False, repr=False)
class QueryIsWhitelistAdminRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryIsWhitelistAdminRequest", QueryIsWhitelistAdminRequest
)


@dataclass(eq=False, repr=False)
class QueryIsWhitelistAdminResponse(betterproto2.Message):
    is_admin: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3", "QueryIsWhitelistAdminResponse", QueryIsWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class QueryIsWorkerNonceUnfulfilledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsWorkerNonceUnfulfilledRequest",
    QueryIsWorkerNonceUnfulfilledRequest,
)


@dataclass(eq=False, repr=False)
class QueryIsWorkerNonceUnfulfilledResponse(betterproto2.Message):
    is_worker_nonce_unfulfilled: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsWorkerNonceUnfulfilledResponse",
    QueryIsWorkerNonceUnfulfilledResponse,
)


@dataclass(eq=False, repr=False)
class QueryIsWorkerRegisteredInTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsWorkerRegisteredInTopicIdRequest",
    QueryIsWorkerRegisteredInTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class QueryIsWorkerRegisteredInTopicIdResponse(betterproto2.Message):
    is_registered: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3",
    "QueryIsWorkerRegisteredInTopicIdResponse",
    QueryIsWorkerRegisteredInTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class QueryLatestAvailableNetworkInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryLatestAvailableNetworkInferencesRequest",
    QueryLatestAvailableNetworkInferencesRequest,
)


@dataclass(eq=False, repr=False)
class QueryLatestAvailableNetworkInferencesResponse(betterproto2.Message):
    network_inferences: "ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecast_implied_inferences: "list[WorkerAttributedValue]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryLatestAvailableNetworkInferencesResponse",
    QueryLatestAvailableNetworkInferencesResponse,
)


@dataclass(eq=False, repr=False)
class QueryLatestNetworkInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryLatestNetworkInferencesRequest",
    QueryLatestNetworkInferencesRequest,
)


@dataclass(eq=False, repr=False)
class QueryLatestNetworkInferencesResponse(betterproto2.Message):
    network_inferences: "ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecast_implied_inferences: "list[WorkerAttributedValue]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryLatestNetworkInferencesResponse",
    QueryLatestNetworkInferencesResponse,
)


@dataclass(eq=False, repr=False)
class QueryLatestTopicInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryLatestTopicInferencesRequest",
    QueryLatestTopicInferencesRequest,
)


@dataclass(eq=False, repr=False)
class QueryLatestTopicInferencesResponse(betterproto2.Message):
    inferences: "Inferences | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryLatestTopicInferencesResponse",
    QueryLatestTopicInferencesResponse,
)


@dataclass(eq=False, repr=False)
class QueryListeningCoefficientRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryListeningCoefficientRequest", QueryListeningCoefficientRequest
)


@dataclass(eq=False, repr=False)
class QueryListeningCoefficientResponse(betterproto2.Message):
    listening_coefficient: "ListeningCoefficient | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryListeningCoefficientResponse",
    QueryListeningCoefficientResponse,
)


@dataclass(eq=False, repr=False)
class QueryMultiReputerStakeInTopicRequest(betterproto2.Message):
    addresses: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryMultiReputerStakeInTopicRequest",
    QueryMultiReputerStakeInTopicRequest,
)


@dataclass(eq=False, repr=False)
class QueryMultiReputerStakeInTopicResponse(betterproto2.Message):
    amounts: "list[StakeInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryMultiReputerStakeInTopicResponse",
    QueryMultiReputerStakeInTopicResponse,
)


@dataclass(eq=False, repr=False)
class QueryNaiveInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryNaiveInfererNetworkRegretRequest",
    QueryNaiveInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class QueryNaiveInfererNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryNaiveInfererNetworkRegretResponse",
    QueryNaiveInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryNetworkInferencesAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height_last_inference: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryNetworkInferencesAtBlockRequest",
    QueryNetworkInferencesAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryNetworkInferencesAtBlockResponse(betterproto2.Message):
    network_inferences: "ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryNetworkInferencesAtBlockResponse",
    QueryNetworkInferencesAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryNetworkLossBundleAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryNetworkLossBundleAtBlockRequest",
    QueryNetworkLossBundleAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryNetworkLossBundleAtBlockResponse(betterproto2.Message):
    loss_bundle: "ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryNetworkLossBundleAtBlockResponse",
    QueryNetworkLossBundleAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryNextChurningBlockByTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryNextChurningBlockByTopicIdRequest",
    QueryNextChurningBlockByTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class QueryNextChurningBlockByTopicIdResponse(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryNextChurningBlockByTopicIdResponse",
    QueryNextChurningBlockByTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class QueryNextTopicIdRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "QueryNextTopicIdRequest", QueryNextTopicIdRequest
)


@dataclass(eq=False, repr=False)
class QueryNextTopicIdResponse(betterproto2.Message):
    next_topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryNextTopicIdResponse", QueryNextTopicIdResponse
)


@dataclass(eq=False, repr=False)
class QueryOneInForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneInForecasterNetworkRegretRequest",
    QueryOneInForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class QueryOneInForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneInForecasterNetworkRegretResponse",
    QueryOneInForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutForecasterForecasterNetworkRegretRequest",
    QueryOneOutForecasterForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutForecasterForecasterNetworkRegretResponse",
    QueryOneOutForecasterForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutForecasterInfererNetworkRegretRequest",
    QueryOneOutForecasterInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterInfererNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutForecasterInfererNetworkRegretResponse",
    QueryOneOutForecasterInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutInfererForecasterNetworkRegretRequest",
    QueryOneOutInfererForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutInfererForecasterNetworkRegretResponse",
    QueryOneOutInfererForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutInfererInfererNetworkRegretRequest",
    QueryOneOutInfererInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererInfererNetworkRegretResponse(betterproto2.Message):
    regret: "TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryOneOutInfererInfererNetworkRegretResponse",
    QueryOneOutInfererInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto2.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "emissions.v3", "QueryParamsRequest", QueryParamsRequest
)


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto2.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "emissions.v3", "QueryParamsResponse", QueryParamsResponse
)


@dataclass(eq=False, repr=False)
class QueryPreviousForecastRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousForecastRewardFractionRequest",
    QueryPreviousForecastRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class QueryPreviousForecastRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousForecastRewardFractionResponse",
    QueryPreviousForecastRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class QueryPreviousInferenceRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousInferenceRewardFractionRequest",
    QueryPreviousInferenceRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class QueryPreviousInferenceRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousInferenceRewardFractionResponse",
    QueryPreviousInferenceRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class QueryPreviousPercentageRewardToStakedReputersRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousPercentageRewardToStakedReputersRequest",
    QueryPreviousPercentageRewardToStakedReputersRequest,
)


@dataclass(eq=False, repr=False)
class QueryPreviousPercentageRewardToStakedReputersResponse(betterproto2.Message):
    percentage_reward: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousPercentageRewardToStakedReputersResponse",
    QueryPreviousPercentageRewardToStakedReputersResponse,
)


@dataclass(eq=False, repr=False)
class QueryPreviousReputerRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousReputerRewardFractionRequest",
    QueryPreviousReputerRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class QueryPreviousReputerRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3",
    "QueryPreviousReputerRewardFractionResponse",
    QueryPreviousReputerRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class QueryPreviousTopicWeightRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryPreviousTopicWeightRequest", QueryPreviousTopicWeightRequest
)


@dataclass(eq=False, repr=False)
class QueryPreviousTopicWeightResponse(betterproto2.Message):
    weight: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3", "QueryPreviousTopicWeightResponse", QueryPreviousTopicWeightResponse
)


@dataclass(eq=False, repr=False)
class QueryReputerLossBundlesAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryReputerLossBundlesAtBlockRequest",
    QueryReputerLossBundlesAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryReputerLossBundlesAtBlockResponse(betterproto2.Message):
    loss_bundles: "ReputerValueBundles | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryReputerLossBundlesAtBlockResponse",
    QueryReputerLossBundlesAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryReputerNodeInfoRequest(betterproto2.Message):
    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryReputerNodeInfoRequest", QueryReputerNodeInfoRequest
)


@dataclass(eq=False, repr=False)
class QueryReputerNodeInfoResponse(betterproto2.Message):
    node_info: "OffchainNode | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryReputerNodeInfoResponse", QueryReputerNodeInfoResponse
)


@dataclass(eq=False, repr=False)
class QueryReputersScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryReputersScoresAtBlockRequest",
    QueryReputersScoresAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryReputersScoresAtBlockResponse(betterproto2.Message):
    scores: "Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryReputersScoresAtBlockResponse",
    QueryReputersScoresAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryReputerStakeInTopicRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryReputerStakeInTopicRequest", QueryReputerStakeInTopicRequest
)


@dataclass(eq=False, repr=False)
class QueryReputerStakeInTopicResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryReputerStakeInTopicResponse", QueryReputerStakeInTopicResponse
)


@dataclass(eq=False, repr=False)
class QueryRewardableTopicsRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3", "QueryRewardableTopicsRequest", QueryRewardableTopicsRequest
)


@dataclass(eq=False, repr=False)
class QueryRewardableTopicsResponse(betterproto2.Message):
    rewardable_topic_ids: "list[int]" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryRewardableTopicsResponse", QueryRewardableTopicsResponse
)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicInReputerRequest(betterproto2.Message):
    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeFromDelegatorInTopicInReputerRequest",
    QueryStakeFromDelegatorInTopicInReputerRequest,
)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicInReputerResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeFromDelegatorInTopicInReputerResponse",
    QueryStakeFromDelegatorInTopicInReputerResponse,
)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicRequest(betterproto2.Message):
    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeFromDelegatorInTopicRequest",
    QueryStakeFromDelegatorInTopicRequest,
)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeFromDelegatorInTopicResponse",
    QueryStakeFromDelegatorInTopicResponse,
)


@dataclass(eq=False, repr=False)
class QueryStakeFromReputerInTopicInSelfRequest(betterproto2.Message):
    reputer_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeFromReputerInTopicInSelfRequest",
    QueryStakeFromReputerInTopicInSelfRequest,
)


@dataclass(eq=False, repr=False)
class QueryStakeFromReputerInTopicInSelfResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeFromReputerInTopicInSelfResponse",
    QueryStakeFromReputerInTopicInSelfResponse,
)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalForReputerAndTopicIdRequest(betterproto2.Message):
    reputer: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeRemovalForReputerAndTopicIdRequest",
    QueryStakeRemovalForReputerAndTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalForReputerAndTopicIdResponse(betterproto2.Message):
    stake_removal_info: "StakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeRemovalForReputerAndTopicIdResponse",
    QueryStakeRemovalForReputerAndTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryStakeRemovalInfoRequest", QueryStakeRemovalInfoRequest
)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalInfoResponse(betterproto2.Message):
    removal: "StakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryStakeRemovalInfoResponse", QueryStakeRemovalInfoResponse
)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalsUpUntilBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeRemovalsUpUntilBlockRequest",
    QueryStakeRemovalsUpUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalsUpUntilBlockResponse(betterproto2.Message):
    removals: "list[StakeRemovalInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeRemovalsUpUntilBlockResponse",
    QueryStakeRemovalsUpUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryStakeReputerAuthorityRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeReputerAuthorityRequest",
    QueryStakeReputerAuthorityRequest,
)


@dataclass(eq=False, repr=False)
class QueryStakeReputerAuthorityResponse(betterproto2.Message):
    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryStakeReputerAuthorityResponse",
    QueryStakeReputerAuthorityResponse,
)


@dataclass(eq=False, repr=False)
class QueryTopicExistsRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicExistsRequest", QueryTopicExistsRequest
)


@dataclass(eq=False, repr=False)
class QueryTopicExistsResponse(betterproto2.Message):
    exists: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicExistsResponse", QueryTopicExistsResponse
)


@dataclass(eq=False, repr=False)
class QueryTopicFeeRevenueRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicFeeRevenueRequest", QueryTopicFeeRevenueRequest
)


@dataclass(eq=False, repr=False)
class QueryTopicFeeRevenueResponse(betterproto2.Message):
    fee_revenue: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicFeeRevenueResponse", QueryTopicFeeRevenueResponse
)


@dataclass(eq=False, repr=False)
class QueryTopicLastReputerCommitInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryTopicLastReputerCommitInfoRequest",
    QueryTopicLastReputerCommitInfoRequest,
)


@dataclass(eq=False, repr=False)
class QueryTopicLastReputerCommitInfoResponse(betterproto2.Message):
    last_commit: "TimestampedActorNonce | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryTopicLastReputerCommitInfoResponse",
    QueryTopicLastReputerCommitInfoResponse,
)


@dataclass(eq=False, repr=False)
class QueryTopicLastWorkerCommitInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryTopicLastWorkerCommitInfoRequest",
    QueryTopicLastWorkerCommitInfoRequest,
)


@dataclass(eq=False, repr=False)
class QueryTopicLastWorkerCommitInfoResponse(betterproto2.Message):
    last_commit: "TimestampedActorNonce | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryTopicLastWorkerCommitInfoResponse",
    QueryTopicLastWorkerCommitInfoResponse,
)


@dataclass(eq=False, repr=False)
class QueryTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicRequest", QueryTopicRequest
)


@dataclass(eq=False, repr=False)
class QueryTopicResponse(betterproto2.Message):
    topic: "Topic | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    weight: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    effective_revenue: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicResponse", QueryTopicResponse
)


@dataclass(eq=False, repr=False)
class QueryTopicRewardNonceRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicRewardNonceRequest", QueryTopicRewardNonceRequest
)


@dataclass(eq=False, repr=False)
class QueryTopicRewardNonceResponse(betterproto2.Message):
    nonce: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicRewardNonceResponse", QueryTopicRewardNonceResponse
)


@dataclass(eq=False, repr=False)
class QueryTopicStakeRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicStakeRequest", QueryTopicStakeRequest
)


@dataclass(eq=False, repr=False)
class QueryTopicStakeResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryTopicStakeResponse", QueryTopicStakeResponse
)


@dataclass(eq=False, repr=False)
class QueryTotalRewardToDistributeRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v3",
    "QueryTotalRewardToDistributeRequest",
    QueryTotalRewardToDistributeRequest,
)


@dataclass(eq=False, repr=False)
class QueryTotalRewardToDistributeResponse(betterproto2.Message):
    total_reward: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryTotalRewardToDistributeResponse",
    QueryTotalRewardToDistributeResponse,
)


@dataclass(eq=False, repr=False)
class QueryTotalStakeRequest(betterproto2.Message):
    """
    Total Stake returns the total amount of stake in the system
    """

    pass


default_message_pool.register_message(
    "emissions.v3", "QueryTotalStakeRequest", QueryTotalStakeRequest
)


@dataclass(eq=False, repr=False)
class QueryTotalStakeResponse(betterproto2.Message):
    """
    Total Stake returns the total amount of stake in the system

    NOTE: The amount field is an Int which implements the custom method
    signatures required by gogoproto.
    """

    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryTotalStakeResponse", QueryTotalStakeResponse
)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledReputerNoncesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryUnfulfilledReputerNoncesRequest",
    QueryUnfulfilledReputerNoncesRequest,
)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledReputerNoncesResponse(betterproto2.Message):
    nonces: "ReputerRequestNonces | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryUnfulfilledReputerNoncesResponse",
    QueryUnfulfilledReputerNoncesResponse,
)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledWorkerNoncesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryUnfulfilledWorkerNoncesRequest",
    QueryUnfulfilledWorkerNoncesRequest,
)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledWorkerNoncesResponse(betterproto2.Message):
    nonces: "Nonces | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryUnfulfilledWorkerNoncesResponse",
    QueryUnfulfilledWorkerNoncesResponse,
)


@dataclass(eq=False, repr=False)
class QueryWorkerForecastScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryWorkerForecastScoresAtBlockRequest",
    QueryWorkerForecastScoresAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryWorkerForecastScoresAtBlockResponse(betterproto2.Message):
    scores: "Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryWorkerForecastScoresAtBlockResponse",
    QueryWorkerForecastScoresAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryWorkerInferenceScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3",
    "QueryWorkerInferenceScoresAtBlockRequest",
    QueryWorkerInferenceScoresAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class QueryWorkerInferenceScoresAtBlockResponse(betterproto2.Message):
    scores: "Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryWorkerInferenceScoresAtBlockResponse",
    QueryWorkerInferenceScoresAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class QueryWorkerLatestInferenceRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3",
    "QueryWorkerLatestInferenceRequest",
    QueryWorkerLatestInferenceRequest,
)


@dataclass(eq=False, repr=False)
class QueryWorkerLatestInferenceResponse(betterproto2.Message):
    latest_inference: "Inference | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "QueryWorkerLatestInferenceResponse",
    QueryWorkerLatestInferenceResponse,
)


@dataclass(eq=False, repr=False)
class QueryWorkerNodeInfoRequest(betterproto2.Message):
    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "QueryWorkerNodeInfoRequest", QueryWorkerNodeInfoRequest
)


@dataclass(eq=False, repr=False)
class QueryWorkerNodeInfoResponse(betterproto2.Message):
    node_info: "OffchainNode | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "QueryWorkerNodeInfoResponse", QueryWorkerNodeInfoResponse
)


@dataclass(eq=False, repr=False)
class RegretInformedWeight(betterproto2.Message):
    worker: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    worker who created the value
    """

    weight: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "RegretInformedWeight", RegretInformedWeight
)


@dataclass(eq=False, repr=False)
class ReputerRequestNonce(betterproto2.Message):
    reputer_nonce: "Nonce | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    the reputers should respond to the reputer request with losses for work
    found at this worker nonce
    """


default_message_pool.register_message(
    "emissions.v3", "ReputerRequestNonce", ReputerRequestNonce
)


@dataclass(eq=False, repr=False)
class ReputerRequestNonces(betterproto2.Message):
    nonces: "list[ReputerRequestNonce]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3", "ReputerRequestNonces", ReputerRequestNonces
)


@dataclass(eq=False, repr=False)
class ReputerValueBundle(betterproto2.Message):
    """
    For when the bundle is computed on a per-reputer basis (ie.. if there is an
    index `m` in the above)
    """

    value_bundle: "ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    signature: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    pubkey: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "ReputerValueBundle", ReputerValueBundle
)


@dataclass(eq=False, repr=False)
class ReputerValueBundles(betterproto2.Message):
    reputer_value_bundles: "list[ReputerValueBundle]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3", "ReputerValueBundles", ReputerValueBundles
)


@dataclass(eq=False, repr=False)
class Score(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    address: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    score: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "Score", Score)


@dataclass(eq=False, repr=False)
class Scores(betterproto2.Message):
    scores: "list[Score]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("emissions.v3", "Scores", Scores)


@dataclass(eq=False, repr=False)
class SimpleCursorPaginationRequest(betterproto2.Message):
    key: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    limit: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v3", "SimpleCursorPaginationRequest", SimpleCursorPaginationRequest
)


@dataclass(eq=False, repr=False)
class SimpleCursorPaginationResponse(betterproto2.Message):
    next_key: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "emissions.v3", "SimpleCursorPaginationResponse", SimpleCursorPaginationResponse
)


@dataclass(eq=False, repr=False)
class StakeInfo(betterproto2.Message):
    """
    Introduced in ConsensusVersion = 2
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "StakeInfo", StakeInfo)


@dataclass(eq=False, repr=False)
class StakePlacement(betterproto2.Message):
    """
    Bad naming convention, only used in StakeRemovals
    DEPRECATED in ConsensusVersion = 2
    TO BE DELETED in ConsensusVersion = 3
    """

    block_removal_started: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "StakePlacement", StakePlacement)


@dataclass(eq=False, repr=False)
class StakeRemovalInfo(betterproto2.Message):
    """
    Introduced in ConsensusVersion = 2
    """

    block_removal_started: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    block_removal_completed: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "StakeRemovalInfo", StakeRemovalInfo
)


@dataclass(eq=False, repr=False)
class TimestampedActorNonce(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    height at which value calculated or received
    """

    nonce: "Nonce | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TimestampedActorNonce", TimestampedActorNonce
)


@dataclass(eq=False, repr=False)
class TimestampedValue(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    height at which value calculated or received
    """

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "TimestampedValue", TimestampedValue
)


@dataclass(eq=False, repr=False)
class Topic(betterproto2.Message):
    id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    creator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    metadata: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    loss_method: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    epoch_last_ended: "int" = betterproto2.field(8, betterproto2.TYPE_INT64)

    epoch_length: "int" = betterproto2.field(9, betterproto2.TYPE_INT64)

    ground_truth_lag: "int" = betterproto2.field(10, betterproto2.TYPE_INT64)

    p_norm: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)

    alpha_regret: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    allow_negative: "bool" = betterproto2.field(14, betterproto2.TYPE_BOOL)

    epsilon: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    initial_regret: "str" = betterproto2.field(16, betterproto2.TYPE_STRING)

    worker_submission_window: "int" = betterproto2.field(17, betterproto2.TYPE_INT64)

    merit_sortition_alpha: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)
    """
    alpha parameter to weight previous score EMA importance in
    filtering the active set of inferers, forecasters, and reputers
    """

    active_inferer_quantile: "str" = betterproto2.field(19, betterproto2.TYPE_STRING)

    active_forecaster_quantile: "str" = betterproto2.field(20, betterproto2.TYPE_STRING)

    active_reputer_quantile: "str" = betterproto2.field(21, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "Topic", Topic)


@dataclass(eq=False, repr=False)
class TopicAndActorId(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "TopicAndActorId", TopicAndActorId
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdActorIdTimeStampedValue(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id_1: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    actor_id_2: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    timestamped_value: "TimestampedValue | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "TopicIdActorIdActorIdTimeStampedValue",
    TopicIdActorIdActorIdTimeStampedValue,
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdDec(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    dec: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "TopicIdActorIdDec", TopicIdActorIdDec
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdForecast(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecast: "Forecast | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdActorIdForecast", TopicIdActorIdForecast
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInference(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inference: "Inference | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdActorIdInference", TopicIdActorIdInference
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInt(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    int: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "TopicIdActorIdInt", TopicIdActorIdInt
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdListeningCoefficient(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    listening_coefficient: "ListeningCoefficient | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "TopicIdActorIdListeningCoefficient",
    TopicIdActorIdListeningCoefficient,
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdScore(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    score: "Score | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdActorIdScore", TopicIdActorIdScore
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdTimeStampedValue(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    timestamped_value: "TimestampedValue | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdActorIdTimeStampedValue", TopicIdActorIdTimeStampedValue
)


@dataclass(eq=False, repr=False)
class TopicIdAndBlockHeight(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v3", "TopicIdAndBlockHeight", TopicIdAndBlockHeight
)


@dataclass(eq=False, repr=False)
class TopicIdAndDec(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    dec: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "TopicIdAndDec", TopicIdAndDec)


@dataclass(eq=False, repr=False)
class TopicIdAndInt(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    int: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v3", "TopicIdAndInt", TopicIdAndInt)


@dataclass(eq=False, repr=False)
class TopicIdAndNonces(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    nonces: "Nonces | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdAndNonces", TopicIdAndNonces
)


@dataclass(eq=False, repr=False)
class TopicIdAndReputerRequestNonces(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer_request_nonces: "ReputerRequestNonces | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdAndReputerRequestNonces", TopicIdAndReputerRequestNonces
)


@dataclass(eq=False, repr=False)
class TopicIdAndTopic(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    topic: "Topic | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdAndTopic", TopicIdAndTopic
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightForecasts(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    forecasts: "Forecasts | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdBlockHeightForecasts", TopicIdBlockHeightForecasts
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightInferences(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    inferences: "Inferences | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdBlockHeightInferences", TopicIdBlockHeightInferences
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightReputerValueBundles(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    reputer_value_bundles: "ReputerValueBundles | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "TopicIdBlockHeightReputerValueBundles",
    TopicIdBlockHeightReputerValueBundles,
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightScores(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    scores: "Scores | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdBlockHeightScores", TopicIdBlockHeightScores
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightValueBundles(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    value_bundle: "ValueBundle | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdBlockHeightValueBundles", TopicIdBlockHeightValueBundles
)


@dataclass(eq=False, repr=False)
class TopicIdDelegatorReputerDelegatorInfo(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    delegator_info: "DelegatorInfo | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3",
    "TopicIdDelegatorReputerDelegatorInfo",
    TopicIdDelegatorReputerDelegatorInfo,
)


@dataclass(eq=False, repr=False)
class TopicIds(betterproto2.Message):
    topic_ids: "list[int]" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, repeated=True
    )


default_message_pool.register_message("emissions.v3", "TopicIds", TopicIds)


@dataclass(eq=False, repr=False)
class TopicIdTimestampedActorNonce(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    timestamped_actor_nonce: "TimestampedActorNonce | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v3", "TopicIdTimestampedActorNonce", TopicIdTimestampedActorNonce
)


@dataclass(eq=False, repr=False)
class TopicIdWeightPair(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    weight: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "TopicIdWeightPair", TopicIdWeightPair
)


@dataclass(eq=False, repr=False)
class TopicList(betterproto2.Message):
    topics: "list[Topic]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("emissions.v3", "TopicList", TopicList)


@dataclass(eq=False, repr=False)
class ValueBundle(betterproto2.Message):
    """
    These losses and inferences are calculated per reputer or by the network
    The `m`s in the comments below exist for when they're made by reputers,
    but they may be absent implying that they were made by the network
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer_request_nonce: "ReputerRequestNonce | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    extra_data: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)

    combined_value: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    R_im || log10 L_im || I_i
    """

    inferer_values: "list[WorkerAttributedValue]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    R_ijm || log10 L_ijm || I_ij
    """

    forecaster_values: "list[WorkerAttributedValue]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    R_ikm || log10 L_ikm || I_ik
    """

    naive_value: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    R^-_im  || log10 L^-_im || I^-_i
    """

    one_out_inferer_values: "list[WithheldWorkerAttributedValue]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Note: forecast-implied inferences are recomputed for each left-out
    inference
    """

    one_out_forecaster_values: "list[WithheldWorkerAttributedValue]" = (
        betterproto2.field(10, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    R^-_ilm || log10 L^-_ilm || I^-_il where l = any k
    """

    one_in_forecaster_values: "list[WorkerAttributedValue]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    R^+_ikm || log10 L^+_ikm || I^+_ik
    aka one_in_forecaster_values because equivalent to using only one
    forecast-implied inference
    """

    one_out_inferer_forecaster_values: "list[OneOutInfererForecasterValues]" = (
        betterproto2.field(12, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
    log10 L^-_j'ikm || I^-_j'ik
    """


default_message_pool.register_message("emissions.v3", "ValueBundle", ValueBundle)


@dataclass(eq=False, repr=False)
class WithheldWorkerAttributedValue(betterproto2.Message):
    worker: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "WithheldWorkerAttributedValue", WithheldWorkerAttributedValue
)


@dataclass(eq=False, repr=False)
class WorkerAttributedValue(betterproto2.Message):
    worker: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    worker who created the value
    """

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "WorkerAttributedValue", WorkerAttributedValue
)


@dataclass(eq=False, repr=False)
class WorkerDataBundle(betterproto2.Message):
    worker: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    nonce: "Nonce | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    inference_forecasts_bundle: "InferenceForecastBundle | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferences_forecasts_bundle_signature: "bytes" = betterproto2.field(
        5, betterproto2.TYPE_BYTES
    )

    pubkey: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v3", "WorkerDataBundle", WorkerDataBundle
)


@dataclass(eq=False, repr=False)
class WorkerDataBundles(betterproto2.Message):
    worker_data_bundles: "list[WorkerDataBundle]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v3", "WorkerDataBundles", WorkerDataBundles
)


class MsgStub:
    """
    Msg defines the module Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/UpdateParams",
            MsgUpdateParams.SerializeToString,
            MsgUpdateParamsResponse.FromString,
        )(message)

    def create_new_topic(
        self, message: "MsgCreateNewTopic"
    ) -> "MsgCreateNewTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/CreateNewTopic",
            MsgCreateNewTopic.SerializeToString,
            MsgCreateNewTopicResponse.FromString,
        )(message)

    def register(self, message: "MsgRegister") -> "MsgRegisterResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/Register",
            MsgRegister.SerializeToString,
            MsgRegisterResponse.FromString,
        )(message)

    def remove_registration(
        self, message: "MsgRemoveRegistration"
    ) -> "MsgRemoveRegistrationResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/RemoveRegistration",
            MsgRemoveRegistration.SerializeToString,
            MsgRemoveRegistrationResponse.FromString,
        )(message)

    def add_stake(self, message: "MsgAddStake") -> "MsgAddStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/AddStake",
            MsgAddStake.SerializeToString,
            MsgAddStakeResponse.FromString,
        )(message)

    def remove_stake(self, message: "MsgRemoveStake") -> "MsgRemoveStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/RemoveStake",
            MsgRemoveStake.SerializeToString,
            MsgRemoveStakeResponse.FromString,
        )(message)

    def cancel_remove_stake(
        self, message: "MsgCancelRemoveStake"
    ) -> "MsgCancelRemoveStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/CancelRemoveStake",
            MsgCancelRemoveStake.SerializeToString,
            MsgCancelRemoveStakeResponse.FromString,
        )(message)

    def delegate_stake(self, message: "MsgDelegateStake") -> "MsgDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/DelegateStake",
            MsgDelegateStake.SerializeToString,
            MsgDelegateStakeResponse.FromString,
        )(message)

    def reward_delegate_stake(
        self, message: "MsgRewardDelegateStake"
    ) -> "MsgRewardDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/RewardDelegateStake",
            MsgRewardDelegateStake.SerializeToString,
            MsgRewardDelegateStakeResponse.FromString,
        )(message)

    def remove_delegate_stake(
        self, message: "MsgRemoveDelegateStake"
    ) -> "MsgRemoveDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/RemoveDelegateStake",
            MsgRemoveDelegateStake.SerializeToString,
            MsgRemoveDelegateStakeResponse.FromString,
        )(message)

    def cancel_remove_delegate_stake(
        self, message: "MsgCancelRemoveDelegateStake"
    ) -> "MsgCancelRemoveDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/CancelRemoveDelegateStake",
            MsgCancelRemoveDelegateStake.SerializeToString,
            MsgCancelRemoveDelegateStakeResponse.FromString,
        )(message)

    def fund_topic(self, message: "MsgFundTopic") -> "MsgFundTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/FundTopic",
            MsgFundTopic.SerializeToString,
            MsgFundTopicResponse.FromString,
        )(message)

    def add_to_whitelist_admin(
        self, message: "MsgAddToWhitelistAdmin"
    ) -> "MsgAddToWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/AddToWhitelistAdmin",
            MsgAddToWhitelistAdmin.SerializeToString,
            MsgAddToWhitelistAdminResponse.FromString,
        )(message)

    def remove_from_whitelist_admin(
        self, message: "MsgRemoveFromWhitelistAdmin"
    ) -> "MsgRemoveFromWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/RemoveFromWhitelistAdmin",
            MsgRemoveFromWhitelistAdmin.SerializeToString,
            MsgRemoveFromWhitelistAdminResponse.FromString,
        )(message)

    def insert_worker_payload(
        self, message: "MsgInsertWorkerPayload"
    ) -> "MsgInsertWorkerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/InsertWorkerPayload",
            MsgInsertWorkerPayload.SerializeToString,
            MsgInsertWorkerPayloadResponse.FromString,
        )(message)

    def insert_reputer_payload(
        self, message: "MsgInsertReputerPayload"
    ) -> "MsgInsertReputerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Msg/InsertReputerPayload",
            MsgInsertReputerPayload.SerializeToString,
            MsgInsertReputerPayloadResponse.FromString,
        )(message)


class MsgAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the module Msg service.
    """

    async def update_params(
        self,
        message: "MsgUpdateParams",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/UpdateParams",
            message,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_new_topic(
        self,
        message: "MsgCreateNewTopic",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgCreateNewTopicResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/CreateNewTopic",
            message,
            MsgCreateNewTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register(
        self,
        message: "MsgRegister",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRegisterResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/Register",
            message,
            MsgRegisterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_registration(
        self,
        message: "MsgRemoveRegistration",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRemoveRegistrationResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/RemoveRegistration",
            message,
            MsgRemoveRegistrationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_stake(
        self,
        message: "MsgAddStake",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgAddStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/AddStake",
            message,
            MsgAddStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_stake(
        self,
        message: "MsgRemoveStake",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/RemoveStake",
            message,
            MsgRemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_stake(
        self,
        message: "MsgCancelRemoveStake",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgCancelRemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/CancelRemoveStake",
            message,
            MsgCancelRemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegate_stake(
        self,
        message: "MsgDelegateStake",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/DelegateStake",
            message,
            MsgDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reward_delegate_stake(
        self,
        message: "MsgRewardDelegateStake",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRewardDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/RewardDelegateStake",
            message,
            MsgRewardDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_delegate_stake(
        self,
        message: "MsgRemoveDelegateStake",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/RemoveDelegateStake",
            message,
            MsgRemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_delegate_stake(
        self,
        message: "MsgCancelRemoveDelegateStake",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgCancelRemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/CancelRemoveDelegateStake",
            message,
            MsgCancelRemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_topic(
        self,
        message: "MsgFundTopic",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgFundTopicResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/FundTopic",
            message,
            MsgFundTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_whitelist_admin(
        self,
        message: "MsgAddToWhitelistAdmin",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgAddToWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/AddToWhitelistAdmin",
            message,
            MsgAddToWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_whitelist_admin(
        self,
        message: "MsgRemoveFromWhitelistAdmin",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgRemoveFromWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/RemoveFromWhitelistAdmin",
            message,
            MsgRemoveFromWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_worker_payload(
        self,
        message: "MsgInsertWorkerPayload",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgInsertWorkerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/InsertWorkerPayload",
            message,
            MsgInsertWorkerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_reputer_payload(
        self,
        message: "MsgInsertReputerPayload",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "MsgInsertReputerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v3.Msg/InsertReputerPayload",
            message,
            MsgInsertReputerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub:
    """
    Msg defines the module Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def params(
        self, message: "QueryParamsRequest | None" = None
    ) -> "QueryParamsResponse":
        """
        Params returns the module parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return self._channel.unary_unary(
            "/emissions.v3.Query/Params",
            QueryParamsRequest.SerializeToString,
            QueryParamsResponse.FromString,
        )(message)

    def get_next_topic_id(
        self, message: "QueryNextTopicIdRequest | None" = None
    ) -> "QueryNextTopicIdResponse":
        if message is None:
            message = QueryNextTopicIdRequest()

        return self._channel.unary_unary(
            "/emissions.v3.Query/GetNextTopicId",
            QueryNextTopicIdRequest.SerializeToString,
            QueryNextTopicIdResponse.FromString,
        )(message)

    def get_topic(self, message: "QueryTopicRequest") -> "QueryTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTopic",
            QueryTopicRequest.SerializeToString,
            QueryTopicResponse.FromString,
        )(message)

    def get_worker_latest_inference_by_topic_id(
        self, message: "QueryWorkerLatestInferenceRequest"
    ) -> "QueryWorkerLatestInferenceResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetWorkerLatestInferenceByTopicId",
            QueryWorkerLatestInferenceRequest.SerializeToString,
            QueryWorkerLatestInferenceResponse.FromString,
        )(message)

    def get_inferences_at_block(
        self, message: "QueryInferencesAtBlockRequest"
    ) -> "QueryInferencesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetInferencesAtBlock",
            QueryInferencesAtBlockRequest.SerializeToString,
            QueryInferencesAtBlockResponse.FromString,
        )(message)

    def get_latest_topic_inferences(
        self, message: "QueryLatestTopicInferencesRequest"
    ) -> "QueryLatestTopicInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetLatestTopicInferences",
            QueryLatestTopicInferencesRequest.SerializeToString,
            QueryLatestTopicInferencesResponse.FromString,
        )(message)

    def get_forecasts_at_block(
        self, message: "QueryForecastsAtBlockRequest"
    ) -> "QueryForecastsAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetForecastsAtBlock",
            QueryForecastsAtBlockRequest.SerializeToString,
            QueryForecastsAtBlockResponse.FromString,
        )(message)

    def get_network_loss_bundle_at_block(
        self, message: "QueryNetworkLossBundleAtBlockRequest"
    ) -> "QueryNetworkLossBundleAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetNetworkLossBundleAtBlock",
            QueryNetworkLossBundleAtBlockRequest.SerializeToString,
            QueryNetworkLossBundleAtBlockResponse.FromString,
        )(message)

    def get_total_stake(
        self, message: "QueryTotalStakeRequest | None" = None
    ) -> "QueryTotalStakeResponse":
        if message is None:
            message = QueryTotalStakeRequest()

        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTotalStake",
            QueryTotalStakeRequest.SerializeToString,
            QueryTotalStakeResponse.FromString,
        )(message)

    def get_reputer_stake_in_topic(
        self, message: "QueryReputerStakeInTopicRequest"
    ) -> "QueryReputerStakeInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetReputerStakeInTopic",
            QueryReputerStakeInTopicRequest.SerializeToString,
            QueryReputerStakeInTopicResponse.FromString,
        )(message)

    def get_multi_reputer_stake_in_topic(
        self, message: "QueryMultiReputerStakeInTopicRequest"
    ) -> "QueryMultiReputerStakeInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetMultiReputerStakeInTopic",
            QueryMultiReputerStakeInTopicRequest.SerializeToString,
            QueryMultiReputerStakeInTopicResponse.FromString,
        )(message)

    def get_stake_from_reputer_in_topic_in_self(
        self, message: "QueryStakeFromReputerInTopicInSelfRequest"
    ) -> "QueryStakeFromReputerInTopicInSelfResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetStakeFromReputerInTopicInSelf",
            QueryStakeFromReputerInTopicInSelfRequest.SerializeToString,
            QueryStakeFromReputerInTopicInSelfResponse.FromString,
        )(message)

    def get_delegate_stake_in_topic_in_reputer(
        self, message: "QueryDelegateStakeInTopicInReputerRequest"
    ) -> "QueryDelegateStakeInTopicInReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetDelegateStakeInTopicInReputer",
            QueryDelegateStakeInTopicInReputerRequest.SerializeToString,
            QueryDelegateStakeInTopicInReputerResponse.FromString,
        )(message)

    def get_stake_from_delegator_in_topic_in_reputer(
        self, message: "QueryStakeFromDelegatorInTopicInReputerRequest"
    ) -> "QueryStakeFromDelegatorInTopicInReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetStakeFromDelegatorInTopicInReputer",
            QueryStakeFromDelegatorInTopicInReputerRequest.SerializeToString,
            QueryStakeFromDelegatorInTopicInReputerResponse.FromString,
        )(message)

    def get_stake_from_delegator_in_topic(
        self, message: "QueryStakeFromDelegatorInTopicRequest"
    ) -> "QueryStakeFromDelegatorInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetStakeFromDelegatorInTopic",
            QueryStakeFromDelegatorInTopicRequest.SerializeToString,
            QueryStakeFromDelegatorInTopicResponse.FromString,
        )(message)

    def get_topic_stake(
        self, message: "QueryTopicStakeRequest"
    ) -> "QueryTopicStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTopicStake",
            QueryTopicStakeRequest.SerializeToString,
            QueryTopicStakeResponse.FromString,
        )(message)

    def get_stake_removals_up_until_block(
        self, message: "QueryStakeRemovalsUpUntilBlockRequest"
    ) -> "QueryStakeRemovalsUpUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetStakeRemovalsUpUntilBlock",
            QueryStakeRemovalsUpUntilBlockRequest.SerializeToString,
            QueryStakeRemovalsUpUntilBlockResponse.FromString,
        )(message)

    def get_delegate_stake_removals_up_until_block(
        self, message: "QueryDelegateStakeRemovalsUpUntilBlockRequest"
    ) -> "QueryDelegateStakeRemovalsUpUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetDelegateStakeRemovalsUpUntilBlock",
            QueryDelegateStakeRemovalsUpUntilBlockRequest.SerializeToString,
            QueryDelegateStakeRemovalsUpUntilBlockResponse.FromString,
        )(message)

    def get_stake_removal_info(
        self, message: "QueryStakeRemovalInfoRequest"
    ) -> "QueryStakeRemovalInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetStakeRemovalInfo",
            QueryStakeRemovalInfoRequest.SerializeToString,
            QueryStakeRemovalInfoResponse.FromString,
        )(message)

    def get_delegate_stake_removal_info(
        self, message: "QueryDelegateStakeRemovalInfoRequest"
    ) -> "QueryDelegateStakeRemovalInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetDelegateStakeRemovalInfo",
            QueryDelegateStakeRemovalInfoRequest.SerializeToString,
            QueryDelegateStakeRemovalInfoResponse.FromString,
        )(message)

    def get_worker_node_info(
        self, message: "QueryWorkerNodeInfoRequest"
    ) -> "QueryWorkerNodeInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetWorkerNodeInfo",
            QueryWorkerNodeInfoRequest.SerializeToString,
            QueryWorkerNodeInfoResponse.FromString,
        )(message)

    def get_reputer_node_info(
        self, message: "QueryReputerNodeInfoRequest"
    ) -> "QueryReputerNodeInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetReputerNodeInfo",
            QueryReputerNodeInfoRequest.SerializeToString,
            QueryReputerNodeInfoResponse.FromString,
        )(message)

    def is_worker_registered_in_topic_id(
        self, message: "QueryIsWorkerRegisteredInTopicIdRequest"
    ) -> "QueryIsWorkerRegisteredInTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/IsWorkerRegisteredInTopicId",
            QueryIsWorkerRegisteredInTopicIdRequest.SerializeToString,
            QueryIsWorkerRegisteredInTopicIdResponse.FromString,
        )(message)

    def is_reputer_registered_in_topic_id(
        self, message: "QueryIsReputerRegisteredInTopicIdRequest"
    ) -> "QueryIsReputerRegisteredInTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/IsReputerRegisteredInTopicId",
            QueryIsReputerRegisteredInTopicIdRequest.SerializeToString,
            QueryIsReputerRegisteredInTopicIdResponse.FromString,
        )(message)

    def get_network_inferences_at_block(
        self, message: "QueryNetworkInferencesAtBlockRequest"
    ) -> "QueryNetworkInferencesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetNetworkInferencesAtBlock",
            QueryNetworkInferencesAtBlockRequest.SerializeToString,
            QueryNetworkInferencesAtBlockResponse.FromString,
        )(message)

    def get_latest_network_inference(
        self, message: "QueryLatestNetworkInferencesRequest"
    ) -> "QueryLatestNetworkInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetLatestNetworkInference",
            QueryLatestNetworkInferencesRequest.SerializeToString,
            QueryLatestNetworkInferencesResponse.FromString,
        )(message)

    def get_latest_available_network_inference(
        self, message: "QueryLatestAvailableNetworkInferencesRequest"
    ) -> "QueryLatestAvailableNetworkInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetLatestAvailableNetworkInference",
            QueryLatestAvailableNetworkInferencesRequest.SerializeToString,
            QueryLatestAvailableNetworkInferencesResponse.FromString,
        )(message)

    def is_worker_nonce_unfulfilled(
        self, message: "QueryIsWorkerNonceUnfulfilledRequest"
    ) -> "QueryIsWorkerNonceUnfulfilledResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/IsWorkerNonceUnfulfilled",
            QueryIsWorkerNonceUnfulfilledRequest.SerializeToString,
            QueryIsWorkerNonceUnfulfilledResponse.FromString,
        )(message)

    def is_reputer_nonce_unfulfilled(
        self, message: "QueryIsReputerNonceUnfulfilledRequest"
    ) -> "QueryIsReputerNonceUnfulfilledResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/IsReputerNonceUnfulfilled",
            QueryIsReputerNonceUnfulfilledRequest.SerializeToString,
            QueryIsReputerNonceUnfulfilledResponse.FromString,
        )(message)

    def get_unfulfilled_worker_nonces(
        self, message: "QueryUnfulfilledWorkerNoncesRequest"
    ) -> "QueryUnfulfilledWorkerNoncesResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetUnfulfilledWorkerNonces",
            QueryUnfulfilledWorkerNoncesRequest.SerializeToString,
            QueryUnfulfilledWorkerNoncesResponse.FromString,
        )(message)

    def get_unfulfilled_reputer_nonces(
        self, message: "QueryUnfulfilledReputerNoncesRequest"
    ) -> "QueryUnfulfilledReputerNoncesResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetUnfulfilledReputerNonces",
            QueryUnfulfilledReputerNoncesRequest.SerializeToString,
            QueryUnfulfilledReputerNoncesResponse.FromString,
        )(message)

    def get_inferer_network_regret(
        self, message: "QueryInfererNetworkRegretRequest"
    ) -> "QueryInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetInfererNetworkRegret",
            QueryInfererNetworkRegretRequest.SerializeToString,
            QueryInfererNetworkRegretResponse.FromString,
        )(message)

    def get_forecaster_network_regret(
        self, message: "QueryForecasterNetworkRegretRequest"
    ) -> "QueryForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetForecasterNetworkRegret",
            QueryForecasterNetworkRegretRequest.SerializeToString,
            QueryForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_one_in_forecaster_network_regret(
        self, message: "QueryOneInForecasterNetworkRegretRequest"
    ) -> "QueryOneInForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetOneInForecasterNetworkRegret",
            QueryOneInForecasterNetworkRegretRequest.SerializeToString,
            QueryOneInForecasterNetworkRegretResponse.FromString,
        )(message)

    def is_whitelist_admin(
        self, message: "QueryIsWhitelistAdminRequest"
    ) -> "QueryIsWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/IsWhitelistAdmin",
            QueryIsWhitelistAdminRequest.SerializeToString,
            QueryIsWhitelistAdminResponse.FromString,
        )(message)

    def get_topic_last_worker_commit_info(
        self, message: "QueryTopicLastWorkerCommitInfoRequest"
    ) -> "QueryTopicLastWorkerCommitInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTopicLastWorkerCommitInfo",
            QueryTopicLastWorkerCommitInfoRequest.SerializeToString,
            QueryTopicLastWorkerCommitInfoResponse.FromString,
        )(message)

    def get_topic_last_reputer_commit_info(
        self, message: "QueryTopicLastReputerCommitInfoRequest"
    ) -> "QueryTopicLastReputerCommitInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTopicLastReputerCommitInfo",
            QueryTopicLastReputerCommitInfoRequest.SerializeToString,
            QueryTopicLastReputerCommitInfoResponse.FromString,
        )(message)

    def get_topic_reward_nonce(
        self, message: "QueryTopicRewardNonceRequest"
    ) -> "QueryTopicRewardNonceResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTopicRewardNonce",
            QueryTopicRewardNonceRequest.SerializeToString,
            QueryTopicRewardNonceResponse.FromString,
        )(message)

    def get_reputer_loss_bundles_at_block(
        self, message: "QueryReputerLossBundlesAtBlockRequest"
    ) -> "QueryReputerLossBundlesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetReputerLossBundlesAtBlock",
            QueryReputerLossBundlesAtBlockRequest.SerializeToString,
            QueryReputerLossBundlesAtBlockResponse.FromString,
        )(message)

    def get_stake_reputer_authority(
        self, message: "QueryStakeReputerAuthorityRequest"
    ) -> "QueryStakeReputerAuthorityResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetStakeReputerAuthority",
            QueryStakeReputerAuthorityRequest.SerializeToString,
            QueryStakeReputerAuthorityResponse.FromString,
        )(message)

    def get_delegate_stake_placement(
        self, message: "QueryDelegateStakePlacementRequest"
    ) -> "QueryDelegateStakePlacementResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetDelegateStakePlacement",
            QueryDelegateStakePlacementRequest.SerializeToString,
            QueryDelegateStakePlacementResponse.FromString,
        )(message)

    def get_delegate_stake_upon_reputer(
        self, message: "QueryDelegateStakeUponReputerRequest"
    ) -> "QueryDelegateStakeUponReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetDelegateStakeUponReputer",
            QueryDelegateStakeUponReputerRequest.SerializeToString,
            QueryDelegateStakeUponReputerResponse.FromString,
        )(message)

    def get_delegate_reward_per_share(
        self, message: "QueryDelegateRewardPerShareRequest"
    ) -> "QueryDelegateRewardPerShareResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetDelegateRewardPerShare",
            QueryDelegateRewardPerShareRequest.SerializeToString,
            QueryDelegateRewardPerShareResponse.FromString,
        )(message)

    def get_stake_removal_for_reputer_and_topic_id(
        self, message: "QueryStakeRemovalForReputerAndTopicIdRequest"
    ) -> "QueryStakeRemovalForReputerAndTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetStakeRemovalForReputerAndTopicId",
            QueryStakeRemovalForReputerAndTopicIdRequest.SerializeToString,
            QueryStakeRemovalForReputerAndTopicIdResponse.FromString,
        )(message)

    def get_delegate_stake_removal(
        self, message: "QueryDelegateStakeRemovalRequest"
    ) -> "QueryDelegateStakeRemovalResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetDelegateStakeRemoval",
            QueryDelegateStakeRemovalRequest.SerializeToString,
            QueryDelegateStakeRemovalResponse.FromString,
        )(message)

    def get_previous_topic_weight(
        self, message: "QueryPreviousTopicWeightRequest"
    ) -> "QueryPreviousTopicWeightResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousTopicWeight",
            QueryPreviousTopicWeightRequest.SerializeToString,
            QueryPreviousTopicWeightResponse.FromString,
        )(message)

    def topic_exists(
        self, message: "QueryTopicExistsRequest"
    ) -> "QueryTopicExistsResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/TopicExists",
            QueryTopicExistsRequest.SerializeToString,
            QueryTopicExistsResponse.FromString,
        )(message)

    def is_topic_active(
        self, message: "QueryIsTopicActiveRequest"
    ) -> "QueryIsTopicActiveResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/IsTopicActive",
            QueryIsTopicActiveRequest.SerializeToString,
            QueryIsTopicActiveResponse.FromString,
        )(message)

    def get_topic_fee_revenue(
        self, message: "QueryTopicFeeRevenueRequest"
    ) -> "QueryTopicFeeRevenueResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTopicFeeRevenue",
            QueryTopicFeeRevenueRequest.SerializeToString,
            QueryTopicFeeRevenueResponse.FromString,
        )(message)

    def get_rewardable_topics(
        self, message: "QueryRewardableTopicsRequest | None" = None
    ) -> "QueryRewardableTopicsResponse":
        if message is None:
            message = QueryRewardableTopicsRequest()

        return self._channel.unary_unary(
            "/emissions.v3.Query/GetRewardableTopics",
            QueryRewardableTopicsRequest.SerializeToString,
            QueryRewardableTopicsResponse.FromString,
        )(message)

    def get_inferer_score_ema(
        self, message: "QueryGetInfererScoreEmaRequest"
    ) -> "QueryGetInfererScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetInfererScoreEma",
            QueryGetInfererScoreEmaRequest.SerializeToString,
            QueryGetInfererScoreEmaResponse.FromString,
        )(message)

    def get_forecaster_score_ema(
        self, message: "QueryGetForecasterScoreEmaRequest"
    ) -> "QueryGetForecasterScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetForecasterScoreEma",
            QueryGetForecasterScoreEmaRequest.SerializeToString,
            QueryGetForecasterScoreEmaResponse.FromString,
        )(message)

    def get_reputer_score_ema(
        self, message: "QueryGetReputerScoreEmaRequest"
    ) -> "QueryGetReputerScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetReputerScoreEma",
            QueryGetReputerScoreEmaRequest.SerializeToString,
            QueryGetReputerScoreEmaResponse.FromString,
        )(message)

    def get_inference_scores_until_block(
        self, message: "QueryInferenceScoresUntilBlockRequest"
    ) -> "QueryInferenceScoresUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetInferenceScoresUntilBlock",
            QueryInferenceScoresUntilBlockRequest.SerializeToString,
            QueryInferenceScoresUntilBlockResponse.FromString,
        )(message)

    def get_previous_topic_quantile_forecaster_score_ema(
        self, message: "QueryGetPreviousTopicQuantileForecasterScoreEmaRequest"
    ) -> "QueryGetPreviousTopicQuantileForecasterScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousTopicQuantileForecasterScoreEma",
            QueryGetPreviousTopicQuantileForecasterScoreEmaRequest.SerializeToString,
            QueryGetPreviousTopicQuantileForecasterScoreEmaResponse.FromString,
        )(message)

    def get_previous_topic_quantile_inferer_score_ema(
        self, message: "QueryGetPreviousTopicQuantileInfererScoreEmaRequest"
    ) -> "QueryGetPreviousTopicQuantileInfererScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousTopicQuantileInfererScoreEma",
            QueryGetPreviousTopicQuantileInfererScoreEmaRequest.SerializeToString,
            QueryGetPreviousTopicQuantileInfererScoreEmaResponse.FromString,
        )(message)

    def get_previous_topic_quantile_reputer_score_ema(
        self, message: "QueryGetPreviousTopicQuantileReputerScoreEmaRequest"
    ) -> "QueryGetPreviousTopicQuantileReputerScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousTopicQuantileReputerScoreEma",
            QueryGetPreviousTopicQuantileReputerScoreEmaRequest.SerializeToString,
            QueryGetPreviousTopicQuantileReputerScoreEmaResponse.FromString,
        )(message)

    def get_worker_inference_scores_at_block(
        self, message: "QueryWorkerInferenceScoresAtBlockRequest"
    ) -> "QueryWorkerInferenceScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetWorkerInferenceScoresAtBlock",
            QueryWorkerInferenceScoresAtBlockRequest.SerializeToString,
            QueryWorkerInferenceScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_inferer_score(
        self, message: "QueryCurrentLowestInfererScoreRequest"
    ) -> "QueryCurrentLowestInfererScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetCurrentLowestInfererScore",
            QueryCurrentLowestInfererScoreRequest.SerializeToString,
            QueryCurrentLowestInfererScoreResponse.FromString,
        )(message)

    def get_forecast_scores_until_block(
        self, message: "QueryForecastScoresUntilBlockRequest"
    ) -> "QueryForecastScoresUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetForecastScoresUntilBlock",
            QueryForecastScoresUntilBlockRequest.SerializeToString,
            QueryForecastScoresUntilBlockResponse.FromString,
        )(message)

    def get_worker_forecast_scores_at_block(
        self, message: "QueryWorkerForecastScoresAtBlockRequest"
    ) -> "QueryWorkerForecastScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetWorkerForecastScoresAtBlock",
            QueryWorkerForecastScoresAtBlockRequest.SerializeToString,
            QueryWorkerForecastScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_forecaster_score(
        self, message: "QueryCurrentLowestForecasterScoreRequest"
    ) -> "QueryCurrentLowestForecasterScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetCurrentLowestForecasterScore",
            QueryCurrentLowestForecasterScoreRequest.SerializeToString,
            QueryCurrentLowestForecasterScoreResponse.FromString,
        )(message)

    def get_reputers_scores_at_block(
        self, message: "QueryReputersScoresAtBlockRequest"
    ) -> "QueryReputersScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetReputersScoresAtBlock",
            QueryReputersScoresAtBlockRequest.SerializeToString,
            QueryReputersScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_reputer_score(
        self, message: "QueryCurrentLowestReputerScoreRequest"
    ) -> "QueryCurrentLowestReputerScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetCurrentLowestReputerScore",
            QueryCurrentLowestReputerScoreRequest.SerializeToString,
            QueryCurrentLowestReputerScoreResponse.FromString,
        )(message)

    def get_listening_coefficient(
        self, message: "QueryListeningCoefficientRequest"
    ) -> "QueryListeningCoefficientResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetListeningCoefficient",
            QueryListeningCoefficientRequest.SerializeToString,
            QueryListeningCoefficientResponse.FromString,
        )(message)

    def get_previous_reputer_reward_fraction(
        self, message: "QueryPreviousReputerRewardFractionRequest"
    ) -> "QueryPreviousReputerRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousReputerRewardFraction",
            QueryPreviousReputerRewardFractionRequest.SerializeToString,
            QueryPreviousReputerRewardFractionResponse.FromString,
        )(message)

    def get_previous_inference_reward_fraction(
        self, message: "QueryPreviousInferenceRewardFractionRequest"
    ) -> "QueryPreviousInferenceRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousInferenceRewardFraction",
            QueryPreviousInferenceRewardFractionRequest.SerializeToString,
            QueryPreviousInferenceRewardFractionResponse.FromString,
        )(message)

    def get_previous_forecast_reward_fraction(
        self, message: "QueryPreviousForecastRewardFractionRequest"
    ) -> "QueryPreviousForecastRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousForecastRewardFraction",
            QueryPreviousForecastRewardFractionRequest.SerializeToString,
            QueryPreviousForecastRewardFractionResponse.FromString,
        )(message)

    def get_previous_percentage_reward_to_staked_reputers(
        self,
        message: "QueryPreviousPercentageRewardToStakedReputersRequest | None" = None,
    ) -> "QueryPreviousPercentageRewardToStakedReputersResponse":
        if message is None:
            message = QueryPreviousPercentageRewardToStakedReputersRequest()

        return self._channel.unary_unary(
            "/emissions.v3.Query/GetPreviousPercentageRewardToStakedReputers",
            QueryPreviousPercentageRewardToStakedReputersRequest.SerializeToString,
            QueryPreviousPercentageRewardToStakedReputersResponse.FromString,
        )(message)

    def get_total_reward_to_distribute(
        self, message: "QueryTotalRewardToDistributeRequest | None" = None
    ) -> "QueryTotalRewardToDistributeResponse":
        if message is None:
            message = QueryTotalRewardToDistributeRequest()

        return self._channel.unary_unary(
            "/emissions.v3.Query/GetTotalRewardToDistribute",
            QueryTotalRewardToDistributeRequest.SerializeToString,
            QueryTotalRewardToDistributeResponse.FromString,
        )(message)

    def get_naive_inferer_network_regret(
        self, message: "QueryNaiveInfererNetworkRegretRequest"
    ) -> "QueryNaiveInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetNaiveInfererNetworkRegret",
            QueryNaiveInfererNetworkRegretRequest.SerializeToString,
            QueryNaiveInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_inferer_inferer_network_regret(
        self, message: "QueryOneOutInfererInfererNetworkRegretRequest"
    ) -> "QueryOneOutInfererInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetOneOutInfererInfererNetworkRegret",
            QueryOneOutInfererInfererNetworkRegretRequest.SerializeToString,
            QueryOneOutInfererInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_inferer_forecaster_network_regret(
        self, message: "QueryOneOutInfererForecasterNetworkRegretRequest"
    ) -> "QueryOneOutInfererForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetOneOutInfererForecasterNetworkRegret",
            QueryOneOutInfererForecasterNetworkRegretRequest.SerializeToString,
            QueryOneOutInfererForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_forecaster_inferer_network_regret(
        self, message: "QueryOneOutForecasterInfererNetworkRegretRequest"
    ) -> "QueryOneOutForecasterInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetOneOutForecasterInfererNetworkRegret",
            QueryOneOutForecasterInfererNetworkRegretRequest.SerializeToString,
            QueryOneOutForecasterInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_forecaster_forecaster_network_regret(
        self, message: "QueryOneOutForecasterForecasterNetworkRegretRequest"
    ) -> "QueryOneOutForecasterForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetOneOutForecasterForecasterNetworkRegret",
            QueryOneOutForecasterForecasterNetworkRegretRequest.SerializeToString,
            QueryOneOutForecasterForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_active_topics_at_block(
        self, message: "QueryActiveTopicsAtBlockRequest"
    ) -> "QueryActiveTopicsAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetActiveTopicsAtBlock",
            QueryActiveTopicsAtBlockRequest.SerializeToString,
            QueryActiveTopicsAtBlockResponse.FromString,
        )(message)

    def get_next_churning_block_by_topic_id(
        self, message: "QueryNextChurningBlockByTopicIdRequest"
    ) -> "QueryNextChurningBlockByTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v3.Query/GetNextChurningBlockByTopicId",
            QueryNextChurningBlockByTopicIdRequest.SerializeToString,
            QueryNextChurningBlockByTopicIdResponse.FromString,
        )(message)


class QueryAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the module Msg service.
    """

    async def params(
        self,
        message: "QueryParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryParamsResponse":
        """
        Params returns the module parameters.
        """

        if message is None:
            message = QueryParamsRequest()

        return await self._unary_unary(
            "/emissions.v3.Query/Params",
            message,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_topic_id(
        self,
        message: "QueryNextTopicIdRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryNextTopicIdResponse":
        if message is None:
            message = QueryNextTopicIdRequest()

        return await self._unary_unary(
            "/emissions.v3.Query/GetNextTopicId",
            message,
            QueryNextTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic(
        self,
        message: "QueryTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTopicResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetTopic",
            message,
            QueryTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_latest_inference_by_topic_id(
        self,
        message: "QueryWorkerLatestInferenceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryWorkerLatestInferenceResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetWorkerLatestInferenceByTopicId",
            message,
            QueryWorkerLatestInferenceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferences_at_block(
        self,
        message: "QueryInferencesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetInferencesAtBlock",
            message,
            QueryInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_topic_inferences(
        self,
        message: "QueryLatestTopicInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryLatestTopicInferencesResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetLatestTopicInferences",
            message,
            QueryLatestTopicInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecasts_at_block(
        self,
        message: "QueryForecastsAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryForecastsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetForecastsAtBlock",
            message,
            QueryForecastsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_loss_bundle_at_block(
        self,
        message: "QueryNetworkLossBundleAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryNetworkLossBundleAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetNetworkLossBundleAtBlock",
            message,
            QueryNetworkLossBundleAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_stake(
        self,
        message: "QueryTotalStakeRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTotalStakeResponse":
        if message is None:
            message = QueryTotalStakeRequest()

        return await self._unary_unary(
            "/emissions.v3.Query/GetTotalStake",
            message,
            QueryTotalStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_stake_in_topic(
        self,
        message: "QueryReputerStakeInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetReputerStakeInTopic",
            message,
            QueryReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_multi_reputer_stake_in_topic(
        self,
        message: "QueryMultiReputerStakeInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryMultiReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetMultiReputerStakeInTopic",
            message,
            QueryMultiReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_reputer_in_topic_in_self(
        self,
        message: "QueryStakeFromReputerInTopicInSelfRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryStakeFromReputerInTopicInSelfResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetStakeFromReputerInTopicInSelf",
            message,
            QueryStakeFromReputerInTopicInSelfResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_in_topic_in_reputer(
        self,
        message: "QueryDelegateStakeInTopicInReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegateStakeInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetDelegateStakeInTopicInReputer",
            message,
            QueryDelegateStakeInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic_in_reputer(
        self,
        message: "QueryStakeFromDelegatorInTopicInReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryStakeFromDelegatorInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetStakeFromDelegatorInTopicInReputer",
            message,
            QueryStakeFromDelegatorInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic(
        self,
        message: "QueryStakeFromDelegatorInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryStakeFromDelegatorInTopicResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetStakeFromDelegatorInTopic",
            message,
            QueryStakeFromDelegatorInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_stake(
        self,
        message: "QueryTopicStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTopicStakeResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetTopicStake",
            message,
            QueryTopicStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removals_up_until_block(
        self,
        message: "QueryStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetStakeRemovalsUpUntilBlock",
            message,
            QueryStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removals_up_until_block(
        self,
        message: "QueryDelegateStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegateStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetDelegateStakeRemovalsUpUntilBlock",
            message,
            QueryDelegateStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_info(
        self,
        message: "QueryStakeRemovalInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetStakeRemovalInfo",
            message,
            QueryStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal_info(
        self,
        message: "QueryDelegateStakeRemovalInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegateStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetDelegateStakeRemovalInfo",
            message,
            QueryDelegateStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_node_info(
        self,
        message: "QueryWorkerNodeInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryWorkerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetWorkerNodeInfo",
            message,
            QueryWorkerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_node_info(
        self,
        message: "QueryReputerNodeInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryReputerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetReputerNodeInfo",
            message,
            QueryReputerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_registered_in_topic_id(
        self,
        message: "QueryIsWorkerRegisteredInTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryIsWorkerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/IsWorkerRegisteredInTopicId",
            message,
            QueryIsWorkerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_registered_in_topic_id(
        self,
        message: "QueryIsReputerRegisteredInTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryIsReputerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/IsReputerRegisteredInTopicId",
            message,
            QueryIsReputerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_inferences_at_block(
        self,
        message: "QueryNetworkInferencesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryNetworkInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetNetworkInferencesAtBlock",
            message,
            QueryNetworkInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_network_inference(
        self,
        message: "QueryLatestNetworkInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryLatestNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetLatestNetworkInference",
            message,
            QueryLatestNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_available_network_inference(
        self,
        message: "QueryLatestAvailableNetworkInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryLatestAvailableNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetLatestAvailableNetworkInference",
            message,
            QueryLatestAvailableNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_nonce_unfulfilled(
        self,
        message: "QueryIsWorkerNonceUnfulfilledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryIsWorkerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/IsWorkerNonceUnfulfilled",
            message,
            QueryIsWorkerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_nonce_unfulfilled(
        self,
        message: "QueryIsReputerNonceUnfulfilledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryIsReputerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/IsReputerNonceUnfulfilled",
            message,
            QueryIsReputerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_worker_nonces(
        self,
        message: "QueryUnfulfilledWorkerNoncesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryUnfulfilledWorkerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetUnfulfilledWorkerNonces",
            message,
            QueryUnfulfilledWorkerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_reputer_nonces(
        self,
        message: "QueryUnfulfilledReputerNoncesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryUnfulfilledReputerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetUnfulfilledReputerNonces",
            message,
            QueryUnfulfilledReputerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_network_regret(
        self,
        message: "QueryInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetInfererNetworkRegret",
            message,
            QueryInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_network_regret(
        self,
        message: "QueryForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetForecasterNetworkRegret",
            message,
            QueryForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_in_forecaster_network_regret(
        self,
        message: "QueryOneInForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryOneInForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetOneInForecasterNetworkRegret",
            message,
            QueryOneInForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelist_admin(
        self,
        message: "QueryIsWhitelistAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryIsWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/IsWhitelistAdmin",
            message,
            QueryIsWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_worker_commit_info(
        self,
        message: "QueryTopicLastWorkerCommitInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTopicLastWorkerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetTopicLastWorkerCommitInfo",
            message,
            QueryTopicLastWorkerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_reputer_commit_info(
        self,
        message: "QueryTopicLastReputerCommitInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTopicLastReputerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetTopicLastReputerCommitInfo",
            message,
            QueryTopicLastReputerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_reward_nonce(
        self,
        message: "QueryTopicRewardNonceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTopicRewardNonceResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetTopicRewardNonce",
            message,
            QueryTopicRewardNonceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_loss_bundles_at_block(
        self,
        message: "QueryReputerLossBundlesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryReputerLossBundlesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetReputerLossBundlesAtBlock",
            message,
            QueryReputerLossBundlesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_reputer_authority(
        self,
        message: "QueryStakeReputerAuthorityRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryStakeReputerAuthorityResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetStakeReputerAuthority",
            message,
            QueryStakeReputerAuthorityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_placement(
        self,
        message: "QueryDelegateStakePlacementRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegateStakePlacementResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetDelegateStakePlacement",
            message,
            QueryDelegateStakePlacementResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_upon_reputer(
        self,
        message: "QueryDelegateStakeUponReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegateStakeUponReputerResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetDelegateStakeUponReputer",
            message,
            QueryDelegateStakeUponReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_reward_per_share(
        self,
        message: "QueryDelegateRewardPerShareRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegateRewardPerShareResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetDelegateRewardPerShare",
            message,
            QueryDelegateRewardPerShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_for_reputer_and_topic_id(
        self,
        message: "QueryStakeRemovalForReputerAndTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryStakeRemovalForReputerAndTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetStakeRemovalForReputerAndTopicId",
            message,
            QueryStakeRemovalForReputerAndTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal(
        self,
        message: "QueryDelegateStakeRemovalRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryDelegateStakeRemovalResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetDelegateStakeRemoval",
            message,
            QueryDelegateStakeRemovalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_weight(
        self,
        message: "QueryPreviousTopicWeightRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryPreviousTopicWeightResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousTopicWeight",
            message,
            QueryPreviousTopicWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def topic_exists(
        self,
        message: "QueryTopicExistsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTopicExistsResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/TopicExists",
            message,
            QueryTopicExistsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_active(
        self,
        message: "QueryIsTopicActiveRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryIsTopicActiveResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/IsTopicActive",
            message,
            QueryIsTopicActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_fee_revenue(
        self,
        message: "QueryTopicFeeRevenueRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTopicFeeRevenueResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetTopicFeeRevenue",
            message,
            QueryTopicFeeRevenueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_rewardable_topics(
        self,
        message: "QueryRewardableTopicsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryRewardableTopicsResponse":
        if message is None:
            message = QueryRewardableTopicsRequest()

        return await self._unary_unary(
            "/emissions.v3.Query/GetRewardableTopics",
            message,
            QueryRewardableTopicsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_score_ema(
        self,
        message: "QueryGetInfererScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGetInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetInfererScoreEma",
            message,
            QueryGetInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_score_ema(
        self,
        message: "QueryGetForecasterScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGetForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetForecasterScoreEma",
            message,
            QueryGetForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_score_ema(
        self,
        message: "QueryGetReputerScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGetReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetReputerScoreEma",
            message,
            QueryGetReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inference_scores_until_block(
        self,
        message: "QueryInferenceScoresUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryInferenceScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetInferenceScoresUntilBlock",
            message,
            QueryInferenceScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_forecaster_score_ema(
        self,
        message: "QueryGetPreviousTopicQuantileForecasterScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGetPreviousTopicQuantileForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousTopicQuantileForecasterScoreEma",
            message,
            QueryGetPreviousTopicQuantileForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_inferer_score_ema(
        self,
        message: "QueryGetPreviousTopicQuantileInfererScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGetPreviousTopicQuantileInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousTopicQuantileInfererScoreEma",
            message,
            QueryGetPreviousTopicQuantileInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_reputer_score_ema(
        self,
        message: "QueryGetPreviousTopicQuantileReputerScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryGetPreviousTopicQuantileReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousTopicQuantileReputerScoreEma",
            message,
            QueryGetPreviousTopicQuantileReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_inference_scores_at_block(
        self,
        message: "QueryWorkerInferenceScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryWorkerInferenceScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetWorkerInferenceScoresAtBlock",
            message,
            QueryWorkerInferenceScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_inferer_score(
        self,
        message: "QueryCurrentLowestInfererScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryCurrentLowestInfererScoreResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetCurrentLowestInfererScore",
            message,
            QueryCurrentLowestInfererScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecast_scores_until_block(
        self,
        message: "QueryForecastScoresUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryForecastScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetForecastScoresUntilBlock",
            message,
            QueryForecastScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_forecast_scores_at_block(
        self,
        message: "QueryWorkerForecastScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryWorkerForecastScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetWorkerForecastScoresAtBlock",
            message,
            QueryWorkerForecastScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_forecaster_score(
        self,
        message: "QueryCurrentLowestForecasterScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryCurrentLowestForecasterScoreResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetCurrentLowestForecasterScore",
            message,
            QueryCurrentLowestForecasterScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputers_scores_at_block(
        self,
        message: "QueryReputersScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryReputersScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetReputersScoresAtBlock",
            message,
            QueryReputersScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_reputer_score(
        self,
        message: "QueryCurrentLowestReputerScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryCurrentLowestReputerScoreResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetCurrentLowestReputerScore",
            message,
            QueryCurrentLowestReputerScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_listening_coefficient(
        self,
        message: "QueryListeningCoefficientRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryListeningCoefficientResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetListeningCoefficient",
            message,
            QueryListeningCoefficientResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_reputer_reward_fraction(
        self,
        message: "QueryPreviousReputerRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryPreviousReputerRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousReputerRewardFraction",
            message,
            QueryPreviousReputerRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_inference_reward_fraction(
        self,
        message: "QueryPreviousInferenceRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryPreviousInferenceRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousInferenceRewardFraction",
            message,
            QueryPreviousInferenceRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_forecast_reward_fraction(
        self,
        message: "QueryPreviousForecastRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryPreviousForecastRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousForecastRewardFraction",
            message,
            QueryPreviousForecastRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_percentage_reward_to_staked_reputers(
        self,
        message: "QueryPreviousPercentageRewardToStakedReputersRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryPreviousPercentageRewardToStakedReputersResponse":
        if message is None:
            message = QueryPreviousPercentageRewardToStakedReputersRequest()

        return await self._unary_unary(
            "/emissions.v3.Query/GetPreviousPercentageRewardToStakedReputers",
            message,
            QueryPreviousPercentageRewardToStakedReputersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_reward_to_distribute(
        self,
        message: "QueryTotalRewardToDistributeRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryTotalRewardToDistributeResponse":
        if message is None:
            message = QueryTotalRewardToDistributeRequest()

        return await self._unary_unary(
            "/emissions.v3.Query/GetTotalRewardToDistribute",
            message,
            QueryTotalRewardToDistributeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_naive_inferer_network_regret(
        self,
        message: "QueryNaiveInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryNaiveInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetNaiveInfererNetworkRegret",
            message,
            QueryNaiveInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_inferer_network_regret(
        self,
        message: "QueryOneOutInfererInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryOneOutInfererInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetOneOutInfererInfererNetworkRegret",
            message,
            QueryOneOutInfererInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_forecaster_network_regret(
        self,
        message: "QueryOneOutInfererForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryOneOutInfererForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetOneOutInfererForecasterNetworkRegret",
            message,
            QueryOneOutInfererForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_inferer_network_regret(
        self,
        message: "QueryOneOutForecasterInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryOneOutForecasterInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetOneOutForecasterInfererNetworkRegret",
            message,
            QueryOneOutForecasterInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_forecaster_network_regret(
        self,
        message: "QueryOneOutForecasterForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryOneOutForecasterForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetOneOutForecasterForecasterNetworkRegret",
            message,
            QueryOneOutForecasterForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_topics_at_block(
        self,
        message: "QueryActiveTopicsAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryActiveTopicsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetActiveTopicsAtBlock",
            message,
            QueryActiveTopicsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_churning_block_by_topic_id(
        self,
        message: "QueryNextChurningBlockByTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryNextChurningBlockByTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v3.Query/GetNextChurningBlockByTopicId",
            message,
            QueryNextChurningBlockByTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
