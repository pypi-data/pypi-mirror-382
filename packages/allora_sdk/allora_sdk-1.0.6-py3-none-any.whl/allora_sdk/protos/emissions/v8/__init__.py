# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: emissions/v8/events.proto, emissions/v8/genesis.proto, emissions/v8/params.proto, emissions/v8/query.proto, emissions/v8/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ActorIdTopicIdBlockHeight",
    "ActorType",
    "AddStakeRequest",
    "AddStakeResponse",
    "AddToGlobalAdminWhitelistRequest",
    "AddToGlobalAdminWhitelistResponse",
    "AddToGlobalReputerWhitelistRequest",
    "AddToGlobalReputerWhitelistResponse",
    "AddToGlobalWhitelistRequest",
    "AddToGlobalWhitelistResponse",
    "AddToGlobalWorkerWhitelistRequest",
    "AddToGlobalWorkerWhitelistResponse",
    "AddToTopicCreatorWhitelistRequest",
    "AddToTopicCreatorWhitelistResponse",
    "AddToTopicReputerWhitelistRequest",
    "AddToTopicReputerWhitelistResponse",
    "AddToTopicWorkerWhitelistRequest",
    "AddToTopicWorkerWhitelistResponse",
    "AddToWhitelistAdminRequest",
    "AddToWhitelistAdminResponse",
    "BlockHeightAndTopicIds",
    "BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo",
    "BlockHeightTopicIdReputerStakeRemovalInfo",
    "BlockHeightTopicIdWeightPair",
    "BlockHeightTopicIds",
    "BulkAddToGlobalReputerWhitelistRequest",
    "BulkAddToGlobalReputerWhitelistResponse",
    "BulkAddToGlobalWorkerWhitelistRequest",
    "BulkAddToGlobalWorkerWhitelistResponse",
    "BulkAddToTopicReputerWhitelistRequest",
    "BulkAddToTopicReputerWhitelistResponse",
    "BulkAddToTopicWorkerWhitelistRequest",
    "BulkAddToTopicWorkerWhitelistResponse",
    "BulkRemoveFromGlobalReputerWhitelistRequest",
    "BulkRemoveFromGlobalReputerWhitelistResponse",
    "BulkRemoveFromGlobalWorkerWhitelistRequest",
    "BulkRemoveFromGlobalWorkerWhitelistResponse",
    "BulkRemoveFromTopicReputerWhitelistRequest",
    "BulkRemoveFromTopicReputerWhitelistResponse",
    "BulkRemoveFromTopicWorkerWhitelistRequest",
    "BulkRemoveFromTopicWorkerWhitelistResponse",
    "CanCreateTopicRequest",
    "CanCreateTopicResponse",
    "CanSubmitReputerPayloadRequest",
    "CanSubmitReputerPayloadResponse",
    "CanSubmitWorkerPayloadRequest",
    "CanSubmitWorkerPayloadResponse",
    "CanUpdateAllGlobalWhitelistsRequest",
    "CanUpdateAllGlobalWhitelistsResponse",
    "CanUpdateGlobalReputerWhitelistRequest",
    "CanUpdateGlobalReputerWhitelistResponse",
    "CanUpdateGlobalWorkerWhitelistRequest",
    "CanUpdateGlobalWorkerWhitelistResponse",
    "CanUpdateParamsRequest",
    "CanUpdateParamsResponse",
    "CanUpdateTopicWhitelistRequest",
    "CanUpdateTopicWhitelistResponse",
    "CancelRemoveDelegateStakeRequest",
    "CancelRemoveDelegateStakeResponse",
    "CancelRemoveStakeRequest",
    "CancelRemoveStakeResponse",
    "CreateNewTopicRequest",
    "CreateNewTopicResponse",
    "DelegateStakeRequest",
    "DelegateStakeResponse",
    "DelegatorReputerTopicIdBlockHeight",
    "DisableTopicReputerWhitelistRequest",
    "DisableTopicReputerWhitelistResponse",
    "DisableTopicWorkerWhitelistRequest",
    "DisableTopicWorkerWhitelistResponse",
    "EnableTopicReputerWhitelistRequest",
    "EnableTopicReputerWhitelistResponse",
    "EnableTopicWorkerWhitelistRequest",
    "EnableTopicWorkerWhitelistResponse",
    "EventEmaScoresSet",
    "EventForecastTaskScoreSet",
    "EventForecasterNetworkRegretSet",
    "EventForecasterWeightSet",
    "EventInfererNetworkRegretSet",
    "EventInfererWeightSet",
    "EventListeningCoefficientsSet",
    "EventNaiveInfererNetworkRegretSet",
    "EventNetworkLossSet",
    "EventPreviousPercentageRewardToStakedReputersSet",
    "EventRegretStdNormSet",
    "EventReputerLastCommitSet",
    "EventRewardsSettled",
    "EventScoresSet",
    "EventTopicInitialEmaScoreSet",
    "EventTopicInitialRegretSet",
    "EventTopicRewardsSet",
    "EventWorkerLastCommitSet",
    "FundTopicRequest",
    "FundTopicResponse",
    "GenesisState",
    "GetActiveForecastersForTopicRequest",
    "GetActiveForecastersForTopicResponse",
    "GetActiveInferersForTopicRequest",
    "GetActiveInferersForTopicResponse",
    "GetActiveReputersForTopicRequest",
    "GetActiveReputersForTopicResponse",
    "GetActiveTopicsAtBlockRequest",
    "GetActiveTopicsAtBlockResponse",
    "GetActiveTopicsRequest",
    "GetActiveTopicsResponse",
    "GetCountForecasterInclusionsInTopicRequest",
    "GetCountForecasterInclusionsInTopicResponse",
    "GetCountInfererInclusionsInTopicRequest",
    "GetCountInfererInclusionsInTopicResponse",
    "GetCurrentLowestForecasterScoreRequest",
    "GetCurrentLowestForecasterScoreResponse",
    "GetCurrentLowestInfererScoreRequest",
    "GetCurrentLowestInfererScoreResponse",
    "GetCurrentLowestReputerScoreRequest",
    "GetCurrentLowestReputerScoreResponse",
    "GetDelegateRewardPerShareRequest",
    "GetDelegateRewardPerShareResponse",
    "GetDelegateStakeInTopicInReputerRequest",
    "GetDelegateStakeInTopicInReputerResponse",
    "GetDelegateStakePlacementRequest",
    "GetDelegateStakePlacementResponse",
    "GetDelegateStakeRemovalInfoRequest",
    "GetDelegateStakeRemovalInfoResponse",
    "GetDelegateStakeRemovalRequest",
    "GetDelegateStakeRemovalResponse",
    "GetDelegateStakeRemovalsUpUntilBlockRequest",
    "GetDelegateStakeRemovalsUpUntilBlockResponse",
    "GetDelegateStakeUponReputerRequest",
    "GetDelegateStakeUponReputerResponse",
    "GetForecastScoresUntilBlockRequest",
    "GetForecastScoresUntilBlockResponse",
    "GetForecasterNetworkRegretRequest",
    "GetForecasterNetworkRegretResponse",
    "GetForecasterScoreEmaRequest",
    "GetForecasterScoreEmaResponse",
    "GetForecastsAtBlockRequest",
    "GetForecastsAtBlockResponse",
    "GetInferenceScoresUntilBlockRequest",
    "GetInferenceScoresUntilBlockResponse",
    "GetInferencesAtBlockRequest",
    "GetInferencesAtBlockResponse",
    "GetInfererNetworkRegretRequest",
    "GetInfererNetworkRegretResponse",
    "GetInfererScoreEmaRequest",
    "GetInfererScoreEmaResponse",
    "GetLatestAvailableNetworkInferencesOutlierResistantRequest",
    "GetLatestAvailableNetworkInferencesOutlierResistantResponse",
    "GetLatestAvailableNetworkInferencesRequest",
    "GetLatestAvailableNetworkInferencesResponse",
    "GetLatestForecasterWeightRequest",
    "GetLatestForecasterWeightResponse",
    "GetLatestInfererWeightRequest",
    "GetLatestInfererWeightResponse",
    "GetLatestNetworkInferencesOutlierResistantRequest",
    "GetLatestNetworkInferencesOutlierResistantResponse",
    "GetLatestNetworkInferencesRequest",
    "GetLatestNetworkInferencesResponse",
    "GetLatestRegretStdNormRequest",
    "GetLatestRegretStdNormResponse",
    "GetLatestTopicInferencesRequest",
    "GetLatestTopicInferencesResponse",
    "GetListeningCoefficientRequest",
    "GetListeningCoefficientResponse",
    "GetMultiReputerStakeInTopicRequest",
    "GetMultiReputerStakeInTopicResponse",
    "GetNaiveInfererNetworkRegretRequest",
    "GetNaiveInfererNetworkRegretResponse",
    "GetNetworkInferencesAtBlockOutlierResistantRequest",
    "GetNetworkInferencesAtBlockOutlierResistantResponse",
    "GetNetworkInferencesAtBlockRequest",
    "GetNetworkInferencesAtBlockResponse",
    "GetNetworkLossBundleAtBlockRequest",
    "GetNetworkLossBundleAtBlockResponse",
    "GetNextChurningBlockByTopicIdRequest",
    "GetNextChurningBlockByTopicIdResponse",
    "GetNextTopicIdRequest",
    "GetNextTopicIdResponse",
    "GetOneInForecasterNetworkRegretRequest",
    "GetOneInForecasterNetworkRegretResponse",
    "GetOneOutForecasterForecasterNetworkRegretRequest",
    "GetOneOutForecasterForecasterNetworkRegretResponse",
    "GetOneOutForecasterInfererNetworkRegretRequest",
    "GetOneOutForecasterInfererNetworkRegretResponse",
    "GetOneOutInfererForecasterNetworkRegretRequest",
    "GetOneOutInfererForecasterNetworkRegretResponse",
    "GetOneOutInfererInfererNetworkRegretRequest",
    "GetOneOutInfererInfererNetworkRegretResponse",
    "GetParamsRequest",
    "GetParamsResponse",
    "GetPreviousForecastRewardFractionRequest",
    "GetPreviousForecastRewardFractionResponse",
    "GetPreviousInferenceRewardFractionRequest",
    "GetPreviousInferenceRewardFractionResponse",
    "GetPreviousPercentageRewardToStakedReputersRequest",
    "GetPreviousPercentageRewardToStakedReputersResponse",
    "GetPreviousReputerRewardFractionRequest",
    "GetPreviousReputerRewardFractionResponse",
    "GetPreviousTopicQuantileForecasterScoreEmaRequest",
    "GetPreviousTopicQuantileForecasterScoreEmaResponse",
    "GetPreviousTopicQuantileInfererScoreEmaRequest",
    "GetPreviousTopicQuantileInfererScoreEmaResponse",
    "GetPreviousTopicQuantileReputerScoreEmaRequest",
    "GetPreviousTopicQuantileReputerScoreEmaResponse",
    "GetPreviousTopicWeightRequest",
    "GetPreviousTopicWeightResponse",
    "GetReputerLossBundlesAtBlockRequest",
    "GetReputerLossBundlesAtBlockResponse",
    "GetReputerNodeInfoRequest",
    "GetReputerNodeInfoResponse",
    "GetReputerScoreEmaRequest",
    "GetReputerScoreEmaResponse",
    "GetReputerStakeInTopicRequest",
    "GetReputerStakeInTopicResponse",
    "GetReputersScoresAtBlockRequest",
    "GetReputersScoresAtBlockResponse",
    "GetStakeFromDelegatorInTopicInReputerRequest",
    "GetStakeFromDelegatorInTopicInReputerResponse",
    "GetStakeFromDelegatorInTopicRequest",
    "GetStakeFromDelegatorInTopicResponse",
    "GetStakeFromReputerInTopicInSelfRequest",
    "GetStakeFromReputerInTopicInSelfResponse",
    "GetStakeRemovalForReputerAndTopicIdRequest",
    "GetStakeRemovalForReputerAndTopicIdResponse",
    "GetStakeRemovalInfoRequest",
    "GetStakeRemovalInfoResponse",
    "GetStakeRemovalsUpUntilBlockRequest",
    "GetStakeRemovalsUpUntilBlockResponse",
    "GetStakeReputerAuthorityRequest",
    "GetStakeReputerAuthorityResponse",
    "GetTopicFeeRevenueRequest",
    "GetTopicFeeRevenueResponse",
    "GetTopicInitialForecasterEmaScoreRequest",
    "GetTopicInitialForecasterEmaScoreResponse",
    "GetTopicInitialInfererEmaScoreRequest",
    "GetTopicInitialInfererEmaScoreResponse",
    "GetTopicInitialReputerEmaScoreRequest",
    "GetTopicInitialReputerEmaScoreResponse",
    "GetTopicLastReputerCommitInfoRequest",
    "GetTopicLastReputerCommitInfoResponse",
    "GetTopicLastWorkerCommitInfoRequest",
    "GetTopicLastWorkerCommitInfoResponse",
    "GetTopicRequest",
    "GetTopicResponse",
    "GetTopicRewardNonceRequest",
    "GetTopicRewardNonceResponse",
    "GetTopicStakeRequest",
    "GetTopicStakeResponse",
    "GetTotalRewardToDistributeRequest",
    "GetTotalRewardToDistributeResponse",
    "GetTotalStakeRequest",
    "GetTotalStakeResponse",
    "GetTotalSumPreviousTopicWeightsRequest",
    "GetTotalSumPreviousTopicWeightsResponse",
    "GetUnfulfilledReputerNoncesRequest",
    "GetUnfulfilledReputerNoncesResponse",
    "GetUnfulfilledWorkerNoncesRequest",
    "GetUnfulfilledWorkerNoncesResponse",
    "GetWorkerForecastScoresAtBlockRequest",
    "GetWorkerForecastScoresAtBlockResponse",
    "GetWorkerInferenceScoresAtBlockRequest",
    "GetWorkerInferenceScoresAtBlockResponse",
    "GetWorkerLatestInferenceByTopicIdRequest",
    "GetWorkerLatestInferenceByTopicIdResponse",
    "GetWorkerNodeInfoRequest",
    "GetWorkerNodeInfoResponse",
    "InsertReputerPayloadRequest",
    "InsertReputerPayloadResponse",
    "InsertWorkerPayloadRequest",
    "InsertWorkerPayloadResponse",
    "IsReputerNonceUnfulfilledRequest",
    "IsReputerNonceUnfulfilledResponse",
    "IsReputerRegisteredInTopicIdRequest",
    "IsReputerRegisteredInTopicIdResponse",
    "IsTopicActiveRequest",
    "IsTopicActiveResponse",
    "IsTopicReputerWhitelistEnabledRequest",
    "IsTopicReputerWhitelistEnabledResponse",
    "IsTopicWorkerWhitelistEnabledRequest",
    "IsTopicWorkerWhitelistEnabledResponse",
    "IsWhitelistAdminRequest",
    "IsWhitelistAdminResponse",
    "IsWhitelistedGlobalActorRequest",
    "IsWhitelistedGlobalActorResponse",
    "IsWhitelistedGlobalAdminRequest",
    "IsWhitelistedGlobalAdminResponse",
    "IsWhitelistedGlobalReputerRequest",
    "IsWhitelistedGlobalReputerResponse",
    "IsWhitelistedGlobalWorkerRequest",
    "IsWhitelistedGlobalWorkerResponse",
    "IsWhitelistedTopicCreatorRequest",
    "IsWhitelistedTopicCreatorResponse",
    "IsWhitelistedTopicReputerRequest",
    "IsWhitelistedTopicReputerResponse",
    "IsWhitelistedTopicWorkerRequest",
    "IsWhitelistedTopicWorkerResponse",
    "IsWorkerNonceUnfulfilledRequest",
    "IsWorkerNonceUnfulfilledResponse",
    "IsWorkerRegisteredInTopicIdRequest",
    "IsWorkerRegisteredInTopicIdResponse",
    "LibP2PKeyAndOffchainNode",
    "MsgServiceAsyncStub",
    "MsgServiceStub",
    "OptionalParams",
    "Params",
    "QueryServiceAsyncStub",
    "QueryServiceStub",
    "RegisterRequest",
    "RegisterResponse",
    "RemoveDelegateStakeRequest",
    "RemoveDelegateStakeResponse",
    "RemoveFromGlobalAdminWhitelistRequest",
    "RemoveFromGlobalAdminWhitelistResponse",
    "RemoveFromGlobalReputerWhitelistRequest",
    "RemoveFromGlobalReputerWhitelistResponse",
    "RemoveFromGlobalWhitelistRequest",
    "RemoveFromGlobalWhitelistResponse",
    "RemoveFromGlobalWorkerWhitelistRequest",
    "RemoveFromGlobalWorkerWhitelistResponse",
    "RemoveFromTopicCreatorWhitelistRequest",
    "RemoveFromTopicCreatorWhitelistResponse",
    "RemoveFromTopicReputerWhitelistRequest",
    "RemoveFromTopicReputerWhitelistResponse",
    "RemoveFromTopicWorkerWhitelistRequest",
    "RemoveFromTopicWorkerWhitelistResponse",
    "RemoveFromWhitelistAdminRequest",
    "RemoveFromWhitelistAdminResponse",
    "RemoveRegistrationRequest",
    "RemoveRegistrationResponse",
    "RemoveStakeRequest",
    "RemoveStakeResponse",
    "RewardDelegateStakeRequest",
    "RewardDelegateStakeResponse",
    "TopicAndActorId",
    "TopicExistsRequest",
    "TopicExistsResponse",
    "TopicIdActorIdActorIdTimeStampedValue",
    "TopicIdActorIdDec",
    "TopicIdActorIdForecast",
    "TopicIdActorIdInference",
    "TopicIdActorIdInt",
    "TopicIdActorIdListeningCoefficient",
    "TopicIdActorIdScore",
    "TopicIdActorIdTimeStampedValue",
    "TopicIdActorIdUint64",
    "TopicIdAndBlockHeight",
    "TopicIdAndDec",
    "TopicIdAndInt",
    "TopicIdAndNonces",
    "TopicIdAndReputerRequestNonces",
    "TopicIdAndTopic",
    "TopicIdBlockHeightForecasts",
    "TopicIdBlockHeightInferences",
    "TopicIdBlockHeightReputerValueBundles",
    "TopicIdBlockHeightScores",
    "TopicIdBlockHeightValueBundles",
    "TopicIdDelegatorReputerDelegatorInfo",
    "TopicIdReputerReputerValueBundle",
    "TopicIdTimestampedActorNonce",
    "UpdateParamsRequest",
    "UpdateParamsResponse",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ...message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ActorType(betterproto2.Enum):
    """
    We choose a denormalized schema for events to balance the size and number of
    events, as well as the complexity of likely downstream write and read
    patterns. One likely cares about how the topic performs in totality and may
    want to update topic state after all topic information is in, or in some
    chronological order. If one normalizs by actor type, then the event volume is
    likely to be much higher and one would have to wait an undetermined amount of
    time (how many actors participated
    == how many events to wait for) to update an topic state-level metric.
    Furthermore, we know that the size of each of these messages is bounded by
    the global parameters that bound the max number of actors and topics. If one
    were to track per-actor-per-type metrics, then one immediately knows that
    they were included and participated or not in the topic at a particular block
    height as soon as one event from the topic is recorded.
    """

    INFERER_UNSPECIFIED = 0

    FORECASTER = 1

    REPUTER = 2

    betterproto_proto_names = {
        0: "ACTOR_TYPE_INFERER_UNSPECIFIED",
        1: "ACTOR_TYPE_FORECASTER",
        2: "ACTOR_TYPE_REPUTER",
    }


@dataclass(eq=False, repr=False)
class ActorIdTopicIdBlockHeight(betterproto2.Message):
    actor_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "ActorIdTopicIdBlockHeight", ActorIdTopicIdBlockHeight
)


@dataclass(eq=False, repr=False)
class AddStakeRequest(betterproto2.Message):
    """
    /  Staking
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "AddStakeRequest", AddStakeRequest
)


@dataclass(eq=False, repr=False)
class AddStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "AddStakeResponse", AddStakeResponse
)


@dataclass(eq=False, repr=False)
class AddToGlobalAdminWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "AddToGlobalAdminWhitelistRequest", AddToGlobalAdminWhitelistRequest
)


@dataclass(eq=False, repr=False)
class AddToGlobalAdminWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "AddToGlobalAdminWhitelistResponse",
    AddToGlobalAdminWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class AddToGlobalReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "AddToGlobalReputerWhitelistRequest",
    AddToGlobalReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class AddToGlobalReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "AddToGlobalReputerWhitelistResponse",
    AddToGlobalReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class AddToGlobalWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "AddToGlobalWhitelistRequest", AddToGlobalWhitelistRequest
)


@dataclass(eq=False, repr=False)
class AddToGlobalWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "AddToGlobalWhitelistResponse", AddToGlobalWhitelistResponse
)


@dataclass(eq=False, repr=False)
class AddToGlobalWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "AddToGlobalWorkerWhitelistRequest",
    AddToGlobalWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class AddToGlobalWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "AddToGlobalWorkerWhitelistResponse",
    AddToGlobalWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class AddToTopicCreatorWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "AddToTopicCreatorWhitelistRequest",
    AddToTopicCreatorWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class AddToTopicCreatorWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "AddToTopicCreatorWhitelistResponse",
    AddToTopicCreatorWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class AddToTopicReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "AddToTopicReputerWhitelistRequest",
    AddToTopicReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class AddToTopicReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "AddToTopicReputerWhitelistResponse",
    AddToTopicReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class AddToTopicWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "AddToTopicWorkerWhitelistRequest", AddToTopicWorkerWhitelistRequest
)


@dataclass(eq=False, repr=False)
class AddToTopicWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "AddToTopicWorkerWhitelistResponse",
    AddToTopicWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class AddToWhitelistAdminRequest(betterproto2.Message):
    """
    /  Whitelist
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "AddToWhitelistAdminRequest", AddToWhitelistAdminRequest
)


@dataclass(eq=False, repr=False)
class AddToWhitelistAdminResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "AddToWhitelistAdminResponse", AddToWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class BlockHeightAndTopicIds(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_ids: "list[int]" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8", "BlockHeightAndTopicIds", BlockHeightAndTopicIds
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    delegate_stake_removal_info: "_v3__.DelegateStakeRemovalInfo | None" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    )


default_message_pool.register_message(
    "emissions.v8",
    "BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo",
    BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo,
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdReputerStakeRemovalInfo(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    stake_removal_info: "_v3__.StakeRemovalInfo | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "BlockHeightTopicIdReputerStakeRemovalInfo",
    BlockHeightTopicIdReputerStakeRemovalInfo,
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIds(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_ids: "_v3__.TopicIds | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "BlockHeightTopicIds", BlockHeightTopicIds
)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdWeightPair(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_weight: "_v3__.TopicIdWeightPair | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "BlockHeightTopicIdWeightPair", BlockHeightTopicIdWeightPair
)


@dataclass(eq=False, repr=False)
class BulkAddToGlobalReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToGlobalReputerWhitelistRequest",
    BulkAddToGlobalReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkAddToGlobalReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToGlobalReputerWhitelistResponse",
    BulkAddToGlobalReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class BulkAddToGlobalWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToGlobalWorkerWhitelistRequest",
    BulkAddToGlobalWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkAddToGlobalWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToGlobalWorkerWhitelistResponse",
    BulkAddToGlobalWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class BulkAddToTopicReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToTopicReputerWhitelistRequest",
    BulkAddToTopicReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkAddToTopicReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToTopicReputerWhitelistResponse",
    BulkAddToTopicReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class BulkAddToTopicWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToTopicWorkerWhitelistRequest",
    BulkAddToTopicWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkAddToTopicWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkAddToTopicWorkerWhitelistResponse",
    BulkAddToTopicWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromGlobalReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromGlobalReputerWhitelistRequest",
    BulkRemoveFromGlobalReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromGlobalReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromGlobalReputerWhitelistResponse",
    BulkRemoveFromGlobalReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromGlobalWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromGlobalWorkerWhitelistRequest",
    BulkRemoveFromGlobalWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromGlobalWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromGlobalWorkerWhitelistResponse",
    BulkRemoveFromGlobalWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromTopicReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromTopicReputerWhitelistRequest",
    BulkRemoveFromTopicReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromTopicReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromTopicReputerWhitelistResponse",
    BulkRemoveFromTopicReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromTopicWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromTopicWorkerWhitelistRequest",
    BulkRemoveFromTopicWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class BulkRemoveFromTopicWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "BulkRemoveFromTopicWorkerWhitelistResponse",
    BulkRemoveFromTopicWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class CancelRemoveDelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "CancelRemoveDelegateStakeRequest", CancelRemoveDelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class CancelRemoveDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "CancelRemoveDelegateStakeResponse",
    CancelRemoveDelegateStakeResponse,
)


@dataclass(eq=False, repr=False)
class CancelRemoveStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "CancelRemoveStakeRequest", CancelRemoveStakeRequest
)


@dataclass(eq=False, repr=False)
class CancelRemoveStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "CancelRemoveStakeResponse", CancelRemoveStakeResponse
)


@dataclass(eq=False, repr=False)
class CanCreateTopicRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "CanCreateTopicRequest", CanCreateTopicRequest
)


@dataclass(eq=False, repr=False)
class CanCreateTopicResponse(betterproto2.Message):
    can_create_topic: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "CanCreateTopicResponse", CanCreateTopicResponse
)


@dataclass(eq=False, repr=False)
class CanSubmitReputerPayloadRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "CanSubmitReputerPayloadRequest", CanSubmitReputerPayloadRequest
)


@dataclass(eq=False, repr=False)
class CanSubmitReputerPayloadResponse(betterproto2.Message):
    can_submit_reputer_payload: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "CanSubmitReputerPayloadResponse", CanSubmitReputerPayloadResponse
)


@dataclass(eq=False, repr=False)
class CanSubmitWorkerPayloadRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "CanSubmitWorkerPayloadRequest", CanSubmitWorkerPayloadRequest
)


@dataclass(eq=False, repr=False)
class CanSubmitWorkerPayloadResponse(betterproto2.Message):
    can_submit_worker_payload: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "CanSubmitWorkerPayloadResponse", CanSubmitWorkerPayloadResponse
)


@dataclass(eq=False, repr=False)
class CanUpdateAllGlobalWhitelistsRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "CanUpdateAllGlobalWhitelistsRequest",
    CanUpdateAllGlobalWhitelistsRequest,
)


@dataclass(eq=False, repr=False)
class CanUpdateAllGlobalWhitelistsResponse(betterproto2.Message):
    can_update_all_global_whitelists: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )


default_message_pool.register_message(
    "emissions.v8",
    "CanUpdateAllGlobalWhitelistsResponse",
    CanUpdateAllGlobalWhitelistsResponse,
)


@dataclass(eq=False, repr=False)
class CanUpdateGlobalReputerWhitelistRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "CanUpdateGlobalReputerWhitelistRequest",
    CanUpdateGlobalReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class CanUpdateGlobalReputerWhitelistResponse(betterproto2.Message):
    can_update_global_reputer_whitelist: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )


default_message_pool.register_message(
    "emissions.v8",
    "CanUpdateGlobalReputerWhitelistResponse",
    CanUpdateGlobalReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class CanUpdateGlobalWorkerWhitelistRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "CanUpdateGlobalWorkerWhitelistRequest",
    CanUpdateGlobalWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class CanUpdateGlobalWorkerWhitelistResponse(betterproto2.Message):
    can_update_global_worker_whitelist: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )


default_message_pool.register_message(
    "emissions.v8",
    "CanUpdateGlobalWorkerWhitelistResponse",
    CanUpdateGlobalWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class CanUpdateParamsRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "CanUpdateParamsRequest", CanUpdateParamsRequest
)


@dataclass(eq=False, repr=False)
class CanUpdateParamsResponse(betterproto2.Message):
    can_update_params: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "CanUpdateParamsResponse", CanUpdateParamsResponse
)


@dataclass(eq=False, repr=False)
class CanUpdateTopicWhitelistRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "CanUpdateTopicWhitelistRequest", CanUpdateTopicWhitelistRequest
)


@dataclass(eq=False, repr=False)
class CanUpdateTopicWhitelistResponse(betterproto2.Message):
    can_update_topic_whitelist: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "CanUpdateTopicWhitelistResponse", CanUpdateTopicWhitelistResponse
)


@dataclass(eq=False, repr=False)
class CreateNewTopicRequest(betterproto2.Message):
    """
    / TOPICS
    """

    creator: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    creator is the message sender.
    """

    metadata: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    loss_method: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    epoch_length: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)

    ground_truth_lag: "int" = betterproto2.field(8, betterproto2.TYPE_INT64)

    p_norm: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)

    alpha_regret: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)

    allow_negative: "bool" = betterproto2.field(12, betterproto2.TYPE_BOOL)

    epsilon: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    worker_submission_window: "int" = betterproto2.field(14, betterproto2.TYPE_INT64)

    merit_sortition_alpha: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    active_inferer_quantile: "str" = betterproto2.field(16, betterproto2.TYPE_STRING)

    active_forecaster_quantile: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)

    active_reputer_quantile: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)

    enable_worker_whitelist: "bool" = betterproto2.field(19, betterproto2.TYPE_BOOL)

    enable_reputer_whitelist: "bool" = betterproto2.field(20, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "CreateNewTopicRequest", CreateNewTopicRequest
)


@dataclass(eq=False, repr=False)
class CreateNewTopicResponse(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "CreateNewTopicResponse", CreateNewTopicResponse
)


@dataclass(eq=False, repr=False)
class DelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "DelegateStakeRequest", DelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class DelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "DelegateStakeResponse", DelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class DelegatorReputerTopicIdBlockHeight(betterproto2.Message):
    delegator: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "DelegatorReputerTopicIdBlockHeight",
    DelegatorReputerTopicIdBlockHeight,
)


@dataclass(eq=False, repr=False)
class DisableTopicReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "DisableTopicReputerWhitelistRequest",
    DisableTopicReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class DisableTopicReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "DisableTopicReputerWhitelistResponse",
    DisableTopicReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class DisableTopicWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "DisableTopicWorkerWhitelistRequest",
    DisableTopicWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class DisableTopicWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "DisableTopicWorkerWhitelistResponse",
    DisableTopicWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class EnableTopicReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "EnableTopicReputerWhitelistRequest",
    EnableTopicReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class EnableTopicReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "EnableTopicReputerWhitelistResponse",
    EnableTopicReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class EnableTopicWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "EnableTopicWorkerWhitelistRequest",
    EnableTopicWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class EnableTopicWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "EnableTopicWorkerWhitelistResponse",
    EnableTopicWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class EventEmaScoresSet(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    nonce: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    scores: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)

    is_active: "list[bool]" = betterproto2.field(
        6, betterproto2.TYPE_BOOL, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventEMAScoresSet", EventEmaScoresSet
)


@dataclass(eq=False, repr=False)
class EventForecasterNetworkRegretSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    regrets: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventForecasterNetworkRegretSet", EventForecasterNetworkRegretSet
)


@dataclass(eq=False, repr=False)
class EventForecasterWeightSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    address: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    weight: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "EventForecasterWeightSet", EventForecasterWeightSet
)


@dataclass(eq=False, repr=False)
class EventForecastTaskScoreSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    score: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "EventForecastTaskScoreSet", EventForecastTaskScoreSet
)


@dataclass(eq=False, repr=False)
class EventInfererNetworkRegretSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    regrets: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventInfererNetworkRegretSet", EventInfererNetworkRegretSet
)


@dataclass(eq=False, repr=False)
class EventInfererWeightSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    address: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    weight: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "EventInfererWeightSet", EventInfererWeightSet
)


@dataclass(eq=False, repr=False)
class EventListeningCoefficientsSet(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    coefficients: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventListeningCoefficientsSet", EventListeningCoefficientsSet
)


@dataclass(eq=False, repr=False)
class EventNaiveInfererNetworkRegretSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    regrets: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "EventNaiveInfererNetworkRegretSet",
    EventNaiveInfererNetworkRegretSet,
)


@dataclass(eq=False, repr=False)
class EventNetworkLossSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    value_bundle: "_v3__.ValueBundle | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventNetworkLossSet", EventNetworkLossSet
)


@dataclass(eq=False, repr=False)
class EventPreviousPercentageRewardToStakedReputersSet(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    percentage: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "EventPreviousPercentageRewardToStakedReputersSet",
    EventPreviousPercentageRewardToStakedReputersSet,
)


@dataclass(eq=False, repr=False)
class EventRegretStdNormSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    stdnorm: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "EventRegretStdNormSet", EventRegretStdNormSet
)


@dataclass(eq=False, repr=False)
class EventReputerLastCommitSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    nonce: "_v3__.Nonce | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventReputerLastCommitSet", EventReputerLastCommitSet
)


@dataclass(eq=False, repr=False)
class EventRewardsSettled(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    rewards: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )

    block_height_tx: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "EventRewardsSettled", EventRewardsSettled
)


@dataclass(eq=False, repr=False)
class EventScoresSet(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    addresses: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )

    scores: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message("emissions.v8", "EventScoresSet", EventScoresSet)


@dataclass(eq=False, repr=False)
class EventTopicInitialEmaScoreSet(betterproto2.Message):
    actor_type: "ActorType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ActorType(0)
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)

    score: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "EventTopicInitialEmaScoreSet", EventTopicInitialEmaScoreSet
)


@dataclass(eq=False, repr=False)
class EventTopicInitialRegretSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    regret: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "EventTopicInitialRegretSet", EventTopicInitialRegretSet
)


@dataclass(eq=False, repr=False)
class EventTopicRewardsSet(betterproto2.Message):
    topic_ids: "list[int]" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, repeated=True
    )

    rewards: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventTopicRewardsSet", EventTopicRewardsSet
)


@dataclass(eq=False, repr=False)
class EventWorkerLastCommitSet(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    nonce: "_v3__.Nonce | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "EventWorkerLastCommitSet", EventWorkerLastCommitSet
)


@dataclass(eq=False, repr=False)
class FundTopicRequest(betterproto2.Message):
    """
    Inferences are requested by consumers who fund topics by sending ALLO to
    ecosystem account via TopicFund messages
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    how many funds to send from alice with this Inference Request
    """


default_message_pool.register_message(
    "emissions.v8", "FundTopicRequest", FundTopicRequest
)


@dataclass(eq=False, repr=False)
class FundTopicResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "FundTopicResponse", FundTopicResponse
)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto2.Message):
    """
    GenesisState is the state that must be provided at genesis.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    / PARAMS
    """

    core_team_addresses: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    / WHITELISTS
    """

    next_topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    / TOPIC
    the next topic id to be used, equal to the number of topics that have been
    created
    """

    topics: "list[TopicIdAndTopic]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    every topic that has been created indexed by their topicId starting from 1
    (0 is reserved for the root network)
    """

    active_topics: "list[int]" = betterproto2.field(
        5, betterproto2.TYPE_UINT64, repeated=True
    )

    rewardable_topics: "list[int]" = betterproto2.field(
        6, betterproto2.TYPE_UINT64, repeated=True
    )
    """
    every topic that has been churned and ready to be rewarded i.e. reputer
    losses have been committed
    """

    topic_workers: "list[TopicAndActorId]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    for a topic, what is every worker node that has registered to it?
    """

    topic_reputers: "list[TopicAndActorId]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    for a topic, what is every reputer node that has registered to it?
    """

    topic_reward_nonce: "list[TopicIdAndBlockHeight]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic) -> nonce/block height
    """

    inferer_scores_by_block: "list[TopicIdBlockHeightScores]" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / SCORES
    ALSO SEE 61, 62, 63 below
    map of (topic, block_height, worker) -> score
    """

    forecaster_scores_by_block: "list[TopicIdBlockHeightScores]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, worker) -> score
    """

    reputer_scores_by_block: "list[TopicIdBlockHeightScores]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, reputer) -> score
    """

    reputer_listening_coefficient: "list[TopicIdActorIdListeningCoefficient]" = (
        betterproto2.field(16, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    SEE 13, 14, 15 reserved; see the top of GenesisState
    map of (topic, reputer) -> listening coefficient
    """

    previous_reputer_reward_fraction: "list[TopicIdActorIdDec]" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, reputer) -> previous reward (used for EMA)
    """

    previous_inference_reward_fraction: "list[TopicIdActorIdDec]" = betterproto2.field(
        18, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, worker) -> previous reward for inference (used for EMA)
    """

    previous_forecast_reward_fraction: "list[TopicIdActorIdDec]" = betterproto2.field(
        19, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, worker) -> previous reward for forecast (used for EMA)
    """

    previous_forecaster_score_ratio: "list[TopicIdAndDec]" = betterproto2.field(
        20, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, forecaster) -> ratio of forecaster score
    """

    total_stake: "str" = betterproto2.field(21, betterproto2.TYPE_STRING)
    """
    / STAKING

    total sum stake of all stakers on the network
    """

    topic_stake: "list[TopicIdAndInt]" = betterproto2.field(
        22, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    for every topic, how much total stake does that topic have accumulated?
    """

    stake_reputer_authority: "list[TopicIdActorIdInt]" = betterproto2.field(
        23, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    stake reputer placed in topic + delegate stake placed in them,
    signalling their total authority on the topic
    (topic Id, reputer) -> stake from reputer on self +
    stakeFromDelegatorsUponReputer
    """

    stake_sum_from_delegator: "list[TopicIdActorIdInt]" = betterproto2.field(
        24, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic id, delegator) -> total amount of stake in that topic placed
    by that delegator
    """

    delegated_stakes: "list[TopicIdDelegatorReputerDelegatorInfo]" = betterproto2.field(
        25, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic id, delegator, reputer) -> amount of stake that has been
    placed by that delegator on that target
    """

    stake_from_delegators_upon_reputer: "list[TopicIdActorIdInt]" = betterproto2.field(
        26, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic id, reputer) -> total amount of stake that has been placed on
    that reputer by delegators
    """

    delegate_reward_per_share: "list[TopicIdActorIdDec]" = betterproto2.field(
        27, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topicId, reputer) -> share of delegate reward
    """

    stake_removals_by_block: "list[BlockHeightTopicIdReputerStakeRemovalInfo]" = (
        betterproto2.field(28, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    stake removals are double indexed to avoid O(n) lookups when removing stake
    map of (blockHeight, topic, reputer) -> removal information for that
    reputer
    """

    stake_removals_by_actor: "list[ActorIdTopicIdBlockHeight]" = betterproto2.field(
        29, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    key set of (reputer, topic, blockHeight) to existence of a removal in the
    forwards map
    """

    delegate_stake_removals_by_block: "list[BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo]" = betterproto2.field(
        30, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    delegate stake removals are double indexed to avoid O(n) lookups when
    removing stake map of (blockHeight, topic, delegator, reputer staked upon)
    -> (list of reputers delegated upon and info) to have stake removed at that
    block
    """

    delegate_stake_removals_by_actor: "list[DelegatorReputerTopicIdBlockHeight]" = (
        betterproto2.field(31, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    key set of (delegator, reputer, topicId, blockHeight) to existence of a
    removal in the forwards map
    """

    inferences: "list[TopicIdActorIdInference]" = betterproto2.field(
        32, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / MISC GLOBAL STATE
    map of (topic, worker) -> inference
    """

    forecasts: "list[TopicIdActorIdForecast]" = betterproto2.field(
        33, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, worker) -> forecast[]
    """

    workers: "list[LibP2PKeyAndOffchainNode]" = betterproto2.field(
        34, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of worker id to node data about that worker
    """

    reputers: "list[LibP2PKeyAndOffchainNode]" = betterproto2.field(
        35, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of reputer id to node data about that reputer
    """

    topic_fee_revenue: "list[TopicIdAndInt]" = betterproto2.field(
        36, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    fee revenue collected by a topic over the course of the last reward cadence
    """

    previous_topic_weight: "list[TopicIdAndDec]" = betterproto2.field(
        37, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    store previous weights for exponential moving average in rewards calc
    """

    all_inferences: "list[TopicIdBlockHeightInferences]" = betterproto2.field(
        38, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height) -> Inference
    """

    all_forecasts: "list[TopicIdBlockHeightForecasts]" = betterproto2.field(
        39, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height) -> Forecast
    """

    all_loss_bundles: "list[TopicIdBlockHeightReputerValueBundles]" = (
        betterproto2.field(40, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    map of (topic, block_height) -> ReputerValueBundles (1 per reputer active
    at that time)
    """

    network_loss_bundles: "list[TopicIdBlockHeightValueBundles]" = betterproto2.field(
        41, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height) -> ValueBundle (1 network wide bundle per
    timestep)
    """

    previous_percentage_reward_to_staked_reputers: "str" = betterproto2.field(
        42, betterproto2.TYPE_STRING
    )
    """
    Percentage of all rewards, paid out to staked reputers, during the previous
    reward cadence. Used by mint module
    """

    unfulfilled_worker_nonces: "list[TopicIdAndNonces]" = betterproto2.field(
        43, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / NONCES

    SEE 55, 56 below
    map of (topic) -> unfulfilled nonces
    """

    unfulfilled_reputer_nonces: "list[TopicIdAndReputerRequestNonces]" = (
        betterproto2.field(44, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    map of (topic) -> unfulfilled nonces
    """

    latest_inferer_network_regrets: "list[TopicIdActorIdTimeStampedValue]" = (
        betterproto2.field(45, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    / REGRETS
    map of (topic, worker) -> regret of worker from comparing loss of worker
    relative to loss of other inferers
    """

    latest_forecaster_network_regrets: "list[TopicIdActorIdTimeStampedValue]" = (
        betterproto2.field(46, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    map of (topic, worker) -> regret of worker from comparing loss of worker
    relative to loss of other forecasters
    """

    latest_one_in_forecaster_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        47, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, forecaster, inferer) -> R^+_{ij_kk} regret of forecaster
    loss from comparing one-in loss with all network inferer (3rd index)
    regrets L_ij made under the regime of the one-in forecaster (2nd index)
    """

    latest_naive_inferer_network_regrets: "list[TopicIdActorIdTimeStampedValue]" = (
        betterproto2.field(48, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    the forecaster (2nd index) regrets made under the regime of the same
    forecaster as a one-in forecaster
    """

    latest_one_out_inferer_inferer_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        49, betterproto2.TYPE_MESSAGE, repeated=True
    )

    latest_one_out_inferer_forecaster_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        50, betterproto2.TYPE_MESSAGE, repeated=True
    )

    latest_one_out_forecaster_inferer_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        51, betterproto2.TYPE_MESSAGE, repeated=True
    )

    latest_one_out_forecaster_forecaster_network_regrets: "list[TopicIdActorIdActorIdTimeStampedValue]" = betterproto2.field(
        52, betterproto2.TYPE_MESSAGE, repeated=True
    )

    topic_last_worker_commit: "list[TopicIdTimestampedActorNonce]" = betterproto2.field(
        53, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / RECORD COMMITS
    """

    topic_last_reputer_commit: "list[TopicIdTimestampedActorNonce]" = (
        betterproto2.field(54, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    open_worker_windows: "list[BlockHeightAndTopicIds]" = betterproto2.field(
        55, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / WINDOW
    map of open worker nonce windows for topics on particular block heights
    """

    last_drip_block: "list[TopicIdAndBlockHeight]" = betterproto2.field(
        56, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / DRIPS
    map of (topic) -> last dripped block
    """

    topic_to_next_possible_churning_block: "list[TopicIdAndBlockHeight]" = (
        betterproto2.field(57, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    ACTIVE TOPIC
    """

    block_to_active_topics: "list[BlockHeightTopicIds]" = betterproto2.field(
        58, betterproto2.TYPE_MESSAGE, repeated=True
    )

    block_to_lowest_active_topic_weight: "list[BlockHeightTopicIdWeightPair]" = (
        betterproto2.field(59, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    inferer_score_emas: "list[TopicIdActorIdScore]" = betterproto2.field(
        60, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / EMA SCORES
    map of (topic, block_height, worker) -> score
    """

    forecaster_score_emas: "list[TopicIdActorIdScore]" = betterproto2.field(
        61, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, worker) -> score
    """

    reputer_score_emas: "list[TopicIdActorIdScore]" = betterproto2.field(
        62, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, block_height, reputer) -> score
    """

    previous_topic_quantile_inferer_score_ema: "list[TopicIdAndDec]" = (
        betterproto2.field(63, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    EMA
    """

    previous_topic_quantile_forecaster_score_ema: "list[TopicIdAndDec]" = (
        betterproto2.field(64, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    previous_topic_quantile_reputer_score_ema: "list[TopicIdAndDec]" = (
        betterproto2.field(65, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    count_inferer_inclusions_in_topic_active_set: "list[TopicIdActorIdUint64]" = (
        betterproto2.field(66, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    INCLUSIONS
    """

    count_forecaster_inclusions_in_topic_active_set: "list[TopicIdActorIdUint64]" = (
        betterproto2.field(67, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    active_inferers: "list[TopicAndActorId]" = betterproto2.field(
        68, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    active inferers for each topic
    """

    active_forecasters: "list[TopicAndActorId]" = betterproto2.field(
        69, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    active forecasters for each topic
    """

    lowest_inferer_score_ema: "list[TopicIdActorIdScore]" = betterproto2.field(
        70, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    lowest inferer score EMA for each topic
    """

    lowest_forecaster_score_ema: "list[TopicIdActorIdScore]" = betterproto2.field(
        71, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    lowest forecaster score EMA for each topic
    """

    active_reputers: "list[TopicAndActorId]" = betterproto2.field(
        72, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    active reputers for each topic
    """

    lowest_reputer_score_ema: "list[TopicIdActorIdScore]" = betterproto2.field(
        73, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    lowest reputer score EMA for each topic
    """

    loss_bundles: "list[TopicIdReputerReputerValueBundle]" = betterproto2.field(
        74, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    map of (topic, reputer) -> reputer loss
    """

    total_sum_previous_topic_weights: "str" = betterproto2.field(
        75, betterproto2.TYPE_STRING
    )
    """
    total sum of topic weights
    """

    reward_current_block_emission: "str" = betterproto2.field(
        76, betterproto2.TYPE_STRING
    )
    """
    reward emission on current block
    """

    whitelist_admins: "list[str]" = betterproto2.field(
        77, betterproto2.TYPE_STRING, repeated=True
    )
    """
    / WHITELISTS
    """

    global_whitelist: "list[str]" = betterproto2.field(
        78, betterproto2.TYPE_STRING, repeated=True
    )

    topic_creator_whitelist: "list[str]" = betterproto2.field(
        79, betterproto2.TYPE_STRING, repeated=True
    )

    topic_worker_whitelist: "list[TopicAndActorId]" = betterproto2.field(
        80, betterproto2.TYPE_MESSAGE, repeated=True
    )

    topic_reputer_whitelist: "list[TopicAndActorId]" = betterproto2.field(
        81, betterproto2.TYPE_MESSAGE, repeated=True
    )

    topic_worker_whitelist_enabled: "list[int]" = betterproto2.field(
        82, betterproto2.TYPE_UINT64, repeated=True
    )

    topic_reputer_whitelist_enabled: "list[int]" = betterproto2.field(
        83, betterproto2.TYPE_UINT64, repeated=True
    )

    last_median_inferences: "list[TopicIdAndDec]" = betterproto2.field(
        84, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / OUTLIER RESISTANT INFERENCES
    """

    mad_inferences: "list[TopicIdAndDec]" = betterproto2.field(
        85, betterproto2.TYPE_MESSAGE, repeated=True
    )

    initial_inferer_ema_score: "list[TopicIdAndDec]" = betterproto2.field(
        86, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    / INITIAL SCORES

    current inferer ema scores to apply per topic
    map of topic -> inferer ema score
    """

    initial_forecaster_ema_score: "list[TopicIdAndDec]" = betterproto2.field(
        87, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    current forecaster ema scores to apply per topic
    map of topic -> forecaster ema score
    """

    initial_reputer_ema_score: "list[TopicIdAndDec]" = betterproto2.field(
        88, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    current reputer ema scores to apply per topic
    map of topic -> reputer ema score
    """

    global_worker_whitelist: "list[str]" = betterproto2.field(
        89, betterproto2.TYPE_STRING, repeated=True
    )
    """
    / MORE WHITELISTS
    """

    global_reputer_whitelist: "list[str]" = betterproto2.field(
        90, betterproto2.TYPE_STRING, repeated=True
    )

    global_admin_whitelist: "list[str]" = betterproto2.field(
        91, betterproto2.TYPE_STRING, repeated=True
    )

    latest_regret_std_norm: "list[TopicIdAndDec]" = betterproto2.field(
        92, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    REGRET STDNORM
    """

    latest_inferer_weights: "list[TopicIdActorIdDec]" = betterproto2.field(
        93, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    WEIGHTS
    """

    latest_forecaster_weights: "list[TopicIdActorIdDec]" = betterproto2.field(
        94, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("emissions.v8", "GenesisState", GenesisState)


@dataclass(eq=False, repr=False)
class GetActiveForecastersForTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetActiveForecastersForTopicRequest",
    GetActiveForecastersForTopicRequest,
)


@dataclass(eq=False, repr=False)
class GetActiveForecastersForTopicResponse(betterproto2.Message):
    forecasters: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetActiveForecastersForTopicResponse",
    GetActiveForecastersForTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetActiveInferersForTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetActiveInferersForTopicRequest", GetActiveInferersForTopicRequest
)


@dataclass(eq=False, repr=False)
class GetActiveInferersForTopicResponse(betterproto2.Message):
    inferers: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetActiveInferersForTopicResponse",
    GetActiveInferersForTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetActiveReputersForTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetActiveReputersForTopicRequest", GetActiveReputersForTopicRequest
)


@dataclass(eq=False, repr=False)
class GetActiveReputersForTopicResponse(betterproto2.Message):
    reputers: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetActiveReputersForTopicResponse",
    GetActiveReputersForTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsAtBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "GetActiveTopicsAtBlockRequest", GetActiveTopicsAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsAtBlockResponse(betterproto2.Message):
    topics: "list[_v3__.Topic]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "_v3__.SimpleCursorPaginationResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetActiveTopicsAtBlockResponse", GetActiveTopicsAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsRequest(betterproto2.Message):
    pagination: "_v3__.SimpleCursorPaginationRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetActiveTopicsRequest", GetActiveTopicsRequest
)


@dataclass(eq=False, repr=False)
class GetActiveTopicsResponse(betterproto2.Message):
    topics: "list[_v3__.Topic]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    pagination: "_v3__.SimpleCursorPaginationResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetActiveTopicsResponse", GetActiveTopicsResponse
)


@dataclass(eq=False, repr=False)
class GetCountForecasterInclusionsInTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetCountForecasterInclusionsInTopicRequest",
    GetCountForecasterInclusionsInTopicRequest,
)


@dataclass(eq=False, repr=False)
class GetCountForecasterInclusionsInTopicResponse(betterproto2.Message):
    count: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetCountForecasterInclusionsInTopicResponse",
    GetCountForecasterInclusionsInTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetCountInfererInclusionsInTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetCountInfererInclusionsInTopicRequest",
    GetCountInfererInclusionsInTopicRequest,
)


@dataclass(eq=False, repr=False)
class GetCountInfererInclusionsInTopicResponse(betterproto2.Message):
    count: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetCountInfererInclusionsInTopicResponse",
    GetCountInfererInclusionsInTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestForecasterScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetCurrentLowestForecasterScoreRequest",
    GetCurrentLowestForecasterScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestForecasterScoreResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetCurrentLowestForecasterScoreResponse",
    GetCurrentLowestForecasterScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestInfererScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetCurrentLowestInfererScoreRequest",
    GetCurrentLowestInfererScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestInfererScoreResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetCurrentLowestInfererScoreResponse",
    GetCurrentLowestInfererScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestReputerScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetCurrentLowestReputerScoreRequest",
    GetCurrentLowestReputerScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetCurrentLowestReputerScoreResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetCurrentLowestReputerScoreResponse",
    GetCurrentLowestReputerScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateRewardPerShareRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetDelegateRewardPerShareRequest", GetDelegateRewardPerShareRequest
)


@dataclass(eq=False, repr=False)
class GetDelegateRewardPerShareResponse(betterproto2.Message):
    reward_per_share: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateRewardPerShareResponse",
    GetDelegateRewardPerShareResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeInTopicInReputerRequest(betterproto2.Message):
    reputer_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeInTopicInReputerRequest",
    GetDelegateStakeInTopicInReputerRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeInTopicInReputerResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeInTopicInReputerResponse",
    GetDelegateStakeInTopicInReputerResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakePlacementRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    target: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetDelegateStakePlacementRequest", GetDelegateStakePlacementRequest
)


@dataclass(eq=False, repr=False)
class GetDelegateStakePlacementResponse(betterproto2.Message):
    delegator_info: "_v3__.DelegatorInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakePlacementResponse",
    GetDelegateStakePlacementResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeRemovalInfoRequest",
    GetDelegateStakeRemovalInfoRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalInfoResponse(betterproto2.Message):
    removal: "_v3__.DelegateStakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeRemovalInfoResponse",
    GetDelegateStakeRemovalInfoResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetDelegateStakeRemovalRequest", GetDelegateStakeRemovalRequest
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalResponse(betterproto2.Message):
    stake_removal_info: "_v3__.DelegateStakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetDelegateStakeRemovalResponse", GetDelegateStakeRemovalResponse
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalsUpUntilBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeRemovalsUpUntilBlockRequest",
    GetDelegateStakeRemovalsUpUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalsUpUntilBlockResponse(betterproto2.Message):
    removals: "list[_v3__.DelegateStakeRemovalInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeRemovalsUpUntilBlockResponse",
    GetDelegateStakeRemovalsUpUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeUponReputerRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    target: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeUponReputerRequest",
    GetDelegateStakeUponReputerRequest,
)


@dataclass(eq=False, repr=False)
class GetDelegateStakeUponReputerResponse(betterproto2.Message):
    stake: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetDelegateStakeUponReputerResponse",
    GetDelegateStakeUponReputerResponse,
)


@dataclass(eq=False, repr=False)
class GetForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetForecasterNetworkRegretRequest",
    GetForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetForecasterNetworkRegretResponse",
    GetForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetForecasterScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetForecasterScoreEmaRequest", GetForecasterScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class GetForecasterScoreEmaResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetForecasterScoreEmaResponse", GetForecasterScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class GetForecastsAtBlockRequest(betterproto2.Message):
    """
    Returns the forecasts on a topic posted at a block height
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "GetForecastsAtBlockRequest", GetForecastsAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetForecastsAtBlockResponse(betterproto2.Message):
    """
    Returns the forecasts on a topic posted at a block height

    NOTE: The amount field is a Uint which implements the custom method
    signatures required by gogoproto.
    """

    forecasts: "_v3__.Forecasts | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetForecastsAtBlockResponse", GetForecastsAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetForecastScoresUntilBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetForecastScoresUntilBlockRequest",
    GetForecastScoresUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetForecastScoresUntilBlockResponse(betterproto2.Message):
    scores: "list[_v3__.Score]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetForecastScoresUntilBlockResponse",
    GetForecastScoresUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetInferencesAtBlockRequest(betterproto2.Message):
    """
    Returns the inferences on a topic posted at a block height
    """

    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "GetInferencesAtBlockRequest", GetInferencesAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetInferencesAtBlockResponse(betterproto2.Message):
    """
    Returns the inferences on a topic posted at a block height

    NOTE: The amount field is a Uint which implements the custom method
    signatures required by gogoproto.
    """

    inferences: "_v3__.Inferences | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetInferencesAtBlockResponse", GetInferencesAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetInferenceScoresUntilBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetInferenceScoresUntilBlockRequest",
    GetInferenceScoresUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetInferenceScoresUntilBlockResponse(betterproto2.Message):
    scores: "list[_v3__.Score]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetInferenceScoresUntilBlockResponse",
    GetInferenceScoresUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetInfererNetworkRegretRequest", GetInfererNetworkRegretRequest
)


@dataclass(eq=False, repr=False)
class GetInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetInfererNetworkRegretResponse", GetInfererNetworkRegretResponse
)


@dataclass(eq=False, repr=False)
class GetInfererScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetInfererScoreEmaRequest", GetInfererScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class GetInfererScoreEmaResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetInfererScoreEmaResponse", GetInfererScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesOutlierResistantRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestAvailableNetworkInferencesOutlierResistantRequest",
    GetLatestAvailableNetworkInferencesOutlierResistantRequest,
)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesOutlierResistantResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestAvailableNetworkInferencesOutlierResistantResponse",
    GetLatestAvailableNetworkInferencesOutlierResistantResponse,
)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestAvailableNetworkInferencesRequest",
    GetLatestAvailableNetworkInferencesRequest,
)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestAvailableNetworkInferencesResponse",
    GetLatestAvailableNetworkInferencesResponse,
)


@dataclass(eq=False, repr=False)
class GetLatestForecasterWeightRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetLatestForecasterWeightRequest", GetLatestForecasterWeightRequest
)


@dataclass(eq=False, repr=False)
class GetLatestForecasterWeightResponse(betterproto2.Message):
    weight: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestForecasterWeightResponse",
    GetLatestForecasterWeightResponse,
)


@dataclass(eq=False, repr=False)
class GetLatestInfererWeightRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetLatestInfererWeightRequest", GetLatestInfererWeightRequest
)


@dataclass(eq=False, repr=False)
class GetLatestInfererWeightResponse(betterproto2.Message):
    weight: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetLatestInfererWeightResponse", GetLatestInfererWeightResponse
)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesOutlierResistantRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestNetworkInferencesOutlierResistantRequest",
    GetLatestNetworkInferencesOutlierResistantRequest,
)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesOutlierResistantResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestNetworkInferencesOutlierResistantResponse",
    GetLatestNetworkInferencesOutlierResistantResponse,
)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestNetworkInferencesRequest",
    GetLatestNetworkInferencesRequest,
)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    inferer_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    forecaster_weights: "list[_v3__.RegretInformedWeight]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    inference_block_height: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)

    loss_block_height: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)

    confidence_interval_raw_percentiles: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )

    confidence_interval_values: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetLatestNetworkInferencesResponse",
    GetLatestNetworkInferencesResponse,
)


@dataclass(eq=False, repr=False)
class GetLatestRegretStdNormRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetLatestRegretStdNormRequest", GetLatestRegretStdNormRequest
)


@dataclass(eq=False, repr=False)
class GetLatestRegretStdNormResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetLatestRegretStdNormResponse", GetLatestRegretStdNormResponse
)


@dataclass(eq=False, repr=False)
class GetLatestTopicInferencesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetLatestTopicInferencesRequest", GetLatestTopicInferencesRequest
)


@dataclass(eq=False, repr=False)
class GetLatestTopicInferencesResponse(betterproto2.Message):
    inferences: "_v3__.Inferences | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "GetLatestTopicInferencesResponse", GetLatestTopicInferencesResponse
)


@dataclass(eq=False, repr=False)
class GetListeningCoefficientRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetListeningCoefficientRequest", GetListeningCoefficientRequest
)


@dataclass(eq=False, repr=False)
class GetListeningCoefficientResponse(betterproto2.Message):
    listening_coefficient: "_v3__.ListeningCoefficient | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetListeningCoefficientResponse", GetListeningCoefficientResponse
)


@dataclass(eq=False, repr=False)
class GetMultiReputerStakeInTopicRequest(betterproto2.Message):
    addresses: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetMultiReputerStakeInTopicRequest",
    GetMultiReputerStakeInTopicRequest,
)


@dataclass(eq=False, repr=False)
class GetMultiReputerStakeInTopicResponse(betterproto2.Message):
    amounts: "list[_v3__.StakeInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetMultiReputerStakeInTopicResponse",
    GetMultiReputerStakeInTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetNaiveInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetNaiveInfererNetworkRegretRequest",
    GetNaiveInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetNaiveInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetNaiveInfererNetworkRegretResponse",
    GetNaiveInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockOutlierResistantRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height_last_inference: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetNetworkInferencesAtBlockOutlierResistantRequest",
    GetNetworkInferencesAtBlockOutlierResistantRequest,
)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockOutlierResistantResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetNetworkInferencesAtBlockOutlierResistantResponse",
    GetNetworkInferencesAtBlockOutlierResistantResponse,
)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height_last_inference: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetNetworkInferencesAtBlockRequest",
    GetNetworkInferencesAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockResponse(betterproto2.Message):
    network_inferences: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetNetworkInferencesAtBlockResponse",
    GetNetworkInferencesAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetNetworkLossBundleAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetNetworkLossBundleAtBlockRequest",
    GetNetworkLossBundleAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetNetworkLossBundleAtBlockResponse(betterproto2.Message):
    loss_bundle: "_v3__.ValueBundle | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetNetworkLossBundleAtBlockResponse",
    GetNetworkLossBundleAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetNextChurningBlockByTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetNextChurningBlockByTopicIdRequest",
    GetNextChurningBlockByTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class GetNextChurningBlockByTopicIdResponse(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetNextChurningBlockByTopicIdResponse",
    GetNextChurningBlockByTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class GetNextTopicIdRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "GetNextTopicIdRequest", GetNextTopicIdRequest
)


@dataclass(eq=False, repr=False)
class GetNextTopicIdResponse(betterproto2.Message):
    next_topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetNextTopicIdResponse", GetNextTopicIdResponse
)


@dataclass(eq=False, repr=False)
class GetOneInForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetOneInForecasterNetworkRegretRequest",
    GetOneInForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneInForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetOneInForecasterNetworkRegretResponse",
    GetOneInForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutForecasterForecasterNetworkRegretRequest",
    GetOneOutForecasterForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutForecasterForecasterNetworkRegretResponse",
    GetOneOutForecasterForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_forecaster: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutForecasterInfererNetworkRegretRequest",
    GetOneOutForecasterInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutForecasterInfererNetworkRegretResponse",
    GetOneOutForecasterInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererForecasterNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecaster: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutInfererForecasterNetworkRegretRequest",
    GetOneOutInfererForecasterNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererForecasterNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutInfererForecasterNetworkRegretResponse",
    GetOneOutInfererForecasterNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererInfererNetworkRegretRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    one_out_inferer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inferer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutInfererInfererNetworkRegretRequest",
    GetOneOutInfererInfererNetworkRegretRequest,
)


@dataclass(eq=False, repr=False)
class GetOneOutInfererInfererNetworkRegretResponse(betterproto2.Message):
    regret: "_v3__.TimestampedValue | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetOneOutInfererInfererNetworkRegretResponse",
    GetOneOutInfererInfererNetworkRegretResponse,
)


@dataclass(eq=False, repr=False)
class GetParamsRequest(betterproto2.Message):
    """
    GetParamsRequest is the request type for the Get/Params RPC method.
    """

    pass


default_message_pool.register_message(
    "emissions.v8", "GetParamsRequest", GetParamsRequest
)


@dataclass(eq=False, repr=False)
class GetParamsResponse(betterproto2.Message):
    """
    GetParamsResponse is the response type for the Get/Params RPC method.
    """

    params: "Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the parameters of the module.
    """


default_message_pool.register_message(
    "emissions.v8", "GetParamsResponse", GetParamsResponse
)


@dataclass(eq=False, repr=False)
class GetPreviousForecastRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousForecastRewardFractionRequest",
    GetPreviousForecastRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousForecastRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousForecastRewardFractionResponse",
    GetPreviousForecastRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousInferenceRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousInferenceRewardFractionRequest",
    GetPreviousInferenceRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousInferenceRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousInferenceRewardFractionResponse",
    GetPreviousInferenceRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousPercentageRewardToStakedReputersRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousPercentageRewardToStakedReputersRequest",
    GetPreviousPercentageRewardToStakedReputersRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousPercentageRewardToStakedReputersResponse(betterproto2.Message):
    percentage_reward: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousPercentageRewardToStakedReputersResponse",
    GetPreviousPercentageRewardToStakedReputersResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousReputerRewardFractionRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousReputerRewardFractionRequest",
    GetPreviousReputerRewardFractionRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousReputerRewardFractionResponse(betterproto2.Message):
    reward_fraction: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousReputerRewardFractionResponse",
    GetPreviousReputerRewardFractionResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileForecasterScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousTopicQuantileForecasterScoreEmaRequest",
    GetPreviousTopicQuantileForecasterScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileForecasterScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousTopicQuantileForecasterScoreEmaResponse",
    GetPreviousTopicQuantileForecasterScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileInfererScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousTopicQuantileInfererScoreEmaRequest",
    GetPreviousTopicQuantileInfererScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileInfererScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousTopicQuantileInfererScoreEmaResponse",
    GetPreviousTopicQuantileInfererScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileReputerScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousTopicQuantileReputerScoreEmaRequest",
    GetPreviousTopicQuantileReputerScoreEmaRequest,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileReputerScoreEmaResponse(betterproto2.Message):
    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetPreviousTopicQuantileReputerScoreEmaResponse",
    GetPreviousTopicQuantileReputerScoreEmaResponse,
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicWeightRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetPreviousTopicWeightRequest", GetPreviousTopicWeightRequest
)


@dataclass(eq=False, repr=False)
class GetPreviousTopicWeightResponse(betterproto2.Message):
    weight: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    not_found: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "GetPreviousTopicWeightResponse", GetPreviousTopicWeightResponse
)


@dataclass(eq=False, repr=False)
class GetReputerLossBundlesAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetReputerLossBundlesAtBlockRequest",
    GetReputerLossBundlesAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetReputerLossBundlesAtBlockResponse(betterproto2.Message):
    loss_bundles: "_v3__.ReputerValueBundles | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetReputerLossBundlesAtBlockResponse",
    GetReputerLossBundlesAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetReputerNodeInfoRequest(betterproto2.Message):
    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetReputerNodeInfoRequest", GetReputerNodeInfoRequest
)


@dataclass(eq=False, repr=False)
class GetReputerNodeInfoResponse(betterproto2.Message):
    node_info: "_v3__.OffchainNode | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetReputerNodeInfoResponse", GetReputerNodeInfoResponse
)


@dataclass(eq=False, repr=False)
class GetReputerScoreEmaRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetReputerScoreEmaRequest", GetReputerScoreEmaRequest
)


@dataclass(eq=False, repr=False)
class GetReputerScoreEmaResponse(betterproto2.Message):
    score: "_v3__.Score | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetReputerScoreEmaResponse", GetReputerScoreEmaResponse
)


@dataclass(eq=False, repr=False)
class GetReputersScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "GetReputersScoresAtBlockRequest", GetReputersScoresAtBlockRequest
)


@dataclass(eq=False, repr=False)
class GetReputersScoresAtBlockResponse(betterproto2.Message):
    scores: "_v3__.Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetReputersScoresAtBlockResponse", GetReputersScoresAtBlockResponse
)


@dataclass(eq=False, repr=False)
class GetReputerStakeInTopicRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetReputerStakeInTopicRequest", GetReputerStakeInTopicRequest
)


@dataclass(eq=False, repr=False)
class GetReputerStakeInTopicResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetReputerStakeInTopicResponse", GetReputerStakeInTopicResponse
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicInReputerRequest(betterproto2.Message):
    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeFromDelegatorInTopicInReputerRequest",
    GetStakeFromDelegatorInTopicInReputerRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicInReputerResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeFromDelegatorInTopicInReputerResponse",
    GetStakeFromDelegatorInTopicInReputerResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicRequest(betterproto2.Message):
    delegator_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeFromDelegatorInTopicRequest",
    GetStakeFromDelegatorInTopicRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeFromDelegatorInTopicResponse",
    GetStakeFromDelegatorInTopicResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeFromReputerInTopicInSelfRequest(betterproto2.Message):
    reputer_address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeFromReputerInTopicInSelfRequest",
    GetStakeFromReputerInTopicInSelfRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeFromReputerInTopicInSelfResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeFromReputerInTopicInSelfResponse",
    GetStakeFromReputerInTopicInSelfResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalForReputerAndTopicIdRequest(betterproto2.Message):
    reputer: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeRemovalForReputerAndTopicIdRequest",
    GetStakeRemovalForReputerAndTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalForReputerAndTopicIdResponse(betterproto2.Message):
    stake_removal_info: "_v3__.StakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeRemovalForReputerAndTopicIdResponse",
    GetStakeRemovalForReputerAndTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetStakeRemovalInfoRequest", GetStakeRemovalInfoRequest
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalInfoResponse(betterproto2.Message):
    removal: "_v3__.StakeRemovalInfo | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetStakeRemovalInfoResponse", GetStakeRemovalInfoResponse
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalsUpUntilBlockRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeRemovalsUpUntilBlockRequest",
    GetStakeRemovalsUpUntilBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetStakeRemovalsUpUntilBlockResponse(betterproto2.Message):
    removals: "list[_v3__.StakeRemovalInfo]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetStakeRemovalsUpUntilBlockResponse",
    GetStakeRemovalsUpUntilBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetStakeReputerAuthorityRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetStakeReputerAuthorityRequest", GetStakeReputerAuthorityRequest
)


@dataclass(eq=False, repr=False)
class GetStakeReputerAuthorityResponse(betterproto2.Message):
    authority: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetStakeReputerAuthorityResponse", GetStakeReputerAuthorityResponse
)


@dataclass(eq=False, repr=False)
class GetTopicFeeRevenueRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetTopicFeeRevenueRequest", GetTopicFeeRevenueRequest
)


@dataclass(eq=False, repr=False)
class GetTopicFeeRevenueResponse(betterproto2.Message):
    fee_revenue: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetTopicFeeRevenueResponse", GetTopicFeeRevenueResponse
)


@dataclass(eq=False, repr=False)
class GetTopicInitialForecasterEmaScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicInitialForecasterEmaScoreRequest",
    GetTopicInitialForecasterEmaScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetTopicInitialForecasterEmaScoreResponse(betterproto2.Message):
    score: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicInitialForecasterEmaScoreResponse",
    GetTopicInitialForecasterEmaScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetTopicInitialInfererEmaScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicInitialInfererEmaScoreRequest",
    GetTopicInitialInfererEmaScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetTopicInitialInfererEmaScoreResponse(betterproto2.Message):
    score: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicInitialInfererEmaScoreResponse",
    GetTopicInitialInfererEmaScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetTopicInitialReputerEmaScoreRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicInitialReputerEmaScoreRequest",
    GetTopicInitialReputerEmaScoreRequest,
)


@dataclass(eq=False, repr=False)
class GetTopicInitialReputerEmaScoreResponse(betterproto2.Message):
    score: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicInitialReputerEmaScoreResponse",
    GetTopicInitialReputerEmaScoreResponse,
)


@dataclass(eq=False, repr=False)
class GetTopicLastReputerCommitInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicLastReputerCommitInfoRequest",
    GetTopicLastReputerCommitInfoRequest,
)


@dataclass(eq=False, repr=False)
class GetTopicLastReputerCommitInfoResponse(betterproto2.Message):
    last_commit: "_v3__.TimestampedActorNonce | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicLastReputerCommitInfoResponse",
    GetTopicLastReputerCommitInfoResponse,
)


@dataclass(eq=False, repr=False)
class GetTopicLastWorkerCommitInfoRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicLastWorkerCommitInfoRequest",
    GetTopicLastWorkerCommitInfoRequest,
)


@dataclass(eq=False, repr=False)
class GetTopicLastWorkerCommitInfoResponse(betterproto2.Message):
    last_commit: "_v3__.TimestampedActorNonce | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetTopicLastWorkerCommitInfoResponse",
    GetTopicLastWorkerCommitInfoResponse,
)


@dataclass(eq=False, repr=False)
class GetTopicRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetTopicRequest", GetTopicRequest
)


@dataclass(eq=False, repr=False)
class GetTopicResponse(betterproto2.Message):
    topic: "_v3__.Topic | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    weight: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    effective_revenue: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetTopicResponse", GetTopicResponse
)


@dataclass(eq=False, repr=False)
class GetTopicRewardNonceRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetTopicRewardNonceRequest", GetTopicRewardNonceRequest
)


@dataclass(eq=False, repr=False)
class GetTopicRewardNonceResponse(betterproto2.Message):
    nonce: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "GetTopicRewardNonceResponse", GetTopicRewardNonceResponse
)


@dataclass(eq=False, repr=False)
class GetTopicStakeRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "GetTopicStakeRequest", GetTopicStakeRequest
)


@dataclass(eq=False, repr=False)
class GetTopicStakeResponse(betterproto2.Message):
    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetTopicStakeResponse", GetTopicStakeResponse
)


@dataclass(eq=False, repr=False)
class GetTotalRewardToDistributeRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "GetTotalRewardToDistributeRequest",
    GetTotalRewardToDistributeRequest,
)


@dataclass(eq=False, repr=False)
class GetTotalRewardToDistributeResponse(betterproto2.Message):
    total_reward: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetTotalRewardToDistributeResponse",
    GetTotalRewardToDistributeResponse,
)


@dataclass(eq=False, repr=False)
class GetTotalStakeRequest(betterproto2.Message):
    """
    Total Stake returns the total amount of stake in the system
    """

    pass


default_message_pool.register_message(
    "emissions.v8", "GetTotalStakeRequest", GetTotalStakeRequest
)


@dataclass(eq=False, repr=False)
class GetTotalStakeResponse(betterproto2.Message):
    """
    Total Stake returns the total amount of stake in the system

    NOTE: The amount field is an Int which implements the custom method
    signatures required by gogoproto.
    """

    amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetTotalStakeResponse", GetTotalStakeResponse
)


@dataclass(eq=False, repr=False)
class GetTotalSumPreviousTopicWeightsRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "GetTotalSumPreviousTopicWeightsRequest",
    GetTotalSumPreviousTopicWeightsRequest,
)


@dataclass(eq=False, repr=False)
class GetTotalSumPreviousTopicWeightsResponse(betterproto2.Message):
    weight: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetTotalSumPreviousTopicWeightsResponse",
    GetTotalSumPreviousTopicWeightsResponse,
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledReputerNoncesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetUnfulfilledReputerNoncesRequest",
    GetUnfulfilledReputerNoncesRequest,
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledReputerNoncesResponse(betterproto2.Message):
    nonces: "_v3__.ReputerRequestNonces | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetUnfulfilledReputerNoncesResponse",
    GetUnfulfilledReputerNoncesResponse,
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledWorkerNoncesRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetUnfulfilledWorkerNoncesRequest",
    GetUnfulfilledWorkerNoncesRequest,
)


@dataclass(eq=False, repr=False)
class GetUnfulfilledWorkerNoncesResponse(betterproto2.Message):
    nonces: "_v3__.Nonces | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetUnfulfilledWorkerNoncesResponse",
    GetUnfulfilledWorkerNoncesResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerForecastScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetWorkerForecastScoresAtBlockRequest",
    GetWorkerForecastScoresAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetWorkerForecastScoresAtBlockResponse(betterproto2.Message):
    scores: "_v3__.Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetWorkerForecastScoresAtBlockResponse",
    GetWorkerForecastScoresAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerInferenceScoresAtBlockRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8",
    "GetWorkerInferenceScoresAtBlockRequest",
    GetWorkerInferenceScoresAtBlockRequest,
)


@dataclass(eq=False, repr=False)
class GetWorkerInferenceScoresAtBlockResponse(betterproto2.Message):
    scores: "_v3__.Scores | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetWorkerInferenceScoresAtBlockResponse",
    GetWorkerInferenceScoresAtBlockResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerLatestInferenceByTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    worker_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "GetWorkerLatestInferenceByTopicIdRequest",
    GetWorkerLatestInferenceByTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class GetWorkerLatestInferenceByTopicIdResponse(betterproto2.Message):
    latest_inference: "_v3__.Inference | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "GetWorkerLatestInferenceByTopicIdResponse",
    GetWorkerLatestInferenceByTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class GetWorkerNodeInfoRequest(betterproto2.Message):
    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "GetWorkerNodeInfoRequest", GetWorkerNodeInfoRequest
)


@dataclass(eq=False, repr=False)
class GetWorkerNodeInfoResponse(betterproto2.Message):
    node_info: "_v3__.OffchainNode | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "GetWorkerNodeInfoResponse", GetWorkerNodeInfoResponse
)


@dataclass(eq=False, repr=False)
class InsertReputerPayloadRequest(betterproto2.Message):
    """
    / Worker and Reputer Interface
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer_value_bundle: "_v3__.ReputerValueBundle | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "InsertReputerPayloadRequest", InsertReputerPayloadRequest
)


@dataclass(eq=False, repr=False)
class InsertReputerPayloadResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "InsertReputerPayloadResponse", InsertReputerPayloadResponse
)


@dataclass(eq=False, repr=False)
class InsertWorkerPayloadRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    worker_data_bundle: "_v3__.WorkerDataBundle | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "InsertWorkerPayloadRequest", InsertWorkerPayloadRequest
)


@dataclass(eq=False, repr=False)
class InsertWorkerPayloadResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "InsertWorkerPayloadResponse", InsertWorkerPayloadResponse
)


@dataclass(eq=False, repr=False)
class IsReputerNonceUnfulfilledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "IsReputerNonceUnfulfilledRequest", IsReputerNonceUnfulfilledRequest
)


@dataclass(eq=False, repr=False)
class IsReputerNonceUnfulfilledResponse(betterproto2.Message):
    is_reputer_nonce_unfulfilled: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "IsReputerNonceUnfulfilledResponse",
    IsReputerNonceUnfulfilledResponse,
)


@dataclass(eq=False, repr=False)
class IsReputerRegisteredInTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "IsReputerRegisteredInTopicIdRequest",
    IsReputerRegisteredInTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class IsReputerRegisteredInTopicIdResponse(betterproto2.Message):
    is_registered: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "IsReputerRegisteredInTopicIdResponse",
    IsReputerRegisteredInTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class IsTopicActiveRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "IsTopicActiveRequest", IsTopicActiveRequest
)


@dataclass(eq=False, repr=False)
class IsTopicActiveResponse(betterproto2.Message):
    is_active: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "IsTopicActiveResponse", IsTopicActiveResponse
)


@dataclass(eq=False, repr=False)
class IsTopicReputerWhitelistEnabledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "IsTopicReputerWhitelistEnabledRequest",
    IsTopicReputerWhitelistEnabledRequest,
)


@dataclass(eq=False, repr=False)
class IsTopicReputerWhitelistEnabledResponse(betterproto2.Message):
    is_topic_reputer_whitelist_enabled: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )


default_message_pool.register_message(
    "emissions.v8",
    "IsTopicReputerWhitelistEnabledResponse",
    IsTopicReputerWhitelistEnabledResponse,
)


@dataclass(eq=False, repr=False)
class IsTopicWorkerWhitelistEnabledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "IsTopicWorkerWhitelistEnabledRequest",
    IsTopicWorkerWhitelistEnabledRequest,
)


@dataclass(eq=False, repr=False)
class IsTopicWorkerWhitelistEnabledResponse(betterproto2.Message):
    is_topic_worker_whitelist_enabled: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )


default_message_pool.register_message(
    "emissions.v8",
    "IsTopicWorkerWhitelistEnabledResponse",
    IsTopicWorkerWhitelistEnabledResponse,
)


@dataclass(eq=False, repr=False)
class IsWhitelistAdminRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistAdminRequest", IsWhitelistAdminRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistAdminResponse(betterproto2.Message):
    is_admin: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistAdminResponse", IsWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalActorRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedGlobalActorRequest", IsWhitelistedGlobalActorRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalActorResponse(betterproto2.Message):
    is_whitelisted_global_actor: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedGlobalActorResponse", IsWhitelistedGlobalActorResponse
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalAdminRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedGlobalAdminRequest", IsWhitelistedGlobalAdminRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalAdminResponse(betterproto2.Message):
    is_whitelisted_global_admin: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedGlobalAdminResponse", IsWhitelistedGlobalAdminResponse
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalReputerRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "IsWhitelistedGlobalReputerRequest",
    IsWhitelistedGlobalReputerRequest,
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalReputerResponse(betterproto2.Message):
    is_whitelisted_global_reputer: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )


default_message_pool.register_message(
    "emissions.v8",
    "IsWhitelistedGlobalReputerResponse",
    IsWhitelistedGlobalReputerResponse,
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalWorkerRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedGlobalWorkerRequest", IsWhitelistedGlobalWorkerRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalWorkerResponse(betterproto2.Message):
    is_whitelisted_global_worker: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "IsWhitelistedGlobalWorkerResponse",
    IsWhitelistedGlobalWorkerResponse,
)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicCreatorRequest(betterproto2.Message):
    address: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedTopicCreatorRequest", IsWhitelistedTopicCreatorRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicCreatorResponse(betterproto2.Message):
    is_whitelisted_topic_creator: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "IsWhitelistedTopicCreatorResponse",
    IsWhitelistedTopicCreatorResponse,
)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicReputerRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedTopicReputerRequest", IsWhitelistedTopicReputerRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicReputerResponse(betterproto2.Message):
    is_whitelisted_topic_reputer: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "IsWhitelistedTopicReputerResponse",
    IsWhitelistedTopicReputerResponse,
)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicWorkerRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedTopicWorkerRequest", IsWhitelistedTopicWorkerRequest
)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicWorkerResponse(betterproto2.Message):
    is_whitelisted_topic_worker: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "IsWhitelistedTopicWorkerResponse", IsWhitelistedTopicWorkerResponse
)


@dataclass(eq=False, repr=False)
class IsWorkerNonceUnfulfilledRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "IsWorkerNonceUnfulfilledRequest", IsWorkerNonceUnfulfilledRequest
)


@dataclass(eq=False, repr=False)
class IsWorkerNonceUnfulfilledResponse(betterproto2.Message):
    is_worker_nonce_unfulfilled: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "IsWorkerNonceUnfulfilledResponse", IsWorkerNonceUnfulfilledResponse
)


@dataclass(eq=False, repr=False)
class IsWorkerRegisteredInTopicIdRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "IsWorkerRegisteredInTopicIdRequest",
    IsWorkerRegisteredInTopicIdRequest,
)


@dataclass(eq=False, repr=False)
class IsWorkerRegisteredInTopicIdResponse(betterproto2.Message):
    is_registered: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8",
    "IsWorkerRegisteredInTopicIdResponse",
    IsWorkerRegisteredInTopicIdResponse,
)


@dataclass(eq=False, repr=False)
class LibP2PKeyAndOffchainNode(betterproto2.Message):
    lib_p2p_key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    offchain_node: "_v3__.OffchainNode | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "LibP2pKeyAndOffchainNode", LibP2PKeyAndOffchainNode
)


@dataclass(eq=False, repr=False)
class OptionalParams(betterproto2.Message):
    """
    / PARAMS

    Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
    and including google themselves
    https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
    we instead use a repeated field with a single element to represent an
    optional field and if the repeated field is empty, it is considered to be the
    same as if the field was not set
    """

    version: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    max_serialized_msg_length: "list[int]" = betterproto2.field(
        2, betterproto2.TYPE_INT64, repeated=True
    )

    min_topic_weight: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    required_minimum_stake: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )

    remove_stake_delay_window: "list[int]" = betterproto2.field(
        6, betterproto2.TYPE_INT64, repeated=True
    )

    min_epoch_length: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_INT64, repeated=True
    )

    beta_entropy: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )

    learning_rate: "list[str]" = betterproto2.field(
        9, betterproto2.TYPE_STRING, repeated=True
    )

    max_gradient_threshold: "list[str]" = betterproto2.field(
        10, betterproto2.TYPE_STRING, repeated=True
    )

    min_stake_fraction: "list[str]" = betterproto2.field(
        11, betterproto2.TYPE_STRING, repeated=True
    )

    max_unfulfilled_worker_requests: "list[int]" = betterproto2.field(
        13, betterproto2.TYPE_UINT64, repeated=True
    )

    max_unfulfilled_reputer_requests: "list[int]" = betterproto2.field(
        14, betterproto2.TYPE_UINT64, repeated=True
    )

    topic_reward_stake_importance: "list[str]" = betterproto2.field(
        15, betterproto2.TYPE_STRING, repeated=True
    )

    topic_reward_fee_revenue_importance: "list[str]" = betterproto2.field(
        16, betterproto2.TYPE_STRING, repeated=True
    )

    topic_reward_alpha: "list[str]" = betterproto2.field(
        17, betterproto2.TYPE_STRING, repeated=True
    )

    task_reward_alpha: "list[str]" = betterproto2.field(
        18, betterproto2.TYPE_STRING, repeated=True
    )

    validators_vs_allora_percent_reward: "list[str]" = betterproto2.field(
        19, betterproto2.TYPE_STRING, repeated=True
    )

    max_samples_to_scale_scores: "list[int]" = betterproto2.field(
        20, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_inferers_to_reward: "list[int]" = betterproto2.field(
        21, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_forecasters_to_reward: "list[int]" = betterproto2.field(
        22, betterproto2.TYPE_UINT64, repeated=True
    )

    max_top_reputers_to_reward: "list[int]" = betterproto2.field(
        23, betterproto2.TYPE_UINT64, repeated=True
    )

    create_topic_fee: "list[str]" = betterproto2.field(
        24, betterproto2.TYPE_STRING, repeated=True
    )

    gradient_descent_max_iters: "list[int]" = betterproto2.field(
        25, betterproto2.TYPE_UINT64, repeated=True
    )

    registration_fee: "list[str]" = betterproto2.field(
        28, betterproto2.TYPE_STRING, repeated=True
    )

    default_page_limit: "list[int]" = betterproto2.field(
        29, betterproto2.TYPE_UINT64, repeated=True
    )

    max_page_limit: "list[int]" = betterproto2.field(
        30, betterproto2.TYPE_UINT64, repeated=True
    )

    min_epoch_length_record_limit: "list[int]" = betterproto2.field(
        31, betterproto2.TYPE_INT64, repeated=True
    )

    blocks_per_month: "list[int]" = betterproto2.field(
        32, betterproto2.TYPE_UINT64, repeated=True
    )

    p_reward_inference: "list[str]" = betterproto2.field(
        33, betterproto2.TYPE_STRING, repeated=True
    )

    p_reward_forecast: "list[str]" = betterproto2.field(
        34, betterproto2.TYPE_STRING, repeated=True
    )

    p_reward_reputer: "list[str]" = betterproto2.field(
        35, betterproto2.TYPE_STRING, repeated=True
    )

    c_reward_inference: "list[str]" = betterproto2.field(
        36, betterproto2.TYPE_STRING, repeated=True
    )

    c_reward_forecast: "list[str]" = betterproto2.field(
        37, betterproto2.TYPE_STRING, repeated=True
    )

    c_norm: "list[str]" = betterproto2.field(
        38, betterproto2.TYPE_STRING, repeated=True
    )

    epsilon_reputer: "list[str]" = betterproto2.field(
        40, betterproto2.TYPE_STRING, repeated=True
    )

    half_max_process_stake_removals_end_block: "list[int]" = betterproto2.field(
        42, betterproto2.TYPE_UINT64, repeated=True
    )

    data_sending_fee: "list[str]" = betterproto2.field(
        43, betterproto2.TYPE_STRING, repeated=True
    )

    epsilon_safe_div: "list[str]" = betterproto2.field(
        44, betterproto2.TYPE_STRING, repeated=True
    )

    max_elements_per_forecast: "list[int]" = betterproto2.field(
        45, betterproto2.TYPE_UINT64, repeated=True
    )

    max_active_topics_per_block: "list[int]" = betterproto2.field(
        46, betterproto2.TYPE_UINT64, repeated=True
    )

    max_string_length: "list[int]" = betterproto2.field(
        47, betterproto2.TYPE_UINT64, repeated=True
    )

    initial_regret_quantile: "list[str]" = betterproto2.field(
        48, betterproto2.TYPE_STRING, repeated=True
    )

    p_norm_safe_div: "list[str]" = betterproto2.field(
        49, betterproto2.TYPE_STRING, repeated=True
    )

    global_whitelist_enabled: "list[bool]" = betterproto2.field(
        50, betterproto2.TYPE_BOOL, repeated=True
    )

    topic_creator_whitelist_enabled: "list[bool]" = betterproto2.field(
        51, betterproto2.TYPE_BOOL, repeated=True
    )

    min_experienced_worker_regrets: "list[int]" = betterproto2.field(
        52, betterproto2.TYPE_UINT64, repeated=True
    )

    inference_outlier_detection_threshold: "list[str]" = betterproto2.field(
        53, betterproto2.TYPE_STRING, repeated=True
    )

    inference_outlier_detection_alpha: "list[str]" = betterproto2.field(
        54, betterproto2.TYPE_STRING, repeated=True
    )

    lambda_initial_score: "list[str]" = betterproto2.field(
        55, betterproto2.TYPE_STRING, repeated=True
    )

    global_worker_whitelist_enabled: "list[bool]" = betterproto2.field(
        56, betterproto2.TYPE_BOOL, repeated=True
    )

    global_reputer_whitelist_enabled: "list[bool]" = betterproto2.field(
        57, betterproto2.TYPE_BOOL, repeated=True
    )

    global_admin_whitelist_appended: "list[bool]" = betterproto2.field(
        58, betterproto2.TYPE_BOOL, repeated=True
    )

    max_whitelist_input_array_length: "list[int]" = betterproto2.field(
        59, betterproto2.TYPE_UINT64, repeated=True
    )

    min_weight_threshold_for_stdnorm: "list[str]" = betterproto2.field(
        60, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message("emissions.v8", "OptionalParams", OptionalParams)


@dataclass(eq=False, repr=False)
class Params(betterproto2.Message):
    """
    Params defines the parameters of the module.
    """

    version: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    version of the protocol should be in lockstep with
    """

    max_serialized_msg_length: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    github release tag version

    max length of input data for msg and query server calls
    """

    min_topic_weight: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    total unmet demand for a topic < this => don't run inference
    """

    required_minimum_stake: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    solicatation or weight-adjustment

    minimum amount of tokens to send to stake as a reputer or worker
    """

    remove_stake_delay_window: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)
    """
    how long to wait (blocks) before allowed to remove stake
    """

    min_epoch_length: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)
    """
    fastest allowable topic epoch and cadence of a
    """

    beta_entropy: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    repeating inference request

    controls resilience of reward payouts against copycat workers
    """

    learning_rate: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)
    """
    speed of gradient descent
    """

    max_gradient_threshold: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    gradient descent stops when gradient falls below this
    """

    min_stake_fraction: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)
    """
    minimum fraction of stake to listen to when setting consensus listening
    """

    max_unfulfilled_worker_requests: "int" = betterproto2.field(
        13, betterproto2.TYPE_UINT64
    )
    """
    coefficients

    max num worker request nonces to keep track of per topic
    """

    max_unfulfilled_reputer_requests: "int" = betterproto2.field(
        14, betterproto2.TYPE_UINT64
    )
    """
    max num reputer request nonces to keep track of per topic
    """

    topic_reward_stake_importance: "str" = betterproto2.field(
        15, betterproto2.TYPE_STRING
    )
    """
    The exponent μ represents the importance of stake in the reward of a
    """

    topic_reward_fee_revenue_importance: "str" = betterproto2.field(
        16, betterproto2.TYPE_STRING
    )
    """
    topic and has a fiducial value of 0.5

    The exponent ν represents the importance of fee revenue in the reward of
    """

    topic_reward_alpha: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)
    """
    a topic and has a fiducial value of 0.5

    global exponential moving average parameter. Fiducial value of 0.9375 on
    """

    task_reward_alpha: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)
    """
    a monthly timescale, 0.5 for weekly updates

    global exponential moving average parameter. Fiducial value of 0.1 used
    """

    validators_vs_allora_percent_reward: "str" = betterproto2.field(
        19, betterproto2.TYPE_STRING
    )
    """
    to calculate ~U_ij, ~V_ik, ~W_im

    percent of total supply rewarded to cosmos network validators, rest goes
    """

    max_samples_to_scale_scores: "int" = betterproto2.field(
        20, betterproto2.TYPE_UINT64
    )
    """
    to allora reputers workers etc

    number of scores to use for standard deviation calculation
    """

    max_top_inferers_to_reward: "int" = betterproto2.field(21, betterproto2.TYPE_UINT64)
    """
    max number of top inferers by score to reward
    """

    max_top_forecasters_to_reward: "int" = betterproto2.field(
        22, betterproto2.TYPE_UINT64
    )
    """
    max number of top forecasters by score to reward
    """

    max_top_reputers_to_reward: "int" = betterproto2.field(23, betterproto2.TYPE_UINT64)
    """
    max number of top reputers by score to reward
    """

    create_topic_fee: "str" = betterproto2.field(24, betterproto2.TYPE_STRING)
    """
    topic registration fee
    """

    gradient_descent_max_iters: "int" = betterproto2.field(25, betterproto2.TYPE_UINT64)
    """
    max number of gradient descent iterations
    """

    registration_fee: "str" = betterproto2.field(28, betterproto2.TYPE_STRING)
    """
    registration fee for reputer or worker
    """

    default_page_limit: "int" = betterproto2.field(29, betterproto2.TYPE_UINT64)
    """
    default limit for pagination
    """

    max_page_limit: "int" = betterproto2.field(30, betterproto2.TYPE_UINT64)
    """
    max limit for pagination
    """

    min_epoch_length_record_limit: "int" = betterproto2.field(
        31, betterproto2.TYPE_INT64
    )
    """
    min number of epochs to keep network losses, reputer losses, inferences,
    forecasts
    """

    blocks_per_month: "int" = betterproto2.field(32, betterproto2.TYPE_UINT64)
    """
    block emission rate in number of blocks expected per month
    """

    p_reward_inference: "str" = betterproto2.field(33, betterproto2.TYPE_STRING)

    p_reward_forecast: "str" = betterproto2.field(34, betterproto2.TYPE_STRING)

    p_reward_reputer: "str" = betterproto2.field(35, betterproto2.TYPE_STRING)

    c_reward_inference: "str" = betterproto2.field(36, betterproto2.TYPE_STRING)

    c_reward_forecast: "str" = betterproto2.field(37, betterproto2.TYPE_STRING)

    c_norm: "str" = betterproto2.field(38, betterproto2.TYPE_STRING)

    epsilon_reputer: "str" = betterproto2.field(40, betterproto2.TYPE_STRING)
    """
    a small tolerance quantity used to cap reputer scores at infinitesimally
    """

    half_max_process_stake_removals_end_block: "int" = betterproto2.field(
        42, betterproto2.TYPE_UINT64
    )
    """
    close proximities

    max amount of stake removals to process in an ABCI end block.
    """

    epsilon_safe_div: "str" = betterproto2.field(43, betterproto2.TYPE_STRING)
    """
    Applied twice once for stakeRemovals and once for
    DelegateStakeRemovals, so actual max is this number times two
    """

    data_sending_fee: "str" = betterproto2.field(44, betterproto2.TYPE_STRING)
    """
    / a small tolerance quantity used to cap division by zero
    """

    max_elements_per_forecast: "int" = betterproto2.field(45, betterproto2.TYPE_UINT64)
    """
    payload sending fee for reputer or worker

    max number of top forecasters by score to reward
    """

    max_active_topics_per_block: "int" = betterproto2.field(
        46, betterproto2.TYPE_UINT64
    )
    """
    max number of active topics per block
    """

    max_string_length: "int" = betterproto2.field(47, betterproto2.TYPE_UINT64)
    """
    max permittible length of strings uploaded to the chain
    """

    initial_regret_quantile: "str" = betterproto2.field(48, betterproto2.TYPE_STRING)

    p_norm_safe_div: "str" = betterproto2.field(49, betterproto2.TYPE_STRING)

    global_whitelist_enabled: "bool" = betterproto2.field(50, betterproto2.TYPE_BOOL)
    """
    global whitelist enabled => all global whitelisted actors can create topics
    """

    topic_creator_whitelist_enabled: "bool" = betterproto2.field(
        51, betterproto2.TYPE_BOOL
    )
    """
    and participate in all topics as workers and reputers

    topic creator whitelist enabled => only topic creator whitelisted actors can create topics
    """

    min_experienced_worker_regrets: "int" = betterproto2.field(
        52, betterproto2.TYPE_UINT64
    )
    """
    minimum number of experienced workers required to use their regrets
    """

    inference_outlier_detection_threshold: "str" = betterproto2.field(
        53, betterproto2.TYPE_STRING
    )
    """
    for calculating the topic initial regret
    """

    inference_outlier_detection_alpha: "str" = betterproto2.field(
        54, betterproto2.TYPE_STRING
    )

    lambda_initial_score: "str" = betterproto2.field(55, betterproto2.TYPE_STRING)

    global_worker_whitelist_enabled: "bool" = betterproto2.field(
        56, betterproto2.TYPE_BOOL
    )

    global_reputer_whitelist_enabled: "bool" = betterproto2.field(
        57, betterproto2.TYPE_BOOL
    )

    global_admin_whitelist_appended: "bool" = betterproto2.field(
        58, betterproto2.TYPE_BOOL
    )

    max_whitelist_input_array_length: "int" = betterproto2.field(
        59, betterproto2.TYPE_UINT64
    )

    min_weight_threshold_for_stdnorm: "str" = betterproto2.field(
        60, betterproto2.TYPE_STRING
    )


default_message_pool.register_message("emissions.v8", "Params", Params)


@dataclass(eq=False, repr=False)
class RegisterRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)

    owner: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    is_reputer: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "RegisterRequest", RegisterRequest
)


@dataclass(eq=False, repr=False)
class RegisterResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "RegisterResponse", RegisterResponse
)


@dataclass(eq=False, repr=False)
class RemoveDelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "RemoveDelegateStakeRequest", RemoveDelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class RemoveDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "RemoveDelegateStakeResponse", RemoveDelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalAdminWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromGlobalAdminWhitelistRequest",
    RemoveFromGlobalAdminWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalAdminWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromGlobalAdminWhitelistResponse",
    RemoveFromGlobalAdminWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromGlobalReputerWhitelistRequest",
    RemoveFromGlobalReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromGlobalReputerWhitelistResponse",
    RemoveFromGlobalReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "RemoveFromGlobalWhitelistRequest", RemoveFromGlobalWhitelistRequest
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromGlobalWhitelistResponse",
    RemoveFromGlobalWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromGlobalWorkerWhitelistRequest",
    RemoveFromGlobalWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromGlobalWorkerWhitelistResponse",
    RemoveFromGlobalWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class RemoveFromTopicCreatorWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromTopicCreatorWhitelistRequest",
    RemoveFromTopicCreatorWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class RemoveFromTopicCreatorWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromTopicCreatorWhitelistResponse",
    RemoveFromTopicCreatorWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class RemoveFromTopicReputerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromTopicReputerWhitelistRequest",
    RemoveFromTopicReputerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class RemoveFromTopicReputerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromTopicReputerWhitelistResponse",
    RemoveFromTopicReputerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class RemoveFromTopicWorkerWhitelistRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromTopicWorkerWhitelistRequest",
    RemoveFromTopicWorkerWhitelistRequest,
)


@dataclass(eq=False, repr=False)
class RemoveFromTopicWorkerWhitelistResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8",
    "RemoveFromTopicWorkerWhitelistResponse",
    RemoveFromTopicWorkerWhitelistResponse,
)


@dataclass(eq=False, repr=False)
class RemoveFromWhitelistAdminRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "RemoveFromWhitelistAdminRequest", RemoveFromWhitelistAdminRequest
)


@dataclass(eq=False, repr=False)
class RemoveFromWhitelistAdminResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "RemoveFromWhitelistAdminResponse", RemoveFromWhitelistAdminResponse
)


@dataclass(eq=False, repr=False)
class RemoveRegistrationRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    is_reputer: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "RemoveRegistrationRequest", RemoveRegistrationRequest
)


@dataclass(eq=False, repr=False)
class RemoveRegistrationResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "RemoveRegistrationResponse", RemoveRegistrationResponse
)


@dataclass(eq=False, repr=False)
class RemoveStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "RemoveStakeRequest", RemoveStakeRequest
)


@dataclass(eq=False, repr=False)
class RemoveStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "RemoveStakeResponse", RemoveStakeResponse
)


@dataclass(eq=False, repr=False)
class RewardDelegateStakeRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    topic_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "RewardDelegateStakeRequest", RewardDelegateStakeRequest
)


@dataclass(eq=False, repr=False)
class RewardDelegateStakeResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "RewardDelegateStakeResponse", RewardDelegateStakeResponse
)


@dataclass(eq=False, repr=False)
class TopicAndActorId(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "TopicAndActorId", TopicAndActorId
)


@dataclass(eq=False, repr=False)
class TopicExistsRequest(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "TopicExistsRequest", TopicExistsRequest
)


@dataclass(eq=False, repr=False)
class TopicExistsResponse(betterproto2.Message):
    exists: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "emissions.v8", "TopicExistsResponse", TopicExistsResponse
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdActorIdTimeStampedValue(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id1: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    actor_id2: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    timestamped_value: "_v3__.TimestampedValue | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "TopicIdActorIdActorIdTimeStampedValue",
    TopicIdActorIdActorIdTimeStampedValue,
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdDec(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    dec: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "TopicIdActorIdDec", TopicIdActorIdDec
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdForecast(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    forecast: "_v3__.Forecast | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdActorIdForecast", TopicIdActorIdForecast
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInference(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    inference: "_v3__.Inference | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdActorIdInference", TopicIdActorIdInference
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInt(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    int: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "emissions.v8", "TopicIdActorIdInt", TopicIdActorIdInt
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdListeningCoefficient(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    listening_coefficient: "_v3__.ListeningCoefficient | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "TopicIdActorIdListeningCoefficient",
    TopicIdActorIdListeningCoefficient,
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdScore(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    score: "_v3__.Score | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdActorIdScore", TopicIdActorIdScore
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdTimeStampedValue(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    timestamped_value: "_v3__.TimestampedValue | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdActorIdTimeStampedValue", TopicIdActorIdTimeStampedValue
)


@dataclass(eq=False, repr=False)
class TopicIdActorIdUint64(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    actor_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    uint64: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "emissions.v8", "TopicIdActorIdUint64", TopicIdActorIdUint64
)


@dataclass(eq=False, repr=False)
class TopicIdAndBlockHeight(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message(
    "emissions.v8", "TopicIdAndBlockHeight", TopicIdAndBlockHeight
)


@dataclass(eq=False, repr=False)
class TopicIdAndDec(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    dec: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v8", "TopicIdAndDec", TopicIdAndDec)


@dataclass(eq=False, repr=False)
class TopicIdAndInt(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    int: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("emissions.v8", "TopicIdAndInt", TopicIdAndInt)


@dataclass(eq=False, repr=False)
class TopicIdAndNonces(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    nonces: "_v3__.Nonces | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdAndNonces", TopicIdAndNonces
)


@dataclass(eq=False, repr=False)
class TopicIdAndReputerRequestNonces(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer_request_nonces: "_v3__.ReputerRequestNonces | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdAndReputerRequestNonces", TopicIdAndReputerRequestNonces
)


@dataclass(eq=False, repr=False)
class TopicIdAndTopic(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    topic: "_v3__.Topic | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdAndTopic", TopicIdAndTopic
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightForecasts(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    forecasts: "_v3__.Forecasts | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdBlockHeightForecasts", TopicIdBlockHeightForecasts
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightInferences(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    inferences: "_v3__.Inferences | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdBlockHeightInferences", TopicIdBlockHeightInferences
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightReputerValueBundles(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    reputer_value_bundles: "_v3__.ReputerValueBundles | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "TopicIdBlockHeightReputerValueBundles",
    TopicIdBlockHeightReputerValueBundles,
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightScores(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    scores: "_v3__.Scores | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdBlockHeightScores", TopicIdBlockHeightScores
)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightValueBundles(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    value_bundle: "_v3__.ValueBundle | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdBlockHeightValueBundles", TopicIdBlockHeightValueBundles
)


@dataclass(eq=False, repr=False)
class TopicIdDelegatorReputerDelegatorInfo(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    delegator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    reputer: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    delegator_info: "_v3__.DelegatorInfo | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8",
    "TopicIdDelegatorReputerDelegatorInfo",
    TopicIdDelegatorReputerDelegatorInfo,
)


@dataclass(eq=False, repr=False)
class TopicIdReputerReputerValueBundle(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    reputer: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    reputer_value_bundle: "_v3__.ReputerValueBundle | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdReputerReputerValueBundle", TopicIdReputerReputerValueBundle
)


@dataclass(eq=False, repr=False)
class TopicIdTimestampedActorNonce(betterproto2.Message):
    topic_id: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    timestamped_actor_nonce: "_v3__.TimestampedActorNonce | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "TopicIdTimestampedActorNonce", TopicIdTimestampedActorNonce
)


@dataclass(eq=False, repr=False)
class UpdateParamsRequest(betterproto2.Message):
    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    params: "OptionalParams | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "emissions.v8", "UpdateParamsRequest", UpdateParamsRequest
)


@dataclass(eq=False, repr=False)
class UpdateParamsResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "emissions.v8", "UpdateParamsResponse", UpdateParamsResponse
)


class MsgServiceStub:
    """
    Msg defines the module Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "UpdateParamsRequest") -> "UpdateParamsResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/UpdateParams",
            UpdateParamsRequest.SerializeToString,
            UpdateParamsResponse.FromString,
        )(message)

    def create_new_topic(
        self, message: "CreateNewTopicRequest"
    ) -> "CreateNewTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/CreateNewTopic",
            CreateNewTopicRequest.SerializeToString,
            CreateNewTopicResponse.FromString,
        )(message)

    def register(self, message: "RegisterRequest") -> "RegisterResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/Register",
            RegisterRequest.SerializeToString,
            RegisterResponse.FromString,
        )(message)

    def remove_registration(
        self, message: "RemoveRegistrationRequest"
    ) -> "RemoveRegistrationResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveRegistration",
            RemoveRegistrationRequest.SerializeToString,
            RemoveRegistrationResponse.FromString,
        )(message)

    def add_stake(self, message: "AddStakeRequest") -> "AddStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddStake",
            AddStakeRequest.SerializeToString,
            AddStakeResponse.FromString,
        )(message)

    def remove_stake(self, message: "RemoveStakeRequest") -> "RemoveStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveStake",
            RemoveStakeRequest.SerializeToString,
            RemoveStakeResponse.FromString,
        )(message)

    def cancel_remove_stake(
        self, message: "CancelRemoveStakeRequest"
    ) -> "CancelRemoveStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/CancelRemoveStake",
            CancelRemoveStakeRequest.SerializeToString,
            CancelRemoveStakeResponse.FromString,
        )(message)

    def delegate_stake(
        self, message: "DelegateStakeRequest"
    ) -> "DelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/DelegateStake",
            DelegateStakeRequest.SerializeToString,
            DelegateStakeResponse.FromString,
        )(message)

    def reward_delegate_stake(
        self, message: "RewardDelegateStakeRequest"
    ) -> "RewardDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RewardDelegateStake",
            RewardDelegateStakeRequest.SerializeToString,
            RewardDelegateStakeResponse.FromString,
        )(message)

    def remove_delegate_stake(
        self, message: "RemoveDelegateStakeRequest"
    ) -> "RemoveDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveDelegateStake",
            RemoveDelegateStakeRequest.SerializeToString,
            RemoveDelegateStakeResponse.FromString,
        )(message)

    def cancel_remove_delegate_stake(
        self, message: "CancelRemoveDelegateStakeRequest"
    ) -> "CancelRemoveDelegateStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/CancelRemoveDelegateStake",
            CancelRemoveDelegateStakeRequest.SerializeToString,
            CancelRemoveDelegateStakeResponse.FromString,
        )(message)

    def fund_topic(self, message: "FundTopicRequest") -> "FundTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/FundTopic",
            FundTopicRequest.SerializeToString,
            FundTopicResponse.FromString,
        )(message)

    def add_to_whitelist_admin(
        self, message: "AddToWhitelistAdminRequest"
    ) -> "AddToWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToWhitelistAdmin",
            AddToWhitelistAdminRequest.SerializeToString,
            AddToWhitelistAdminResponse.FromString,
        )(message)

    def remove_from_whitelist_admin(
        self, message: "RemoveFromWhitelistAdminRequest"
    ) -> "RemoveFromWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromWhitelistAdmin",
            RemoveFromWhitelistAdminRequest.SerializeToString,
            RemoveFromWhitelistAdminResponse.FromString,
        )(message)

    def insert_worker_payload(
        self, message: "InsertWorkerPayloadRequest"
    ) -> "InsertWorkerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/InsertWorkerPayload",
            InsertWorkerPayloadRequest.SerializeToString,
            InsertWorkerPayloadResponse.FromString,
        )(message)

    def insert_reputer_payload(
        self, message: "InsertReputerPayloadRequest"
    ) -> "InsertReputerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/InsertReputerPayload",
            InsertReputerPayloadRequest.SerializeToString,
            InsertReputerPayloadResponse.FromString,
        )(message)

    def add_to_global_whitelist(
        self, message: "AddToGlobalWhitelistRequest"
    ) -> "AddToGlobalWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToGlobalWhitelist",
            AddToGlobalWhitelistRequest.SerializeToString,
            AddToGlobalWhitelistResponse.FromString,
        )(message)

    def remove_from_global_whitelist(
        self, message: "RemoveFromGlobalWhitelistRequest"
    ) -> "RemoveFromGlobalWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalWhitelist",
            RemoveFromGlobalWhitelistRequest.SerializeToString,
            RemoveFromGlobalWhitelistResponse.FromString,
        )(message)

    def add_to_global_worker_whitelist(
        self, message: "AddToGlobalWorkerWhitelistRequest"
    ) -> "AddToGlobalWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToGlobalWorkerWhitelist",
            AddToGlobalWorkerWhitelistRequest.SerializeToString,
            AddToGlobalWorkerWhitelistResponse.FromString,
        )(message)

    def remove_from_global_worker_whitelist(
        self, message: "RemoveFromGlobalWorkerWhitelistRequest"
    ) -> "RemoveFromGlobalWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalWorkerWhitelist",
            RemoveFromGlobalWorkerWhitelistRequest.SerializeToString,
            RemoveFromGlobalWorkerWhitelistResponse.FromString,
        )(message)

    def add_to_global_reputer_whitelist(
        self, message: "AddToGlobalReputerWhitelistRequest"
    ) -> "AddToGlobalReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToGlobalReputerWhitelist",
            AddToGlobalReputerWhitelistRequest.SerializeToString,
            AddToGlobalReputerWhitelistResponse.FromString,
        )(message)

    def remove_from_global_reputer_whitelist(
        self, message: "RemoveFromGlobalReputerWhitelistRequest"
    ) -> "RemoveFromGlobalReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalReputerWhitelist",
            RemoveFromGlobalReputerWhitelistRequest.SerializeToString,
            RemoveFromGlobalReputerWhitelistResponse.FromString,
        )(message)

    def add_to_global_admin_whitelist(
        self, message: "AddToGlobalAdminWhitelistRequest"
    ) -> "AddToGlobalAdminWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToGlobalAdminWhitelist",
            AddToGlobalAdminWhitelistRequest.SerializeToString,
            AddToGlobalAdminWhitelistResponse.FromString,
        )(message)

    def remove_from_global_admin_whitelist(
        self, message: "RemoveFromGlobalAdminWhitelistRequest"
    ) -> "RemoveFromGlobalAdminWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalAdminWhitelist",
            RemoveFromGlobalAdminWhitelistRequest.SerializeToString,
            RemoveFromGlobalAdminWhitelistResponse.FromString,
        )(message)

    def bulk_add_to_global_worker_whitelist(
        self, message: "BulkAddToGlobalWorkerWhitelistRequest"
    ) -> "BulkAddToGlobalWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkAddToGlobalWorkerWhitelist",
            BulkAddToGlobalWorkerWhitelistRequest.SerializeToString,
            BulkAddToGlobalWorkerWhitelistResponse.FromString,
        )(message)

    def bulk_remove_from_global_worker_whitelist(
        self, message: "BulkRemoveFromGlobalWorkerWhitelistRequest"
    ) -> "BulkRemoveFromGlobalWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromGlobalWorkerWhitelist",
            BulkRemoveFromGlobalWorkerWhitelistRequest.SerializeToString,
            BulkRemoveFromGlobalWorkerWhitelistResponse.FromString,
        )(message)

    def bulk_add_to_global_reputer_whitelist(
        self, message: "BulkAddToGlobalReputerWhitelistRequest"
    ) -> "BulkAddToGlobalReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkAddToGlobalReputerWhitelist",
            BulkAddToGlobalReputerWhitelistRequest.SerializeToString,
            BulkAddToGlobalReputerWhitelistResponse.FromString,
        )(message)

    def bulk_remove_from_global_reputer_whitelist(
        self, message: "BulkRemoveFromGlobalReputerWhitelistRequest"
    ) -> "BulkRemoveFromGlobalReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromGlobalReputerWhitelist",
            BulkRemoveFromGlobalReputerWhitelistRequest.SerializeToString,
            BulkRemoveFromGlobalReputerWhitelistResponse.FromString,
        )(message)

    def bulk_add_to_topic_worker_whitelist(
        self, message: "BulkAddToTopicWorkerWhitelistRequest"
    ) -> "BulkAddToTopicWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkAddToTopicWorkerWhitelist",
            BulkAddToTopicWorkerWhitelistRequest.SerializeToString,
            BulkAddToTopicWorkerWhitelistResponse.FromString,
        )(message)

    def bulk_remove_from_topic_worker_whitelist(
        self, message: "BulkRemoveFromTopicWorkerWhitelistRequest"
    ) -> "BulkRemoveFromTopicWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromTopicWorkerWhitelist",
            BulkRemoveFromTopicWorkerWhitelistRequest.SerializeToString,
            BulkRemoveFromTopicWorkerWhitelistResponse.FromString,
        )(message)

    def bulk_add_to_topic_reputer_whitelist(
        self, message: "BulkAddToTopicReputerWhitelistRequest"
    ) -> "BulkAddToTopicReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkAddToTopicReputerWhitelist",
            BulkAddToTopicReputerWhitelistRequest.SerializeToString,
            BulkAddToTopicReputerWhitelistResponse.FromString,
        )(message)

    def bulk_remove_from_topic_reputer_whitelist(
        self, message: "BulkRemoveFromTopicReputerWhitelistRequest"
    ) -> "BulkRemoveFromTopicReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromTopicReputerWhitelist",
            BulkRemoveFromTopicReputerWhitelistRequest.SerializeToString,
            BulkRemoveFromTopicReputerWhitelistResponse.FromString,
        )(message)

    def enable_topic_worker_whitelist(
        self, message: "EnableTopicWorkerWhitelistRequest"
    ) -> "EnableTopicWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/EnableTopicWorkerWhitelist",
            EnableTopicWorkerWhitelistRequest.SerializeToString,
            EnableTopicWorkerWhitelistResponse.FromString,
        )(message)

    def disable_topic_worker_whitelist(
        self, message: "DisableTopicWorkerWhitelistRequest"
    ) -> "DisableTopicWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/DisableTopicWorkerWhitelist",
            DisableTopicWorkerWhitelistRequest.SerializeToString,
            DisableTopicWorkerWhitelistResponse.FromString,
        )(message)

    def enable_topic_reputer_whitelist(
        self, message: "EnableTopicReputerWhitelistRequest"
    ) -> "EnableTopicReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/EnableTopicReputerWhitelist",
            EnableTopicReputerWhitelistRequest.SerializeToString,
            EnableTopicReputerWhitelistResponse.FromString,
        )(message)

    def disable_topic_reputer_whitelist(
        self, message: "DisableTopicReputerWhitelistRequest"
    ) -> "DisableTopicReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/DisableTopicReputerWhitelist",
            DisableTopicReputerWhitelistRequest.SerializeToString,
            DisableTopicReputerWhitelistResponse.FromString,
        )(message)

    def add_to_topic_creator_whitelist(
        self, message: "AddToTopicCreatorWhitelistRequest"
    ) -> "AddToTopicCreatorWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToTopicCreatorWhitelist",
            AddToTopicCreatorWhitelistRequest.SerializeToString,
            AddToTopicCreatorWhitelistResponse.FromString,
        )(message)

    def remove_from_topic_creator_whitelist(
        self, message: "RemoveFromTopicCreatorWhitelistRequest"
    ) -> "RemoveFromTopicCreatorWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromTopicCreatorWhitelist",
            RemoveFromTopicCreatorWhitelistRequest.SerializeToString,
            RemoveFromTopicCreatorWhitelistResponse.FromString,
        )(message)

    def add_to_topic_worker_whitelist(
        self, message: "AddToTopicWorkerWhitelistRequest"
    ) -> "AddToTopicWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToTopicWorkerWhitelist",
            AddToTopicWorkerWhitelistRequest.SerializeToString,
            AddToTopicWorkerWhitelistResponse.FromString,
        )(message)

    def remove_from_topic_worker_whitelist(
        self, message: "RemoveFromTopicWorkerWhitelistRequest"
    ) -> "RemoveFromTopicWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromTopicWorkerWhitelist",
            RemoveFromTopicWorkerWhitelistRequest.SerializeToString,
            RemoveFromTopicWorkerWhitelistResponse.FromString,
        )(message)

    def add_to_topic_reputer_whitelist(
        self, message: "AddToTopicReputerWhitelistRequest"
    ) -> "AddToTopicReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/AddToTopicReputerWhitelist",
            AddToTopicReputerWhitelistRequest.SerializeToString,
            AddToTopicReputerWhitelistResponse.FromString,
        )(message)

    def remove_from_topic_reputer_whitelist(
        self, message: "RemoveFromTopicReputerWhitelistRequest"
    ) -> "RemoveFromTopicReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.MsgService/RemoveFromTopicReputerWhitelist",
            RemoveFromTopicReputerWhitelistRequest.SerializeToString,
            RemoveFromTopicReputerWhitelistResponse.FromString,
        )(message)


class MsgServiceAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the module Msg service.
    """

    async def update_params(
        self,
        message: "UpdateParamsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateParamsResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/UpdateParams",
            message,
            UpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_new_topic(
        self,
        message: "CreateNewTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateNewTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/CreateNewTopic",
            message,
            CreateNewTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register(
        self,
        message: "RegisterRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RegisterResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/Register",
            message,
            RegisterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_registration(
        self,
        message: "RemoveRegistrationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveRegistrationResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveRegistration",
            message,
            RemoveRegistrationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_stake(
        self,
        message: "AddStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddStake",
            message,
            AddStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_stake(
        self,
        message: "RemoveStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveStake",
            message,
            RemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_stake(
        self,
        message: "CancelRemoveStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CancelRemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/CancelRemoveStake",
            message,
            CancelRemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegate_stake(
        self,
        message: "DelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/DelegateStake",
            message,
            DelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reward_delegate_stake(
        self,
        message: "RewardDelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RewardDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RewardDelegateStake",
            message,
            RewardDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_delegate_stake(
        self,
        message: "RemoveDelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveDelegateStake",
            message,
            RemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_delegate_stake(
        self,
        message: "CancelRemoveDelegateStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CancelRemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/CancelRemoveDelegateStake",
            message,
            CancelRemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_topic(
        self,
        message: "FundTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "FundTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/FundTopic",
            message,
            FundTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_whitelist_admin(
        self,
        message: "AddToWhitelistAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToWhitelistAdmin",
            message,
            AddToWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_whitelist_admin(
        self,
        message: "RemoveFromWhitelistAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromWhitelistAdmin",
            message,
            RemoveFromWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_worker_payload(
        self,
        message: "InsertWorkerPayloadRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "InsertWorkerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/InsertWorkerPayload",
            message,
            InsertWorkerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_reputer_payload(
        self,
        message: "InsertReputerPayloadRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "InsertReputerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/InsertReputerPayload",
            message,
            InsertReputerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_global_whitelist(
        self,
        message: "AddToGlobalWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToGlobalWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToGlobalWhitelist",
            message,
            AddToGlobalWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_global_whitelist(
        self,
        message: "RemoveFromGlobalWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromGlobalWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalWhitelist",
            message,
            RemoveFromGlobalWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_global_worker_whitelist(
        self,
        message: "AddToGlobalWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToGlobalWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToGlobalWorkerWhitelist",
            message,
            AddToGlobalWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_global_worker_whitelist(
        self,
        message: "RemoveFromGlobalWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromGlobalWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalWorkerWhitelist",
            message,
            RemoveFromGlobalWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_global_reputer_whitelist(
        self,
        message: "AddToGlobalReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToGlobalReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToGlobalReputerWhitelist",
            message,
            AddToGlobalReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_global_reputer_whitelist(
        self,
        message: "RemoveFromGlobalReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromGlobalReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalReputerWhitelist",
            message,
            RemoveFromGlobalReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_global_admin_whitelist(
        self,
        message: "AddToGlobalAdminWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToGlobalAdminWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToGlobalAdminWhitelist",
            message,
            AddToGlobalAdminWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_global_admin_whitelist(
        self,
        message: "RemoveFromGlobalAdminWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromGlobalAdminWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromGlobalAdminWhitelist",
            message,
            RemoveFromGlobalAdminWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_add_to_global_worker_whitelist(
        self,
        message: "BulkAddToGlobalWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkAddToGlobalWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkAddToGlobalWorkerWhitelist",
            message,
            BulkAddToGlobalWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_remove_from_global_worker_whitelist(
        self,
        message: "BulkRemoveFromGlobalWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkRemoveFromGlobalWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromGlobalWorkerWhitelist",
            message,
            BulkRemoveFromGlobalWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_add_to_global_reputer_whitelist(
        self,
        message: "BulkAddToGlobalReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkAddToGlobalReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkAddToGlobalReputerWhitelist",
            message,
            BulkAddToGlobalReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_remove_from_global_reputer_whitelist(
        self,
        message: "BulkRemoveFromGlobalReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkRemoveFromGlobalReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromGlobalReputerWhitelist",
            message,
            BulkRemoveFromGlobalReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_add_to_topic_worker_whitelist(
        self,
        message: "BulkAddToTopicWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkAddToTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkAddToTopicWorkerWhitelist",
            message,
            BulkAddToTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_remove_from_topic_worker_whitelist(
        self,
        message: "BulkRemoveFromTopicWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkRemoveFromTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromTopicWorkerWhitelist",
            message,
            BulkRemoveFromTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_add_to_topic_reputer_whitelist(
        self,
        message: "BulkAddToTopicReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkAddToTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkAddToTopicReputerWhitelist",
            message,
            BulkAddToTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_remove_from_topic_reputer_whitelist(
        self,
        message: "BulkRemoveFromTopicReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BulkRemoveFromTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/BulkRemoveFromTopicReputerWhitelist",
            message,
            BulkRemoveFromTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enable_topic_worker_whitelist(
        self,
        message: "EnableTopicWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "EnableTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/EnableTopicWorkerWhitelist",
            message,
            EnableTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disable_topic_worker_whitelist(
        self,
        message: "DisableTopicWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DisableTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/DisableTopicWorkerWhitelist",
            message,
            DisableTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enable_topic_reputer_whitelist(
        self,
        message: "EnableTopicReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "EnableTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/EnableTopicReputerWhitelist",
            message,
            EnableTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disable_topic_reputer_whitelist(
        self,
        message: "DisableTopicReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DisableTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/DisableTopicReputerWhitelist",
            message,
            DisableTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_topic_creator_whitelist(
        self,
        message: "AddToTopicCreatorWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToTopicCreatorWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToTopicCreatorWhitelist",
            message,
            AddToTopicCreatorWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_topic_creator_whitelist(
        self,
        message: "RemoveFromTopicCreatorWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromTopicCreatorWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromTopicCreatorWhitelist",
            message,
            RemoveFromTopicCreatorWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_topic_worker_whitelist(
        self,
        message: "AddToTopicWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToTopicWorkerWhitelist",
            message,
            AddToTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_topic_worker_whitelist(
        self,
        message: "RemoveFromTopicWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromTopicWorkerWhitelist",
            message,
            RemoveFromTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_topic_reputer_whitelist(
        self,
        message: "AddToTopicReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddToTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/AddToTopicReputerWhitelist",
            message,
            AddToTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_topic_reputer_whitelist(
        self,
        message: "RemoveFromTopicReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RemoveFromTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.MsgService/RemoveFromTopicReputerWhitelist",
            message,
            RemoveFromTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryServiceStub:
    """
    Msg defines the module Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_params(
        self, message: "GetParamsRequest | None" = None
    ) -> "GetParamsResponse":
        """
        Params returns the module parameters.
        """

        if message is None:
            message = GetParamsRequest()

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetParams",
            GetParamsRequest.SerializeToString,
            GetParamsResponse.FromString,
        )(message)

    def get_next_topic_id(
        self, message: "GetNextTopicIdRequest | None" = None
    ) -> "GetNextTopicIdResponse":
        if message is None:
            message = GetNextTopicIdRequest()

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetNextTopicId",
            GetNextTopicIdRequest.SerializeToString,
            GetNextTopicIdResponse.FromString,
        )(message)

    def get_topic(self, message: "GetTopicRequest") -> "GetTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopic",
            GetTopicRequest.SerializeToString,
            GetTopicResponse.FromString,
        )(message)

    def get_worker_latest_inference_by_topic_id(
        self, message: "GetWorkerLatestInferenceByTopicIdRequest"
    ) -> "GetWorkerLatestInferenceByTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetWorkerLatestInferenceByTopicId",
            GetWorkerLatestInferenceByTopicIdRequest.SerializeToString,
            GetWorkerLatestInferenceByTopicIdResponse.FromString,
        )(message)

    def get_inferences_at_block(
        self, message: "GetInferencesAtBlockRequest"
    ) -> "GetInferencesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetInferencesAtBlock",
            GetInferencesAtBlockRequest.SerializeToString,
            GetInferencesAtBlockResponse.FromString,
        )(message)

    def get_latest_topic_inferences(
        self, message: "GetLatestTopicInferencesRequest"
    ) -> "GetLatestTopicInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestTopicInferences",
            GetLatestTopicInferencesRequest.SerializeToString,
            GetLatestTopicInferencesResponse.FromString,
        )(message)

    def get_forecasts_at_block(
        self, message: "GetForecastsAtBlockRequest"
    ) -> "GetForecastsAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetForecastsAtBlock",
            GetForecastsAtBlockRequest.SerializeToString,
            GetForecastsAtBlockResponse.FromString,
        )(message)

    def get_network_loss_bundle_at_block(
        self, message: "GetNetworkLossBundleAtBlockRequest"
    ) -> "GetNetworkLossBundleAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetNetworkLossBundleAtBlock",
            GetNetworkLossBundleAtBlockRequest.SerializeToString,
            GetNetworkLossBundleAtBlockResponse.FromString,
        )(message)

    def get_total_stake(
        self, message: "GetTotalStakeRequest | None" = None
    ) -> "GetTotalStakeResponse":
        if message is None:
            message = GetTotalStakeRequest()

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTotalStake",
            GetTotalStakeRequest.SerializeToString,
            GetTotalStakeResponse.FromString,
        )(message)

    def get_reputer_stake_in_topic(
        self, message: "GetReputerStakeInTopicRequest"
    ) -> "GetReputerStakeInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetReputerStakeInTopic",
            GetReputerStakeInTopicRequest.SerializeToString,
            GetReputerStakeInTopicResponse.FromString,
        )(message)

    def get_multi_reputer_stake_in_topic(
        self, message: "GetMultiReputerStakeInTopicRequest"
    ) -> "GetMultiReputerStakeInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetMultiReputerStakeInTopic",
            GetMultiReputerStakeInTopicRequest.SerializeToString,
            GetMultiReputerStakeInTopicResponse.FromString,
        )(message)

    def get_stake_from_reputer_in_topic_in_self(
        self, message: "GetStakeFromReputerInTopicInSelfRequest"
    ) -> "GetStakeFromReputerInTopicInSelfResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetStakeFromReputerInTopicInSelf",
            GetStakeFromReputerInTopicInSelfRequest.SerializeToString,
            GetStakeFromReputerInTopicInSelfResponse.FromString,
        )(message)

    def get_delegate_stake_in_topic_in_reputer(
        self, message: "GetDelegateStakeInTopicInReputerRequest"
    ) -> "GetDelegateStakeInTopicInReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeInTopicInReputer",
            GetDelegateStakeInTopicInReputerRequest.SerializeToString,
            GetDelegateStakeInTopicInReputerResponse.FromString,
        )(message)

    def get_stake_from_delegator_in_topic_in_reputer(
        self, message: "GetStakeFromDelegatorInTopicInReputerRequest"
    ) -> "GetStakeFromDelegatorInTopicInReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetStakeFromDelegatorInTopicInReputer",
            GetStakeFromDelegatorInTopicInReputerRequest.SerializeToString,
            GetStakeFromDelegatorInTopicInReputerResponse.FromString,
        )(message)

    def get_stake_from_delegator_in_topic(
        self, message: "GetStakeFromDelegatorInTopicRequest"
    ) -> "GetStakeFromDelegatorInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetStakeFromDelegatorInTopic",
            GetStakeFromDelegatorInTopicRequest.SerializeToString,
            GetStakeFromDelegatorInTopicResponse.FromString,
        )(message)

    def get_topic_stake(
        self, message: "GetTopicStakeRequest"
    ) -> "GetTopicStakeResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicStake",
            GetTopicStakeRequest.SerializeToString,
            GetTopicStakeResponse.FromString,
        )(message)

    def get_stake_removals_up_until_block(
        self, message: "GetStakeRemovalsUpUntilBlockRequest"
    ) -> "GetStakeRemovalsUpUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetStakeRemovalsUpUntilBlock",
            GetStakeRemovalsUpUntilBlockRequest.SerializeToString,
            GetStakeRemovalsUpUntilBlockResponse.FromString,
        )(message)

    def get_delegate_stake_removals_up_until_block(
        self, message: "GetDelegateStakeRemovalsUpUntilBlockRequest"
    ) -> "GetDelegateStakeRemovalsUpUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeRemovalsUpUntilBlock",
            GetDelegateStakeRemovalsUpUntilBlockRequest.SerializeToString,
            GetDelegateStakeRemovalsUpUntilBlockResponse.FromString,
        )(message)

    def get_stake_removal_info(
        self, message: "GetStakeRemovalInfoRequest"
    ) -> "GetStakeRemovalInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetStakeRemovalInfo",
            GetStakeRemovalInfoRequest.SerializeToString,
            GetStakeRemovalInfoResponse.FromString,
        )(message)

    def get_delegate_stake_removal_info(
        self, message: "GetDelegateStakeRemovalInfoRequest"
    ) -> "GetDelegateStakeRemovalInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeRemovalInfo",
            GetDelegateStakeRemovalInfoRequest.SerializeToString,
            GetDelegateStakeRemovalInfoResponse.FromString,
        )(message)

    def get_worker_node_info(
        self, message: "GetWorkerNodeInfoRequest"
    ) -> "GetWorkerNodeInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetWorkerNodeInfo",
            GetWorkerNodeInfoRequest.SerializeToString,
            GetWorkerNodeInfoResponse.FromString,
        )(message)

    def get_reputer_node_info(
        self, message: "GetReputerNodeInfoRequest"
    ) -> "GetReputerNodeInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetReputerNodeInfo",
            GetReputerNodeInfoRequest.SerializeToString,
            GetReputerNodeInfoResponse.FromString,
        )(message)

    def is_worker_registered_in_topic_id(
        self, message: "IsWorkerRegisteredInTopicIdRequest"
    ) -> "IsWorkerRegisteredInTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWorkerRegisteredInTopicId",
            IsWorkerRegisteredInTopicIdRequest.SerializeToString,
            IsWorkerRegisteredInTopicIdResponse.FromString,
        )(message)

    def is_reputer_registered_in_topic_id(
        self, message: "IsReputerRegisteredInTopicIdRequest"
    ) -> "IsReputerRegisteredInTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsReputerRegisteredInTopicId",
            IsReputerRegisteredInTopicIdRequest.SerializeToString,
            IsReputerRegisteredInTopicIdResponse.FromString,
        )(message)

    def get_network_inferences_at_block(
        self, message: "GetNetworkInferencesAtBlockRequest"
    ) -> "GetNetworkInferencesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetNetworkInferencesAtBlock",
            GetNetworkInferencesAtBlockRequest.SerializeToString,
            GetNetworkInferencesAtBlockResponse.FromString,
        )(message)

    def get_network_inferences_at_block_outlier_resistant(
        self, message: "GetNetworkInferencesAtBlockOutlierResistantRequest"
    ) -> "GetNetworkInferencesAtBlockOutlierResistantResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetNetworkInferencesAtBlockOutlierResistant",
            GetNetworkInferencesAtBlockOutlierResistantRequest.SerializeToString,
            GetNetworkInferencesAtBlockOutlierResistantResponse.FromString,
        )(message)

    def get_latest_network_inferences(
        self, message: "GetLatestNetworkInferencesRequest"
    ) -> "GetLatestNetworkInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestNetworkInferences",
            GetLatestNetworkInferencesRequest.SerializeToString,
            GetLatestNetworkInferencesResponse.FromString,
        )(message)

    def get_latest_network_inferences_outlier_resistant(
        self, message: "GetLatestNetworkInferencesOutlierResistantRequest"
    ) -> "GetLatestNetworkInferencesOutlierResistantResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestNetworkInferencesOutlierResistant",
            GetLatestNetworkInferencesOutlierResistantRequest.SerializeToString,
            GetLatestNetworkInferencesOutlierResistantResponse.FromString,
        )(message)

    def get_latest_available_network_inferences(
        self, message: "GetLatestAvailableNetworkInferencesRequest"
    ) -> "GetLatestAvailableNetworkInferencesResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestAvailableNetworkInferences",
            GetLatestAvailableNetworkInferencesRequest.SerializeToString,
            GetLatestAvailableNetworkInferencesResponse.FromString,
        )(message)

    def get_latest_available_network_inferences_outlier_resistant(
        self, message: "GetLatestAvailableNetworkInferencesOutlierResistantRequest"
    ) -> "GetLatestAvailableNetworkInferencesOutlierResistantResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestAvailableNetworkInferencesOutlierResistant",
            GetLatestAvailableNetworkInferencesOutlierResistantRequest.SerializeToString,
            GetLatestAvailableNetworkInferencesOutlierResistantResponse.FromString,
        )(message)

    def is_worker_nonce_unfulfilled(
        self, message: "IsWorkerNonceUnfulfilledRequest"
    ) -> "IsWorkerNonceUnfulfilledResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWorkerNonceUnfulfilled",
            IsWorkerNonceUnfulfilledRequest.SerializeToString,
            IsWorkerNonceUnfulfilledResponse.FromString,
        )(message)

    def is_reputer_nonce_unfulfilled(
        self, message: "IsReputerNonceUnfulfilledRequest"
    ) -> "IsReputerNonceUnfulfilledResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsReputerNonceUnfulfilled",
            IsReputerNonceUnfulfilledRequest.SerializeToString,
            IsReputerNonceUnfulfilledResponse.FromString,
        )(message)

    def get_unfulfilled_worker_nonces(
        self, message: "GetUnfulfilledWorkerNoncesRequest"
    ) -> "GetUnfulfilledWorkerNoncesResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetUnfulfilledWorkerNonces",
            GetUnfulfilledWorkerNoncesRequest.SerializeToString,
            GetUnfulfilledWorkerNoncesResponse.FromString,
        )(message)

    def get_unfulfilled_reputer_nonces(
        self, message: "GetUnfulfilledReputerNoncesRequest"
    ) -> "GetUnfulfilledReputerNoncesResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetUnfulfilledReputerNonces",
            GetUnfulfilledReputerNoncesRequest.SerializeToString,
            GetUnfulfilledReputerNoncesResponse.FromString,
        )(message)

    def get_inferer_network_regret(
        self, message: "GetInfererNetworkRegretRequest"
    ) -> "GetInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetInfererNetworkRegret",
            GetInfererNetworkRegretRequest.SerializeToString,
            GetInfererNetworkRegretResponse.FromString,
        )(message)

    def get_forecaster_network_regret(
        self, message: "GetForecasterNetworkRegretRequest"
    ) -> "GetForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetForecasterNetworkRegret",
            GetForecasterNetworkRegretRequest.SerializeToString,
            GetForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_one_in_forecaster_network_regret(
        self, message: "GetOneInForecasterNetworkRegretRequest"
    ) -> "GetOneInForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetOneInForecasterNetworkRegret",
            GetOneInForecasterNetworkRegretRequest.SerializeToString,
            GetOneInForecasterNetworkRegretResponse.FromString,
        )(message)

    def is_whitelist_admin(
        self, message: "IsWhitelistAdminRequest"
    ) -> "IsWhitelistAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistAdmin",
            IsWhitelistAdminRequest.SerializeToString,
            IsWhitelistAdminResponse.FromString,
        )(message)

    def get_topic_last_worker_commit_info(
        self, message: "GetTopicLastWorkerCommitInfoRequest"
    ) -> "GetTopicLastWorkerCommitInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicLastWorkerCommitInfo",
            GetTopicLastWorkerCommitInfoRequest.SerializeToString,
            GetTopicLastWorkerCommitInfoResponse.FromString,
        )(message)

    def get_topic_last_reputer_commit_info(
        self, message: "GetTopicLastReputerCommitInfoRequest"
    ) -> "GetTopicLastReputerCommitInfoResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicLastReputerCommitInfo",
            GetTopicLastReputerCommitInfoRequest.SerializeToString,
            GetTopicLastReputerCommitInfoResponse.FromString,
        )(message)

    def get_topic_reward_nonce(
        self, message: "GetTopicRewardNonceRequest"
    ) -> "GetTopicRewardNonceResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicRewardNonce",
            GetTopicRewardNonceRequest.SerializeToString,
            GetTopicRewardNonceResponse.FromString,
        )(message)

    def get_reputer_loss_bundles_at_block(
        self, message: "GetReputerLossBundlesAtBlockRequest"
    ) -> "GetReputerLossBundlesAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetReputerLossBundlesAtBlock",
            GetReputerLossBundlesAtBlockRequest.SerializeToString,
            GetReputerLossBundlesAtBlockResponse.FromString,
        )(message)

    def get_stake_reputer_authority(
        self, message: "GetStakeReputerAuthorityRequest"
    ) -> "GetStakeReputerAuthorityResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetStakeReputerAuthority",
            GetStakeReputerAuthorityRequest.SerializeToString,
            GetStakeReputerAuthorityResponse.FromString,
        )(message)

    def get_delegate_stake_placement(
        self, message: "GetDelegateStakePlacementRequest"
    ) -> "GetDelegateStakePlacementResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakePlacement",
            GetDelegateStakePlacementRequest.SerializeToString,
            GetDelegateStakePlacementResponse.FromString,
        )(message)

    def get_delegate_stake_upon_reputer(
        self, message: "GetDelegateStakeUponReputerRequest"
    ) -> "GetDelegateStakeUponReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeUponReputer",
            GetDelegateStakeUponReputerRequest.SerializeToString,
            GetDelegateStakeUponReputerResponse.FromString,
        )(message)

    def get_delegate_reward_per_share(
        self, message: "GetDelegateRewardPerShareRequest"
    ) -> "GetDelegateRewardPerShareResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetDelegateRewardPerShare",
            GetDelegateRewardPerShareRequest.SerializeToString,
            GetDelegateRewardPerShareResponse.FromString,
        )(message)

    def get_stake_removal_for_reputer_and_topic_id(
        self, message: "GetStakeRemovalForReputerAndTopicIdRequest"
    ) -> "GetStakeRemovalForReputerAndTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetStakeRemovalForReputerAndTopicId",
            GetStakeRemovalForReputerAndTopicIdRequest.SerializeToString,
            GetStakeRemovalForReputerAndTopicIdResponse.FromString,
        )(message)

    def get_delegate_stake_removal(
        self, message: "GetDelegateStakeRemovalRequest"
    ) -> "GetDelegateStakeRemovalResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeRemoval",
            GetDelegateStakeRemovalRequest.SerializeToString,
            GetDelegateStakeRemovalResponse.FromString,
        )(message)

    def get_previous_topic_weight(
        self, message: "GetPreviousTopicWeightRequest"
    ) -> "GetPreviousTopicWeightResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicWeight",
            GetPreviousTopicWeightRequest.SerializeToString,
            GetPreviousTopicWeightResponse.FromString,
        )(message)

    def get_total_sum_previous_topic_weights(
        self, message: "GetTotalSumPreviousTopicWeightsRequest | None" = None
    ) -> "GetTotalSumPreviousTopicWeightsResponse":
        if message is None:
            message = GetTotalSumPreviousTopicWeightsRequest()

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTotalSumPreviousTopicWeights",
            GetTotalSumPreviousTopicWeightsRequest.SerializeToString,
            GetTotalSumPreviousTopicWeightsResponse.FromString,
        )(message)

    def topic_exists(self, message: "TopicExistsRequest") -> "TopicExistsResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/TopicExists",
            TopicExistsRequest.SerializeToString,
            TopicExistsResponse.FromString,
        )(message)

    def is_topic_active(
        self, message: "IsTopicActiveRequest"
    ) -> "IsTopicActiveResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsTopicActive",
            IsTopicActiveRequest.SerializeToString,
            IsTopicActiveResponse.FromString,
        )(message)

    def get_topic_fee_revenue(
        self, message: "GetTopicFeeRevenueRequest"
    ) -> "GetTopicFeeRevenueResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicFeeRevenue",
            GetTopicFeeRevenueRequest.SerializeToString,
            GetTopicFeeRevenueResponse.FromString,
        )(message)

    def get_inferer_score_ema(
        self, message: "GetInfererScoreEmaRequest"
    ) -> "GetInfererScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetInfererScoreEma",
            GetInfererScoreEmaRequest.SerializeToString,
            GetInfererScoreEmaResponse.FromString,
        )(message)

    def get_forecaster_score_ema(
        self, message: "GetForecasterScoreEmaRequest"
    ) -> "GetForecasterScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetForecasterScoreEma",
            GetForecasterScoreEmaRequest.SerializeToString,
            GetForecasterScoreEmaResponse.FromString,
        )(message)

    def get_reputer_score_ema(
        self, message: "GetReputerScoreEmaRequest"
    ) -> "GetReputerScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetReputerScoreEma",
            GetReputerScoreEmaRequest.SerializeToString,
            GetReputerScoreEmaResponse.FromString,
        )(message)

    def get_inference_scores_until_block(
        self, message: "GetInferenceScoresUntilBlockRequest"
    ) -> "GetInferenceScoresUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetInferenceScoresUntilBlock",
            GetInferenceScoresUntilBlockRequest.SerializeToString,
            GetInferenceScoresUntilBlockResponse.FromString,
        )(message)

    def get_previous_topic_quantile_forecaster_score_ema(
        self, message: "GetPreviousTopicQuantileForecasterScoreEmaRequest"
    ) -> "GetPreviousTopicQuantileForecasterScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicQuantileForecasterScoreEma",
            GetPreviousTopicQuantileForecasterScoreEmaRequest.SerializeToString,
            GetPreviousTopicQuantileForecasterScoreEmaResponse.FromString,
        )(message)

    def get_previous_topic_quantile_inferer_score_ema(
        self, message: "GetPreviousTopicQuantileInfererScoreEmaRequest"
    ) -> "GetPreviousTopicQuantileInfererScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicQuantileInfererScoreEma",
            GetPreviousTopicQuantileInfererScoreEmaRequest.SerializeToString,
            GetPreviousTopicQuantileInfererScoreEmaResponse.FromString,
        )(message)

    def get_previous_topic_quantile_reputer_score_ema(
        self, message: "GetPreviousTopicQuantileReputerScoreEmaRequest"
    ) -> "GetPreviousTopicQuantileReputerScoreEmaResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicQuantileReputerScoreEma",
            GetPreviousTopicQuantileReputerScoreEmaRequest.SerializeToString,
            GetPreviousTopicQuantileReputerScoreEmaResponse.FromString,
        )(message)

    def get_worker_inference_scores_at_block(
        self, message: "GetWorkerInferenceScoresAtBlockRequest"
    ) -> "GetWorkerInferenceScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetWorkerInferenceScoresAtBlock",
            GetWorkerInferenceScoresAtBlockRequest.SerializeToString,
            GetWorkerInferenceScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_inferer_score(
        self, message: "GetCurrentLowestInfererScoreRequest"
    ) -> "GetCurrentLowestInfererScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetCurrentLowestInfererScore",
            GetCurrentLowestInfererScoreRequest.SerializeToString,
            GetCurrentLowestInfererScoreResponse.FromString,
        )(message)

    def get_forecast_scores_until_block(
        self, message: "GetForecastScoresUntilBlockRequest"
    ) -> "GetForecastScoresUntilBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetForecastScoresUntilBlock",
            GetForecastScoresUntilBlockRequest.SerializeToString,
            GetForecastScoresUntilBlockResponse.FromString,
        )(message)

    def get_worker_forecast_scores_at_block(
        self, message: "GetWorkerForecastScoresAtBlockRequest"
    ) -> "GetWorkerForecastScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetWorkerForecastScoresAtBlock",
            GetWorkerForecastScoresAtBlockRequest.SerializeToString,
            GetWorkerForecastScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_forecaster_score(
        self, message: "GetCurrentLowestForecasterScoreRequest"
    ) -> "GetCurrentLowestForecasterScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetCurrentLowestForecasterScore",
            GetCurrentLowestForecasterScoreRequest.SerializeToString,
            GetCurrentLowestForecasterScoreResponse.FromString,
        )(message)

    def get_reputers_scores_at_block(
        self, message: "GetReputersScoresAtBlockRequest"
    ) -> "GetReputersScoresAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetReputersScoresAtBlock",
            GetReputersScoresAtBlockRequest.SerializeToString,
            GetReputersScoresAtBlockResponse.FromString,
        )(message)

    def get_current_lowest_reputer_score(
        self, message: "GetCurrentLowestReputerScoreRequest"
    ) -> "GetCurrentLowestReputerScoreResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetCurrentLowestReputerScore",
            GetCurrentLowestReputerScoreRequest.SerializeToString,
            GetCurrentLowestReputerScoreResponse.FromString,
        )(message)

    def get_listening_coefficient(
        self, message: "GetListeningCoefficientRequest"
    ) -> "GetListeningCoefficientResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetListeningCoefficient",
            GetListeningCoefficientRequest.SerializeToString,
            GetListeningCoefficientResponse.FromString,
        )(message)

    def get_previous_reputer_reward_fraction(
        self, message: "GetPreviousReputerRewardFractionRequest"
    ) -> "GetPreviousReputerRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousReputerRewardFraction",
            GetPreviousReputerRewardFractionRequest.SerializeToString,
            GetPreviousReputerRewardFractionResponse.FromString,
        )(message)

    def get_previous_inference_reward_fraction(
        self, message: "GetPreviousInferenceRewardFractionRequest"
    ) -> "GetPreviousInferenceRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousInferenceRewardFraction",
            GetPreviousInferenceRewardFractionRequest.SerializeToString,
            GetPreviousInferenceRewardFractionResponse.FromString,
        )(message)

    def get_previous_forecast_reward_fraction(
        self, message: "GetPreviousForecastRewardFractionRequest"
    ) -> "GetPreviousForecastRewardFractionResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousForecastRewardFraction",
            GetPreviousForecastRewardFractionRequest.SerializeToString,
            GetPreviousForecastRewardFractionResponse.FromString,
        )(message)

    def get_previous_percentage_reward_to_staked_reputers(
        self,
        message: "GetPreviousPercentageRewardToStakedReputersRequest | None" = None,
    ) -> "GetPreviousPercentageRewardToStakedReputersResponse":
        if message is None:
            message = GetPreviousPercentageRewardToStakedReputersRequest()

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetPreviousPercentageRewardToStakedReputers",
            GetPreviousPercentageRewardToStakedReputersRequest.SerializeToString,
            GetPreviousPercentageRewardToStakedReputersResponse.FromString,
        )(message)

    def get_total_reward_to_distribute(
        self, message: "GetTotalRewardToDistributeRequest | None" = None
    ) -> "GetTotalRewardToDistributeResponse":
        if message is None:
            message = GetTotalRewardToDistributeRequest()

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTotalRewardToDistribute",
            GetTotalRewardToDistributeRequest.SerializeToString,
            GetTotalRewardToDistributeResponse.FromString,
        )(message)

    def get_naive_inferer_network_regret(
        self, message: "GetNaiveInfererNetworkRegretRequest"
    ) -> "GetNaiveInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetNaiveInfererNetworkRegret",
            GetNaiveInfererNetworkRegretRequest.SerializeToString,
            GetNaiveInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_inferer_inferer_network_regret(
        self, message: "GetOneOutInfererInfererNetworkRegretRequest"
    ) -> "GetOneOutInfererInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetOneOutInfererInfererNetworkRegret",
            GetOneOutInfererInfererNetworkRegretRequest.SerializeToString,
            GetOneOutInfererInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_inferer_forecaster_network_regret(
        self, message: "GetOneOutInfererForecasterNetworkRegretRequest"
    ) -> "GetOneOutInfererForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetOneOutInfererForecasterNetworkRegret",
            GetOneOutInfererForecasterNetworkRegretRequest.SerializeToString,
            GetOneOutInfererForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_forecaster_inferer_network_regret(
        self, message: "GetOneOutForecasterInfererNetworkRegretRequest"
    ) -> "GetOneOutForecasterInfererNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetOneOutForecasterInfererNetworkRegret",
            GetOneOutForecasterInfererNetworkRegretRequest.SerializeToString,
            GetOneOutForecasterInfererNetworkRegretResponse.FromString,
        )(message)

    def get_one_out_forecaster_forecaster_network_regret(
        self, message: "GetOneOutForecasterForecasterNetworkRegretRequest"
    ) -> "GetOneOutForecasterForecasterNetworkRegretResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetOneOutForecasterForecasterNetworkRegret",
            GetOneOutForecasterForecasterNetworkRegretRequest.SerializeToString,
            GetOneOutForecasterForecasterNetworkRegretResponse.FromString,
        )(message)

    def get_active_topics_at_block(
        self, message: "GetActiveTopicsAtBlockRequest"
    ) -> "GetActiveTopicsAtBlockResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetActiveTopicsAtBlock",
            GetActiveTopicsAtBlockRequest.SerializeToString,
            GetActiveTopicsAtBlockResponse.FromString,
        )(message)

    def get_next_churning_block_by_topic_id(
        self, message: "GetNextChurningBlockByTopicIdRequest"
    ) -> "GetNextChurningBlockByTopicIdResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetNextChurningBlockByTopicId",
            GetNextChurningBlockByTopicIdRequest.SerializeToString,
            GetNextChurningBlockByTopicIdResponse.FromString,
        )(message)

    def get_count_inferer_inclusions_in_topic(
        self, message: "GetCountInfererInclusionsInTopicRequest"
    ) -> "GetCountInfererInclusionsInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetCountInfererInclusionsInTopic",
            GetCountInfererInclusionsInTopicRequest.SerializeToString,
            GetCountInfererInclusionsInTopicResponse.FromString,
        )(message)

    def get_count_forecaster_inclusions_in_topic(
        self, message: "GetCountForecasterInclusionsInTopicRequest"
    ) -> "GetCountForecasterInclusionsInTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetCountForecasterInclusionsInTopic",
            GetCountForecasterInclusionsInTopicRequest.SerializeToString,
            GetCountForecasterInclusionsInTopicResponse.FromString,
        )(message)

    def get_active_reputers_for_topic(
        self, message: "GetActiveReputersForTopicRequest"
    ) -> "GetActiveReputersForTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetActiveReputersForTopic",
            GetActiveReputersForTopicRequest.SerializeToString,
            GetActiveReputersForTopicResponse.FromString,
        )(message)

    def get_active_forecasters_for_topic(
        self, message: "GetActiveForecastersForTopicRequest"
    ) -> "GetActiveForecastersForTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetActiveForecastersForTopic",
            GetActiveForecastersForTopicRequest.SerializeToString,
            GetActiveForecastersForTopicResponse.FromString,
        )(message)

    def get_active_inferers_for_topic(
        self, message: "GetActiveInferersForTopicRequest"
    ) -> "GetActiveInferersForTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetActiveInferersForTopic",
            GetActiveInferersForTopicRequest.SerializeToString,
            GetActiveInferersForTopicResponse.FromString,
        )(message)

    def is_whitelisted_global_worker(
        self, message: "IsWhitelistedGlobalWorkerRequest"
    ) -> "IsWhitelistedGlobalWorkerResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalWorker",
            IsWhitelistedGlobalWorkerRequest.SerializeToString,
            IsWhitelistedGlobalWorkerResponse.FromString,
        )(message)

    def is_whitelisted_global_reputer(
        self, message: "IsWhitelistedGlobalReputerRequest"
    ) -> "IsWhitelistedGlobalReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalReputer",
            IsWhitelistedGlobalReputerRequest.SerializeToString,
            IsWhitelistedGlobalReputerResponse.FromString,
        )(message)

    def is_whitelisted_global_admin(
        self, message: "IsWhitelistedGlobalAdminRequest"
    ) -> "IsWhitelistedGlobalAdminResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalAdmin",
            IsWhitelistedGlobalAdminRequest.SerializeToString,
            IsWhitelistedGlobalAdminResponse.FromString,
        )(message)

    def is_topic_worker_whitelist_enabled(
        self, message: "IsTopicWorkerWhitelistEnabledRequest"
    ) -> "IsTopicWorkerWhitelistEnabledResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsTopicWorkerWhitelistEnabled",
            IsTopicWorkerWhitelistEnabledRequest.SerializeToString,
            IsTopicWorkerWhitelistEnabledResponse.FromString,
        )(message)

    def is_topic_reputer_whitelist_enabled(
        self, message: "IsTopicReputerWhitelistEnabledRequest"
    ) -> "IsTopicReputerWhitelistEnabledResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsTopicReputerWhitelistEnabled",
            IsTopicReputerWhitelistEnabledRequest.SerializeToString,
            IsTopicReputerWhitelistEnabledResponse.FromString,
        )(message)

    def is_whitelisted_topic_creator(
        self, message: "IsWhitelistedTopicCreatorRequest"
    ) -> "IsWhitelistedTopicCreatorResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedTopicCreator",
            IsWhitelistedTopicCreatorRequest.SerializeToString,
            IsWhitelistedTopicCreatorResponse.FromString,
        )(message)

    def is_whitelisted_global_actor(
        self, message: "IsWhitelistedGlobalActorRequest"
    ) -> "IsWhitelistedGlobalActorResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalActor",
            IsWhitelistedGlobalActorRequest.SerializeToString,
            IsWhitelistedGlobalActorResponse.FromString,
        )(message)

    def is_whitelisted_topic_worker(
        self, message: "IsWhitelistedTopicWorkerRequest"
    ) -> "IsWhitelistedTopicWorkerResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedTopicWorker",
            IsWhitelistedTopicWorkerRequest.SerializeToString,
            IsWhitelistedTopicWorkerResponse.FromString,
        )(message)

    def is_whitelisted_topic_reputer(
        self, message: "IsWhitelistedTopicReputerRequest"
    ) -> "IsWhitelistedTopicReputerResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedTopicReputer",
            IsWhitelistedTopicReputerRequest.SerializeToString,
            IsWhitelistedTopicReputerResponse.FromString,
        )(message)

    def can_update_all_global_whitelists(
        self, message: "CanUpdateAllGlobalWhitelistsRequest"
    ) -> "CanUpdateAllGlobalWhitelistsResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanUpdateAllGlobalWhitelists",
            CanUpdateAllGlobalWhitelistsRequest.SerializeToString,
            CanUpdateAllGlobalWhitelistsResponse.FromString,
        )(message)

    def can_update_global_worker_whitelist(
        self, message: "CanUpdateGlobalWorkerWhitelistRequest"
    ) -> "CanUpdateGlobalWorkerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanUpdateGlobalWorkerWhitelist",
            CanUpdateGlobalWorkerWhitelistRequest.SerializeToString,
            CanUpdateGlobalWorkerWhitelistResponse.FromString,
        )(message)

    def can_update_global_reputer_whitelist(
        self, message: "CanUpdateGlobalReputerWhitelistRequest"
    ) -> "CanUpdateGlobalReputerWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanUpdateGlobalReputerWhitelist",
            CanUpdateGlobalReputerWhitelistRequest.SerializeToString,
            CanUpdateGlobalReputerWhitelistResponse.FromString,
        )(message)

    def can_update_params(
        self, message: "CanUpdateParamsRequest"
    ) -> "CanUpdateParamsResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanUpdateParams",
            CanUpdateParamsRequest.SerializeToString,
            CanUpdateParamsResponse.FromString,
        )(message)

    def can_update_topic_whitelist(
        self, message: "CanUpdateTopicWhitelistRequest"
    ) -> "CanUpdateTopicWhitelistResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanUpdateTopicWhitelist",
            CanUpdateTopicWhitelistRequest.SerializeToString,
            CanUpdateTopicWhitelistResponse.FromString,
        )(message)

    def can_create_topic(
        self, message: "CanCreateTopicRequest"
    ) -> "CanCreateTopicResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanCreateTopic",
            CanCreateTopicRequest.SerializeToString,
            CanCreateTopicResponse.FromString,
        )(message)

    def can_submit_worker_payload(
        self, message: "CanSubmitWorkerPayloadRequest"
    ) -> "CanSubmitWorkerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanSubmitWorkerPayload",
            CanSubmitWorkerPayloadRequest.SerializeToString,
            CanSubmitWorkerPayloadResponse.FromString,
        )(message)

    def can_submit_reputer_payload(
        self, message: "CanSubmitReputerPayloadRequest"
    ) -> "CanSubmitReputerPayloadResponse":
        return self._channel.unary_unary(
            "/emissions.v8.QueryService/CanSubmitReputerPayload",
            CanSubmitReputerPayloadRequest.SerializeToString,
            CanSubmitReputerPayloadResponse.FromString,
        )(message)

    def get_topic_initial_inferer_ema_score(
        self, message: "GetTopicInitialInfererEmaScoreRequest"
    ) -> "GetTopicInitialInfererEmaScoreResponse":
        """
        GetTopicInitialInfererEmaScore returns the initial EMA score for inferers in a topic
        """

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicInitialInfererEmaScore",
            GetTopicInitialInfererEmaScoreRequest.SerializeToString,
            GetTopicInitialInfererEmaScoreResponse.FromString,
        )(message)

    def get_topic_initial_forecaster_ema_score(
        self, message: "GetTopicInitialForecasterEmaScoreRequest"
    ) -> "GetTopicInitialForecasterEmaScoreResponse":
        """
        GetTopicInitialForecasterEmaScore returns the initial EMA score for forecasters in a topic
        """

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicInitialForecasterEmaScore",
            GetTopicInitialForecasterEmaScoreRequest.SerializeToString,
            GetTopicInitialForecasterEmaScoreResponse.FromString,
        )(message)

    def get_topic_initial_reputer_ema_score(
        self, message: "GetTopicInitialReputerEmaScoreRequest"
    ) -> "GetTopicInitialReputerEmaScoreResponse":
        """
        GetTopicInitialReputerEmaScore returns the initial EMA score for reputers in a topic
        """

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetTopicInitialReputerEmaScore",
            GetTopicInitialReputerEmaScoreRequest.SerializeToString,
            GetTopicInitialReputerEmaScoreResponse.FromString,
        )(message)

    def get_latest_regret_std_norm(
        self, message: "GetLatestRegretStdNormRequest"
    ) -> "GetLatestRegretStdNormResponse":
        """
        Get latest regret stdnorm for a topic
        """

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestRegretStdNorm",
            GetLatestRegretStdNormRequest.SerializeToString,
            GetLatestRegretStdNormResponse.FromString,
        )(message)

    def get_latest_inferer_weight(
        self, message: "GetLatestInfererWeightRequest"
    ) -> "GetLatestInfererWeightResponse":
        """
        Get latest inferer weight for a topic and actor
        """

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestInfererWeight",
            GetLatestInfererWeightRequest.SerializeToString,
            GetLatestInfererWeightResponse.FromString,
        )(message)

    def get_latest_forecaster_weight(
        self, message: "GetLatestForecasterWeightRequest"
    ) -> "GetLatestForecasterWeightResponse":
        """
        Get latest forecaster weight for a topic and actor
        """

        return self._channel.unary_unary(
            "/emissions.v8.QueryService/GetLatestForecasterWeight",
            GetLatestForecasterWeightRequest.SerializeToString,
            GetLatestForecasterWeightResponse.FromString,
        )(message)


class QueryServiceAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the module Msg service.
    """

    async def get_params(
        self,
        message: "GetParamsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetParamsResponse":
        """
        Params returns the module parameters.
        """

        if message is None:
            message = GetParamsRequest()

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetParams",
            message,
            GetParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_topic_id(
        self,
        message: "GetNextTopicIdRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNextTopicIdResponse":
        if message is None:
            message = GetNextTopicIdRequest()

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetNextTopicId",
            message,
            GetNextTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic(
        self,
        message: "GetTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopic",
            message,
            GetTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_latest_inference_by_topic_id(
        self,
        message: "GetWorkerLatestInferenceByTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerLatestInferenceByTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetWorkerLatestInferenceByTopicId",
            message,
            GetWorkerLatestInferenceByTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferences_at_block(
        self,
        message: "GetInferencesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetInferencesAtBlock",
            message,
            GetInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_topic_inferences(
        self,
        message: "GetLatestTopicInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestTopicInferencesResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestTopicInferences",
            message,
            GetLatestTopicInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecasts_at_block(
        self,
        message: "GetForecastsAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecastsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetForecastsAtBlock",
            message,
            GetForecastsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_loss_bundle_at_block(
        self,
        message: "GetNetworkLossBundleAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNetworkLossBundleAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetNetworkLossBundleAtBlock",
            message,
            GetNetworkLossBundleAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_stake(
        self,
        message: "GetTotalStakeRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTotalStakeResponse":
        if message is None:
            message = GetTotalStakeRequest()

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTotalStake",
            message,
            GetTotalStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_stake_in_topic(
        self,
        message: "GetReputerStakeInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetReputerStakeInTopic",
            message,
            GetReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_multi_reputer_stake_in_topic(
        self,
        message: "GetMultiReputerStakeInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetMultiReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetMultiReputerStakeInTopic",
            message,
            GetMultiReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_reputer_in_topic_in_self(
        self,
        message: "GetStakeFromReputerInTopicInSelfRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeFromReputerInTopicInSelfResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetStakeFromReputerInTopicInSelf",
            message,
            GetStakeFromReputerInTopicInSelfResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_in_topic_in_reputer(
        self,
        message: "GetDelegateStakeInTopicInReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeInTopicInReputer",
            message,
            GetDelegateStakeInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic_in_reputer(
        self,
        message: "GetStakeFromDelegatorInTopicInReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeFromDelegatorInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetStakeFromDelegatorInTopicInReputer",
            message,
            GetStakeFromDelegatorInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic(
        self,
        message: "GetStakeFromDelegatorInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeFromDelegatorInTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetStakeFromDelegatorInTopic",
            message,
            GetStakeFromDelegatorInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_stake(
        self,
        message: "GetTopicStakeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicStakeResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicStake",
            message,
            GetTopicStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removals_up_until_block(
        self,
        message: "GetStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetStakeRemovalsUpUntilBlock",
            message,
            GetStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removals_up_until_block(
        self,
        message: "GetDelegateStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeRemovalsUpUntilBlock",
            message,
            GetDelegateStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_info(
        self,
        message: "GetStakeRemovalInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetStakeRemovalInfo",
            message,
            GetStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal_info(
        self,
        message: "GetDelegateStakeRemovalInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeRemovalInfo",
            message,
            GetDelegateStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_node_info(
        self,
        message: "GetWorkerNodeInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetWorkerNodeInfo",
            message,
            GetWorkerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_node_info(
        self,
        message: "GetReputerNodeInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetReputerNodeInfo",
            message,
            GetReputerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_registered_in_topic_id(
        self,
        message: "IsWorkerRegisteredInTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWorkerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWorkerRegisteredInTopicId",
            message,
            IsWorkerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_registered_in_topic_id(
        self,
        message: "IsReputerRegisteredInTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsReputerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsReputerRegisteredInTopicId",
            message,
            IsReputerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_inferences_at_block(
        self,
        message: "GetNetworkInferencesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNetworkInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetNetworkInferencesAtBlock",
            message,
            GetNetworkInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_inferences_at_block_outlier_resistant(
        self,
        message: "GetNetworkInferencesAtBlockOutlierResistantRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNetworkInferencesAtBlockOutlierResistantResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetNetworkInferencesAtBlockOutlierResistant",
            message,
            GetNetworkInferencesAtBlockOutlierResistantResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_network_inferences(
        self,
        message: "GetLatestNetworkInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestNetworkInferences",
            message,
            GetLatestNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_network_inferences_outlier_resistant(
        self,
        message: "GetLatestNetworkInferencesOutlierResistantRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestNetworkInferencesOutlierResistantResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestNetworkInferencesOutlierResistant",
            message,
            GetLatestNetworkInferencesOutlierResistantResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_available_network_inferences(
        self,
        message: "GetLatestAvailableNetworkInferencesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestAvailableNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestAvailableNetworkInferences",
            message,
            GetLatestAvailableNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_available_network_inferences_outlier_resistant(
        self,
        message: "GetLatestAvailableNetworkInferencesOutlierResistantRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestAvailableNetworkInferencesOutlierResistantResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestAvailableNetworkInferencesOutlierResistant",
            message,
            GetLatestAvailableNetworkInferencesOutlierResistantResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_nonce_unfulfilled(
        self,
        message: "IsWorkerNonceUnfulfilledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWorkerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWorkerNonceUnfulfilled",
            message,
            IsWorkerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_nonce_unfulfilled(
        self,
        message: "IsReputerNonceUnfulfilledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsReputerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsReputerNonceUnfulfilled",
            message,
            IsReputerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_worker_nonces(
        self,
        message: "GetUnfulfilledWorkerNoncesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetUnfulfilledWorkerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetUnfulfilledWorkerNonces",
            message,
            GetUnfulfilledWorkerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_reputer_nonces(
        self,
        message: "GetUnfulfilledReputerNoncesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetUnfulfilledReputerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetUnfulfilledReputerNonces",
            message,
            GetUnfulfilledReputerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_network_regret(
        self,
        message: "GetInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetInfererNetworkRegret",
            message,
            GetInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_network_regret(
        self,
        message: "GetForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetForecasterNetworkRegret",
            message,
            GetForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_in_forecaster_network_regret(
        self,
        message: "GetOneInForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneInForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetOneInForecasterNetworkRegret",
            message,
            GetOneInForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelist_admin(
        self,
        message: "IsWhitelistAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistAdmin",
            message,
            IsWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_worker_commit_info(
        self,
        message: "GetTopicLastWorkerCommitInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicLastWorkerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicLastWorkerCommitInfo",
            message,
            GetTopicLastWorkerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_reputer_commit_info(
        self,
        message: "GetTopicLastReputerCommitInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicLastReputerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicLastReputerCommitInfo",
            message,
            GetTopicLastReputerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_reward_nonce(
        self,
        message: "GetTopicRewardNonceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicRewardNonceResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicRewardNonce",
            message,
            GetTopicRewardNonceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_loss_bundles_at_block(
        self,
        message: "GetReputerLossBundlesAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerLossBundlesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetReputerLossBundlesAtBlock",
            message,
            GetReputerLossBundlesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_reputer_authority(
        self,
        message: "GetStakeReputerAuthorityRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeReputerAuthorityResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetStakeReputerAuthority",
            message,
            GetStakeReputerAuthorityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_placement(
        self,
        message: "GetDelegateStakePlacementRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakePlacementResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakePlacement",
            message,
            GetDelegateStakePlacementResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_upon_reputer(
        self,
        message: "GetDelegateStakeUponReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeUponReputerResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeUponReputer",
            message,
            GetDelegateStakeUponReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_reward_per_share(
        self,
        message: "GetDelegateRewardPerShareRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateRewardPerShareResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetDelegateRewardPerShare",
            message,
            GetDelegateRewardPerShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_for_reputer_and_topic_id(
        self,
        message: "GetStakeRemovalForReputerAndTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetStakeRemovalForReputerAndTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetStakeRemovalForReputerAndTopicId",
            message,
            GetStakeRemovalForReputerAndTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal(
        self,
        message: "GetDelegateStakeRemovalRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDelegateStakeRemovalResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetDelegateStakeRemoval",
            message,
            GetDelegateStakeRemovalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_weight(
        self,
        message: "GetPreviousTopicWeightRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicWeightResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicWeight",
            message,
            GetPreviousTopicWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_sum_previous_topic_weights(
        self,
        message: "GetTotalSumPreviousTopicWeightsRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTotalSumPreviousTopicWeightsResponse":
        if message is None:
            message = GetTotalSumPreviousTopicWeightsRequest()

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTotalSumPreviousTopicWeights",
            message,
            GetTotalSumPreviousTopicWeightsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def topic_exists(
        self,
        message: "TopicExistsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "TopicExistsResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/TopicExists",
            message,
            TopicExistsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_active(
        self,
        message: "IsTopicActiveRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsTopicActiveResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsTopicActive",
            message,
            IsTopicActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_fee_revenue(
        self,
        message: "GetTopicFeeRevenueRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicFeeRevenueResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicFeeRevenue",
            message,
            GetTopicFeeRevenueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_score_ema(
        self,
        message: "GetInfererScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetInfererScoreEma",
            message,
            GetInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_score_ema(
        self,
        message: "GetForecasterScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetForecasterScoreEma",
            message,
            GetForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_score_ema(
        self,
        message: "GetReputerScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetReputerScoreEma",
            message,
            GetReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inference_scores_until_block(
        self,
        message: "GetInferenceScoresUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetInferenceScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetInferenceScoresUntilBlock",
            message,
            GetInferenceScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_forecaster_score_ema(
        self,
        message: "GetPreviousTopicQuantileForecasterScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicQuantileForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicQuantileForecasterScoreEma",
            message,
            GetPreviousTopicQuantileForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_inferer_score_ema(
        self,
        message: "GetPreviousTopicQuantileInfererScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicQuantileInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicQuantileInfererScoreEma",
            message,
            GetPreviousTopicQuantileInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_reputer_score_ema(
        self,
        message: "GetPreviousTopicQuantileReputerScoreEmaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousTopicQuantileReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousTopicQuantileReputerScoreEma",
            message,
            GetPreviousTopicQuantileReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_inference_scores_at_block(
        self,
        message: "GetWorkerInferenceScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerInferenceScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetWorkerInferenceScoresAtBlock",
            message,
            GetWorkerInferenceScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_inferer_score(
        self,
        message: "GetCurrentLowestInfererScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCurrentLowestInfererScoreResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetCurrentLowestInfererScore",
            message,
            GetCurrentLowestInfererScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecast_scores_until_block(
        self,
        message: "GetForecastScoresUntilBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetForecastScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetForecastScoresUntilBlock",
            message,
            GetForecastScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_forecast_scores_at_block(
        self,
        message: "GetWorkerForecastScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetWorkerForecastScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetWorkerForecastScoresAtBlock",
            message,
            GetWorkerForecastScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_forecaster_score(
        self,
        message: "GetCurrentLowestForecasterScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCurrentLowestForecasterScoreResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetCurrentLowestForecasterScore",
            message,
            GetCurrentLowestForecasterScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputers_scores_at_block(
        self,
        message: "GetReputersScoresAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReputersScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetReputersScoresAtBlock",
            message,
            GetReputersScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_reputer_score(
        self,
        message: "GetCurrentLowestReputerScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCurrentLowestReputerScoreResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetCurrentLowestReputerScore",
            message,
            GetCurrentLowestReputerScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_listening_coefficient(
        self,
        message: "GetListeningCoefficientRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetListeningCoefficientResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetListeningCoefficient",
            message,
            GetListeningCoefficientResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_reputer_reward_fraction(
        self,
        message: "GetPreviousReputerRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousReputerRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousReputerRewardFraction",
            message,
            GetPreviousReputerRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_inference_reward_fraction(
        self,
        message: "GetPreviousInferenceRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousInferenceRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousInferenceRewardFraction",
            message,
            GetPreviousInferenceRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_forecast_reward_fraction(
        self,
        message: "GetPreviousForecastRewardFractionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousForecastRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousForecastRewardFraction",
            message,
            GetPreviousForecastRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_percentage_reward_to_staked_reputers(
        self,
        message: "GetPreviousPercentageRewardToStakedReputersRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPreviousPercentageRewardToStakedReputersResponse":
        if message is None:
            message = GetPreviousPercentageRewardToStakedReputersRequest()

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetPreviousPercentageRewardToStakedReputers",
            message,
            GetPreviousPercentageRewardToStakedReputersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_reward_to_distribute(
        self,
        message: "GetTotalRewardToDistributeRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTotalRewardToDistributeResponse":
        if message is None:
            message = GetTotalRewardToDistributeRequest()

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTotalRewardToDistribute",
            message,
            GetTotalRewardToDistributeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_naive_inferer_network_regret(
        self,
        message: "GetNaiveInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNaiveInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetNaiveInfererNetworkRegret",
            message,
            GetNaiveInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_inferer_network_regret(
        self,
        message: "GetOneOutInfererInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutInfererInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetOneOutInfererInfererNetworkRegret",
            message,
            GetOneOutInfererInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_forecaster_network_regret(
        self,
        message: "GetOneOutInfererForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutInfererForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetOneOutInfererForecasterNetworkRegret",
            message,
            GetOneOutInfererForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_inferer_network_regret(
        self,
        message: "GetOneOutForecasterInfererNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutForecasterInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetOneOutForecasterInfererNetworkRegret",
            message,
            GetOneOutForecasterInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_forecaster_network_regret(
        self,
        message: "GetOneOutForecasterForecasterNetworkRegretRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetOneOutForecasterForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetOneOutForecasterForecasterNetworkRegret",
            message,
            GetOneOutForecasterForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_topics_at_block(
        self,
        message: "GetActiveTopicsAtBlockRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetActiveTopicsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetActiveTopicsAtBlock",
            message,
            GetActiveTopicsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_churning_block_by_topic_id(
        self,
        message: "GetNextChurningBlockByTopicIdRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetNextChurningBlockByTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetNextChurningBlockByTopicId",
            message,
            GetNextChurningBlockByTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_count_inferer_inclusions_in_topic(
        self,
        message: "GetCountInfererInclusionsInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCountInfererInclusionsInTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetCountInfererInclusionsInTopic",
            message,
            GetCountInfererInclusionsInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_count_forecaster_inclusions_in_topic(
        self,
        message: "GetCountForecasterInclusionsInTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCountForecasterInclusionsInTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetCountForecasterInclusionsInTopic",
            message,
            GetCountForecasterInclusionsInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_reputers_for_topic(
        self,
        message: "GetActiveReputersForTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetActiveReputersForTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetActiveReputersForTopic",
            message,
            GetActiveReputersForTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_forecasters_for_topic(
        self,
        message: "GetActiveForecastersForTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetActiveForecastersForTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetActiveForecastersForTopic",
            message,
            GetActiveForecastersForTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_inferers_for_topic(
        self,
        message: "GetActiveInferersForTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetActiveInferersForTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/GetActiveInferersForTopic",
            message,
            GetActiveInferersForTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_global_worker(
        self,
        message: "IsWhitelistedGlobalWorkerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistedGlobalWorkerResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalWorker",
            message,
            IsWhitelistedGlobalWorkerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_global_reputer(
        self,
        message: "IsWhitelistedGlobalReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistedGlobalReputerResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalReputer",
            message,
            IsWhitelistedGlobalReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_global_admin(
        self,
        message: "IsWhitelistedGlobalAdminRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistedGlobalAdminResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalAdmin",
            message,
            IsWhitelistedGlobalAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_worker_whitelist_enabled(
        self,
        message: "IsTopicWorkerWhitelistEnabledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsTopicWorkerWhitelistEnabledResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsTopicWorkerWhitelistEnabled",
            message,
            IsTopicWorkerWhitelistEnabledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_reputer_whitelist_enabled(
        self,
        message: "IsTopicReputerWhitelistEnabledRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsTopicReputerWhitelistEnabledResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsTopicReputerWhitelistEnabled",
            message,
            IsTopicReputerWhitelistEnabledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_topic_creator(
        self,
        message: "IsWhitelistedTopicCreatorRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistedTopicCreatorResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedTopicCreator",
            message,
            IsWhitelistedTopicCreatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_global_actor(
        self,
        message: "IsWhitelistedGlobalActorRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistedGlobalActorResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedGlobalActor",
            message,
            IsWhitelistedGlobalActorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_topic_worker(
        self,
        message: "IsWhitelistedTopicWorkerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistedTopicWorkerResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedTopicWorker",
            message,
            IsWhitelistedTopicWorkerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_topic_reputer(
        self,
        message: "IsWhitelistedTopicReputerRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "IsWhitelistedTopicReputerResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/IsWhitelistedTopicReputer",
            message,
            IsWhitelistedTopicReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_all_global_whitelists(
        self,
        message: "CanUpdateAllGlobalWhitelistsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanUpdateAllGlobalWhitelistsResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanUpdateAllGlobalWhitelists",
            message,
            CanUpdateAllGlobalWhitelistsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_global_worker_whitelist(
        self,
        message: "CanUpdateGlobalWorkerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanUpdateGlobalWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanUpdateGlobalWorkerWhitelist",
            message,
            CanUpdateGlobalWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_global_reputer_whitelist(
        self,
        message: "CanUpdateGlobalReputerWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanUpdateGlobalReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanUpdateGlobalReputerWhitelist",
            message,
            CanUpdateGlobalReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_params(
        self,
        message: "CanUpdateParamsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanUpdateParamsResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanUpdateParams",
            message,
            CanUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_topic_whitelist(
        self,
        message: "CanUpdateTopicWhitelistRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanUpdateTopicWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanUpdateTopicWhitelist",
            message,
            CanUpdateTopicWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_create_topic(
        self,
        message: "CanCreateTopicRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanCreateTopicResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanCreateTopic",
            message,
            CanCreateTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_submit_worker_payload(
        self,
        message: "CanSubmitWorkerPayloadRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanSubmitWorkerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanSubmitWorkerPayload",
            message,
            CanSubmitWorkerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_submit_reputer_payload(
        self,
        message: "CanSubmitReputerPayloadRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CanSubmitReputerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v8.QueryService/CanSubmitReputerPayload",
            message,
            CanSubmitReputerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_initial_inferer_ema_score(
        self,
        message: "GetTopicInitialInfererEmaScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicInitialInfererEmaScoreResponse":
        """
        GetTopicInitialInfererEmaScore returns the initial EMA score for inferers in a topic
        """

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicInitialInfererEmaScore",
            message,
            GetTopicInitialInfererEmaScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_initial_forecaster_ema_score(
        self,
        message: "GetTopicInitialForecasterEmaScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicInitialForecasterEmaScoreResponse":
        """
        GetTopicInitialForecasterEmaScore returns the initial EMA score for forecasters in a topic
        """

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicInitialForecasterEmaScore",
            message,
            GetTopicInitialForecasterEmaScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_initial_reputer_ema_score(
        self,
        message: "GetTopicInitialReputerEmaScoreRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetTopicInitialReputerEmaScoreResponse":
        """
        GetTopicInitialReputerEmaScore returns the initial EMA score for reputers in a topic
        """

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetTopicInitialReputerEmaScore",
            message,
            GetTopicInitialReputerEmaScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_regret_std_norm(
        self,
        message: "GetLatestRegretStdNormRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestRegretStdNormResponse":
        """
        Get latest regret stdnorm for a topic
        """

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestRegretStdNorm",
            message,
            GetLatestRegretStdNormResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_inferer_weight(
        self,
        message: "GetLatestInfererWeightRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestInfererWeightResponse":
        """
        Get latest inferer weight for a topic and actor
        """

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestInfererWeight",
            message,
            GetLatestInfererWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_forecaster_weight(
        self,
        message: "GetLatestForecasterWeightRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetLatestForecasterWeightResponse":
        """
        Get latest forecaster weight for a topic and actor
        """

        return await self._unary_unary(
            "/emissions.v8.QueryService/GetLatestForecasterWeight",
            message,
            GetLatestForecasterWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .. import v3 as _v3__
