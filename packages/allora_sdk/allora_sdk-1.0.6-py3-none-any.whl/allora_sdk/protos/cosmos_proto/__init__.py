# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos_proto/cosmos.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("InterfaceDescriptor", "ScalarDescriptor", "ScalarType")

from dataclasses import dataclass

import betterproto2

from ..message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ScalarType(betterproto2.Enum):
    UNSPECIFIED = 0

    STRING = 1

    BYTES = 2

    betterproto_proto_names = {
        0: "SCALAR_TYPE_UNSPECIFIED",
        1: "SCALAR_TYPE_STRING",
        2: "SCALAR_TYPE_BYTES",
    }


@dataclass(eq=False, repr=False)
class InterfaceDescriptor(betterproto2.Message):
    """
    InterfaceDescriptor describes an interface type to be used with
    accepts_interface and implements_interface and declared by declare_interface.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    name is the name of the interface. It should be a short-name (without
    a period) such that the fully qualified name of the interface will be
    package.name, ex. for the package a.b and interface named C, the
    fully-qualified name will be a.b.C.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    description is a human-readable description of the interface and its
    purpose.
    """


default_message_pool.register_message(
    "cosmos_proto", "InterfaceDescriptor", InterfaceDescriptor
)


@dataclass(eq=False, repr=False)
class ScalarDescriptor(betterproto2.Message):
    """
    ScalarDescriptor describes an scalar type to be used with
    the scalar field option and declared by declare_scalar.
    Scalars extend simple protobuf built-in types with additional
    syntax and semantics, for instance to represent big integers.
    Scalars should ideally define an encoding such that there is only one
    valid syntactical representation for a given semantic meaning,
    i.e. the encoding should be deterministic.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    name is the name of the scalar. It should be a short-name (without
    a period) such that the fully qualified name of the scalar will be
    package.name, ex. for the package a.b and scalar named C, the
    fully-qualified name will be a.b.C.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    description is a human-readable description of the scalar and its
    encoding format. For instance a big integer or decimal scalar should
    specify precisely the expected encoding format.
    """

    field_type: "list[ScalarType]" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    field_type is the type of field with which this scalar can be used.
    Scalars can be used with one and only one type of field so that
    encoding standards and simple and clear. Currently only string and
    bytes fields are supported for scalars.
    """


default_message_pool.register_message(
    "cosmos_proto", "ScalarDescriptor", ScalarDescriptor
)
