# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mint/v3/events.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EventEcosystemTokenMintSet",
    "EventEmissionInfo",
    "EventParamsSet",
    "EventRecalculateTargetEmission",
    "EventRewardCurrentBlockEmission",
    "EventTokenomicsSet",
)

from dataclasses import dataclass

import betterproto2

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class EventEcosystemTokenMintSet(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    token_amount: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v3", "EventEcosystemTokenMintSet", EventEcosystemTokenMintSet
)


@dataclass(eq=False, repr=False)
class EventEmissionInfo(betterproto2.Message):
    ecosystem_balance: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    previous_block_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    ecosystem_mint_supply_remaining: "str" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )

    blocks_per_month: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)

    block_height_target_e_i_last_calculated: "int" = betterproto2.field(
        6, betterproto2.TYPE_UINT64
    )

    block_height_target_e_i_next_calculated: "int" = betterproto2.field(
        7, betterproto2.TYPE_UINT64
    )

    network_staked_tokens: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    locked_vesting_tokens_total: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    locked_vesting_tokens_investors_preseed: "str" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )

    locked_vesting_tokens_investors_seed: "str" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )

    locked_vesting_tokens_team: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)

    ecosystem_locked: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    circulating_supply: "str" = betterproto2.field(14, betterproto2.TYPE_STRING)

    max_supply: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    target_emission_rate_per_unit_staked_token: "str" = betterproto2.field(
        16, betterproto2.TYPE_STRING
    )
    """
    cosmossdk.io/math.LegacyDec
    """

    reputers_percent: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)
    """
    cosmossdk.io/math.LegacyDec
    """

    validators_percent: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)
    """
    cosmossdk.io/math.LegacyDec
    """

    maximum_monthly_emission_per_unit_staked_token: "str" = betterproto2.field(
        19, betterproto2.TYPE_STRING
    )
    """
    cosmossdk.io/math.LegacyDec
    """

    target_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        20, betterproto2.TYPE_STRING
    )
    """
    cosmossdk.io/math.LegacyDec
    """

    emission_per_unit_staked_token: "str" = betterproto2.field(
        21, betterproto2.TYPE_STRING
    )
    """
    cosmossdk.io/math.LegacyDec
    """

    emission_per_month: "str" = betterproto2.field(22, betterproto2.TYPE_STRING)

    block_emission: "str" = betterproto2.field(23, betterproto2.TYPE_STRING)

    validator_cut: "str" = betterproto2.field(24, betterproto2.TYPE_STRING)

    allora_rewards_cut: "str" = betterproto2.field(25, betterproto2.TYPE_STRING)

    previous_reward_emission_per_unit_staked_token: "str" = betterproto2.field(
        26, betterproto2.TYPE_STRING
    )
    """
    cosmossdk.io/math.LegacyDec
    """

    months_already_unlocked: "str" = betterproto2.field(27, betterproto2.TYPE_STRING)

    updated_months_unlocked: "str" = betterproto2.field(28, betterproto2.TYPE_STRING)


default_message_pool.register_message("mint.v3", "EventEmissionInfo", EventEmissionInfo)


@dataclass(eq=False, repr=False)
class EventParamsSet(betterproto2.Message):
    params: "_v5__.Params | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    blocks_per_month: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message("mint.v3", "EventParamsSet", EventParamsSet)


@dataclass(eq=False, repr=False)
class EventRecalculateTargetEmission(betterproto2.Message):
    emission_per_unit_staked_token: "str" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )

    emission_per_month: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    block_emission: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v3", "EventRecalculateTargetEmission", EventRecalculateTargetEmission
)


@dataclass(eq=False, repr=False)
class EventRewardCurrentBlockEmission(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    token_amount: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v3", "EventRewardCurrentBlockEmission", EventRewardCurrentBlockEmission
)


@dataclass(eq=False, repr=False)
class EventTokenomicsSet(betterproto2.Message):
    staked_token_amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    circulating_supply: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    emissions_amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v3", "EventTokenomicsSet", EventTokenomicsSet
)


from .. import v5 as _v5__
