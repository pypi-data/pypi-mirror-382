# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mint/v2/events.proto, mint/v2/tx.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EventEcosystemTokenMintSet",
    "EventTokenomicsSet",
    "MsgServiceAsyncStub",
    "MsgServiceStub",
    "RecalculateTargetEmissionRequest",
    "RecalculateTargetEmissionResponse",
    "UpdateParamsRequest",
    "UpdateParamsResponse",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc

from ...message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class EventEcosystemTokenMintSet(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    token_amount: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v2", "EventEcosystemTokenMintSet", EventEcosystemTokenMintSet
)


@dataclass(eq=False, repr=False)
class EventTokenomicsSet(betterproto2.Message):
    staked_token_amount: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    circulating_supply: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    emissions_amount: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v2", "EventTokenomicsSet", EventTokenomicsSet
)


@dataclass(eq=False, repr=False)
class RecalculateTargetEmissionRequest(betterproto2.Message):
    """
    Force a recalculation of the target emission right now.
    This indirectly controls recalculating the inflation rate for the network
    and the stakers APY %.
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "mint.v2", "RecalculateTargetEmissionRequest", RecalculateTargetEmissionRequest
)


@dataclass(eq=False, repr=False)
class RecalculateTargetEmissionResponse(betterproto2.Message):
    """
    response from recalculating the target emission
    """

    pass


default_message_pool.register_message(
    "mint.v2", "RecalculateTargetEmissionResponse", RecalculateTargetEmissionResponse
)


@dataclass(eq=False, repr=False)
class UpdateParamsRequest(betterproto2.Message):
    """
    UpdateParams allows an update to the minting parameters of the module.
    """

    sender: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    params: "_v1beta1__.Params | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    params defines the x/mint parameters to update.

    NOTE: All parameters must be supplied.
    """

    recalculate_target_emission: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    allow updating params to also force a recalculation of the target emission
    """

    blocks_per_month: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    blocksPerMonth is used/updateable by both the mint and emissions module.
    """


default_message_pool.register_message(
    "mint.v2", "UpdateParamsRequest", UpdateParamsRequest
)


@dataclass(eq=False, repr=False)
class UpdateParamsResponse(betterproto2.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.
    """

    pass


default_message_pool.register_message(
    "mint.v2", "UpdateParamsResponse", UpdateParamsResponse
)


class MsgServiceStub:
    """
    Msg defines the x/mint Msg service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_params(self, message: "UpdateParamsRequest") -> "UpdateParamsResponse":
        """
        update params. Only callable by someone on the emissions module whitelist
        """

        return self._channel.unary_unary(
            "/mint.v2.MsgService/UpdateParams",
            UpdateParamsRequest.SerializeToString,
            UpdateParamsResponse.FromString,
        )(message)

    def recalculate_target_emission(
        self, message: "RecalculateTargetEmissionRequest"
    ) -> "RecalculateTargetEmissionResponse":
        """
        force a target emission calculation right now. Otherwise waits until the
        end of params.BlocksPerMonth
        """

        return self._channel.unary_unary(
            "/mint.v2.MsgService/RecalculateTargetEmission",
            RecalculateTargetEmissionRequest.SerializeToString,
            RecalculateTargetEmissionResponse.FromString,
        )(message)


class MsgServiceAsyncStub(betterproto2.ServiceStub):
    """
    Msg defines the x/mint Msg service.
    """

    async def update_params(
        self,
        message: "UpdateParamsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateParamsResponse":
        """
        update params. Only callable by someone on the emissions module whitelist
        """

        return await self._unary_unary(
            "/mint.v2.MsgService/UpdateParams",
            message,
            UpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def recalculate_target_emission(
        self,
        message: "RecalculateTargetEmissionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RecalculateTargetEmissionResponse":
        """
        force a target emission calculation right now. Otherwise waits until the
        end of params.BlocksPerMonth
        """

        return await self._unary_unary(
            "/mint.v2.MsgService/RecalculateTargetEmission",
            message,
            RecalculateTargetEmissionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .. import v1beta1 as _v1beta1__
