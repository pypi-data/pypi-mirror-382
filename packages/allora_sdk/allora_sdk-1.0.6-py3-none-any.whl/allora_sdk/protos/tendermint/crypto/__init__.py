# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tendermint/crypto/keys.proto, tendermint/crypto/proof.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "DominoOp",
    "Proof",
    "ProofOp",
    "ProofOps",
    "PublicKey",
    "ValueOp",
)

from dataclasses import dataclass

import betterproto2

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class DominoOp(betterproto2.Message):
    key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    input: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    output: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message("tendermint.crypto", "DominoOp", DominoOp)


@dataclass(eq=False, repr=False)
class Proof(betterproto2.Message):
    total: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    index: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)

    leaf_hash: "bytes" = betterproto2.field(3, betterproto2.TYPE_BYTES)

    aunts: "list[bytes]" = betterproto2.field(4, betterproto2.TYPE_BYTES, repeated=True)


default_message_pool.register_message("tendermint.crypto", "Proof", Proof)


@dataclass(eq=False, repr=False)
class ProofOp(betterproto2.Message):
    """
    ProofOp defines an operation used for calculating Merkle root
    The data could be arbitrary format, providing nessecary data
    for example neighbouring node hash
    """

    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    key: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    data: "bytes" = betterproto2.field(3, betterproto2.TYPE_BYTES)


default_message_pool.register_message("tendermint.crypto", "ProofOp", ProofOp)


@dataclass(eq=False, repr=False)
class ProofOps(betterproto2.Message):
    """
    ProofOps is Merkle proof defined by the list of ProofOps
    """

    ops: "list[ProofOp]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("tendermint.crypto", "ProofOps", ProofOps)


@dataclass(eq=False, repr=False)
class PublicKey(betterproto2.Message):
    """
    PublicKey defines the keys available for use with Validators

    Oneofs:
        - sum:
    """

    ed25519: "bytes | None" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, optional=True, group="sum"
    )

    secp256k1: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True, group="sum"
    )


default_message_pool.register_message("tendermint.crypto", "PublicKey", PublicKey)


@dataclass(eq=False, repr=False)
class ValueOp(betterproto2.Message):
    key: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    Encoded in ProofOp.Key.
    """

    proof: "Proof | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    To encode in ProofOp.Data
    """


default_message_pool.register_message("tendermint.crypto", "ValueOp", ValueOp)
