# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    AddAtomEventResultGraphQLField,
    AddConditionsEntryResultGraphQLField,
    AddDatasetEventResultGraphQLField,
    AddProgramUserResultGraphQLField,
    AddSequenceEventResultGraphQLField,
    AddSlewEventResultGraphQLField,
    AddStepEventResultGraphQLField,
    AddTimeChargeCorrectionResultGraphQLField,
    AirMassRangeGraphQLField,
    AllConfigChangeEstimatesGraphQLField,
    AllDetectorEstimatesGraphQLField,
    AllocationGraphQLField,
    AngleGraphQLField,
    AsterismGroupGraphQLField,
    AsterismGroupSelectResultGraphQLField,
    AtomEventGraphQLField,
    AtomRecordGraphQLField,
    AtomRecordSelectResultGraphQLField,
    AttachmentGraphQLField,
    BandBrightnessIntegratedGraphQLField,
    BandBrightnessSurfaceGraphQLField,
    BandedTimeGraphQLField,
    BandNormalizedGraphQLField,
    BandNormalizedIntegratedGraphQLField,
    BandNormalizedSurfaceGraphQLField,
    CalculatedBandedTimeGraphQLField,
    CalculatedCategorizedTimeRangeGraphQLField,
    CalculatedExecutionDigestGraphQLField,
    CalculatedObservationWorkflowGraphQLField,
    CallForProposalsGraphQLField,
    CallForProposalsPartnerGraphQLField,
    CallsForProposalsSelectResultGraphQLField,
    CatalogInfoGraphQLField,
    CategorizedTimeGraphQLField,
    CategorizedTimeRangeGraphQLField,
    ChangeProgramUserRoleResultGraphQLField,
    CloneGroupResultGraphQLField,
    CloneObservationResultGraphQLField,
    CloneTargetResultGraphQLField,
    ConditionsEntryGraphQLField,
    ConditionsExpectationGraphQLField,
    ConditionsIntuitionGraphQLField,
    ConditionsMeasurementGraphQLField,
    ConfigChangeEstimateGraphQLField,
    ConfigurationConditionsGraphQLField,
    ConfigurationFlamingos2LongSlitGraphQLField,
    ConfigurationGmosNorthImagingGraphQLField,
    ConfigurationGmosNorthLongSlitGraphQLField,
    ConfigurationGmosSouthImagingGraphQLField,
    ConfigurationGmosSouthLongSlitGraphQLField,
    ConfigurationGraphQLField,
    ConfigurationObservingModeGraphQLField,
    ConfigurationRequestGraphQLField,
    ConfigurationRequestSelectResultGraphQLField,
    ConfigurationTargetGraphQLField,
    ConstraintSetGraphQLField,
    ConstraintSetGroupGraphQLField,
    ConstraintSetGroupSelectResultGraphQLField,
    CoordinateLimitsGraphQLField,
    CoordinatesGraphQLField,
    CreateCallForProposalsResultGraphQLField,
    CreateGroupResultGraphQLField,
    CreateObservationResultGraphQLField,
    CreateProgramNoteResultGraphQLField,
    CreateProgramResultGraphQLField,
    CreateProposalResultGraphQLField,
    CreateTargetResultGraphQLField,
    CreateUserInvitationResultGraphQLField,
    DatasetChronicleEntryGraphQLField,
    DatasetChronicleEntrySelectResultGraphQLField,
    DatasetEstimateGraphQLField,
    DatasetEventGraphQLField,
    DatasetGraphQLField,
    DatasetReferenceGraphQLField,
    DatasetSelectResultGraphQLField,
    DateIntervalGraphQLField,
    DeclinationArcGraphQLField,
    DeclinationGraphQLField,
    DeleteProgramUserResultGraphQLField,
    DeleteProposalResultGraphQLField,
    DetectorEstimateGraphQLField,
    ElevationRangeGraphQLField,
    EmailGraphQLField,
    EmissionLineIntegratedGraphQLField,
    EmissionLinesIntegratedGraphQLField,
    EmissionLinesSurfaceGraphQLField,
    EmissionLineSurfaceGraphQLField,
    ExecutionConfigGraphQLField,
    ExecutionDigestGraphQLField,
    ExecutionEventGraphQLField,
    ExecutionEventSelectResultGraphQLField,
    ExecutionGraphQLField,
    ExposureTimeModeGraphQLField,
    FilterTypeMetaGraphQLField,
    Flamingos2AtomGraphQLField,
    Flamingos2CustomMaskGraphQLField,
    Flamingos2DynamicGraphQLField,
    Flamingos2ExecutionConfigGraphQLField,
    Flamingos2ExecutionSequenceGraphQLField,
    Flamingos2FpuMaskGraphQLField,
    Flamingos2LongSlitGraphQLField,
    Flamingos2StaticGraphQLField,
    Flamingos2StepGraphQLField,
    FluxDensityContinuumIntegratedGraphQLField,
    FluxDensityContinuumSurfaceGraphQLField,
    FluxDensityEntryGraphQLField,
    GaussianSourceGraphQLField,
    GmosCcdModeGraphQLField,
    GmosCustomMaskGraphQLField,
    GmosNodAndShuffleGraphQLField,
    GmosNorthAtomGraphQLField,
    GmosNorthDynamicGraphQLField,
    GmosNorthExecutionConfigGraphQLField,
    GmosNorthExecutionSequenceGraphQLField,
    GmosNorthFpuGraphQLField,
    GmosNorthGratingConfigGraphQLField,
    GmosNorthImagingGraphQLField,
    GmosNorthLongSlitGraphQLField,
    GmosNorthStaticGraphQLField,
    GmosNorthStepGraphQLField,
    GmosSouthAtomGraphQLField,
    GmosSouthDynamicGraphQLField,
    GmosSouthExecutionConfigGraphQLField,
    GmosSouthExecutionSequenceGraphQLField,
    GmosSouthFpuGraphQLField,
    GmosSouthGratingConfigGraphQLField,
    GmosSouthImagingGraphQLField,
    GmosSouthLongSlitGraphQLField,
    GmosSouthStaticGraphQLField,
    GmosSouthStepGraphQLField,
    GoaPropertiesGraphQLField,
    GroupElementGraphQLField,
    GroupGraphQLField,
    GuideAvailabilityPeriodGraphQLField,
    GuideEnvironmentGraphQLField,
    GuideTargetGraphQLField,
    HourAngleRangeGraphQLField,
    ImagingConfigOptionGmosNorthGraphQLField,
    ImagingConfigOptionGmosSouthGraphQLField,
    ImagingConfigOptionGraphQLField,
    ImagingScienceRequirementsGraphQLField,
    ItcGraphQLField,
    ItcResultGraphQLField,
    ItcResultSetGraphQLField,
    LineFluxIntegratedGraphQLField,
    LineFluxSurfaceGraphQLField,
    LinkUserResultGraphQLField,
    NonsiderealGraphQLField,
    ObservationGraphQLField,
    ObservationReferenceGraphQLField,
    ObservationSelectResultGraphQLField,
    ObservationValidationGraphQLField,
    ObservationWorkflowGraphQLField,
    ObservingModeGraphQLField,
    ObservingModeGroupGraphQLField,
    ObservingModeGroupSelectResultGraphQLField,
    OffsetGraphQLField,
    OffsetPGraphQLField,
    OffsetQGraphQLField,
    OpportunityGraphQLField,
    ParallaxGraphQLField,
    PosAngleConstraintGraphQLField,
    ProgramGraphQLField,
    ProgramNoteGraphQLField,
    ProgramNoteSelectResultGraphQLField,
    ProgramSelectResultGraphQLField,
    ProgramUserGraphQLField,
    ProgramUserSelectResultGraphQLField,
    ProperMotionDeclinationGraphQLField,
    ProperMotionGraphQLField,
    ProperMotionRAGraphQLField,
    ProposalGraphQLField,
    ProposalReferenceGraphQLField,
    ProposalStatusMetaGraphQLField,
    RadialVelocityGraphQLField,
    RecordAtomResultGraphQLField,
    RecordDatasetResultGraphQLField,
    RecordFlamingos2StepResultGraphQLField,
    RecordFlamingos2VisitResultGraphQLField,
    RecordGmosNorthStepResultGraphQLField,
    RecordGmosNorthVisitResultGraphQLField,
    RecordGmosSouthStepResultGraphQLField,
    RecordGmosSouthVisitResultGraphQLField,
    RedeemUserInvitationResultGraphQLField,
    RegionGraphQLField,
    ResetAcquisitionResultGraphQLField,
    RevokeUserInvitationResultGraphQLField,
    RightAscensionArcGraphQLField,
    RightAscensionGraphQLField,
    ScienceRequirementsGraphQLField,
    SequenceDigestGraphQLField,
    SequenceEventGraphQLField,
    SetAllocationsResultGraphQLField,
    SetGuideTargetNameResultGraphQLField,
    SetProgramReferenceResultGraphQLField,
    SetProposalStatusResultGraphQLField,
    SetupTimeGraphQLField,
    SiderealGraphQLField,
    SignalToNoiseAtGraphQLField,
    SignalToNoiseExposureTimeModeGraphQLField,
    SiteCoordinateLimitsGraphQLField,
    SlewEventGraphQLField,
    SourceProfileGraphQLField,
    SpectralDefinitionIntegratedGraphQLField,
    SpectralDefinitionSurfaceGraphQLField,
    SpectroscopyConfigOptionFlamingos2GraphQLField,
    SpectroscopyConfigOptionGmosNorthGraphQLField,
    SpectroscopyConfigOptionGmosSouthGraphQLField,
    SpectroscopyConfigOptionGraphQLField,
    SpectroscopyScienceRequirementsGraphQLField,
    StepEstimateGraphQLField,
    StepEventGraphQLField,
    StepRecordGraphQLField,
    StepRecordSelectResultGraphQLField,
    TargetEnvironmentGraphQLField,
    TargetGraphQLField,
    TargetGroupGraphQLField,
    TargetGroupSelectResultGraphQLField,
    TargetSelectResultGraphQLField,
    TelescopeConfigGraphQLField,
    TimeAndCountExposureTimeModeGraphQLField,
    TimeChargeCorrectionGraphQLField,
    TimeChargeInvoiceGraphQLField,
    TimeSpanGraphQLField,
    TimestampIntervalGraphQLField,
    TimingWindowEndAfterGraphQLField,
    TimingWindowEndAtGraphQLField,
    TimingWindowEndUnion,
    TimingWindowGraphQLField,
    TimingWindowRepeatGraphQLField,
    UnlinkUserResultGraphQLField,
    UnnormalizedSedGraphQLField,
    UpdateAsterismsResultGraphQLField,
    UpdateAttachmentsResultGraphQLField,
    UpdateCallsForProposalsResultGraphQLField,
    UpdateConfigurationRequestsResultGraphQLField,
    UpdateDatasetsResultGraphQLField,
    UpdateGroupsResultGraphQLField,
    UpdateObservationsResultGraphQLField,
    UpdateProgramNotesResultGraphQLField,
    UpdateProgramsResultGraphQLField,
    UpdateProgramUsersResultGraphQLField,
    UpdateProposalResultGraphQLField,
    UpdateTargetsResultGraphQLField,
    UserGraphQLField,
    UserInvitationGraphQLField,
    UserProfileGraphQLField,
    VisitGraphQLField,
    VisitSelectResultGraphQLField,
    WavelengthDitherGraphQLField,
    WavelengthGraphQLField,
)


class AddAtomEventResultFields(GraphQLField):
    @classmethod
    def event(cls) -> "AtomEventFields":
        return AtomEventFields("event")

    def fields(
        self, *subfields: Union[AddAtomEventResultGraphQLField, "AtomEventFields"]
    ) -> "AddAtomEventResultFields":
        """Subfields should come from the AddAtomEventResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddAtomEventResultFields":
        self._alias = alias
        return self


class AddConditionsEntryResultFields(GraphQLField):
    @classmethod
    def conditions_entry(cls) -> "ConditionsEntryFields":
        return ConditionsEntryFields("conditionsEntry")

    def fields(
        self,
        *subfields: Union[AddConditionsEntryResultGraphQLField, "ConditionsEntryFields"]
    ) -> "AddConditionsEntryResultFields":
        """Subfields should come from the AddConditionsEntryResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddConditionsEntryResultFields":
        self._alias = alias
        return self


class AddDatasetEventResultFields(GraphQLField):
    @classmethod
    def event(cls) -> "DatasetEventFields":
        return DatasetEventFields("event")

    def fields(
        self, *subfields: Union[AddDatasetEventResultGraphQLField, "DatasetEventFields"]
    ) -> "AddDatasetEventResultFields":
        """Subfields should come from the AddDatasetEventResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddDatasetEventResultFields":
        self._alias = alias
        return self


class AddProgramUserResultFields(GraphQLField):
    @classmethod
    def program_user(cls) -> "ProgramUserFields":
        return ProgramUserFields("programUser")

    def fields(
        self, *subfields: Union[AddProgramUserResultGraphQLField, "ProgramUserFields"]
    ) -> "AddProgramUserResultFields":
        """Subfields should come from the AddProgramUserResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddProgramUserResultFields":
        self._alias = alias
        return self


class AddSequenceEventResultFields(GraphQLField):
    @classmethod
    def event(cls) -> "SequenceEventFields":
        return SequenceEventFields("event")

    def fields(
        self,
        *subfields: Union[AddSequenceEventResultGraphQLField, "SequenceEventFields"]
    ) -> "AddSequenceEventResultFields":
        """Subfields should come from the AddSequenceEventResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddSequenceEventResultFields":
        self._alias = alias
        return self


class AddSlewEventResultFields(GraphQLField):
    @classmethod
    def event(cls) -> "SlewEventFields":
        return SlewEventFields("event")

    def fields(
        self, *subfields: Union[AddSlewEventResultGraphQLField, "SlewEventFields"]
    ) -> "AddSlewEventResultFields":
        """Subfields should come from the AddSlewEventResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddSlewEventResultFields":
        self._alias = alias
        return self


class AddStepEventResultFields(GraphQLField):
    @classmethod
    def event(cls) -> "StepEventFields":
        return StepEventFields("event")

    def fields(
        self, *subfields: Union[AddStepEventResultGraphQLField, "StepEventFields"]
    ) -> "AddStepEventResultFields":
        """Subfields should come from the AddStepEventResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddStepEventResultFields":
        self._alias = alias
        return self


class AddTimeChargeCorrectionResultFields(GraphQLField):
    @classmethod
    def time_charge_invoice(cls) -> "TimeChargeInvoiceFields":
        return TimeChargeInvoiceFields("timeChargeInvoice")

    def fields(
        self,
        *subfields: Union[
            AddTimeChargeCorrectionResultGraphQLField, "TimeChargeInvoiceFields"
        ]
    ) -> "AddTimeChargeCorrectionResultFields":
        """Subfields should come from the AddTimeChargeCorrectionResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddTimeChargeCorrectionResultFields":
        self._alias = alias
        return self


class AirMassRangeFields(GraphQLField):
    min: "AirMassRangeGraphQLField" = AirMassRangeGraphQLField("min")
    max: "AirMassRangeGraphQLField" = AirMassRangeGraphQLField("max")

    def fields(self, *subfields: AirMassRangeGraphQLField) -> "AirMassRangeFields":
        """Subfields should come from the AirMassRangeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AirMassRangeFields":
        self._alias = alias
        return self


class AllConfigChangeEstimatesFields(GraphQLField):
    @classmethod
    def selected(cls) -> "ConfigChangeEstimateFields":
        return ConfigChangeEstimateFields("selected")

    index: "AllConfigChangeEstimatesGraphQLField" = (
        AllConfigChangeEstimatesGraphQLField("index")
    )

    @classmethod
    def all(cls) -> "ConfigChangeEstimateFields":
        return ConfigChangeEstimateFields("all")

    @classmethod
    def estimate(cls) -> "TimeSpanFields":
        return TimeSpanFields("estimate")

    def fields(
        self,
        *subfields: Union[
            AllConfigChangeEstimatesGraphQLField,
            "ConfigChangeEstimateFields",
            "TimeSpanFields",
        ]
    ) -> "AllConfigChangeEstimatesFields":
        """Subfields should come from the AllConfigChangeEstimatesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AllConfigChangeEstimatesFields":
        self._alias = alias
        return self


class AllDetectorEstimatesFields(GraphQLField):
    @classmethod
    def selected(cls) -> "DetectorEstimateFields":
        return DetectorEstimateFields("selected")

    index: "AllDetectorEstimatesGraphQLField" = AllDetectorEstimatesGraphQLField(
        "index"
    )

    @classmethod
    def all(cls) -> "DetectorEstimateFields":
        return DetectorEstimateFields("all")

    @classmethod
    def estimate(cls) -> "TimeSpanFields":
        return TimeSpanFields("estimate")

    def fields(
        self,
        *subfields: Union[
            AllDetectorEstimatesGraphQLField, "DetectorEstimateFields", "TimeSpanFields"
        ]
    ) -> "AllDetectorEstimatesFields":
        """Subfields should come from the AllDetectorEstimatesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AllDetectorEstimatesFields":
        self._alias = alias
        return self


class AllocationFields(GraphQLField):
    category: "AllocationGraphQLField" = AllocationGraphQLField("category")
    science_band: "AllocationGraphQLField" = AllocationGraphQLField("scienceBand")

    @classmethod
    def duration(cls) -> "TimeSpanFields":
        return TimeSpanFields("duration")

    def fields(
        self, *subfields: Union[AllocationGraphQLField, "TimeSpanFields"]
    ) -> "AllocationFields":
        """Subfields should come from the AllocationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AllocationFields":
        self._alias = alias
        return self


class AngleFields(GraphQLField):
    microarcseconds: "AngleGraphQLField" = AngleGraphQLField("microarcseconds")
    microseconds: "AngleGraphQLField" = AngleGraphQLField("microseconds")
    milliarcseconds: "AngleGraphQLField" = AngleGraphQLField("milliarcseconds")
    milliseconds: "AngleGraphQLField" = AngleGraphQLField("milliseconds")
    arcseconds: "AngleGraphQLField" = AngleGraphQLField("arcseconds")
    seconds: "AngleGraphQLField" = AngleGraphQLField("seconds")
    arcminutes: "AngleGraphQLField" = AngleGraphQLField("arcminutes")
    minutes: "AngleGraphQLField" = AngleGraphQLField("minutes")
    degrees: "AngleGraphQLField" = AngleGraphQLField("degrees")
    hours: "AngleGraphQLField" = AngleGraphQLField("hours")
    hms: "AngleGraphQLField" = AngleGraphQLField("hms")
    dms: "AngleGraphQLField" = AngleGraphQLField("dms")

    def fields(self, *subfields: AngleGraphQLField) -> "AngleFields":
        """Subfields should come from the AngleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AngleFields":
        self._alias = alias
        return self


class AsterismGroupFields(GraphQLField):
    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    @classmethod
    def observations(
        cls,
        include_deleted: bool,
        *,
        offset: Optional[Any] = None,
        limit: Optional[Any] = None
    ) -> "ObservationSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted},
            "OFFSET": {"type": "ObservationId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObservationSelectResultFields(
            "observations", arguments=cleared_arguments
        )

    @classmethod
    def asterism(cls) -> "TargetFields":
        return TargetFields("asterism")

    def fields(
        self,
        *subfields: Union[
            AsterismGroupGraphQLField,
            "ObservationSelectResultFields",
            "ProgramFields",
            "TargetFields",
        ]
    ) -> "AsterismGroupFields":
        """Subfields should come from the AsterismGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AsterismGroupFields":
        self._alias = alias
        return self


class AsterismGroupSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "AsterismGroupFields":
        return AsterismGroupFields("matches")

    has_more: "AsterismGroupSelectResultGraphQLField" = (
        AsterismGroupSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[AsterismGroupSelectResultGraphQLField, "AsterismGroupFields"]
    ) -> "AsterismGroupSelectResultFields":
        """Subfields should come from the AsterismGroupSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AsterismGroupSelectResultFields":
        self._alias = alias
        return self


class AtomEventFields(GraphQLField):
    id: "AtomEventGraphQLField" = AtomEventGraphQLField("id")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    received: "AtomEventGraphQLField" = AtomEventGraphQLField("received")
    event_type: "AtomEventGraphQLField" = AtomEventGraphQLField("eventType")

    @classmethod
    def atom(cls) -> "AtomRecordFields":
        return AtomRecordFields("atom")

    atom_stage: "AtomEventGraphQLField" = AtomEventGraphQLField("atomStage")
    client_id: "AtomEventGraphQLField" = AtomEventGraphQLField("clientId")

    def fields(
        self,
        *subfields: Union[
            AtomEventGraphQLField,
            "AtomRecordFields",
            "ObservationFields",
            "VisitFields",
        ]
    ) -> "AtomEventFields":
        """Subfields should come from the AtomEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AtomEventFields":
        self._alias = alias
        return self


class AtomRecordFields(GraphQLField):
    id: "AtomRecordGraphQLField" = AtomRecordGraphQLField("id")
    instrument: "AtomRecordGraphQLField" = AtomRecordGraphQLField("instrument")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    created: "AtomRecordGraphQLField" = AtomRecordGraphQLField("created")
    execution_state: "AtomRecordGraphQLField" = AtomRecordGraphQLField("executionState")

    @classmethod
    def interval(cls) -> "TimestampIntervalFields":
        return TimestampIntervalFields("interval")

    sequence_type: "AtomRecordGraphQLField" = AtomRecordGraphQLField("sequenceType")

    @classmethod
    def steps(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "StepRecordSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "Timestamp", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StepRecordSelectResultFields("steps", arguments=cleared_arguments)

    generated_id: "AtomRecordGraphQLField" = AtomRecordGraphQLField("generatedId")

    def fields(
        self,
        *subfields: Union[
            AtomRecordGraphQLField,
            "StepRecordSelectResultFields",
            "TimestampIntervalFields",
            "VisitFields",
        ]
    ) -> "AtomRecordFields":
        """Subfields should come from the AtomRecordFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AtomRecordFields":
        self._alias = alias
        return self


class AtomRecordSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "AtomRecordFields":
        return AtomRecordFields("matches")

    has_more: "AtomRecordSelectResultGraphQLField" = AtomRecordSelectResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[AtomRecordSelectResultGraphQLField, "AtomRecordFields"]
    ) -> "AtomRecordSelectResultFields":
        """Subfields should come from the AtomRecordSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AtomRecordSelectResultFields":
        self._alias = alias
        return self


class AttachmentFields(GraphQLField):
    id: "AttachmentGraphQLField" = AttachmentGraphQLField("id")
    attachment_type: "AttachmentGraphQLField" = AttachmentGraphQLField("attachmentType")
    file_name: "AttachmentGraphQLField" = AttachmentGraphQLField("fileName")
    description: "AttachmentGraphQLField" = AttachmentGraphQLField("description")
    checked: "AttachmentGraphQLField" = AttachmentGraphQLField("checked")
    file_size: "AttachmentGraphQLField" = AttachmentGraphQLField("fileSize")
    updated_at: "AttachmentGraphQLField" = AttachmentGraphQLField("updatedAt")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    def fields(
        self, *subfields: Union[AttachmentGraphQLField, "ProgramFields"]
    ) -> "AttachmentFields":
        """Subfields should come from the AttachmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AttachmentFields":
        self._alias = alias
        return self


class BandBrightnessIntegratedFields(GraphQLField):
    band: "BandBrightnessIntegratedGraphQLField" = BandBrightnessIntegratedGraphQLField(
        "band"
    )
    value: "BandBrightnessIntegratedGraphQLField" = (
        BandBrightnessIntegratedGraphQLField("value")
    )
    units: "BandBrightnessIntegratedGraphQLField" = (
        BandBrightnessIntegratedGraphQLField("units")
    )
    error: "BandBrightnessIntegratedGraphQLField" = (
        BandBrightnessIntegratedGraphQLField("error")
    )

    def fields(
        self, *subfields: BandBrightnessIntegratedGraphQLField
    ) -> "BandBrightnessIntegratedFields":
        """Subfields should come from the BandBrightnessIntegratedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BandBrightnessIntegratedFields":
        self._alias = alias
        return self


class BandBrightnessSurfaceFields(GraphQLField):
    band: "BandBrightnessSurfaceGraphQLField" = BandBrightnessSurfaceGraphQLField(
        "band"
    )
    value: "BandBrightnessSurfaceGraphQLField" = BandBrightnessSurfaceGraphQLField(
        "value"
    )
    units: "BandBrightnessSurfaceGraphQLField" = BandBrightnessSurfaceGraphQLField(
        "units"
    )
    error: "BandBrightnessSurfaceGraphQLField" = BandBrightnessSurfaceGraphQLField(
        "error"
    )

    def fields(
        self, *subfields: BandBrightnessSurfaceGraphQLField
    ) -> "BandBrightnessSurfaceFields":
        """Subfields should come from the BandBrightnessSurfaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BandBrightnessSurfaceFields":
        self._alias = alias
        return self


class BandNormalizedInterface(GraphQLField):
    @classmethod
    def sed(cls) -> "UnnormalizedSedFields":
        return UnnormalizedSedFields("sed")

    def fields(
        self, *subfields: Union[BandNormalizedGraphQLField, "UnnormalizedSedFields"]
    ) -> "BandNormalizedInterface":
        """Subfields should come from the BandNormalizedInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BandNormalizedInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "BandNormalizedInterface":
        self._inline_fragments[type_name] = subfields
        return self


class BandNormalizedIntegratedFields(GraphQLField):
    @classmethod
    def brightnesses(cls) -> "BandBrightnessIntegratedFields":
        return BandBrightnessIntegratedFields("brightnesses")

    @classmethod
    def sed(cls) -> "UnnormalizedSedFields":
        return UnnormalizedSedFields("sed")

    def fields(
        self,
        *subfields: Union[
            BandNormalizedIntegratedGraphQLField,
            "BandBrightnessIntegratedFields",
            "UnnormalizedSedFields",
        ]
    ) -> "BandNormalizedIntegratedFields":
        """Subfields should come from the BandNormalizedIntegratedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BandNormalizedIntegratedFields":
        self._alias = alias
        return self


class BandNormalizedSurfaceFields(GraphQLField):
    @classmethod
    def brightnesses(cls) -> "BandBrightnessSurfaceFields":
        return BandBrightnessSurfaceFields("brightnesses")

    @classmethod
    def sed(cls) -> "UnnormalizedSedFields":
        return UnnormalizedSedFields("sed")

    def fields(
        self,
        *subfields: Union[
            BandNormalizedSurfaceGraphQLField,
            "BandBrightnessSurfaceFields",
            "UnnormalizedSedFields",
        ]
    ) -> "BandNormalizedSurfaceFields":
        """Subfields should come from the BandNormalizedSurfaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BandNormalizedSurfaceFields":
        self._alias = alias
        return self


class BandedTimeFields(GraphQLField):
    band: "BandedTimeGraphQLField" = BandedTimeGraphQLField("band")

    @classmethod
    def time(cls) -> "CategorizedTimeFields":
        return CategorizedTimeFields("time")

    def fields(
        self, *subfields: Union[BandedTimeGraphQLField, "CategorizedTimeFields"]
    ) -> "BandedTimeFields":
        """Subfields should come from the BandedTimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BandedTimeFields":
        self._alias = alias
        return self


class CalculatedBandedTimeFields(GraphQLField):
    state: "CalculatedBandedTimeGraphQLField" = CalculatedBandedTimeGraphQLField(
        "state"
    )

    @classmethod
    def value(cls) -> "BandedTimeFields":
        return BandedTimeFields("value")

    def fields(
        self, *subfields: Union[CalculatedBandedTimeGraphQLField, "BandedTimeFields"]
    ) -> "CalculatedBandedTimeFields":
        """Subfields should come from the CalculatedBandedTimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CalculatedBandedTimeFields":
        self._alias = alias
        return self


class CalculatedCategorizedTimeRangeFields(GraphQLField):
    state: "CalculatedCategorizedTimeRangeGraphQLField" = (
        CalculatedCategorizedTimeRangeGraphQLField("state")
    )

    @classmethod
    def value(cls) -> "CategorizedTimeRangeFields":
        return CategorizedTimeRangeFields("value")

    def fields(
        self,
        *subfields: Union[
            CalculatedCategorizedTimeRangeGraphQLField, "CategorizedTimeRangeFields"
        ]
    ) -> "CalculatedCategorizedTimeRangeFields":
        """Subfields should come from the CalculatedCategorizedTimeRangeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CalculatedCategorizedTimeRangeFields":
        self._alias = alias
        return self


class CalculatedExecutionDigestFields(GraphQLField):
    state: "CalculatedExecutionDigestGraphQLField" = (
        CalculatedExecutionDigestGraphQLField("state")
    )

    @classmethod
    def value(cls) -> "ExecutionDigestFields":
        return ExecutionDigestFields("value")

    def fields(
        self,
        *subfields: Union[
            CalculatedExecutionDigestGraphQLField, "ExecutionDigestFields"
        ]
    ) -> "CalculatedExecutionDigestFields":
        """Subfields should come from the CalculatedExecutionDigestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CalculatedExecutionDigestFields":
        self._alias = alias
        return self


class CalculatedObservationWorkflowFields(GraphQLField):
    state: "CalculatedObservationWorkflowGraphQLField" = (
        CalculatedObservationWorkflowGraphQLField("state")
    )

    @classmethod
    def value(cls) -> "ObservationWorkflowFields":
        return ObservationWorkflowFields("value")

    def fields(
        self,
        *subfields: Union[
            CalculatedObservationWorkflowGraphQLField, "ObservationWorkflowFields"
        ]
    ) -> "CalculatedObservationWorkflowFields":
        """Subfields should come from the CalculatedObservationWorkflowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CalculatedObservationWorkflowFields":
        self._alias = alias
        return self


class CallForProposalsFields(GraphQLField):
    id: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField("id")
    title: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField("title")
    type: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField("type")
    semester: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField("semester")

    @classmethod
    def coordinate_limits(cls) -> "SiteCoordinateLimitsFields":
        return SiteCoordinateLimitsFields("coordinateLimits")

    @classmethod
    def active(cls) -> "DateIntervalFields":
        return DateIntervalFields("active")

    submission_deadline_default: "CallForProposalsGraphQLField" = (
        CallForProposalsGraphQLField("submissionDeadlineDefault")
    )

    @classmethod
    def partners(cls) -> "CallForProposalsPartnerFields":
        return CallForProposalsPartnerFields("partners")

    allows_non_partner_pi: "CallForProposalsGraphQLField" = (
        CallForProposalsGraphQLField("allowsNonPartnerPi")
    )
    non_partner_deadline: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField(
        "nonPartnerDeadline"
    )
    instruments: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField(
        "instruments"
    )
    proprietary_months: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField(
        "proprietaryMonths"
    )
    existence: "CallForProposalsGraphQLField" = CallForProposalsGraphQLField(
        "existence"
    )

    def fields(
        self,
        *subfields: Union[
            CallForProposalsGraphQLField,
            "CallForProposalsPartnerFields",
            "DateIntervalFields",
            "SiteCoordinateLimitsFields",
        ]
    ) -> "CallForProposalsFields":
        """Subfields should come from the CallForProposalsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CallForProposalsFields":
        self._alias = alias
        return self


class CallForProposalsPartnerFields(GraphQLField):
    partner: "CallForProposalsPartnerGraphQLField" = (
        CallForProposalsPartnerGraphQLField("partner")
    )
    submission_deadline_override: "CallForProposalsPartnerGraphQLField" = (
        CallForProposalsPartnerGraphQLField("submissionDeadlineOverride")
    )
    submission_deadline: "CallForProposalsPartnerGraphQLField" = (
        CallForProposalsPartnerGraphQLField("submissionDeadline")
    )

    def fields(
        self, *subfields: CallForProposalsPartnerGraphQLField
    ) -> "CallForProposalsPartnerFields":
        """Subfields should come from the CallForProposalsPartnerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CallForProposalsPartnerFields":
        self._alias = alias
        return self


class CallsForProposalsSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "CallForProposalsFields":
        return CallForProposalsFields("matches")

    has_more: "CallsForProposalsSelectResultGraphQLField" = (
        CallsForProposalsSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            CallsForProposalsSelectResultGraphQLField, "CallForProposalsFields"
        ]
    ) -> "CallsForProposalsSelectResultFields":
        """Subfields should come from the CallsForProposalsSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CallsForProposalsSelectResultFields":
        self._alias = alias
        return self


class CatalogInfoFields(GraphQLField):
    name: "CatalogInfoGraphQLField" = CatalogInfoGraphQLField("name")
    id: "CatalogInfoGraphQLField" = CatalogInfoGraphQLField("id")
    object_type: "CatalogInfoGraphQLField" = CatalogInfoGraphQLField("objectType")

    def fields(self, *subfields: CatalogInfoGraphQLField) -> "CatalogInfoFields":
        """Subfields should come from the CatalogInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CatalogInfoFields":
        self._alias = alias
        return self


class CategorizedTimeFields(GraphQLField):
    @classmethod
    def program(cls) -> "TimeSpanFields":
        return TimeSpanFields("program")

    @classmethod
    def non_charged(cls) -> "TimeSpanFields":
        return TimeSpanFields("nonCharged")

    @classmethod
    def total(cls) -> "TimeSpanFields":
        return TimeSpanFields("total")

    def fields(
        self, *subfields: Union[CategorizedTimeGraphQLField, "TimeSpanFields"]
    ) -> "CategorizedTimeFields":
        """Subfields should come from the CategorizedTimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CategorizedTimeFields":
        self._alias = alias
        return self


class CategorizedTimeRangeFields(GraphQLField):
    @classmethod
    def minimum(cls) -> "CategorizedTimeFields":
        return CategorizedTimeFields("minimum")

    @classmethod
    def maximum(cls) -> "CategorizedTimeFields":
        return CategorizedTimeFields("maximum")

    def fields(
        self,
        *subfields: Union[CategorizedTimeRangeGraphQLField, "CategorizedTimeFields"]
    ) -> "CategorizedTimeRangeFields":
        """Subfields should come from the CategorizedTimeRangeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CategorizedTimeRangeFields":
        self._alias = alias
        return self


class ChangeProgramUserRoleResultFields(GraphQLField):
    @classmethod
    def program_user(cls) -> "ProgramUserFields":
        return ProgramUserFields("programUser")

    def fields(
        self,
        *subfields: Union[ChangeProgramUserRoleResultGraphQLField, "ProgramUserFields"]
    ) -> "ChangeProgramUserRoleResultFields":
        """Subfields should come from the ChangeProgramUserRoleResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChangeProgramUserRoleResultFields":
        self._alias = alias
        return self


class CloneGroupResultFields(GraphQLField):
    @classmethod
    def original_group(cls) -> "GroupFields":
        return GroupFields("originalGroup")

    @classmethod
    def new_group(cls) -> "GroupFields":
        return GroupFields("newGroup")

    def fields(
        self, *subfields: Union[CloneGroupResultGraphQLField, "GroupFields"]
    ) -> "CloneGroupResultFields":
        """Subfields should come from the CloneGroupResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloneGroupResultFields":
        self._alias = alias
        return self


class CloneObservationResultFields(GraphQLField):
    @classmethod
    def original_observation(cls) -> "ObservationFields":
        return ObservationFields("originalObservation")

    @classmethod
    def new_observation(cls) -> "ObservationFields":
        return ObservationFields("newObservation")

    def fields(
        self, *subfields: Union[CloneObservationResultGraphQLField, "ObservationFields"]
    ) -> "CloneObservationResultFields":
        """Subfields should come from the CloneObservationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloneObservationResultFields":
        self._alias = alias
        return self


class CloneTargetResultFields(GraphQLField):
    @classmethod
    def original_target(cls) -> "TargetFields":
        return TargetFields("originalTarget")

    @classmethod
    def new_target(cls) -> "TargetFields":
        return TargetFields("newTarget")

    def fields(
        self, *subfields: Union[CloneTargetResultGraphQLField, "TargetFields"]
    ) -> "CloneTargetResultFields":
        """Subfields should come from the CloneTargetResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloneTargetResultFields":
        self._alias = alias
        return self


class ConditionsEntryFields(GraphQLField):
    id: "ConditionsEntryGraphQLField" = ConditionsEntryGraphQLField("id")
    transaction_id: "ConditionsEntryGraphQLField" = ConditionsEntryGraphQLField(
        "transactionId"
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    timestamp: "ConditionsEntryGraphQLField" = ConditionsEntryGraphQLField("timestamp")

    @classmethod
    def measurement(cls) -> "ConditionsMeasurementFields":
        return ConditionsMeasurementFields("measurement")

    @classmethod
    def intuition(cls) -> "ConditionsIntuitionFields":
        return ConditionsIntuitionFields("intuition")

    def fields(
        self,
        *subfields: Union[
            ConditionsEntryGraphQLField,
            "ConditionsIntuitionFields",
            "ConditionsMeasurementFields",
            "UserFields",
        ]
    ) -> "ConditionsEntryFields":
        """Subfields should come from the ConditionsEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConditionsEntryFields":
        self._alias = alias
        return self


class ConditionsExpectationFields(GraphQLField):
    type: "ConditionsExpectationGraphQLField" = ConditionsExpectationGraphQLField(
        "type"
    )

    @classmethod
    def timeframe(cls) -> "TimeSpanFields":
        return TimeSpanFields("timeframe")

    def fields(
        self, *subfields: Union[ConditionsExpectationGraphQLField, "TimeSpanFields"]
    ) -> "ConditionsExpectationFields":
        """Subfields should come from the ConditionsExpectationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConditionsExpectationFields":
        self._alias = alias
        return self


class ConditionsIntuitionFields(GraphQLField):
    @classmethod
    def expectation(cls) -> "ConditionsExpectationFields":
        return ConditionsExpectationFields("expectation")

    seeing_trend: "ConditionsIntuitionGraphQLField" = ConditionsIntuitionGraphQLField(
        "seeingTrend"
    )

    def fields(
        self,
        *subfields: Union[
            ConditionsIntuitionGraphQLField, "ConditionsExpectationFields"
        ]
    ) -> "ConditionsIntuitionFields":
        """Subfields should come from the ConditionsIntuitionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConditionsIntuitionFields":
        self._alias = alias
        return self


class ConditionsMeasurementFields(GraphQLField):
    source: "ConditionsMeasurementGraphQLField" = ConditionsMeasurementGraphQLField(
        "source"
    )

    @classmethod
    def seeing(cls) -> "AngleFields":
        return AngleFields("seeing")

    extinction: "ConditionsMeasurementGraphQLField" = ConditionsMeasurementGraphQLField(
        "extinction"
    )

    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    @classmethod
    def azimuth(cls) -> "AngleFields":
        return AngleFields("azimuth")

    @classmethod
    def elevation(cls) -> "AngleFields":
        return AngleFields("elevation")

    def fields(
        self,
        *subfields: Union[
            ConditionsMeasurementGraphQLField, "AngleFields", "WavelengthFields"
        ]
    ) -> "ConditionsMeasurementFields":
        """Subfields should come from the ConditionsMeasurementFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConditionsMeasurementFields":
        self._alias = alias
        return self


class ConfigChangeEstimateFields(GraphQLField):
    name: "ConfigChangeEstimateGraphQLField" = ConfigChangeEstimateGraphQLField("name")
    description: "ConfigChangeEstimateGraphQLField" = ConfigChangeEstimateGraphQLField(
        "description"
    )

    @classmethod
    def estimate(cls) -> "TimeSpanFields":
        return TimeSpanFields("estimate")

    def fields(
        self, *subfields: Union[ConfigChangeEstimateGraphQLField, "TimeSpanFields"]
    ) -> "ConfigChangeEstimateFields":
        """Subfields should come from the ConfigChangeEstimateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigChangeEstimateFields":
        self._alias = alias
        return self


class ConfigurationFields(GraphQLField):
    @classmethod
    def conditions(cls) -> "ConfigurationConditionsFields":
        return ConfigurationConditionsFields("conditions")

    @classmethod
    def target(cls) -> "ConfigurationTargetFields":
        return ConfigurationTargetFields("target")

    @classmethod
    def observing_mode(cls) -> "ConfigurationObservingModeFields":
        return ConfigurationObservingModeFields("observingMode")

    def fields(
        self,
        *subfields: Union[
            ConfigurationGraphQLField,
            "ConfigurationConditionsFields",
            "ConfigurationObservingModeFields",
            "ConfigurationTargetFields",
        ]
    ) -> "ConfigurationFields":
        """Subfields should come from the ConfigurationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationFields":
        self._alias = alias
        return self


class ConfigurationConditionsFields(GraphQLField):
    image_quality: "ConfigurationConditionsGraphQLField" = (
        ConfigurationConditionsGraphQLField("imageQuality")
    )
    cloud_extinction: "ConfigurationConditionsGraphQLField" = (
        ConfigurationConditionsGraphQLField("cloudExtinction")
    )
    sky_background: "ConfigurationConditionsGraphQLField" = (
        ConfigurationConditionsGraphQLField("skyBackground")
    )
    water_vapor: "ConfigurationConditionsGraphQLField" = (
        ConfigurationConditionsGraphQLField("waterVapor")
    )

    def fields(
        self, *subfields: ConfigurationConditionsGraphQLField
    ) -> "ConfigurationConditionsFields":
        """Subfields should come from the ConfigurationConditionsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationConditionsFields":
        self._alias = alias
        return self


class ConfigurationFlamingos2LongSlitFields(GraphQLField):
    disperser: "ConfigurationFlamingos2LongSlitGraphQLField" = (
        ConfigurationFlamingos2LongSlitGraphQLField("disperser")
    )

    def fields(
        self, *subfields: ConfigurationFlamingos2LongSlitGraphQLField
    ) -> "ConfigurationFlamingos2LongSlitFields":
        """Subfields should come from the ConfigurationFlamingos2LongSlitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationFlamingos2LongSlitFields":
        self._alias = alias
        return self


class ConfigurationGmosNorthImagingFields(GraphQLField):
    filters: "ConfigurationGmosNorthImagingGraphQLField" = (
        ConfigurationGmosNorthImagingGraphQLField("filters")
    )

    def fields(
        self, *subfields: ConfigurationGmosNorthImagingGraphQLField
    ) -> "ConfigurationGmosNorthImagingFields":
        """Subfields should come from the ConfigurationGmosNorthImagingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationGmosNorthImagingFields":
        self._alias = alias
        return self


class ConfigurationGmosNorthLongSlitFields(GraphQLField):
    grating: "ConfigurationGmosNorthLongSlitGraphQLField" = (
        ConfigurationGmosNorthLongSlitGraphQLField("grating")
    )

    def fields(
        self, *subfields: ConfigurationGmosNorthLongSlitGraphQLField
    ) -> "ConfigurationGmosNorthLongSlitFields":
        """Subfields should come from the ConfigurationGmosNorthLongSlitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationGmosNorthLongSlitFields":
        self._alias = alias
        return self


class ConfigurationGmosSouthImagingFields(GraphQLField):
    filters: "ConfigurationGmosSouthImagingGraphQLField" = (
        ConfigurationGmosSouthImagingGraphQLField("filters")
    )

    def fields(
        self, *subfields: ConfigurationGmosSouthImagingGraphQLField
    ) -> "ConfigurationGmosSouthImagingFields":
        """Subfields should come from the ConfigurationGmosSouthImagingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationGmosSouthImagingFields":
        self._alias = alias
        return self


class ConfigurationGmosSouthLongSlitFields(GraphQLField):
    grating: "ConfigurationGmosSouthLongSlitGraphQLField" = (
        ConfigurationGmosSouthLongSlitGraphQLField("grating")
    )

    def fields(
        self, *subfields: ConfigurationGmosSouthLongSlitGraphQLField
    ) -> "ConfigurationGmosSouthLongSlitFields":
        """Subfields should come from the ConfigurationGmosSouthLongSlitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationGmosSouthLongSlitFields":
        self._alias = alias
        return self


class ConfigurationObservingModeFields(GraphQLField):
    instrument: "ConfigurationObservingModeGraphQLField" = (
        ConfigurationObservingModeGraphQLField("instrument")
    )
    mode: "ConfigurationObservingModeGraphQLField" = (
        ConfigurationObservingModeGraphQLField("mode")
    )

    @classmethod
    def gmos_north_long_slit(cls) -> "ConfigurationGmosNorthLongSlitFields":
        return ConfigurationGmosNorthLongSlitFields("gmosNorthLongSlit")

    @classmethod
    def gmos_south_long_slit(cls) -> "ConfigurationGmosSouthLongSlitFields":
        return ConfigurationGmosSouthLongSlitFields("gmosSouthLongSlit")

    @classmethod
    def gmos_north_imaging(cls) -> "ConfigurationGmosNorthImagingFields":
        return ConfigurationGmosNorthImagingFields("gmosNorthImaging")

    @classmethod
    def gmos_south_imaging(cls) -> "ConfigurationGmosSouthImagingFields":
        return ConfigurationGmosSouthImagingFields("gmosSouthImaging")

    @classmethod
    def flamingos_2_long_slit(cls) -> "ConfigurationFlamingos2LongSlitFields":
        return ConfigurationFlamingos2LongSlitFields("flamingos2LongSlit")

    def fields(
        self,
        *subfields: Union[
            ConfigurationObservingModeGraphQLField,
            "ConfigurationFlamingos2LongSlitFields",
            "ConfigurationGmosNorthImagingFields",
            "ConfigurationGmosNorthLongSlitFields",
            "ConfigurationGmosSouthImagingFields",
            "ConfigurationGmosSouthLongSlitFields",
        ]
    ) -> "ConfigurationObservingModeFields":
        """Subfields should come from the ConfigurationObservingModeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationObservingModeFields":
        self._alias = alias
        return self


class ConfigurationRequestFields(GraphQLField):
    id: "ConfigurationRequestGraphQLField" = ConfigurationRequestGraphQLField("id")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    status: "ConfigurationRequestGraphQLField" = ConfigurationRequestGraphQLField(
        "status"
    )
    justification: "ConfigurationRequestGraphQLField" = (
        ConfigurationRequestGraphQLField("justification")
    )

    @classmethod
    def configuration(cls) -> "ConfigurationFields":
        return ConfigurationFields("configuration")

    applicable_observations: "ConfigurationRequestGraphQLField" = (
        ConfigurationRequestGraphQLField("applicableObservations")
    )

    def fields(
        self,
        *subfields: Union[
            ConfigurationRequestGraphQLField, "ConfigurationFields", "ProgramFields"
        ]
    ) -> "ConfigurationRequestFields":
        """Subfields should come from the ConfigurationRequestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationRequestFields":
        self._alias = alias
        return self


class ConfigurationRequestSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ConfigurationRequestFields":
        return ConfigurationRequestFields("matches")

    has_more: "ConfigurationRequestSelectResultGraphQLField" = (
        ConfigurationRequestSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            ConfigurationRequestSelectResultGraphQLField, "ConfigurationRequestFields"
        ]
    ) -> "ConfigurationRequestSelectResultFields":
        """Subfields should come from the ConfigurationRequestSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationRequestSelectResultFields":
        self._alias = alias
        return self


class ConfigurationTargetFields(GraphQLField):
    @classmethod
    def coordinates(cls) -> "CoordinatesFields":
        return CoordinatesFields("coordinates")

    @classmethod
    def region(cls) -> "RegionFields":
        return RegionFields("region")

    def fields(
        self,
        *subfields: Union[
            ConfigurationTargetGraphQLField, "CoordinatesFields", "RegionFields"
        ]
    ) -> "ConfigurationTargetFields":
        """Subfields should come from the ConfigurationTargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConfigurationTargetFields":
        self._alias = alias
        return self


class ConstraintSetFields(GraphQLField):
    image_quality: "ConstraintSetGraphQLField" = ConstraintSetGraphQLField(
        "imageQuality"
    )
    cloud_extinction: "ConstraintSetGraphQLField" = ConstraintSetGraphQLField(
        "cloudExtinction"
    )
    sky_background: "ConstraintSetGraphQLField" = ConstraintSetGraphQLField(
        "skyBackground"
    )
    water_vapor: "ConstraintSetGraphQLField" = ConstraintSetGraphQLField("waterVapor")

    @classmethod
    def elevation_range(cls) -> "ElevationRangeFields":
        return ElevationRangeFields("elevationRange")

    def fields(
        self, *subfields: Union[ConstraintSetGraphQLField, "ElevationRangeFields"]
    ) -> "ConstraintSetFields":
        """Subfields should come from the ConstraintSetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConstraintSetFields":
        self._alias = alias
        return self


class ConstraintSetGroupFields(GraphQLField):
    @classmethod
    def observations(
        cls,
        include_deleted: bool,
        *,
        offset: Optional[Any] = None,
        limit: Optional[Any] = None
    ) -> "ObservationSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted},
            "OFFSET": {"type": "ObservationId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObservationSelectResultFields(
            "observations", arguments=cleared_arguments
        )

    @classmethod
    def constraint_set(cls) -> "ConstraintSetFields":
        return ConstraintSetFields("constraintSet")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    def fields(
        self,
        *subfields: Union[
            ConstraintSetGroupGraphQLField,
            "ConstraintSetFields",
            "ObservationSelectResultFields",
            "ProgramFields",
        ]
    ) -> "ConstraintSetGroupFields":
        """Subfields should come from the ConstraintSetGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConstraintSetGroupFields":
        self._alias = alias
        return self


class ConstraintSetGroupSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ConstraintSetGroupFields":
        return ConstraintSetGroupFields("matches")

    has_more: "ConstraintSetGroupSelectResultGraphQLField" = (
        ConstraintSetGroupSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            ConstraintSetGroupSelectResultGraphQLField, "ConstraintSetGroupFields"
        ]
    ) -> "ConstraintSetGroupSelectResultFields":
        """Subfields should come from the ConstraintSetGroupSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConstraintSetGroupSelectResultFields":
        self._alias = alias
        return self


class CoordinateLimitsFields(GraphQLField):
    @classmethod
    def ra_start(cls) -> "RightAscensionFields":
        return RightAscensionFields("raStart")

    @classmethod
    def ra_end(cls) -> "RightAscensionFields":
        return RightAscensionFields("raEnd")

    @classmethod
    def dec_start(cls) -> "DeclinationFields":
        return DeclinationFields("decStart")

    @classmethod
    def dec_end(cls) -> "DeclinationFields":
        return DeclinationFields("decEnd")

    def fields(
        self,
        *subfields: Union[
            CoordinateLimitsGraphQLField, "DeclinationFields", "RightAscensionFields"
        ]
    ) -> "CoordinateLimitsFields":
        """Subfields should come from the CoordinateLimitsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CoordinateLimitsFields":
        self._alias = alias
        return self


class CoordinatesFields(GraphQLField):
    @classmethod
    def ra(cls) -> "RightAscensionFields":
        return RightAscensionFields("ra")

    @classmethod
    def dec(cls) -> "DeclinationFields":
        return DeclinationFields("dec")

    def fields(
        self,
        *subfields: Union[
            CoordinatesGraphQLField, "DeclinationFields", "RightAscensionFields"
        ]
    ) -> "CoordinatesFields":
        """Subfields should come from the CoordinatesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CoordinatesFields":
        self._alias = alias
        return self


class CreateCallForProposalsResultFields(GraphQLField):
    @classmethod
    def call_for_proposals(cls) -> "CallForProposalsFields":
        return CallForProposalsFields("callForProposals")

    def fields(
        self,
        *subfields: Union[
            CreateCallForProposalsResultGraphQLField, "CallForProposalsFields"
        ]
    ) -> "CreateCallForProposalsResultFields":
        """Subfields should come from the CreateCallForProposalsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCallForProposalsResultFields":
        self._alias = alias
        return self


class CreateGroupResultFields(GraphQLField):
    @classmethod
    def group(cls) -> "GroupFields":
        return GroupFields("group")

    def fields(
        self, *subfields: Union[CreateGroupResultGraphQLField, "GroupFields"]
    ) -> "CreateGroupResultFields":
        """Subfields should come from the CreateGroupResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateGroupResultFields":
        self._alias = alias
        return self


class CreateObservationResultFields(GraphQLField):
    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    def fields(
        self,
        *subfields: Union[CreateObservationResultGraphQLField, "ObservationFields"]
    ) -> "CreateObservationResultFields":
        """Subfields should come from the CreateObservationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateObservationResultFields":
        self._alias = alias
        return self


class CreateProgramNoteResultFields(GraphQLField):
    @classmethod
    def program_note(cls) -> "ProgramNoteFields":
        return ProgramNoteFields("programNote")

    def fields(
        self,
        *subfields: Union[CreateProgramNoteResultGraphQLField, "ProgramNoteFields"]
    ) -> "CreateProgramNoteResultFields":
        """Subfields should come from the CreateProgramNoteResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateProgramNoteResultFields":
        self._alias = alias
        return self


class CreateProgramResultFields(GraphQLField):
    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    def fields(
        self, *subfields: Union[CreateProgramResultGraphQLField, "ProgramFields"]
    ) -> "CreateProgramResultFields":
        """Subfields should come from the CreateProgramResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateProgramResultFields":
        self._alias = alias
        return self


class CreateProposalResultFields(GraphQLField):
    @classmethod
    def proposal(cls) -> "ProposalFields":
        return ProposalFields("proposal")

    def fields(
        self, *subfields: Union[CreateProposalResultGraphQLField, "ProposalFields"]
    ) -> "CreateProposalResultFields":
        """Subfields should come from the CreateProposalResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateProposalResultFields":
        self._alias = alias
        return self


class CreateTargetResultFields(GraphQLField):
    @classmethod
    def target(cls) -> "TargetFields":
        return TargetFields("target")

    def fields(
        self, *subfields: Union[CreateTargetResultGraphQLField, "TargetFields"]
    ) -> "CreateTargetResultFields":
        """Subfields should come from the CreateTargetResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateTargetResultFields":
        self._alias = alias
        return self


class CreateUserInvitationResultFields(GraphQLField):
    @classmethod
    def invitation(cls) -> "UserInvitationFields":
        return UserInvitationFields("invitation")

    key: "CreateUserInvitationResultGraphQLField" = (
        CreateUserInvitationResultGraphQLField("key")
    )

    def fields(
        self,
        *subfields: Union[
            CreateUserInvitationResultGraphQLField, "UserInvitationFields"
        ]
    ) -> "CreateUserInvitationResultFields":
        """Subfields should come from the CreateUserInvitationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateUserInvitationResultFields":
        self._alias = alias
        return self


class DatasetFields(GraphQLField):
    id: "DatasetGraphQLField" = DatasetGraphQLField("id")

    @classmethod
    def step(cls) -> "StepRecordFields":
        return StepRecordFields("step")

    index: "DatasetGraphQLField" = DatasetGraphQLField("index")

    @classmethod
    def reference(cls) -> "DatasetReferenceFields":
        return DatasetReferenceFields("reference")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    @classmethod
    def events(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "ExecutionEventSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "ExecutionEventId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExecutionEventSelectResultFields("events", arguments=cleared_arguments)

    filename: "DatasetGraphQLField" = DatasetGraphQLField("filename")
    qa_state: "DatasetGraphQLField" = DatasetGraphQLField("qaState")
    comment: "DatasetGraphQLField" = DatasetGraphQLField("comment")

    @classmethod
    def interval(cls) -> "TimestampIntervalFields":
        return TimestampIntervalFields("interval")

    is_written: "DatasetGraphQLField" = DatasetGraphQLField("isWritten")

    def fields(
        self,
        *subfields: Union[
            DatasetGraphQLField,
            "DatasetReferenceFields",
            "ExecutionEventSelectResultFields",
            "ObservationFields",
            "StepRecordFields",
            "TimestampIntervalFields",
            "VisitFields",
        ]
    ) -> "DatasetFields":
        """Subfields should come from the DatasetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetFields":
        self._alias = alias
        return self


class DatasetChronicleEntryFields(GraphQLField):
    id: "DatasetChronicleEntryGraphQLField" = DatasetChronicleEntryGraphQLField("id")
    transaction_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("transactionId")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    timestamp: "DatasetChronicleEntryGraphQLField" = DatasetChronicleEntryGraphQLField(
        "timestamp"
    )
    operation: "DatasetChronicleEntryGraphQLField" = DatasetChronicleEntryGraphQLField(
        "operation"
    )

    @classmethod
    def dataset(cls) -> "DatasetFields":
        return DatasetFields("dataset")

    mod_dataset_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modDatasetId")
    )
    mod_step_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modStepId")
    )
    mod_observation_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modObservationId")
    )
    mod_visit_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modVisitId")
    )
    mod_reference: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modReference")
    )
    mod_filename: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modFilename")
    )
    mod_qa_state: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modQaState")
    )
    mod_interval: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modInterval")
    )
    mod_comment: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("modComment")
    )
    new_dataset_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newDatasetId")
    )
    new_step_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newStepId")
    )
    new_observation_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newObservationId")
    )
    new_visit_id: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newVisitId")
    )
    new_reference: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newReference")
    )
    new_filename: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newFilename")
    )
    new_qa_state: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newQaState")
    )

    @classmethod
    def new_interval(cls) -> "TimestampIntervalFields":
        return TimestampIntervalFields("newInterval")

    new_comment: "DatasetChronicleEntryGraphQLField" = (
        DatasetChronicleEntryGraphQLField("newComment")
    )

    def fields(
        self,
        *subfields: Union[
            DatasetChronicleEntryGraphQLField,
            "DatasetFields",
            "TimestampIntervalFields",
            "UserFields",
        ]
    ) -> "DatasetChronicleEntryFields":
        """Subfields should come from the DatasetChronicleEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetChronicleEntryFields":
        self._alias = alias
        return self


class DatasetChronicleEntrySelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "DatasetChronicleEntryFields":
        return DatasetChronicleEntryFields("matches")

    has_more: "DatasetChronicleEntrySelectResultGraphQLField" = (
        DatasetChronicleEntrySelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            DatasetChronicleEntrySelectResultGraphQLField, "DatasetChronicleEntryFields"
        ]
    ) -> "DatasetChronicleEntrySelectResultFields":
        """Subfields should come from the DatasetChronicleEntrySelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetChronicleEntrySelectResultFields":
        self._alias = alias
        return self


class DatasetEstimateFields(GraphQLField):
    @classmethod
    def exposure(cls) -> "TimeSpanFields":
        return TimeSpanFields("exposure")

    @classmethod
    def readout(cls) -> "TimeSpanFields":
        return TimeSpanFields("readout")

    @classmethod
    def write(cls) -> "TimeSpanFields":
        return TimeSpanFields("write")

    @classmethod
    def estimate(cls) -> "TimeSpanFields":
        return TimeSpanFields("estimate")

    def fields(
        self, *subfields: Union[DatasetEstimateGraphQLField, "TimeSpanFields"]
    ) -> "DatasetEstimateFields":
        """Subfields should come from the DatasetEstimateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetEstimateFields":
        self._alias = alias
        return self


class DatasetEventFields(GraphQLField):
    id: "DatasetEventGraphQLField" = DatasetEventGraphQLField("id")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    received: "DatasetEventGraphQLField" = DatasetEventGraphQLField("received")
    event_type: "DatasetEventGraphQLField" = DatasetEventGraphQLField("eventType")

    @classmethod
    def atom(cls) -> "AtomRecordFields":
        return AtomRecordFields("atom")

    @classmethod
    def step(cls) -> "StepRecordFields":
        return StepRecordFields("step")

    dataset_stage: "DatasetEventGraphQLField" = DatasetEventGraphQLField("datasetStage")

    @classmethod
    def dataset(cls) -> "DatasetFields":
        return DatasetFields("dataset")

    client_id: "DatasetEventGraphQLField" = DatasetEventGraphQLField("clientId")

    def fields(
        self,
        *subfields: Union[
            DatasetEventGraphQLField,
            "AtomRecordFields",
            "DatasetFields",
            "ObservationFields",
            "StepRecordFields",
            "VisitFields",
        ]
    ) -> "DatasetEventFields":
        """Subfields should come from the DatasetEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetEventFields":
        self._alias = alias
        return self


class DatasetReferenceFields(GraphQLField):
    label: "DatasetReferenceGraphQLField" = DatasetReferenceGraphQLField("label")

    @classmethod
    def observation(cls) -> "ObservationReferenceFields":
        return ObservationReferenceFields("observation")

    step_index: "DatasetReferenceGraphQLField" = DatasetReferenceGraphQLField(
        "stepIndex"
    )
    exposure_index: "DatasetReferenceGraphQLField" = DatasetReferenceGraphQLField(
        "exposureIndex"
    )

    def fields(
        self,
        *subfields: Union[DatasetReferenceGraphQLField, "ObservationReferenceFields"]
    ) -> "DatasetReferenceFields":
        """Subfields should come from the DatasetReferenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetReferenceFields":
        self._alias = alias
        return self


class DatasetSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "DatasetFields":
        return DatasetFields("matches")

    has_more: "DatasetSelectResultGraphQLField" = DatasetSelectResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[DatasetSelectResultGraphQLField, "DatasetFields"]
    ) -> "DatasetSelectResultFields":
        """Subfields should come from the DatasetSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetSelectResultFields":
        self._alias = alias
        return self


class DateIntervalFields(GraphQLField):
    start: "DateIntervalGraphQLField" = DateIntervalGraphQLField("start")
    end: "DateIntervalGraphQLField" = DateIntervalGraphQLField("end")

    def fields(self, *subfields: DateIntervalGraphQLField) -> "DateIntervalFields":
        """Subfields should come from the DateIntervalFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DateIntervalFields":
        self._alias = alias
        return self


class DeclinationFields(GraphQLField):
    dms: "DeclinationGraphQLField" = DeclinationGraphQLField("dms")
    degrees: "DeclinationGraphQLField" = DeclinationGraphQLField("degrees")
    microarcseconds: "DeclinationGraphQLField" = DeclinationGraphQLField(
        "microarcseconds"
    )

    def fields(self, *subfields: DeclinationGraphQLField) -> "DeclinationFields":
        """Subfields should come from the DeclinationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeclinationFields":
        self._alias = alias
        return self


class DeclinationArcFields(GraphQLField):
    type: "DeclinationArcGraphQLField" = DeclinationArcGraphQLField("type")

    @classmethod
    def start(cls) -> "DeclinationFields":
        return DeclinationFields("start")

    @classmethod
    def end(cls) -> "DeclinationFields":
        return DeclinationFields("end")

    def fields(
        self, *subfields: Union[DeclinationArcGraphQLField, "DeclinationFields"]
    ) -> "DeclinationArcFields":
        """Subfields should come from the DeclinationArcFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeclinationArcFields":
        self._alias = alias
        return self


class DeleteProgramUserResultFields(GraphQLField):
    result: "DeleteProgramUserResultGraphQLField" = DeleteProgramUserResultGraphQLField(
        "result"
    )

    def fields(
        self, *subfields: DeleteProgramUserResultGraphQLField
    ) -> "DeleteProgramUserResultFields":
        """Subfields should come from the DeleteProgramUserResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProgramUserResultFields":
        self._alias = alias
        return self


class DeleteProposalResultFields(GraphQLField):
    result: "DeleteProposalResultGraphQLField" = DeleteProposalResultGraphQLField(
        "result"
    )

    def fields(
        self, *subfields: DeleteProposalResultGraphQLField
    ) -> "DeleteProposalResultFields":
        """Subfields should come from the DeleteProposalResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProposalResultFields":
        self._alias = alias
        return self


class DetectorEstimateFields(GraphQLField):
    name: "DetectorEstimateGraphQLField" = DetectorEstimateGraphQLField("name")
    description: "DetectorEstimateGraphQLField" = DetectorEstimateGraphQLField(
        "description"
    )

    @classmethod
    def dataset(cls) -> "DatasetEstimateFields":
        return DatasetEstimateFields("dataset")

    count: "DetectorEstimateGraphQLField" = DetectorEstimateGraphQLField("count")

    @classmethod
    def estimate(cls) -> "TimeSpanFields":
        return TimeSpanFields("estimate")

    def fields(
        self,
        *subfields: Union[
            DetectorEstimateGraphQLField, "DatasetEstimateFields", "TimeSpanFields"
        ]
    ) -> "DetectorEstimateFields":
        """Subfields should come from the DetectorEstimateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DetectorEstimateFields":
        self._alias = alias
        return self


class ElevationRangeFields(GraphQLField):
    @classmethod
    def air_mass(cls) -> "AirMassRangeFields":
        return AirMassRangeFields("airMass")

    @classmethod
    def hour_angle(cls) -> "HourAngleRangeFields":
        return HourAngleRangeFields("hourAngle")

    def fields(
        self,
        *subfields: Union[
            ElevationRangeGraphQLField, "AirMassRangeFields", "HourAngleRangeFields"
        ]
    ) -> "ElevationRangeFields":
        """Subfields should come from the ElevationRangeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ElevationRangeFields":
        self._alias = alias
        return self


class EmailFields(GraphQLField):
    sender_email: "EmailGraphQLField" = EmailGraphQLField("senderEmail")
    recipient_email: "EmailGraphQLField" = EmailGraphQLField("recipientEmail")
    subject: "EmailGraphQLField" = EmailGraphQLField("subject")
    text_message: "EmailGraphQLField" = EmailGraphQLField("textMessage")
    html_message: "EmailGraphQLField" = EmailGraphQLField("htmlMessage")
    original_time: "EmailGraphQLField" = EmailGraphQLField("originalTime")
    status: "EmailGraphQLField" = EmailGraphQLField("status")
    status_time: "EmailGraphQLField" = EmailGraphQLField("statusTime")

    def fields(self, *subfields: EmailGraphQLField) -> "EmailFields":
        """Subfields should come from the EmailFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailFields":
        self._alias = alias
        return self


class EmissionLineIntegratedFields(GraphQLField):
    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    line_width: "EmissionLineIntegratedGraphQLField" = (
        EmissionLineIntegratedGraphQLField("lineWidth")
    )

    @classmethod
    def line_flux(cls) -> "LineFluxIntegratedFields":
        return LineFluxIntegratedFields("lineFlux")

    def fields(
        self,
        *subfields: Union[
            EmissionLineIntegratedGraphQLField,
            "LineFluxIntegratedFields",
            "WavelengthFields",
        ]
    ) -> "EmissionLineIntegratedFields":
        """Subfields should come from the EmissionLineIntegratedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmissionLineIntegratedFields":
        self._alias = alias
        return self


class EmissionLineSurfaceFields(GraphQLField):
    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    line_width: "EmissionLineSurfaceGraphQLField" = EmissionLineSurfaceGraphQLField(
        "lineWidth"
    )

    @classmethod
    def line_flux(cls) -> "LineFluxSurfaceFields":
        return LineFluxSurfaceFields("lineFlux")

    def fields(
        self,
        *subfields: Union[
            EmissionLineSurfaceGraphQLField, "LineFluxSurfaceFields", "WavelengthFields"
        ]
    ) -> "EmissionLineSurfaceFields":
        """Subfields should come from the EmissionLineSurfaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmissionLineSurfaceFields":
        self._alias = alias
        return self


class EmissionLinesIntegratedFields(GraphQLField):
    @classmethod
    def lines(cls) -> "EmissionLineIntegratedFields":
        return EmissionLineIntegratedFields("lines")

    @classmethod
    def flux_density_continuum(cls) -> "FluxDensityContinuumIntegratedFields":
        return FluxDensityContinuumIntegratedFields("fluxDensityContinuum")

    def fields(
        self,
        *subfields: Union[
            EmissionLinesIntegratedGraphQLField,
            "EmissionLineIntegratedFields",
            "FluxDensityContinuumIntegratedFields",
        ]
    ) -> "EmissionLinesIntegratedFields":
        """Subfields should come from the EmissionLinesIntegratedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmissionLinesIntegratedFields":
        self._alias = alias
        return self


class EmissionLinesSurfaceFields(GraphQLField):
    @classmethod
    def lines(cls) -> "EmissionLineSurfaceFields":
        return EmissionLineSurfaceFields("lines")

    @classmethod
    def flux_density_continuum(cls) -> "FluxDensityContinuumSurfaceFields":
        return FluxDensityContinuumSurfaceFields("fluxDensityContinuum")

    def fields(
        self,
        *subfields: Union[
            EmissionLinesSurfaceGraphQLField,
            "EmissionLineSurfaceFields",
            "FluxDensityContinuumSurfaceFields",
        ]
    ) -> "EmissionLinesSurfaceFields":
        """Subfields should come from the EmissionLinesSurfaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmissionLinesSurfaceFields":
        self._alias = alias
        return self


class ExecutionFields(GraphQLField):
    @classmethod
    def digest(cls) -> "CalculatedExecutionDigestFields":
        return CalculatedExecutionDigestFields("digest")

    @classmethod
    def config(cls, *, future_limit: Optional[Any] = None) -> "ExecutionConfigFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "futureLimit": {"type": "NonNegInt", "value": future_limit}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExecutionConfigFields("config", arguments=cleared_arguments)

    execution_state: "ExecutionGraphQLField" = ExecutionGraphQLField("executionState")

    @classmethod
    def atom_records(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "AtomRecordSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "Timestamp", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AtomRecordSelectResultFields("atomRecords", arguments=cleared_arguments)

    @classmethod
    def datasets(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "DatasetSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "DatasetId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetSelectResultFields("datasets", arguments=cleared_arguments)

    @classmethod
    def events(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "ExecutionEventSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "ExecutionEventId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExecutionEventSelectResultFields("events", arguments=cleared_arguments)

    @classmethod
    def visits(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "VisitSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "VisitId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VisitSelectResultFields("visits", arguments=cleared_arguments)

    @classmethod
    def time_charge(cls) -> "CategorizedTimeFields":
        return CategorizedTimeFields("timeCharge")

    def fields(
        self,
        *subfields: Union[
            ExecutionGraphQLField,
            "AtomRecordSelectResultFields",
            "CalculatedExecutionDigestFields",
            "CategorizedTimeFields",
            "DatasetSelectResultFields",
            "ExecutionConfigFields",
            "ExecutionEventSelectResultFields",
            "VisitSelectResultFields",
        ]
    ) -> "ExecutionFields":
        """Subfields should come from the ExecutionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExecutionFields":
        self._alias = alias
        return self


class ExecutionConfigFields(GraphQLField):
    instrument: "ExecutionConfigGraphQLField" = ExecutionConfigGraphQLField(
        "instrument"
    )

    @classmethod
    def flamingos_2(cls) -> "Flamingos2ExecutionConfigFields":
        return Flamingos2ExecutionConfigFields("flamingos2")

    @classmethod
    def gmos_north(cls) -> "GmosNorthExecutionConfigFields":
        return GmosNorthExecutionConfigFields("gmosNorth")

    @classmethod
    def gmos_south(cls) -> "GmosSouthExecutionConfigFields":
        return GmosSouthExecutionConfigFields("gmosSouth")

    def fields(
        self,
        *subfields: Union[
            ExecutionConfigGraphQLField,
            "Flamingos2ExecutionConfigFields",
            "GmosNorthExecutionConfigFields",
            "GmosSouthExecutionConfigFields",
        ]
    ) -> "ExecutionConfigFields":
        """Subfields should come from the ExecutionConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExecutionConfigFields":
        self._alias = alias
        return self


class ExecutionDigestFields(GraphQLField):
    @classmethod
    def setup(cls) -> "SetupTimeFields":
        return SetupTimeFields("setup")

    @classmethod
    def acquisition(cls) -> "SequenceDigestFields":
        return SequenceDigestFields("acquisition")

    @classmethod
    def science(cls) -> "SequenceDigestFields":
        return SequenceDigestFields("science")

    def fields(
        self,
        *subfields: Union[
            ExecutionDigestGraphQLField, "SequenceDigestFields", "SetupTimeFields"
        ]
    ) -> "ExecutionDigestFields":
        """Subfields should come from the ExecutionDigestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExecutionDigestFields":
        self._alias = alias
        return self


class ExecutionEventInterface(GraphQLField):
    id: "ExecutionEventGraphQLField" = ExecutionEventGraphQLField("id")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    received: "ExecutionEventGraphQLField" = ExecutionEventGraphQLField("received")
    event_type: "ExecutionEventGraphQLField" = ExecutionEventGraphQLField("eventType")
    client_id: "ExecutionEventGraphQLField" = ExecutionEventGraphQLField("clientId")

    def fields(
        self,
        *subfields: Union[
            ExecutionEventGraphQLField, "ObservationFields", "VisitFields"
        ]
    ) -> "ExecutionEventInterface":
        """Subfields should come from the ExecutionEventInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExecutionEventInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ExecutionEventInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ExecutionEventSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ExecutionEventInterface":
        return ExecutionEventInterface("matches")

    has_more: "ExecutionEventSelectResultGraphQLField" = (
        ExecutionEventSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            ExecutionEventSelectResultGraphQLField, "ExecutionEventInterface"
        ]
    ) -> "ExecutionEventSelectResultFields":
        """Subfields should come from the ExecutionEventSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExecutionEventSelectResultFields":
        self._alias = alias
        return self


class ExposureTimeModeFields(GraphQLField):
    @classmethod
    def signal_to_noise(cls) -> "SignalToNoiseExposureTimeModeFields":
        return SignalToNoiseExposureTimeModeFields("signalToNoise")

    @classmethod
    def time_and_count(cls) -> "TimeAndCountExposureTimeModeFields":
        return TimeAndCountExposureTimeModeFields("timeAndCount")

    def fields(
        self,
        *subfields: Union[
            ExposureTimeModeGraphQLField,
            "SignalToNoiseExposureTimeModeFields",
            "TimeAndCountExposureTimeModeFields",
        ]
    ) -> "ExposureTimeModeFields":
        """Subfields should come from the ExposureTimeModeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExposureTimeModeFields":
        self._alias = alias
        return self


class FilterTypeMetaFields(GraphQLField):
    tag: "FilterTypeMetaGraphQLField" = FilterTypeMetaGraphQLField("tag")
    short_name: "FilterTypeMetaGraphQLField" = FilterTypeMetaGraphQLField("shortName")
    long_name: "FilterTypeMetaGraphQLField" = FilterTypeMetaGraphQLField("longName")

    def fields(self, *subfields: FilterTypeMetaGraphQLField) -> "FilterTypeMetaFields":
        """Subfields should come from the FilterTypeMetaFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FilterTypeMetaFields":
        self._alias = alias
        return self


class Flamingos2AtomFields(GraphQLField):
    id: "Flamingos2AtomGraphQLField" = Flamingos2AtomGraphQLField("id")
    description: "Flamingos2AtomGraphQLField" = Flamingos2AtomGraphQLField(
        "description"
    )
    observe_class: "Flamingos2AtomGraphQLField" = Flamingos2AtomGraphQLField(
        "observeClass"
    )

    @classmethod
    def steps(cls) -> "Flamingos2StepFields":
        return Flamingos2StepFields("steps")

    def fields(
        self, *subfields: Union[Flamingos2AtomGraphQLField, "Flamingos2StepFields"]
    ) -> "Flamingos2AtomFields":
        """Subfields should come from the Flamingos2AtomFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2AtomFields":
        self._alias = alias
        return self


class Flamingos2CustomMaskFields(GraphQLField):
    filename: "Flamingos2CustomMaskGraphQLField" = Flamingos2CustomMaskGraphQLField(
        "filename"
    )
    slit_width: "Flamingos2CustomMaskGraphQLField" = Flamingos2CustomMaskGraphQLField(
        "slitWidth"
    )

    def fields(
        self, *subfields: Flamingos2CustomMaskGraphQLField
    ) -> "Flamingos2CustomMaskFields":
        """Subfields should come from the Flamingos2CustomMaskFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2CustomMaskFields":
        self._alias = alias
        return self


class Flamingos2DynamicFields(GraphQLField):
    @classmethod
    def exposure(cls) -> "TimeSpanFields":
        return TimeSpanFields("exposure")

    disperser: "Flamingos2DynamicGraphQLField" = Flamingos2DynamicGraphQLField(
        "disperser"
    )
    filter: "Flamingos2DynamicGraphQLField" = Flamingos2DynamicGraphQLField("filter")
    read_mode: "Flamingos2DynamicGraphQLField" = Flamingos2DynamicGraphQLField(
        "readMode"
    )
    lyot_wheel: "Flamingos2DynamicGraphQLField" = Flamingos2DynamicGraphQLField(
        "lyotWheel"
    )

    @classmethod
    def fpu(cls) -> "Flamingos2FpuMaskFields":
        return Flamingos2FpuMaskFields("fpu")

    decker: "Flamingos2DynamicGraphQLField" = Flamingos2DynamicGraphQLField("decker")
    readout_mode: "Flamingos2DynamicGraphQLField" = Flamingos2DynamicGraphQLField(
        "readoutMode"
    )
    reads: "Flamingos2DynamicGraphQLField" = Flamingos2DynamicGraphQLField("reads")

    @classmethod
    def central_wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("centralWavelength")

    def fields(
        self,
        *subfields: Union[
            Flamingos2DynamicGraphQLField,
            "Flamingos2FpuMaskFields",
            "TimeSpanFields",
            "WavelengthFields",
        ]
    ) -> "Flamingos2DynamicFields":
        """Subfields should come from the Flamingos2DynamicFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2DynamicFields":
        self._alias = alias
        return self


class Flamingos2ExecutionConfigFields(GraphQLField):
    @classmethod
    def static(cls) -> "Flamingos2StaticFields":
        return Flamingos2StaticFields("static")

    @classmethod
    def acquisition(cls) -> "Flamingos2ExecutionSequenceFields":
        return Flamingos2ExecutionSequenceFields("acquisition")

    @classmethod
    def science(cls) -> "Flamingos2ExecutionSequenceFields":
        return Flamingos2ExecutionSequenceFields("science")

    def fields(
        self,
        *subfields: Union[
            Flamingos2ExecutionConfigGraphQLField,
            "Flamingos2ExecutionSequenceFields",
            "Flamingos2StaticFields",
        ]
    ) -> "Flamingos2ExecutionConfigFields":
        """Subfields should come from the Flamingos2ExecutionConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2ExecutionConfigFields":
        self._alias = alias
        return self


class Flamingos2ExecutionSequenceFields(GraphQLField):
    @classmethod
    def next_atom(cls) -> "Flamingos2AtomFields":
        return Flamingos2AtomFields("nextAtom")

    @classmethod
    def possible_future(cls) -> "Flamingos2AtomFields":
        return Flamingos2AtomFields("possibleFuture")

    has_more: "Flamingos2ExecutionSequenceGraphQLField" = (
        Flamingos2ExecutionSequenceGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            Flamingos2ExecutionSequenceGraphQLField, "Flamingos2AtomFields"
        ]
    ) -> "Flamingos2ExecutionSequenceFields":
        """Subfields should come from the Flamingos2ExecutionSequenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2ExecutionSequenceFields":
        self._alias = alias
        return self


class Flamingos2FpuMaskFields(GraphQLField):
    @classmethod
    def custom_mask(cls) -> "Flamingos2CustomMaskFields":
        return Flamingos2CustomMaskFields("customMask")

    builtin: "Flamingos2FpuMaskGraphQLField" = Flamingos2FpuMaskGraphQLField("builtin")

    def fields(
        self,
        *subfields: Union[Flamingos2FpuMaskGraphQLField, "Flamingos2CustomMaskFields"]
    ) -> "Flamingos2FpuMaskFields":
        """Subfields should come from the Flamingos2FpuMaskFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2FpuMaskFields":
        self._alias = alias
        return self


class Flamingos2LongSlitFields(GraphQLField):
    disperser: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField(
        "disperser"
    )
    filter: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField("filter")
    fpu: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField("fpu")
    explicit_read_mode: "Flamingos2LongSlitGraphQLField" = (
        Flamingos2LongSlitGraphQLField("explicitReadMode")
    )
    explicit_reads: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField(
        "explicitReads"
    )
    decker: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField("decker")
    default_decker: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField(
        "defaultDecker"
    )
    explicit_decker: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField(
        "explicitDecker"
    )
    readout_mode: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField(
        "readoutMode"
    )
    default_readout_mode: "Flamingos2LongSlitGraphQLField" = (
        Flamingos2LongSlitGraphQLField("defaultReadoutMode")
    )
    explicit_readout_mode: "Flamingos2LongSlitGraphQLField" = (
        Flamingos2LongSlitGraphQLField("explicitReadoutMode")
    )

    @classmethod
    def offsets(cls) -> "OffsetFields":
        return OffsetFields("offsets")

    @classmethod
    def default_offsets(cls) -> "OffsetFields":
        return OffsetFields("defaultOffsets")

    @classmethod
    def explicit_offsets(cls) -> "OffsetFields":
        return OffsetFields("explicitOffsets")

    initial_disperser: "Flamingos2LongSlitGraphQLField" = (
        Flamingos2LongSlitGraphQLField("initialDisperser")
    )
    initial_filter: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField(
        "initialFilter"
    )
    initial_fpu: "Flamingos2LongSlitGraphQLField" = Flamingos2LongSlitGraphQLField(
        "initialFpu"
    )

    def fields(
        self, *subfields: Union[Flamingos2LongSlitGraphQLField, "OffsetFields"]
    ) -> "Flamingos2LongSlitFields":
        """Subfields should come from the Flamingos2LongSlitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2LongSlitFields":
        self._alias = alias
        return self


class Flamingos2StaticFields(GraphQLField):
    mos_pre_imaging: "Flamingos2StaticGraphQLField" = Flamingos2StaticGraphQLField(
        "mosPreImaging"
    )
    use_electronic_offsetting: "Flamingos2StaticGraphQLField" = (
        Flamingos2StaticGraphQLField("useElectronicOffsetting")
    )

    def fields(
        self, *subfields: Flamingos2StaticGraphQLField
    ) -> "Flamingos2StaticFields":
        """Subfields should come from the Flamingos2StaticFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2StaticFields":
        self._alias = alias
        return self


class Flamingos2StepFields(GraphQLField):
    @classmethod
    def instrument_config(cls) -> "Flamingos2DynamicFields":
        return Flamingos2DynamicFields("instrumentConfig")

    id: "Flamingos2StepGraphQLField" = Flamingos2StepGraphQLField("id")
    breakpoint: "Flamingos2StepGraphQLField" = Flamingos2StepGraphQLField("breakpoint")

    @classmethod
    def step_config(cls) -> "StepConfigInterface":
        return StepConfigInterface("stepConfig")

    @classmethod
    def telescope_config(cls) -> "TelescopeConfigFields":
        return TelescopeConfigFields("telescopeConfig")

    @classmethod
    def estimate(cls) -> "StepEstimateFields":
        return StepEstimateFields("estimate")

    observe_class: "Flamingos2StepGraphQLField" = Flamingos2StepGraphQLField(
        "observeClass"
    )

    def fields(
        self,
        *subfields: Union[
            Flamingos2StepGraphQLField,
            "Flamingos2DynamicFields",
            "StepConfigInterface",
            "StepEstimateFields",
            "TelescopeConfigFields",
        ]
    ) -> "Flamingos2StepFields":
        """Subfields should come from the Flamingos2StepFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "Flamingos2StepFields":
        self._alias = alias
        return self


class FluxDensityContinuumIntegratedFields(GraphQLField):
    value: "FluxDensityContinuumIntegratedGraphQLField" = (
        FluxDensityContinuumIntegratedGraphQLField("value")
    )
    units: "FluxDensityContinuumIntegratedGraphQLField" = (
        FluxDensityContinuumIntegratedGraphQLField("units")
    )
    error: "FluxDensityContinuumIntegratedGraphQLField" = (
        FluxDensityContinuumIntegratedGraphQLField("error")
    )

    def fields(
        self, *subfields: FluxDensityContinuumIntegratedGraphQLField
    ) -> "FluxDensityContinuumIntegratedFields":
        """Subfields should come from the FluxDensityContinuumIntegratedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FluxDensityContinuumIntegratedFields":
        self._alias = alias
        return self


class FluxDensityContinuumSurfaceFields(GraphQLField):
    value: "FluxDensityContinuumSurfaceGraphQLField" = (
        FluxDensityContinuumSurfaceGraphQLField("value")
    )
    units: "FluxDensityContinuumSurfaceGraphQLField" = (
        FluxDensityContinuumSurfaceGraphQLField("units")
    )
    error: "FluxDensityContinuumSurfaceGraphQLField" = (
        FluxDensityContinuumSurfaceGraphQLField("error")
    )

    def fields(
        self, *subfields: FluxDensityContinuumSurfaceGraphQLField
    ) -> "FluxDensityContinuumSurfaceFields":
        """Subfields should come from the FluxDensityContinuumSurfaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FluxDensityContinuumSurfaceFields":
        self._alias = alias
        return self


class FluxDensityEntryFields(GraphQLField):
    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    density: "FluxDensityEntryGraphQLField" = FluxDensityEntryGraphQLField("density")

    def fields(
        self, *subfields: Union[FluxDensityEntryGraphQLField, "WavelengthFields"]
    ) -> "FluxDensityEntryFields":
        """Subfields should come from the FluxDensityEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FluxDensityEntryFields":
        self._alias = alias
        return self


class GaussianSourceFields(GraphQLField):
    @classmethod
    def fwhm(cls) -> "AngleFields":
        return AngleFields("fwhm")

    @classmethod
    def band_normalized(cls) -> "BandNormalizedIntegratedFields":
        return BandNormalizedIntegratedFields("bandNormalized")

    @classmethod
    def emission_lines(cls) -> "EmissionLinesIntegratedFields":
        return EmissionLinesIntegratedFields("emissionLines")

    def fields(
        self,
        *subfields: Union[
            GaussianSourceGraphQLField,
            "AngleFields",
            "BandNormalizedIntegratedFields",
            "EmissionLinesIntegratedFields",
        ]
    ) -> "GaussianSourceFields":
        """Subfields should come from the GaussianSourceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GaussianSourceFields":
        self._alias = alias
        return self


class GmosCcdModeFields(GraphQLField):
    x_bin: "GmosCcdModeGraphQLField" = GmosCcdModeGraphQLField("xBin")
    y_bin: "GmosCcdModeGraphQLField" = GmosCcdModeGraphQLField("yBin")
    amp_count: "GmosCcdModeGraphQLField" = GmosCcdModeGraphQLField("ampCount")
    amp_gain: "GmosCcdModeGraphQLField" = GmosCcdModeGraphQLField("ampGain")
    amp_read_mode: "GmosCcdModeGraphQLField" = GmosCcdModeGraphQLField("ampReadMode")

    def fields(self, *subfields: GmosCcdModeGraphQLField) -> "GmosCcdModeFields":
        """Subfields should come from the GmosCcdModeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosCcdModeFields":
        self._alias = alias
        return self


class GmosCustomMaskFields(GraphQLField):
    filename: "GmosCustomMaskGraphQLField" = GmosCustomMaskGraphQLField("filename")
    slit_width: "GmosCustomMaskGraphQLField" = GmosCustomMaskGraphQLField("slitWidth")

    def fields(self, *subfields: GmosCustomMaskGraphQLField) -> "GmosCustomMaskFields":
        """Subfields should come from the GmosCustomMaskFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosCustomMaskFields":
        self._alias = alias
        return self


class GmosNodAndShuffleFields(GraphQLField):
    @classmethod
    def pos_a(cls) -> "OffsetFields":
        return OffsetFields("posA")

    @classmethod
    def pos_b(cls) -> "OffsetFields":
        return OffsetFields("posB")

    e_offset: "GmosNodAndShuffleGraphQLField" = GmosNodAndShuffleGraphQLField("eOffset")
    shuffle_offset: "GmosNodAndShuffleGraphQLField" = GmosNodAndShuffleGraphQLField(
        "shuffleOffset"
    )
    shuffle_cycles: "GmosNodAndShuffleGraphQLField" = GmosNodAndShuffleGraphQLField(
        "shuffleCycles"
    )

    def fields(
        self, *subfields: Union[GmosNodAndShuffleGraphQLField, "OffsetFields"]
    ) -> "GmosNodAndShuffleFields":
        """Subfields should come from the GmosNodAndShuffleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNodAndShuffleFields":
        self._alias = alias
        return self


class GmosNorthAtomFields(GraphQLField):
    id: "GmosNorthAtomGraphQLField" = GmosNorthAtomGraphQLField("id")
    description: "GmosNorthAtomGraphQLField" = GmosNorthAtomGraphQLField("description")
    observe_class: "GmosNorthAtomGraphQLField" = GmosNorthAtomGraphQLField(
        "observeClass"
    )

    @classmethod
    def steps(cls) -> "GmosNorthStepFields":
        return GmosNorthStepFields("steps")

    def fields(
        self, *subfields: Union[GmosNorthAtomGraphQLField, "GmosNorthStepFields"]
    ) -> "GmosNorthAtomFields":
        """Subfields should come from the GmosNorthAtomFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthAtomFields":
        self._alias = alias
        return self


class GmosNorthDynamicFields(GraphQLField):
    @classmethod
    def exposure(cls) -> "TimeSpanFields":
        return TimeSpanFields("exposure")

    @classmethod
    def readout(cls) -> "GmosCcdModeFields":
        return GmosCcdModeFields("readout")

    dtax: "GmosNorthDynamicGraphQLField" = GmosNorthDynamicGraphQLField("dtax")
    roi: "GmosNorthDynamicGraphQLField" = GmosNorthDynamicGraphQLField("roi")

    @classmethod
    def grating_config(cls) -> "GmosNorthGratingConfigFields":
        return GmosNorthGratingConfigFields("gratingConfig")

    filter: "GmosNorthDynamicGraphQLField" = GmosNorthDynamicGraphQLField("filter")

    @classmethod
    def fpu(cls) -> "GmosNorthFpuFields":
        return GmosNorthFpuFields("fpu")

    @classmethod
    def central_wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("centralWavelength")

    def fields(
        self,
        *subfields: Union[
            GmosNorthDynamicGraphQLField,
            "GmosCcdModeFields",
            "GmosNorthFpuFields",
            "GmosNorthGratingConfigFields",
            "TimeSpanFields",
            "WavelengthFields",
        ]
    ) -> "GmosNorthDynamicFields":
        """Subfields should come from the GmosNorthDynamicFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthDynamicFields":
        self._alias = alias
        return self


class GmosNorthExecutionConfigFields(GraphQLField):
    @classmethod
    def static(cls) -> "GmosNorthStaticFields":
        return GmosNorthStaticFields("static")

    @classmethod
    def acquisition(cls) -> "GmosNorthExecutionSequenceFields":
        return GmosNorthExecutionSequenceFields("acquisition")

    @classmethod
    def science(cls) -> "GmosNorthExecutionSequenceFields":
        return GmosNorthExecutionSequenceFields("science")

    def fields(
        self,
        *subfields: Union[
            GmosNorthExecutionConfigGraphQLField,
            "GmosNorthExecutionSequenceFields",
            "GmosNorthStaticFields",
        ]
    ) -> "GmosNorthExecutionConfigFields":
        """Subfields should come from the GmosNorthExecutionConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthExecutionConfigFields":
        self._alias = alias
        return self


class GmosNorthExecutionSequenceFields(GraphQLField):
    @classmethod
    def next_atom(cls) -> "GmosNorthAtomFields":
        return GmosNorthAtomFields("nextAtom")

    @classmethod
    def possible_future(cls) -> "GmosNorthAtomFields":
        return GmosNorthAtomFields("possibleFuture")

    has_more: "GmosNorthExecutionSequenceGraphQLField" = (
        GmosNorthExecutionSequenceGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[GmosNorthExecutionSequenceGraphQLField, "GmosNorthAtomFields"]
    ) -> "GmosNorthExecutionSequenceFields":
        """Subfields should come from the GmosNorthExecutionSequenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthExecutionSequenceFields":
        self._alias = alias
        return self


class GmosNorthFpuFields(GraphQLField):
    @classmethod
    def custom_mask(cls) -> "GmosCustomMaskFields":
        return GmosCustomMaskFields("customMask")

    builtin: "GmosNorthFpuGraphQLField" = GmosNorthFpuGraphQLField("builtin")

    def fields(
        self, *subfields: Union[GmosNorthFpuGraphQLField, "GmosCustomMaskFields"]
    ) -> "GmosNorthFpuFields":
        """Subfields should come from the GmosNorthFpuFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthFpuFields":
        self._alias = alias
        return self


class GmosNorthGratingConfigFields(GraphQLField):
    grating: "GmosNorthGratingConfigGraphQLField" = GmosNorthGratingConfigGraphQLField(
        "grating"
    )
    order: "GmosNorthGratingConfigGraphQLField" = GmosNorthGratingConfigGraphQLField(
        "order"
    )

    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    def fields(
        self, *subfields: Union[GmosNorthGratingConfigGraphQLField, "WavelengthFields"]
    ) -> "GmosNorthGratingConfigFields":
        """Subfields should come from the GmosNorthGratingConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthGratingConfigFields":
        self._alias = alias
        return self


class GmosNorthImagingFields(GraphQLField):
    filters: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField("filters")
    initial_filters: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "initialFilters"
    )

    @classmethod
    def offsets(cls) -> "OffsetFields":
        return OffsetFields("offsets")

    multiple_filters_mode: "GmosNorthImagingGraphQLField" = (
        GmosNorthImagingGraphQLField("multipleFiltersMode")
    )
    default_multiple_filters_mode: "GmosNorthImagingGraphQLField" = (
        GmosNorthImagingGraphQLField("defaultMultipleFiltersMode")
    )
    explicit_multiple_filters_mode: "GmosNorthImagingGraphQLField" = (
        GmosNorthImagingGraphQLField("explicitMultipleFiltersMode")
    )
    bin: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField("bin")
    default_bin: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "defaultBin"
    )
    explicit_bin: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "explicitBin"
    )
    amp_read_mode: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "ampReadMode"
    )
    default_amp_read_mode: "GmosNorthImagingGraphQLField" = (
        GmosNorthImagingGraphQLField("defaultAmpReadMode")
    )
    explicit_amp_read_mode: "GmosNorthImagingGraphQLField" = (
        GmosNorthImagingGraphQLField("explicitAmpReadMode")
    )
    amp_gain: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField("ampGain")
    default_amp_gain: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "defaultAmpGain"
    )
    explicit_amp_gain: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "explicitAmpGain"
    )
    roi: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField("roi")
    default_roi: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "defaultRoi"
    )
    explicit_roi: "GmosNorthImagingGraphQLField" = GmosNorthImagingGraphQLField(
        "explicitRoi"
    )

    def fields(
        self, *subfields: Union[GmosNorthImagingGraphQLField, "OffsetFields"]
    ) -> "GmosNorthImagingFields":
        """Subfields should come from the GmosNorthImagingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthImagingFields":
        self._alias = alias
        return self


class GmosNorthLongSlitFields(GraphQLField):
    grating: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField("grating")
    filter: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField("filter")
    fpu: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField("fpu")

    @classmethod
    def central_wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("centralWavelength")

    x_bin: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField("xBin")
    default_x_bin: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "defaultXBin"
    )
    explicit_x_bin: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "explicitXBin"
    )
    y_bin: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField("yBin")
    default_y_bin: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "defaultYBin"
    )
    explicit_y_bin: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "explicitYBin"
    )
    amp_read_mode: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "ampReadMode"
    )
    default_amp_read_mode: "GmosNorthLongSlitGraphQLField" = (
        GmosNorthLongSlitGraphQLField("defaultAmpReadMode")
    )
    explicit_amp_read_mode: "GmosNorthLongSlitGraphQLField" = (
        GmosNorthLongSlitGraphQLField("explicitAmpReadMode")
    )
    amp_gain: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField("ampGain")
    default_amp_gain: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "defaultAmpGain"
    )
    explicit_amp_gain: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "explicitAmpGain"
    )
    roi: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField("roi")
    default_roi: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "defaultRoi"
    )
    explicit_roi: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "explicitRoi"
    )

    @classmethod
    def wavelength_dithers(cls) -> "WavelengthDitherFields":
        return WavelengthDitherFields("wavelengthDithers")

    @classmethod
    def default_wavelength_dithers(cls) -> "WavelengthDitherFields":
        return WavelengthDitherFields("defaultWavelengthDithers")

    @classmethod
    def explicit_wavelength_dithers(cls) -> "WavelengthDitherFields":
        return WavelengthDitherFields("explicitWavelengthDithers")

    @classmethod
    def offsets(cls) -> "OffsetQFields":
        return OffsetQFields("offsets")

    @classmethod
    def default_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("defaultOffsets")

    @classmethod
    def explicit_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("explicitOffsets")

    @classmethod
    def spatial_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("spatialOffsets")

    @classmethod
    def default_spatial_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("defaultSpatialOffsets")

    @classmethod
    def explicit_spatial_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("explicitSpatialOffsets")

    initial_grating: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "initialGrating"
    )
    initial_filter: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "initialFilter"
    )
    initial_fpu: "GmosNorthLongSlitGraphQLField" = GmosNorthLongSlitGraphQLField(
        "initialFpu"
    )

    @classmethod
    def initial_central_wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("initialCentralWavelength")

    def fields(
        self,
        *subfields: Union[
            GmosNorthLongSlitGraphQLField,
            "OffsetQFields",
            "WavelengthDitherFields",
            "WavelengthFields",
        ]
    ) -> "GmosNorthLongSlitFields":
        """Subfields should come from the GmosNorthLongSlitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthLongSlitFields":
        self._alias = alias
        return self


class GmosNorthStaticFields(GraphQLField):
    stage_mode: "GmosNorthStaticGraphQLField" = GmosNorthStaticGraphQLField("stageMode")
    detector: "GmosNorthStaticGraphQLField" = GmosNorthStaticGraphQLField("detector")
    mos_pre_imaging: "GmosNorthStaticGraphQLField" = GmosNorthStaticGraphQLField(
        "mosPreImaging"
    )

    @classmethod
    def nod_and_shuffle(cls) -> "GmosNodAndShuffleFields":
        return GmosNodAndShuffleFields("nodAndShuffle")

    def fields(
        self, *subfields: Union[GmosNorthStaticGraphQLField, "GmosNodAndShuffleFields"]
    ) -> "GmosNorthStaticFields":
        """Subfields should come from the GmosNorthStaticFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthStaticFields":
        self._alias = alias
        return self


class GmosNorthStepFields(GraphQLField):
    @classmethod
    def instrument_config(cls) -> "GmosNorthDynamicFields":
        return GmosNorthDynamicFields("instrumentConfig")

    id: "GmosNorthStepGraphQLField" = GmosNorthStepGraphQLField("id")
    breakpoint: "GmosNorthStepGraphQLField" = GmosNorthStepGraphQLField("breakpoint")

    @classmethod
    def step_config(cls) -> "StepConfigInterface":
        return StepConfigInterface("stepConfig")

    @classmethod
    def telescope_config(cls) -> "TelescopeConfigFields":
        return TelescopeConfigFields("telescopeConfig")

    @classmethod
    def estimate(cls) -> "StepEstimateFields":
        return StepEstimateFields("estimate")

    observe_class: "GmosNorthStepGraphQLField" = GmosNorthStepGraphQLField(
        "observeClass"
    )

    def fields(
        self,
        *subfields: Union[
            GmosNorthStepGraphQLField,
            "GmosNorthDynamicFields",
            "StepConfigInterface",
            "StepEstimateFields",
            "TelescopeConfigFields",
        ]
    ) -> "GmosNorthStepFields":
        """Subfields should come from the GmosNorthStepFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosNorthStepFields":
        self._alias = alias
        return self


class GmosSouthAtomFields(GraphQLField):
    id: "GmosSouthAtomGraphQLField" = GmosSouthAtomGraphQLField("id")
    description: "GmosSouthAtomGraphQLField" = GmosSouthAtomGraphQLField("description")
    observe_class: "GmosSouthAtomGraphQLField" = GmosSouthAtomGraphQLField(
        "observeClass"
    )

    @classmethod
    def steps(cls) -> "GmosSouthStepFields":
        return GmosSouthStepFields("steps")

    def fields(
        self, *subfields: Union[GmosSouthAtomGraphQLField, "GmosSouthStepFields"]
    ) -> "GmosSouthAtomFields":
        """Subfields should come from the GmosSouthAtomFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthAtomFields":
        self._alias = alias
        return self


class GmosSouthDynamicFields(GraphQLField):
    @classmethod
    def exposure(cls) -> "TimeSpanFields":
        return TimeSpanFields("exposure")

    @classmethod
    def readout(cls) -> "GmosCcdModeFields":
        return GmosCcdModeFields("readout")

    dtax: "GmosSouthDynamicGraphQLField" = GmosSouthDynamicGraphQLField("dtax")
    roi: "GmosSouthDynamicGraphQLField" = GmosSouthDynamicGraphQLField("roi")

    @classmethod
    def grating_config(cls) -> "GmosSouthGratingConfigFields":
        return GmosSouthGratingConfigFields("gratingConfig")

    filter: "GmosSouthDynamicGraphQLField" = GmosSouthDynamicGraphQLField("filter")

    @classmethod
    def fpu(cls) -> "GmosSouthFpuFields":
        return GmosSouthFpuFields("fpu")

    @classmethod
    def central_wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("centralWavelength")

    def fields(
        self,
        *subfields: Union[
            GmosSouthDynamicGraphQLField,
            "GmosCcdModeFields",
            "GmosSouthFpuFields",
            "GmosSouthGratingConfigFields",
            "TimeSpanFields",
            "WavelengthFields",
        ]
    ) -> "GmosSouthDynamicFields":
        """Subfields should come from the GmosSouthDynamicFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthDynamicFields":
        self._alias = alias
        return self


class GmosSouthExecutionConfigFields(GraphQLField):
    @classmethod
    def static(cls) -> "GmosSouthStaticFields":
        return GmosSouthStaticFields("static")

    @classmethod
    def acquisition(cls) -> "GmosSouthExecutionSequenceFields":
        return GmosSouthExecutionSequenceFields("acquisition")

    @classmethod
    def science(cls) -> "GmosSouthExecutionSequenceFields":
        return GmosSouthExecutionSequenceFields("science")

    def fields(
        self,
        *subfields: Union[
            GmosSouthExecutionConfigGraphQLField,
            "GmosSouthExecutionSequenceFields",
            "GmosSouthStaticFields",
        ]
    ) -> "GmosSouthExecutionConfigFields":
        """Subfields should come from the GmosSouthExecutionConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthExecutionConfigFields":
        self._alias = alias
        return self


class GmosSouthExecutionSequenceFields(GraphQLField):
    @classmethod
    def next_atom(cls) -> "GmosSouthAtomFields":
        return GmosSouthAtomFields("nextAtom")

    @classmethod
    def possible_future(cls) -> "GmosSouthAtomFields":
        return GmosSouthAtomFields("possibleFuture")

    has_more: "GmosSouthExecutionSequenceGraphQLField" = (
        GmosSouthExecutionSequenceGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[GmosSouthExecutionSequenceGraphQLField, "GmosSouthAtomFields"]
    ) -> "GmosSouthExecutionSequenceFields":
        """Subfields should come from the GmosSouthExecutionSequenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthExecutionSequenceFields":
        self._alias = alias
        return self


class GmosSouthFpuFields(GraphQLField):
    @classmethod
    def custom_mask(cls) -> "GmosCustomMaskFields":
        return GmosCustomMaskFields("customMask")

    builtin: "GmosSouthFpuGraphQLField" = GmosSouthFpuGraphQLField("builtin")

    def fields(
        self, *subfields: Union[GmosSouthFpuGraphQLField, "GmosCustomMaskFields"]
    ) -> "GmosSouthFpuFields":
        """Subfields should come from the GmosSouthFpuFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthFpuFields":
        self._alias = alias
        return self


class GmosSouthGratingConfigFields(GraphQLField):
    grating: "GmosSouthGratingConfigGraphQLField" = GmosSouthGratingConfigGraphQLField(
        "grating"
    )
    order: "GmosSouthGratingConfigGraphQLField" = GmosSouthGratingConfigGraphQLField(
        "order"
    )

    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    def fields(
        self, *subfields: Union[GmosSouthGratingConfigGraphQLField, "WavelengthFields"]
    ) -> "GmosSouthGratingConfigFields":
        """Subfields should come from the GmosSouthGratingConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthGratingConfigFields":
        self._alias = alias
        return self


class GmosSouthImagingFields(GraphQLField):
    filters: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField("filters")
    initial_filters: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "initialFilters"
    )

    @classmethod
    def offsets(cls) -> "OffsetFields":
        return OffsetFields("offsets")

    multiple_filters_mode: "GmosSouthImagingGraphQLField" = (
        GmosSouthImagingGraphQLField("multipleFiltersMode")
    )
    default_multiple_filters_mode: "GmosSouthImagingGraphQLField" = (
        GmosSouthImagingGraphQLField("defaultMultipleFiltersMode")
    )
    explicit_multiple_filters_mode: "GmosSouthImagingGraphQLField" = (
        GmosSouthImagingGraphQLField("explicitMultipleFiltersMode")
    )
    bin: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField("bin")
    default_bin: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "defaultBin"
    )
    explicit_bin: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "explicitBin"
    )
    amp_read_mode: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "ampReadMode"
    )
    default_amp_read_mode: "GmosSouthImagingGraphQLField" = (
        GmosSouthImagingGraphQLField("defaultAmpReadMode")
    )
    explicit_amp_read_mode: "GmosSouthImagingGraphQLField" = (
        GmosSouthImagingGraphQLField("explicitAmpReadMode")
    )
    amp_gain: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField("ampGain")
    default_amp_gain: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "defaultAmpGain"
    )
    explicit_amp_gain: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "explicitAmpGain"
    )
    roi: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField("roi")
    default_roi: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "defaultRoi"
    )
    explicit_roi: "GmosSouthImagingGraphQLField" = GmosSouthImagingGraphQLField(
        "explicitRoi"
    )

    def fields(
        self, *subfields: Union[GmosSouthImagingGraphQLField, "OffsetFields"]
    ) -> "GmosSouthImagingFields":
        """Subfields should come from the GmosSouthImagingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthImagingFields":
        self._alias = alias
        return self


class GmosSouthLongSlitFields(GraphQLField):
    grating: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField("grating")
    filter: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField("filter")
    fpu: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField("fpu")

    @classmethod
    def central_wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("centralWavelength")

    x_bin: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField("xBin")
    default_x_bin: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "defaultXBin"
    )
    explicit_x_bin: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "explicitXBin"
    )
    y_bin: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField("yBin")
    default_y_bin: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "defaultYBin"
    )
    explicit_y_bin: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "explicitYBin"
    )
    amp_read_mode: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "ampReadMode"
    )
    default_amp_read_mode: "GmosSouthLongSlitGraphQLField" = (
        GmosSouthLongSlitGraphQLField("defaultAmpReadMode")
    )
    explicit_amp_read_mode: "GmosSouthLongSlitGraphQLField" = (
        GmosSouthLongSlitGraphQLField("explicitAmpReadMode")
    )
    amp_gain: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField("ampGain")
    default_amp_gain: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "defaultAmpGain"
    )
    explicit_amp_gain: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "explicitAmpGain"
    )
    roi: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField("roi")
    default_roi: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "defaultRoi"
    )
    explicit_roi: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "explicitRoi"
    )

    @classmethod
    def wavelength_dithers(cls) -> "WavelengthDitherFields":
        return WavelengthDitherFields("wavelengthDithers")

    @classmethod
    def default_wavelength_dithers(cls) -> "WavelengthDitherFields":
        return WavelengthDitherFields("defaultWavelengthDithers")

    @classmethod
    def explicit_wavelength_dithers(cls) -> "WavelengthDitherFields":
        return WavelengthDitherFields("explicitWavelengthDithers")

    @classmethod
    def offsets(cls) -> "OffsetQFields":
        return OffsetQFields("offsets")

    @classmethod
    def default_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("defaultOffsets")

    @classmethod
    def explicit_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("explicitOffsets")

    @classmethod
    def spatial_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("spatialOffsets")

    @classmethod
    def default_spatial_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("defaultSpatialOffsets")

    @classmethod
    def explicit_spatial_offsets(cls) -> "OffsetQFields":
        return OffsetQFields("explicitSpatialOffsets")

    initial_grating: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "initialGrating"
    )
    initial_filter: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "initialFilter"
    )
    initial_fpu: "GmosSouthLongSlitGraphQLField" = GmosSouthLongSlitGraphQLField(
        "initialFpu"
    )

    @classmethod
    def initial_central_wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("initialCentralWavelength")

    def fields(
        self,
        *subfields: Union[
            GmosSouthLongSlitGraphQLField,
            "OffsetQFields",
            "WavelengthDitherFields",
            "WavelengthFields",
        ]
    ) -> "GmosSouthLongSlitFields":
        """Subfields should come from the GmosSouthLongSlitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthLongSlitFields":
        self._alias = alias
        return self


class GmosSouthStaticFields(GraphQLField):
    stage_mode: "GmosSouthStaticGraphQLField" = GmosSouthStaticGraphQLField("stageMode")
    detector: "GmosSouthStaticGraphQLField" = GmosSouthStaticGraphQLField("detector")
    mos_pre_imaging: "GmosSouthStaticGraphQLField" = GmosSouthStaticGraphQLField(
        "mosPreImaging"
    )

    @classmethod
    def nod_and_shuffle(cls) -> "GmosNodAndShuffleFields":
        return GmosNodAndShuffleFields("nodAndShuffle")

    def fields(
        self, *subfields: Union[GmosSouthStaticGraphQLField, "GmosNodAndShuffleFields"]
    ) -> "GmosSouthStaticFields":
        """Subfields should come from the GmosSouthStaticFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthStaticFields":
        self._alias = alias
        return self


class GmosSouthStepFields(GraphQLField):
    @classmethod
    def instrument_config(cls) -> "GmosSouthDynamicFields":
        return GmosSouthDynamicFields("instrumentConfig")

    id: "GmosSouthStepGraphQLField" = GmosSouthStepGraphQLField("id")
    breakpoint: "GmosSouthStepGraphQLField" = GmosSouthStepGraphQLField("breakpoint")

    @classmethod
    def step_config(cls) -> "StepConfigInterface":
        return StepConfigInterface("stepConfig")

    @classmethod
    def telescope_config(cls) -> "TelescopeConfigFields":
        return TelescopeConfigFields("telescopeConfig")

    @classmethod
    def estimate(cls) -> "StepEstimateFields":
        return StepEstimateFields("estimate")

    observe_class: "GmosSouthStepGraphQLField" = GmosSouthStepGraphQLField(
        "observeClass"
    )

    def fields(
        self,
        *subfields: Union[
            GmosSouthStepGraphQLField,
            "GmosSouthDynamicFields",
            "StepConfigInterface",
            "StepEstimateFields",
            "TelescopeConfigFields",
        ]
    ) -> "GmosSouthStepFields":
        """Subfields should come from the GmosSouthStepFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GmosSouthStepFields":
        self._alias = alias
        return self


class GoaPropertiesFields(GraphQLField):
    proprietary_months: "GoaPropertiesGraphQLField" = GoaPropertiesGraphQLField(
        "proprietaryMonths"
    )
    should_notify: "GoaPropertiesGraphQLField" = GoaPropertiesGraphQLField(
        "shouldNotify"
    )
    private_header: "GoaPropertiesGraphQLField" = GoaPropertiesGraphQLField(
        "privateHeader"
    )

    def fields(self, *subfields: GoaPropertiesGraphQLField) -> "GoaPropertiesFields":
        """Subfields should come from the GoaPropertiesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GoaPropertiesFields":
        self._alias = alias
        return self


class GroupFields(GraphQLField):
    id: "GroupGraphQLField" = GroupGraphQLField("id")
    parent_id: "GroupGraphQLField" = GroupGraphQLField("parentId")
    parent_index: "GroupGraphQLField" = GroupGraphQLField("parentIndex")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    name: "GroupGraphQLField" = GroupGraphQLField("name")
    description: "GroupGraphQLField" = GroupGraphQLField("description")
    minimum_required: "GroupGraphQLField" = GroupGraphQLField("minimumRequired")
    ordered: "GroupGraphQLField" = GroupGraphQLField("ordered")

    @classmethod
    def minimum_interval(cls) -> "TimeSpanFields":
        return TimeSpanFields("minimumInterval")

    @classmethod
    def maximum_interval(cls) -> "TimeSpanFields":
        return TimeSpanFields("maximumInterval")

    @classmethod
    def elements(cls, include_deleted: bool) -> "GroupElementFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupElementFields("elements", arguments=cleared_arguments)

    @classmethod
    def time_estimate_range(cls) -> "CalculatedCategorizedTimeRangeFields":
        return CalculatedCategorizedTimeRangeFields("timeEstimateRange")

    @classmethod
    def time_estimate_banded(cls) -> "CalculatedBandedTimeFields":
        return CalculatedBandedTimeFields("timeEstimateBanded")

    existence: "GroupGraphQLField" = GroupGraphQLField("existence")
    system: "GroupGraphQLField" = GroupGraphQLField("system")

    def fields(
        self,
        *subfields: Union[
            GroupGraphQLField,
            "CalculatedBandedTimeFields",
            "CalculatedCategorizedTimeRangeFields",
            "GroupElementFields",
            "ProgramFields",
            "TimeSpanFields",
        ]
    ) -> "GroupFields":
        """Subfields should come from the GroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GroupFields":
        self._alias = alias
        return self


class GroupElementFields(GraphQLField):
    parent_group_id: "GroupElementGraphQLField" = GroupElementGraphQLField(
        "parentGroupId"
    )
    parent_index: "GroupElementGraphQLField" = GroupElementGraphQLField("parentIndex")

    @classmethod
    def group(cls) -> "GroupFields":
        return GroupFields("group")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    existence: "GroupElementGraphQLField" = GroupElementGraphQLField("existence")

    def fields(
        self,
        *subfields: Union[GroupElementGraphQLField, "GroupFields", "ObservationFields"]
    ) -> "GroupElementFields":
        """Subfields should come from the GroupElementFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GroupElementFields":
        self._alias = alias
        return self


class GuideAvailabilityPeriodFields(GraphQLField):
    start: "GuideAvailabilityPeriodGraphQLField" = GuideAvailabilityPeriodGraphQLField(
        "start"
    )
    end: "GuideAvailabilityPeriodGraphQLField" = GuideAvailabilityPeriodGraphQLField(
        "end"
    )

    @classmethod
    def pos_angles(cls) -> "AngleFields":
        return AngleFields("posAngles")

    def fields(
        self, *subfields: Union[GuideAvailabilityPeriodGraphQLField, "AngleFields"]
    ) -> "GuideAvailabilityPeriodFields":
        """Subfields should come from the GuideAvailabilityPeriodFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GuideAvailabilityPeriodFields":
        self._alias = alias
        return self


class GuideEnvironmentFields(GraphQLField):
    @classmethod
    def pos_angle(cls) -> "AngleFields":
        return AngleFields("posAngle")

    @classmethod
    def guide_targets(cls) -> "GuideTargetFields":
        return GuideTargetFields("guideTargets")

    def fields(
        self,
        *subfields: Union[
            GuideEnvironmentGraphQLField, "AngleFields", "GuideTargetFields"
        ]
    ) -> "GuideEnvironmentFields":
        """Subfields should come from the GuideEnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GuideEnvironmentFields":
        self._alias = alias
        return self


class GuideTargetFields(GraphQLField):
    probe: "GuideTargetGraphQLField" = GuideTargetGraphQLField("probe")
    name: "GuideTargetGraphQLField" = GuideTargetGraphQLField("name")

    @classmethod
    def source_profile(cls) -> "SourceProfileFields":
        return SourceProfileFields("sourceProfile")

    @classmethod
    def sidereal(cls) -> "SiderealFields":
        return SiderealFields("sidereal")

    @classmethod
    def nonsidereal(cls) -> "NonsiderealFields":
        return NonsiderealFields("nonsidereal")

    def fields(
        self,
        *subfields: Union[
            GuideTargetGraphQLField,
            "NonsiderealFields",
            "SiderealFields",
            "SourceProfileFields",
        ]
    ) -> "GuideTargetFields":
        """Subfields should come from the GuideTargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GuideTargetFields":
        self._alias = alias
        return self


class HourAngleRangeFields(GraphQLField):
    min_hours: "HourAngleRangeGraphQLField" = HourAngleRangeGraphQLField("minHours")
    max_hours: "HourAngleRangeGraphQLField" = HourAngleRangeGraphQLField("maxHours")

    def fields(self, *subfields: HourAngleRangeGraphQLField) -> "HourAngleRangeFields":
        """Subfields should come from the HourAngleRangeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HourAngleRangeFields":
        self._alias = alias
        return self


class ImagingConfigOptionFields(GraphQLField):
    instrument: "ImagingConfigOptionGraphQLField" = ImagingConfigOptionGraphQLField(
        "instrument"
    )
    filter_label: "ImagingConfigOptionGraphQLField" = ImagingConfigOptionGraphQLField(
        "filterLabel"
    )
    adaptive_optics: "ImagingConfigOptionGraphQLField" = (
        ImagingConfigOptionGraphQLField("adaptiveOptics")
    )
    site: "ImagingConfigOptionGraphQLField" = ImagingConfigOptionGraphQLField("site")

    @classmethod
    def fov(cls) -> "AngleFields":
        return AngleFields("fov")

    @classmethod
    def gmos_north(cls) -> "ImagingConfigOptionGmosNorthFields":
        return ImagingConfigOptionGmosNorthFields("gmosNorth")

    @classmethod
    def gmos_south(cls) -> "ImagingConfigOptionGmosSouthFields":
        return ImagingConfigOptionGmosSouthFields("gmosSouth")

    def fields(
        self,
        *subfields: Union[
            ImagingConfigOptionGraphQLField,
            "AngleFields",
            "ImagingConfigOptionGmosNorthFields",
            "ImagingConfigOptionGmosSouthFields",
        ]
    ) -> "ImagingConfigOptionFields":
        """Subfields should come from the ImagingConfigOptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ImagingConfigOptionFields":
        self._alias = alias
        return self


class ImagingConfigOptionGmosNorthFields(GraphQLField):
    filter: "ImagingConfigOptionGmosNorthGraphQLField" = (
        ImagingConfigOptionGmosNorthGraphQLField("filter")
    )

    def fields(
        self, *subfields: ImagingConfigOptionGmosNorthGraphQLField
    ) -> "ImagingConfigOptionGmosNorthFields":
        """Subfields should come from the ImagingConfigOptionGmosNorthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ImagingConfigOptionGmosNorthFields":
        self._alias = alias
        return self


class ImagingConfigOptionGmosSouthFields(GraphQLField):
    filter: "ImagingConfigOptionGmosSouthGraphQLField" = (
        ImagingConfigOptionGmosSouthGraphQLField("filter")
    )

    def fields(
        self, *subfields: ImagingConfigOptionGmosSouthGraphQLField
    ) -> "ImagingConfigOptionGmosSouthFields":
        """Subfields should come from the ImagingConfigOptionGmosSouthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ImagingConfigOptionGmosSouthFields":
        self._alias = alias
        return self


class ImagingScienceRequirementsFields(GraphQLField):
    @classmethod
    def minimum_fov(cls) -> "AngleFields":
        return AngleFields("minimumFov")

    narrow_filters: "ImagingScienceRequirementsGraphQLField" = (
        ImagingScienceRequirementsGraphQLField("narrowFilters")
    )
    broad_filters: "ImagingScienceRequirementsGraphQLField" = (
        ImagingScienceRequirementsGraphQLField("broadFilters")
    )
    combined_filters: "ImagingScienceRequirementsGraphQLField" = (
        ImagingScienceRequirementsGraphQLField("combinedFilters")
    )

    def fields(
        self, *subfields: Union[ImagingScienceRequirementsGraphQLField, "AngleFields"]
    ) -> "ImagingScienceRequirementsFields":
        """Subfields should come from the ImagingScienceRequirementsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ImagingScienceRequirementsFields":
        self._alias = alias
        return self


class ItcFields(GraphQLField):
    @classmethod
    def science(cls) -> "ItcResultSetFields":
        return ItcResultSetFields("science")

    @classmethod
    def acquisition(cls) -> "ItcResultSetFields":
        return ItcResultSetFields("acquisition")

    def fields(
        self, *subfields: Union[ItcGraphQLField, "ItcResultSetFields"]
    ) -> "ItcFields":
        """Subfields should come from the ItcFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ItcFields":
        self._alias = alias
        return self


class ItcResultFields(GraphQLField):
    target_id: "ItcResultGraphQLField" = ItcResultGraphQLField("targetId")

    @classmethod
    def exposure_time(cls) -> "TimeSpanFields":
        return TimeSpanFields("exposureTime")

    exposure_count: "ItcResultGraphQLField" = ItcResultGraphQLField("exposureCount")

    @classmethod
    def signal_to_noise_at(cls) -> "SignalToNoiseAtFields":
        return SignalToNoiseAtFields("signalToNoiseAt")

    def fields(
        self,
        *subfields: Union[
            ItcResultGraphQLField, "SignalToNoiseAtFields", "TimeSpanFields"
        ]
    ) -> "ItcResultFields":
        """Subfields should come from the ItcResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ItcResultFields":
        self._alias = alias
        return self


class ItcResultSetFields(GraphQLField):
    @classmethod
    def selected(cls) -> "ItcResultFields":
        return ItcResultFields("selected")

    @classmethod
    def all(cls) -> "ItcResultFields":
        return ItcResultFields("all")

    index: "ItcResultSetGraphQLField" = ItcResultSetGraphQLField("index")

    def fields(
        self, *subfields: Union[ItcResultSetGraphQLField, "ItcResultFields"]
    ) -> "ItcResultSetFields":
        """Subfields should come from the ItcResultSetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ItcResultSetFields":
        self._alias = alias
        return self


class LineFluxIntegratedFields(GraphQLField):
    value: "LineFluxIntegratedGraphQLField" = LineFluxIntegratedGraphQLField("value")
    units: "LineFluxIntegratedGraphQLField" = LineFluxIntegratedGraphQLField("units")

    def fields(
        self, *subfields: LineFluxIntegratedGraphQLField
    ) -> "LineFluxIntegratedFields":
        """Subfields should come from the LineFluxIntegratedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LineFluxIntegratedFields":
        self._alias = alias
        return self


class LineFluxSurfaceFields(GraphQLField):
    value: "LineFluxSurfaceGraphQLField" = LineFluxSurfaceGraphQLField("value")
    units: "LineFluxSurfaceGraphQLField" = LineFluxSurfaceGraphQLField("units")

    def fields(
        self, *subfields: LineFluxSurfaceGraphQLField
    ) -> "LineFluxSurfaceFields":
        """Subfields should come from the LineFluxSurfaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LineFluxSurfaceFields":
        self._alias = alias
        return self


class LinkUserResultFields(GraphQLField):
    @classmethod
    def user(cls) -> "ProgramUserFields":
        return ProgramUserFields("user")

    def fields(
        self, *subfields: Union[LinkUserResultGraphQLField, "ProgramUserFields"]
    ) -> "LinkUserResultFields":
        """Subfields should come from the LinkUserResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkUserResultFields":
        self._alias = alias
        return self


class NonsiderealFields(GraphQLField):
    des: "NonsiderealGraphQLField" = NonsiderealGraphQLField("des")
    key_type: "NonsiderealGraphQLField" = NonsiderealGraphQLField("keyType")
    key: "NonsiderealGraphQLField" = NonsiderealGraphQLField("key")

    def fields(self, *subfields: NonsiderealGraphQLField) -> "NonsiderealFields":
        """Subfields should come from the NonsiderealFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NonsiderealFields":
        self._alias = alias
        return self


class ObservationFields(GraphQLField):
    id: "ObservationGraphQLField" = ObservationGraphQLField("id")
    existence: "ObservationGraphQLField" = ObservationGraphQLField("existence")

    @classmethod
    def reference(cls) -> "ObservationReferenceFields":
        return ObservationReferenceFields("reference")

    index: "ObservationGraphQLField" = ObservationGraphQLField("index")
    title: "ObservationGraphQLField" = ObservationGraphQLField("title")
    subtitle: "ObservationGraphQLField" = ObservationGraphQLField("subtitle")
    science_band: "ObservationGraphQLField" = ObservationGraphQLField("scienceBand")
    observation_time: "ObservationGraphQLField" = ObservationGraphQLField(
        "observationTime"
    )

    @classmethod
    def observation_duration(cls) -> "TimeSpanFields":
        return TimeSpanFields("observationDuration")

    @classmethod
    def pos_angle_constraint(cls) -> "PosAngleConstraintFields":
        return PosAngleConstraintFields("posAngleConstraint")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    @classmethod
    def target_environment(cls) -> "TargetEnvironmentFields":
        return TargetEnvironmentFields("targetEnvironment")

    @classmethod
    def constraint_set(cls) -> "ConstraintSetFields":
        return ConstraintSetFields("constraintSet")

    @classmethod
    def timing_windows(cls) -> "TimingWindowFields":
        return TimingWindowFields("timingWindows")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def science_requirements(cls) -> "ScienceRequirementsFields":
        return ScienceRequirementsFields("scienceRequirements")

    @classmethod
    def observing_mode(cls) -> "ObservingModeFields":
        return ObservingModeFields("observingMode")

    instrument: "ObservationGraphQLField" = ObservationGraphQLField("instrument")

    @classmethod
    def execution(cls) -> "ExecutionFields":
        return ExecutionFields("execution")

    @classmethod
    def itc(cls) -> "ItcFields":
        return ItcFields("itc")

    group_id: "ObservationGraphQLField" = ObservationGraphQLField("groupId")
    group_index: "ObservationGraphQLField" = ObservationGraphQLField("groupIndex")
    calibration_role: "ObservationGraphQLField" = ObservationGraphQLField(
        "calibrationRole"
    )
    observer_notes: "ObservationGraphQLField" = ObservationGraphQLField("observerNotes")

    @classmethod
    def configuration(cls) -> "ConfigurationFields":
        return ConfigurationFields("configuration")

    @classmethod
    def configuration_requests(cls) -> "ConfigurationRequestFields":
        return ConfigurationRequestFields("configurationRequests")

    @classmethod
    def workflow(cls) -> "CalculatedObservationWorkflowFields":
        return CalculatedObservationWorkflowFields("workflow")

    def fields(
        self,
        *subfields: Union[
            ObservationGraphQLField,
            "AttachmentFields",
            "CalculatedObservationWorkflowFields",
            "ConfigurationFields",
            "ConfigurationRequestFields",
            "ConstraintSetFields",
            "ExecutionFields",
            "ItcFields",
            "ObservationReferenceFields",
            "ObservingModeFields",
            "PosAngleConstraintFields",
            "ProgramFields",
            "ScienceRequirementsFields",
            "TargetEnvironmentFields",
            "TimeSpanFields",
            "TimingWindowFields",
        ]
    ) -> "ObservationFields":
        """Subfields should come from the ObservationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservationFields":
        self._alias = alias
        return self


class ObservationReferenceFields(GraphQLField):
    label: "ObservationReferenceGraphQLField" = ObservationReferenceGraphQLField(
        "label"
    )

    @classmethod
    def program(cls) -> "ProgramReferenceInterface":
        return ProgramReferenceInterface("program")

    index: "ObservationReferenceGraphQLField" = ObservationReferenceGraphQLField(
        "index"
    )

    def fields(
        self,
        *subfields: Union[ObservationReferenceGraphQLField, "ProgramReferenceInterface"]
    ) -> "ObservationReferenceFields":
        """Subfields should come from the ObservationReferenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservationReferenceFields":
        self._alias = alias
        return self


class ObservationSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ObservationFields":
        return ObservationFields("matches")

    has_more: "ObservationSelectResultGraphQLField" = (
        ObservationSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[ObservationSelectResultGraphQLField, "ObservationFields"]
    ) -> "ObservationSelectResultFields":
        """Subfields should come from the ObservationSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservationSelectResultFields":
        self._alias = alias
        return self


class ObservationValidationFields(GraphQLField):
    code: "ObservationValidationGraphQLField" = ObservationValidationGraphQLField(
        "code"
    )
    messages: "ObservationValidationGraphQLField" = ObservationValidationGraphQLField(
        "messages"
    )

    def fields(
        self, *subfields: ObservationValidationGraphQLField
    ) -> "ObservationValidationFields":
        """Subfields should come from the ObservationValidationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservationValidationFields":
        self._alias = alias
        return self


class ObservationWorkflowFields(GraphQLField):
    state: "ObservationWorkflowGraphQLField" = ObservationWorkflowGraphQLField("state")
    valid_transitions: "ObservationWorkflowGraphQLField" = (
        ObservationWorkflowGraphQLField("validTransitions")
    )

    @classmethod
    def validation_errors(cls) -> "ObservationValidationFields":
        return ObservationValidationFields("validationErrors")

    def fields(
        self,
        *subfields: Union[
            ObservationWorkflowGraphQLField, "ObservationValidationFields"
        ]
    ) -> "ObservationWorkflowFields":
        """Subfields should come from the ObservationWorkflowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservationWorkflowFields":
        self._alias = alias
        return self


class ObservingModeFields(GraphQLField):
    instrument: "ObservingModeGraphQLField" = ObservingModeGraphQLField("instrument")
    mode: "ObservingModeGraphQLField" = ObservingModeGraphQLField("mode")

    @classmethod
    def gmos_north_long_slit(cls) -> "GmosNorthLongSlitFields":
        return GmosNorthLongSlitFields("gmosNorthLongSlit")

    @classmethod
    def gmos_south_long_slit(cls) -> "GmosSouthLongSlitFields":
        return GmosSouthLongSlitFields("gmosSouthLongSlit")

    @classmethod
    def gmos_north_imaging(cls) -> "GmosNorthImagingFields":
        return GmosNorthImagingFields("gmosNorthImaging")

    @classmethod
    def gmos_south_imaging(cls) -> "GmosSouthImagingFields":
        return GmosSouthImagingFields("gmosSouthImaging")

    @classmethod
    def flamingos_2_long_slit(cls) -> "Flamingos2LongSlitFields":
        return Flamingos2LongSlitFields("flamingos2LongSlit")

    def fields(
        self,
        *subfields: Union[
            ObservingModeGraphQLField,
            "Flamingos2LongSlitFields",
            "GmosNorthImagingFields",
            "GmosNorthLongSlitFields",
            "GmosSouthImagingFields",
            "GmosSouthLongSlitFields",
        ]
    ) -> "ObservingModeFields":
        """Subfields should come from the ObservingModeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservingModeFields":
        self._alias = alias
        return self


class ObservingModeGroupFields(GraphQLField):
    @classmethod
    def observations(
        cls,
        include_deleted: bool,
        *,
        offset: Optional[Any] = None,
        limit: Optional[Any] = None
    ) -> "ObservationSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted},
            "OFFSET": {"type": "ObservationId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObservationSelectResultFields(
            "observations", arguments=cleared_arguments
        )

    @classmethod
    def observing_mode(cls) -> "ObservingModeFields":
        return ObservingModeFields("observingMode")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    def fields(
        self,
        *subfields: Union[
            ObservingModeGroupGraphQLField,
            "ObservationSelectResultFields",
            "ObservingModeFields",
            "ProgramFields",
        ]
    ) -> "ObservingModeGroupFields":
        """Subfields should come from the ObservingModeGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservingModeGroupFields":
        self._alias = alias
        return self


class ObservingModeGroupSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ObservingModeGroupFields":
        return ObservingModeGroupFields("matches")

    has_more: "ObservingModeGroupSelectResultGraphQLField" = (
        ObservingModeGroupSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            ObservingModeGroupSelectResultGraphQLField, "ObservingModeGroupFields"
        ]
    ) -> "ObservingModeGroupSelectResultFields":
        """Subfields should come from the ObservingModeGroupSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObservingModeGroupSelectResultFields":
        self._alias = alias
        return self


class OffsetFields(GraphQLField):
    @classmethod
    def p(cls) -> "OffsetPFields":
        return OffsetPFields("p")

    @classmethod
    def q(cls) -> "OffsetQFields":
        return OffsetQFields("q")

    def fields(
        self, *subfields: Union[OffsetGraphQLField, "OffsetPFields", "OffsetQFields"]
    ) -> "OffsetFields":
        """Subfields should come from the OffsetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OffsetFields":
        self._alias = alias
        return self


class OffsetPFields(GraphQLField):
    microarcseconds: "OffsetPGraphQLField" = OffsetPGraphQLField("microarcseconds")
    milliarcseconds: "OffsetPGraphQLField" = OffsetPGraphQLField("milliarcseconds")
    arcseconds: "OffsetPGraphQLField" = OffsetPGraphQLField("arcseconds")

    def fields(self, *subfields: OffsetPGraphQLField) -> "OffsetPFields":
        """Subfields should come from the OffsetPFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OffsetPFields":
        self._alias = alias
        return self


class OffsetQFields(GraphQLField):
    microarcseconds: "OffsetQGraphQLField" = OffsetQGraphQLField("microarcseconds")
    milliarcseconds: "OffsetQGraphQLField" = OffsetQGraphQLField("milliarcseconds")
    arcseconds: "OffsetQGraphQLField" = OffsetQGraphQLField("arcseconds")

    def fields(self, *subfields: OffsetQGraphQLField) -> "OffsetQFields":
        """Subfields should come from the OffsetQFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OffsetQFields":
        self._alias = alias
        return self


class OpportunityFields(GraphQLField):
    @classmethod
    def region(cls) -> "RegionFields":
        return RegionFields("region")

    def fields(
        self, *subfields: Union[OpportunityGraphQLField, "RegionFields"]
    ) -> "OpportunityFields":
        """Subfields should come from the OpportunityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OpportunityFields":
        self._alias = alias
        return self


class ParallaxFields(GraphQLField):
    microarcseconds: "ParallaxGraphQLField" = ParallaxGraphQLField("microarcseconds")
    milliarcseconds: "ParallaxGraphQLField" = ParallaxGraphQLField("milliarcseconds")

    def fields(self, *subfields: ParallaxGraphQLField) -> "ParallaxFields":
        """Subfields should come from the ParallaxFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ParallaxFields":
        self._alias = alias
        return self


class PosAngleConstraintFields(GraphQLField):
    mode: "PosAngleConstraintGraphQLField" = PosAngleConstraintGraphQLField("mode")

    @classmethod
    def angle(cls) -> "AngleFields":
        return AngleFields("angle")

    def fields(
        self, *subfields: Union[PosAngleConstraintGraphQLField, "AngleFields"]
    ) -> "PosAngleConstraintFields":
        """Subfields should come from the PosAngleConstraintFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PosAngleConstraintFields":
        self._alias = alias
        return self


class ProgramFields(GraphQLField):
    id: "ProgramGraphQLField" = ProgramGraphQLField("id")
    existence: "ProgramGraphQLField" = ProgramGraphQLField("existence")
    name: "ProgramGraphQLField" = ProgramGraphQLField("name")
    description: "ProgramGraphQLField" = ProgramGraphQLField("description")

    @classmethod
    def notes(cls, include_deleted: bool) -> "ProgramNoteFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProgramNoteFields("notes", arguments=cleared_arguments)

    type: "ProgramGraphQLField" = ProgramGraphQLField("type")

    @classmethod
    def reference(cls) -> "ProgramReferenceInterface":
        return ProgramReferenceInterface("reference")

    @classmethod
    def proposal(cls) -> "ProposalFields":
        return ProposalFields("proposal")

    @classmethod
    def active(cls) -> "DateIntervalFields":
        return DateIntervalFields("active")

    proposal_status: "ProgramGraphQLField" = ProgramGraphQLField("proposalStatus")

    @classmethod
    def pi(cls) -> "ProgramUserFields":
        return ProgramUserFields("pi")

    @classmethod
    def users(cls) -> "ProgramUserFields":
        return ProgramUserFields("users")

    @classmethod
    def observations(
        cls,
        include_deleted: bool,
        *,
        offset: Optional[Any] = None,
        limit: Optional[Any] = None
    ) -> "ObservationSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted},
            "OFFSET": {"type": "ObservationId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObservationSelectResultFields(
            "observations", arguments=cleared_arguments
        )

    @classmethod
    def configuration_requests(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "ConfigurationRequestSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "ConfigurationRequestId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ConfigurationRequestSelectResultFields(
            "configurationRequests", arguments=cleared_arguments
        )

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def group_elements(cls, include_deleted: bool) -> "GroupElementFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupElementFields("groupElements", arguments=cleared_arguments)

    @classmethod
    def all_group_elements(cls, include_deleted: bool) -> "GroupElementFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupElementFields("allGroupElements", arguments=cleared_arguments)

    @classmethod
    def time_estimate_range(cls) -> "CalculatedCategorizedTimeRangeFields":
        return CalculatedCategorizedTimeRangeFields("timeEstimateRange")

    @classmethod
    def time_estimate_banded(cls) -> "CalculatedBandedTimeFields":
        return CalculatedBandedTimeFields("timeEstimateBanded")

    @classmethod
    def time_charge(cls) -> "BandedTimeFields":
        return BandedTimeFields("timeCharge")

    @classmethod
    def user_invitations(cls) -> "UserInvitationFields":
        return UserInvitationFields("userInvitations")

    @classmethod
    def allocations(cls) -> "AllocationFields":
        return AllocationFields("allocations")

    calibration_role: "ProgramGraphQLField" = ProgramGraphQLField("calibrationRole")

    @classmethod
    def goa(cls) -> "GoaPropertiesFields":
        return GoaPropertiesFields("goa")

    def fields(
        self,
        *subfields: Union[
            ProgramGraphQLField,
            "AllocationFields",
            "AttachmentFields",
            "BandedTimeFields",
            "CalculatedBandedTimeFields",
            "CalculatedCategorizedTimeRangeFields",
            "ConfigurationRequestSelectResultFields",
            "DateIntervalFields",
            "GoaPropertiesFields",
            "GroupElementFields",
            "ObservationSelectResultFields",
            "ProgramNoteFields",
            "ProgramReferenceInterface",
            "ProgramUserFields",
            "ProposalFields",
            "UserInvitationFields",
        ]
    ) -> "ProgramFields":
        """Subfields should come from the ProgramFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProgramFields":
        self._alias = alias
        return self


class ProgramNoteFields(GraphQLField):
    id: "ProgramNoteGraphQLField" = ProgramNoteGraphQLField("id")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    title: "ProgramNoteGraphQLField" = ProgramNoteGraphQLField("title")
    text: "ProgramNoteGraphQLField" = ProgramNoteGraphQLField("text")
    is_private: "ProgramNoteGraphQLField" = ProgramNoteGraphQLField("isPrivate")
    existence: "ProgramNoteGraphQLField" = ProgramNoteGraphQLField("existence")

    def fields(
        self, *subfields: Union[ProgramNoteGraphQLField, "ProgramFields"]
    ) -> "ProgramNoteFields":
        """Subfields should come from the ProgramNoteFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProgramNoteFields":
        self._alias = alias
        return self


class ProgramNoteSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ProgramNoteFields":
        return ProgramNoteFields("matches")

    has_more: "ProgramNoteSelectResultGraphQLField" = (
        ProgramNoteSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[ProgramNoteSelectResultGraphQLField, "ProgramNoteFields"]
    ) -> "ProgramNoteSelectResultFields":
        """Subfields should come from the ProgramNoteSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProgramNoteSelectResultFields":
        self._alias = alias
        return self


class ProgramSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ProgramFields":
        return ProgramFields("matches")

    has_more: "ProgramSelectResultGraphQLField" = ProgramSelectResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[ProgramSelectResultGraphQLField, "ProgramFields"]
    ) -> "ProgramSelectResultFields":
        """Subfields should come from the ProgramSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProgramSelectResultFields":
        self._alias = alias
        return self


class ProgramUserFields(GraphQLField):
    id: "ProgramUserGraphQLField" = ProgramUserGraphQLField("id")
    role: "ProgramUserGraphQLField" = ProgramUserGraphQLField("role")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    @classmethod
    def partner_link(cls) -> "PartnerLinkInterface":
        return PartnerLinkInterface("partnerLink")

    @classmethod
    def preferred_profile(cls) -> "UserProfileFields":
        return UserProfileFields("preferredProfile")

    educational_status: "ProgramUserGraphQLField" = ProgramUserGraphQLField(
        "educationalStatus"
    )
    gender: "ProgramUserGraphQLField" = ProgramUserGraphQLField("gender")
    thesis: "ProgramUserGraphQLField" = ProgramUserGraphQLField("thesis")

    @classmethod
    def invitations(cls) -> "UserInvitationFields":
        return UserInvitationFields("invitations")

    affiliation: "ProgramUserGraphQLField" = ProgramUserGraphQLField("affiliation")
    has_data_access: "ProgramUserGraphQLField" = ProgramUserGraphQLField(
        "hasDataAccess"
    )
    display_name: "ProgramUserGraphQLField" = ProgramUserGraphQLField("displayName")
    email: "ProgramUserGraphQLField" = ProgramUserGraphQLField("email")

    def fields(
        self,
        *subfields: Union[
            ProgramUserGraphQLField,
            "PartnerLinkInterface",
            "ProgramFields",
            "UserFields",
            "UserInvitationFields",
            "UserProfileFields",
        ]
    ) -> "ProgramUserFields":
        """Subfields should come from the ProgramUserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProgramUserFields":
        self._alias = alias
        return self


class ProgramUserSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "ProgramUserFields":
        return ProgramUserFields("matches")

    has_more: "ProgramUserSelectResultGraphQLField" = (
        ProgramUserSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[ProgramUserSelectResultGraphQLField, "ProgramUserFields"]
    ) -> "ProgramUserSelectResultFields":
        """Subfields should come from the ProgramUserSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProgramUserSelectResultFields":
        self._alias = alias
        return self


class ProperMotionFields(GraphQLField):
    @classmethod
    def ra(cls) -> "ProperMotionRAFields":
        return ProperMotionRAFields("ra")

    @classmethod
    def dec(cls) -> "ProperMotionDeclinationFields":
        return ProperMotionDeclinationFields("dec")

    def fields(
        self,
        *subfields: Union[
            ProperMotionGraphQLField,
            "ProperMotionDeclinationFields",
            "ProperMotionRAFields",
        ]
    ) -> "ProperMotionFields":
        """Subfields should come from the ProperMotionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProperMotionFields":
        self._alias = alias
        return self


class ProperMotionDeclinationFields(GraphQLField):
    microarcseconds_per_year: "ProperMotionDeclinationGraphQLField" = (
        ProperMotionDeclinationGraphQLField("microarcsecondsPerYear")
    )
    milliarcseconds_per_year: "ProperMotionDeclinationGraphQLField" = (
        ProperMotionDeclinationGraphQLField("milliarcsecondsPerYear")
    )

    def fields(
        self, *subfields: ProperMotionDeclinationGraphQLField
    ) -> "ProperMotionDeclinationFields":
        """Subfields should come from the ProperMotionDeclinationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProperMotionDeclinationFields":
        self._alias = alias
        return self


class ProperMotionRAFields(GraphQLField):
    microarcseconds_per_year: "ProperMotionRAGraphQLField" = ProperMotionRAGraphQLField(
        "microarcsecondsPerYear"
    )
    milliarcseconds_per_year: "ProperMotionRAGraphQLField" = ProperMotionRAGraphQLField(
        "milliarcsecondsPerYear"
    )

    def fields(self, *subfields: ProperMotionRAGraphQLField) -> "ProperMotionRAFields":
        """Subfields should come from the ProperMotionRAFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProperMotionRAFields":
        self._alias = alias
        return self


class ProposalFields(GraphQLField):
    @classmethod
    def reference(cls) -> "ProposalReferenceFields":
        return ProposalReferenceFields("reference")

    @classmethod
    def call(cls) -> "CallForProposalsFields":
        return CallForProposalsFields("call")

    category: "ProposalGraphQLField" = ProposalGraphQLField("category")

    @classmethod
    def type(cls) -> "ProposalTypeInterface":
        return ProposalTypeInterface("type")

    def fields(
        self,
        *subfields: Union[
            ProposalGraphQLField,
            "CallForProposalsFields",
            "ProposalReferenceFields",
            "ProposalTypeInterface",
        ]
    ) -> "ProposalFields":
        """Subfields should come from the ProposalFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProposalFields":
        self._alias = alias
        return self


class ProposalReferenceFields(GraphQLField):
    label: "ProposalReferenceGraphQLField" = ProposalReferenceGraphQLField("label")
    semester: "ProposalReferenceGraphQLField" = ProposalReferenceGraphQLField(
        "semester"
    )
    semester_index: "ProposalReferenceGraphQLField" = ProposalReferenceGraphQLField(
        "semesterIndex"
    )

    def fields(
        self, *subfields: ProposalReferenceGraphQLField
    ) -> "ProposalReferenceFields":
        """Subfields should come from the ProposalReferenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProposalReferenceFields":
        self._alias = alias
        return self


class ProposalStatusMetaFields(GraphQLField):
    tag: "ProposalStatusMetaGraphQLField" = ProposalStatusMetaGraphQLField("tag")
    name: "ProposalStatusMetaGraphQLField" = ProposalStatusMetaGraphQLField("name")

    def fields(
        self, *subfields: ProposalStatusMetaGraphQLField
    ) -> "ProposalStatusMetaFields":
        """Subfields should come from the ProposalStatusMetaFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProposalStatusMetaFields":
        self._alias = alias
        return self


class RadialVelocityFields(GraphQLField):
    centimeters_per_second: "RadialVelocityGraphQLField" = RadialVelocityGraphQLField(
        "centimetersPerSecond"
    )
    meters_per_second: "RadialVelocityGraphQLField" = RadialVelocityGraphQLField(
        "metersPerSecond"
    )
    kilometers_per_second: "RadialVelocityGraphQLField" = RadialVelocityGraphQLField(
        "kilometersPerSecond"
    )

    def fields(self, *subfields: RadialVelocityGraphQLField) -> "RadialVelocityFields":
        """Subfields should come from the RadialVelocityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RadialVelocityFields":
        self._alias = alias
        return self


class RecordAtomResultFields(GraphQLField):
    @classmethod
    def atom_record(cls) -> "AtomRecordFields":
        return AtomRecordFields("atomRecord")

    def fields(
        self, *subfields: Union[RecordAtomResultGraphQLField, "AtomRecordFields"]
    ) -> "RecordAtomResultFields":
        """Subfields should come from the RecordAtomResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordAtomResultFields":
        self._alias = alias
        return self


class RecordDatasetResultFields(GraphQLField):
    @classmethod
    def dataset(cls) -> "DatasetFields":
        return DatasetFields("dataset")

    def fields(
        self, *subfields: Union[RecordDatasetResultGraphQLField, "DatasetFields"]
    ) -> "RecordDatasetResultFields":
        """Subfields should come from the RecordDatasetResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordDatasetResultFields":
        self._alias = alias
        return self


class RecordFlamingos2StepResultFields(GraphQLField):
    @classmethod
    def step_record(cls) -> "StepRecordFields":
        return StepRecordFields("stepRecord")

    def fields(
        self,
        *subfields: Union[RecordFlamingos2StepResultGraphQLField, "StepRecordFields"]
    ) -> "RecordFlamingos2StepResultFields":
        """Subfields should come from the RecordFlamingos2StepResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordFlamingos2StepResultFields":
        self._alias = alias
        return self


class RecordFlamingos2VisitResultFields(GraphQLField):
    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    def fields(
        self, *subfields: Union[RecordFlamingos2VisitResultGraphQLField, "VisitFields"]
    ) -> "RecordFlamingos2VisitResultFields":
        """Subfields should come from the RecordFlamingos2VisitResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordFlamingos2VisitResultFields":
        self._alias = alias
        return self


class RecordGmosNorthStepResultFields(GraphQLField):
    @classmethod
    def step_record(cls) -> "StepRecordFields":
        return StepRecordFields("stepRecord")

    def fields(
        self,
        *subfields: Union[RecordGmosNorthStepResultGraphQLField, "StepRecordFields"]
    ) -> "RecordGmosNorthStepResultFields":
        """Subfields should come from the RecordGmosNorthStepResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordGmosNorthStepResultFields":
        self._alias = alias
        return self


class RecordGmosNorthVisitResultFields(GraphQLField):
    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    def fields(
        self, *subfields: Union[RecordGmosNorthVisitResultGraphQLField, "VisitFields"]
    ) -> "RecordGmosNorthVisitResultFields":
        """Subfields should come from the RecordGmosNorthVisitResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordGmosNorthVisitResultFields":
        self._alias = alias
        return self


class RecordGmosSouthStepResultFields(GraphQLField):
    @classmethod
    def step_record(cls) -> "StepRecordFields":
        return StepRecordFields("stepRecord")

    def fields(
        self,
        *subfields: Union[RecordGmosSouthStepResultGraphQLField, "StepRecordFields"]
    ) -> "RecordGmosSouthStepResultFields":
        """Subfields should come from the RecordGmosSouthStepResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordGmosSouthStepResultFields":
        self._alias = alias
        return self


class RecordGmosSouthVisitResultFields(GraphQLField):
    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    def fields(
        self, *subfields: Union[RecordGmosSouthVisitResultGraphQLField, "VisitFields"]
    ) -> "RecordGmosSouthVisitResultFields":
        """Subfields should come from the RecordGmosSouthVisitResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RecordGmosSouthVisitResultFields":
        self._alias = alias
        return self


class RedeemUserInvitationResultFields(GraphQLField):
    @classmethod
    def invitation(cls) -> "UserInvitationFields":
        return UserInvitationFields("invitation")

    def fields(
        self,
        *subfields: Union[
            RedeemUserInvitationResultGraphQLField, "UserInvitationFields"
        ]
    ) -> "RedeemUserInvitationResultFields":
        """Subfields should come from the RedeemUserInvitationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RedeemUserInvitationResultFields":
        self._alias = alias
        return self


class RegionFields(GraphQLField):
    @classmethod
    def right_ascension_arc(cls) -> "RightAscensionArcFields":
        return RightAscensionArcFields("rightAscensionArc")

    @classmethod
    def declination_arc(cls) -> "DeclinationArcFields":
        return DeclinationArcFields("declinationArc")

    def fields(
        self,
        *subfields: Union[
            RegionGraphQLField, "DeclinationArcFields", "RightAscensionArcFields"
        ]
    ) -> "RegionFields":
        """Subfields should come from the RegionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RegionFields":
        self._alias = alias
        return self


class ResetAcquisitionResultFields(GraphQLField):
    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    def fields(
        self, *subfields: Union[ResetAcquisitionResultGraphQLField, "ObservationFields"]
    ) -> "ResetAcquisitionResultFields":
        """Subfields should come from the ResetAcquisitionResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ResetAcquisitionResultFields":
        self._alias = alias
        return self


class RevokeUserInvitationResultFields(GraphQLField):
    @classmethod
    def invitation(cls) -> "UserInvitationFields":
        return UserInvitationFields("invitation")

    def fields(
        self,
        *subfields: Union[
            RevokeUserInvitationResultGraphQLField, "UserInvitationFields"
        ]
    ) -> "RevokeUserInvitationResultFields":
        """Subfields should come from the RevokeUserInvitationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RevokeUserInvitationResultFields":
        self._alias = alias
        return self


class RightAscensionFields(GraphQLField):
    hms: "RightAscensionGraphQLField" = RightAscensionGraphQLField("hms")
    hours: "RightAscensionGraphQLField" = RightAscensionGraphQLField("hours")
    degrees: "RightAscensionGraphQLField" = RightAscensionGraphQLField("degrees")
    microseconds: "RightAscensionGraphQLField" = RightAscensionGraphQLField(
        "microseconds"
    )

    def fields(self, *subfields: RightAscensionGraphQLField) -> "RightAscensionFields":
        """Subfields should come from the RightAscensionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RightAscensionFields":
        self._alias = alias
        return self


class RightAscensionArcFields(GraphQLField):
    type: "RightAscensionArcGraphQLField" = RightAscensionArcGraphQLField("type")

    @classmethod
    def start(cls) -> "RightAscensionFields":
        return RightAscensionFields("start")

    @classmethod
    def end(cls) -> "RightAscensionFields":
        return RightAscensionFields("end")

    def fields(
        self, *subfields: Union[RightAscensionArcGraphQLField, "RightAscensionFields"]
    ) -> "RightAscensionArcFields":
        """Subfields should come from the RightAscensionArcFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RightAscensionArcFields":
        self._alias = alias
        return self


class ScienceRequirementsFields(GraphQLField):
    mode: "ScienceRequirementsGraphQLField" = ScienceRequirementsGraphQLField("mode")

    @classmethod
    def exposure_time_mode(cls) -> "ExposureTimeModeFields":
        return ExposureTimeModeFields("exposureTimeMode")

    @classmethod
    def spectroscopy(cls) -> "SpectroscopyScienceRequirementsFields":
        return SpectroscopyScienceRequirementsFields("spectroscopy")

    @classmethod
    def imaging(cls) -> "ImagingScienceRequirementsFields":
        return ImagingScienceRequirementsFields("imaging")

    def fields(
        self,
        *subfields: Union[
            ScienceRequirementsGraphQLField,
            "ExposureTimeModeFields",
            "ImagingScienceRequirementsFields",
            "SpectroscopyScienceRequirementsFields",
        ]
    ) -> "ScienceRequirementsFields":
        """Subfields should come from the ScienceRequirementsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ScienceRequirementsFields":
        self._alias = alias
        return self


class SequenceDigestFields(GraphQLField):
    observe_class: "SequenceDigestGraphQLField" = SequenceDigestGraphQLField(
        "observeClass"
    )

    @classmethod
    def time_estimate(cls) -> "CategorizedTimeFields":
        return CategorizedTimeFields("timeEstimate")

    @classmethod
    def offsets(cls) -> "OffsetFields":
        return OffsetFields("offsets")

    atom_count: "SequenceDigestGraphQLField" = SequenceDigestGraphQLField("atomCount")
    execution_state: "SequenceDigestGraphQLField" = SequenceDigestGraphQLField(
        "executionState"
    )

    def fields(
        self,
        *subfields: Union[
            SequenceDigestGraphQLField, "CategorizedTimeFields", "OffsetFields"
        ]
    ) -> "SequenceDigestFields":
        """Subfields should come from the SequenceDigestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SequenceDigestFields":
        self._alias = alias
        return self


class SequenceEventFields(GraphQLField):
    id: "SequenceEventGraphQLField" = SequenceEventGraphQLField("id")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    received: "SequenceEventGraphQLField" = SequenceEventGraphQLField("received")
    event_type: "SequenceEventGraphQLField" = SequenceEventGraphQLField("eventType")
    command: "SequenceEventGraphQLField" = SequenceEventGraphQLField("command")
    client_id: "SequenceEventGraphQLField" = SequenceEventGraphQLField("clientId")

    def fields(
        self,
        *subfields: Union[SequenceEventGraphQLField, "ObservationFields", "VisitFields"]
    ) -> "SequenceEventFields":
        """Subfields should come from the SequenceEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SequenceEventFields":
        self._alias = alias
        return self


class SetAllocationsResultFields(GraphQLField):
    @classmethod
    def allocations(cls) -> "AllocationFields":
        return AllocationFields("allocations")

    def fields(
        self, *subfields: Union[SetAllocationsResultGraphQLField, "AllocationFields"]
    ) -> "SetAllocationsResultFields":
        """Subfields should come from the SetAllocationsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetAllocationsResultFields":
        self._alias = alias
        return self


class SetGuideTargetNameResultFields(GraphQLField):
    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    def fields(
        self,
        *subfields: Union[SetGuideTargetNameResultGraphQLField, "ObservationFields"]
    ) -> "SetGuideTargetNameResultFields":
        """Subfields should come from the SetGuideTargetNameResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetGuideTargetNameResultFields":
        self._alias = alias
        return self


class SetProgramReferenceResultFields(GraphQLField):
    @classmethod
    def reference(cls) -> "ProgramReferenceInterface":
        return ProgramReferenceInterface("reference")

    def fields(
        self,
        *subfields: Union[
            SetProgramReferenceResultGraphQLField, "ProgramReferenceInterface"
        ]
    ) -> "SetProgramReferenceResultFields":
        """Subfields should come from the SetProgramReferenceResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetProgramReferenceResultFields":
        self._alias = alias
        return self


class SetProposalStatusResultFields(GraphQLField):
    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    def fields(
        self, *subfields: Union[SetProposalStatusResultGraphQLField, "ProgramFields"]
    ) -> "SetProposalStatusResultFields":
        """Subfields should come from the SetProposalStatusResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetProposalStatusResultFields":
        self._alias = alias
        return self


class SetupTimeFields(GraphQLField):
    @classmethod
    def full(cls) -> "TimeSpanFields":
        return TimeSpanFields("full")

    @classmethod
    def reacquisition(cls) -> "TimeSpanFields":
        return TimeSpanFields("reacquisition")

    def fields(
        self, *subfields: Union[SetupTimeGraphQLField, "TimeSpanFields"]
    ) -> "SetupTimeFields":
        """Subfields should come from the SetupTimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetupTimeFields":
        self._alias = alias
        return self


class SiderealFields(GraphQLField):
    @classmethod
    def ra(cls) -> "RightAscensionFields":
        return RightAscensionFields("ra")

    @classmethod
    def dec(cls) -> "DeclinationFields":
        return DeclinationFields("dec")

    epoch: "SiderealGraphQLField" = SiderealGraphQLField("epoch")

    @classmethod
    def proper_motion(cls) -> "ProperMotionFields":
        return ProperMotionFields("properMotion")

    @classmethod
    def radial_velocity(cls) -> "RadialVelocityFields":
        return RadialVelocityFields("radialVelocity")

    @classmethod
    def parallax(cls) -> "ParallaxFields":
        return ParallaxFields("parallax")

    @classmethod
    def catalog_info(cls) -> "CatalogInfoFields":
        return CatalogInfoFields("catalogInfo")

    def fields(
        self,
        *subfields: Union[
            SiderealGraphQLField,
            "CatalogInfoFields",
            "DeclinationFields",
            "ParallaxFields",
            "ProperMotionFields",
            "RadialVelocityFields",
            "RightAscensionFields",
        ]
    ) -> "SiderealFields":
        """Subfields should come from the SiderealFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SiderealFields":
        self._alias = alias
        return self


class SignalToNoiseAtFields(GraphQLField):
    single: "SignalToNoiseAtGraphQLField" = SignalToNoiseAtGraphQLField("single")
    total: "SignalToNoiseAtGraphQLField" = SignalToNoiseAtGraphQLField("total")

    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    def fields(
        self, *subfields: Union[SignalToNoiseAtGraphQLField, "WavelengthFields"]
    ) -> "SignalToNoiseAtFields":
        """Subfields should come from the SignalToNoiseAtFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SignalToNoiseAtFields":
        self._alias = alias
        return self


class SignalToNoiseExposureTimeModeFields(GraphQLField):
    value: "SignalToNoiseExposureTimeModeGraphQLField" = (
        SignalToNoiseExposureTimeModeGraphQLField("value")
    )

    @classmethod
    def at(cls) -> "WavelengthFields":
        return WavelengthFields("at")

    def fields(
        self,
        *subfields: Union[SignalToNoiseExposureTimeModeGraphQLField, "WavelengthFields"]
    ) -> "SignalToNoiseExposureTimeModeFields":
        """Subfields should come from the SignalToNoiseExposureTimeModeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SignalToNoiseExposureTimeModeFields":
        self._alias = alias
        return self


class SiteCoordinateLimitsFields(GraphQLField):
    @classmethod
    def north(cls) -> "CoordinateLimitsFields":
        return CoordinateLimitsFields("north")

    @classmethod
    def south(cls) -> "CoordinateLimitsFields":
        return CoordinateLimitsFields("south")

    def fields(
        self,
        *subfields: Union[SiteCoordinateLimitsGraphQLField, "CoordinateLimitsFields"]
    ) -> "SiteCoordinateLimitsFields":
        """Subfields should come from the SiteCoordinateLimitsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SiteCoordinateLimitsFields":
        self._alias = alias
        return self


class SlewEventFields(GraphQLField):
    id: "SlewEventGraphQLField" = SlewEventGraphQLField("id")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    received: "SlewEventGraphQLField" = SlewEventGraphQLField("received")
    event_type: "SlewEventGraphQLField" = SlewEventGraphQLField("eventType")
    slew_stage: "SlewEventGraphQLField" = SlewEventGraphQLField("slewStage")
    client_id: "SlewEventGraphQLField" = SlewEventGraphQLField("clientId")

    def fields(
        self,
        *subfields: Union[SlewEventGraphQLField, "ObservationFields", "VisitFields"]
    ) -> "SlewEventFields":
        """Subfields should come from the SlewEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlewEventFields":
        self._alias = alias
        return self


class SourceProfileFields(GraphQLField):
    @classmethod
    def point(cls) -> "SpectralDefinitionIntegratedFields":
        return SpectralDefinitionIntegratedFields("point")

    @classmethod
    def uniform(cls) -> "SpectralDefinitionSurfaceFields":
        return SpectralDefinitionSurfaceFields("uniform")

    @classmethod
    def gaussian(cls) -> "GaussianSourceFields":
        return GaussianSourceFields("gaussian")

    def fields(
        self,
        *subfields: Union[
            SourceProfileGraphQLField,
            "GaussianSourceFields",
            "SpectralDefinitionIntegratedFields",
            "SpectralDefinitionSurfaceFields",
        ]
    ) -> "SourceProfileFields":
        """Subfields should come from the SourceProfileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SourceProfileFields":
        self._alias = alias
        return self


class SpectralDefinitionIntegratedFields(GraphQLField):
    @classmethod
    def band_normalized(cls) -> "BandNormalizedIntegratedFields":
        return BandNormalizedIntegratedFields("bandNormalized")

    @classmethod
    def emission_lines(cls) -> "EmissionLinesIntegratedFields":
        return EmissionLinesIntegratedFields("emissionLines")

    def fields(
        self,
        *subfields: Union[
            SpectralDefinitionIntegratedGraphQLField,
            "BandNormalizedIntegratedFields",
            "EmissionLinesIntegratedFields",
        ]
    ) -> "SpectralDefinitionIntegratedFields":
        """Subfields should come from the SpectralDefinitionIntegratedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpectralDefinitionIntegratedFields":
        self._alias = alias
        return self


class SpectralDefinitionSurfaceFields(GraphQLField):
    @classmethod
    def band_normalized(cls) -> "BandNormalizedSurfaceFields":
        return BandNormalizedSurfaceFields("bandNormalized")

    @classmethod
    def emission_lines(cls) -> "EmissionLinesSurfaceFields":
        return EmissionLinesSurfaceFields("emissionLines")

    def fields(
        self,
        *subfields: Union[
            SpectralDefinitionSurfaceGraphQLField,
            "BandNormalizedSurfaceFields",
            "EmissionLinesSurfaceFields",
        ]
    ) -> "SpectralDefinitionSurfaceFields":
        """Subfields should come from the SpectralDefinitionSurfaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpectralDefinitionSurfaceFields":
        self._alias = alias
        return self


class SpectroscopyConfigOptionFields(GraphQLField):
    name: "SpectroscopyConfigOptionGraphQLField" = SpectroscopyConfigOptionGraphQLField(
        "name"
    )
    instrument: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("instrument")
    )
    focal_plane: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("focalPlane")
    )
    fpu_label: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("fpuLabel")
    )

    @classmethod
    def slit_width(cls) -> "AngleFields":
        return AngleFields("slitWidth")

    @classmethod
    def slit_length(cls) -> "AngleFields":
        return AngleFields("slitLength")

    disperser_label: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("disperserLabel")
    )
    filter_label: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("filterLabel")
    )

    @classmethod
    def wavelength_min(cls) -> "WavelengthFields":
        return WavelengthFields("wavelengthMin")

    @classmethod
    def wavelength_max(cls) -> "WavelengthFields":
        return WavelengthFields("wavelengthMax")

    @classmethod
    def wavelength_optimal(cls) -> "WavelengthFields":
        return WavelengthFields("wavelengthOptimal")

    @classmethod
    def wavelength_coverage(cls) -> "WavelengthFields":
        return WavelengthFields("wavelengthCoverage")

    resolution: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("resolution")
    )
    adaptive_optics: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("adaptiveOptics")
    )
    capability: "SpectroscopyConfigOptionGraphQLField" = (
        SpectroscopyConfigOptionGraphQLField("capability")
    )
    site: "SpectroscopyConfigOptionGraphQLField" = SpectroscopyConfigOptionGraphQLField(
        "site"
    )

    @classmethod
    def gmos_north(cls) -> "SpectroscopyConfigOptionGmosNorthFields":
        return SpectroscopyConfigOptionGmosNorthFields("gmosNorth")

    @classmethod
    def gmos_south(cls) -> "SpectroscopyConfigOptionGmosSouthFields":
        return SpectroscopyConfigOptionGmosSouthFields("gmosSouth")

    @classmethod
    def flamingos_2(cls) -> "SpectroscopyConfigOptionFlamingos2Fields":
        return SpectroscopyConfigOptionFlamingos2Fields("flamingos2")

    def fields(
        self,
        *subfields: Union[
            SpectroscopyConfigOptionGraphQLField,
            "AngleFields",
            "SpectroscopyConfigOptionFlamingos2Fields",
            "SpectroscopyConfigOptionGmosNorthFields",
            "SpectroscopyConfigOptionGmosSouthFields",
            "WavelengthFields",
        ]
    ) -> "SpectroscopyConfigOptionFields":
        """Subfields should come from the SpectroscopyConfigOptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpectroscopyConfigOptionFields":
        self._alias = alias
        return self


class SpectroscopyConfigOptionFlamingos2Fields(GraphQLField):
    fpu: "SpectroscopyConfigOptionFlamingos2GraphQLField" = (
        SpectroscopyConfigOptionFlamingos2GraphQLField("fpu")
    )
    disperser: "SpectroscopyConfigOptionFlamingos2GraphQLField" = (
        SpectroscopyConfigOptionFlamingos2GraphQLField("disperser")
    )
    filter: "SpectroscopyConfigOptionFlamingos2GraphQLField" = (
        SpectroscopyConfigOptionFlamingos2GraphQLField("filter")
    )

    def fields(
        self, *subfields: SpectroscopyConfigOptionFlamingos2GraphQLField
    ) -> "SpectroscopyConfigOptionFlamingos2Fields":
        """Subfields should come from the SpectroscopyConfigOptionFlamingos2Fields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpectroscopyConfigOptionFlamingos2Fields":
        self._alias = alias
        return self


class SpectroscopyConfigOptionGmosNorthFields(GraphQLField):
    fpu: "SpectroscopyConfigOptionGmosNorthGraphQLField" = (
        SpectroscopyConfigOptionGmosNorthGraphQLField("fpu")
    )
    grating: "SpectroscopyConfigOptionGmosNorthGraphQLField" = (
        SpectroscopyConfigOptionGmosNorthGraphQLField("grating")
    )
    filter: "SpectroscopyConfigOptionGmosNorthGraphQLField" = (
        SpectroscopyConfigOptionGmosNorthGraphQLField("filter")
    )

    def fields(
        self, *subfields: SpectroscopyConfigOptionGmosNorthGraphQLField
    ) -> "SpectroscopyConfigOptionGmosNorthFields":
        """Subfields should come from the SpectroscopyConfigOptionGmosNorthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpectroscopyConfigOptionGmosNorthFields":
        self._alias = alias
        return self


class SpectroscopyConfigOptionGmosSouthFields(GraphQLField):
    fpu: "SpectroscopyConfigOptionGmosSouthGraphQLField" = (
        SpectroscopyConfigOptionGmosSouthGraphQLField("fpu")
    )
    grating: "SpectroscopyConfigOptionGmosSouthGraphQLField" = (
        SpectroscopyConfigOptionGmosSouthGraphQLField("grating")
    )
    filter: "SpectroscopyConfigOptionGmosSouthGraphQLField" = (
        SpectroscopyConfigOptionGmosSouthGraphQLField("filter")
    )

    def fields(
        self, *subfields: SpectroscopyConfigOptionGmosSouthGraphQLField
    ) -> "SpectroscopyConfigOptionGmosSouthFields":
        """Subfields should come from the SpectroscopyConfigOptionGmosSouthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpectroscopyConfigOptionGmosSouthFields":
        self._alias = alias
        return self


class SpectroscopyScienceRequirementsFields(GraphQLField):
    @classmethod
    def wavelength(cls) -> "WavelengthFields":
        return WavelengthFields("wavelength")

    resolution: "SpectroscopyScienceRequirementsGraphQLField" = (
        SpectroscopyScienceRequirementsGraphQLField("resolution")
    )

    @classmethod
    def wavelength_coverage(cls) -> "WavelengthFields":
        return WavelengthFields("wavelengthCoverage")

    focal_plane: "SpectroscopyScienceRequirementsGraphQLField" = (
        SpectroscopyScienceRequirementsGraphQLField("focalPlane")
    )

    @classmethod
    def focal_plane_angle(cls) -> "AngleFields":
        return AngleFields("focalPlaneAngle")

    capability: "SpectroscopyScienceRequirementsGraphQLField" = (
        SpectroscopyScienceRequirementsGraphQLField("capability")
    )

    def fields(
        self,
        *subfields: Union[
            SpectroscopyScienceRequirementsGraphQLField,
            "AngleFields",
            "WavelengthFields",
        ]
    ) -> "SpectroscopyScienceRequirementsFields":
        """Subfields should come from the SpectroscopyScienceRequirementsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SpectroscopyScienceRequirementsFields":
        self._alias = alias
        return self


class StepEstimateFields(GraphQLField):
    @classmethod
    def config_change(cls) -> "AllConfigChangeEstimatesFields":
        return AllConfigChangeEstimatesFields("configChange")

    @classmethod
    def detector(cls) -> "AllDetectorEstimatesFields":
        return AllDetectorEstimatesFields("detector")

    @classmethod
    def total(cls) -> "TimeSpanFields":
        return TimeSpanFields("total")

    def fields(
        self,
        *subfields: Union[
            StepEstimateGraphQLField,
            "AllConfigChangeEstimatesFields",
            "AllDetectorEstimatesFields",
            "TimeSpanFields",
        ]
    ) -> "StepEstimateFields":
        """Subfields should come from the StepEstimateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StepEstimateFields":
        self._alias = alias
        return self


class StepEventFields(GraphQLField):
    id: "StepEventGraphQLField" = StepEventGraphQLField("id")

    @classmethod
    def visit(cls) -> "VisitFields":
        return VisitFields("visit")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    received: "StepEventGraphQLField" = StepEventGraphQLField("received")
    event_type: "StepEventGraphQLField" = StepEventGraphQLField("eventType")

    @classmethod
    def atom(cls) -> "AtomRecordFields":
        return AtomRecordFields("atom")

    @classmethod
    def step(cls) -> "StepRecordFields":
        return StepRecordFields("step")

    step_stage: "StepEventGraphQLField" = StepEventGraphQLField("stepStage")
    client_id: "StepEventGraphQLField" = StepEventGraphQLField("clientId")

    def fields(
        self,
        *subfields: Union[
            StepEventGraphQLField,
            "AtomRecordFields",
            "ObservationFields",
            "StepRecordFields",
            "VisitFields",
        ]
    ) -> "StepEventFields":
        """Subfields should come from the StepEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StepEventFields":
        self._alias = alias
        return self


class StepRecordFields(GraphQLField):
    id: "StepRecordGraphQLField" = StepRecordGraphQLField("id")
    index: "StepRecordGraphQLField" = StepRecordGraphQLField("index")
    instrument: "StepRecordGraphQLField" = StepRecordGraphQLField("instrument")

    @classmethod
    def atom(cls) -> "AtomRecordFields":
        return AtomRecordFields("atom")

    created: "StepRecordGraphQLField" = StepRecordGraphQLField("created")
    execution_state: "StepRecordGraphQLField" = StepRecordGraphQLField("executionState")

    @classmethod
    def interval(cls) -> "TimestampIntervalFields":
        return TimestampIntervalFields("interval")

    @classmethod
    def step_config(cls) -> "StepConfigInterface":
        return StepConfigInterface("stepConfig")

    @classmethod
    def telescope_config(cls) -> "TelescopeConfigFields":
        return TelescopeConfigFields("telescopeConfig")

    observe_class: "StepRecordGraphQLField" = StepRecordGraphQLField("observeClass")

    @classmethod
    def estimate(cls) -> "TimeSpanFields":
        return TimeSpanFields("estimate")

    qa_state: "StepRecordGraphQLField" = StepRecordGraphQLField("qaState")

    @classmethod
    def datasets(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "DatasetSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "DatasetId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetSelectResultFields("datasets", arguments=cleared_arguments)

    @classmethod
    def events(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "ExecutionEventSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "ExecutionEventId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExecutionEventSelectResultFields("events", arguments=cleared_arguments)

    generated_id: "StepRecordGraphQLField" = StepRecordGraphQLField("generatedId")

    @classmethod
    def flamingos_2(cls) -> "Flamingos2DynamicFields":
        return Flamingos2DynamicFields("flamingos2")

    @classmethod
    def gmos_north(cls) -> "GmosNorthDynamicFields":
        return GmosNorthDynamicFields("gmosNorth")

    @classmethod
    def gmos_south(cls) -> "GmosSouthDynamicFields":
        return GmosSouthDynamicFields("gmosSouth")

    def fields(
        self,
        *subfields: Union[
            StepRecordGraphQLField,
            "AtomRecordFields",
            "DatasetSelectResultFields",
            "ExecutionEventSelectResultFields",
            "Flamingos2DynamicFields",
            "GmosNorthDynamicFields",
            "GmosSouthDynamicFields",
            "StepConfigInterface",
            "TelescopeConfigFields",
            "TimeSpanFields",
            "TimestampIntervalFields",
        ]
    ) -> "StepRecordFields":
        """Subfields should come from the StepRecordFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StepRecordFields":
        self._alias = alias
        return self


class StepRecordSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "StepRecordFields":
        return StepRecordFields("matches")

    has_more: "StepRecordSelectResultGraphQLField" = StepRecordSelectResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[StepRecordSelectResultGraphQLField, "StepRecordFields"]
    ) -> "StepRecordSelectResultFields":
        """Subfields should come from the StepRecordSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StepRecordSelectResultFields":
        self._alias = alias
        return self


class TargetFields(GraphQLField):
    id: "TargetGraphQLField" = TargetGraphQLField("id")
    existence: "TargetGraphQLField" = TargetGraphQLField("existence")

    @classmethod
    def program(cls, include_deleted: bool) -> "ProgramFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProgramFields("program", arguments=cleared_arguments)

    name: "TargetGraphQLField" = TargetGraphQLField("name")
    calibration_role: "TargetGraphQLField" = TargetGraphQLField("calibrationRole")

    @classmethod
    def source_profile(cls) -> "SourceProfileFields":
        return SourceProfileFields("sourceProfile")

    @classmethod
    def sidereal(cls) -> "SiderealFields":
        return SiderealFields("sidereal")

    @classmethod
    def nonsidereal(cls) -> "NonsiderealFields":
        return NonsiderealFields("nonsidereal")

    @classmethod
    def opportunity(cls) -> "OpportunityFields":
        return OpportunityFields("opportunity")

    def fields(
        self,
        *subfields: Union[
            TargetGraphQLField,
            "NonsiderealFields",
            "OpportunityFields",
            "ProgramFields",
            "SiderealFields",
            "SourceProfileFields",
        ]
    ) -> "TargetFields":
        """Subfields should come from the TargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TargetFields":
        self._alias = alias
        return self


class TargetEnvironmentFields(GraphQLField):
    @classmethod
    def asterism(cls, include_deleted: bool) -> "TargetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TargetFields("asterism", arguments=cleared_arguments)

    @classmethod
    def first_science_target(cls, include_deleted: bool) -> "TargetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TargetFields("firstScienceTarget", arguments=cleared_arguments)

    @classmethod
    def base_position(cls, observation_time: Any) -> "CoordinatesFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "observationTime": {"type": "Timestamp!", "value": observation_time}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CoordinatesFields("basePosition", arguments=cleared_arguments)

    @classmethod
    def guide_environments(cls, observation_time: Any) -> "GuideEnvironmentFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "observationTime": {"type": "Timestamp!", "value": observation_time}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GuideEnvironmentFields("guideEnvironments", arguments=cleared_arguments)

    @classmethod
    def guide_environment(cls) -> "GuideEnvironmentFields":
        return GuideEnvironmentFields("guideEnvironment")

    @classmethod
    def guide_availability(
        cls, start: Any, end: Any
    ) -> "GuideAvailabilityPeriodFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "start": {"type": "Timestamp!", "value": start},
            "end": {"type": "Timestamp!", "value": end},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GuideAvailabilityPeriodFields(
            "guideAvailability", arguments=cleared_arguments
        )

    @classmethod
    def explicit_base(cls) -> "CoordinatesFields":
        return CoordinatesFields("explicitBase")

    guide_target_name: "TargetEnvironmentGraphQLField" = TargetEnvironmentGraphQLField(
        "guideTargetName"
    )

    def fields(
        self,
        *subfields: Union[
            TargetEnvironmentGraphQLField,
            "CoordinatesFields",
            "GuideAvailabilityPeriodFields",
            "GuideEnvironmentFields",
            "TargetFields",
        ]
    ) -> "TargetEnvironmentFields":
        """Subfields should come from the TargetEnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TargetEnvironmentFields":
        self._alias = alias
        return self


class TargetGroupFields(GraphQLField):
    @classmethod
    def observations(
        cls,
        include_deleted: bool,
        *,
        offset: Optional[Any] = None,
        limit: Optional[Any] = None
    ) -> "ObservationSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeleted": {"type": "Boolean!", "value": include_deleted},
            "OFFSET": {"type": "ObservationId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObservationSelectResultFields(
            "observations", arguments=cleared_arguments
        )

    @classmethod
    def target(cls) -> "TargetFields":
        return TargetFields("target")

    @classmethod
    def program(cls) -> "ProgramFields":
        return ProgramFields("program")

    def fields(
        self,
        *subfields: Union[
            TargetGroupGraphQLField,
            "ObservationSelectResultFields",
            "ProgramFields",
            "TargetFields",
        ]
    ) -> "TargetGroupFields":
        """Subfields should come from the TargetGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TargetGroupFields":
        self._alias = alias
        return self


class TargetGroupSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "TargetGroupFields":
        return TargetGroupFields("matches")

    has_more: "TargetGroupSelectResultGraphQLField" = (
        TargetGroupSelectResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[TargetGroupSelectResultGraphQLField, "TargetGroupFields"]
    ) -> "TargetGroupSelectResultFields":
        """Subfields should come from the TargetGroupSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TargetGroupSelectResultFields":
        self._alias = alias
        return self


class TargetSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "TargetFields":
        return TargetFields("matches")

    has_more: "TargetSelectResultGraphQLField" = TargetSelectResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[TargetSelectResultGraphQLField, "TargetFields"]
    ) -> "TargetSelectResultFields":
        """Subfields should come from the TargetSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TargetSelectResultFields":
        self._alias = alias
        return self


class TelescopeConfigFields(GraphQLField):
    @classmethod
    def offset(cls) -> "OffsetFields":
        return OffsetFields("offset")

    guiding: "TelescopeConfigGraphQLField" = TelescopeConfigGraphQLField("guiding")

    def fields(
        self, *subfields: Union[TelescopeConfigGraphQLField, "OffsetFields"]
    ) -> "TelescopeConfigFields":
        """Subfields should come from the TelescopeConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TelescopeConfigFields":
        self._alias = alias
        return self


class TimeAndCountExposureTimeModeFields(GraphQLField):
    @classmethod
    def time(cls) -> "TimeSpanFields":
        return TimeSpanFields("time")

    count: "TimeAndCountExposureTimeModeGraphQLField" = (
        TimeAndCountExposureTimeModeGraphQLField("count")
    )

    @classmethod
    def at(cls) -> "WavelengthFields":
        return WavelengthFields("at")

    def fields(
        self,
        *subfields: Union[
            TimeAndCountExposureTimeModeGraphQLField,
            "TimeSpanFields",
            "WavelengthFields",
        ]
    ) -> "TimeAndCountExposureTimeModeFields":
        """Subfields should come from the TimeAndCountExposureTimeModeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeAndCountExposureTimeModeFields":
        self._alias = alias
        return self


class TimeChargeCorrectionFields(GraphQLField):
    created: "TimeChargeCorrectionGraphQLField" = TimeChargeCorrectionGraphQLField(
        "created"
    )
    charge_class: "TimeChargeCorrectionGraphQLField" = TimeChargeCorrectionGraphQLField(
        "chargeClass"
    )
    op: "TimeChargeCorrectionGraphQLField" = TimeChargeCorrectionGraphQLField("op")

    @classmethod
    def amount(cls) -> "TimeSpanFields":
        return TimeSpanFields("amount")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    comment: "TimeChargeCorrectionGraphQLField" = TimeChargeCorrectionGraphQLField(
        "comment"
    )

    def fields(
        self,
        *subfields: Union[
            TimeChargeCorrectionGraphQLField, "TimeSpanFields", "UserFields"
        ]
    ) -> "TimeChargeCorrectionFields":
        """Subfields should come from the TimeChargeCorrectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeChargeCorrectionFields":
        self._alias = alias
        return self


class TimeChargeInvoiceFields(GraphQLField):
    @classmethod
    def execution_time(cls) -> "CategorizedTimeFields":
        return CategorizedTimeFields("executionTime")

    @classmethod
    def discounts(cls) -> "TimeChargeDiscountInterface":
        return TimeChargeDiscountInterface("discounts")

    @classmethod
    def corrections(cls) -> "TimeChargeCorrectionFields":
        return TimeChargeCorrectionFields("corrections")

    @classmethod
    def final_charge(cls) -> "CategorizedTimeFields":
        return CategorizedTimeFields("finalCharge")

    def fields(
        self,
        *subfields: Union[
            TimeChargeInvoiceGraphQLField,
            "CategorizedTimeFields",
            "TimeChargeCorrectionFields",
            "TimeChargeDiscountInterface",
        ]
    ) -> "TimeChargeInvoiceFields":
        """Subfields should come from the TimeChargeInvoiceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeChargeInvoiceFields":
        self._alias = alias
        return self


class TimeSpanFields(GraphQLField):
    microseconds: "TimeSpanGraphQLField" = TimeSpanGraphQLField("microseconds")
    milliseconds: "TimeSpanGraphQLField" = TimeSpanGraphQLField("milliseconds")
    seconds: "TimeSpanGraphQLField" = TimeSpanGraphQLField("seconds")
    minutes: "TimeSpanGraphQLField" = TimeSpanGraphQLField("minutes")
    hours: "TimeSpanGraphQLField" = TimeSpanGraphQLField("hours")
    iso: "TimeSpanGraphQLField" = TimeSpanGraphQLField("iso")

    def fields(self, *subfields: TimeSpanGraphQLField) -> "TimeSpanFields":
        """Subfields should come from the TimeSpanFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeSpanFields":
        self._alias = alias
        return self


class TimestampIntervalFields(GraphQLField):
    start: "TimestampIntervalGraphQLField" = TimestampIntervalGraphQLField("start")
    end: "TimestampIntervalGraphQLField" = TimestampIntervalGraphQLField("end")

    @classmethod
    def duration(cls) -> "TimeSpanFields":
        return TimeSpanFields("duration")

    def fields(
        self, *subfields: Union[TimestampIntervalGraphQLField, "TimeSpanFields"]
    ) -> "TimestampIntervalFields":
        """Subfields should come from the TimestampIntervalFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimestampIntervalFields":
        self._alias = alias
        return self


class TimingWindowFields(GraphQLField):
    inclusion: "TimingWindowGraphQLField" = TimingWindowGraphQLField("inclusion")
    start_utc: "TimingWindowGraphQLField" = TimingWindowGraphQLField("startUtc")
    end: "TimingWindowEndUnion" = TimingWindowEndUnion("end")

    def fields(
        self, *subfields: Union[TimingWindowGraphQLField, "TimingWindowEndUnion"]
    ) -> "TimingWindowFields":
        """Subfields should come from the TimingWindowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimingWindowFields":
        self._alias = alias
        return self


class TimingWindowEndAfterFields(GraphQLField):
    @classmethod
    def after(cls) -> "TimeSpanFields":
        return TimeSpanFields("after")

    @classmethod
    def repeat(cls) -> "TimingWindowRepeatFields":
        return TimingWindowRepeatFields("repeat")

    def fields(
        self,
        *subfields: Union[
            TimingWindowEndAfterGraphQLField,
            "TimeSpanFields",
            "TimingWindowRepeatFields",
        ]
    ) -> "TimingWindowEndAfterFields":
        """Subfields should come from the TimingWindowEndAfterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimingWindowEndAfterFields":
        self._alias = alias
        return self


class TimingWindowEndAtFields(GraphQLField):
    at_utc: "TimingWindowEndAtGraphQLField" = TimingWindowEndAtGraphQLField("atUtc")

    def fields(
        self, *subfields: TimingWindowEndAtGraphQLField
    ) -> "TimingWindowEndAtFields":
        """Subfields should come from the TimingWindowEndAtFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimingWindowEndAtFields":
        self._alias = alias
        return self


class TimingWindowRepeatFields(GraphQLField):
    @classmethod
    def period(cls) -> "TimeSpanFields":
        return TimeSpanFields("period")

    times: "TimingWindowRepeatGraphQLField" = TimingWindowRepeatGraphQLField("times")

    def fields(
        self, *subfields: Union[TimingWindowRepeatGraphQLField, "TimeSpanFields"]
    ) -> "TimingWindowRepeatFields":
        """Subfields should come from the TimingWindowRepeatFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimingWindowRepeatFields":
        self._alias = alias
        return self


class UnlinkUserResultFields(GraphQLField):
    result: "UnlinkUserResultGraphQLField" = UnlinkUserResultGraphQLField("result")

    def fields(
        self, *subfields: UnlinkUserResultGraphQLField
    ) -> "UnlinkUserResultFields":
        """Subfields should come from the UnlinkUserResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnlinkUserResultFields":
        self._alias = alias
        return self


class UnnormalizedSedFields(GraphQLField):
    stellar_library: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField(
        "stellarLibrary"
    )
    cool_star: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField("coolStar")
    galaxy: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField("galaxy")
    planet: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField("planet")
    quasar: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField("quasar")
    hii_region: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField("hiiRegion")
    planetary_nebula: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField(
        "planetaryNebula"
    )
    power_law: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField("powerLaw")
    black_body_temp_k: "UnnormalizedSedGraphQLField" = UnnormalizedSedGraphQLField(
        "blackBodyTempK"
    )

    @classmethod
    def flux_densities(cls) -> "FluxDensityEntryFields":
        return FluxDensityEntryFields("fluxDensities")

    flux_densities_attachment: "UnnormalizedSedGraphQLField" = (
        UnnormalizedSedGraphQLField("fluxDensitiesAttachment")
    )

    def fields(
        self, *subfields: Union[UnnormalizedSedGraphQLField, "FluxDensityEntryFields"]
    ) -> "UnnormalizedSedFields":
        """Subfields should come from the UnnormalizedSedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnnormalizedSedFields":
        self._alias = alias
        return self


class UpdateAsterismsResultFields(GraphQLField):
    @classmethod
    def observations(cls) -> "ObservationFields":
        return ObservationFields("observations")

    has_more: "UpdateAsterismsResultGraphQLField" = UpdateAsterismsResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[UpdateAsterismsResultGraphQLField, "ObservationFields"]
    ) -> "UpdateAsterismsResultFields":
        """Subfields should come from the UpdateAsterismsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateAsterismsResultFields":
        self._alias = alias
        return self


class UpdateAttachmentsResultFields(GraphQLField):
    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    has_more: "UpdateAttachmentsResultGraphQLField" = (
        UpdateAttachmentsResultGraphQLField("hasMore")
    )

    def fields(
        self, *subfields: Union[UpdateAttachmentsResultGraphQLField, "AttachmentFields"]
    ) -> "UpdateAttachmentsResultFields":
        """Subfields should come from the UpdateAttachmentsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateAttachmentsResultFields":
        self._alias = alias
        return self


class UpdateCallsForProposalsResultFields(GraphQLField):
    @classmethod
    def calls_for_proposals(cls) -> "CallForProposalsFields":
        return CallForProposalsFields("callsForProposals")

    has_more: "UpdateCallsForProposalsResultGraphQLField" = (
        UpdateCallsForProposalsResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateCallsForProposalsResultGraphQLField, "CallForProposalsFields"
        ]
    ) -> "UpdateCallsForProposalsResultFields":
        """Subfields should come from the UpdateCallsForProposalsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCallsForProposalsResultFields":
        self._alias = alias
        return self


class UpdateConfigurationRequestsResultFields(GraphQLField):
    @classmethod
    def requests(cls) -> "ConfigurationRequestFields":
        return ConfigurationRequestFields("requests")

    has_more: "UpdateConfigurationRequestsResultGraphQLField" = (
        UpdateConfigurationRequestsResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateConfigurationRequestsResultGraphQLField, "ConfigurationRequestFields"
        ]
    ) -> "UpdateConfigurationRequestsResultFields":
        """Subfields should come from the UpdateConfigurationRequestsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateConfigurationRequestsResultFields":
        self._alias = alias
        return self


class UpdateDatasetsResultFields(GraphQLField):
    @classmethod
    def datasets(cls) -> "DatasetFields":
        return DatasetFields("datasets")

    has_more: "UpdateDatasetsResultGraphQLField" = UpdateDatasetsResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[UpdateDatasetsResultGraphQLField, "DatasetFields"]
    ) -> "UpdateDatasetsResultFields":
        """Subfields should come from the UpdateDatasetsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateDatasetsResultFields":
        self._alias = alias
        return self


class UpdateGroupsResultFields(GraphQLField):
    @classmethod
    def groups(cls) -> "GroupFields":
        return GroupFields("groups")

    has_more: "UpdateGroupsResultGraphQLField" = UpdateGroupsResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[UpdateGroupsResultGraphQLField, "GroupFields"]
    ) -> "UpdateGroupsResultFields":
        """Subfields should come from the UpdateGroupsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateGroupsResultFields":
        self._alias = alias
        return self


class UpdateObservationsResultFields(GraphQLField):
    @classmethod
    def observations(cls) -> "ObservationFields":
        return ObservationFields("observations")

    has_more: "UpdateObservationsResultGraphQLField" = (
        UpdateObservationsResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[UpdateObservationsResultGraphQLField, "ObservationFields"]
    ) -> "UpdateObservationsResultFields":
        """Subfields should come from the UpdateObservationsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateObservationsResultFields":
        self._alias = alias
        return self


class UpdateProgramNotesResultFields(GraphQLField):
    @classmethod
    def program_notes(cls) -> "ProgramNoteFields":
        return ProgramNoteFields("programNotes")

    has_more: "UpdateProgramNotesResultGraphQLField" = (
        UpdateProgramNotesResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[UpdateProgramNotesResultGraphQLField, "ProgramNoteFields"]
    ) -> "UpdateProgramNotesResultFields":
        """Subfields should come from the UpdateProgramNotesResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProgramNotesResultFields":
        self._alias = alias
        return self


class UpdateProgramUsersResultFields(GraphQLField):
    @classmethod
    def program_users(cls) -> "ProgramUserFields":
        return ProgramUserFields("programUsers")

    has_more: "UpdateProgramUsersResultGraphQLField" = (
        UpdateProgramUsersResultGraphQLField("hasMore")
    )

    def fields(
        self,
        *subfields: Union[UpdateProgramUsersResultGraphQLField, "ProgramUserFields"]
    ) -> "UpdateProgramUsersResultFields":
        """Subfields should come from the UpdateProgramUsersResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProgramUsersResultFields":
        self._alias = alias
        return self


class UpdateProgramsResultFields(GraphQLField):
    @classmethod
    def programs(cls) -> "ProgramFields":
        return ProgramFields("programs")

    has_more: "UpdateProgramsResultGraphQLField" = UpdateProgramsResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[UpdateProgramsResultGraphQLField, "ProgramFields"]
    ) -> "UpdateProgramsResultFields":
        """Subfields should come from the UpdateProgramsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProgramsResultFields":
        self._alias = alias
        return self


class UpdateProposalResultFields(GraphQLField):
    @classmethod
    def proposal(cls) -> "ProposalFields":
        return ProposalFields("proposal")

    def fields(
        self, *subfields: Union[UpdateProposalResultGraphQLField, "ProposalFields"]
    ) -> "UpdateProposalResultFields":
        """Subfields should come from the UpdateProposalResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProposalResultFields":
        self._alias = alias
        return self


class UpdateTargetsResultFields(GraphQLField):
    @classmethod
    def targets(cls) -> "TargetFields":
        return TargetFields("targets")

    has_more: "UpdateTargetsResultGraphQLField" = UpdateTargetsResultGraphQLField(
        "hasMore"
    )

    def fields(
        self, *subfields: Union[UpdateTargetsResultGraphQLField, "TargetFields"]
    ) -> "UpdateTargetsResultFields":
        """Subfields should come from the UpdateTargetsResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTargetsResultFields":
        self._alias = alias
        return self


class UserFields(GraphQLField):
    id: "UserGraphQLField" = UserGraphQLField("id")
    type: "UserGraphQLField" = UserGraphQLField("type")
    service_name: "UserGraphQLField" = UserGraphQLField("serviceName")
    orcid_id: "UserGraphQLField" = UserGraphQLField("orcidId")

    @classmethod
    def profile(cls) -> "UserProfileFields":
        return UserProfileFields("profile")

    def fields(
        self, *subfields: Union[UserGraphQLField, "UserProfileFields"]
    ) -> "UserFields":
        """Subfields should come from the UserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserFields":
        self._alias = alias
        return self


class UserInvitationFields(GraphQLField):
    id: "UserInvitationGraphQLField" = UserInvitationGraphQLField("id")
    status: "UserInvitationGraphQLField" = UserInvitationGraphQLField("status")

    @classmethod
    def issuer(cls) -> "UserFields":
        return UserFields("issuer")

    recipient_email: "UserInvitationGraphQLField" = UserInvitationGraphQLField(
        "recipientEmail"
    )

    @classmethod
    def program_user(cls) -> "ProgramUserFields":
        return ProgramUserFields("programUser")

    @classmethod
    def email(cls) -> "EmailFields":
        return EmailFields("email")

    def fields(
        self,
        *subfields: Union[
            UserInvitationGraphQLField, "EmailFields", "ProgramUserFields", "UserFields"
        ]
    ) -> "UserInvitationFields":
        """Subfields should come from the UserInvitationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserInvitationFields":
        self._alias = alias
        return self


class UserProfileFields(GraphQLField):
    given_name: "UserProfileGraphQLField" = UserProfileGraphQLField("givenName")
    family_name: "UserProfileGraphQLField" = UserProfileGraphQLField("familyName")
    credit_name: "UserProfileGraphQLField" = UserProfileGraphQLField("creditName")
    email: "UserProfileGraphQLField" = UserProfileGraphQLField("email")

    def fields(self, *subfields: UserProfileGraphQLField) -> "UserProfileFields":
        """Subfields should come from the UserProfileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserProfileFields":
        self._alias = alias
        return self


class VisitFields(GraphQLField):
    id: "VisitGraphQLField" = VisitGraphQLField("id")
    instrument: "VisitGraphQLField" = VisitGraphQLField("instrument")

    @classmethod
    def observation(cls) -> "ObservationFields":
        return ObservationFields("observation")

    created: "VisitGraphQLField" = VisitGraphQLField("created")
    site: "VisitGraphQLField" = VisitGraphQLField("site")

    @classmethod
    def interval(cls) -> "TimestampIntervalFields":
        return TimestampIntervalFields("interval")

    @classmethod
    def atom_records(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "AtomRecordSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "Timestamp", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AtomRecordSelectResultFields("atomRecords", arguments=cleared_arguments)

    @classmethod
    def datasets(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "DatasetSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "DatasetId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetSelectResultFields("datasets", arguments=cleared_arguments)

    @classmethod
    def events(
        cls, *, offset: Optional[Any] = None, limit: Optional[Any] = None
    ) -> "ExecutionEventSelectResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "OFFSET": {"type": "ExecutionEventId", "value": offset},
            "LIMIT": {"type": "NonNegInt", "value": limit},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExecutionEventSelectResultFields("events", arguments=cleared_arguments)

    @classmethod
    def time_charge_invoice(cls) -> "TimeChargeInvoiceFields":
        return TimeChargeInvoiceFields("timeChargeInvoice")

    @classmethod
    def flamingos_2(cls) -> "Flamingos2StaticFields":
        return Flamingos2StaticFields("flamingos2")

    @classmethod
    def gmos_north(cls) -> "GmosNorthStaticFields":
        return GmosNorthStaticFields("gmosNorth")

    @classmethod
    def gmos_south(cls) -> "GmosSouthStaticFields":
        return GmosSouthStaticFields("gmosSouth")

    def fields(
        self,
        *subfields: Union[
            VisitGraphQLField,
            "AtomRecordSelectResultFields",
            "DatasetSelectResultFields",
            "ExecutionEventSelectResultFields",
            "Flamingos2StaticFields",
            "GmosNorthStaticFields",
            "GmosSouthStaticFields",
            "ObservationFields",
            "TimeChargeInvoiceFields",
            "TimestampIntervalFields",
        ]
    ) -> "VisitFields":
        """Subfields should come from the VisitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VisitFields":
        self._alias = alias
        return self


class VisitSelectResultFields(GraphQLField):
    @classmethod
    def matches(cls) -> "VisitFields":
        return VisitFields("matches")

    has_more: "VisitSelectResultGraphQLField" = VisitSelectResultGraphQLField("hasMore")

    def fields(
        self, *subfields: Union[VisitSelectResultGraphQLField, "VisitFields"]
    ) -> "VisitSelectResultFields":
        """Subfields should come from the VisitSelectResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VisitSelectResultFields":
        self._alias = alias
        return self


class WavelengthFields(GraphQLField):
    picometers: "WavelengthGraphQLField" = WavelengthGraphQLField("picometers")
    angstroms: "WavelengthGraphQLField" = WavelengthGraphQLField("angstroms")
    nanometers: "WavelengthGraphQLField" = WavelengthGraphQLField("nanometers")
    micrometers: "WavelengthGraphQLField" = WavelengthGraphQLField("micrometers")

    def fields(self, *subfields: WavelengthGraphQLField) -> "WavelengthFields":
        """Subfields should come from the WavelengthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WavelengthFields":
        self._alias = alias
        return self


class WavelengthDitherFields(GraphQLField):
    picometers: "WavelengthDitherGraphQLField" = WavelengthDitherGraphQLField(
        "picometers"
    )
    angstroms: "WavelengthDitherGraphQLField" = WavelengthDitherGraphQLField(
        "angstroms"
    )
    nanometers: "WavelengthDitherGraphQLField" = WavelengthDitherGraphQLField(
        "nanometers"
    )
    micrometers: "WavelengthDitherGraphQLField" = WavelengthDitherGraphQLField(
        "micrometers"
    )

    def fields(
        self, *subfields: WavelengthDitherGraphQLField
    ) -> "WavelengthDitherFields":
        """Subfields should come from the WavelengthDitherFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WavelengthDitherFields":
        self._alias = alias
        return self
