from collections.abc import Callable
import datetime
import enum
from typing import Annotated

import numpy
from numpy.typing import NDArray


class VideoCodecType(enum.Enum):
    H264 = 0

    H265 = 1

    VP8 = 2

    VP9 = 3

    AV1 = 4

class ImageFormat(enum.Enum):
    I420 = 0

    NV12 = 1

    BGR888 = 2

class VideoFrameBufferI420:
    @staticmethod
    def create(arg0: int, arg1: int, /) -> VideoFrameBufferI420: ...

    @property
    def y(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')]: ...

    @y.setter
    def y(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')], /) -> None: ...

    @property
    def u(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')]: ...

    @u.setter
    def u(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')], /) -> None: ...

    @property
    def v(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')]: ...

    @v.setter
    def v(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')], /) -> None: ...

    def width(self) -> int: ...

    def height(self) -> int: ...

    def stride_y(self) -> int: ...

    def stride_u(self) -> int: ...

    def stride_v(self) -> int: ...

class VideoFrameBufferNV12:
    @staticmethod
    def create(arg0: int, arg1: int, /) -> VideoFrameBufferNV12: ...

    @property
    def y(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')]: ...

    @y.setter
    def y(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')], /) -> None: ...

    @property
    def uv(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')]: ...

    @uv.setter
    def uv(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None, None), order='C')], /) -> None: ...

    def width(self) -> int: ...

    def height(self) -> int: ...

    def stride_y(self) -> int: ...

    def stride_uv(self) -> int: ...

class VideoFrameBufferBGR888:
    @staticmethod
    def create(arg0: int, arg1: int, /) -> VideoFrameBufferBGR888: ...

    @property
    def bgr(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None, None, 3), order='C')]: ...

    @bgr.setter
    def bgr(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None, None, 3), order='C')], /) -> None: ...

    def width(self) -> int: ...

    def height(self) -> int: ...

    def stride(self) -> int: ...

class VideoFrame:
    def __init__(self) -> None: ...

    @property
    def format(self) -> ImageFormat: ...

    @format.setter
    def format(self, arg: ImageFormat, /) -> None: ...

    @property
    def i420_buffer(self) -> VideoFrameBufferI420: ...

    @i420_buffer.setter
    def i420_buffer(self, arg: VideoFrameBufferI420, /) -> None: ...

    @property
    def nv12_buffer(self) -> VideoFrameBufferNV12: ...

    @nv12_buffer.setter
    def nv12_buffer(self, arg: VideoFrameBufferNV12, /) -> None: ...

    @property
    def bgr888_buffer(self) -> VideoFrameBufferBGR888: ...

    @bgr888_buffer.setter
    def bgr888_buffer(self, arg: VideoFrameBufferBGR888, /) -> None: ...

    @property
    def timestamp(self) -> datetime.timedelta: ...

    @timestamp.setter
    def timestamp(self, arg: datetime.timedelta | float, /) -> None: ...

    @property
    def rid(self) -> str | None: ...

    @rid.setter
    def rid(self, arg: str, /) -> None: ...

    @property
    def base_width(self) -> int: ...

    @base_width.setter
    def base_width(self, arg: int, /) -> None: ...

    @property
    def base_height(self) -> int: ...

    @base_height.setter
    def base_height(self, arg: int, /) -> None: ...

    @property
    def frame_number(self) -> int: ...

    @frame_number.setter
    def frame_number(self, arg: int, /) -> None: ...

    def width(self) -> int: ...

    def height(self) -> int: ...

class EncodedImage:
    def __init__(self) -> None: ...

    @property
    def data(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None,), order='C')]: ...

    @data.setter
    def data(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None,), order='C')], /) -> None: ...

    @property
    def timestamp(self) -> datetime.timedelta: ...

    @timestamp.setter
    def timestamp(self, arg: datetime.timedelta | float, /) -> None: ...

    @property
    def rid(self) -> str | None: ...

    @rid.setter
    def rid(self, arg: str, /) -> None: ...

class VideoEncoder:
    def init(self, arg: VideoEncoder.Settings, /) -> bool: ...

    def release(self) -> None: ...

    def encode(self, arg: VideoFrame, /) -> None: ...

    def force_intra_next_frame(self) -> None: ...

    def set_on_encode(self, arg: Callable[[EncodedImage], None], /) -> None: ...

    class Settings:
        def __init__(self) -> None: ...

        @property
        def codec_type(self) -> VideoCodecType: ...

        @codec_type.setter
        def codec_type(self, arg: VideoCodecType, /) -> None: ...

        @property
        def width(self) -> int: ...

        @width.setter
        def width(self, arg: int, /) -> None: ...

        @property
        def height(self) -> int: ...

        @height.setter
        def height(self, arg: int, /) -> None: ...

        @property
        def bitrate(self) -> int: ...

        @bitrate.setter
        def bitrate(self, arg: int, /) -> None: ...

        @property
        def fps(self) -> int: ...

        @fps.setter
        def fps(self, arg: int, /) -> None: ...

def create_openh264_video_encoder(openh264: str) -> VideoEncoder: ...

def create_videotoolbox_video_encoder() -> VideoEncoder: ...

def create_aom_video_encoder() -> VideoEncoder: ...

class VideoDecoder:
    def init(self, arg: VideoDecoder.Settings, /) -> bool: ...

    def release(self) -> None: ...

    def decode(self, arg: EncodedImage, /) -> None: ...

    def set_on_decode(self, arg: Callable[[VideoFrame], None], /) -> None: ...

    class Settings:
        def __init__(self) -> None: ...

        @property
        def codec_type(self) -> VideoCodecType: ...

        @codec_type.setter
        def codec_type(self, arg: VideoCodecType, /) -> None: ...

def create_openh264_video_decoder(openh264: str) -> VideoDecoder: ...

def create_aom_video_decoder() -> VideoDecoder: ...

class AudioCodecType(enum.Enum):
    OPUS = 0

class AudioFrame:
    def __init__(self) -> None: ...

    @property
    def sample_rate(self) -> int: ...

    @sample_rate.setter
    def sample_rate(self, arg: int, /) -> None: ...

    @property
    def pcm(self) -> Annotated[NDArray[numpy.float32], dict(shape=(None, None), order='C')]: ...

    @pcm.setter
    def pcm(self, arg: Annotated[NDArray[numpy.float32], dict(shape=(None, None), order='C')], /) -> None: ...

    @property
    def timestamp(self) -> datetime.timedelta: ...

    @timestamp.setter
    def timestamp(self, arg: datetime.timedelta | float, /) -> None: ...

    def channels(self) -> int: ...

    def samples(self) -> int: ...

class EncodedAudio:
    def __init__(self) -> None: ...

    @property
    def data(self) -> Annotated[NDArray[numpy.uint8], dict(shape=(None,), order='C')]: ...

    @data.setter
    def data(self, arg: Annotated[NDArray[numpy.uint8], dict(shape=(None,), order='C')], /) -> None: ...

    @property
    def timestamp(self) -> datetime.timedelta: ...

    @timestamp.setter
    def timestamp(self, arg: datetime.timedelta | float, /) -> None: ...

class AudioEncoder:
    def init(self, arg: AudioEncoder.Settings, /) -> bool: ...

    def release(self) -> None: ...

    def encode(self, arg: AudioFrame, /) -> None: ...

    def set_on_encode(self, arg: Callable[[EncodedAudio], None], /) -> None: ...

    class Settings:
        def __init__(self) -> None: ...

        @property
        def codec_type(self) -> AudioCodecType: ...

        @codec_type.setter
        def codec_type(self, arg: AudioCodecType, /) -> None: ...

        @property
        def sample_rate(self) -> int: ...

        @sample_rate.setter
        def sample_rate(self, arg: int, /) -> None: ...

        @property
        def channels(self) -> int: ...

        @channels.setter
        def channels(self, arg: int, /) -> None: ...

        @property
        def bitrate(self) -> int: ...

        @bitrate.setter
        def bitrate(self, arg: int, /) -> None: ...

        @property
        def frame_duration_ms(self) -> int: ...

        @frame_duration_ms.setter
        def frame_duration_ms(self, arg: int, /) -> None: ...

        @property
        def opus_inband_fec(self) -> int: ...

        @opus_inband_fec.setter
        def opus_inband_fec(self, arg: int, /) -> None: ...

def create_opus_audio_encoder() -> AudioEncoder: ...

class AudioDecoder:
    def init(self, arg: AudioDecoder.Settings, /) -> bool: ...

    def release(self) -> None: ...

    def decode(self, arg: EncodedAudio, /) -> None: ...

    def set_on_decode(self, arg: Callable[[AudioFrame], None], /) -> None: ...

    class Settings:
        def __init__(self) -> None: ...

        @property
        def codec_type(self) -> AudioCodecType: ...

        @codec_type.setter
        def codec_type(self, arg: AudioCodecType, /) -> None: ...

        @property
        def sample_rate(self) -> int: ...

        @sample_rate.setter
        def sample_rate(self, arg: int, /) -> None: ...

        @property
        def channels(self) -> int: ...

        @channels.setter
        def channels(self, arg: int, /) -> None: ...

def create_opus_audio_decoder() -> AudioDecoder: ...
