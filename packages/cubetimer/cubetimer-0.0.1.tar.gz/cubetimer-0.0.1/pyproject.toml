[build-system]
requires = ["hatchling>=1.26", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "cubetimer"
authors = [
  { name = "Agriya Khetarpal", email = "agriyakhetarpal@outlook.com" },
]
description = "A Rubik's Cube timer for speedsolving/training with a terminal user interface."
readme = "README.md"
license = "Apache-2.0"
license-files = ["LICENSE"]
requires-python = ">=3.9"
dynamic = ["version"]
dependencies = ["textual==6.2.1", "platformdirs"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Games/Entertainment",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Topic :: System :: Monitoring",
    "Topic :: Terminals",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = ["speedcubing", "timer", "rubiks-cube", "cli", "terminal", "timing", "puzzle", "speedsolving", "textual", "tui"]

[project.urls]
Homepage = "https://github.com/agriyakhetarpal/cubetimer"
"Bug Tracker" = "https://github.com/agriyakhetarpal/cubetimer/issues"
Changelog = "https://github.com/agriyakhetarpal/cubetimer/releases"

[dependency-groups]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  { include-group = "test" },
]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/cubetimer/_version.py"

[tool.hatch.envs.default]
# duplicate for now since hatch doesn't support groups yet
dependencies = []
scripts.test = "pytest {args}"

[project.scripts]
cubetimer = "cubetimer.main:main"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["cubetimer"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "cubetimer.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["cubetimer._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]


[tool.pylint]
py-version = "3.9"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]
