"""
API –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ (Issues) –≤ Yandex Tracker
"""

from typing import Dict, Any, Optional, Union, List
from ..base import BaseAPI
from .links import LinksAPI
from .transitions import TransitionsAPI
from .checklists import ChecklistAPI
from ..fields import FieldsAPI


# –¢–∏–ø—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π –∑–∞–¥–∞—á–∏
QueueType = Union[str, int, Dict[str, Union[str, int]]]  # "TREK", 123 –∏–ª–∏ {"key": "TREK", "id": "123"}
ParentType = Union[str, Dict[str, str]]  # "TASK-123" –∏–ª–∏ {"key": "TASK-123", "id": "123"}
SprintType = Union[int, str, Dict[str, Union[int, str]]]  # 123, "123" –∏–ª–∏ {"id": 123}
TypeType = Union[str, int, Dict[str, Union[str, int]]]  # "bug", 1 –∏–ª–∏ {"key": "bug", "id": "1"}
PriorityType = Union[str, int, Dict[str, Union[str, int]]]  # "minor", 2 –∏–ª–∏ {"key": "minor", "id": "2"}
FollowerType = Union[str, int, Dict[str, Union[str, int]]]  # "userlogin", 123 –∏–ª–∏ {"id": "123"}
AssigneeType = Union[str, int, Dict[str, Union[str, int]]]  # "userlogin", 123 –∏–ª–∏ {"id": "123"}
AuthorType = Union[str, int, Dict[str, Union[str, int]]]  # "userlogin", 123 –∏–ª–∏ {"id": "123"}
LocalFieldsType = Dict[str, Any]  # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {"customField1": "value1", "priority2025": 100}

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π add/remove (—Ç–æ–ª—å–∫–æ –¥–ª—è PATCH)
AddRemoveType = Dict[str, List[str]]  # {"add": ["item1"], "remove": ["item2"]}
ProjectType = Dict[str, Union[int, List[int], AddRemoveType]]  # {"primary": 123, "secondary": [456]} –∏–ª–∏ —Å add/remove


class IssuesAPI(BaseAPI):
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ Yandex Tracker"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._links = None
        self._transitions = None
        self._checklists = None
        self._fields = None
        self._comments = None

    @property
    def links(self) -> LinksAPI:
        """–î–æ—Å—Ç—É–ø –∫ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏"""
        if self._links is None:
            self._links = LinksAPI(self.client)
        return self._links

    @property
    def transitions(self) -> TransitionsAPI:
        """–î–æ—Å—Ç—É–ø –∫ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É –∑–∞–¥–∞—á"""
        if self._transitions is None:
            self._transitions = TransitionsAPI(self.client)
        return self._transitions

    @property
    def checklists(self) -> ChecklistAPI:
        """–î–æ—Å—Ç—É–ø –∫ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏ –∑–∞–¥–∞—á"""
        if self._checklists is None:
            self._checklists = ChecklistAPI(self.client)
        return self._checklists

    @property
    def fields(self) -> FieldsAPI:
        """–î–æ—Å—Ç—É–ø –∫ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—è–º–∏ –∑–∞–¥–∞—á"""
        if self._fields is None:
            self._fields = FieldsAPI(self.client)
        return self._fields

    @property
    def comments(self):
        """–î–æ—Å—Ç—É–ø –∫ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∑–∞–¥–∞—á"""
        if self._comments is None:
            from .comments import CommentsAPI
            self._comments = CommentsAPI(self.client)
        return self._comments

    
    async def get(self, issue_id: str, expand: Optional[Union[str, List[str]]] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ ID –∏–ª–∏ –∫–ª—é—á—É
        
        Args:
            issue_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –∫–ª—é—á –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'JUNE-3', 'TASK-123')
            expand: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç.
                   –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫:
                   - 'transitions' - –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É
                   - 'attachments' - –≤–ª–æ–∂–µ–Ω–∏—è
                   –ü—Ä–∏–º–µ—Ä—ã:
                   - expand='attachments'
                   - expand=['transitions', 'attachments']
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
            
        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞ (404 –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
            
        Examples:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
            issue = await client.issues.get('JUNE-3')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            issue = await client.issues.get('JUNE-3', expand='attachments')
            issue = await client.issues.get('JUNE-3', expand=['transitions', 'attachments'])
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º endpoint
        endpoint = f"/issues/{issue_id}"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {}
        
        if expand:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º expand –ø–∞—Ä–∞–º–µ—Ç—Ä
            if isinstance(expand, str):
                params['expand'] = expand
            elif isinstance(expand, list):
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                params['expand'] = ','.join(expand)
            else:
                self.logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è expand: {type(expand)}")
        
        self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {issue_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        
        try:
            result = await self._request(endpoint, method='GET', params=params)
            self.logger.info(f"–ó–∞–¥–∞—á–∞ {issue_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {issue_id}: {e}")
            raise
    
    async def create(
        self,
        summary: str,
        queue: QueueType,
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parent: Optional[ParentType] = None,
        description: Optional[str] = None,
        markup_type: Optional[str] = None,
        sprint: Optional[List[SprintType]] = None,
        issue_type: Optional[TypeType] = None,
        priority: Optional[PriorityType] = None,
        followers: Optional[List[FollowerType]] = None,
        assignee: Optional[AssigneeType] = None,
        author: Optional[AuthorType] = None,
        project: Optional[Dict[str, Union[int, List[int]]]] = None,  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ primary/secondary –±–µ–∑ add/remove
        unique: Optional[str] = None,
        attachment_ids: Optional[List[Union[str, int]]] = None,
        description_attachment_ids: Optional[List[Union[str, int]]] = None,
        tags: Optional[List[str]] = None,
        localfields: Optional[LocalFieldsType] = None,  # üÜï –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (POST –∑–∞–ø—Ä–æ—Å)
        
        Args:
            summary: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            queue: –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                   –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π-–∫–ª—é—á–æ–º, —á–∏—Å–ª–æ–º-id –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ (—Å—Ç—Ä–æ–∫–∞-–∫–ª—é—á –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å id/key)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            markup_type: –¢–∏–ø —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ ('md' –¥–ª—è YFM —Ä–∞–∑–º–µ—Ç–∫–∏)
            sprint: –°–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            issue_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ (–æ–±—ä–µ–∫—Ç, —Å—Ç—Ä–æ–∫–∞-–∫–ª—é—á –∏–ª–∏ —á–∏—Å–ª–æ-id)
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–æ–±—ä–µ–∫—Ç, —Å—Ç—Ä–æ–∫–∞-–∫–ª—é—á –∏–ª–∏ —á–∏—Å–ª–æ-id)
            followers: –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞—á–∏ (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫/—á–∏—Å–µ–ª/–æ–±—ä–µ–∫—Ç–æ–≤)
            assignee: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–æ–∫–∞-–ª–æ–≥–∏–Ω, —á–∏—Å–ª–æ-id –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
            author: –ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–æ–∫–∞-–ª–æ–≥–∏–Ω, —á–∏—Å–ª–æ-id –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
            project: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö (–æ–±—ä–µ–∫—Ç —Å primary/secondary)
            unique: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            attachment_ids: ID –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏—è
            description_attachment_ids: ID –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –∑–∞–¥–∞—á–∏
            localfields: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
            
        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Examples:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            issue = await client.issues.create(
                summary="Test Issue",
                queue="TREK"
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            issue = await client.issues.create(
                summary="Test Issue",
                queue={"key": "TREK"},
                parent="JUNE-2",
                issue_type="bug",
                assignee="userlogin",
                tags=["—Ç–µ–≥1", "—Ç–µ–≥2"]
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            issue = await client.issues.create(
                summary="–ó–∞–¥–∞—á–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏",
                queue="PROJ",
                description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                localfields={
                    "customPriority": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π",
                    "businessValue": 85,
                    "estimatedHours": 16.5,
                    "clientName": "–û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞",
                    "isDraft": False
                }
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —Å–ø—Ä–∏–Ω—Ç–∞–º–∏ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            issue = await client.issues.create(
                summary="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                queue="PROJ",
                description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                markup_type="md",
                sprint=[{"id": "3"}],
                priority={"key": "major"},
                project={
                    "primary": 1234,
                    "secondary": [5678, 9012]
                },
                unique="unique-task-id-2025",
                localfields={
                    "department": "Backend Team",
                    "complexity": 7,
                    "deadline": "2025-12-31"
                }
            )
        """
        
        endpoint = "/issues/"
        
        # –°—Ç—Ä–æ–∏–º payload –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
        payload = {
            "summary": summary
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ queue
        if isinstance(queue, str):
            payload['queue'] = {"key": queue}
        elif isinstance(queue, int):
            payload['queue'] = {"id": str(queue)}
        elif isinstance(queue, dict):
            payload['queue'] = queue
        else:
            raise ValueError(f"queue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(queue)}")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if description is not None:
            payload['description'] = description
            
        if markup_type is not None:
            payload['markupType'] = markup_type
            
        if unique is not None:
            payload['unique'] = unique
        
        # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
        if parent is not None:
            if isinstance(parent, str):
                payload['parent'] = {"key": parent}
            elif isinstance(parent, dict):
                payload['parent'] = parent
            else:
                raise ValueError(f"parent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(parent)}")
        
        # –°–ø—Ä–∏–Ω—Ç—ã
        if sprint is not None:
            sprint_list = []
            for s in sprint:
                if isinstance(s, (int, str)):
                    sprint_list.append({"id": str(s)})
                elif isinstance(s, dict):
                    sprint_list.append(s)
                else:
                    raise ValueError(f"sprint —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(s)}")
            payload['sprint'] = sprint_list
        
        # –¢–∏–ø –∑–∞–¥–∞—á–∏
        if issue_type is not None:
            if isinstance(issue_type, str):
                payload['type'] = {"key": issue_type}
            elif isinstance(issue_type, int):
                payload['type'] = {"id": str(issue_type)}
            elif isinstance(issue_type, dict):
                payload['type'] = issue_type
            else:
                raise ValueError(f"issue_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(issue_type)}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if priority is not None:
            if isinstance(priority, str):
                payload['priority'] = {"key": priority}
            elif isinstance(priority, int):
                payload['priority'] = {"id": str(priority)}
            elif isinstance(priority, dict):
                payload['priority'] = priority
            else:
                raise ValueError(f"priority –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(priority)}")
        
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if assignee is not None:
            if isinstance(assignee, str):
                payload['assignee'] = {"login": assignee} if not assignee.isdigit() else {"id": assignee}
            elif isinstance(assignee, int):
                payload['assignee'] = {"id": str(assignee)}
            elif isinstance(assignee, dict):
                payload['assignee'] = assignee
            else:
                raise ValueError(f"assignee –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(assignee)}")
        
        # –ê–≤—Ç–æ—Ä
        if author is not None:
            if isinstance(author, str):
                payload['author'] = {"login": author} if not author.isdigit() else {"id": author}
            elif isinstance(author, int):
                payload['author'] = {"id": str(author)}
            elif isinstance(author, dict):
                payload['author'] = author
            else:
                raise ValueError(f"author –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(author)}")
        
        # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫, –±–µ–∑ add/remove)
        if followers is not None:
            if not isinstance(followers, list):
                raise ValueError(f"followers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(followers)}")
            
            followers_list = []
            for follower in followers:
                if isinstance(follower, str):
                    followers_list.append({"login": follower} if not follower.isdigit() else {"id": follower})
                elif isinstance(follower, int):
                    followers_list.append({"id": str(follower)})
                elif isinstance(follower, dict):
                    followers_list.append(follower)
                else:
                    raise ValueError(f"follower —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(follower)}")
            payload['followers'] = followers_list
        
        # –ü—Ä–æ–µ–∫—Ç—ã (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–π add/remove)
        if project is not None:
            if not isinstance(project, dict):
                raise ValueError(f"project –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(project)}")
            payload['project'] = project
        
        # ID –≤–ª–æ–∂–µ–Ω–∏–π
        if attachment_ids is not None:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º
            payload['attachmentIds'] = [str(aid) for aid in attachment_ids]
            
        if description_attachment_ids is not None:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º
            payload['descriptionAttachmentIds'] = [str(aid) for aid in description_attachment_ids]
        
        # –¢–µ–≥–∏ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫)
        if tags is not None:
            if not isinstance(tags, list):
                raise ValueError(f"tags –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(tags)}")
            payload['tags'] = tags
        
        # üÜï –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if localfields is not None:
            if not isinstance(localfields, dict):
                raise ValueError(f"localfields –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –ø–æ–ª—É—á–µ–Ω: {type(localfields)}")
            
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π: {list(localfields.keys())}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –Ω–∞–ø—Ä—è–º—É—é –≤ payload
            for field_key, field_value in localfields.items():
                if field_key in payload:
                    self.logger.warning(f"–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ '{field_key}' –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ")
                payload[field_key] = field_value
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ kwargs
        for key, value in kwargs.items():
            if value is not None:
                payload[key] = value
        
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ {queue}")
        self.logger.debug(f"–ü–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {list(payload.keys())}")
        
        try:
            result = await self._request(endpoint, method='POST', data=payload)
            created_key = result.get('key', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            self.logger.info(f"–ó–∞–¥–∞—á–∞ {created_key} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    async def update(
        self, 
        issue_id: str,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        parent: Optional[ParentType] = None,
        markup_type: Optional[str] = None,
        sprint: Optional[List[SprintType]] = None,
        issue_type: Optional[TypeType] = None,
        priority: Optional[PriorityType] = None,
        followers: Optional[Union[List[FollowerType], AddRemoveType]] = None,
        project: Optional[ProjectType] = None,
        attachment_ids: Optional[List[str]] = None,
        description_attachment_ids: Optional[List[str]] = None,
        tags: Optional[Union[List[str], AddRemoveType]] = None,
        localfields: Optional[LocalFieldsType] = None,  # üÜï –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        **kwargs
    ) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (PATCH –∑–∞–ø—Ä–æ—Å)
        
        Args:
            issue_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –∫–ª—é—á –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            summary: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            description: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ (—Å—Ç—Ä–æ–∫–∞-–∫–ª—é—á –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å id/key)
            markup_type: –¢–∏–ø —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ ('md' –¥–ª—è YFM —Ä–∞–∑–º–µ—Ç–∫–∏)
            sprint: –°–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            issue_type: –ù–æ–≤—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ (–æ–±—ä–µ–∫—Ç, —Å—Ç—Ä–æ–∫–∞-–∫–ª—é—á –∏–ª–∏ —á–∏—Å–ª–æ-id)
            priority: –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–æ–±—ä–µ–∫—Ç, —Å—Ç—Ä–æ–∫–∞-–∫–ª—é—á –∏–ª–∏ —á–∏—Å–ª–æ-id)
            followers: –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –∑–∞–¥–∞—á–∏ (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å add/remove)
            project: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö (–æ–±—ä–µ–∫—Ç —Å primary/secondary)
            attachment_ids: ID –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏—è
            description_attachment_ids: ID –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            tags: –¢–µ–≥–∏ –∑–∞–¥–∞—á–∏ (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å add/remove)
            localfields: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            Dict —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
            
        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Examples:
            # –ü—Ä–∏–º–µ—Ä 1: –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–∏–ø –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            await client.issues.update(
                'TEST-1',
                summary="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                description="–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                issue_type={"id": "1", "key": "bug"},
                priority={"id": "2", "key": "minor"}
            )
            
            # –ü—Ä–∏–º–µ—Ä 2: –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø—Ä–∏–Ω—Ç—ã, –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
            await client.issues.update(
                'TEST-1',
                parent={"key": "TEST-2"},
                sprint=[{"id": "3"}, {"id": "2"}],
                followers={"add": ["userlogin-1", "userlogin-2"]}
            )
            
            # –ü—Ä–∏–º–µ—Ä 3: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–≥–∞–º–∏ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            await client.issues.update(
                'TEST-1',
                tags={"add": ["—Ç–µ–≥1"], "remove": ["—Ç–µ–≥2"]},
                localfields={
                    "customPriority": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π",
                    "estimatedHours": 24,
                    "clientFeedback": "–¢—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                }
            )
            
            # –ü—Ä–∏–º–µ—Ä 4: –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            await client.issues.update(
                'TEST-1',
                project={
                    "primary": 1234,
                    "secondary": {"add": [5678]}
                },
                localfields={
                    "department": "Frontend Team",  # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–¥–µ–ª
                    "complexity": 9,                 # –ü–æ–≤—ã—Å–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å
                    "reviewRequired": True           # –î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏
                }
            )
        """
        
        endpoint = f"/issues/{issue_id}"
        
        # –°—Ç—Ä–æ–∏–º payload –¥–ª—è PATCH –∑–∞–ø—Ä–æ—Å–∞
        payload = {}
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
        if summary is not None:
            payload['summary'] = summary
            
        if description is not None:
            payload['description'] = description
            
        if markup_type is not None:
            payload['markupType'] = markup_type
            
        # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
        if parent is not None:
            if isinstance(parent, str):
                payload['parent'] = {"key": parent}
            elif isinstance(parent, dict):
                payload['parent'] = parent
            else:
                raise ValueError(f"parent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(parent)}")
        
        # –°–ø—Ä–∏–Ω—Ç—ã
        if sprint is not None:
            sprint_list = []
            for s in sprint:
                if isinstance(s, (int, str)):
                    sprint_list.append({"id": str(s)})
                elif isinstance(s, dict):
                    sprint_list.append(s)
                else:
                    raise ValueError(f"sprint —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(s)}")
            payload['sprint'] = sprint_list
        
        # –¢–∏–ø –∑–∞–¥–∞—á–∏
        if issue_type is not None:
            if isinstance(issue_type, str):
                payload['type'] = {"key": issue_type}
            elif isinstance(issue_type, int):
                payload['type'] = {"id": str(issue_type)}
            elif isinstance(issue_type, dict):
                payload['type'] = issue_type
            else:
                raise ValueError(f"issue_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(issue_type)}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if priority is not None:
            if isinstance(priority, str):
                payload['priority'] = {"key": priority}
            elif isinstance(priority, int):
                payload['priority'] = {"id": str(priority)}
            elif isinstance(priority, dict):
                payload['priority'] = priority
            else:
                raise ValueError(f"priority –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(priority)}")
        
        # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
        if followers is not None:
            if isinstance(followers, list):
                # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π (–∑–∞–º–µ–Ω–∞)
                payload['followers'] = followers
            elif isinstance(followers, dict) and ('add' in followers or 'remove' in followers):
                # –û–ø–µ—Ä–∞—Ü–∏–∏ add/remove
                payload['followers'] = followers
            else:
                raise ValueError(f"followers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Å add/remove, –ø–æ–ª—É—á–µ–Ω: {type(followers)}")
        
        # –ü—Ä–æ–µ–∫—Ç—ã
        if project is not None:
            if not isinstance(project, dict):
                raise ValueError(f"project –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(project)}")
            payload['project'] = project
        
        # ID –≤–ª–æ–∂–µ–Ω–∏–π
        if attachment_ids is not None:
            payload['attachmentIds'] = attachment_ids
            
        if description_attachment_ids is not None:
            payload['descriptionAttachmentIds'] = description_attachment_ids
        
        # –¢–µ–≥–∏
        if tags is not None:
            if isinstance(tags, list):
                # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ (–∑–∞–º–µ–Ω–∞)
                payload['tags'] = tags
            elif isinstance(tags, dict) and ('add' in tags or 'remove' in tags):
                # –û–ø–µ—Ä–∞—Ü–∏–∏ add/remove
                payload['tags'] = tags
            else:
                raise ValueError(f"tags –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Å add/remove, –ø–æ–ª—É—á–µ–Ω: {type(tags)}")
        
        # üÜï –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if localfields is not None:
            if not isinstance(localfields, dict):
                raise ValueError(f"localfields –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –ø–æ–ª—É—á–µ–Ω: {type(localfields)}")
            
            self.logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π: {list(localfields.keys())}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –Ω–∞–ø—Ä—è–º—É—é –≤ payload
            for field_key, field_value in localfields.items():
                if field_key in payload:
                    self.logger.warning(f"–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ '{field_key}' –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ")
                payload[field_key] = field_value
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ kwargs
        for key, value in kwargs.items():
            if value is not None:
                payload[key] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if not payload:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {issue_id}")
        self.logger.debug(f"–ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {list(payload.keys())}")
        
        try:
            result = await self._request(endpoint, method='PATCH', data=payload)
            self.logger.info(f"–ó–∞–¥–∞—á–∞ {issue_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {issue_id}: {e}")
            raise
    
    async def move(
        self,
        issue_id: str,
        queue: str,
        notify: Optional[bool] = None,
        notify_author: Optional[bool] = None,
        move_all_fields: Optional[bool] = None,
        initial_status: Optional[bool] = None,
        expand: Optional[Union[str, List[str]]] = None
    ) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á–∏ –≤ –¥—Ä—É–≥—É—é –æ—á–µ—Ä–µ–¥—å
        
        Args:
            issue_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –∫–ª—é—á –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            queue: –ö–ª—é—á –æ—á–µ—Ä–µ–¥–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            notify: –ü—Ä–∏–∑–Ω–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:
                   - True (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                   - False: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notify_author: –ü—Ä–∏–∑–Ω–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –∑–∞–¥–∞—á–∏:
                          - True: –∞–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                          - False (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –∞–≤—Ç–æ—Ä –Ω–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            move_all_fields: –ü–µ—Ä–µ–Ω–æ—Å –≤–µ—Ä—Å–∏–π, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å:
                           - True: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ –≤ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
                           - False (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Ä—Å–∏–∏, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ø—Ä–æ–µ–∫—Ç—ã
            initial_status: –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
                          - True: —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏
                          - False (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            expand: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç.
                   –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫:
                   - 'attachments': –≤–ª–æ–∂–µ–Ω–∏—è
                   - 'comments': –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                   - 'workflow': —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞—á–∏
                   - 'transitions': –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É
                   –ü—Ä–∏–º–µ—Ä—ã:
                   - expand='attachments'
                   - expand=['transitions', 'attachments']
        
        Returns:
            Dict —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
            
        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Examples:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á–∏ –≤ –¥—Ä—É–≥—É—é –æ—á–µ—Ä–µ–¥—å
            result = await client.issues.move('TEST-123', 'NEWQUEUE')
            
            # –ü–µ—Ä–µ–Ω–æ—Å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∞–≤—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await client.issues.move(
                'TEST-123', 
                'NEWQUEUE',
                notify=True,
                notify_author=True
            )
            
            # –ü–µ—Ä–µ–Ω–æ—Å —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ —Å–±—Ä–æ—Å–æ–º —Å—Ç–∞—Ç—É—Å–∞
            result = await client.issues.move(
                'TEST-123',
                'NEWQUEUE', 
                move_all_fields=True,
                initial_status=True,
                expand=['transitions', 'attachments']
            )
            
            # –¢–∏—Ö–∏–π –ø–µ—Ä–µ–Ω–æ—Å –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            result = await client.issues.move(
                'PROJ-456',
                'ARCHIVE',
                notify=False,
                expand=['workflow', 'comments']
            )
        """
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not queue or not isinstance(queue, str):
            raise ValueError(f"queue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {queue}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º endpoint
        endpoint = f"/issues/{issue_id}/_move"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'queue': queue
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±—É–ª–µ–≤—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if notify is not None:
            params['notify'] = str(notify).lower()  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 'true'/'false'
            
        if notify_author is not None:
            params['notifyAuthor'] = str(notify_author).lower()
            
        if move_all_fields is not None:
            params['moveAllFields'] = str(move_all_fields).lower()
            
        if initial_status is not None:
            params['initialStatus'] = str(initial_status).lower()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º expand –ø–∞—Ä–∞–º–µ—Ç—Ä (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–µ—Ç–æ–¥—É get())
        if expand:
            if isinstance(expand, str):
                params['expand'] = expand
            elif isinstance(expand, list):
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                params['expand'] = ','.join(expand)
            else:
                self.logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è expand: {type(expand)}")
        
        self.logger.info(f"–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á–∏ {issue_id} –≤ –æ—á–µ—Ä–µ–¥—å {queue}")
        self.logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–Ω–æ—Å–∞: {params}")
        
        try:
            result = await self._request(endpoint, method='POST', params=params)
            moved_key = result.get('key', issue_id)
            self.logger.info(f"–ó–∞–¥–∞—á–∞ {moved_key} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å {queue}")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á–∏ {issue_id} –≤ –æ—á–µ—Ä–µ–¥—å {queue}: {e}")
            raise
    
    # –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
    async def delete(self, issue_id: str) -> Dict[str, Any]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        Args:
            issue_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –∫–ª—é—á –∑–∞–¥–∞—á–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è
            
        Note:
            –ú–µ—Ç–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ delete –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ")
    
    async def count(
        self,
        filter: Optional[Dict[str, Any]] = None,
        query: Optional[str] = None
    ) -> int:
        """
        –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        Args:
            filter: –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–∏ "–ø–æ–ª–µ": "–∑–Ω–∞—á–µ–Ω–∏–µ" –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á.
                   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ø–æ–ª—è –∑–∞–¥–∞—á, –≤–∫–ª—é—á–∞—è:
                   - queue: –æ—á–µ—Ä–µ–¥—å (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
                   - assignee: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ("login" –∏–ª–∏ "empty()")
                   - status: —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                   - priority: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                   - author: –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏
                   - tags: —Ç–µ–≥–∏ –∑–∞–¥–∞—á–∏
                   - created: –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                   –ü—Ä–∏–º–µ—Ä: {"queue": "JUNE", "assignee": "empty()"}

            query: –§–∏–ª—å—Ç—Ä –Ω–∞ —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ Yandex Tracker.
                  –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º.
                  –ü—Ä–∏–º–µ—Ä: "Queue: JUNE AND Assignee: empty()"

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ filter, –Ω–∏ query

        Examples:
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏ JUNE
            count = await client.issues.count(filter={
                "queue": "JUNE",
                "assignee": "empty()"
            })

            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            count = await client.issues.count(filter={
                "queue": "PROJ",
                "status": "open",
                "priority": "major"
            })

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            count = await client.issues.count(
                query="Queue: JUNE AND Status: Open AND Priority: Major"
            )

            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            count = await client.issues.count(filter={
                "queue": "TECH",
                "customPriority": "–í—ã—Å–æ–∫–∏–π"
            })
        """

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if filter is None and query is None:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å filter –∏–ª–∏ query –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
        payload = {}

        if filter is not None:
            if not isinstance(filter, dict):
                raise ValueError("filter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            payload["filter"] = filter
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: {filter}")

        if query is not None:
            if not isinstance(query, str):
                raise ValueError("query –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            payload["query"] = query
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å: {query}")

        endpoint = "/issues/_count"

        self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á")
        self.logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Å—á–µ—Ç–∞: {payload}")

        try:
            result = await self._request(endpoint, method='POST', data=payload)

            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç
            if isinstance(result, int):
                count = result
            elif isinstance(result, dict) and 'count' in result:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ API –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º
                count = result['count']
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫ —á–∏—Å–ª—É
                try:
                    count = int(result)
                except (ValueError, TypeError):
                    self.logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(result)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {result}")
                    count = 0

            self.logger.info(f"–ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {count} –∑–∞–¥–∞—á")
            return count

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–¥–∞—á: {e}")
            raise

    async def search(
        self,
        queue: Optional[str] = None,
        keys: Optional[Union[str, List[str]]] = None,
        filter: Optional[Dict[str, Any]] = None,
        query: Optional[str] = None,
        order: Optional[str] = None,
        expand: Optional[Union[str, List[str]]] = None,
        per_page: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

        Args:
            queue: –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, "TREK", "PROJ")
            keys: –ö–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.
                 –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π ("TASK-123") –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º (["TASK-123", "TASK-124"])
            filter: –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–∏ "–ø–æ–ª–µ": "–∑–Ω–∞—á–µ–Ω–∏–µ" –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á.
                   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ø–æ–ª—è –∑–∞–¥–∞—á, –≤–∫–ª—é—á–∞—è:
                   - queue: –æ—á–µ—Ä–µ–¥—å
                   - assignee: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                   - status: —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                   - priority: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                   - author: –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏
                   - tags: —Ç–µ–≥–∏ –∑–∞–¥–∞—á–∏
                   - created: –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            query: –§–∏–ª—å—Ç—Ä –Ω–∞ —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ Yandex Tracker —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.
                  –ü—Ä–∏–º–µ—Ä: "Queue: TREK AND Status: Open \"Sort by\": Updated DESC"
            order: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Å filter).
                  –§–æ—Ä–º–∞—Ç: "+–ø–æ–ª–µ" (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ) –∏–ª–∏ "-–ø–æ–ª–µ" (—É–±—ã–≤–∞–Ω–∏–µ)
                  –ü—Ä–∏–º–µ—Ä—ã: "+status", "-created", "+priority"
            expand: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç:
                   - 'transitions' - –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É
                   - 'attachments' - –≤–ª–æ–∂–µ–Ω–∏—è
                   –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞

        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Ö

        Note:
            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è):
            1. queue - –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            2. keys
            3. filter
            4. query - –Ω–∞–∏–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

            –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

        Examples:
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
            tasks = await client.issues.search(queue="TREK")

            # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–∞–º
            tasks = await client.issues.search(keys=["TASK-123", "TASK-124"])

            # –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            tasks = await client.issues.search(
                filter={"queue": "TREK", "assignee": "empty()"},
                order="+status",
                expand=["transitions", "attachments"],
                per_page=100
            )

            # –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            tasks = await client.issues.search(
                query="Queue: TREK AND Status: Open \"Sort by\": Updated DESC",
                expand="attachments"
            )

            # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            tasks = await client.issues.search(filter={
                "queue": "TECH",
                "customPriority": "–í—ã—Å–æ–∫–∏–π"
            })
        """

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ payload
        params = {}
        payload = {}

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        search_params = [queue, keys, filter, query]
        active_params = [p for p in search_params if p is not None]

        if len(active_params) == 0:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: queue, keys, filter –∏–ª–∏ query")

        if len(active_params) > 2:
            raise ValueError("–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if queue is not None:
            if not isinstance(queue, str):
                raise ValueError("queue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            payload["queue"] = queue
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä queue: {queue}")

        elif keys is not None:
            if isinstance(keys, str):
                payload["keys"] = keys
            elif isinstance(keys, list):
                if not all(isinstance(key, str) for key in keys):
                    raise ValueError("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã keys –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏")
                payload["keys"] = keys
            else:
                raise ValueError("keys –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫")
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä keys: {keys}")

        elif filter is not None:
            if not isinstance(filter, dict):
                raise ValueError("filter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            payload["filter"] = filter
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä filter: {filter}")

        elif query is not None:
            if not isinstance(query, str):
                raise ValueError("query –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            payload["query"] = query
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä query: {query}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if order is not None:
            if filter is None:
                raise ValueError("order –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å filter")
            if not isinstance(order, str):
                raise ValueError("order –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            if not (order.startswith('+') or order.startswith('-')):
                raise ValueError("order –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+' –∏–ª–∏ '-' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '+status' –∏–ª–∏ '-created')")
            payload["order"] = order
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä order: {order}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º expand –ø–∞—Ä–∞–º–µ—Ç—Ä
        if expand is not None:
            if isinstance(expand, str):
                params['expand'] = expand
            elif isinstance(expand, list):
                if not all(isinstance(item, str) for item in expand):
                    raise ValueError("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã expand –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏")
                params['expand'] = ','.join(expand)
            else:
                raise ValueError("expand –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫")
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä expand: {expand}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º per_page –ø–∞—Ä–∞–º–µ—Ç—Ä
        if per_page is not None:
            if not isinstance(per_page, int) or per_page <= 0:
                raise ValueError("per_page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            params['perPage'] = per_page
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä per_page: {per_page}")

        endpoint = "/issues/_search"

        self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á")
        self.logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: {payload}")
        self.logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")

        try:
            result = await self._request(endpoint, method='POST', data=payload, params=params)

            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            if isinstance(result, list):
                tasks = result
            else:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ API –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç
                tasks = result.get('issues', [])

            self.logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
            return tasks

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á: {e}")
            raise

    async def clear_scroll(self, scroll_sessions: Dict[str, str]) -> Dict[str, Any]:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª-—Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ search().

        Args:
            scroll_sessions: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–∏ "scrollId": "scrollToken".
                           scrollId –∏ scrollToken –ø–æ–ª—É—á–∞—é—Ç—Å—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                           X-Scroll-Id –∏ X-Scroll-Token –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á.
                           –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

        Returns:
            Dict: –û—Ç–≤–µ—Ç –æ—Ç API –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π

        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö

        Examples:
            # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Å–∫—Ä–æ–ª–ª–∞
            scroll_sessions = {
                "cXVlcnlUaGVuRmV0Y2g...": "c44356850f446b88e5b5cd65a34a1409...",
                "cXVlcnlUaGVuRmV0Y2c...": "b8e1c56966f037d9c4e241af40d31dc8..."
            }

            # –û—á–∏—Å—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª-—Å–µ—Å—Å–∏–π
            result = await client.issues.clear_scroll(scroll_sessions)

            # –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–∞—Ä–µ —Å search() –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:
            # 1. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            # 3. –û—á–∏—â–∞—é—Ç—Å—è —Å–∫—Ä–æ–ª–ª-—Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤

        Note:
            –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–ª–µ–¥—É–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º–∏
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
        """

        if not scroll_sessions:
            raise ValueError("scroll_sessions –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if not isinstance(scroll_sessions, dict):
            raise ValueError("scroll_sessions –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏
        for scroll_id, scroll_token in scroll_sessions.items():
            if not isinstance(scroll_id, str) or not isinstance(scroll_token, str):
                raise ValueError("–í—Å–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ scroll_sessions –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏")

        endpoint = "/system/search/scroll/_clear"

        self.logger.info(f"–û—á–∏—Å—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª-—Å–µ—Å—Å–∏–π: {len(scroll_sessions)} —Å–µ—Å—Å–∏–π")
        self.logger.debug(f"–û—á–∏—â–∞–µ–º—ã–µ —Å–µ—Å—Å–∏–∏: {list(scroll_sessions.keys())}")

        try:
            result = await self._request(endpoint, method='POST', data=scroll_sessions)

            self.logger.info(f"–°–∫—Ä–æ–ª–ª-—Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–∫—Ä–æ–ª–ª-—Å–µ—Å—Å–∏–π: {e}")
            raise

    async def priorities(self, localized: Optional[bool] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á

        Args:
            localized: –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ.
                      True (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - —Ç–æ–ª—å–∫–æ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                      False - –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–∞—Ö

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:
            - id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            - key: —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (critical, major, minor –∏ —Ç.–¥.)
            - display: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            - order: –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤

        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞

        Examples:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            priorities = await client.issues.priorities()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
            all_priorities = await client.issues.priorities(localized=False)

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for priority in priorities:
                print(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority['display']} (–∫–ª—é—á: {priority['key']})")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ –∫–ª—é—á—É
            major_priority = next(
                (p for p in priorities if p['key'] == 'major'),
                None
            )
        """

        endpoint = "/priorities"
        params = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä localized –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if localized is not None:
            if not isinstance(localized, bool):
                raise ValueError("localized –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
            params['localized'] = str(localized).lower()

        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á")
        if localized is not None:
            self.logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä localized: {localized}")

        try:
            result = await self._request(endpoint, method='GET', params=params)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫
            if not isinstance(result, list):
                self.logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(result)}")
                result = []

            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")

            # –õ–æ–≥–≥–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö
            for priority in result[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞ –≤ –ª–æ–≥–∞—Ö
                key = priority.get('key', 'N/A')
                display = priority.get('display', 'N/A')
                self.logger.debug(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {display} (–∫–ª—é—á: {key})")

            if len(result) > 5:
                self.logger.debug(f"... –∏ –µ—â–µ {len(result) - 5} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")

            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {e}")
            raise

    async def changelog(
        self,
        issue_id: str,
        id: Optional[str] = None,
        per_page: Optional[int] = None,
        field: Optional[str] = None,
        type: Optional[str] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–ª—è–º –∏ —Ç–∏–ø–∞–º –∏–∑–º–µ–Ω–µ–Ω–∏–π.

        Args:
            issue_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –∫–ª—é—á –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'JUNE-3', 'TASK-123')
            id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50, –º–∞–∫—Å–∏–º—É–º 100)
            field: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                  (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'status', 'assignee', 'checklists', 'description')
            type: –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ('IssueUpdated', 'IssueCreated', 'IssueCommented')

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏

        Raises:
            aiohttp.ClientResponseError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP –∑–∞–ø—Ä–æ—Å–∞ (404, 400, 403)
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö

        Examples:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏
            changelog = await client.issues.changelog('TASK-123')

            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            for change in changelog:
                author = change.get('updatedBy', {}).get('display', 'System')
                updated_at = change.get('updatedAt', 'Unknown')
                print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç {author} –≤ {updated_at}")

                # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–π
                for field_change in change.get('fields', []):
                    field_name = field_change.get('field', {}).get('display', 'Unknown')
                    from_value = field_change.get('from', {}).get('display', 'None')
                    to_value = field_change.get('to', {}).get('display', 'None')
                    print(f"  {field_name}: {from_value} -> {to_value}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            changelog_page = await client.issues.changelog('TASK-123', per_page=20)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—é —Å—Ç–∞—Ç—É—Å–∞
            status_changes = await client.issues.changelog(
                'TASK-123',
                field='status'
            )

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
            updates_only = await client.issues.changelog(
                'TASK-123',
                type='IssueUpdated'
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ–∫–ª–∏—Å—Ç–∞
            checklist_changes = await client.issues.changelog(
                'TASK-123',
                field='checklists'
            )

            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            assignee_updates = await client.issues.changelog(
                'TASK-123',
                field='assignee',
                type='IssueUpdated',
                per_page=10
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—á–∏–Ω–∞—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ ID
            changelog_from_id = await client.issues.changelog(
                'TASK-123',
                id='change_id_123'
            )

            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
            total_changes = len(changelog)
            authors = set(change.get('updatedBy', {}).get('login') for change in changelog)
            print(f"–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_changes}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(authors)}")

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
            from collections import defaultdict
            changes_by_date = defaultdict(list)
            for change in changelog:
                date = change.get('updatedAt', '')[:10]  # YYYY-MM-DD
                changes_by_date[date].append(change)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á–∏
            print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(changelog)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_id}")
        """

        if not issue_id or not isinstance(issue_id, str):
            raise ValueError("issue_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

        if per_page is not None and (not isinstance(per_page, int) or per_page <= 0 or per_page > 100):
            raise ValueError("per_page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –Ω–µ –±–æ–ª—å—à–µ 100")

        if id is not None and not isinstance(id, str):
            raise ValueError("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

        if field is not None and not isinstance(field, str):
            raise ValueError("field –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

        if type is not None and not isinstance(type, str):
            raise ValueError("type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

        endpoint = f"/issues/{issue_id}/changelog"

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {}

        if id is not None:
            params['id'] = id

        if per_page is not None:
            params['perPage'] = per_page

        if field is not None:
            params['field'] = field

        if type is not None:
            params['type'] = type

        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏: {issue_id}")

        if params:
            param_info = []
            if id:
                param_info.append(f"—Å ID: {id}")
            if per_page:
                param_info.append(f"–ª–∏–º–∏—Ç: {per_page}")
            if field:
                param_info.append(f"–ø–æ–ª–µ: {field}")
            if type:
                param_info.append(f"—Ç–∏–ø: {type}")

            self.logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {', '.join(param_info)}")

        try:
            result = await self._request(endpoint, method='GET', params=params)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫
            if not isinstance(result, list):
                self.logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(result)}")
                result = []

            changes_count = len(result)
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {changes_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_id}")

            if changes_count > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                authors = set()
                field_types = set()
                change_types = set()

                for change in result:
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ä–∞–º
                    author = change.get('updatedBy', {}).get('login')
                    if author:
                        authors.add(author)

                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    change_type = change.get('type')
                    if change_type:
                        change_types.add(change_type)

                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø–æ–ª—è–º
                    for field_change in change.get('fields', []):
                        field_name = field_change.get('field', {}).get('key')
                        if field_name:
                            field_types.add(field_name)

                self.logger.debug(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {len(authors)}")
                if field_types:
                    self.logger.debug(f"–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(sorted(field_types))}")
                if change_types:
                    self.logger.debug(f"–¢–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π: {', '.join(sorted(change_types))}")

            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_id}: {e}")
            raise



    async def list(self, **kwargs) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π

        Args:
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (queue, assignee, status –∏ –¥—Ä.)

        Returns:
            List[Dict] —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á

        Note:
            –ú–µ—Ç–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ search() –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á.
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ list –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ search() –≤–º–µ—Å—Ç–æ list().")
