# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'NgfwLogProfileLogDestinationArgs',
    'NgfwLogProfileLogDestinationArgsDict',
    'NgfwStatusArgs',
    'NgfwStatusArgsDict',
    'NgfwStatusAttachmentArgs',
    'NgfwStatusAttachmentArgsDict',
    'NgfwSubnetMappingArgs',
    'NgfwSubnetMappingArgsDict',
    'RulestackProfileConfigArgs',
    'RulestackProfileConfigArgsDict',
    'SecurityRuleCategoryArgs',
    'SecurityRuleCategoryArgsDict',
    'SecurityRuleDestinationArgs',
    'SecurityRuleDestinationArgsDict',
    'SecurityRuleSourceArgs',
    'SecurityRuleSourceArgsDict',
    'GetAccountsAccountDetailArgs',
    'GetAccountsAccountDetailArgsDict',
]

MYPY = False

if not MYPY:
    class NgfwLogProfileLogDestinationArgsDict(TypedDict):
        destination: NotRequired[pulumi.Input[_builtins.str]]
        """
        The log destination details.
        """
        destination_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
        """
        log_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of logs. Valid values are `TRAFFIC`, `THREAT`, or `DECRYPTION`.
        """
elif False:
    NgfwLogProfileLogDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NgfwLogProfileLogDestinationArgs:
    def __init__(__self__, *,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 log_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination: The log destination details.
        :param pulumi.Input[_builtins.str] destination_type: The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
        :param pulumi.Input[_builtins.str] log_type: The type of logs. Valid values are `TRAFFIC`, `THREAT`, or `DECRYPTION`.
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log destination details.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of logs. Valid values are `TRAFFIC`, `THREAT`, or `DECRYPTION`.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_type", value)


if not MYPY:
    class NgfwStatusArgsDict(TypedDict):
        attachments: NotRequired[pulumi.Input[Sequence[pulumi.Input['NgfwStatusAttachmentArgsDict']]]]
        """
        The firewall attachments.
        """
        failure_reason: NotRequired[pulumi.Input[_builtins.str]]
        """
        The firewall failure reason.
        """
        firewall_status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The firewall status.
        """
        rulestack_status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The rulestack status.
        """
elif False:
    NgfwStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NgfwStatusArgs:
    def __init__(__self__, *,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input['NgfwStatusAttachmentArgs']]]] = None,
                 failure_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_status: Optional[pulumi.Input[_builtins.str]] = None,
                 rulestack_status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NgfwStatusAttachmentArgs']]] attachments: The firewall attachments.
        :param pulumi.Input[_builtins.str] failure_reason: The firewall failure reason.
        :param pulumi.Input[_builtins.str] firewall_status: The firewall status.
        :param pulumi.Input[_builtins.str] rulestack_status: The rulestack status.
        """
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if firewall_status is not None:
            pulumi.set(__self__, "firewall_status", firewall_status)
        if rulestack_status is not None:
            pulumi.set(__self__, "rulestack_status", rulestack_status)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NgfwStatusAttachmentArgs']]]]:
        """
        The firewall attachments.
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NgfwStatusAttachmentArgs']]]]):
        pulumi.set(self, "attachments", value)

    @_builtins.property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The firewall failure reason.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "failure_reason", value)

    @_builtins.property
    @pulumi.getter(name="firewallStatus")
    def firewall_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The firewall status.
        """
        return pulumi.get(self, "firewall_status")

    @firewall_status.setter
    def firewall_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firewall_status", value)

    @_builtins.property
    @pulumi.getter(name="rulestackStatus")
    def rulestack_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rulestack status.
        """
        return pulumi.get(self, "rulestack_status")

    @rulestack_status.setter
    def rulestack_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rulestack_status", value)


if not MYPY:
    class NgfwStatusAttachmentArgsDict(TypedDict):
        endpoint_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The endpoint id.
        """
        rejected_reason: NotRequired[pulumi.Input[_builtins.str]]
        """
        The reject reason.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The attachment status.
        """
        subnet_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subnet id.
        """
elif False:
    NgfwStatusAttachmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NgfwStatusAttachmentArgs:
    def __init__(__self__, *,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rejected_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] endpoint_id: The endpoint id.
        :param pulumi.Input[_builtins.str] rejected_reason: The reject reason.
        :param pulumi.Input[_builtins.str] status: The attachment status.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet id.
        """
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if rejected_reason is not None:
            pulumi.set(__self__, "rejected_reason", rejected_reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint id.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="rejectedReason")
    def rejected_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reject reason.
        """
        return pulumi.get(self, "rejected_reason")

    @rejected_reason.setter
    def rejected_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rejected_reason", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The attachment status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class NgfwSubnetMappingArgsDict(TypedDict):
        availability_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        The availability zone, for when the endpoint mode is customer managed.
        """
        availability_zone_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The availability zone ID, for when the endpoint mode is customer managed.
        """
        subnet_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subnet id, for when the endpoint mode is service managed.
        """
elif False:
    NgfwSubnetMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NgfwSubnetMappingArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] availability_zone: The availability zone, for when the endpoint mode is customer managed.
        :param pulumi.Input[_builtins.str] availability_zone_id: The availability zone ID, for when the endpoint mode is customer managed.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet id, for when the endpoint mode is service managed.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if availability_zone_id is not None:
            pulumi.set(__self__, "availability_zone_id", availability_zone_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability zone, for when the endpoint mode is customer managed.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZoneId")
    def availability_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability zone ID, for when the endpoint mode is customer managed.
        """
        return pulumi.get(self, "availability_zone_id")

    @availability_zone_id.setter
    def availability_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet id, for when the endpoint mode is service managed.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class RulestackProfileConfigArgsDict(TypedDict):
        anti_spyware: NotRequired[pulumi.Input[_builtins.str]]
        """
        Anti-spyware profile setting. Defaults to `BestPractice`.
        """
        anti_virus: NotRequired[pulumi.Input[_builtins.str]]
        """
        Anti-virus profile setting. Defaults to `BestPractice`.
        """
        file_blocking: NotRequired[pulumi.Input[_builtins.str]]
        """
        File blocking profile setting. Defaults to `BestPractice`.
        """
        outbound_trust_certificate: NotRequired[pulumi.Input[_builtins.str]]
        """
        Outbound trust certificate.
        """
        outbound_untrust_certificate: NotRequired[pulumi.Input[_builtins.str]]
        """
        Outbound untrust certificate.
        """
        url_filtering: NotRequired[pulumi.Input[_builtins.str]]
        """
        URL filtering profile setting. Defaults to `None`.
        """
        vulnerability: NotRequired[pulumi.Input[_builtins.str]]
        """
        Vulnerability profile setting. Defaults to `BestPractice`.
        """
elif False:
    RulestackProfileConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RulestackProfileConfigArgs:
    def __init__(__self__, *,
                 anti_spyware: Optional[pulumi.Input[_builtins.str]] = None,
                 anti_virus: Optional[pulumi.Input[_builtins.str]] = None,
                 file_blocking: Optional[pulumi.Input[_builtins.str]] = None,
                 outbound_trust_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 outbound_untrust_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 url_filtering: Optional[pulumi.Input[_builtins.str]] = None,
                 vulnerability: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] anti_spyware: Anti-spyware profile setting. Defaults to `BestPractice`.
        :param pulumi.Input[_builtins.str] anti_virus: Anti-virus profile setting. Defaults to `BestPractice`.
        :param pulumi.Input[_builtins.str] file_blocking: File blocking profile setting. Defaults to `BestPractice`.
        :param pulumi.Input[_builtins.str] outbound_trust_certificate: Outbound trust certificate.
        :param pulumi.Input[_builtins.str] outbound_untrust_certificate: Outbound untrust certificate.
        :param pulumi.Input[_builtins.str] url_filtering: URL filtering profile setting. Defaults to `None`.
        :param pulumi.Input[_builtins.str] vulnerability: Vulnerability profile setting. Defaults to `BestPractice`.
        """
        if anti_spyware is not None:
            pulumi.set(__self__, "anti_spyware", anti_spyware)
        if anti_virus is not None:
            pulumi.set(__self__, "anti_virus", anti_virus)
        if file_blocking is not None:
            pulumi.set(__self__, "file_blocking", file_blocking)
        if outbound_trust_certificate is not None:
            pulumi.set(__self__, "outbound_trust_certificate", outbound_trust_certificate)
        if outbound_untrust_certificate is not None:
            pulumi.set(__self__, "outbound_untrust_certificate", outbound_untrust_certificate)
        if url_filtering is not None:
            pulumi.set(__self__, "url_filtering", url_filtering)
        if vulnerability is not None:
            pulumi.set(__self__, "vulnerability", vulnerability)

    @_builtins.property
    @pulumi.getter(name="antiSpyware")
    def anti_spyware(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Anti-spyware profile setting. Defaults to `BestPractice`.
        """
        return pulumi.get(self, "anti_spyware")

    @anti_spyware.setter
    def anti_spyware(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "anti_spyware", value)

    @_builtins.property
    @pulumi.getter(name="antiVirus")
    def anti_virus(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Anti-virus profile setting. Defaults to `BestPractice`.
        """
        return pulumi.get(self, "anti_virus")

    @anti_virus.setter
    def anti_virus(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "anti_virus", value)

    @_builtins.property
    @pulumi.getter(name="fileBlocking")
    def file_blocking(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File blocking profile setting. Defaults to `BestPractice`.
        """
        return pulumi.get(self, "file_blocking")

    @file_blocking.setter
    def file_blocking(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_blocking", value)

    @_builtins.property
    @pulumi.getter(name="outboundTrustCertificate")
    def outbound_trust_certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Outbound trust certificate.
        """
        return pulumi.get(self, "outbound_trust_certificate")

    @outbound_trust_certificate.setter
    def outbound_trust_certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "outbound_trust_certificate", value)

    @_builtins.property
    @pulumi.getter(name="outboundUntrustCertificate")
    def outbound_untrust_certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Outbound untrust certificate.
        """
        return pulumi.get(self, "outbound_untrust_certificate")

    @outbound_untrust_certificate.setter
    def outbound_untrust_certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "outbound_untrust_certificate", value)

    @_builtins.property
    @pulumi.getter(name="urlFiltering")
    def url_filtering(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL filtering profile setting. Defaults to `None`.
        """
        return pulumi.get(self, "url_filtering")

    @url_filtering.setter
    def url_filtering(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url_filtering", value)

    @_builtins.property
    @pulumi.getter
    def vulnerability(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Vulnerability profile setting. Defaults to `BestPractice`.
        """
        return pulumi.get(self, "vulnerability")

    @vulnerability.setter
    def vulnerability(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vulnerability", value)


if not MYPY:
    class SecurityRuleCategoryArgsDict(TypedDict):
        feeds: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of feeds.
        """
        url_category_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of URL category names.
        """
elif False:
    SecurityRuleCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityRuleCategoryArgs:
    def __init__(__self__, *,
                 feeds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 url_category_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] feeds: List of feeds.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] url_category_names: List of URL category names.
        """
        if feeds is not None:
            pulumi.set(__self__, "feeds", feeds)
        if url_category_names is not None:
            pulumi.set(__self__, "url_category_names", url_category_names)

    @_builtins.property
    @pulumi.getter
    def feeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of feeds.
        """
        return pulumi.get(self, "feeds")

    @feeds.setter
    def feeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "feeds", value)

    @_builtins.property
    @pulumi.getter(name="urlCategoryNames")
    def url_category_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of URL category names.
        """
        return pulumi.get(self, "url_category_names")

    @url_category_names.setter
    def url_category_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "url_category_names", value)


if not MYPY:
    class SecurityRuleDestinationArgsDict(TypedDict):
        cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of CIDRs.
        """
        countries: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of countries.
        """
        feeds: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of feeds.
        """
        fqdn_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of FQDN lists.
        """
        prefix_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of prefix list.
        """
elif False:
    SecurityRuleDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityRuleDestinationArgs:
    def __init__(__self__, *,
                 cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 feeds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 fqdn_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cidrs: List of CIDRs.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: List of countries.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] feeds: List of feeds.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] fqdn_lists: List of FQDN lists.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] prefix_lists: List of prefix list.
        """
        if cidrs is not None:
            pulumi.set(__self__, "cidrs", cidrs)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if feeds is not None:
            pulumi.set(__self__, "feeds", feeds)
        if fqdn_lists is not None:
            pulumi.set(__self__, "fqdn_lists", fqdn_lists)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @_builtins.property
    @pulumi.getter
    def cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of CIDRs.
        """
        return pulumi.get(self, "cidrs")

    @cidrs.setter
    def cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cidrs", value)

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of countries.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @_builtins.property
    @pulumi.getter
    def feeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of feeds.
        """
        return pulumi.get(self, "feeds")

    @feeds.setter
    def feeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "feeds", value)

    @_builtins.property
    @pulumi.getter(name="fqdnLists")
    def fqdn_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of FQDN lists.
        """
        return pulumi.get(self, "fqdn_lists")

    @fqdn_lists.setter
    def fqdn_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "fqdn_lists", value)

    @_builtins.property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of prefix list.
        """
        return pulumi.get(self, "prefix_lists")

    @prefix_lists.setter
    def prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "prefix_lists", value)


if not MYPY:
    class SecurityRuleSourceArgsDict(TypedDict):
        cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of CIDRs.
        """
        countries: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of countries.
        """
        feeds: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of feeds.
        """
        prefix_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of prefix list.
        """
elif False:
    SecurityRuleSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityRuleSourceArgs:
    def __init__(__self__, *,
                 cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 feeds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cidrs: List of CIDRs.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: List of countries.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] feeds: List of feeds.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] prefix_lists: List of prefix list.
        """
        if cidrs is not None:
            pulumi.set(__self__, "cidrs", cidrs)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if feeds is not None:
            pulumi.set(__self__, "feeds", feeds)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @_builtins.property
    @pulumi.getter
    def cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of CIDRs.
        """
        return pulumi.get(self, "cidrs")

    @cidrs.setter
    def cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cidrs", value)

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of countries.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @_builtins.property
    @pulumi.getter
    def feeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of feeds.
        """
        return pulumi.get(self, "feeds")

    @feeds.setter
    def feeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "feeds", value)

    @_builtins.property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of prefix list.
        """
        return pulumi.get(self, "prefix_lists")

    @prefix_lists.setter
    def prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "prefix_lists", value)


if not MYPY:
    class GetAccountsAccountDetailArgsDict(TypedDict):
        account_id: _builtins.str
        """
        The account id.
        """
        external_id: _builtins.str
        """
        External Id of the onboarded account
        """
        onboarding_status: _builtins.str
        """
        Onboarding status of the account.
        """
elif False:
    GetAccountsAccountDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAccountsAccountDetailArgs:
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 external_id: _builtins.str,
                 onboarding_status: _builtins.str):
        """
        :param _builtins.str account_id: The account id.
        :param _builtins.str external_id: External Id of the onboarded account
        :param _builtins.str onboarding_status: Onboarding status of the account.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "onboarding_status", onboarding_status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account id.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: _builtins.str):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> _builtins.str:
        """
        External Id of the onboarded account
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: _builtins.str):
        pulumi.set(self, "external_id", value)

    @_builtins.property
    @pulumi.getter(name="onboardingStatus")
    def onboarding_status(self) -> _builtins.str:
        """
        Onboarding status of the account.
        """
        return pulumi.get(self, "onboarding_status")

    @onboarding_status.setter
    def onboarding_status(self, value: _builtins.str):
        pulumi.set(self, "onboarding_status", value)


