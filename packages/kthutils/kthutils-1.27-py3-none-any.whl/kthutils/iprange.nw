\chapter{IP ranges for computer lab computers}

So we have a quiz assignment in Canvas that we want the
students to do in a proctored setting (it's a KS). However, to prevent
them from doing it at home, or any other unproctored setting, during the time 
window of the exam, we have these options:

\begin{enumerate}
  \item Setting which IPs they can access the quiz from. Canvas allows for 
  this. Then I'll just list the IP ranges for the booked lab rooms. Hence, they 
  can't access the quiz from outside of the proctored environment.

  \item\label{CanvasExamRoom} Assign the quiz only to those who signed up.
  We can do this manually in the course's Canvas room, or just get a designated 
  exam room in Canvas.

  However, it would still need the IP-blocking, since otherwise they can do 
  it from home anyway as long as they signed up.

  \item Just invalidate whoever submitted anything but wasn't recorded present 
  by the invigilators.
  
  This is a lot of manual work. And they can still leave the room after 30 
  minutes (or whatever limit is set) and finish the quiz outside of the 
  proctored environment with aids that we don't allow.

  There are two possible remedies:
  \begin{enumerate}
  \item The proctors note the time every student leaves so that we can compare 
  the time they left to the time they submitted.
  \item The students can't leave before the exam time is finished, they must 
  stay in the room the entire time.
  In this case we only a list of was present.
  \end{enumerate}
\end{enumerate}


\section{Setting up the CLI}

We want to provide a command that takes arguments and options and passes those 
to a shell script.
Since we only provide one command, we must provide a function [[add_command]] 
that we can use to add the command to any provided [[Typer]] instance [[cli]].
<<iprange.py>>=
import typer
try:
  from typing import Annotated, List
except ImportError:
  from typing_extensions import Annotated, List

<<imports>>

<<argument and option definitions>>

def add_command(cli):
  """
  Adds the [[iprange]] command to the given [[cli]].
  """
  <<add the [[iprange]] command to [[cli]]>>

if __name__ == "__main__":
  cli = typer.Typer()
  add_command(cli)
  cli()
@


\section{The [[iprange]] command}

We want to provide a command that takes a list of lab rooms as argument and 
prints the IP ranges for them.
Now this is done the easiest with a shell script.
However, we want to be able to run it from this Python command-line utility 
too.
The main script is provided below as [[<<iprange.sh>>]].
We'll simply call it from our Python-implemented subommand.
<<add the [[iprange]] command to [[cli]]>>=
@cli.command()
def iprange(rooms: Annotated[List[str], rooms_arg]):
  """
  Generate the IP ranges for the given lab rooms. The lab rooms have the 
  following prefixes that can be used:

  <<list of rooms' prefixes>>
  """
  <<find the path of [[iprange.sh]]>>
  <<run [[iprange.sh]] with the given [[rooms]]>>
<<argument and option definitions>>=
rooms_arg = typer.Argument(help="The lab rooms to generate IP ranges for. "
                                "The lab room is the hostname prefix, eg red "
                                "(for Röd) or toke (for Toker).")
@

\subsection{The rooms' hostname prefixes}

I got this list in an email from IT.
<<list of rooms' prefixes>>=
ARCPLAN BALT BILBO BURE BUTT BYVPROJ CADLAB CHRIS COS-LAB
DELL DFL FAGG FRODO FYLKE GLAD HALLF ITM-C13 ITM-C30 ITM-C45
ITM-C46 ITSC KA-209 KA-309 KLOK KTHB LABB305 M102 M122 MACL
MAT MAX MERRY NILS PIPPIN PROS RB33 REMOTE SAM T41 T65 TOKE
TROT XQ23 XQ25 XQ32 XW343 XW344 XW41 XW50
@

\subsection{Find the path of [[iprange.sh]]}

We'll use the [[pkgutil]] module to find the path of the shell script.
<<imports>>=
import pkgutil
@

We'll use the [[get_loader]] function to get the path of the shell script.
[[get_loader]] will return the path to the current module, that is, the 
[[iprange]] module and the [[iprange.py]] file.
So we'll get the parent to get the directory and then we just add the name of 
the shell script.
<<find the path of [[iprange.sh]]>>=
package_path = pathlib.Path(pkgutil.get_loader(__name__).path).parent
iprange_sh = package_path / "iprange.sh"
<<imports>>=
import pathlib
@

\subsection{Run [[iprange.sh]] with the given [[rooms]]}

We'll use the [[subprocess]] module to run the shell script.
<<imports>>=
import subprocess
@

We'll use the [[run]] function to run the shell script.
We'll use the [[check]] argument to make it raise an exception if the shell 
script fails.
We don't need to capture the output, so we'll just redirect it to the standard 
output of the Python script.
<<run [[iprange.sh]] with the given [[rooms]]>>=
subprocess.run([iprange_sh, *rooms], check=True)
@


\section{The script [[iprange.sh]] to help with the address ranges}

This is a script
that generates a list of addresses for the given lab rooms.
We want to get the intervals, that is, the first and last address in a range 
that spans the lab room.
This way we can easily enter them in Canvas.
<<iprange.sh>>=
#!/bin/bash
# Author: Daniel Bosk <dbosk@kth.se>
# License: MIT
# Description: Generates the address ranges for the given lab rooms.
# Usage: ./addresses.sh <lab room> <lab room> ...
# The lab room is the hostname prefix, eg red (for Röd) or toke (for Toker).

<<constants>>
<<helper functions>>

rooms=$*
<<generate lab rooms CSV file>>
for room in $rooms; do
  <<print the address interval for [[room]]>>
done
@

\section{Generating a list of lab rooms' addresses}

We'll create a file that contains all addresses of the lab computers.
<<constants>>=
LABROOMS_CSV=$(mktemp)
<<generate lab rooms CSV file>>=
list_lab_computer_hostnames_IPs $rooms > $LABROOMS_CSV
<<helper functions>>=
list_lab_computer_hostnames_IPs() {
  local rooms=$*
  local room
  for room in $rooms; do
    <<print the hostname-address pairs for [[room]]>>
  done
}
@

Now we just need to print the hostname-address pairs for each lab room.
We'll simply use the DNS to enumerate the computers.

There are two possible domains, [[eecs.kth.se]] (for the Unix computers) and 
[[ug.kth.se]] (for the Windows computers).
We'll try both and just ignore any results with [[NXDOMAIN]] in its output.

We'll also ignore any IPv6 addresses, that is, any results containing [[IPv6]] 
in its output.

We'll also assume that there will be less than 100 computer in a lab room.
All lab computers are named [[<room>-<number>]], for instance 
[[red-01.eecs.kth.se]] or [[toke-01.ug.kth.se]].
However, sometimes IT doesn't follow this pattern\footnote{%
  Thanks to Vahid for pointing this out!
}:
For instance, we have [[mat01.ug.kth.se]].
<<print the hostname-address pairs for [[room]]>>=
for num in $(seq -w 1 99); do
  host $room-$num.eecs.kth.se | grep -v NXDOMAIN | grep -v IPv6 \
    | cut -d " " -f 1,4
  host $room$num.eecs.kth.se | grep -v NXDOMAIN | grep -v IPv6 \
    | cut -d " " -f 1,4
  host $room-$num.ug.kth.se | grep -v NXDOMAIN \
    | cut -d " " -f 1,4
  host $room$num.ug.kth.se | grep -v NXDOMAIN \
    | cut -d " " -f 1,4
done
@

\section{Getting the start and end address}

We'll use a file that contains all addresses of the lab room computers.
We find this file in [[LABROOMS_CSV]], as outlined above.
That file contains hostname and IP-address pairs.
We'll filter out (grep) the lines containing the lab room name, then we'll cut 
out the IP-addresses, and finally get the first ([[head]]) and last ([[tail]]).
We assume that they'll be reasonably in order.
In most cases they are, they might deviate if there is a problem, for instance 
that a computer has gotten a completely different IP.
<<helper functions>>=
get_start_end_address() {
  local room=$1
  local addresses=$(grep -i $room $LABROOMS_CSV | cut -d " " -f 2)
  local start=$(echo "$addresses" | head -n 1)
  local end=$(echo "$addresses" | tail -n 1)
  echo $start $end
}
@

This leaves us with the following.
<<print the address interval for [[room]]>>=
get_start_end_address $room
