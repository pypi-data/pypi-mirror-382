# coding: utf-8

"""
    EDMS Client Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: development
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edms_client_api.models.commodity_type import CommodityType
from edms_client_api.models.data_type import DataType
from edms_client_api.models.dataset_configuration_dto import DatasetConfigurationDto
from edms_client_api.models.dataset_metadata_column_dto import DatasetMetadataColumnDto
from edms_client_api.models.place_dto import PlaceDto
from edms_client_api.models.time_zone import TimeZone
from typing import Optional, Set
from typing_extensions import Self

class DatasetMetadataDto(BaseModel):
    """
    DatasetMetadataDto
    """ # noqa: E501
    dataset_id: Optional[StrictInt] = Field(default=None, alias="datasetId")
    code: Optional[StrictStr] = None
    friendly_name: Optional[StrictStr] = Field(default=None, alias="friendlyName")
    type: Optional[DataType] = None
    area: Optional[StrictStr] = None
    second_area: Optional[StrictStr] = Field(default=None, alias="secondArea")
    place: Optional[PlaceDto] = None
    tags: Optional[List[StrictStr]] = None
    frequency: Optional[StrictStr] = None
    time_zone: Optional[TimeZone] = Field(default=None, alias="timeZone")
    commodity: Optional[CommodityType] = None
    source: Optional[StrictStr] = None
    gateway: Optional[StrictStr] = None
    columns: Optional[List[DatasetMetadataColumnDto]] = None
    configurations: Optional[List[DatasetConfigurationDto]] = None
    __properties: ClassVar[List[str]] = ["datasetId", "code", "friendlyName", "type", "area", "secondArea", "place", "tags", "frequency", "timeZone", "commodity", "source", "gateway", "columns", "configurations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetMetadataDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of place
        if self.place:
            _dict['place'] = self.place.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item_columns in self.columns:
                if _item_columns:
                    _items.append(_item_columns.to_dict())
            _dict['columns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in configurations (list)
        _items = []
        if self.configurations:
            for _item_configurations in self.configurations:
                if _item_configurations:
                    _items.append(_item_configurations.to_dict())
            _dict['configurations'] = _items
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if area (nullable) is None
        # and model_fields_set contains the field
        if self.area is None and "area" in self.model_fields_set:
            _dict['area'] = None

        # set to None if second_area (nullable) is None
        # and model_fields_set contains the field
        if self.second_area is None and "second_area" in self.model_fields_set:
            _dict['secondArea'] = None

        # set to None if place (nullable) is None
        # and model_fields_set contains the field
        if self.place is None and "place" in self.model_fields_set:
            _dict['place'] = None

        # set to None if frequency (nullable) is None
        # and model_fields_set contains the field
        if self.frequency is None and "frequency" in self.model_fields_set:
            _dict['frequency'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if commodity (nullable) is None
        # and model_fields_set contains the field
        if self.commodity is None and "commodity" in self.model_fields_set:
            _dict['commodity'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if gateway (nullable) is None
        # and model_fields_set contains the field
        if self.gateway is None and "gateway" in self.model_fields_set:
            _dict['gateway'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetMetadataDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasetId": obj.get("datasetId"),
            "code": obj.get("code"),
            "friendlyName": obj.get("friendlyName"),
            "type": obj.get("type"),
            "area": obj.get("area"),
            "secondArea": obj.get("secondArea"),
            "place": PlaceDto.from_dict(obj["place"]) if obj.get("place") is not None else None,
            "tags": obj.get("tags"),
            "frequency": obj.get("frequency"),
            "timeZone": obj.get("timeZone"),
            "commodity": obj.get("commodity"),
            "source": obj.get("source"),
            "gateway": obj.get("gateway"),
            "columns": [DatasetMetadataColumnDto.from_dict(_item) for _item in obj["columns"]] if obj.get("columns") is not None else None,
            "configurations": [DatasetConfigurationDto.from_dict(_item) for _item in obj["configurations"]] if obj.get("configurations") is not None else None
        })
        return _obj


