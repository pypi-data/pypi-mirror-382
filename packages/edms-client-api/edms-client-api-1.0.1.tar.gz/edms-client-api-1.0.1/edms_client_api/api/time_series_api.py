# coding: utf-8

"""
    EDMS Client Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: development
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from edms_client_api.models.aggregation_type import AggregationType
from edms_client_api.models.granularity_unit import GranularityUnit
from edms_client_api.models.time_zone import TimeZone

from edms_client_api.api_client import ApiClient, RequestSerialized
from edms_client_api.api_response import ApiResponse
from edms_client_api.rest import RESTResponseType


class TimeSeriesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def time_series_get_time_serie_data(
        self,
        dataset_id: Annotated[StrictInt, Field(description="The id of the dataset (must be a timeseries dataset)")],
        from_utc: Annotated[Optional[datetime], Field(description="Start of range (inclusive)")] = None,
        to_utc: Annotated[Optional[datetime], Field(description="End of range (exclusive)")] = None,
        from_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or greater (inclusive)")] = None,
        to_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or smaller (exclusive)")] = None,
        granularity_unit: Annotated[Optional[GranularityUnit], Field(description="Group by this interval")] = None,
        granularity: Annotated[Optional[StrictInt], Field(description="Group by this interval")] = None,
        time_zone: Annotated[Optional[TimeZone], Field(description="Timezone")] = None,
        aggregation_type: Annotated[Optional[AggregationType], Field(description="Aggregation type")] = None,
        configuration: Annotated[Optional[StrictStr], Field(description="Use this specific configuration")] = None,
        all_versions: Annotated[Optional[StrictBool], Field(description="true = return all versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Dict[str, object]]:
        """Get a list of timeseries values


        :param dataset_id: The id of the dataset (must be a timeseries dataset) (required)
        :type dataset_id: int
        :param from_utc: Start of range (inclusive)
        :type from_utc: datetime
        :param to_utc: End of range (exclusive)
        :type to_utc: datetime
        :param from_version_utc: Only data with this version or greater (inclusive)
        :type from_version_utc: datetime
        :param to_version_utc: Only data with this version or smaller (exclusive)
        :type to_version_utc: datetime
        :param granularity_unit: Group by this interval
        :type granularity_unit: GranularityUnit
        :param granularity: Group by this interval
        :type granularity: int
        :param time_zone: Timezone
        :type time_zone: TimeZone
        :param aggregation_type: Aggregation type
        :type aggregation_type: AggregationType
        :param configuration: Use this specific configuration
        :type configuration: str
        :param all_versions: true = return all versions
        :type all_versions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_series_get_time_serie_data_serialize(
            dataset_id=dataset_id,
            from_utc=from_utc,
            to_utc=to_utc,
            from_version_utc=from_version_utc,
            to_version_utc=to_version_utc,
            granularity_unit=granularity_unit,
            granularity=granularity,
            time_zone=time_zone,
            aggregation_type=aggregation_type,
            configuration=configuration,
            all_versions=all_versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dict[str, object]]",
            '429': "ProblemDetails",
            '403': "ProblemDetails",
            '422': "ValidationProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def time_series_get_time_serie_data_with_http_info(
        self,
        dataset_id: Annotated[StrictInt, Field(description="The id of the dataset (must be a timeseries dataset)")],
        from_utc: Annotated[Optional[datetime], Field(description="Start of range (inclusive)")] = None,
        to_utc: Annotated[Optional[datetime], Field(description="End of range (exclusive)")] = None,
        from_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or greater (inclusive)")] = None,
        to_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or smaller (exclusive)")] = None,
        granularity_unit: Annotated[Optional[GranularityUnit], Field(description="Group by this interval")] = None,
        granularity: Annotated[Optional[StrictInt], Field(description="Group by this interval")] = None,
        time_zone: Annotated[Optional[TimeZone], Field(description="Timezone")] = None,
        aggregation_type: Annotated[Optional[AggregationType], Field(description="Aggregation type")] = None,
        configuration: Annotated[Optional[StrictStr], Field(description="Use this specific configuration")] = None,
        all_versions: Annotated[Optional[StrictBool], Field(description="true = return all versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Dict[str, object]]]:
        """Get a list of timeseries values


        :param dataset_id: The id of the dataset (must be a timeseries dataset) (required)
        :type dataset_id: int
        :param from_utc: Start of range (inclusive)
        :type from_utc: datetime
        :param to_utc: End of range (exclusive)
        :type to_utc: datetime
        :param from_version_utc: Only data with this version or greater (inclusive)
        :type from_version_utc: datetime
        :param to_version_utc: Only data with this version or smaller (exclusive)
        :type to_version_utc: datetime
        :param granularity_unit: Group by this interval
        :type granularity_unit: GranularityUnit
        :param granularity: Group by this interval
        :type granularity: int
        :param time_zone: Timezone
        :type time_zone: TimeZone
        :param aggregation_type: Aggregation type
        :type aggregation_type: AggregationType
        :param configuration: Use this specific configuration
        :type configuration: str
        :param all_versions: true = return all versions
        :type all_versions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_series_get_time_serie_data_serialize(
            dataset_id=dataset_id,
            from_utc=from_utc,
            to_utc=to_utc,
            from_version_utc=from_version_utc,
            to_version_utc=to_version_utc,
            granularity_unit=granularity_unit,
            granularity=granularity,
            time_zone=time_zone,
            aggregation_type=aggregation_type,
            configuration=configuration,
            all_versions=all_versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dict[str, object]]",
            '429': "ProblemDetails",
            '403': "ProblemDetails",
            '422': "ValidationProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def time_series_get_time_serie_data_without_preload_content(
        self,
        dataset_id: Annotated[StrictInt, Field(description="The id of the dataset (must be a timeseries dataset)")],
        from_utc: Annotated[Optional[datetime], Field(description="Start of range (inclusive)")] = None,
        to_utc: Annotated[Optional[datetime], Field(description="End of range (exclusive)")] = None,
        from_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or greater (inclusive)")] = None,
        to_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or smaller (exclusive)")] = None,
        granularity_unit: Annotated[Optional[GranularityUnit], Field(description="Group by this interval")] = None,
        granularity: Annotated[Optional[StrictInt], Field(description="Group by this interval")] = None,
        time_zone: Annotated[Optional[TimeZone], Field(description="Timezone")] = None,
        aggregation_type: Annotated[Optional[AggregationType], Field(description="Aggregation type")] = None,
        configuration: Annotated[Optional[StrictStr], Field(description="Use this specific configuration")] = None,
        all_versions: Annotated[Optional[StrictBool], Field(description="true = return all versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of timeseries values


        :param dataset_id: The id of the dataset (must be a timeseries dataset) (required)
        :type dataset_id: int
        :param from_utc: Start of range (inclusive)
        :type from_utc: datetime
        :param to_utc: End of range (exclusive)
        :type to_utc: datetime
        :param from_version_utc: Only data with this version or greater (inclusive)
        :type from_version_utc: datetime
        :param to_version_utc: Only data with this version or smaller (exclusive)
        :type to_version_utc: datetime
        :param granularity_unit: Group by this interval
        :type granularity_unit: GranularityUnit
        :param granularity: Group by this interval
        :type granularity: int
        :param time_zone: Timezone
        :type time_zone: TimeZone
        :param aggregation_type: Aggregation type
        :type aggregation_type: AggregationType
        :param configuration: Use this specific configuration
        :type configuration: str
        :param all_versions: true = return all versions
        :type all_versions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_series_get_time_serie_data_serialize(
            dataset_id=dataset_id,
            from_utc=from_utc,
            to_utc=to_utc,
            from_version_utc=from_version_utc,
            to_version_utc=to_version_utc,
            granularity_unit=granularity_unit,
            granularity=granularity,
            time_zone=time_zone,
            aggregation_type=aggregation_type,
            configuration=configuration,
            all_versions=all_versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dict[str, object]]",
            '429': "ProblemDetails",
            '403': "ProblemDetails",
            '422': "ValidationProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _time_series_get_time_serie_data_serialize(
        self,
        dataset_id,
        from_utc,
        to_utc,
        from_version_utc,
        to_version_utc,
        granularity_unit,
        granularity,
        time_zone,
        aggregation_type,
        configuration,
        all_versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if dataset_id is not None:
            _path_params['DatasetId'] = dataset_id
        # process the query parameters
        if from_utc is not None:
            if isinstance(from_utc, datetime):
                _query_params.append(
                    (
                        'FromUtc',
                        from_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('FromUtc', from_utc))
            
        if to_utc is not None:
            if isinstance(to_utc, datetime):
                _query_params.append(
                    (
                        'ToUtc',
                        to_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ToUtc', to_utc))
            
        if from_version_utc is not None:
            if isinstance(from_version_utc, datetime):
                _query_params.append(
                    (
                        'FromVersionUtc',
                        from_version_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('FromVersionUtc', from_version_utc))
            
        if to_version_utc is not None:
            if isinstance(to_version_utc, datetime):
                _query_params.append(
                    (
                        'ToVersionUtc',
                        to_version_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ToVersionUtc', to_version_utc))
            
        if granularity_unit is not None:
            
            _query_params.append(('GranularityUnit', granularity_unit.value))
            
        if granularity is not None:
            
            _query_params.append(('Granularity', granularity))
            
        if time_zone is not None:
            
            _query_params.append(('TimeZone', time_zone.value))
            
        if aggregation_type is not None:
            
            _query_params.append(('AggregationType', aggregation_type.value))
            
        if configuration is not None:
            
            _query_params.append(('Configuration', configuration))
            
        if all_versions is not None:
            
            _query_params.append(('AllVersions', all_versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/TimeSeries/Dataset/{DatasetId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def time_series_get_time_serie_data_by_code(
        self,
        dataset_code: Annotated[StrictStr, Field(description="The code of the dataset (must be a timeseries dataset)")],
        from_utc: Annotated[Optional[datetime], Field(description="Start of range (inclusive)")] = None,
        to_utc: Annotated[Optional[datetime], Field(description="End of range (exclusive)")] = None,
        from_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or greater (inclusive)")] = None,
        to_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or smaller (exclusive)")] = None,
        granularity_unit: Annotated[Optional[GranularityUnit], Field(description="Group by this interval")] = None,
        granularity: Annotated[Optional[StrictInt], Field(description="Group by this interval")] = None,
        time_zone: Annotated[Optional[TimeZone], Field(description="Timezone")] = None,
        aggregation_type: Annotated[Optional[AggregationType], Field(description="Aggregation type")] = None,
        configuration: Annotated[Optional[StrictStr], Field(description="Use this specific configuration")] = None,
        all_versions: Annotated[Optional[StrictBool], Field(description="true = return all versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Dict[str, object]]:
        """Get a list of timeseries values


        :param dataset_code: The code of the dataset (must be a timeseries dataset) (required)
        :type dataset_code: str
        :param from_utc: Start of range (inclusive)
        :type from_utc: datetime
        :param to_utc: End of range (exclusive)
        :type to_utc: datetime
        :param from_version_utc: Only data with this version or greater (inclusive)
        :type from_version_utc: datetime
        :param to_version_utc: Only data with this version or smaller (exclusive)
        :type to_version_utc: datetime
        :param granularity_unit: Group by this interval
        :type granularity_unit: GranularityUnit
        :param granularity: Group by this interval
        :type granularity: int
        :param time_zone: Timezone
        :type time_zone: TimeZone
        :param aggregation_type: Aggregation type
        :type aggregation_type: AggregationType
        :param configuration: Use this specific configuration
        :type configuration: str
        :param all_versions: true = return all versions
        :type all_versions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_series_get_time_serie_data_by_code_serialize(
            dataset_code=dataset_code,
            from_utc=from_utc,
            to_utc=to_utc,
            from_version_utc=from_version_utc,
            to_version_utc=to_version_utc,
            granularity_unit=granularity_unit,
            granularity=granularity,
            time_zone=time_zone,
            aggregation_type=aggregation_type,
            configuration=configuration,
            all_versions=all_versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dict[str, object]]",
            '429': "ProblemDetails",
            '403': "ProblemDetails",
            '422': "ValidationProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def time_series_get_time_serie_data_by_code_with_http_info(
        self,
        dataset_code: Annotated[StrictStr, Field(description="The code of the dataset (must be a timeseries dataset)")],
        from_utc: Annotated[Optional[datetime], Field(description="Start of range (inclusive)")] = None,
        to_utc: Annotated[Optional[datetime], Field(description="End of range (exclusive)")] = None,
        from_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or greater (inclusive)")] = None,
        to_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or smaller (exclusive)")] = None,
        granularity_unit: Annotated[Optional[GranularityUnit], Field(description="Group by this interval")] = None,
        granularity: Annotated[Optional[StrictInt], Field(description="Group by this interval")] = None,
        time_zone: Annotated[Optional[TimeZone], Field(description="Timezone")] = None,
        aggregation_type: Annotated[Optional[AggregationType], Field(description="Aggregation type")] = None,
        configuration: Annotated[Optional[StrictStr], Field(description="Use this specific configuration")] = None,
        all_versions: Annotated[Optional[StrictBool], Field(description="true = return all versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Dict[str, object]]]:
        """Get a list of timeseries values


        :param dataset_code: The code of the dataset (must be a timeseries dataset) (required)
        :type dataset_code: str
        :param from_utc: Start of range (inclusive)
        :type from_utc: datetime
        :param to_utc: End of range (exclusive)
        :type to_utc: datetime
        :param from_version_utc: Only data with this version or greater (inclusive)
        :type from_version_utc: datetime
        :param to_version_utc: Only data with this version or smaller (exclusive)
        :type to_version_utc: datetime
        :param granularity_unit: Group by this interval
        :type granularity_unit: GranularityUnit
        :param granularity: Group by this interval
        :type granularity: int
        :param time_zone: Timezone
        :type time_zone: TimeZone
        :param aggregation_type: Aggregation type
        :type aggregation_type: AggregationType
        :param configuration: Use this specific configuration
        :type configuration: str
        :param all_versions: true = return all versions
        :type all_versions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_series_get_time_serie_data_by_code_serialize(
            dataset_code=dataset_code,
            from_utc=from_utc,
            to_utc=to_utc,
            from_version_utc=from_version_utc,
            to_version_utc=to_version_utc,
            granularity_unit=granularity_unit,
            granularity=granularity,
            time_zone=time_zone,
            aggregation_type=aggregation_type,
            configuration=configuration,
            all_versions=all_versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dict[str, object]]",
            '429': "ProblemDetails",
            '403': "ProblemDetails",
            '422': "ValidationProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def time_series_get_time_serie_data_by_code_without_preload_content(
        self,
        dataset_code: Annotated[StrictStr, Field(description="The code of the dataset (must be a timeseries dataset)")],
        from_utc: Annotated[Optional[datetime], Field(description="Start of range (inclusive)")] = None,
        to_utc: Annotated[Optional[datetime], Field(description="End of range (exclusive)")] = None,
        from_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or greater (inclusive)")] = None,
        to_version_utc: Annotated[Optional[datetime], Field(description="Only data with this version or smaller (exclusive)")] = None,
        granularity_unit: Annotated[Optional[GranularityUnit], Field(description="Group by this interval")] = None,
        granularity: Annotated[Optional[StrictInt], Field(description="Group by this interval")] = None,
        time_zone: Annotated[Optional[TimeZone], Field(description="Timezone")] = None,
        aggregation_type: Annotated[Optional[AggregationType], Field(description="Aggregation type")] = None,
        configuration: Annotated[Optional[StrictStr], Field(description="Use this specific configuration")] = None,
        all_versions: Annotated[Optional[StrictBool], Field(description="true = return all versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of timeseries values


        :param dataset_code: The code of the dataset (must be a timeseries dataset) (required)
        :type dataset_code: str
        :param from_utc: Start of range (inclusive)
        :type from_utc: datetime
        :param to_utc: End of range (exclusive)
        :type to_utc: datetime
        :param from_version_utc: Only data with this version or greater (inclusive)
        :type from_version_utc: datetime
        :param to_version_utc: Only data with this version or smaller (exclusive)
        :type to_version_utc: datetime
        :param granularity_unit: Group by this interval
        :type granularity_unit: GranularityUnit
        :param granularity: Group by this interval
        :type granularity: int
        :param time_zone: Timezone
        :type time_zone: TimeZone
        :param aggregation_type: Aggregation type
        :type aggregation_type: AggregationType
        :param configuration: Use this specific configuration
        :type configuration: str
        :param all_versions: true = return all versions
        :type all_versions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_series_get_time_serie_data_by_code_serialize(
            dataset_code=dataset_code,
            from_utc=from_utc,
            to_utc=to_utc,
            from_version_utc=from_version_utc,
            to_version_utc=to_version_utc,
            granularity_unit=granularity_unit,
            granularity=granularity,
            time_zone=time_zone,
            aggregation_type=aggregation_type,
            configuration=configuration,
            all_versions=all_versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dict[str, object]]",
            '429': "ProblemDetails",
            '403': "ProblemDetails",
            '422': "ValidationProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _time_series_get_time_serie_data_by_code_serialize(
        self,
        dataset_code,
        from_utc,
        to_utc,
        from_version_utc,
        to_version_utc,
        granularity_unit,
        granularity,
        time_zone,
        aggregation_type,
        configuration,
        all_versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if dataset_code is not None:
            _path_params['DatasetCode'] = dataset_code
        # process the query parameters
        if from_utc is not None:
            if isinstance(from_utc, datetime):
                _query_params.append(
                    (
                        'FromUtc',
                        from_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('FromUtc', from_utc))
            
        if to_utc is not None:
            if isinstance(to_utc, datetime):
                _query_params.append(
                    (
                        'ToUtc',
                        to_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ToUtc', to_utc))
            
        if from_version_utc is not None:
            if isinstance(from_version_utc, datetime):
                _query_params.append(
                    (
                        'FromVersionUtc',
                        from_version_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('FromVersionUtc', from_version_utc))
            
        if to_version_utc is not None:
            if isinstance(to_version_utc, datetime):
                _query_params.append(
                    (
                        'ToVersionUtc',
                        to_version_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ToVersionUtc', to_version_utc))
            
        if granularity_unit is not None:
            
            _query_params.append(('GranularityUnit', granularity_unit.value))
            
        if granularity is not None:
            
            _query_params.append(('Granularity', granularity))
            
        if time_zone is not None:
            
            _query_params.append(('TimeZone', time_zone.value))
            
        if aggregation_type is not None:
            
            _query_params.append(('AggregationType', aggregation_type.value))
            
        if configuration is not None:
            
            _query_params.append(('Configuration', configuration))
            
        if all_versions is not None:
            
            _query_params.append(('AllVersions', all_versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/TimeSeries/Dataset/ByCode/{DatasetCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


