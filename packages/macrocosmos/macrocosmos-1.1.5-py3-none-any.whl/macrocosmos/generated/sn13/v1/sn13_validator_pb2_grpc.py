# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from macrocosmos.generated.sn13.v1 import sn13_validator_pb2 as sn13_dot_v1_dot_sn13__validator__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sn13/v1/sn13_validator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class Sn13ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListTopics = channel.unary_unary(
                '/sn13.v1.Sn13Service/ListTopics',
                request_serializer=sn13_dot_v1_dot_sn13__validator__pb2.ListTopicsRequest.SerializeToString,
                response_deserializer=sn13_dot_v1_dot_sn13__validator__pb2.ListTopicsResponse.FromString,
                _registered_method=True)
        self.ValidateRedditTopic = channel.unary_unary(
                '/sn13.v1.Sn13Service/ValidateRedditTopic',
                request_serializer=sn13_dot_v1_dot_sn13__validator__pb2.ValidateRedditTopicRequest.SerializeToString,
                response_deserializer=sn13_dot_v1_dot_sn13__validator__pb2.ValidateRedditTopicResponse.FromString,
                _registered_method=True)
        self.OnDemandData = channel.unary_unary(
                '/sn13.v1.Sn13Service/OnDemandData',
                request_serializer=sn13_dot_v1_dot_sn13__validator__pb2.OnDemandDataRequest.SerializeToString,
                response_deserializer=sn13_dot_v1_dot_sn13__validator__pb2.OnDemandDataResponse.FromString,
                _registered_method=True)


class Sn13ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListTopics(self, request, context):
        """ListTopics is the RPC method for getting the top topics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateRedditTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnDemandData(self, request, context):
        """Access the SN13 API endpoint on_demand_data_request via Constellation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Sn13ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTopics,
                    request_deserializer=sn13_dot_v1_dot_sn13__validator__pb2.ListTopicsRequest.FromString,
                    response_serializer=sn13_dot_v1_dot_sn13__validator__pb2.ListTopicsResponse.SerializeToString,
            ),
            'ValidateRedditTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateRedditTopic,
                    request_deserializer=sn13_dot_v1_dot_sn13__validator__pb2.ValidateRedditTopicRequest.FromString,
                    response_serializer=sn13_dot_v1_dot_sn13__validator__pb2.ValidateRedditTopicResponse.SerializeToString,
            ),
            'OnDemandData': grpc.unary_unary_rpc_method_handler(
                    servicer.OnDemandData,
                    request_deserializer=sn13_dot_v1_dot_sn13__validator__pb2.OnDemandDataRequest.FromString,
                    response_serializer=sn13_dot_v1_dot_sn13__validator__pb2.OnDemandDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sn13.v1.Sn13Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sn13.v1.Sn13Service', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Sn13Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sn13.v1.Sn13Service/ListTopics',
            sn13_dot_v1_dot_sn13__validator__pb2.ListTopicsRequest.SerializeToString,
            sn13_dot_v1_dot_sn13__validator__pb2.ListTopicsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateRedditTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sn13.v1.Sn13Service/ValidateRedditTopic',
            sn13_dot_v1_dot_sn13__validator__pb2.ValidateRedditTopicRequest.SerializeToString,
            sn13_dot_v1_dot_sn13__validator__pb2.ValidateRedditTopicResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnDemandData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sn13.v1.Sn13Service/OnDemandData',
            sn13_dot_v1_dot_sn13__validator__pb2.OnDemandDataRequest.SerializeToString,
            sn13_dot_v1_dot_sn13__validator__pb2.OnDemandDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
