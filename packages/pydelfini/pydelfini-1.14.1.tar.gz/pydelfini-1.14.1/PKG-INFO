Metadata-Version: 2.4
Name: pydelfini
Version: 1.14.1
Summary: an easy-to-use Python client for Delfini
Author-email: BioTeam <contact@bioteam.net>
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: pyyaml>=6.0
Requires-Dist: httpx<=0.27.2,>=0.20.0
Requires-Dist: attrs>=21.3.0
Requires-Dist: python-dateutil
Requires-Dist: pyarrow>=20.0.0
Requires-Dist: pandas
Requires-Dist: tqdm
Requires-Dist: tabulate
Provides-Extra: dev
Requires-Dist: sphinx; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-httpx<=0.27.2,>=0.20.0; extra == "dev"
Requires-Dist: syrupy>=4; extra == "dev"
Requires-Dist: pydantic==2.8.2; extra == "dev"
Requires-Dist: typer==0.9.4; extra == "dev"
Requires-Dist: click==8.2.1; extra == "dev"
Requires-Dist: pydantic_core==2.20.1; extra == "dev"
Requires-Dist: openapi-python-client==0.17.2; extra == "dev"
Requires-Dist: reorder-python-imports; extra == "dev"
Requires-Dist: ruff>=0.5.0; extra == "dev"
Requires-Dist: black==23.12.1; extra == "dev"
Requires-Dist: mypy==1.17.1; extra == "dev"
Requires-Dist: types-python-dateutil; extra == "dev"
Requires-Dist: pandas-stubs; extra == "dev"
Requires-Dist: types-tqdm; extra == "dev"
Requires-Dist: types-PyYAML; extra == "dev"
Requires-Dist: types-tabulate; extra == "dev"
Requires-Dist: build; extra == "dev"
Requires-Dist: twine; extra == "dev"
Provides-Extra: doc
Requires-Dist: sphinx; extra == "doc"

# PyDelfini

PyDelfini is an easy-to-use Python client for the Delfini data commons
platform. It's great for scripts, notebooks, or as a foundation for
other clients to interact with Delfini's public API.

# Quickstart

```
$ pip install pydelfini
$ python
>>> from pydelfini import login
>>> client = login('delfini.bioteam.net')
To activate your session, visit the URL below:
   https://delfini.bioteam.net/login/activate/........

Waiting for session activation...
>>> collection = client.get_collection_by_name('MHSVI')
>>> collection
<DelfiniCollection: name=MHSVI version=LIVE id=...>
```

# Features

* Interact with collections, folders, and items
* Read and write data streams (raw files)
* Read and write data tables via Pandas DataFrames

Coming soon:

* Work with data elements
    * Persist data elements through DataFrames
* Work with dataviews (create, edit using simple construction tools)
