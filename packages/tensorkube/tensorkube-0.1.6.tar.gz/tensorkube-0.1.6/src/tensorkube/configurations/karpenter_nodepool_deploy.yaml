#apiVersion: karpenter.sh/v1beta1
#kind: NodePool
#metadata:
#  name: default
#spec:
#  disruption:
#    consolidateAfter: 30s
#    consolidationPolicy: WhenEmpty
#    expireAfter: Never
#  limits:
#    cpu: "200"
#  template:
#    spec:
#      requirements:
#        - key: karpenter.k8s.aws/instance-family
#          operator: In
#          values: ["r3", "c5", "m5", "r5", "g5","t3","p3","p4d","p5"]
##        - key: node.kubernetes.io/instance-type
##          operator: In
##          values: ["c5.large", "m5.large", "r5.large", "m5.xlarge","g5.xlarge",]
##        - key: kubernetes.io/arch
##          operator: In
##          values: ["amd64"]
#        - key: karpenter.sh/capacity-type # If not included, the webhook for the AWS cloud provider will default to on-demand
#          operator: In
#          values: ["on-demand"]
#        - key: kubernetes.io/os
#          operator: In
#          values: ["linux"]
#      nodeClassRef:
#        name: default
#
#---
#apiVersion: karpenter.k8s.aws/v1beta1
#kind: EC2NodeClass
#metadata:
#  name: default
#spec:
#  amiFamily: AL2 # Amazon Linux 2
#  role: "KarpenterNodeRole-tensorkube" # replace with your cluster name
#  subnetSelectorTerms:
#    - tags:
#        karpenter.sh/discovery: "tensorkube" # replace with your cluster name
#  securityGroupSelectorTerms:
#    - tags:
#        karpenter.sh/discovery: "tensorkube" # replace with your cluster name
#  blockDeviceMappings:
#    - deviceName: /dev/xvda
#      ebs:
#        volumeType: gp3
#        volumeSize: 200Gi
#        deleteOnTermination: true
#    - deviceName: /dev/xvdb
#      ebs:
#        volumeType: gp3
#        volumeSize: 500Gi
#        deleteOnTermination: true
#    - deviceName: /dev/xvdc
#      ebs:
#        volumeType: gp3
#        volumeSize: 2000Gi
#        deleteOnTermination: true


