[build-system]
requires = ["setuptools>=60.0"]
build-backend = "setuptools.build_meta"
[project]
name = "clash_tools"
version = "3.3.1"
authors = [
    { name = "sleeping-in-bed", email = "nyanyanyaworld@gmail.com" },
]
description = "clash_tools is a comprehensive collection of utilities for managing Clash proxy configurations and services."
readme = "README.rst"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]

dependencies = [
    "click",
    "PyYAML",
    "types-pyyaml",
    "jinja2",
    "pydantic",
    "typer",
    "pytest",
]

[dependency-groups]
dev = [
    "build",
    "twine",

    "coverage",
    "pytest",
    "tox",
    "mypy",
    "ruff",
    "pre-commit",

    "types-setuptools",

    "sphinx",
    "sphinx-autobuild",
    "sphinx-intl",
    "furo",

    "python-dotenv",
    "rtoml",
    "beautifulsoup4",
    "click",
]

[project.scripts]
clash_docker = "clash_tools.clash_tools.clash_docker:app"
clash_proxy = "clash_tools.clash_tools.clash_proxy:app"
clash_serve = "clash_tools.clash_tools.clash_serve:app"
wg_docker = "clash_tools.wg_docker.cli:app"

[tool.pypjt]
created-by = "1.12.0"

[tool.uv]
default-groups = "all"

[tool.setuptools]
packages = ["clash_tools"]
include-package-data = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ""
testpaths = [
    "tests"
]

[tool.ruff]
extend-exclude = [
    "clash_tools/resources",
    "tests/resources",
    "tests/tmp",
    "containerdata",
]

[tool.ruff.lint]
select = [
    "AIR",   # Airflow
    "ERA",   # eradicate
    "FAST",  # FastAPI
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "CPY",   # flake8-copyright
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FIX",   # flake8-fixme
    "FA",    # flake8-future-annotations
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "LOG",   # flake8-logging
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "SLOT",  # flake8-slots
    "TID",   # flake8-tidy-imports
    "TD",    # flake8-todos
    "TC",    # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "FLY",   # flynt
    "I",     # isort
    "C90",   # mccabe
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "N",     # pep8-naming
    "PERF",  # Perflint
    "E",     # pycodestyle (Error)
    "W",     # pycodestyle (Warning)
    "DOC",   # pydoclint
    "D",     # pydocstyle
    "F",     # Pyflakes
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "UP",    # pyupgrade
    "FURB",  # refurb
    "RUF",   # Ruff-specific rules
    "TRY",   # tryceratops
]
ignore = [
    "E501",  # line-too-long
    "PLC2401",  # non-ascii-name
    "PLC2403",  # non-ascii-import-name
    "W293",  # blank-line-with-whitespace
    "S101",  # assert
    "S603",  # subprocess-without-shell-equals-true
    "CPY001",  # missing-copyright-notice
]

[tool.mypy]
exclude = [
    "clash_tools/resources",
    "tests/resources",
    "tests/tmp",
    "containerdata",
    "build",
    "dist",
]
