import enum
from typing import Annotated

import numpy
from numpy.typing import NDArray


def version() -> str: ...

class CompOp(enum.Enum):
    SRC_COPY = 1

    SRC_OVER = 0

SRC_COPY: CompOp = CompOp.SRC_COPY

SRC_OVER: CompOp = CompOp.SRC_OVER

class Image:
    def __init__(self, width: int, height: int) -> None: ...

    @property
    def width(self) -> int: ...

    @property
    def height(self) -> int: ...

    def memoryview(self) -> memoryview:
        """PEP 3118 memoryview (1D, size=stride*height)"""

    def asarray(self) -> Annotated[NDArray, dict(numpy.uint8)]:
        """NumPy ndarray view (H, W, 4) uint8; zero-copy"""

class Path:
    def __init__(self) -> None: ...

    def move_to(self, x: float, y: float) -> None: ...

    def line_to(self, x: float, y: float) -> None: ...

    def close(self) -> None: ...

class Context:
    def __init__(self, image: Image) -> None: ...

    def end(self) -> None: ...

    def save(self) -> None: ...

    def restore(self) -> None: ...

    def set_comp_op(self, op: CompOp) -> None: ...

    def set_fill_style_rgba(self, r: int, g: int, b: int, a: int = 255) -> None: ...

    def translate(self, x: float, y: float) -> None: ...

    def rotate(self, rad: float) -> None: ...

    def fill_all(self) -> None: ...

    def fill_rect(self, x: float, y: float, w: float, h: float) -> None: ...

    def fill_circle(self, cx: float, cy: float, r: float) -> None: ...

    def fill_pie(self, cx: float, cy: float, r: float, start: float, sweep: float) -> None: ...

    def fill_path(self, path: Path) -> None: ...
