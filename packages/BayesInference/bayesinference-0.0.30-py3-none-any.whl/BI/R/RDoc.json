{
    "asymmetriclaplace": "#' @title AsymmetricLaplace distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param asymmetry 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.asymmetriclaplace(loc, scale, asymmetry, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "asymmetriclaplacequantile": "#' @title AsymmetricLaplaceQuantile distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param quantile 0.5\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.asymmetriclaplacequantile(loc, scale, quantile, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "bernoulli": "#' @title Bernoulli distribution wrapper.\n#' @param probs None\n#' @param logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.bernoulli(probs, logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "bernoullilogits": "#' @title BernoulliLogits distribution wrapper.\n#' @param logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.bernoullilogits(logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "bernoulliprobs": "#' @title BernoulliProbs distribution wrapper.\n#' @param probs <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.bernoulliprobs(probs, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "beta": "#' @title Beta distribution wrapper.\n#' @param concentration1 <class 'inspect._empty'>\n#' @param concentration0 <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.beta(concentration1, concentration0, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "betabinomial": "#' @title BetaBinomial distribution wrapper.\n#' @param concentration1 <class 'inspect._empty'>\n#' @param concentration0 <class 'inspect._empty'>\n#' @param total_count 1\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.betabinomial(concentration1, concentration0, total_count, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "betaproportion": "#' @title BetaProportion distribution wrapper.\n#' @param mean <class 'inspect._empty'>\n#' @param concentration <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.betaproportion(mean, concentration, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "biject_to": "#' @title biject_to distribution wrapper.\n#' @param constraint <class 'inspect._empty'>\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.biject_to(constraint, shape, event, mask, create_obj, sample = TRUE)",
    "binomial": "#' @title Binomial distribution wrapper.\n#' @param total_count 1\n#' @param probs None\n#' @param logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.binomial(total_count, probs, logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "binomiallogits": "#' @title BinomialLogits distribution wrapper.\n#' @param logits <class 'inspect._empty'>\n#' @param total_count 1\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.binomiallogits(logits, total_count, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "binomialprobs": "#' @title BinomialProbs distribution wrapper.\n#' @param probs <class 'inspect._empty'>\n#' @param total_count 1\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.binomialprobs(probs, total_count, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "car": "#' @title CAR distribution wrapper.\n#' @param loc <class 'inspect._empty'>\n#' @param correlation <class 'inspect._empty'>\n#' @param conditional_precision <class 'inspect._empty'>\n#' @param adj_matrix <class 'inspect._empty'>\n#' @param is_sparse False\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.car(loc, correlation, conditional_precision, adj_matrix, is_sparse, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "categorical": "#' @title Categorical distribution wrapper.\n#' @param probs None\n#' @param logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.categorical(probs, logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "categoricallogits": "#' @title CategoricalLogits distribution wrapper.\n#' @param logits <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.categoricallogits(logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "categoricalprobs": "#' @title CategoricalProbs distribution wrapper.\n#' @param probs <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.categoricalprobs(probs, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "cauchy": "#' @title Cauchy distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.cauchy(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "chi2": "#' @title Chi2 distribution wrapper.\n#' @param df <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.chi2(df, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "circulantnormal": "#' @title CirculantNormal distribution wrapper.\n#' @param loc <class 'inspect._empty'>\n#' @param covariance_row None\n#' @param covariance_rfft None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.circulantnormal(loc, covariance_row, covariance_rfft, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "delta": "#' @title Delta distribution wrapper.\n#' @param v 0.0\n#' @param log_density 0.0\n#' @param event_dim 0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.delta(v, log_density, event_dim, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "dirichlet": "#' @title Dirichlet distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.dirichlet(concentration, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "dirichletmultinomial": "#' @title DirichletMultinomial distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param total_count 1\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.dirichletmultinomial(concentration, total_count, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "discreteuniform": "#' @title DiscreteUniform distribution wrapper.\n#' @param low 0\n#' @param high 1\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.discreteuniform(low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "distribution": "#' @title Distribution distribution wrapper.\n#' @param batch_shape ()\n#' @param event_shape ()\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.distribution(batch_shape, event_shape, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "doublytruncatedpowerlaw": "#' @title DoublyTruncatedPowerLaw distribution wrapper.\n#' @param alpha <class 'inspect._empty'>\n#' @param low <class 'inspect._empty'>\n#' @param high <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.doublytruncatedpowerlaw(alpha, low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "eulermaruyama": "#' @title EulerMaruyama distribution wrapper.\n#' @param t <class 'inspect._empty'>\n#' @param sde_fn <class 'inspect._empty'>\n#' @param init_dist <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.eulermaruyama(t, sde_fn, init_dist, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "expandeddistribution": "#' @title ExpandedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param batch_shape ()\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.expandeddistribution(base_dist, batch_shape, shape, event, mask, create_obj, sample = TRUE)",
    "exponential": "#' @title Exponential distribution wrapper.\n#' @param rate 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.exponential(rate, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "foldeddistribution": "#' @title FoldedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.foldeddistribution(base_dist, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gamma": "#' @title Gamma distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param rate 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gamma(concentration, rate, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gammapoisson": "#' @title GammaPoisson distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param rate 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gammapoisson(concentration, rate, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gaussiancopula": "#' @title GaussianCopula distribution wrapper.\n#' @param marginal_dist <class 'inspect._empty'>\n#' @param correlation_matrix None\n#' @param correlation_cholesky None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gaussiancopula(marginal_dist, correlation_matrix, correlation_cholesky, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gaussiancopulabeta": "#' @title GaussianCopulaBeta distribution wrapper.\n#' @param concentration1 <class 'inspect._empty'>\n#' @param concentration0 <class 'inspect._empty'>\n#' @param correlation_matrix None\n#' @param correlation_cholesky None\n#' @param validate_args False\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gaussiancopulabeta(concentration1, concentration0, correlation_matrix, correlation_cholesky, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gaussianrandomwalk": "#' @title GaussianRandomWalk distribution wrapper.\n#' @param scale 1.0\n#' @param num_steps 1\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gaussianrandomwalk(scale, num_steps, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gaussianstatespace": "#' @title GaussianStateSpace distribution wrapper.\n#' @param num_steps <class 'inspect._empty'>\n#' @param transition_matrix <class 'inspect._empty'>\n#' @param covariance_matrix None\n#' @param precision_matrix None\n#' @param scale_tril None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gaussianstatespace(num_steps, transition_matrix, covariance_matrix, precision_matrix, scale_tril, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "geometric": "#' @title Geometric distribution wrapper.\n#' @param probs None\n#' @param logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.geometric(probs, logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "geometriclogits": "#' @title GeometricLogits distribution wrapper.\n#' @param logits <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.geometriclogits(logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "geometricprobs": "#' @title GeometricProbs distribution wrapper.\n#' @param probs <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.geometricprobs(probs, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gompertz": "#' @title Gompertz distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param rate 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gompertz(concentration, rate, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "gumbel": "#' @title Gumbel distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.gumbel(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "halfcauchy": "#' @title HalfCauchy distribution wrapper.\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.halfcauchy(scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "halfnormal": "#' @title HalfNormal distribution wrapper.\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.halfnormal(scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "improperuniform": "#' @title ImproperUniform distribution wrapper.\n#' @param support <class 'inspect._empty'>\n#' @param batch_shape <class 'inspect._empty'>\n#' @param event_shape <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.improperuniform(support, batch_shape, event_shape, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "independent": "#' @title Independent distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param reinterpreted_batch_ndims <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.independent(base_dist, reinterpreted_batch_ndims, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "inversegamma": "#' @title InverseGamma distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param rate 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.inversegamma(concentration, rate, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "kl_divergence": "#' @title kl_divergence distribution wrapper.\n#' @param args <class 'inspect._empty'>\n#' @param kwargs <class 'inspect._empty'>\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.kl_divergence(args, kwargs, shape, event, mask, create_obj, sample = TRUE)",
    "kumaraswamy": "#' @title Kumaraswamy distribution wrapper.\n#' @param concentration1 <class 'inspect._empty'>\n#' @param concentration0 <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.kumaraswamy(concentration1, concentration0, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "laplace": "#' @title Laplace distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.laplace(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "lefttruncateddistribution": "#' @title LeftTruncatedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param low 0.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.lefttruncateddistribution(base_dist, low, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "levy": "#' @title Levy distribution wrapper.\n#' @param loc <class 'inspect._empty'>\n#' @param scale <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.levy(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "lkj": "#' @title LKJ distribution wrapper.\n#' @param dimension <class 'inspect._empty'>\n#' @param concentration 1.0\n#' @param sample_method onion\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.lkj(dimension, concentration, sample_method, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "lkjcholesky": "#' @title LKJCholesky distribution wrapper.\n#' @param dimension <class 'inspect._empty'>\n#' @param concentration 1.0\n#' @param sample_method onion\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.lkjcholesky(dimension, concentration, sample_method, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "logistic": "#' @title Logistic distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.logistic(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "lognormal": "#' @title LogNormal distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.lognormal(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "loguniform": "#' @title LogUniform distribution wrapper.\n#' @param low <class 'inspect._empty'>\n#' @param high <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.loguniform(low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "lowertruncatedpowerlaw": "#' @title LowerTruncatedPowerLaw distribution wrapper.\n#' @param alpha <class 'inspect._empty'>\n#' @param low <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.lowertruncatedpowerlaw(alpha, low, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "lowrankmultivariatenormal": "#' @title LowRankMultivariateNormal distribution wrapper.\n#' @param loc <class 'inspect._empty'>\n#' @param cov_factor <class 'inspect._empty'>\n#' @param cov_diag <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.lowrankmultivariatenormal(loc, cov_factor, cov_diag, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "mask": null,
    "maskeddistribution": "#' @title MaskedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param mask <class 'inspect._empty'>\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.maskeddistribution(base_dist, mask, shape, event, mask, create_obj, sample = TRUE)",
    "matrixnormal": "#' @title MatrixNormal distribution wrapper.\n#' @param loc <class 'inspect._empty'>\n#' @param scale_tril_row <class 'inspect._empty'>\n#' @param scale_tril_column <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.matrixnormal(loc, scale_tril_row, scale_tril_column, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "mixture": "#' @title Mixture distribution wrapper.\n#' @param mixing_distribution <class 'inspect._empty'>\n#' @param component_distributions <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.mixture(mixing_distribution, component_distributions, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "mixturegeneral": "#' @title MixtureGeneral distribution wrapper.\n#' @param mixing_distribution <class 'inspect._empty'>\n#' @param component_distributions <class 'inspect._empty'>\n#' @param support None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.mixturegeneral(mixing_distribution, component_distributions, support, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "mixturesamefamily": "#' @title MixtureSameFamily distribution wrapper.\n#' @param mixing_distribution <class 'inspect._empty'>\n#' @param component_distribution <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.mixturesamefamily(mixing_distribution, component_distribution, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "multinomial": "#' @title Multinomial distribution wrapper.\n#' @param total_count 1\n#' @param probs None\n#' @param logits None\n#' @param total_count_max None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.multinomial(total_count, probs, logits, total_count_max, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "multinomiallogits": "#' @title MultinomialLogits distribution wrapper.\n#' @param logits <class 'inspect._empty'>\n#' @param total_count 1\n#' @param total_count_max None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.multinomiallogits(logits, total_count, total_count_max, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "multinomialprobs": "#' @title MultinomialProbs distribution wrapper.\n#' @param probs <class 'inspect._empty'>\n#' @param total_count 1\n#' @param total_count_max None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.multinomialprobs(probs, total_count, total_count_max, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "multivariatenormal": "#' @title MultivariateNormal distribution wrapper.\n#' @param loc 0.0\n#' @param covariance_matrix None\n#' @param precision_matrix None\n#' @param scale_tril None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.multivariatenormal(loc, covariance_matrix, precision_matrix, scale_tril, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "multivariatestudentt": "#' @title MultivariateStudentT distribution wrapper.\n#' @param df <class 'inspect._empty'>\n#' @param loc 0.0\n#' @param scale_tril None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.multivariatestudentt(df, loc, scale_tril, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "negativebinomial2": "#' @title NegativeBinomial2 distribution wrapper.\n#' @param mean <class 'inspect._empty'>\n#' @param concentration <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.negativebinomial2(mean, concentration, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "negativebinomiallogits": "#' @title NegativeBinomialLogits distribution wrapper.\n#' @param total_count <class 'inspect._empty'>\n#' @param logits <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.negativebinomiallogits(total_count, logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "negativebinomialprobs": "#' @title NegativeBinomialProbs distribution wrapper.\n#' @param total_count <class 'inspect._empty'>\n#' @param probs <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.negativebinomialprobs(total_count, probs, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "normal": "#' @title Normal distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.normal(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "orderedlogistic": "#' @title OrderedLogistic distribution wrapper.\n#' @param predictor <class 'inspect._empty'>\n#' @param cutpoints <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.orderedlogistic(predictor, cutpoints, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "pareto": "#' @title Pareto distribution wrapper.\n#' @param scale <class 'inspect._empty'>\n#' @param alpha <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.pareto(scale, alpha, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "plate": null,
    "poisson": "#' @title Poisson distribution wrapper.\n#' @param rate <class 'inspect._empty'>\n#' @param is_sparse False\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.poisson(rate, is_sparse, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "projectednormal": "#' @title ProjectedNormal distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.projectednormal(concentration, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "relaxedbernoulli": "#' @title RelaxedBernoulli distribution wrapper.\n#' @param temperature <class 'inspect._empty'>\n#' @param probs None\n#' @param logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.relaxedbernoulli(temperature, probs, logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "relaxedbernoullilogits": "#' @title RelaxedBernoulliLogits distribution wrapper.\n#' @param temperature <class 'inspect._empty'>\n#' @param logits <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.relaxedbernoullilogits(temperature, logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "righttruncateddistribution": "#' @title RightTruncatedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param high 0.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.righttruncateddistribution(base_dist, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "sinebivariatevonmises": "#' @title SineBivariateVonMises distribution wrapper.\n#' @param phi_loc <class 'inspect._empty'>\n#' @param psi_loc <class 'inspect._empty'>\n#' @param phi_concentration <class 'inspect._empty'>\n#' @param psi_concentration <class 'inspect._empty'>\n#' @param correlation None\n#' @param weighted_correlation None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.sinebivariatevonmises(phi_loc, psi_loc, phi_concentration, psi_concentration, correlation, weighted_correlation, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "softlaplace": "#' @title SoftLaplace distribution wrapper.\n#' @param loc <class 'inspect._empty'>\n#' @param scale <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.softlaplace(loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "studentt": "#' @title StudentT distribution wrapper.\n#' @param df <class 'inspect._empty'>\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.studentt(df, loc, scale, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "transformeddistribution": "#' @title TransformedDistribution distribution wrapper.\n#' @param base_distribution <class 'inspect._empty'>\n#' @param transforms <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.transformeddistribution(base_distribution, transforms, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "truncatedcauchy": "#' @title TruncatedCauchy distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param low None\n#' @param high None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.truncatedcauchy(loc, scale, low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "truncateddistribution": "#' @title TruncatedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param low None\n#' @param high None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.truncateddistribution(base_dist, low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "truncatednormal": "#' @title TruncatedNormal distribution wrapper.\n#' @param loc 0.0\n#' @param scale 1.0\n#' @param low None\n#' @param high None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.truncatednormal(loc, scale, low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "truncatedpolyagamma": "#' @title TruncatedPolyaGamma distribution wrapper.\n#' @param batch_shape ()\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.truncatedpolyagamma(batch_shape, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "twosidedtruncateddistribution": "#' @title TwoSidedTruncatedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param low 0.0\n#' @param high 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.twosidedtruncateddistribution(base_dist, low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "uniform": "#' @title Uniform distribution wrapper.\n#' @param low 0.0\n#' @param high 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.uniform(low, high, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "unit": "#' @title Unit distribution wrapper.\n#' @param log_factor <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.unit(log_factor, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "vonmises": "#' @title VonMises distribution wrapper.\n#' @param loc <class 'inspect._empty'>\n#' @param concentration <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.vonmises(loc, concentration, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "weibull": "#' @title Weibull distribution wrapper.\n#' @param scale <class 'inspect._empty'>\n#' @param concentration <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.weibull(scale, concentration, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "wishart": "#' @title Wishart distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param scale_matrix None\n#' @param rate_matrix None\n#' @param scale_tril None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.wishart(concentration, scale_matrix, rate_matrix, scale_tril, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "wishartcholesky": "#' @title WishartCholesky distribution wrapper.\n#' @param concentration <class 'inspect._empty'>\n#' @param scale_matrix None\n#' @param rate_matrix None\n#' @param scale_tril None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.wishartcholesky(concentration, scale_matrix, rate_matrix, scale_tril, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "zeroinflateddistribution": "#' @title ZeroInflatedDistribution distribution wrapper.\n#' @param base_dist <class 'inspect._empty'>\n#' @param gate None\n#' @param gate_logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.zeroinflateddistribution(base_dist, gate, gate_logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "zeroinflatednegativebinomial2": "#' @title ZeroInflatedNegativeBinomial2 distribution wrapper.\n#' @param mean <class 'inspect._empty'>\n#' @param concentration <class 'inspect._empty'>\n#' @param gate None\n#' @param gate_logits None\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.zeroinflatednegativebinomial2(mean, concentration, gate, gate_logits, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "zeroinflatedpoisson": "#' @title ZeroInflatedPoisson distribution wrapper.\n#' @param gate <class 'inspect._empty'>\n#' @param rate 1.0\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.zeroinflatedpoisson(gate, rate, validate_args, shape, event, mask, create_obj, sample = TRUE)",
    "zerosumnormal": "#' @title ZeroSumNormal distribution wrapper.\n#' @param scale <class 'inspect._empty'>\n#' @param event_shape <class 'inspect._empty'>\n#' @param validate_args None\n#' @param shape (tuple): A multi-purpose argument for shaping. - When sample=False (model building), this is used with `.expand(shape)` to set the distribution's batch shape. - When sample=True (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (jnp.ndarray, bool): Optional boolean array to mask observations. This is passed to the `infer={'obs_mask': ...}` argument of `numpyro.sample`.\n#' @param create_obj (bool): If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @examples\n#' bi.dist.zerosumnormal(scale, event_shape, validate_args, shape, event, mask, create_obj, sample = TRUE)"
}
