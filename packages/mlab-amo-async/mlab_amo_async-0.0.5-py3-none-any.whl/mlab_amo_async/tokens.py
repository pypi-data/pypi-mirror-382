import logging
import os
from datetime import datetime
from typing import Optional, Tuple
from motor.motor_asyncio import AsyncIOMotorClient

import jwt
import requests

from . import exceptions

logger = logging.getLogger(__name__)


class TokensStorage:
    def get_access_token(self) -> Optional[str]:
        pass

    def get_refresh_token(self) -> Optional[str]:
        pass

    def save_tokens(self, access_token: str, refresh_token: str):
        pass


class MongoTokensStorage(TokensStorage):
    """–•—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω—ã –≤ MongoDB."""

    def __init__(self, mongo_uri: str, db_name="medai"):
        self.client = AsyncIOMotorClient(mongo_uri)
        self.db = self.client[db_name]
        self.collection = self.db["tokens"]

    async def get_access_token(self, client_id: str) -> Optional[str]:
        token_data = await self.collection.find_one({"client_id": client_id})
        return token_data["access_token"] if token_data else None

    async def get_refresh_token(self, client_id: str) -> Optional[str]:
        token_data = await self.collection.find_one({"client_id": client_id})
        return token_data["refresh_token"] if token_data else None

    async def get_subdomain(self, client_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å subdomain –∏–∑ MongoDB."""
        token_data = await self.collection.find_one({"client_id": client_id})
        return token_data.get("subdomain") if token_data else None

    async def save_tokens(self, client_id: str, access_token: str, refresh_token: str, subdomain: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ subdomain –≤ MongoDB (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)."""
        print(f"üü¢ [MongoTokensStorage] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è {client_id} –≤ MongoDB...")

        update_data = {
            "access_token": access_token, 
            "refresh_token": refresh_token,
            "updated_at": datetime.utcnow()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º subdomain —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if subdomain:
            update_data["subdomain"] = subdomain

        try:
            result = await self.collection.update_one(
                {"client_id": client_id},
                {"$set": update_data},
                upsert=True  # –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            )

            if result.matched_count > 0:
                print(f"‚úÖ [MongoTokensStorage] –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            else:
                print(f"‚úÖ [MongoTokensStorage] –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞.")

        except Exception as e:
            print(f"üî¥ [MongoTokensStorage] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ MongoDB: {e}")


class TokenManager:
    def __init__(self, mongo_uri):
        self._client_id = None
        self._client_secret = None
        self.subdomain = None
        self._redirect_url = None
        self._storage = MongoTokensStorage(mongo_uri)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB

    def __call__(self, client_id: str, client_secret: str, subdomain: str, redirect_url: str):
        self._client_id = client_id
        self._client_secret = client_secret
        self._redirect_url = redirect_url
        self.subdomain = subdomain

    async def init(self, code, skip_error=False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB."""
        print(f"üü¢ [TokenManager] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è {self._client_id}...")

        data = {
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": self._redirect_url,
            "client_id": self._client_id,
            "client_secret": self._client_secret,
        }

        print(f"üü¢ [TokenManager] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")

        response = requests.post(f"https://{self.subdomain}.amocrm.ru/oauth2/access_token", json=data)

        print(f"üü¢ [TokenManager] HTTP —Å—Ç–∞—Ç—É—Å AmoCRM: {response.status_code}")
        print(f"üü¢ [TokenManager] –û—Ç–≤–µ—Ç AmoCRM: {response.text}")
        
        if response.status_code == 200:
            tokens_data = response.json()
            print(f"üü¢ [TokenManager] –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã: {tokens_data}")

            access_token = tokens_data.get("access_token")
            refresh_token = tokens_data.get("refresh_token")

            if access_token and refresh_token:
                print(f"üü¢ [TokenManager] –í—ã–∑—ã–≤–∞–µ–º save_tokens() –¥–ª—è {self._client_id}...")
                # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º subdomain –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                await self._storage.save_tokens(
                    self._client_id, 
                    access_token, 
                    refresh_token, 
                    self.subdomain  # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º subdomain –≤ MongoDB
                )
                print(f"‚úÖ [TokenManager] save_tokens() —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            else:
                print(f"üî¥ [TokenManager] –û—à–∏–±–∫–∞: –Ω–µ—Ç access_token –∏–ª–∏ refresh_token")

        else:
            print(f"üî¥ [TokenManager] –û—à–∏–±–∫–∞: {response.status_code} {response.text}")
            raise Exception(response.json().get("hint", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"))


    async def _get_new_tokens(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ refresh_token."""
        refresh_token = await self._storage.get_refresh_token(self._client_id)
        if not refresh_token:
            raise ValueError("Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ï—Å–ª–∏ subdomain –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, 
        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ MongoDB
        if not self.subdomain:
            self.subdomain = await self._storage.get_subdomain(self._client_id)
            if not self.subdomain:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å subdomain –¥–ª—è {self._client_id} –∏–∑ MongoDB")
        
        body = {
            "client_id": self._client_id,
            "client_secret": self._client_secret,
            "grant_type": "refresh_token",
            "refresh_token": refresh_token,
            "redirect_uri": self._redirect_url,
        }
        response = requests.post(f"https://{self.subdomain}.amocrm.ru/oauth2/access_token", json=body)
        if response.status_code == 200:
            data = response.json()
            await self._storage.save_tokens(self._client_id, data["access_token"], data["refresh_token"], self.subdomain)
            return data["access_token"]
        raise EnvironmentError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: {}".format(response.json()))

    async def get_access_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access_token (–æ–±–Ω–æ–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫)."""
        token = await self._storage.get_access_token(self._client_id)
        if not token:
            raise exceptions.NoToken("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –º–µ—Ç–æ–¥–æ–º 'init'")
        
        # –ï—Å–ª–∏ subdomain –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, 
        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ MongoDB
        if not self.subdomain:
            self.subdomain = await self._storage.get_subdomain(self._client_id)
        
        if self._is_expired(token):
            token = await self._get_new_tokens()
        return token

    async def get_subdomain(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ subdomain –∏–∑ MongoDB, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if self.subdomain:
            return self.subdomain
            
        # –ü–æ–ª—É—á–∞–µ–º subdomain –∏–∑ MongoDB
        subdomain = await self._storage.get_subdomain(self._client_id)
        if not subdomain:
            raise ValueError(f"Subdomain –¥–ª—è {self._client_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ MongoDB")
            
        return subdomain

    @staticmethod
    def _is_expired(token: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω."""
        token_data = jwt.decode(token, options={"verify_signature": False})
        exp = datetime.utcfromtimestamp(token_data["exp"])
        return datetime.utcnow() >= exp


# default_token_manager = TokenManager()
default_token_manager = TokenManager(mongo_uri="mongodb://localhost:27017")