import os
import time
import asyncio
import aiohttp
import aiofiles
from typing import Dict, Any, List, Optional
from . import tokens
from . async_interaction import (
    AsyncLeadsInteraction, 
    AsyncContactsInteraction,
    AsyncCompaniesInteraction, 
    AsyncTasksInteraction,
    AsyncGenericInteraction
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
class AsyncNotesInteraction(AsyncGenericInteraction):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏."""
    path = "notes"
    
    def __init__(self, token_manager, entity_type=None, entity_id=None):
        self.entity_type = entity_type
        self.entity_id = entity_id
        super().__init__(token_manager=token_manager)
    
    def _get_path(self):
        if self.entity_type and self.entity_id:
            return f"{self.entity_type}/{self.entity_id}/notes"
        return "notes"


class AsyncAmoCRMClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AmoCRM —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MongoDB."""
    
    def __init__(
        self, 
        client_id: str,
        client_secret: str,
        subdomain: str,
        redirect_url: str,
        mongo_uri: str = "mongodb://localhost:27017",
        db_name: str = "medai"
    ):
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ —Å MongoDB
        self.token_manager = tokens.TokenManager(mongo_uri=mongo_uri)
        self.token_manager(
            client_id=client_id,
            client_secret=client_secret,
            subdomain=subdomain,
            redirect_url=redirect_url
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API-–∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        self.leads = AsyncLeadsInteraction(token_manager=self.token_manager)
        self.contacts = AsyncContactsInteraction(token_manager=self.token_manager)
        self.companies = AsyncCompaniesInteraction(token_manager=self.token_manager)
        self.tasks = AsyncTasksInteraction(token_manager=self.token_manager)
    
    async def init_token(self, auth_code: str) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        await self.token_manager.init(code=auth_code, skip_error=False)
        print("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB")
    
    async def get_lead(self, lead_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ ID."""
        return await self.leads.get(lead_id)
    
    async def get_contact(self, contact_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ ID."""
        return await self.contacts.get(contact_id)

    async def get_contact_from_lead(self, lead_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ —Å–¥–µ–ª–∫–∏.
        
        :param lead_id: ID —Å–¥–µ–ª–∫–∏
        :return: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–æ —Å–¥–µ–ª–∫–æ–π
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫—É —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        lead = await self.leads.get(lead_id, include=["contacts"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É —Å–¥–µ–ª–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if "_embedded" in lead and "contacts" in lead["_embedded"]:
            contacts = lead["_embedded"]["contacts"]
            if contacts:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
                contact_id = contacts[0]["id"]
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                return await self.get_contact(contact_id)
        
        return None
    
    async def get_contact_notes(self, contact_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
        
        :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        :return: –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        """
        notes_client = AsyncNotesInteraction(
            token_manager=self.token_manager,
            entity_type="contacts",
            entity_id=contact_id
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            path = notes_client._get_path()
            url = await notes_client._get_url(path)
            print(f"üîç URL –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {url}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–º–µ—Ç–æ–∫
            notes_response, status_code = await notes_client.request(
                "get", 
                path, 
                params={"page": 1, "limit": 100}
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API notes: {status_code}")
            print(f"üìä –û–¢–õ–ê–î–ö–ê: –û—Ç–≤–µ—Ç API notes –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}: {notes_response}")
            
            if not notes_response or not isinstance(notes_response, dict):
                print(f"‚ùå –û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {notes_response}")
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if "_embedded" in notes_response and "notes" in notes_response["_embedded"]:
                notes = notes_response["_embedded"]["notes"]
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(notes)} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}")
                
                # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–µ
                for i, note in enumerate(notes):
                    note_type = note.get("note_type")
                    note_id = note.get("id")
                    created_at = note.get("created_at")
                    params = note.get("params", {})
                    
                    print(f"üìù –ó–∞–º–µ—Ç–∫–∞ #{i+1}: ID {note_id}, —Ç–∏–ø {note_type}, —Å–æ–∑–¥–∞–Ω–∞ {created_at}")
                    
                return notes
            else:
                print(f"‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–µ—Ç–æ–∫: {notes_response}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}: {e}")
            import traceback
            print(f"–°—Ç–µ–∫-—Ç—Ä–µ–π—Å: {traceback.format_exc()}")
            return []

    async def get_lead_notes(self, lead_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ —Å–¥–µ–ª–∫–∏.
        
        :param lead_id: ID —Å–¥–µ–ª–∫–∏
        :return: –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        """
        try:
            notes_client = AsyncNotesInteraction(
                token_manager=self.token_manager,
                entity_type="leads",
                entity_id=lead_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            path = notes_client._get_path()
            url = await notes_client._get_url(path)
            print(f"üîç URL –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–º–µ—Ç–æ–∫ —Å–¥–µ–ª–∫–∏: {url}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–º–µ—Ç–æ–∫
            notes_response, status_code = await notes_client.request(
                "get", 
                path, 
                params={"page": 1, "limit": 100}
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API notes –¥–ª—è —Å–¥–µ–ª–∫–∏: {status_code}")
            print(f"üìä –û–¢–õ–ê–î–ö–ê: –û—Ç–≤–µ—Ç API notes –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}: {notes_response}")
            
            if not notes_response or not isinstance(notes_response, dict):
                print(f"‚ùå –û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {notes_response}")
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if "_embedded" in notes_response and "notes" in notes_response["_embedded"]:
                notes = notes_response["_embedded"]["notes"]
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(notes)} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}")
                
                # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–µ
                for i, note in enumerate(notes):
                    note_type = note.get("note_type")
                    note_id = note.get("id")
                    created_at = note.get("created_at")
                    params = note.get("params", {})
                    
                    print(f"üìù –ó–∞–º–µ—Ç–∫–∞ #{i+1}: ID {note_id}, —Ç–∏–ø {note_type}, —Å–æ–∑–¥–∞–Ω–∞ {created_at}")
                    
                return notes
            else:
                print(f"‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–µ—Ç–æ–∫: {notes_response}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ —Å–¥–µ–ª–∫–∏ {lead_id}: {e}")
            import traceback
            print(f"–°—Ç–µ–∫-—Ç—Ä–µ–π—Å: {traceback.format_exc()}")
            return []
        
    async def get_note_by_id(self, note_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID.
        
        :param note_id: ID –∑–∞–º–µ—Ç–∫–∏
        :return: –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
            note_path = f"notes/{note_id}"
            note_response, status_code = await self.contacts.request("get", note_path)
            
            if status_code == 200:
                print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ {note_id} –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API-–∑–∞–ø—Ä–æ—Å")
                return note_response
            
            # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫
            print(f"‚ö†Ô∏è –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–º–µ—Ç–∫–∏ {note_id} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {status_code}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É ID
            search_path = "notes"
            search_params = {
                "filter[id]": note_id
            }
            
            search_response, search_status = await self.contacts.request(
                "get", 
                search_path, 
                params=search_params
            )
            
            if search_status == 200 and "_embedded" in search_response and "notes" in search_response["_embedded"]:
                notes = search_response["_embedded"]["notes"]
                if notes:
                    print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ {note_id} –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
                    return notes[0]
            
            print(f"‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ {note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ {note_id}: {e}")
            return None

    async def get_all_notes_types(self, entity_id: int, entity_type: str = "contacts") -> Dict[Any, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        
        :param entity_id: ID —Å—É—â–Ω–æ—Å—Ç–∏
        :param entity_type: –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ ("contacts" –∏–ª–∏ "leads")
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ –∑–∞–º–µ—Ç–æ–∫ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        """
        if entity_type == "contacts":
            notes = await self.get_contact_notes(entity_id)
        else:
            notes = await self.get_lead_notes(entity_id)
            
        note_types = {}
        
        for note in notes:
            note_type = note.get("note_type")
            if note_type in note_types:
                note_types[note_type] += 1
            else:
                note_types[note_type] = 1
                
        print(f"üìä –¢–∏–ø—ã –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è {entity_type} {entity_id}: {note_types}")
        return note_types

    async def get_call_links(self, contact_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
        
        :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å note_id –∏ call_link
        """
        try:
            notes = await self.get_contact_notes(contact_id)
            
            if not notes:
                print(f"‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(notes)} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            await self.get_all_notes_types(contact_id)
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            account_id = None
            user_id = None
            
            # –ò—â–µ–º account_id –∏ user_id –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
            for note in notes:
                if not account_id and "account_id" in note:
                    account_id = note["account_id"]
                    print(f"üìä –ù–∞–π–¥–µ–Ω account_id: {account_id}")
                
                if not user_id and "created_by" in note:
                    user_id = note["created_by"]
                    print(f"üìä –ù–∞–π–¥–µ–Ω user_id: {user_id}")
                
                if account_id and user_id:
                    break
            
            # –†–ê–°–®–ò–†–Ø–ï–ú –õ–û–ì–ò–ö–£ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–ê–ú–ï–¢–û–ö –û –ó–í–û–ù–ö–ê–•
            call_notes = []
            for note in notes:
                note_type = note.get("note_type")
                params = note.get("params", {})
                note_id = note.get("id")
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏
                is_call_note = False
                
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
                if isinstance(note_type, int) and note_type in [10, 11, 12, 13, 14, 15]:
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É {note_type}")
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É
                elif isinstance(note_type, str) and any(keyword in note_type.lower() for keyword in ["call", "–∑–≤–æ–Ω–æ–∫", "–∑–∞–ø–∏—Å—å", "–∞—É–¥–∏–æ", "voice", "—Ç–µ–ª–µ—Ñ–æ–Ω"]):
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É {note_type}")
                
                # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–º–µ—Ç–∫–∏
                elif params and (
                    "link" in params or 
                    "duration" in params or 
                    "phone" in params or
                    "call" in str(params).lower() or
                    "–∑–∞–ø–∏—Å—å" in str(params).lower() or
                    "mango" in str(params).lower()
                ):
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
                
                # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
                elif "text" in note and note["text"] and any(keyword in note["text"].lower() for keyword in ["–∑–≤–æ–Ω–æ–∫", "–ø–æ–∑–≤–æ–Ω–∏–ª", "call", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∑–∞–ø–∏—Å—å"]):
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ —Ç–µ–∫—Å—Ç—É")
                    
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ª—é–±–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å mango –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                elif "mango" in str(note).lower():
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –∏–∑-–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è mango")
                
                # –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                if is_call_note:
                    call_notes.append(note)
                else:
                    print(f"üîç –ó–∞–º–µ—Ç–∫–∞ {note_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–≤–æ–Ω–∫–æ–º, —Ç–∏–ø: {note_type}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –æ –∑–≤–æ–Ω–∫–µ
            if not call_notes:
                print(f"‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∏ –æ –∑–≤–æ–Ω–∫–∞—Ö –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                return []
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ - —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
            call_notes.sort(key=lambda note: note.get("created_at", 0), reverse=True)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(call_notes)} –∑–∞–º–µ—Ç–æ–∫ –æ –∑–≤–æ–Ω–∫–∞—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –æ –∑–≤–æ–Ω–∫–∞—Ö
            call_links = []
            for i, note in enumerate(call_notes):
                print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ –∑–≤–æ–Ω–∫–µ #{i+1}/{len(call_notes)}: ID {note.get('id')}, —Å–æ–∑–¥–∞–Ω–∞ {note.get('created_at')}")
                
                note_id = note.get('id')
                params = note.get("params", {})
                
                # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –°–°–´–õ–ö–ò
                
                # 1. –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                call_link = None
                if params and "link" in params and params["link"]:
                    call_link = params["link"]
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–µ {note_id}: {call_link}")
                
                # 2. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
                if not call_link and isinstance(params, dict):
                    call_link = self._find_link_in_dict(params)
                    if call_link:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                
                # 3. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ—Ç–∫–∏
                if not call_link and "text" in note and note["text"]:
                    import re
                    url_pattern = r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'
                    urls = re.findall(url_pattern, note["text"])
                    for url in urls:
                        if "mango" in url or "call" in url or "record" in url or "audio" in url:
                            call_link = url
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                            break
                
                # 4. –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞–º–µ—Ç–∫–∏
                if not call_link:
                    call_link = self._find_link_in_dict(note, max_depth=5, current_depth=0)
                    if call_link:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                
                # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è URL –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏
                if not call_link:
                    str_note = str(note)
                    import re
                    url_pattern = r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'
                    urls = re.findall(url_pattern, str_note)
                    for url in urls:
                        # –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–º–µ—Ç–æ–∫ AmoCRM (–Ω–µ –∞—É–¥–∏–æ)
                        if "/api/v4/contacts/" in url and "/notes/" in url:
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ –∞—É–¥–∏–æ): {url[:80]}")
                            continue
                        
                        if "mango" in url or "amocrm" in url or ".mp3" in url:
                            call_link = url
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                            break
                
                # 6. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É –∏–∑ –∑–∞–º–µ—Ç–∫–∏ mangocall
                if not call_link and "service" in note and note["service"] in ["mangocall", "mango", "mangooffice"]:
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏
                    if account_id and "id" in note and "created_at" in note:
                        note_id_str = str(note["id"])
                        created_at_str = str(note["created_at"])
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ mango
                        call_link = f"https://amocrm.mango-office.ru/download/{account_id}/{note_id_str}_{created_at_str}/call.mp3"
                        print(f"üîß –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å
                if call_link:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                    if account_id and user_id and "userId" not in call_link:
                        if "?" in call_link:
                            call_link += f"&userId={user_id}&accountId={account_id}"
                        else:
                            call_link += f"?userId={user_id}&accountId={account_id}"
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫ —Å—Å—ã–ª–∫–µ: {call_link}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    if "download=" not in call_link:
                        call_link += "&download=true" if "?" in call_link else "?download=true"
                    
                    call_links.append({
                        "note_id": note_id,
                        "call_link": call_link,
                        "created_at": note.get("created_at"),
                        "note": note  # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    })
            
            print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤: {len(call_links)}")
            return call_links
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤: {e}")
            import traceback
            print(f"–°—Ç–µ–∫-—Ç—Ä–µ–π—Å: {traceback.format_exc()}")
            return []

    async def get_call_links_from_lead(self, lead_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ —Å–¥–µ–ª–∫–∏.
        
        :param lead_id: ID —Å–¥–µ–ª–∫–∏
        :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å note_id –∏ call_link
        """
        try:
            notes = await self.get_lead_notes(lead_id)
            
            if not notes:
                print(f"‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(notes)} –∑–∞–º–µ—Ç–æ–∫ —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            await self.get_all_notes_types(lead_id, "leads")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            account_id = None
            user_id = None
            
            # –ò—â–µ–º account_id –∏ user_id –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
            for note in notes:
                if not account_id and "account_id" in note:
                    account_id = note["account_id"]
                    print(f"üìä –ù–∞–π–¥–µ–Ω account_id: {account_id}")
                
                if not user_id and "created_by" in note:
                    user_id = note["created_by"]
                    print(f"üìä –ù–∞–π–¥–µ–Ω user_id: {user_id}")
                
                if account_id and user_id:
                    break
            
            # –†–ê–°–®–ò–†–Ø–ï–ú –õ–û–ì–ò–ö–£ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–ê–ú–ï–¢–û–ö –û –ó–í–û–ù–ö–ê–•
            call_notes = []
            for note in notes:
                note_type = note.get("note_type")
                params = note.get("params", {})
                note_id = note.get("id")
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏
                is_call_note = False
                
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
                if isinstance(note_type, int) and note_type in [10, 11, 12, 13, 14, 15]:
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É {note_type}")
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É
                elif isinstance(note_type, str) and any(keyword in note_type.lower() for keyword in ["call", "–∑–≤–æ–Ω–æ–∫", "–∑–∞–ø–∏—Å—å", "–∞—É–¥–∏–æ", "voice", "—Ç–µ–ª–µ—Ñ–æ–Ω"]):
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É {note_type}")
                
                # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–º–µ—Ç–∫–∏
                elif params and (
                    "link" in params or 
                    "duration" in params or 
                    "phone" in params or
                    "call" in str(params).lower() or
                    "–∑–∞–ø–∏—Å—å" in str(params).lower() or
                    "mango" in str(params).lower()
                ):
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
                
                # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
                elif "text" in note and note["text"] and any(keyword in note["text"].lower() for keyword in ["–∑–≤–æ–Ω–æ–∫", "–ø–æ–∑–≤–æ–Ω–∏–ª", "call", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∑–∞–ø–∏—Å—å"]):
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –ø–æ —Ç–µ–∫—Å—Ç—É")
                    
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ª—é–±–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å mango –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                elif "mango" in str(note).lower():
                    is_call_note = True
                    print(f"üìû –ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –∏–∑-–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è mango")
                
                # –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                if is_call_note:
                    call_notes.append(note)
                else:
                    print(f"üîç –ó–∞–º–µ—Ç–∫–∞ {note_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–≤–æ–Ω–∫–æ–º, —Ç–∏–ø: {note_type}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –æ –∑–≤–æ–Ω–∫–µ
            if not call_notes:
                print(f"‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∏ –æ –∑–≤–æ–Ω–∫–∞—Ö –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                return []
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ - —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
            call_notes.sort(key=lambda note: note.get("created_at", 0), reverse=True)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(call_notes)} –∑–∞–º–µ—Ç–æ–∫ –æ –∑–≤–æ–Ω–∫–∞—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –æ –∑–≤–æ–Ω–∫–∞—Ö
            call_links = []
            for i, note in enumerate(call_notes):
                print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ –∑–≤–æ–Ω–∫–µ #{i+1}/{len(call_notes)}: ID {note.get('id')}, —Å–æ–∑–¥–∞–Ω–∞ {note.get('created_at')}")
                
                note_id = note.get('id')
                params = note.get("params", {})
                
                # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –°–°–´–õ–ö–ò
                
                # 1. –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                call_link = None
                if params and "link" in params and params["link"]:
                    call_link = params["link"]
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–µ {note_id}: {call_link}")
                
                # 2. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
                if not call_link and isinstance(params, dict):
                    call_link = self._find_link_in_dict(params)
                    if call_link:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                
                # 3. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ—Ç–∫–∏
                if not call_link and "text" in note and note["text"]:
                    import re
                    url_pattern = r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'
                    urls = re.findall(url_pattern, note["text"])
                    for url in urls:
                        if "mango" in url or "call" in url or "record" in url or "audio" in url:
                            call_link = url
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                            break
                
                # 4. –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞–º–µ—Ç–∫–∏
                if not call_link:
                    call_link = self._find_link_in_dict(note, max_depth=5, current_depth=0)
                    if call_link:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                
                # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è URL –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏
                if not call_link:
                    str_note = str(note)
                    import re
                    url_pattern = r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'
                    urls = re.findall(url_pattern, str_note)
                    for url in urls:
                        # –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–º–µ—Ç–æ–∫ AmoCRM (–Ω–µ –∞—É–¥–∏–æ)
                        if "/api/v4/contacts/" in url and "/notes/" in url:
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ –∞—É–¥–∏–æ): {url[:80]}")
                            continue
                        
                        if "mango" in url or "amocrm" in url or ".mp3" in url:
                            call_link = url
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                            break
                
                # 6. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É –∏–∑ –∑–∞–º–µ—Ç–∫–∏ mangocall
                if not call_link and "service" in note and note["service"] in ["mangocall", "mango", "mangooffice"]:
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏
                    if account_id and "id" in note and "created_at" in note:
                        note_id_str = str(note["id"])
                        created_at_str = str(note["created_at"])
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ mango
                        call_link = f"https://amocrm.mango-office.ru/download/{account_id}/{note_id_str}_{created_at_str}/call.mp3"
                        print(f"üîß –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note_id}: {call_link}")
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å
                if call_link:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                    if account_id and user_id and "userId" not in call_link:
                        if "?" in call_link:
                            call_link += f"&userId={user_id}&accountId={account_id}"
                        else:
                            call_link += f"?userId={user_id}&accountId={account_id}"
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫ —Å—Å—ã–ª–∫–µ: {call_link}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    if "download=" not in call_link:
                        call_link += "&download=true" if "?" in call_link else "?download=true"
                    
                    call_links.append({
                        "note_id": note_id,
                        "call_link": call_link,
                        "created_at": note.get("created_at"),
                        "note": note  # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    })
            
            print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤: {len(call_links)}")
            return call_links
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤: {e}")
            import traceback
            print(f"–°—Ç–µ–∫-—Ç—Ä–µ–π—Å: {traceback.format_exc()}")
            return []
        
    def _find_link_in_dict(self, data: Dict[str, Any], max_depth: int = 3, current_depth: int = 0) -> Optional[str]:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –ø–æ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞.
        
        :param data: –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞
        :param max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
        :param current_depth: –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
        :return: –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ None
        """
        if current_depth > max_depth or not isinstance(data, dict):
            return None
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Å—Å—ã–ª–∫—É
        link_field_names = [
            "link", "recording_url", "url", "file", "audio", "record", "href", 
            "src", "source", "mp3", "wav", "recording", "–∑–∞–ø–∏—Å—å", "voice", "sound",
            "download", "media", "call", "–∑–≤–æ–Ω–æ–∫", "—Ç–µ–ª–µ—Ñ–æ–Ω", "phone"
        ]
        
        for key, value in data.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å–æ —Å—Å—ã–ª–∫–æ–π
            if (key == 'link' or 
                key == 'url' or 
                key == 'href' or 
                key == 'src' or
                key == 'download_url') and value is not None:
                if isinstance(value, str) and value.strip() != "" and ("http" in value or value.endswith(".mp3")):
                    print(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –ø–æ–ª–µ '{key}': {value}")
                    return value
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª—é—á –æ–¥–Ω–æ –∏–∑ –∏—Å–∫–æ–º—ã—Ö —Å–ª–æ–≤
            if any(link_name in key.lower() for link_name in link_field_names):
                if isinstance(value, str) and value.strip() != "" and ("http" in value or value.endswith(".mp3")):
                    print(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –ø–æ–ª–µ '{key}': {value}")
                    return value
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ URL –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
            if isinstance(value, str) and "http" in value and (".mp3" in value or "mango" in value or "amocrm" in value):
                print(f"üìä –ù–∞–π–¥–µ–Ω URL –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª—è '{key}': {value}")
                return value
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
            if isinstance(value, dict):
                link = self._find_link_in_dict(value, max_depth, current_depth + 1)
                if link:
                    return link
                    
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
            elif isinstance(value, list):
                for item in value:
                    if isinstance(item, dict):
                        link = self._find_link_in_dict(item, max_depth, current_depth + 1)
                        if link:
                            return link
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
                    elif isinstance(item, str) and "http" in item and (".mp3" in item or "mango" in item or "amocrm" in item):
                        print(f"üìä –ù–∞–π–¥–µ–Ω URL –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—è '{key}': {item}")
                        return item
        
        return None

    def _is_valid_audio_file(self, data: bytes, content_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º.
        
        :param data: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        :param content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        :return: True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª
        """
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content_type and any(mime in content_type.lower() for mime in [
            'audio/', 'application/octet-stream', 'application/binary'
        ]):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã)
            if len(data) > 1000:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç (—á—Ç–æ —É–∫–∞–∑—ã–≤–∞–ª–æ –±—ã –Ω–∞ –æ—à–∏–±–∫—É)
        if (data.startswith(b'<!DOCTYPE') or 
            data.startswith(b'<html') or 
            content_type.startswith('text/html')):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        # MP3 —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: 'ID3' –∏–ª–∏ 0xFF 0xFB
        if (data.startswith(b'ID3') or 
            (len(data) > 2 and data[0] == 0xFF and (data[1] == 0xFB or data[1] == 0xFA))):
            return True
        
        # WAV —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: 'RIFF'
        if data.startswith(b'RIFF'):
            return True
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –∏ –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ HTML
        if len(data) > 10000 and not data.startswith(b'<!DOCTYPE') and not data.startswith(b'<html'):
            return True
        
        return False

    async def download_call_recording(self, contact_id: int, save_dir: str = "audio", note_id: Optional[int] = None, max_retries: int = 3) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª.
        
        :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        :param save_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        :param note_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        :return: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(save_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∏
        call_links = await self.get_call_links(contact_id)
        
        if not call_links:
            print(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∑–∞–º–µ—Ç–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –∑–∞–º–µ—Ç–∫—É
        if note_id:
            call_links = [link for link in call_links if link.get("note_id") == note_id]
            if not call_links:
                print(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É, –ø–æ–∫–∞ –æ–¥–Ω–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        print(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å {len(call_links)} –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤")
        
        for link_info in call_links:
            call_link = link_info["call_link"]
            current_note_id = link_info["note_id"]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"{contact_id}_{current_note_id}_call.mp3"
            save_path = os.path.join(save_dir, filename)
            
            print(f"üîÑ –°–∫–∞—á–∏–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∏–∑ –∑–∞–º–µ—Ç–∫–∏ {current_note_id} –≤ {save_path}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å–ª—É—á–∞–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—à–∏–±–æ–∫
            for attempt in range(max_retries):
                try:
                    # –°–æ–∑–¥–∞–µ–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                    import ssl
                    ssl_context = ssl.create_default_context()
                    ssl_context.check_hostname = False
                    ssl_context.verify_mode = ssl.CERT_NONE
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                    headers = {
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                        "Accept": "audio/webm,audio/ogg,audio/wav,audio/*;q=0.9,application/ogg;q=0.7,video/*;q=0.6,*/*;q=0.5",
                        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                        "Referer": "https://amocrm.mango-office.ru/",
                        "Origin": "https://amocrm.mango-office.ru",
                        "Sec-Fetch-Dest": "audio",
                        "Sec-Fetch-Mode": "no-cors",
                        "Sec-Fetch-Site": "same-origin"
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä download, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if "download=" not in call_link:
                        separator = "&" if "?" in call_link else "?"
                        call_link += f"{separator}download=true"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    call_link += f"&_ts={int(time.time())}"
                    
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} - –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ: {call_link}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ClientSession —Å cookies
                    connector = aiohttp.TCPConnector(ssl=ssl_context)
                    async with aiohttp.ClientSession(
                        connector=connector, 
                        headers=headers,
                        cookie_jar=aiohttp.CookieJar()
                    ) as session:
                        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies
                        async with session.get("https://amocrm.mango-office.ru/") as init_response:
                            print(f"üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏: HTTP {init_response.status}")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        async with session.get(call_link, allow_redirects=True) as response:
                            status = response.status
                            content_type = response.headers.get("Content-Type", "")
                            content_length = response.headers.get("Content-Length", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            
                            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")
                            print(f"üì° –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
                            print(f"üì° –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_length}")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                            if status in (301, 302, 303, 307, 308):
                                redirect_url = response.headers.get("Location")
                                print(f"üì° –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {redirect_url}")
                                
                                if redirect_url:
                                    async with session.get(redirect_url, allow_redirects=True) as redirect_response:
                                        data = await redirect_response.read()
                                        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
                                        
                                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                                        if self._is_valid_audio_file(data, content_type):
                                            async with aiofiles.open(save_path, 'wb') as f:
                                                await f.write(data)
                                            
                                            print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {save_path}")
                                            return save_path
                                        else:
                                            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                            if status == 200:
                                data = await response.read()
                                content_size = len(data)
                                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {content_size} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö")
                                
                                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                                if self._is_valid_audio_file(data, content_type):
                                    async with aiofiles.open(save_path, 'wb') as f:
                                        await f.write(data)
                                    
                                    print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
                                    return save_path
                                else:
                                    print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω HTML –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –∞—É–¥–∏–æ")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                    debug_path = os.path.join(save_dir, f"{contact_id}_{current_note_id}_error_{attempt}.html")
                                    async with aiofiles.open(debug_path, 'wb') as f:
                                        await f.write(data)
                                    
                                    print(f"‚ö†Ô∏è –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {debug_path}")
                            else:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: HTTP {status}")
                    
                    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, —Ç–æ –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {current_note_id}")
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if attempt < max_retries - 1:
                        await asyncio.sleep(1 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–º–µ—Ç–∫–∏ {current_note_id}: {e}")
                    import traceback
                    print(f"–°—Ç–µ–∫-—Ç—Ä–µ–π—Å: {traceback.format_exc()}")
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if attempt < max_retries - 1:
                        await asyncio.sleep(1 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}")
        return None

    async def download_call_recording_from_lead(self, lead_id: int, save_dir: str = "audio", note_id: Optional[int] = None, max_retries: int = 3) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞ –∏–∑ —Å–¥–µ–ª–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª.
        
        :param lead_id: ID —Å–¥–µ–ª–∫–∏
        :param save_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        :param note_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        :return: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(save_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∏
        call_links = await self.get_call_links_from_lead(lead_id)
        
        if not call_links:
            print(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∑–∞–º–µ—Ç–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –∑–∞–º–µ—Ç–∫—É
        if note_id:
            call_links = [link for link in call_links if link.get("note_id") == note_id]
            if not call_links:
                print(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É, –ø–æ–∫–∞ –æ–¥–Ω–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        print(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å {len(call_links)} –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤")
        
        for link_info in call_links:
            call_link = link_info["call_link"]
            current_note_id = link_info["note_id"]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"lead_{lead_id}_note_{current_note_id}_call.mp3"
            save_path = os.path.join(save_dir, filename)
            
            print(f"üîÑ –°–∫–∞—á–∏–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∏–∑ –∑–∞–º–µ—Ç–∫–∏ {current_note_id} –≤ {save_path}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å–ª—É—á–∞–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—à–∏–±–æ–∫
            for attempt in range(max_retries):
                try:
                    # –°–æ–∑–¥–∞–µ–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                    import ssl
                    ssl_context = ssl.create_default_context()
                    ssl_context.check_hostname = False
                    ssl_context.verify_mode = ssl.CERT_NONE
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                    headers = {
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                        "Accept": "audio/webm,audio/ogg,audio/wav,audio/*;q=0.9,application/ogg;q=0.7,video/*;q=0.6,*/*;q=0.5",
                        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                        "Referer": "https://amocrm.mango-office.ru/",
                        "Origin": "https://amocrm.mango-office.ru",
                        "Sec-Fetch-Dest": "audio",
                        "Sec-Fetch-Mode": "no-cors",
                        "Sec-Fetch-Site": "same-origin"
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä download, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if "download=" not in call_link:
                        separator = "&" if "?" in call_link else "?"
                        call_link += f"{separator}download=true"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    call_link += f"&_ts={int(time.time())}"
                    
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} - –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ: {call_link}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ClientSession —Å cookies
                    connector = aiohttp.TCPConnector(ssl=ssl_context)
                    async with aiohttp.ClientSession(
                        connector=connector, 
                        headers=headers,
                        cookie_jar=aiohttp.CookieJar()
                    ) as session:
                        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies
                        async with session.get("https://amocrm.mango-office.ru/") as init_response:
                            print(f"üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏: HTTP {init_response.status}")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        async with session.get(call_link, allow_redirects=True) as response:
                            status = response.status
                            content_type = response.headers.get("Content-Type", "")
                            content_length = response.headers.get("Content-Length", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            
                            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")
                            print(f"üì° –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
                            print(f"üì° –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_length}")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                            if status in (301, 302, 303, 307, 308):
                                redirect_url = response.headers.get("Location")
                                print(f"üì° –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {redirect_url}")
                                
                                if redirect_url:
                                    async with session.get(redirect_url, allow_redirects=True) as redirect_response:
                                        data = await redirect_response.read()
                                        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
                                        
                                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                                        if self._is_valid_audio_file(data, content_type):
                                            async with aiofiles.open(save_path, 'wb') as f:
                                                await f.write(data)
                                            
                                            print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {save_path}")
                                            return save_path
                                        else:
                                            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                            if status == 200:
                                data = await response.read()
                                content_size = len(data)
                                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {content_size} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö")
                                
                                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                                if self._is_valid_audio_file(data, content_type):
                                    async with aiofiles.open(save_path, 'wb') as f:
                                        await f.write(data)
                                    
                                    print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
                                    return save_path
                                else:
                                    print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω HTML –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –∞—É–¥–∏–æ")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                    debug_path = os.path.join(save_dir, f"lead_{lead_id}_note_{current_note_id}_error_{attempt}.html")
                                    async with aiofiles.open(debug_path, 'wb') as f:
                                        await f.write(data)
                                    
                                    print(f"‚ö†Ô∏è –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {debug_path}")
                            else:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: HTTP {status}")
                    
                    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, —Ç–æ –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ {current_note_id}")
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if attempt < max_retries - 1:
                        await asyncio.sleep(1 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–º–µ—Ç–∫–∏ {current_note_id}: {e}")
                    import traceback
                    print(f"–°—Ç–µ–∫-—Ç—Ä–µ–π—Å: {traceback.format_exc()}")
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if attempt < max_retries - 1:
                        await asyncio.sleep(1 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}")
        return None
        
    async def get_call_link(self, contact_id: int) -> Optional[str]:
        """
        –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
        –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        
        :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        :return: –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ None
        """
        call_links = await self.get_call_links(contact_id)
        if call_links:
            return call_links[0]["call_link"]
        return None
    
    async def create_lead(self, lead_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏."""
        return await self.leads.create(lead_data)
    
    async def update_lead(self, lead_id: int, lead_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏."""
        return await self.leads.update(lead_id, lead_data)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pass