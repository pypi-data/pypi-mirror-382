Metadata-Version: 2.1
Name: lakehouse-engine
Version: 1.27.1
Summary: A configuration-driven Spark framework serving as the engine for several lakehouse algorithms and data flows.
Author-email: Adidas Lakehouse Foundations Team <software.engineering@adidas.com>
License: Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright 2023 adidas AG
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Repository, https://github.com/adidas/lakehouse-engine
Project-URL: Documentation, https://adidas.github.io/lakehouse-engine-docs/index.html
Project-URL: Issues, https://github.com/adidas/lakehouse-engine/issues
Project-URL: Releases, https://github.com/adidas/lakehouse-engine/releases
Keywords: framework,big-data,spark,databricks,data-quality,data-engineering,great-expectations,lakehouse,delta-lake,configuration-driver
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 3
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Other Audience
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: boto3 ==1.40.23
Requires-Dist: botocore ==1.40.23
Requires-Dist: jinja2 ==3.1.6
Requires-Dist: jmespath ==1.0.1
Requires-Dist: markupsafe ==3.0.2
Requires-Dist: pendulum ==3.0.0
Requires-Dist: python-dateutil ==2.9.0.post0
Requires-Dist: pyyaml ==6.0.1
Requires-Dist: s3transfer ==0.13.1
Requires-Dist: six ==1.17.0
Requires-Dist: time-machine ==2.19.0
Requires-Dist: tzdata ==2025.2
Requires-Dist: urllib3 ==2.5.0
Provides-Extra: azure
Requires-Dist: aiohappyeyeballs ==2.6.1 ; extra == 'azure'
Requires-Dist: aiohttp ==3.12.14 ; extra == 'azure'
Requires-Dist: aiosignal ==1.4.0 ; extra == 'azure'
Requires-Dist: anyio ==4.9.0 ; extra == 'azure'
Requires-Dist: attrs ==25.3.0 ; extra == 'azure'
Requires-Dist: azure-core ==1.34.0 ; extra == 'azure'
Requires-Dist: azure-identity ==1.23.0 ; extra == 'azure'
Requires-Dist: certifi ==2025.4.26 ; extra == 'azure'
Requires-Dist: cffi ==1.17.1 ; extra == 'azure'
Requires-Dist: charset-normalizer ==3.4.2 ; extra == 'azure'
Requires-Dist: cryptography ==45.0.3 ; extra == 'azure'
Requires-Dist: frozenlist ==1.6.2 ; extra == 'azure'
Requires-Dist: h11 ==0.16.0 ; extra == 'azure'
Requires-Dist: h2 ==4.3.0 ; extra == 'azure'
Requires-Dist: hpack ==4.1.0 ; extra == 'azure'
Requires-Dist: httpcore ==1.0.9 ; extra == 'azure'
Requires-Dist: httpx[http2] ==0.28.1 ; extra == 'azure'
Requires-Dist: hyperframe ==6.1.0 ; extra == 'azure'
Requires-Dist: idna ==3.10 ; extra == 'azure'
Requires-Dist: importlib-metadata ==8.7.0 ; extra == 'azure'
Requires-Dist: microsoft-kiota-abstractions ==1.9.3 ; extra == 'azure'
Requires-Dist: microsoft-kiota-authentication-azure ==1.9.3 ; extra == 'azure'
Requires-Dist: microsoft-kiota-http ==1.9.3 ; extra == 'azure'
Requires-Dist: microsoft-kiota-serialization-form ==1.9.3 ; extra == 'azure'
Requires-Dist: microsoft-kiota-serialization-json ==1.9.3 ; extra == 'azure'
Requires-Dist: microsoft-kiota-serialization-multipart ==1.9.3 ; extra == 'azure'
Requires-Dist: microsoft-kiota-serialization-text ==1.9.3 ; extra == 'azure'
Requires-Dist: msal ==1.33.0 ; extra == 'azure'
Requires-Dist: msal-extensions ==1.3.1 ; extra == 'azure'
Requires-Dist: msgraph-core ==1.3.4 ; extra == 'azure'
Requires-Dist: msgraph-sdk ==1.40.0 ; extra == 'azure'
Requires-Dist: multidict ==6.4.4 ; extra == 'azure'
Requires-Dist: nest-asyncio ==1.6.0 ; extra == 'azure'
Requires-Dist: opentelemetry-api ==1.34.0 ; extra == 'azure'
Requires-Dist: opentelemetry-sdk ==1.34.0 ; extra == 'azure'
Requires-Dist: opentelemetry-semantic-conventions ==0.55b0 ; extra == 'azure'
Requires-Dist: propcache ==0.3.1 ; extra == 'azure'
Requires-Dist: pycparser ==2.22 ; extra == 'azure'
Requires-Dist: pyjwt[crypto] ==2.10.1 ; extra == 'azure'
Requires-Dist: requests ==2.32.4 ; extra == 'azure'
Requires-Dist: six ==1.17.0 ; extra == 'azure'
Requires-Dist: sniffio ==1.3.1 ; extra == 'azure'
Requires-Dist: std-uritemplate ==2.0.5 ; extra == 'azure'
Requires-Dist: typing-extensions ==4.14.0 ; extra == 'azure'
Requires-Dist: urllib3 ==2.5.0 ; extra == 'azure'
Requires-Dist: yarl ==1.20.0 ; extra == 'azure'
Requires-Dist: zipp ==3.22.0 ; extra == 'azure'
Provides-Extra: dq
Requires-Dist: altair ==4.2.2 ; extra == 'dq'
Requires-Dist: annotated-types ==0.7.0 ; extra == 'dq'
Requires-Dist: attrs ==25.3.0 ; extra == 'dq'
Requires-Dist: backoff ==2.2.1 ; extra == 'dq'
Requires-Dist: certifi ==2025.4.26 ; extra == 'dq'
Requires-Dist: cffi ==1.17.1 ; extra == 'dq'
Requires-Dist: charset-normalizer ==3.4.2 ; extra == 'dq'
Requires-Dist: cryptography ==45.0.3 ; extra == 'dq'
Requires-Dist: distro ==1.9.0 ; extra == 'dq'
Requires-Dist: entrypoints ==0.4 ; extra == 'dq'
Requires-Dist: great-expectations ==1.5.11 ; extra == 'dq'
Requires-Dist: idna ==3.10 ; extra == 'dq'
Requires-Dist: jinja2 ==3.1.6 ; extra == 'dq'
Requires-Dist: jsonschema ==4.24.0 ; extra == 'dq'
Requires-Dist: jsonschema-specifications ==2025.4.1 ; extra == 'dq'
Requires-Dist: markupsafe ==3.0.2 ; extra == 'dq'
Requires-Dist: marshmallow ==3.26.1 ; extra == 'dq'
Requires-Dist: mistune ==3.1.3 ; extra == 'dq'
Requires-Dist: monotonic ==1.6 ; extra == 'dq'
Requires-Dist: numpy ==1.26.4 ; extra == 'dq'
Requires-Dist: packaging ==25.0 ; extra == 'dq'
Requires-Dist: pandas ==2.1.4 ; extra == 'dq'
Requires-Dist: posthog ==3.25.0 ; extra == 'dq'
Requires-Dist: pycparser ==2.22 ; extra == 'dq'
Requires-Dist: pydantic ==2.11.5 ; extra == 'dq'
Requires-Dist: pydantic-core ==2.33.2 ; extra == 'dq'
Requires-Dist: pyparsing ==3.2.3 ; extra == 'dq'
Requires-Dist: python-dateutil ==2.9.0.post0 ; extra == 'dq'
Requires-Dist: pytz ==2025.2 ; extra == 'dq'
Requires-Dist: referencing ==0.36.2 ; extra == 'dq'
Requires-Dist: requests ==2.32.4 ; extra == 'dq'
Requires-Dist: rpds-py ==0.25.1 ; extra == 'dq'
Requires-Dist: ruamel-yaml ==0.18.13 ; extra == 'dq'
Requires-Dist: ruamel-yaml-clib ==0.2.12 ; extra == 'dq'
Requires-Dist: scipy ==1.15.3 ; extra == 'dq'
Requires-Dist: six ==1.17.0 ; extra == 'dq'
Requires-Dist: toolz ==1.0.0 ; extra == 'dq'
Requires-Dist: tqdm ==4.67.1 ; extra == 'dq'
Requires-Dist: typing-extensions ==4.14.0 ; extra == 'dq'
Requires-Dist: typing-inspection ==0.4.1 ; extra == 'dq'
Requires-Dist: tzdata ==2025.2 ; extra == 'dq'
Requires-Dist: tzlocal ==5.3.1 ; extra == 'dq'
Requires-Dist: urllib3 ==2.5.0 ; extra == 'dq'
Provides-Extra: os
Requires-Dist: delta-spark ==3.3.1 ; extra == 'os'
Requires-Dist: importlib-metadata ==8.7.0 ; extra == 'os'
Requires-Dist: py4j ==0.10.9.7 ; extra == 'os'
Requires-Dist: pyspark ==3.5.5 ; extra == 'os'
Requires-Dist: zipp ==3.22.0 ; extra == 'os'
Provides-Extra: sftp
Requires-Dist: bcrypt ==4.3.0 ; extra == 'sftp'
Requires-Dist: cffi ==1.17.1 ; extra == 'sftp'
Requires-Dist: cryptography ==45.0.3 ; extra == 'sftp'
Requires-Dist: invoke ==2.2.0 ; extra == 'sftp'
Requires-Dist: paramiko ==4.0.0 ; extra == 'sftp'
Requires-Dist: pycparser ==2.22 ; extra == 'sftp'
Requires-Dist: pynacl ==1.5.0 ; extra == 'sftp'
Provides-Extra: sharepoint
Requires-Dist: certifi ==2025.4.26 ; extra == 'sharepoint'
Requires-Dist: cffi ==1.17.1 ; extra == 'sharepoint'
Requires-Dist: charset-normalizer ==3.4.2 ; extra == 'sharepoint'
Requires-Dist: cryptography ==45.0.3 ; extra == 'sharepoint'
Requires-Dist: idna ==3.10 ; extra == 'sharepoint'
Requires-Dist: msal ==1.33.0 ; extra == 'sharepoint'
Requires-Dist: pycparser ==2.22 ; extra == 'sharepoint'
Requires-Dist: pyjwt[crypto] ==2.10.1 ; extra == 'sharepoint'
Requires-Dist: requests ==2.32.4 ; extra == 'sharepoint'
Requires-Dist: tenacity ==9.0.0 ; extra == 'sharepoint'
Requires-Dist: urllib3 ==2.5.0 ; extra == 'sharepoint'

<img align="right" src="assets/img/lakehouse_engine_logo_symbol_small.png" alt="Lakehouse Engine Logo">

# Lakehouse Engine
A configuration driven Spark framework, written in Python, serving as a scalable and distributed engine for several lakehouse algorithms, data flows and utilities for Data Products.

---
> ***Note:*** whenever you read Data Product or Data Product team, we want to refer to Teams and use cases, whose main focus is on 
leveraging the power of data, on a particular topic, end-to-end (ingestion, consumption...) to achieve insights, supporting faster and better decisions, 
which generate value for their businesses. These Teams should not be focusing on building reusable frameworks, but on re-using the existing frameworks to achieve their goals.

---

## Main Goals
The goal of the Lakehouse Engine is to bring some advantages, such as:

- offer cutting-edge, standard, governed and battle-tested foundations that several Data Product teams can benefit from;
- avoid that Data Product teams develop siloed solutions, reducing technical debts and high operating costs (redundant developments across teams);
- allow Data Product teams to focus mostly on data-related tasks, avoiding wasting time & resources on developing the same code for different use cases;
- benefit from the fact that many teams are reusing the same code, which increases the likelihood that common issues are surfaced and solved faster;
- decrease the dependency and learning curve to Spark and other technologies that the Lakehouse Engine abstracts;
- speed up repetitive tasks;
- reduced vendor lock-in.

---
  > ***Note:*** even though you will see a focus on AWS and Databricks, this is just due to the lack of use cases for other technologies like GCP and Azure, but we are open for contribution.

---

## Key Features
⭐ **Data Loads:** perform data loads from diverse source types and apply transformations and data quality validations, 
ensuring trustworthy data, before integrating it into distinct target types. Additionally, people can also define termination 
actions like optimisations or notifications. [On the usage section](#load-data-usage-example) you will find an example using all the supported keywords for data loads.

---
> ***Note:*** The Lakehouse 
Engine supports different types of sources and targets, such as, kafka, jdbc, dataframes, files (csv, parquet, json, delta...), sftp, sap bw, sap b4...

---

⭐ **Transformations:** configuration driven transformations without the need to write any spark code. Transformations can be applied by using the `transform_specs` in the Data Loads.

---
> ***Note:*** you can search all the available transformations, as well as checking implementation details and examples [here](reference/packages/transformers/index.md).

---

⭐ **Data Quality Validations:** the Lakehouse Engine uses Great Expectations as a backend and abstracts any implementation
details by offering people the capability to specify what validations to apply on the data, solely using dict/json based configurations.
The Data Quality validations can be applied on:

- post-mortem (static) data, using the DQ Validator algorithm (`execute_dq_validation`)
- data in-motion, using the `dq_specs` keyword in the Data Loads, to add it as one more step while loading data. 
[On the usage section](#load-data-usage-example) you will find an example using this type of Data Quality validations.

⭐ **Reconciliation:** useful algorithm to compare two source of data, by defining one version of the `truth` to compare
against the `current` version of the data. It can be particularly useful during migrations phases, two compare a few KPIs
and ensure the new version of a table (`current`), for example, delivers the same vision of the data as the old one (`truth`).
Find usage examples [here](lakehouse_engine_usage/reconciliator/reconciliator.md).

⭐ **Sensors:** an abstraction to otherwise complex spark code that can be executed in very small single-node clusters
to check if an upstream system or Data Product contains new data since the last execution. With this feature, people can
trigger jobs to run in more frequent intervals and if the upstream does not contain new data, then the rest of the job
exits without creating bigger clusters to execute more intensive data ETL (Extraction, Transformation, and Loading).
Find usage examples [here](lakehouse_engine_usage/sensors/sensors.md).

⭐ **Terminators:** this feature allow people to specify what to do as a last action, before finishing a Data Load.
Some examples of actions are: optimising target table, vacuum, compute stats, expose change data feed to external location
or even send e-mail notifications. Thus, it is specifically used in Data Loads, using the `terminate_specs` keyword.
[On the usage section](#load-data-usage-example) you will find an example using terminators.

⭐ **Table Manager:** function `manage_table`, offers a set of actions to manipulate tables/views in several ways, such as:

- compute table statistics;
- create/drop tables and views;
- delete/truncate/repair tables;
- vacuum delta tables or locations;
- optimize table;
- describe table;
- show table properties;
- execute sql.

⭐ **File Manager:** function `manage_files`, offers a set of actions to manipulate files in several ways, such as:

- delete Objects in S3;
- copy Objects in S3;
- restore Objects from S3 Glacier;
- check the status of a restore from S3 Glacier;
- request a restore of objects from S3 Glacier and wait for them to be copied to a destination.


⭐ **Notifications:** you can configure and send email notifications.

---
> ***Note:*** it can be used as an independent function (`send_notification`) or as a `terminator_spec`, using the function `notify`.

---

📖 In case you want to check further details you can check the documentation of the [Lakehouse Engine facade](reference/packages/engine.md).

## Installation
As the Lakehouse Engine is built as wheel (look into our **build** and **deploy** make targets) you can install it as any other python package using **pip**.

```
pip install lakehouse-engine
```

Alternatively, you can also upload the wheel to any target of your like (e.g. S3) and perform a pip installation pointing to that target location.

---
> ***Note:*** The Lakehouse Engine is packaged with plugins or optional dependencies, which are not installed by default. The goal is
> to make its installation lighter and to avoid unnecessary dependencies. You can check all the optional dependencies in
> the [tool.setuptools.dynamic] section of the [pyproject.toml](pyproject.toml) file. They are currently: os, dq, azure, sharepoint and sftp. So,
> in case you want to make usage of the Data Quality features offered in the Lakehouse Engine, instead of running the previous command, you should run
> the command below, which will bring the core functionalities, plus DQ.
> ```
> pip install lakehouse-engine[dq]
> ```
> In case you are in an environment without pre-install spark and delta, you will also want to install the `os` optional dependencies, like so:
> ```
> pip install lakehouse-engine[os]
> ```
> And in case you want to install several optional dependencies, you can run a command like:
> ```
> pip install lakehouse-engine[dq,sftp]
> ```
> It is advisable for a Data Product to pin a specific version of the Lakehouse Engine (and have recurring upgrading activities)
> to avoid breaking changes in a new release.
> In case you don't want to be so conservative, you can pin to a major version, which usually shouldn't include changes that break backwards compatibility.

---

## How Data Products use the Lakehouse Engine Framework?
<img src="assets/img/lakehouse_dp_usage.drawio.png?raw=true" style="max-width: 800px; height: auto; "/>

The Lakehouse Engine is a configuration-first Data Engineering framework, using the concept of ACONs to configure algorithms. 
An ACON, stands for Algorithm Configuration and is a JSON representation, as the [Load Data Usage Example](#load-data-usage-example) demonstrates. 

Below you find described the main keywords you can use to configure and ACON for a Data Load.

---
> ***Note:*** the usage logic for the other [algorithms/features presented](#key-features) will always be similar, but using different keywords, 
which you can search for in the examples and documentation provided in the [Key Features](#key-features) and [Community Support and Contributing](#community-support-and-contributing) sections.

---

- **Input specifications (input_specs):** specify how to read data. This is a **mandatory** keyword.
- **Transform specifications (transform_specs):** specify how to transform data.
- **Data quality specifications (dq_specs):** specify how to execute the data quality process.
- **Output specifications (output_specs):** specify how to write data to the target. This is a **mandatory** keyword.
- **Terminate specifications (terminate_specs):** specify what to do after writing into the target (e.g., optimising target table, vacuum, compute stats, expose change data feed to external location, etc).
- **Execution environment (exec_env):** custom Spark session configurations to be provided for your algorithm (configurations can also be provided from your job/cluster configuration, which we highly advise you to do instead of passing performance related configs here for example).

## Load Data Usage Example

You can use the Lakehouse Engine in a **pyspark script** or **notebook**.
Below you can find an example on how to execute a Data Load using the Lakehouse Engine, which is doing the following:

1. Read CSV files, from a specified location, in a streaming fashion and providing a specific schema and some additional 
options for properly read the files (e.g. header, delimiter...);
2. Apply two transformations on the input data:
    1. Add a new column having the Row ID;
    2. Add a new column `extraction_date`, which extracts the date from the `lhe_extraction_filepath`, based on a regex.
3. Apply Data Quality validations and store the result of their execution in the table `your_database.order_events_dq_checks`:
    1. Check if the column `omnihub_locale_code` is not having null values;
    2. Check if the distinct value count for the column `product_division` is between 10 and 100;
    3. Check if the max of the column `so_net_value` is between 10 and 1000;
    4. Check if the length of the values in the column `omnihub_locale_code` is between 1 and 10;
    5. Check if the mean of the values for the column `coupon_code` is between 15 and 20.
4. Write the output into the table `your_database.order_events_with_dq` in a delta format, partitioned by `order_date_header`
and applying a merge predicate condition, ensuring the data is only inserted into the table if it does not match the predicate
(meaning the data is not yet available in the table). Moreover, the `insert_only` flag is used to specify that there should not 
be any updates or deletes in the target table, only inserts;
5. Optimize the Delta Table that we just wrote in (e.g. z-ordering);
6. Specify 3 custom Spark Session configurations.

---
> ⚠️ ***Note:*** `spec_id` is one of the main concepts to ensure you can chain the steps of the algorithm,
so, for example, you can specify the transformations (in `transform_specs`) of a DataFrame that was read in the `input_specs`.

---

```python
from lakehouse_engine.engine import load_data

acon = {
    "input_specs": [
        {
            "spec_id": "orders_bronze",
            "read_type": "streaming",
            "data_format": "csv",
            "schema_path": "s3://my-data-product-bucket/artefacts/metadata/bronze/schemas/orders.json",
            "with_filepath": True,
            "options": {
                "badRecordsPath": "s3://my-data-product-bucket/badrecords/order_events_with_dq/",
                "header": False,
                "delimiter": "\u005E",
                "dateFormat": "yyyyMMdd",
            },
            "location": "s3://my-data-product-bucket/bronze/orders/",
        }
    ],
    "transform_specs": [
        {
            "spec_id": "orders_bronze_with_extraction_date",
            "input_id": "orders_bronze",
            "transformers": [
                {"function": "with_row_id"},
                {
                    "function": "with_regex_value",
                    "args": {
                        "input_col": "lhe_extraction_filepath",
                        "output_col": "extraction_date",
                        "drop_input_col": True,
                        "regex": ".*WE_SO_SCL_(\\d+).csv",
                    },
                },
            ],
        }
    ],
    "dq_specs": [
        {
            "spec_id": "check_orders_bronze_with_extraction_date",
            "input_id": "orders_bronze_with_extraction_date",
            "dq_type": "validator",
            "result_sink_db_table": "your_database.order_events_dq_checks",
            "fail_on_error": False,
            "dq_functions": [
                {
                  "dq_function": "expect_column_values_to_not_be_null", 
                  "args": {
                    "column": "omnihub_locale_code"
                  }
                },
                {
                    "dq_function": "expect_column_unique_value_count_to_be_between",
                    "args": {
                      "column": "product_division", 
                      "min_value": 10,
                      "max_value": 100
                    },
                },
                {
                    "dq_function": "expect_column_max_to_be_between", 
                    "args": {
                      "column": "so_net_value", 
                      "min_value": 10, 
                      "max_value": 1000
                    }
                },
                {
                    "dq_function": "expect_column_value_lengths_to_be_between",
                    "args": {
                      "column": "omnihub_locale_code", 
                      "min_value": 1, 
                      "max_value": 10
                    },
                },
                {
                  "dq_function": "expect_column_mean_to_be_between", 
                  "args": {
                    "column": "coupon_code", 
                    "min_value": 15, 
                    "max_value": 20
                  }
                },
            ],
        },
    ],
    "output_specs": [
        {
            "spec_id": "orders_silver",
            "input_id": "check_orders_bronze_with_extraction_date",
            "data_format": "delta",
            "write_type": "merge",
            "partitions": ["order_date_header"],
            "merge_opts": {
                "merge_predicate": """
                    new.sales_order_header = current.sales_order_header
                    AND new.sales_order_schedule = current.sales_order_schedule
                    AND new.sales_order_item=current.sales_order_item
                    AND new.epoch_status=current.epoch_status
                    AND new.changed_on=current.changed_on
                    AND new.extraction_date=current.extraction_date
                    AND new.lhe_batch_id=current.lhe_batch_id
                    AND new.lhe_row_id=current.lhe_row_id
                """,
                "insert_only": True,
            },
            "db_table": "your_database.order_events_with_dq",
            "options": {
                "checkpointLocation": "s3://my-data-product-bucket/checkpoints/template_order_events_with_dq/"
            },
        }
    ],
    "terminate_specs": [
        {
            "function": "optimize_dataset",
            "args": {
              "db_table": "your_database.order_events_with_dq"
            }
        }
    ],
    "exec_env": {
        "spark.databricks.delta.schema.autoMerge.enabled": True,
        "spark.databricks.delta.optimizeWrite.enabled": True,
        "spark.databricks.delta.autoCompact.enabled": True,
    },
}

load_data(acon=acon)
```

---
> ***Note:*** Although it is possible to interact with the Lakehouse Engine functions directly from your python code, 
instead of relying on creating an ACON dict and use the engine api, we do not ensure the stability across new 
Lakehouse Engine releases when calling internal functions (not exposed in the facade) directly.

---

---
> ***Note:*** ACON structure might change across releases, please test your Data Product first before updating to a 
new version of the Lakehouse Engine in your Production environment.

---
## Overwriting default configurations

We use a YAML file to specify various configurations needed for different functionalities. You can overwrite these 
configurations using a dictionary with new settings or by providing a path to a YAML file.

This functionality can be particularly useful for the open-source community as it unlocks 
the usage several functionalities like Prisma and engine usage logs.

Check default configurations.
```
from lakehouse_engine.core import exec_env
print(exec_env.ExecEnv.ENGINE_CONFIG.dq_dev_bucket)
   > default-bucket
```

Change the dq_dev_bucket configuration.
```
exec_env.ExecEnv.set_default_engine_config(custom_configs_dict={"dq_dev_bucket": "your-dq-bucket"})
print(exec_env.ExecEnv.ENGINE_CONFIG.dq_dev_bucket)
   > your-dq-bucket
```
Reset to default configurations.
```
exec_env.ExecEnv.set_default_engine_config()
print(exec_env.ExecEnv.ENGINE_CONFIG.dq_dev_bucket)
   > default-bucket
```

---

## Who maintains the Lakehouse Engine?
The Lakehouse Engine is under active development and production usage by the Adidas Lakehouse Foundations Engineering team. 

## Community Support and Contributing

🤝 Do you want to contribute or need any support? Check out all the details in [CONTRIBUTING.md](https://github.com/adidas/lakehouse-engine/blob/master/CONTRIBUTING.md).

## License and Software Information

© adidas AG

adidas AG publishes this software and accompanied documentation (if any) subject to the terms of the [license](https://github.com/adidas/lakehouse-engine/blob/master/LICENSE.txt)
with the aim of helping the community with our tools and libraries which we think can be also useful for other people.
You will find a copy of the [license](https://github.com/adidas/lakehouse-engine/blob/master/LICENSE.txt) in the root folder of this package. All rights not explicitly granted
to you under the [license](https://github.com/adidas/lakehouse-engine/blob/master/LICENSE.txt) remain the sole and exclusive property of adidas AG.

---
> ***NOTICE:*** The software has been designed solely for the purposes described in this ReadMe file. The software is NOT designed,
tested or verified for productive use whatsoever, nor or for any use related to high risk environments, such as health care,
highly or fully autonomous driving, power plants, or other critical infrastructures or services.

---

If you want to contact adidas regarding the software, you can mail us at software.engineering@adidas.com.

For further information open the [adidas terms and conditions](https://github.com/adidas/adidas-contribution-guidelines/wiki/Terms-and-conditions) page.
