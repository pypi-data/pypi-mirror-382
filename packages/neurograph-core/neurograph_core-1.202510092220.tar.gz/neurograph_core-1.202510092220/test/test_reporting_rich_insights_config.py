# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from neurograph.v1.models.reporting_rich_insights_config import ReportingRichInsightsConfig

class TestReportingRichInsightsConfig(unittest.TestCase):
    """ReportingRichInsightsConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportingRichInsightsConfig:
        """Test ReportingRichInsightsConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportingRichInsightsConfig`
        """
        model = ReportingRichInsightsConfig()
        if include_optional:
            return ReportingRichInsightsConfig(
                content = neurograph.v1.models.reporting/content_config.reporting.ContentConfig(
                    chart_defaults = neurograph.v1.models.reporting/chart_defaults.reporting.ChartDefaults(
                        options = neurograph.v1.models.reporting/chart_options.reporting.ChartOptions(
                            maintain_aspect_ratio = True, 
                            plugins = {
                                'key' : None
                                }, 
                            responsive = True, 
                            scales = {
                                'key' : None
                                }, ), ), 
                    header = neurograph.v1.models.reporting/header_config.reporting.HeaderConfig(
                        subtitle = '', 
                        title = '', ), 
                    primary_analysis = neurograph.v1.models.reporting/primary_analysis.reporting.PrimaryAnalysis(
                        exploration_topics = [
                            neurograph.v1.models.reporting/exploration_topic.reporting.ExplorationTopic(
                                context = {
                                    'key' : None
                                    }, 
                                query = '', 
                                title = '', )
                            ], 
                        key_findings = [
                            ''
                            ], 
                        summary = '', ), 
                    visualizations = [
                        neurograph.v1.models.reporting/visualization.reporting.Visualization(
                            data = neurograph.v1.models.reporting/chart_data.reporting.ChartData(
                                datasets = [
                                    neurograph.v1.models.reporting/chart_dataset.reporting.ChartDataset(
                                        background_color = '', 
                                        bar_percentage = 1.337, 
                                        label = '', )
                                    ], 
                                labels = [
                                    ''
                                    ], ), 
                            id = '', 
                            insights = neurograph.v1.models.reporting/visualization_insights.reporting.VisualizationInsights(
                                bullets = [
                                    ''
                                    ], 
                                summary = '', 
                                title = '', ), 
                            title = '', 
                            type = '', )
                        ], ),
                meta = neurograph.v1.models.reporting/meta_config.reporting.MetaConfig(
                    analysis_type = '', 
                    data_range = neurograph.v1.models.reporting/data_range.reporting.DataRange(
                        end = '', 
                        start = '', ), 
                    entity_subtype = '', 
                    entity_type = '', 
                    generated_at = '', )
            )
        else:
            return ReportingRichInsightsConfig(
        )
        """

    def testReportingRichInsightsConfig(self):
        """Test ReportingRichInsightsConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
