# {{ project_name }}

Vega Framework application with Clean Architecture.

## Structure

```
{{ project_name }}/
â”œâ”€â”€ domain/              # ðŸ”µ Business logic (framework-independent)
â”‚   â”œâ”€â”€ entities/        # Business entities
â”‚   â”œâ”€â”€ repositories/    # Repository interfaces
â”‚   â”œâ”€â”€ services/        # Service interfaces
â”‚   â””â”€â”€ interactors/     # Use cases
â”‚
â”œâ”€â”€ application/         # ðŸŸ¢ Application workflows
â”‚   â””â”€â”€ mediators/       # Complex workflows
â”‚
â”œâ”€â”€ infrastructure/      # ðŸŸ¡ Concrete implementations
â”‚   â”œâ”€â”€ repositories/    # Repository implementations
â”‚   â””â”€â”€ services/        # Service implementations
â”‚
â”œâ”€â”€ presentation/        # Delivery mechanisms
{% if template == "fastapi" -%}
â”‚   â”œâ”€â”€ web/            # FastAPI web interface
â”‚   â”‚   â”œâ”€â”€ routes/     # HTTP endpoints
â”‚   â”‚   â”œâ”€â”€ app.py      # FastAPI app factory
â”‚   â”‚   â””â”€â”€ main.py     # ASGI entrypoint
â”‚   â””â”€â”€ cli/            # CLI commands (if needed)
{% else -%}
â”‚   â””â”€â”€ cli/            # CLI commands
{% endif -%}
â”‚
â”œâ”€â”€ config.py            # Dependency injection setup
â”œâ”€â”€ settings.py          # Application configuration
â””â”€â”€ main.py              # Application entry point
```

## Getting Started

```bash
# Install dependencies
poetry install

# Setup environment
cp .env.example .env
# Edit .env with your configuration

# Generate components
vega generate entity User
vega generate repository UserRepository
vega generate interactor CreateUser

# Run tests
poetry run pytest
```

## Using Async Commands

Vega Framework supports async/await in CLI commands, allowing you to execute interactors seamlessly:

```python
import click
from vega.cli.utils import async_command

@click.command()
@click.option('--name', required=True)
@async_command
async def create_user(name: str):
    """Create a user using an interactor"""
    import config  # Initialize DI container
    from domain.interactors.create_user import CreateUser

    user = await CreateUser(name=name)
    click.echo(f"Created: {user.name}")
```

This allows the same async business logic to work in both CLI and web contexts (FastAPI).

## Vega Framework

This project uses [Vega Framework](https://github.com/your-org/vega-framework) for Clean Architecture:

- Automatic Dependency Injection
- Clean Architecture patterns (4 layers: Domain, Application, Infrastructure, Presentation)
- Type-safe with Python type hints
- Easy to test and maintain

## Documentation

- [Vega Framework Docs](https://vega-framework.readthedocs.io/)
- [Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)
