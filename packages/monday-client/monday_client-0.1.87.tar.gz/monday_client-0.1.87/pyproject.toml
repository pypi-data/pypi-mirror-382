[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "monday-client"
dynamic = ["version"]
authors = [
    { name = "Dan Hollis", email = "dh@leetsys.com" }
]
description = "Python library for interacting with the monday.com API. Respects monday.com API rate limits and query complexity limits."
readme = "README.md"
license = "GPL-3.0-only"
license-files = ["LICENSE"]
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiohttp"
]
keywords = [
    "monday",
    "monday.com",
    "api",
    "client",
    "async",
    "rate-limiting",
    "complexity-limiting",
]

[project.optional-dependencies]
dev = [
    "basedpyright",
    "doc8",
    "esbonio",
    "myst-parser",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
    "pre-commit",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "pyyaml",
    "rstcheck[sphinx,toml]",
    "ruff",
]
proxy = [
    "aiohttp-socks",
]
httpx = [
    "httpx[socks]",
    "httpx-ntlm",
    "pyspnego",
]
yaml = [
    "pyyaml",
]

[project.urls]
"Homepage" = "https://github.com/LeetCyberSecurity/monday-client"
"Documentation" = "https://monday-client.readthedocs.io/"
"Bug Reports" = "https://github.com/LeetCyberSecurity/monday-client/issues"
"Source" = "https://github.com/LeetCyberSecurity/monday-client"

[tool.setuptools.dynamic]
version = { attr = "monday.__version__" }

[tool.setuptools.packages.find]
include = ["monday*"]
namespaces = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (Default, no external dependencies)",
    "integration: Integration tests (Require API key and network)",
    "mutation: Mutation tests (Require API key and network. Will create, update, and delete data)",
    "sync: Tests for sync facade/helpers",
]
addopts = [
    "--strict-markers"
]
console_output_style = "progress"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.basedpyright]
include = ["monday", "tests"]
pythonVersion = "3.13"
typeCheckingMode = "standard"

[tool.esbonio.sphinx]
pythonCommand = ["${venv:.venv}"]
buildCommand = ["sphinx-build", "-M", "html", "docs/source", "docs/build"]

[tool.rstcheck]
ignore_directives = [
    "autoattribute",
    "autoclass",
    "autofunction",
    "automethod",
    "automodule",
]
ignore_messages = [
    "Hyperlink target.*is not referenced.*",
    "Duplicate implicit target name.*"
]

[tool.ruff]
extend-exclude = [
    "env",
    "monday-env",
    "__pycache__",
]
force-exclude = true

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"
quote-style = "single"

[tool.ruff.lint]
select = [
    "ALL"
]
ignore = [
    "ANN",
    "COM",
    "C90",
    "DJ",
    "EXE",
    "T10",
    "TID",
    "D104",
    "D107",
    "D200",
    "D203",
    "D205",
    "D212",
    "D400",
    "D401",
    "D415",
    "E402",
    "E501",
    "TRY003",
    "TD002",
    "TD003",
    "FIX002",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.isort]
known-first-party = ["monday"]
known-third-party = [
    "aiohttp",
    "aiohttp_socks",
    "httpx",
    "httpx_ntlm",
    "pytest",
    "spnego",
    "yaml",
]

[tool.ruff.lint.per-file-ignores]
"examples/*" = [
    "F841",
    "INP001",
    "PLR0912",
    "PLR0915",
    "T201",
]
"tests/*" = [
    "BLE001",
    "S101",
    "PLC0415",
    "PLR0915",
    "PLR2004",
    "SLF001",
]
