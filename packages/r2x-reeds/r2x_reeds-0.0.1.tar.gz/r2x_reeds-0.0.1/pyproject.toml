[project]
name = "r2x-reeds"
version = "0.0.1"
readme = "README.md"
description = "ReEDS model plugin"
license = {file = "LICENSE.txt"}
authors = [
    { name = "pesap", email = "pesap@users.noreply.github.com" },
]
maintainers = [
    { name = "pesap", email = "pesap@users.noreply.github.com" },
]
requires-python = ">=3.11"
dependencies = [
    "infrasys>=1.0.0rc1",
    "pydantic>=2.11.0,<3",
    "polars>=1.33.0",
    "h5py>=3.13.0",
    "numpy>=1.20.0",
    "loguru>=0.7.0",
    "r2x-core>=0.0.7",
]
keywords=["ReEDS"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Topic :: Software Development :: Build Tools",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: File Formats :: JSON",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[project.entry-points.r2x_plugin]
reeds = "r2x_reeds:register_plugin"

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-coverage>=0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.13.3",
]
docs = [
    "autodoc-pydantic",
    "docstr-coverage>=2.3.2",
    "furo>=2025.9.25",
    "ghp-import",
    "myst-parser",
    "sphinx>=8.0.0",
    "sphinx-copybutton",
    "sphinx-reports",
    "sphinx-tabs",
]

[build-system]
requires = ["uv_build>=0.8.22,<0.9.0"]
build-backend = "uv_build"

[tool.mypy]
strict = true
exclude = ["tests/", "_*"]
plugins = [
  "pydantic.mypy"
]

[[tool.mypy.overrides]]
module = "r2x_core.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "h5py.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "r2x_reeds.*"
disable_error_code = ["misc"]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.ruff]
line-length = 110
extend-exclude = [
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "PIE",    # flake8-pie
    "PERF",   # perflint (performance)
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B027",   # Empty method in abstract class without @abstractmethod (intentional for hooks)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert
]

[tool.ruff.lint.isort]
known-first-party = ["r2x_core"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.mccabe]
# Cyclomatic complexity threshold
max-complexity = 10
