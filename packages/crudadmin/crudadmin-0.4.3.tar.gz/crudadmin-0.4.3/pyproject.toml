[project]
name = "crudadmin"
version = "0.4.3"
description = "FastAPI-based admin interface with authentication, event logging and CRUD operations"
readme = "README.md"
requires-python = ">=3.9.2"
authors = [
    { name = "Igor Benav", email = "igor.magalhaes.r@gmail.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]
dependencies = [
    "bcrypt>=4.2.1",
    "fastapi>=0.115.6",
    "jinja2>=3.1.5",
    "pydantic[email]>=2.10.4",
    "pydantic-settings>=2.6.1",
    "python-jose>=3.3.0",
    "python-multipart>=0.0.20",
    "sqlalchemy>=2.0.36",
    "user-agents>=2.2.0",
    "aiosqlite>=0.20.0",
    "greenlet>=3.1.1",
    "fastcrud>=0.15.12",
]

[tool.hatch.build.targets.sdist]
include = ["crudadmin/", "LICENSE"]

[tool.hatch.build.targets.wheel]
include = ["crudadmin/", "LICENSE"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
Homepage = "https://github.com/benavlabs/crudadmin"
Documentation = "https://benavlabs.github.io/crudadmin"
Repository = "https://github.com/benavlabs/crudadmin"
Issues = "https://github.com/benavlabs/crudadmin/issues"
Changelog = "https://github.com/benavlabs/crudadmin/releases"

[project.optional-dependencies]
standard = [
    "uvicorn[standard]>=0.12.0"
]

redis = [
    "redis>=6.2.0"
]

memcached = [
    "aiomcache>=0.8.2"
]

postgres = [
    "asyncpg>=0.29.0"
]

mysql = [
    "aiomysql>=0.2.0"
]

dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
    "testcontainers[postgresql]>=4.9.1",
    "ruff>=0.9.3",
    "mypy>=1.9.0",
    "httptools>=0.6.4",
    "httpx>=0.28.1",
    "sqlalchemy[mypy]>=2.0.36",
    "sqlalchemy-utils>=0.41.2",
    "pre-commit>=3.5.0"
]

docs = [
    "mkdocs>=1.6.1",
    "mkdocs-meta-descriptions-plugin>=4.0.0",
    "mkdocs-material>=9.6.1",
    "mkdocstrings[python]>=0.27.0"
]

all = [
    "crudadmin[standard,dev,docs]"
]

test = [
    "aiomcache>=0.8.2",
    "redis>=6.2.0",
]

[dependency-groups]
dev = [
    "crudadmin",
    "crudadmin[standard,redis,memcached,postgres,mysql,dev]"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "dialect: marks tests to run with specific database dialect",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true


[tool.coverage.run]
source = ["crudadmin"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
