import pytest

from ssh_key_mgr.openssh.encryption import aes

pytest.importorskip("bcrypt")

ENCRYPTED = aes.EncryptedBytes(
    b"\xceG\x885\xa1\xd1W\xf9\x05e\x15\xa2\xca=\xc11X\xa0\xdbq<\x17\xc7ksP\x93\xe8\xbf"
    + b"\xd5r\xf1\xd1\x94\x1ba\xfb\xab\xcdI\x04\xe7\x86b\x81S\xda\x19\x83\x07l\xadp"
    + b"\x86\xecR\x99\x10\xfa&R7\xc3\xe9D5\xd8\xe0M\x7f\xcfG\xa9\xde\xb4;\x18(\xed"
    + b'\x00l\\J\x12l\xc0"\xd1\x9b$\x07\xa4r\xa7D,\x04#\x12\xf3\xc3;\xa0Ph\x12\xab'
    + b"\x04\xda\xab\x8f\xd4\xb6\xd6\xe0;\xa4\xd6r\xa9^\xaed\xbe\xe9I\x94|\xf4\x1f"
    + b"\x0e\x98\xbaM\xe6\xfeH\xcdqd\x8ef3\xc2\x94\xfb\xd5\xbf\x82\x81\x9d*\xdac\x87"
    + b'\xebF\xfe\xd6\x1df7x\xc5\x8c\xb3\xd5"\xbaT\x89L\xc3\x86\xc7\x17\xea\x18\xdd'
    + b"\xd5p\xf7k\xafB\x8e\xc3y \xa5\x1b\x11Zt\xcd\xbe\x104,\xfbEF\xb8}\x8f2L,"
    + b"\x12CuA\x96\x85\xf5\xfb+\n\xbf\xf3\x97\xef\x90[\xe1kK\xa5L\xf7W\xf8\x1e"
    + b"\x86&.c\xd4&\xe0*\xbd\xc1\xf5\xc8\xddh\x01\xa8Y]\xff\xcc\xfe\xaaj\xee"
    + b"\x8d{\x1d4a\xc0\x19\xa1\xc2,>S@\xb3\xa7\xdd\x90i\x137\xcb\x04\xb7\x0e"
    + b"\x91\xaf=\xcd@,\xf8\x90\xdf\x1c\xe0\x7fP\x9d\xd3\xd6\xb6\x956\xb8\x8c\xdcg"
)


DECRYPTED = (
    b"\x97\x16z@\x97\x16z@\x00\x00\x00\x07ssh-rsa\x00\x00\x00A\x00\xa8\xf7\xe0i"
    + b"1\x16\x10\xfd\xd2\xf7\r-\x82\xc8\x9cQ\x17\xe8\xfar\xd6\xd3\xdf\xf4"
    + b")\xf3\x8f\x8axXg\x8a.\xcdO\xb7\xc4.)JQ)\xf1K}\x16\x02\xf4\x02\n\x8d\xb2SZ+~"
    + b"\n\xab\xe3Y\x8c\xefC\x01\x00\x00\x00\x03\x01\x00\x01\x00\x00\x00@ "
    + b"\x92\xe2\xc4\x1c\xb6\xaa\x91hK\x80\xd2\x9a\x81&\xa3z\x86\xcbKz\xcfO@ "
    + b"\x9bG\xfb\x93\x9eE][{\xe3xp6\t)\xf7\xc6\xcc6\xbc\xf2\xf4\x045\x98\x91\x9bA"
    + b"\x91\xab\xa6\xbe\x1c\xf1\x901\xdd\xa4M\x00\x00\x00 \x13\xac\xff\x93\xa2"
    + b">\n\x13u,\xbbm\xc1} jR\x13\xc6`\x18\xac\xe0a\x05Yx\xdf{`M4\x00\x00\x00!\x00"
    + b"\xa3\x12\xbf2\x01\x9ex\xbb\xa2\xdf\xceJ'\xb6NbKc\x84\xb0M\x00\x1e\xbd"
    + b"|\xac\x13d[\x146\x1d\x00\x00\x00!\x01\tA\x1aE\t\xcc\x9d\xba{\xf6lC\\7\xfa"
    + b"\x01M\x1c7\xf4O\x066\xfd\xa9!\xc3qfG\x1b5\x00\x00\x00\x17phpseclib-generated"
    + b"-key\x01\x02\x03\x04"
)


IV_KEY = aes.IV(b"K\xe3=0\x96\x1a\xa7\xeaqC\xfb\xa1\x966u\xab")
CIPHER_KEY = aes.CipherKey(
    b"y\xeb\x0c\x9f\xe4\xf2W\x8fJ\xc1F\xc2\xec%\xcc\x90~<\x81\xf5\x1d\x8d\x16\xef2H\xc9i$D\x01\xe7"
)


def test_decrypt():
    got = aes.decrypt(ENCRYPTED, CIPHER_KEY, IV_KEY)
    want = DECRYPTED
    assert got == want


def test_encrypt():
    got = aes.encrypt(DECRYPTED, CIPHER_KEY, IV_KEY)
    want = ENCRYPTED
    assert got == want


def test_encrypted_length():
    want = 304
    got = len(ENCRYPTED)
    assert got == want
