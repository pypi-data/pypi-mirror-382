[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "toyaikit"
dynamic = ["version"]
description = "Toolkit for building AI assistants and tool integrations."
readme = "README.md"
license = {text = "WTFPL"}
authors = [
    {name = "Alexey Grigorev", email = "alexey@datatalks.club"},
]
maintainers = [
    {name = "Alexey Grigorev", email = "alexey@datatalks.club"},
]
keywords = ["ai", "assistant", "tools", "integration"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "ipython",
    "mistune>=3.1.3",
    "openai>=1.97.0",
]

[dependency-groups]
dev = [
    "requests",
    "hatch",
    "build",
    "pytest",
    "pytest-cov",
    "coverage[toml]",
    "twine",
    "openai-agents>=0.3.0",
    "pytest-asyncio>=1.2.0",
    "ruff",
]

[project.urls]
Homepage = "https://github.com/alexeygrigorev/toyaikit"
Repository = "https://github.com/alexeygrigorev/toyaikit"
Issues = "https://github.com/alexeygrigorev/toyaikit/issues"

[tool.hatch.build.targets.wheel]
packages = ["toyaikit"]

[tool.hatch.version]
path = "toyaikit/__version__.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short -s --cov=toyaikit --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["toyaikit"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
show_missing = true
skip_covered = false 

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
]
ignore = ["E501"]  # Ignore line too long

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


