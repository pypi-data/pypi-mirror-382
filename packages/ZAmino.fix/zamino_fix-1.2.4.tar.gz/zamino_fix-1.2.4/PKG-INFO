Metadata-Version: 2.4
Name: ZAmino.fix
Version: 1.2.4
Summary: ZAmino.fix is a modern and optimized fork of amino.fix, designed for building Amino bots, automations, and custom clients with ease and performance in mind.
Author: ZOOM
Keywords: ZAmino,ZAmino.fix,aminoapps,ZAminofix,amino,amino-bot
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: httpx==0.28.1
Requires-Dist: websocket-client==1.3.1
Requires-Dist: json_minify
Requires-Dist: six
Requires-Dist: websockets
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: keywords
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary


# ZAminofix ‚ú®
Elegant and powerful Python framework for creating Amino bots and automation scripts.


---

## üöÄ Quick Navigation
- [Installation](#-installation) | [Quick Start](#-quick-start) | [Documentation](#-documentation) | [Examples](#-examples) | [Support](#-support) | [Contributing](#-contributing)

---

## ‚ö° Installation
```bash
pip install ZAmino.fix
````

---

## ‚öôÔ∏è Quick Start

```python
from ZAminofix import Client, SubClient
client = Client()
client.login("your_email@example.com", "your_password")

```

---

## üìö Documentation

### Core Components

**Client - Main Connection Handler:** The `Client` class manages your connection to Amino services and handles global operations.
**Authentication Options:**

```python
client.login("email@example.com", "password123")

client.login("+1234567890", "password123")

client.login("your_sid")

```

**Event System:**

```python
import ZAminofix
from ZAminofix import Context
c = ZAminofix.Client()
client.login("email", "password")

def on_text_message(ctx: Context):
    print(f"Message: {ctx.content}")

c.register_events(globals())

```

**SubClient - Community Operations:**

```python
sub_client = SubClient(comId=123456)
sub_client.send_message(chatId="chat_id", message="Hello World!")
```

---

## üß™ Examples

### Command Bot

```python
from ZAminofix import Client
from ZAminofix import Context
import random
client = Client()
client.login("email", "password")

def on_text_message(ctx: Context):
	if ctx.content == "!Bot":
		ctx.reply("yes!")

c.register_events(globals())

```

---

## üõ†Ô∏è Support

Telegram: [@ZAminoZ](https://t.me/ZAminoZ)

---

## ü§ù Contributing

Contributions, bug reports, and feature requests are welcome! Please follow the standard GitHub pull request workflow.
