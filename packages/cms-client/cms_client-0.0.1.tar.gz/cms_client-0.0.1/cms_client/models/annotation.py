# coding: utf-8

"""
    CogStack Model Serve APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Annotation(BaseModel):
    """
    Annotation
    """ # noqa: E501
    doc_name: Optional[StrictStr] = None
    start: StrictInt = Field(description="The start index of the annotation span")
    end: StrictInt = Field(description="The first index after the annotation span")
    label_name: StrictStr = Field(description="The pretty name of the annotation concept")
    label_id: StrictStr = Field(description="The code of the annotation concept")
    categories: Optional[List[StrictStr]] = None
    accuracy: Optional[Union[StrictFloat, StrictInt]] = None
    text: Optional[StrictStr] = None
    meta_anns: Optional[Dict[str, Any]] = None
    athena_ids: Optional[List[Dict[str, Any]]] = None
    __properties: ClassVar[List[str]] = ["doc_name", "start", "end", "label_name", "label_id", "categories", "accuracy", "text", "meta_anns", "athena_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Annotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if doc_name (nullable) is None
        # and model_fields_set contains the field
        if self.doc_name is None and "doc_name" in self.model_fields_set:
            _dict['doc_name'] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['categories'] = None

        # set to None if accuracy (nullable) is None
        # and model_fields_set contains the field
        if self.accuracy is None and "accuracy" in self.model_fields_set:
            _dict['accuracy'] = None

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if meta_anns (nullable) is None
        # and model_fields_set contains the field
        if self.meta_anns is None and "meta_anns" in self.model_fields_set:
            _dict['meta_anns'] = None

        # set to None if athena_ids (nullable) is None
        # and model_fields_set contains the field
        if self.athena_ids is None and "athena_ids" in self.model_fields_set:
            _dict['athena_ids'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Annotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doc_name": obj.get("doc_name"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "label_name": obj.get("label_name"),
            "label_id": obj.get("label_id"),
            "categories": obj.get("categories"),
            "accuracy": obj.get("accuracy"),
            "text": obj.get("text"),
            "meta_anns": obj.get("meta_anns"),
            "athena_ids": obj.get("athena_ids")
        })
        return _obj


