# coding: utf-8

"""
    CogStack Model Serve APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, List, Optional, Tuple, Union
from typing_extensions import Annotated

from cms_client.api_client import ApiClient, RequestSerialized
from cms_client.api_response import ApiResponse
from cms_client.rest import RESTResponseType


class TrainingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cancel_training(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Cancel Training

        Cancel the in-progress training job (this is experimental and may not work as expected)

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_training_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_training_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Cancel Training

        Cancel the in-progress training job (this is experimental and may not work as expected)

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_training_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_training_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Training

        Cancel the in-progress training job (this is experimental and may not work as expected)

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_training_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_training_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/cancel_training',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_evaluation_with_trainer_export(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Evaluation With Trainer Export

        Evaluate the model being served with a trainer export

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_evaluation_with_trainer_export_serialize(
            trainer_export=trainer_export,
            tracking_id=tracking_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_evaluation_with_trainer_export_with_http_info(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Evaluation With Trainer Export

        Evaluate the model being served with a trainer export

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_evaluation_with_trainer_export_serialize(
            trainer_export=trainer_export,
            tracking_id=tracking_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_evaluation_with_trainer_export_without_preload_content(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Evaluation With Trainer Export

        Evaluate the model being served with a trainer export

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_evaluation_with_trainer_export_serialize(
            trainer_export=trainer_export,
            tracking_id=tracking_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_evaluation_with_trainer_export_serialize(
        self,
        trainer_export,
        tracking_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'trainer_export': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tracking_id is not None:
            
            _query_params.append(('tracking_id', tracking_id))
            
        # process the header parameters
        # process the form parameters
        if trainer_export is not None:
            _files['trainer_export'] = trainer_export
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/evaluate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def train_eval_info(
        self,
        train_eval_id: Annotated[StrictStr, Field(description="The training or evaluation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Train Eval Info

        Get the training or evaluation job information by its ID

        :param train_eval_id: The training or evaluation ID (required)
        :type train_eval_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_eval_info_serialize(
            train_eval_id=train_eval_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def train_eval_info_with_http_info(
        self,
        train_eval_id: Annotated[StrictStr, Field(description="The training or evaluation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Train Eval Info

        Get the training or evaluation job information by its ID

        :param train_eval_id: The training or evaluation ID (required)
        :type train_eval_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_eval_info_serialize(
            train_eval_id=train_eval_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def train_eval_info_without_preload_content(
        self,
        train_eval_id: Annotated[StrictStr, Field(description="The training or evaluation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Train Eval Info

        Get the training or evaluation job information by its ID

        :param train_eval_id: The training or evaluation ID (required)
        :type train_eval_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_eval_info_serialize(
            train_eval_id=train_eval_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _train_eval_info_serialize(
        self,
        train_eval_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if train_eval_id is not None:
            
            _query_params.append(('train_eval_id', train_eval_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/train_eval_info',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def train_eval_metrics(
        self,
        train_eval_id: Annotated[StrictStr, Field(description="The training or evaluation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Train Eval Metrics

        Get the training or evaluation metrics by its ID (Each metric may contain multiple values for multiple epochs)

        :param train_eval_id: The training or evaluation ID (required)
        :type train_eval_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_eval_metrics_serialize(
            train_eval_id=train_eval_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def train_eval_metrics_with_http_info(
        self,
        train_eval_id: Annotated[StrictStr, Field(description="The training or evaluation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Train Eval Metrics

        Get the training or evaluation metrics by its ID (Each metric may contain multiple values for multiple epochs)

        :param train_eval_id: The training or evaluation ID (required)
        :type train_eval_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_eval_metrics_serialize(
            train_eval_id=train_eval_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def train_eval_metrics_without_preload_content(
        self,
        train_eval_id: Annotated[StrictStr, Field(description="The training or evaluation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Train Eval Metrics

        Get the training or evaluation metrics by its ID (Each metric may contain multiple values for multiple epochs)

        :param train_eval_id: The training or evaluation ID (required)
        :type train_eval_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_eval_metrics_serialize(
            train_eval_id=train_eval_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _train_eval_metrics_serialize(
        self,
        train_eval_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if train_eval_id is not None:
            
            _query_params.append(('train_eval_id', train_eval_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/train_eval_metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def train_metacat(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Train Metacat

        Upload one or more trainer export files and trigger the metacat training

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_metacat_serialize(
            trainer_export=trainer_export,
            epochs=epochs,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def train_metacat_with_http_info(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Train Metacat

        Upload one or more trainer export files and trigger the metacat training

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_metacat_serialize(
            trainer_export=trainer_export,
            epochs=epochs,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def train_metacat_without_preload_content(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Train Metacat

        Upload one or more trainer export files and trigger the metacat training

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_metacat_serialize(
            trainer_export=trainer_export,
            epochs=epochs,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _train_metacat_serialize(
        self,
        trainer_export,
        epochs,
        log_frequency,
        tracking_id,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'trainer_export': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if epochs is not None:
            
            _query_params.append(('epochs', epochs))
            
        if log_frequency is not None:
            
            _query_params.append(('log_frequency', log_frequency))
            
        if tracking_id is not None:
            
            _query_params.append(('tracking_id', tracking_id))
            
        # process the header parameters
        # process the form parameters
        if trainer_export is not None:
            _files['trainer_export'] = trainer_export
        if description is not None:
            _form_params.append(('description', description))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/train_metacat',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def train_supervised(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the test size in percentage. (For a 'huggingface-ner' model, a negative value can be used to apply the train-validation-test split if implicitly defined in trainer export: 'projects[0]' is used for training, 'projects[1]' for validation, and 'projects[2]' for testing)")] = None,
        early_stopping_patience: Annotated[Optional[StrictInt], Field(description="The number of evaluations to wait for improvement before stopping the training. (Non-positive values disable early stopping)")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Train Supervised

        Upload one or more trainer export files and trigger the supervised training

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage. (For a 'huggingface-ner' model, a negative value can be used to apply the train-validation-test split if implicitly defined in trainer export: 'projects[0]' is used for training, 'projects[1]' for validation, and 'projects[2]' for testing)
        :type test_size: float
        :param early_stopping_patience: The number of evaluations to wait for improvement before stopping the training. (Non-positive values disable early stopping)
        :type early_stopping_patience: int
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_supervised_serialize(
            trainer_export=trainer_export,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            early_stopping_patience=early_stopping_patience,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def train_supervised_with_http_info(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the test size in percentage. (For a 'huggingface-ner' model, a negative value can be used to apply the train-validation-test split if implicitly defined in trainer export: 'projects[0]' is used for training, 'projects[1]' for validation, and 'projects[2]' for testing)")] = None,
        early_stopping_patience: Annotated[Optional[StrictInt], Field(description="The number of evaluations to wait for improvement before stopping the training. (Non-positive values disable early stopping)")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Train Supervised

        Upload one or more trainer export files and trigger the supervised training

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage. (For a 'huggingface-ner' model, a negative value can be used to apply the train-validation-test split if implicitly defined in trainer export: 'projects[0]' is used for training, 'projects[1]' for validation, and 'projects[2]' for testing)
        :type test_size: float
        :param early_stopping_patience: The number of evaluations to wait for improvement before stopping the training. (Non-positive values disable early stopping)
        :type early_stopping_patience: int
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_supervised_serialize(
            trainer_export=trainer_export,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            early_stopping_patience=early_stopping_patience,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def train_supervised_without_preload_content(
        self,
        trainer_export: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more trainer export files to be uploaded")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the test size in percentage. (For a 'huggingface-ner' model, a negative value can be used to apply the train-validation-test split if implicitly defined in trainer export: 'projects[0]' is used for training, 'projects[1]' for validation, and 'projects[2]' for testing)")] = None,
        early_stopping_patience: Annotated[Optional[StrictInt], Field(description="The number of evaluations to wait for improvement before stopping the training. (Non-positive values disable early stopping)")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Train Supervised

        Upload one or more trainer export files and trigger the supervised training

        :param trainer_export: One or more trainer export files to be uploaded (required)
        :type trainer_export: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage. (For a 'huggingface-ner' model, a negative value can be used to apply the train-validation-test split if implicitly defined in trainer export: 'projects[0]' is used for training, 'projects[1]' for validation, and 'projects[2]' for testing)
        :type test_size: float
        :param early_stopping_patience: The number of evaluations to wait for improvement before stopping the training. (Non-positive values disable early stopping)
        :type early_stopping_patience: int
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_supervised_serialize(
            trainer_export=trainer_export,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            early_stopping_patience=early_stopping_patience,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _train_supervised_serialize(
        self,
        trainer_export,
        epochs,
        lr_override,
        test_size,
        early_stopping_patience,
        log_frequency,
        tracking_id,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'trainer_export': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if epochs is not None:
            
            _query_params.append(('epochs', epochs))
            
        if lr_override is not None:
            
            _query_params.append(('lr_override', lr_override))
            
        if test_size is not None:
            
            _query_params.append(('test_size', test_size))
            
        if early_stopping_patience is not None:
            
            _query_params.append(('early_stopping_patience', early_stopping_patience))
            
        if log_frequency is not None:
            
            _query_params.append(('log_frequency', log_frequency))
            
        if tracking_id is not None:
            
            _query_params.append(('tracking_id', tracking_id))
            
        # process the header parameters
        # process the form parameters
        if trainer_export is not None:
            _files['trainer_export'] = trainer_export
        if description is not None:
            _form_params.append(('description', description))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/train_supervised',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def train_unsupervised(
        self,
        training_data: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more files to be uploaded and each contains a list of plain texts, in the format of [\\\"text_1\\\", \\\"text_2\\\", ..., \\\"text_n\\\"]")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="The override of the test size in percentage")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Train Unsupervised

        Upload one or more files each containing a list of plain texts and trigger the unsupervised training

        :param training_data: One or more files to be uploaded and each contains a list of plain texts, in the format of [\\\"text_1\\\", \\\"text_2\\\", ..., \\\"text_n\\\"] (required)
        :type training_data: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage
        :type test_size: float
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_unsupervised_serialize(
            training_data=training_data,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def train_unsupervised_with_http_info(
        self,
        training_data: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more files to be uploaded and each contains a list of plain texts, in the format of [\\\"text_1\\\", \\\"text_2\\\", ..., \\\"text_n\\\"]")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="The override of the test size in percentage")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Train Unsupervised

        Upload one or more files each containing a list of plain texts and trigger the unsupervised training

        :param training_data: One or more files to be uploaded and each contains a list of plain texts, in the format of [\\\"text_1\\\", \\\"text_2\\\", ..., \\\"text_n\\\"] (required)
        :type training_data: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage
        :type test_size: float
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_unsupervised_serialize(
            training_data=training_data,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def train_unsupervised_without_preload_content(
        self,
        training_data: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="One or more files to be uploaded and each contains a list of plain texts, in the format of [\\\"text_1\\\", \\\"text_2\\\", ..., \\\"text_n\\\"]")],
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="The override of the test size in percentage")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        description: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Train Unsupervised

        Upload one or more files each containing a list of plain texts and trigger the unsupervised training

        :param training_data: One or more files to be uploaded and each contains a list of plain texts, in the format of [\\\"text_1\\\", \\\"text_2\\\", ..., \\\"text_n\\\"] (required)
        :type training_data: List[bytearray]
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage
        :type test_size: float
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param description:
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_unsupervised_serialize(
            training_data=training_data,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            log_frequency=log_frequency,
            tracking_id=tracking_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _train_unsupervised_serialize(
        self,
        training_data,
        epochs,
        lr_override,
        test_size,
        log_frequency,
        tracking_id,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'training_data': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if epochs is not None:
            
            _query_params.append(('epochs', epochs))
            
        if lr_override is not None:
            
            _query_params.append(('lr_override', lr_override))
            
        if test_size is not None:
            
            _query_params.append(('test_size', test_size))
            
        if log_frequency is not None:
            
            _query_params.append(('log_frequency', log_frequency))
            
        if tracking_id is not None:
            
            _query_params.append(('tracking_id', tracking_id))
            
        # process the header parameters
        # process the form parameters
        if training_data is not None:
            _files['training_data'] = training_data
        if description is not None:
            _form_params.append(('description', description))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/train_unsupervised',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def train_unsupervised_with_hf_dataset(
        self,
        hf_dataset_repo_id: Annotated[Optional[StrictStr], Field(description="The repository ID of the dataset to download from Hugging Face Hub, will be ignored when 'hf_dataset_package' is provided")] = None,
        hf_dataset_config: Annotated[Optional[StrictStr], Field(description="The name of the dataset configuration, will be ignored when 'hf_dataset_package' is provided")] = None,
        trust_remote_code: Annotated[Optional[StrictBool], Field(description="Whether to trust the remote code of the dataset")] = None,
        text_column_name: Annotated[Optional[StrictStr], Field(description="The name of the text column in the dataset")] = None,
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="The override of the test size in percentage will only take effect if the dataset does not have predefined validation or test splits")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        description: Annotated[Optional[StrictStr], Field(description="The description of the training or change logs")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        hf_dataset_package: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Train Unsupervised With Hf Dataset

        Upload or specify an existing Hugging Face dataset and trigger the unsupervised training

        :param hf_dataset_repo_id: The repository ID of the dataset to download from Hugging Face Hub, will be ignored when 'hf_dataset_package' is provided
        :type hf_dataset_repo_id: str
        :param hf_dataset_config: The name of the dataset configuration, will be ignored when 'hf_dataset_package' is provided
        :type hf_dataset_config: str
        :param trust_remote_code: Whether to trust the remote code of the dataset
        :type trust_remote_code: bool
        :param text_column_name: The name of the text column in the dataset
        :type text_column_name: str
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage will only take effect if the dataset does not have predefined validation or test splits
        :type test_size: float
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param description: The description of the training or change logs
        :type description: str
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param hf_dataset_package:
        :type hf_dataset_package: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_unsupervised_with_hf_dataset_serialize(
            hf_dataset_repo_id=hf_dataset_repo_id,
            hf_dataset_config=hf_dataset_config,
            trust_remote_code=trust_remote_code,
            text_column_name=text_column_name,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            log_frequency=log_frequency,
            description=description,
            tracking_id=tracking_id,
            hf_dataset_package=hf_dataset_package,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def train_unsupervised_with_hf_dataset_with_http_info(
        self,
        hf_dataset_repo_id: Annotated[Optional[StrictStr], Field(description="The repository ID of the dataset to download from Hugging Face Hub, will be ignored when 'hf_dataset_package' is provided")] = None,
        hf_dataset_config: Annotated[Optional[StrictStr], Field(description="The name of the dataset configuration, will be ignored when 'hf_dataset_package' is provided")] = None,
        trust_remote_code: Annotated[Optional[StrictBool], Field(description="Whether to trust the remote code of the dataset")] = None,
        text_column_name: Annotated[Optional[StrictStr], Field(description="The name of the text column in the dataset")] = None,
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="The override of the test size in percentage will only take effect if the dataset does not have predefined validation or test splits")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        description: Annotated[Optional[StrictStr], Field(description="The description of the training or change logs")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        hf_dataset_package: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Train Unsupervised With Hf Dataset

        Upload or specify an existing Hugging Face dataset and trigger the unsupervised training

        :param hf_dataset_repo_id: The repository ID of the dataset to download from Hugging Face Hub, will be ignored when 'hf_dataset_package' is provided
        :type hf_dataset_repo_id: str
        :param hf_dataset_config: The name of the dataset configuration, will be ignored when 'hf_dataset_package' is provided
        :type hf_dataset_config: str
        :param trust_remote_code: Whether to trust the remote code of the dataset
        :type trust_remote_code: bool
        :param text_column_name: The name of the text column in the dataset
        :type text_column_name: str
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage will only take effect if the dataset does not have predefined validation or test splits
        :type test_size: float
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param description: The description of the training or change logs
        :type description: str
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param hf_dataset_package:
        :type hf_dataset_package: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_unsupervised_with_hf_dataset_serialize(
            hf_dataset_repo_id=hf_dataset_repo_id,
            hf_dataset_config=hf_dataset_config,
            trust_remote_code=trust_remote_code,
            text_column_name=text_column_name,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            log_frequency=log_frequency,
            description=description,
            tracking_id=tracking_id,
            hf_dataset_package=hf_dataset_package,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def train_unsupervised_with_hf_dataset_without_preload_content(
        self,
        hf_dataset_repo_id: Annotated[Optional[StrictStr], Field(description="The repository ID of the dataset to download from Hugging Face Hub, will be ignored when 'hf_dataset_package' is provided")] = None,
        hf_dataset_config: Annotated[Optional[StrictStr], Field(description="The name of the dataset configuration, will be ignored when 'hf_dataset_package' is provided")] = None,
        trust_remote_code: Annotated[Optional[StrictBool], Field(description="Whether to trust the remote code of the dataset")] = None,
        text_column_name: Annotated[Optional[StrictStr], Field(description="The name of the text column in the dataset")] = None,
        epochs: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of training epochs")] = None,
        lr_override: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The override of the initial learning rate")] = None,
        test_size: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="The override of the test size in percentage will only take effect if the dataset does not have predefined validation or test splits")] = None,
        log_frequency: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of processed documents or epochs after which training metrics will be logged")] = None,
        description: Annotated[Optional[StrictStr], Field(description="The description of the training or change logs")] = None,
        tracking_id: Annotated[Optional[StrictStr], Field(description="The tracking ID of the requested task")] = None,
        hf_dataset_package: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Train Unsupervised With Hf Dataset

        Upload or specify an existing Hugging Face dataset and trigger the unsupervised training

        :param hf_dataset_repo_id: The repository ID of the dataset to download from Hugging Face Hub, will be ignored when 'hf_dataset_package' is provided
        :type hf_dataset_repo_id: str
        :param hf_dataset_config: The name of the dataset configuration, will be ignored when 'hf_dataset_package' is provided
        :type hf_dataset_config: str
        :param trust_remote_code: Whether to trust the remote code of the dataset
        :type trust_remote_code: bool
        :param text_column_name: The name of the text column in the dataset
        :type text_column_name: str
        :param epochs: The number of training epochs
        :type epochs: int
        :param lr_override: The override of the initial learning rate
        :type lr_override: float
        :param test_size: The override of the test size in percentage will only take effect if the dataset does not have predefined validation or test splits
        :type test_size: float
        :param log_frequency: The number of processed documents or epochs after which training metrics will be logged
        :type log_frequency: int
        :param description: The description of the training or change logs
        :type description: str
        :param tracking_id: The tracking ID of the requested task
        :type tracking_id: str
        :param hf_dataset_package:
        :type hf_dataset_package: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._train_unsupervised_with_hf_dataset_serialize(
            hf_dataset_repo_id=hf_dataset_repo_id,
            hf_dataset_config=hf_dataset_config,
            trust_remote_code=trust_remote_code,
            text_column_name=text_column_name,
            epochs=epochs,
            lr_override=lr_override,
            test_size=test_size,
            log_frequency=log_frequency,
            description=description,
            tracking_id=tracking_id,
            hf_dataset_package=hf_dataset_package,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _train_unsupervised_with_hf_dataset_serialize(
        self,
        hf_dataset_repo_id,
        hf_dataset_config,
        trust_remote_code,
        text_column_name,
        epochs,
        lr_override,
        test_size,
        log_frequency,
        description,
        tracking_id,
        hf_dataset_package,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if hf_dataset_repo_id is not None:
            
            _query_params.append(('hf_dataset_repo_id', hf_dataset_repo_id))
            
        if hf_dataset_config is not None:
            
            _query_params.append(('hf_dataset_config', hf_dataset_config))
            
        if trust_remote_code is not None:
            
            _query_params.append(('trust_remote_code', trust_remote_code))
            
        if text_column_name is not None:
            
            _query_params.append(('text_column_name', text_column_name))
            
        if epochs is not None:
            
            _query_params.append(('epochs', epochs))
            
        if lr_override is not None:
            
            _query_params.append(('lr_override', lr_override))
            
        if test_size is not None:
            
            _query_params.append(('test_size', test_size))
            
        if log_frequency is not None:
            
            _query_params.append(('log_frequency', log_frequency))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if tracking_id is not None:
            
            _query_params.append(('tracking_id', tracking_id))
            
        # process the header parameters
        # process the form parameters
        if hf_dataset_package is not None:
            _files['hf_dataset_package'] = hf_dataset_package
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/train_unsupervised_with_hf_hub_dataset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


