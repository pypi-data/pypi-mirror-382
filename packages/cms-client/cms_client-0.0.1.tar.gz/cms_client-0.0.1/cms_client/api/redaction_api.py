# coding: utf-8

"""
    CogStack Model Serve APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Any, List, Optional
from typing_extensions import Annotated
from cms_client.models.text_with_public_key import TextWithPublicKey

from cms_client.api_client import ApiClient, RequestSerialized
from cms_client.api_response import ApiResponse
from cms_client.rest import RESTResponseType


class RedactionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_redacted_text(
        self,
        body: StrictStr,
        concepts_to_keep: Annotated[Optional[List[Optional[StrictStr]]], Field(description="List of concepts (Label IDs) that should not be removedd during the redaction process. List should be in the format ['label1','label2'...]")] = None,
        warn_on_no_redaction: Annotated[Optional[StrictBool], Field(description="Return warning when no entities were detected for redaction to prevent potential info leaking")] = None,
        mask: Annotated[Optional[StrictStr], Field(description="The custom symbols used for masking detected spans")] = None,
        hash: Annotated[Optional[StrictBool], Field(description="Whether or not to hash detected spans")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Redacted Text

        Extract and redact NER entities from a single piece of plain text

        :param body: (required)
        :type body: str
        :param concepts_to_keep: List of concepts (Label IDs) that should not be removedd during the redaction process. List should be in the format ['label1','label2'...]
        :type concepts_to_keep: List[Optional[str]]
        :param warn_on_no_redaction: Return warning when no entities were detected for redaction to prevent potential info leaking
        :type warn_on_no_redaction: bool
        :param mask: The custom symbols used for masking detected spans
        :type mask: str
        :param hash: Whether or not to hash detected spans
        :type hash: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_redacted_text_serialize(
            body=body,
            concepts_to_keep=concepts_to_keep,
            warn_on_no_redaction=warn_on_no_redaction,
            mask=mask,
            hash=hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_redacted_text_with_http_info(
        self,
        body: StrictStr,
        concepts_to_keep: Annotated[Optional[List[Optional[StrictStr]]], Field(description="List of concepts (Label IDs) that should not be removedd during the redaction process. List should be in the format ['label1','label2'...]")] = None,
        warn_on_no_redaction: Annotated[Optional[StrictBool], Field(description="Return warning when no entities were detected for redaction to prevent potential info leaking")] = None,
        mask: Annotated[Optional[StrictStr], Field(description="The custom symbols used for masking detected spans")] = None,
        hash: Annotated[Optional[StrictBool], Field(description="Whether or not to hash detected spans")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Redacted Text

        Extract and redact NER entities from a single piece of plain text

        :param body: (required)
        :type body: str
        :param concepts_to_keep: List of concepts (Label IDs) that should not be removedd during the redaction process. List should be in the format ['label1','label2'...]
        :type concepts_to_keep: List[Optional[str]]
        :param warn_on_no_redaction: Return warning when no entities were detected for redaction to prevent potential info leaking
        :type warn_on_no_redaction: bool
        :param mask: The custom symbols used for masking detected spans
        :type mask: str
        :param hash: Whether or not to hash detected spans
        :type hash: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_redacted_text_serialize(
            body=body,
            concepts_to_keep=concepts_to_keep,
            warn_on_no_redaction=warn_on_no_redaction,
            mask=mask,
            hash=hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_redacted_text_without_preload_content(
        self,
        body: StrictStr,
        concepts_to_keep: Annotated[Optional[List[Optional[StrictStr]]], Field(description="List of concepts (Label IDs) that should not be removedd during the redaction process. List should be in the format ['label1','label2'...]")] = None,
        warn_on_no_redaction: Annotated[Optional[StrictBool], Field(description="Return warning when no entities were detected for redaction to prevent potential info leaking")] = None,
        mask: Annotated[Optional[StrictStr], Field(description="The custom symbols used for masking detected spans")] = None,
        hash: Annotated[Optional[StrictBool], Field(description="Whether or not to hash detected spans")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Redacted Text

        Extract and redact NER entities from a single piece of plain text

        :param body: (required)
        :type body: str
        :param concepts_to_keep: List of concepts (Label IDs) that should not be removedd during the redaction process. List should be in the format ['label1','label2'...]
        :type concepts_to_keep: List[Optional[str]]
        :param warn_on_no_redaction: Return warning when no entities were detected for redaction to prevent potential info leaking
        :type warn_on_no_redaction: bool
        :param mask: The custom symbols used for masking detected spans
        :type mask: str
        :param hash: Whether or not to hash detected spans
        :type hash: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_redacted_text_serialize(
            body=body,
            concepts_to_keep=concepts_to_keep,
            warn_on_no_redaction=warn_on_no_redaction,
            mask=mask,
            hash=hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_redacted_text_serialize(
        self,
        body,
        concepts_to_keep,
        warn_on_no_redaction,
        mask,
        hash,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'concepts_to_keep': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if concepts_to_keep is not None:
            
            _query_params.append(('concepts_to_keep', concepts_to_keep))
            
        if warn_on_no_redaction is not None:
            
            _query_params.append(('warn_on_no_redaction', warn_on_no_redaction))
            
        if mask is not None:
            
            _query_params.append(('mask', mask))
            
        if hash is not None:
            
            _query_params.append(('hash', hash))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'text/plain'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/redact',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_redacted_text_with_encryption(
        self,
        text_with_public_key: TextWithPublicKey,
        warn_on_no_redaction: Annotated[Optional[StrictBool], Field(description="Return warning when no entities were detected for redaction to prevent potential info leaking")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Redacted Text With Encryption

        Redact and encrypt NER entities from a single piece of plain text

        :param text_with_public_key: (required)
        :type text_with_public_key: TextWithPublicKey
        :param warn_on_no_redaction: Return warning when no entities were detected for redaction to prevent potential info leaking
        :type warn_on_no_redaction: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_redacted_text_with_encryption_serialize(
            text_with_public_key=text_with_public_key,
            warn_on_no_redaction=warn_on_no_redaction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_redacted_text_with_encryption_with_http_info(
        self,
        text_with_public_key: TextWithPublicKey,
        warn_on_no_redaction: Annotated[Optional[StrictBool], Field(description="Return warning when no entities were detected for redaction to prevent potential info leaking")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Redacted Text With Encryption

        Redact and encrypt NER entities from a single piece of plain text

        :param text_with_public_key: (required)
        :type text_with_public_key: TextWithPublicKey
        :param warn_on_no_redaction: Return warning when no entities were detected for redaction to prevent potential info leaking
        :type warn_on_no_redaction: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_redacted_text_with_encryption_serialize(
            text_with_public_key=text_with_public_key,
            warn_on_no_redaction=warn_on_no_redaction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_redacted_text_with_encryption_without_preload_content(
        self,
        text_with_public_key: TextWithPublicKey,
        warn_on_no_redaction: Annotated[Optional[StrictBool], Field(description="Return warning when no entities were detected for redaction to prevent potential info leaking")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Redacted Text With Encryption

        Redact and encrypt NER entities from a single piece of plain text

        :param text_with_public_key: (required)
        :type text_with_public_key: TextWithPublicKey
        :param warn_on_no_redaction: Return warning when no entities were detected for redaction to prevent potential info leaking
        :type warn_on_no_redaction: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_redacted_text_with_encryption_serialize(
            text_with_public_key=text_with_public_key,
            warn_on_no_redaction=warn_on_no_redaction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_redacted_text_with_encryption_serialize(
        self,
        text_with_public_key,
        warn_on_no_redaction,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if warn_on_no_redaction is not None:
            
            _query_params.append(('warn_on_no_redaction', warn_on_no_redaction))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if text_with_public_key is not None:
            _body_params = text_with_public_key


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2PasswordBearer', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/redact_with_encryption',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


