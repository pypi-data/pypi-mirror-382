# generated by datamodel-codegen:
#   filename:  methods_directory/physical/ao/other.json
#   version:   0.28.5

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class SlugifiedEntry(BaseModel):
    name: str
    """
    descriptive human-readable name of entry
    """
    slug: str
    """
    machine-readable identifier
    """


class SlugifiedEntryOrSlug(Enum):
    other = "other"


class SlugifiedEntryOrSlug186(Enum):
    ao = "ao"


class SlugifiedEntryOrSlug187(Enum):
    wf = "wf"


class SlugifiedEntryOrSlug188(Enum):
    qm = "qm"


class OtherNeitherPopleNorDunningBasisSetCategorySchema(BaseModel):
    subtype: Optional[Union[SlugifiedEntry, SlugifiedEntryOrSlug]] = Field(None, title="slugified entry or slug")
    """
    contains either object with slugified entry or slug only as a string
    """
    type: Optional[Union[SlugifiedEntry, SlugifiedEntryOrSlug186]] = Field(None, title="slugified entry or slug")
    """
    contains either object with slugified entry or slug only as a string
    """
    tier2: Optional[Union[SlugifiedEntry, SlugifiedEntryOrSlug187]] = Field(None, title="slugified entry or slug")
    """
    contains either object with slugified entry or slug only as a string
    """
    tier1: Optional[Union[SlugifiedEntry, SlugifiedEntryOrSlug188]] = Field(None, title="slugified entry or slug")
    """
    contains either object with slugified entry or slug only as a string
    """
    tier3: Optional[Union[SlugifiedEntry, str]] = Field(None, title="slugified entry or slug")
    """
    contains either object with slugified entry or slug only as a string
    """


class BasisSlug(Enum):
    sto_3g = "sto-3g"
    sto_4g = "sto-4g"
    sto_6g = "sto-6g"
    def2_svp = "def2-svp"
    def2_tzvp = "def2-tzvp"
    def2_qzvp = "def2-qzvp"
    cbs_qb3 = "cbs-qb3"


class Parameters(BaseModel):
    basisSlug: Optional[BasisSlug] = None


class UnitMethodAoOther(BaseModel):
    categories: OtherNeitherPopleNorDunningBasisSetCategorySchema = Field(
        ..., title="Other (neither Pople nor Dunning) basis set category schema"
    )
    """
    Used to categorize entities such as models and methods
    """
    parameters: Optional[Parameters] = None
    """
    Instructive parameters defining the method
    """
    precision: Optional[Dict[str, Any]] = None
    """
    Object showing the actual possible precision based on theory and implementation
    """
    name: Optional[str] = None
    """
    entity name
    """
    path: Optional[str] = Field(None, title="category path schema")
    """
    TODO: Use regex once schema draft version has been updated
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """


class AoBasisOther(BaseModel):
    basisSlug: Optional[BasisSlug] = None
