# generated by datamodel-codegen:
#   filename:  property/base.json
#   version:   0.28.5

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel, constr


class Name(Enum):
    ionization_potential = "ionization_potential"


class Units(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class IonizationPotentialElementalPropertySchema(BaseModel):
    name: Name
    units: Units
    value: float


class Name31(Enum):
    valence_band_offset = "valence_band_offset"


class Units19(Enum):
    eV_A_2 = "eV/A^2"


class ValenceBandOffsetPropertySchema(BaseModel):
    name: Name31
    units: Union[Units, Units19]
    value: float


class Name32(Enum):
    zero_point_energy = "zero_point_energy"


class Units20(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units21(Enum):
    eV_A_2 = "eV/A^2"


class ZeroPointEnergyPropertySchema(BaseModel):
    name: Name32
    units: Union[Units20, Units21]
    value: float


class Name33(Enum):
    pressure = "pressure"


class Units22(Enum):
    kbar = "kbar"
    pa = "pa"


class PressurePropertySchema(BaseModel):
    name: Name33
    units: Units22
    value: float


class Name34(Enum):
    reaction_energy_barrier = "reaction_energy_barrier"


class Units23(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units24(Enum):
    eV_A_2 = "eV/A^2"


class ReactionEnergyBarrierPropertySchema(BaseModel):
    name: Name34
    units: Union[Units23, Units24]
    value: float


class Name35(Enum):
    surface_energy = "surface_energy"


class Units25(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units26(Enum):
    eV_A_2 = "eV/A^2"


class SurfaceEnergyPropertySchema(BaseModel):
    name: Name35
    units: Union[Units25, Units26]
    value: float


class Name36(Enum):
    total_energy = "total_energy"


class Units27(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units28(Enum):
    eV_A_2 = "eV/A^2"


class TotalEnergyPropertySchema(BaseModel):
    name: Name36
    units: Union[Units27, Units28]
    value: float


class Name37(Enum):
    total_force = "total_force"


class Units29(Enum):
    eV_bohr = "eV/bohr"
    eV_angstrom = "eV/angstrom"
    Ry_a_u_ = "Ry/a.u."
    newton = "newton"
    kg_m_s_2 = "kg*m/s^2"
    eV_a_u_ = "eV/a.u."


class TotalForcesPropertySchema(BaseModel):
    name: Name37
    units: Units29
    value: float


class Name38(Enum):
    electron_affinity = "electron_affinity"


class Units30(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units31(Enum):
    eV_A_2 = "eV/A^2"


class ElectronAffinityPropertySchema(BaseModel):
    name: Name38
    units: Union[Units30, Units31]
    value: float


class Name39(Enum):
    fermi_energy = "fermi_energy"


class Units32(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units33(Enum):
    eV_A_2 = "eV/A^2"


class FermiEnergyPropertySchema(BaseModel):
    name: Name39
    units: Union[Units32, Units33]
    value: float


class Name40(Enum):
    formation_energy = "formation_energy"


class Units34(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units35(Enum):
    eV_A_2 = "eV/A^2"


class FormationEnergyPropertySchema(BaseModel):
    name: Name40
    units: Union[Units34, Units35]
    value: float


class Name41(Enum):
    ionization_potential = "ionization_potential"


class Units36(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units37(Enum):
    eV_A_2 = "eV/A^2"


class IonizationPotentialScalarPropertySchema(BaseModel):
    name: Name41
    units: Union[Units36, Units37]
    value: float


class ArrayOf3NumberElementsSchema(RootModel[List[float]]):
    root: List[float] = Field(..., title="array of 3 number elements schema")


class Name42(Enum):
    stress_tensor = "stress_tensor"


class Units38(Enum):
    kbar = "kbar"
    pa = "pa"


class StressTensorPropertySchema(BaseModel):
    value: List[ArrayOf3NumberElementsSchema] = Field(..., max_length=3, min_length=3, title="matrix 3x3 schema")
    name: Name42
    units: Units38


class Name43(Enum):
    band_gaps = "band_gaps"


class Type(Enum):
    direct = "direct"
    indirect = "indirect"


class Units39(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class BandGapSchema(BaseModel):
    kpointConduction: Optional[List[float]] = Field(None, max_length=3, min_length=3, title="kpoint schema")
    """
    A k-point is a point in reciprocal space of a crystal.
    """
    kpointValence: Optional[List[float]] = Field(None, max_length=3, min_length=3, title="kpoint schema")
    """
    A k-point is a point in reciprocal space of a crystal.
    """
    eigenvalueConduction: Optional[float] = None
    """
    eigenvalue at k-point in conduction band
    """
    eigenvalueValence: Optional[float] = None
    """
    eigenvalue at k-point in valence band
    """
    spin: Optional[float] = None
    type: Type
    units: Optional[Units39] = None
    value: float


class Eigenvalue(BaseModel):
    spin: Optional[float] = None
    energies: Optional[List] = None
    occupations: Optional[List] = None


class Eigenvalue2(BaseModel):
    kpoint: Optional[List[float]] = Field(None, max_length=3, min_length=3, title="kpoint schema")
    """
    A k-point is a point in reciprocal space of a crystal.
    """
    weight: Optional[float] = None
    eigenvalues: Optional[List[Eigenvalue]] = None


class BandGapsPropertySchema(BaseModel):
    name: Name43
    values: List[BandGapSchema]
    eigenvalues: Optional[List[Eigenvalue2]] = None


class Label(Enum):
    kpoints = "kpoints"


class Units40(Enum):
    crystal = "crystal"
    cartesian = "cartesian"


class AxisSchema(BaseModel):
    label: Label
    """
    label of an axis object
    """
    units: Optional[Units40] = "crystal"
    """
    units for an axis
    """


class Label5(Enum):
    energy = "energy"


class Units41(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class AxisSchema8(BaseModel):
    label: Label5
    """
    label of an axis object
    """
    units: Optional[Units41] = None
    """
    units for an axis
    """


class Name44(Enum):
    band_structure = "band_structure"


class SpinEnum(Enum):
    number_0_5 = 0.5
    number__0_5 = -0.5


class BandStructurePropertySchema(BaseModel):
    xAxis: AxisSchema = Field(..., title="axis schema")
    yAxis: AxisSchema8 = Field(..., title="axis schema")
    name: Name44
    spin: List[SpinEnum]
    """
    spin of each band
    """
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label6(Enum):
    qpoints = "qpoints"


class Units42(Enum):
    crystal = "crystal"
    cartesian = "cartesian"


class AxisSchema9(BaseModel):
    label: Label6
    """
    label of an axis object
    """
    units: Optional[Units42] = "crystal"
    """
    units for an axis
    """


class Label7(Enum):
    frequency = "frequency"


class Units43(Enum):
    cm_1 = "cm-1"
    THz = "THz"
    meV = "meV"


class AxisSchema10(BaseModel):
    label: Label7
    """
    label of an axis object
    """
    units: Optional[Units43] = None
    """
    units for an axis
    """


class Name45(Enum):
    phonon_dispersions = "phonon_dispersions"


class PhononBandStructurePropertySchema(BaseModel):
    xAxis: AxisSchema9 = Field(..., title="axis schema")
    yAxis: AxisSchema10 = Field(..., title="axis schema")
    name: Name45
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Name46(Enum):
    temperature_entropy = "temperature_entropy"


class ScalarSchema(BaseModel):
    name: Optional[Name46] = None
    value: float


class Name47(Enum):
    harris_foulkes = "harris_foulkes"


class ScalarSchema5(BaseModel):
    name: Optional[Name47] = None
    value: float


class Name48(Enum):
    smearing = "smearing"


class ScalarSchema6(BaseModel):
    name: Optional[Name48] = None
    value: float


class Name49(Enum):
    one_electron = "one_electron"


class ScalarSchema7(BaseModel):
    name: Optional[Name49] = None
    value: float


class Name50(Enum):
    hartree = "hartree"


class ScalarSchema8(BaseModel):
    name: Optional[Name50] = None
    value: float


class Name51(Enum):
    exchange = "exchange"


class ScalarSchema9(BaseModel):
    name: Optional[Name51] = None
    value: float


class Name52(Enum):
    exchange_correlation = "exchange_correlation"


class ScalarSchema10(BaseModel):
    name: Optional[Name52] = None
    value: float


class Name53(Enum):
    ewald = "ewald"


class ScalarSchema11(BaseModel):
    name: Optional[Name53] = None
    value: float


class Name54(Enum):
    alphaZ = "alphaZ"


class ScalarSchema12(BaseModel):
    name: Optional[Name54] = None
    value: float


class Name55(Enum):
    atomic_energy = "atomic_energy"


class ScalarSchema13(BaseModel):
    name: Optional[Name55] = None
    value: float


class Name56(Enum):
    eigenvalues = "eigenvalues"


class ScalarSchema14(BaseModel):
    name: Optional[Name56] = None
    value: float


class Name57(Enum):
    PAW_double_counting_correction_2 = "PAW_double-counting_correction_2"


class ScalarSchema15(BaseModel):
    name: Optional[Name57] = None
    value: float


class Name58(Enum):
    PAW_double_counting_correction_3 = "PAW_double-counting_correction_3"


class ScalarSchema16(BaseModel):
    name: Optional[Name58] = None
    value: float


class Name59(Enum):
    hartree_fock = "hartree_fock"


class ScalarSchema17(BaseModel):
    name: Optional[Name59] = None
    value: float


class Name60(Enum):
    total_energy_contributions = "total_energy_contributions"


class Units44(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class TotalEnergyContributionsPropertySchema(BaseModel):
    temperatureEntropy: Optional[ScalarSchema] = Field(None, title="scalar schema")
    """
    product of temperature and configurational entropy
    """
    harris_foulkes: Optional[ScalarSchema5] = Field(None, title="scalar schema")
    """
    non self-consitent energy based on an input charge density
    """
    smearing: Optional[ScalarSchema6] = Field(None, title="scalar schema")
    """
    smearing energy
    """
    one_electron: Optional[ScalarSchema7] = Field(None, title="scalar schema")
    """
    kinetic + pseudopotential energy
    """
    hartree: Optional[ScalarSchema8] = Field(None, title="scalar schema")
    """
    energy due to coulomb potential
    """
    exchange: Optional[ScalarSchema9] = Field(None, title="scalar schema")
    """
    exchange energy
    """
    exchange_correlation: Optional[ScalarSchema10] = Field(None, title="scalar schema")
    """
    exchange and correlation energy per particle
    """
    ewald: Optional[ScalarSchema11] = Field(None, title="scalar schema")
    """
    summation of interaction energies at long length scales due to coloumbic interactions
    """
    alphaZ: Optional[ScalarSchema12] = Field(None, title="scalar schema")
    """
    divergent electrostatic ion interaction in compensating electron gas
    """
    atomicEnergy: Optional[ScalarSchema13] = Field(None, title="scalar schema")
    """
    kinetic energy of wavefunctions in the atomic limit
    """
    eigenvalues: Optional[ScalarSchema14] = Field(None, title="scalar schema")
    """
    sum of one electron energies of kinetic, electrostatic, and exchange correlation
    """
    PAWDoubleCounting2: Optional[ScalarSchema15] = Field(None, title="scalar schema")
    """
    double counting correction 2
    """
    PAWDoubleCounting3: Optional[ScalarSchema16] = Field(None, title="scalar schema")
    """
    double counting correction 3
    """
    hartreeFock: Optional[ScalarSchema17] = Field(None, title="scalar schema")
    """
    hartree-fock contribution
    """
    name: Name60
    units: Optional[Units44] = None


class Label8(Enum):
    frequency = "frequency"
    wavenumber = "wavenumber"


class Units45(Enum):
    cm_1 = "cm-1"
    THz = "THz"
    meV = "meV"


class AxisSchema11(BaseModel):
    label: Label8
    """
    label of an axis object
    """
    units: Optional[Units45] = None
    """
    units for an axis
    """


class Label9(Enum):
    Intensity = "Intensity"
    Absorbance = "Absorbance"
    Absorption_coefficient = "Absorption coefficient"


class Units46(Enum):
    field_debye_angstrom__2 = "(debye/angstrom)^2"
    km_mol = "km/mol"
    m_mol = "m/mol"
    a_u_ = "a.u."


class AxisSchema12(BaseModel):
    label: Label9
    """
    label of an axis object
    """
    units: Optional[Units46] = None
    """
    units for an axis
    """


class Name61(Enum):
    vibrational_spectrum = "vibrational_spectrum"


class VibrationalSpectrumPropertySchema(BaseModel):
    xAxis: AxisSchema11 = Field(..., title="axis schema")
    yAxis: AxisSchema12 = Field(..., title="axis schema")
    name: Name61
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label10(Enum):
    frequency = "frequency"


class Units47(Enum):
    cm_1 = "cm-1"
    THz = "THz"
    meV = "meV"


class AxisSchema13(BaseModel):
    label: Label10
    """
    label of an axis object
    """
    units: Optional[Units47] = None
    """
    units for an axis
    """


class Label11(Enum):
    Phonon_DOS = "Phonon DOS"


class Units48(Enum):
    states_cm_1 = "states/cm-1"
    states_THz = "states/THz"
    states_meV = "states/meV"


class AxisSchema14(BaseModel):
    label: Label11
    """
    label of an axis object
    """
    units: Optional[Units48] = None
    """
    units for an axis
    """


class Name62(Enum):
    phonon_dos = "phonon_dos"


class PhononDensityOfStatesPropertySchema(BaseModel):
    xAxis: AxisSchema13 = Field(..., title="axis schema")
    yAxis: AxisSchema14 = Field(..., title="axis schema")
    name: Name62
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label12(Enum):
    z_coordinate = "z coordinate"


class AxisSchema15(BaseModel):
    label: Label12
    """
    label of an axis object
    """
    units: Optional[str] = None
    """
    units for an axis
    """


class Label13(Enum):
    energy = "energy"


class Units49(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class AxisSchema16(BaseModel):
    label: Label13
    """
    label of an axis object
    """
    units: Optional[Units49] = None
    """
    units for an axis
    """


class Name63(Enum):
    potential_profile = "potential_profile"


class PotentialProfilePropertySchema(BaseModel):
    xAxis: AxisSchema15 = Field(..., title="axis schema")
    yAxis: AxisSchema16 = Field(..., title="axis schema")
    name: Name63
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label14(Enum):
    reaction_coordinate = "reaction coordinate"


class AxisSchema17(BaseModel):
    label: Label14
    """
    label of an axis object
    """
    units: Optional[str] = None
    """
    units for an axis
    """


class Label15(Enum):
    energy = "energy"


class AxisSchema18(BaseModel):
    label: Label15
    """
    label of an axis object
    """
    units: Optional[Units49] = None
    """
    units for an axis
    """


class Name64(Enum):
    reaction_energy_profile = "reaction_energy_profile"


class ReactionEnergyProfilePropertySchema(BaseModel):
    xAxis: AxisSchema17 = Field(..., title="axis schema")
    yAxis: AxisSchema18 = Field(..., title="axis schema")
    name: Name64
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class AxisSchema19(BaseModel):
    label: Label15
    """
    label of an axis object
    """
    units: Optional[Units49] = None
    """
    units for an axis
    """


class Label17(Enum):
    density_of_states = "density of states"


class Units52(Enum):
    states_unitcell = "states/unitcell"


class AxisSchema20(BaseModel):
    label: Label17
    """
    label of an axis object
    """
    units: Optional[Units52] = None
    """
    units for an axis
    """


class Name65(Enum):
    density_of_states = "density_of_states"


class Spin(Enum):
    number_0_5 = 0.5
    number__0_5 = -0.5


class LegendItem(BaseModel):
    element: Optional[str] = None
    """
    chemical element
    """
    index: Optional[int] = None
    """
    index inside sub-array of atoms of the same element type
    """
    electronicState: Optional[constr(pattern=r"^([1-5]{1})?(s|p|d|f|g).*$")] = None
    """
    electronic character and shell of PDOS, such as `1s` or `s`, or `total`
    """
    spin: Optional[Spin] = None
    """
    spin of the electronic state
    """


class DensityOfStatesPropertySchema(BaseModel):
    xAxis: AxisSchema19 = Field(..., title="axis schema")
    yAxis: AxisSchema20 = Field(..., title="axis schema")
    name: Name65
    legend: List[LegendItem]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Name66(Enum):
    dielectric_tensor = "dielectric_tensor"


class Part(Enum):
    real = "real"
    imaginary = "imaginary"


class DielectricTensor(BaseModel):
    part: Part
    """
    Real or imaginary part of the dielectric tensor component
    """
    spin: Optional[float] = None
    frequencies: List[float]
    """
    Frequencies
    """
    components: List[List[float]]
    """
    Matrix with 3 columns, e.g. x, y, z
    """


class DielectricTensorPropertySchema(BaseModel):
    name: Name66
    values: List[DielectricTensor]


class Name67(Enum):
    file_content = "file_content"


class Filetype(Enum):
    image = "image"
    text = "text"
    csv = "csv"


class ObjectStorageContainerData(BaseModel):
    CONTAINER: Optional[str] = None
    """
    Object storage container for the file
    """
    NAME: Optional[str] = None
    """
    Name of the file inside the object storage bucket
    """
    PROVIDER: Optional[str] = None
    """
    Object storage provider
    """
    REGION: Optional[str] = None
    """
    Region for the object container specified in Container
    """
    SIZE: Optional[int] = None
    """
    Size of the file in bytes
    """
    TIMESTAMP: Optional[str] = None
    """
    Unix timestamp showing when the file was last modified
    """


class FileContentPropertySchema(BaseModel):
    name: Name67
    filetype: Filetype
    """
    What kind of file this is, e.g. image / text
    """
    objectData: ObjectStorageContainerData = Field(..., title="Object Storage Container Data")
    pathname: Optional[str] = None
    """
    Relative path to the directory that contains the file.
    """
    basename: Optional[str] = None
    """
    Basename of the file
    """


class Name68(Enum):
    hubbard_u = "hubbard_u"


class Units53(Enum):
    eV = "eV"


class AtomicDataPerOrbitalNumeric(BaseModel):
    id: int
    """
    Site number or index in the lattice
    """
    atomicSpecies: constr(pattern=r"^[a-zA-Z]{1,2}[\d+]?$")
    """
    Example: Co1, Mn
    """
    orbitalName: constr(pattern=r"^[1-7][sSpPdDfF]$")
    value: float
    """
    Value related to a specific property, e.g., Hubbard U, V etc.
    """


class HubbardUParametersPropertySchema(BaseModel):
    name: Name68
    units: Units53
    values: List[AtomicDataPerOrbitalNumeric]


class Name69(Enum):
    hubbard_v = "hubbard_v"


class AtomicDataPerOrbitalPairNumeric(BaseModel):
    id: int
    """
    Site number or index in the lattice
    """
    id2: int
    """
    Site number or index in the lattice of second site
    """
    atomicSpecies: constr(pattern=r"^[a-zA-Z]{1,2}[\d+]?$")
    """
    Example: Co1, Mn
    """
    atomicSpecies2: constr(pattern=r"^[a-zA-Z]{1,2}[\d+]?$")
    """
    Example: Co2, O
    """
    orbitalName: Optional[constr(pattern=r"^[1-7][sSpPdDfF]$")] = None
    orbitalName2: Optional[constr(pattern=r"^[1-7][sSpPdDfF]$")] = None
    distance: Optional[float] = None
    """
    Distance between two sites in Bohr.
    """
    value: float
    """
    Value related to a specific property, e.g., Hubbard U, V etc.
    """


class HubbardVParametersPropertySchema(BaseModel):
    name: Name69
    units: Units53
    values: List[AtomicDataPerOrbitalPairNumeric]


class Name70(Enum):
    hubbard_v_nn = "hubbard_v_nn"


class HubbardVNNParametersPropertySchema(BaseModel):
    name: Name70
    units: Units53
    values: List[AtomicDataPerOrbitalPairNumeric]


class Label18(Enum):
    z_coordinate = "z coordinate"


class Units56(Enum):
    km = "km"
    m = "m"
    cm = "cm"
    mm = "mm"
    um = "um"
    nm = "nm"
    angstrom = "angstrom"
    a_u_ = "a.u."
    bohr = "bohr"
    pm = "pm"


class AxisSchema21(BaseModel):
    label: Label18
    """
    label of an axis object
    """
    units: Optional[Units56] = None
    """
    units for an axis
    """


class Label19(Enum):
    energy = "energy"


class Units57(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class AxisSchema22(BaseModel):
    label: Label19
    """
    label of an axis object
    """
    units: Optional[Units57] = None
    """
    units for an axis
    """


class Name71(Enum):
    average_potential_profile = "average_potential_profile"


class AveragePotentialProfilePropertySchema(BaseModel):
    xAxis: AxisSchema21 = Field(..., title="axis schema")
    yAxis: AxisSchema22 = Field(..., title="axis schema")
    name: Name71
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label20(Enum):
    z_coordinate = "z coordinate"


class AxisSchema23(BaseModel):
    label: Label20
    """
    label of an axis object
    """
    units: Optional[str] = None
    """
    units for an axis
    """


class Label21(Enum):
    charge_density = "charge density"


class Units58(Enum):
    e_A = "e/A"


class AxisSchema24(BaseModel):
    label: Label21
    """
    label of an axis object
    """
    units: Optional[Units58] = None
    """
    units for an axis
    """


class Name72(Enum):
    charge_density_profile = "charge_density_profile"


class ChargeDensityProfilePropertySchema(BaseModel):
    xAxis: AxisSchema23 = Field(..., title="axis schema")
    yAxis: AxisSchema24 = Field(..., title="axis schema")
    name: Name72
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Name73(Enum):
    magnetic_moments = "magnetic_moments"


class AtomicVectorSchema(BaseModel):
    value: List[float] = Field(..., max_length=3, min_length=3, title="vector 3d schema")
    """
    value of this entry
    """
    id: int
    """
    integer id of this entry
    """


class Units59(Enum):
    uB = "uB"


class MagneticMomentsPropertySchema(BaseModel):
    name: Name73
    values: List[AtomicVectorSchema] = Field(..., title="atomic vectors schema")
    units: Units59


class Name74(Enum):
    atomic_forces = "atomic_forces"


class Units60(Enum):
    eV_bohr = "eV/bohr"
    eV_angstrom = "eV/angstrom"
    Ry_a_u_ = "Ry/a.u."
    newton = "newton"
    kg_m_s_2 = "kg*m/s^2"
    eV_a_u_ = "eV/a.u."


class AtomicForcesPropertySchema(BaseModel):
    name: Name74
    values: List[AtomicVectorSchema] = Field(..., title="atomic vectors schema")
    units: Units60


class Name75(Enum):
    atomic_constraints = "atomic_constraints"


class AtomicConstraintSchema(BaseModel):
    value: List[bool] = Field(..., title="vector boolean 3d schema")
    """
    value of this entry
    """
    id: int
    """
    integer id of this entry
    """


class AtomicConstraintsPropertySchema(BaseModel):
    name: Name75
    values: List[AtomicConstraintSchema] = Field(..., title="atomic constraints schema")
    """
    atomic constraints schema
    """


class Name76(Enum):
    functional_group = "functional_group"


class ObjectWithId(BaseModel):
    isConnector: Optional[bool] = None
    """
    whether atom connects to atoms outside of functional group.
    """
    id: int
    """
    integer id of this entry
    """


class FunctionalGroupPatternSchema(BaseModel):
    name: Name76
    atoms: Optional[List[ObjectWithId]] = Field(None, title="array of ids")
    """
    array of objects containing integer id each
    """
    SMARTS: Optional[str] = None
    """
    SMARTS string for classification of FG; https://en.wikipedia.org/wiki/SMILES_arbitrary_target_specification
    """


class Name77(Enum):
    ring = "ring"


class RingPatternSchema(BaseModel):
    name: Name77
    atoms: Optional[List[ObjectWithId]] = Field(None, title="array of ids")
    """
    array of objects containing integer id each
    """
    isAromatic: Optional[bool] = None


class Name78(Enum):
    special_bond = "special_bond"


class SpecialBondPatternSchema(BaseModel):
    name: Name78
    atoms: Optional[List[ObjectWithId]] = Field(None, title="array of ids")
    """
    array of objects containing integer id each
    """


class Name79(Enum):
    convergence_electronic = "convergence_electronic"


class Units61(Enum):
    eV = "eV"
    Ry = "Ry"
    hartree = "hartree"


class ConvergenceElectronicPropertySchema(BaseModel):
    name: Name79
    units: Units61
    data: List[List[float]]


class Name80(Enum):
    convergence_ionic = "convergence_ionic"


class Units62(Enum):
    eV = "eV"


class Units63(Enum):
    eV = "eV"
    Ry = "Ry"
    hartree = "hartree"


class Electronic(BaseModel):
    units: Optional[Units63] = None
    """
    units for force tolerance
    """
    data: Optional[List[float]] = None


class Datum(BaseModel):
    energy: float
    """
    converged electronic energy for this structure (last in `electronic`)
    """
    structure: Optional[Dict[str, Any]] = None
    """
    TODO: structural information at each step to be here
    """
    electronic: Optional[Electronic] = None
    """
    data about electronic at this ionic step
    """


class ConvergenceIonicPropertySchema(BaseModel):
    name: Name80
    tolerance: Optional[Any] = None
    """
    for ionic convergence tolerance shows force tolerance
    """
    units: Units62
    """
    units for force tolerance
    """
    data: List[Datum]
    """
    energetic and structural information
    """


class Info(BaseModel):
    jobId: str
    """
    Job's identity
    """
    unitId: str
    """
    Id of the unit that extracted the result
    """


class Type5(Enum):
    experiment = "experiment"


class ExperimentAuthorSchema(BaseModel):
    first: str
    middle: Optional[str] = None
    last: str
    affiliation: Optional[str] = None


class ScalarItem(BaseModel):
    value: Optional[str] = None


class ConditionSchema(BaseModel):
    units: Optional[str] = None
    """
    condition unit
    """
    scalar: Optional[List[ScalarItem]] = None
    """
    array of condition values
    """
    name: str
    """
    human-readable name of the condition
    """


class LocationSchema(BaseModel):
    latitude: float
    """
    location latitude
    """
    longitude: float
    """
    location longitude
    """


class Type6(Enum):
    literature = "literature"


class PagesSchema(BaseModel):
    start: str
    end: Optional[str] = None


class LiteratureReferenceSchema(BaseModel):
    type: Optional[Type6] = None
    doi: Optional[str] = None
    """
    Digital Object Identifier of the reference.
    """
    isbn: Optional[str] = None
    """
    International Standard Book Number of the reference.
    """
    issn: Optional[str] = None
    """
    International Standard Serial Number of the reference.
    """
    url: Optional[str] = None
    """
    Internet address of the reference.
    """
    title: Optional[str] = None
    """
    Title of the work.
    """
    publisher: Optional[str] = None
    """
    Publisher of the work.
    """
    journal: Optional[str] = None
    """
    Journal in which the work appeared.
    """
    volume: Optional[str] = None
    """
    Volume of the series in which the work appeared.
    """
    year: Optional[str] = None
    """
    Year in which the reference was published.
    """
    issue: Optional[str] = None
    """
    Issue of the collection in which the work appeared.
    """
    pages: Optional[PagesSchema] = Field(None, title="pages schema")
    """
    Start and end pages of the work.
    """
    authors: Optional[List[ExperimentAuthorSchema]] = None
    """
    List of authors of the work.
    """
    editors: Optional[List[ExperimentAuthorSchema]] = None
    """
    List of editors of the work.
    """
    reference: Optional[List[Dict[str, Any]]] = None
    """
    References cited by the work. Reference objects can nest as deeply as needed. This is useful, for example, when tracking the history of a value referenced in a scholarly article; the top level reference would contain information about where the data was accessed while the nested reference would contain information about where it was originally published.
    """


class InfoForCharacteristicObtainedByExperiment(BaseModel):
    type: Optional[Type5] = None
    authors: List[ExperimentAuthorSchema]
    """
    experiment authors
    """
    title: str
    """
    experiment title
    """
    method: str
    """
    method used in experiment
    """
    conditions: List[ConditionSchema]
    location: Optional[LocationSchema] = Field(None, title="location schema")
    timestamp: float
    """
    epoch time.
    """
    note: Optional[str] = None
    """
    Note about experiment
    """
    references: Optional[List[LiteratureReferenceSchema]] = None
    """
    references to literature articles
    """


class PropertySourceSchema(BaseModel):
    type: Optional[str] = None
    """
    Type of the material property's source.
    """
    url: Optional[str] = None
    """
    Internet address of the reference.
    """
    info: Union[Info, InfoForCharacteristicObtainedByExperiment]


class SystemTag(Enum):
    isRefined = "isRefined"
    isBest = "isBest"


class PropertyBaseSchema(BaseModel):
    slug: Optional[str] = None
    """
    property slug, e.g. total_energy
    """
    group: Optional[str] = None
    """
    property group, e.g. qe:dft:gga:pbe
    """
    data: Union[
        IonizationPotentialElementalPropertySchema,
        ValenceBandOffsetPropertySchema,
        ZeroPointEnergyPropertySchema,
        PressurePropertySchema,
        ReactionEnergyBarrierPropertySchema,
        SurfaceEnergyPropertySchema,
        TotalEnergyPropertySchema,
        TotalForcesPropertySchema,
        ElectronAffinityPropertySchema,
        FermiEnergyPropertySchema,
        FormationEnergyPropertySchema,
        IonizationPotentialScalarPropertySchema,
        StressTensorPropertySchema,
        BandGapsPropertySchema,
        BandStructurePropertySchema,
        PhononBandStructurePropertySchema,
        TotalEnergyContributionsPropertySchema,
        VibrationalSpectrumPropertySchema,
        PhononDensityOfStatesPropertySchema,
        PotentialProfilePropertySchema,
        ReactionEnergyProfilePropertySchema,
        DensityOfStatesPropertySchema,
        DielectricTensorPropertySchema,
        FileContentPropertySchema,
        HubbardUParametersPropertySchema,
        HubbardVParametersPropertySchema,
        HubbardVNNParametersPropertySchema,
        AveragePotentialProfilePropertySchema,
        ChargeDensityProfilePropertySchema,
        MagneticMomentsPropertySchema,
        AtomicForcesPropertySchema,
        AtomicConstraintsPropertySchema,
        FunctionalGroupPatternSchema,
        RingPatternSchema,
        SpecialBondPatternSchema,
        ConvergenceElectronicPropertySchema,
        ConvergenceIonicPropertySchema,
    ]
    """
    container of the information, specific to each property
    """
    source: PropertySourceSchema = Field(..., title="Property source schema")
    exabyteId: Optional[List[str]] = None
    """
    Id of the corresponding item in the entity bank that this property is obtained for
    """
    precision: Optional[Dict[str, Any]] = None
    count: Optional[float] = None
    """
    total number of properties among which this property is the best.
    """
    systemTags: Optional[List[SystemTag]] = None
    """
    property system tags, marks property system characteristics, values refined or best (could be both)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
