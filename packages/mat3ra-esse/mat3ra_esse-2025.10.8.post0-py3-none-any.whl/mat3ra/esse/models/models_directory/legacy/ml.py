# generated by datamodel-codegen:
#   filename:  models_directory/legacy/ml.json
#   version:   0.28.5

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    ml = "ml"


class Subtype(Enum):
    re = "re"


class BaseMethod(BaseModel):
    type: str
    """
    general type of this method, eg. `pseudopotential`
    """
    subtype: str
    """
    general subtype of this method, eg. `ultra-soft`
    """
    precision: Optional[Dict[str, Any]] = None
    """
    Object showing the actual possible precision based on theory and implementation
    """
    data: Optional[Dict[str, Any]] = None
    """
    additional data specific to method, eg. array of pseudopotentials
    """


class LegacyModelRegression(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Type
    """
    general type of the model, eg. `dft`
    """
    subtype: Subtype
    """
    general subtype of the model, eg. `lda`
    """
    method: BaseMethod = Field(..., title="base method")
