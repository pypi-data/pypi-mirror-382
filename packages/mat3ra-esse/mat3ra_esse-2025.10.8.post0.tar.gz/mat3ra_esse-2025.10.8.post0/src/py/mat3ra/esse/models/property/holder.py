# generated by datamodel-codegen:
#   filename:  property/holder.json
#   version:   0.28.5

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class Name(Enum):
    valence_band_offset = "valence_band_offset"


class Units(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units192(Enum):
    eV_A_2 = "eV/A^2"


class ValenceBandOffsetPropertySchema(BaseModel):
    name: Literal["0#-datamodel-code-generator-#-object-#-special-#"]
    units: Union[Units, Units192]
    value: float


class Name476(Enum):
    zero_point_energy = "zero_point_energy"


class Units193(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units194(Enum):
    eV_A_2 = "eV/A^2"


class ZeroPointEnergyPropertySchema(BaseModel):
    name: Literal["1#-datamodel-code-generator-#-object-#-special-#"]
    units: Union[Units193, Units194]
    value: float


class Name477(Enum):
    pressure = "pressure"


class Units195(Enum):
    kbar = "kbar"
    pa = "pa"


class PressurePropertySchema(BaseModel):
    name: Literal["2#-datamodel-code-generator-#-object-#-special-#"]
    units: Units195
    value: float


class Name478(Enum):
    reaction_energy_barrier = "reaction_energy_barrier"


class Units196(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units197(Enum):
    eV_A_2 = "eV/A^2"


class ReactionEnergyBarrierPropertySchema(BaseModel):
    name: Literal["3#-datamodel-code-generator-#-object-#-special-#"]
    units: Union[Units196, Units197]
    value: float


class Name479(Enum):
    surface_energy = "surface_energy"


class Units198(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units199(Enum):
    eV_A_2 = "eV/A^2"


class SurfaceEnergyPropertySchema(BaseModel):
    name: Literal["4#-datamodel-code-generator-#-object-#-special-#"]
    units: Union[Units198, Units199]
    value: float


class Name480(Enum):
    total_energy = "total_energy"


class Units200(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units201(Enum):
    eV_A_2 = "eV/A^2"


class TotalEnergyPropertySchema(BaseModel):
    name: Literal["5#-datamodel-code-generator-#-object-#-special-#"]
    units: Union[Units200, Units201]
    value: float


class Name481(Enum):
    total_force = "total_force"


class Units202(Enum):
    eV_bohr = "eV/bohr"
    eV_angstrom = "eV/angstrom"
    Ry_a_u_ = "Ry/a.u."
    newton = "newton"
    kg_m_s_2 = "kg*m/s^2"
    eV_a_u_ = "eV/a.u."


class TotalForcesPropertySchema(BaseModel):
    name: Literal["6#-datamodel-code-generator-#-object-#-special-#"]
    units: Units202
    value: float


class Name482(Enum):
    fermi_energy = "fermi_energy"


class Units203(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units204(Enum):
    eV_A_2 = "eV/A^2"


class FermiEnergyPropertySchema(BaseModel):
    name: Literal["7#-datamodel-code-generator-#-object-#-special-#"]
    units: Union[Units203, Units204]
    value: float


class Name483(Enum):
    ionization_potential = "ionization_potential"


class Units205(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class Units206(Enum):
    eV_A_2 = "eV/A^2"


class IonizationPotentialScalarPropertySchema(BaseModel):
    name: Literal["8#-datamodel-code-generator-#-object-#-special-#"]
    units: Union[Units205, Units206]
    value: float


class ArrayOf3NumberElementsSchema(RootModel[List[float]]):
    root: List[float] = Field(..., title="array of 3 number elements schema")


class Name484(Enum):
    stress_tensor = "stress_tensor"


class Units207(Enum):
    kbar = "kbar"
    pa = "pa"


class StressTensorPropertySchema(BaseModel):
    value: List[ArrayOf3NumberElementsSchema] = Field(..., max_length=3, min_length=3, title="matrix 3x3 schema")
    name: Literal["9#-datamodel-code-generator-#-object-#-special-#"]
    units: Units207


class Name485(Enum):
    band_gaps = "band_gaps"


class Type(Enum):
    direct = "direct"
    indirect = "indirect"


class Units208(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class BandGapSchema(BaseModel):
    kpointConduction: Optional[List[float]] = Field(None, max_length=3, min_length=3, title="kpoint schema")
    """
    A k-point is a point in reciprocal space of a crystal.
    """
    kpointValence: Optional[List[float]] = Field(None, max_length=3, min_length=3, title="kpoint schema")
    """
    A k-point is a point in reciprocal space of a crystal.
    """
    eigenvalueConduction: Optional[float] = None
    """
    eigenvalue at k-point in conduction band
    """
    eigenvalueValence: Optional[float] = None
    """
    eigenvalue at k-point in valence band
    """
    spin: Optional[float] = None
    type: Type
    units: Optional[Units208] = None
    value: float


class Eigenvalue(BaseModel):
    spin: Optional[float] = None
    energies: Optional[List] = None
    occupations: Optional[List] = None


class Eigenvalue2(BaseModel):
    kpoint: Optional[List[float]] = Field(None, max_length=3, min_length=3, title="kpoint schema")
    """
    A k-point is a point in reciprocal space of a crystal.
    """
    weight: Optional[float] = None
    eigenvalues: Optional[List[Eigenvalue]] = None


class BandGapsPropertySchema(BaseModel):
    name: Literal["10#-datamodel-code-generator-#-object-#-special-#"]
    values: List[BandGapSchema]
    eigenvalues: Optional[List[Eigenvalue2]] = None


class Label(Enum):
    kpoints = "kpoints"


class Units209(Enum):
    crystal = "crystal"
    cartesian = "cartesian"


class AxisSchema(BaseModel):
    label: Label
    """
    label of an axis object
    """
    units: Optional[Units209] = "crystal"
    """
    units for an axis
    """


class Label9(Enum):
    energy = "energy"


class Units210(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class AxisSchema12(BaseModel):
    label: Label9
    """
    label of an axis object
    """
    units: Optional[Units210] = None
    """
    units for an axis
    """


class Name486(Enum):
    band_structure = "band_structure"


class SpinEnum(Enum):
    number_0_5 = 0.5
    number__0_5 = -0.5


class BandStructurePropertySchema(BaseModel):
    xAxis: AxisSchema = Field(..., title="axis schema")
    yAxis: AxisSchema12 = Field(..., title="axis schema")
    name: Literal["11#-datamodel-code-generator-#-object-#-special-#"]
    spin: List[SpinEnum]
    """
    spin of each band
    """
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label10(Enum):
    qpoints = "qpoints"


class Units211(Enum):
    crystal = "crystal"
    cartesian = "cartesian"


class AxisSchema13(BaseModel):
    label: Label10
    """
    label of an axis object
    """
    units: Optional[Units211] = "crystal"
    """
    units for an axis
    """


class Label11(Enum):
    frequency = "frequency"


class Units212(Enum):
    cm_1 = "cm-1"
    THz = "THz"
    meV = "meV"


class AxisSchema14(BaseModel):
    label: Label11
    """
    label of an axis object
    """
    units: Optional[Units212] = None
    """
    units for an axis
    """


class Name487(Enum):
    phonon_dispersions = "phonon_dispersions"


class PhononBandStructurePropertySchema(BaseModel):
    xAxis: AxisSchema13 = Field(..., title="axis schema")
    yAxis: AxisSchema14 = Field(..., title="axis schema")
    name: Literal["12#-datamodel-code-generator-#-object-#-special-#"]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Name488(Enum):
    temperature_entropy = "temperature_entropy"


class ScalarSchema(BaseModel):
    name: Optional[Name488] = None
    value: float


class Name489(Enum):
    harris_foulkes = "harris_foulkes"


class ScalarSchema58(BaseModel):
    name: Optional[Name489] = None
    value: float


class Name490(Enum):
    smearing = "smearing"


class ScalarSchema59(BaseModel):
    name: Optional[Name490] = None
    value: float


class Name491(Enum):
    one_electron = "one_electron"


class ScalarSchema60(BaseModel):
    name: Optional[Name491] = None
    value: float


class Name492(Enum):
    hartree = "hartree"


class ScalarSchema61(BaseModel):
    name: Optional[Name492] = None
    value: float


class Name493(Enum):
    exchange = "exchange"


class ScalarSchema62(BaseModel):
    name: Optional[Name493] = None
    value: float


class Name494(Enum):
    exchange_correlation = "exchange_correlation"


class ScalarSchema63(BaseModel):
    name: Optional[Name494] = None
    value: float


class Name495(Enum):
    ewald = "ewald"


class ScalarSchema64(BaseModel):
    name: Optional[Name495] = None
    value: float


class Name496(Enum):
    alphaZ = "alphaZ"


class ScalarSchema65(BaseModel):
    name: Optional[Name496] = None
    value: float


class Name497(Enum):
    atomic_energy = "atomic_energy"


class ScalarSchema66(BaseModel):
    name: Optional[Name497] = None
    value: float


class Name498(Enum):
    eigenvalues = "eigenvalues"


class ScalarSchema67(BaseModel):
    name: Optional[Name498] = None
    value: float


class Name499(Enum):
    PAW_double_counting_correction_2 = "PAW_double-counting_correction_2"


class ScalarSchema68(BaseModel):
    name: Optional[Name499] = None
    value: float


class Name500(Enum):
    PAW_double_counting_correction_3 = "PAW_double-counting_correction_3"


class ScalarSchema69(BaseModel):
    name: Optional[Name500] = None
    value: float


class Name501(Enum):
    hartree_fock = "hartree_fock"


class ScalarSchema70(BaseModel):
    name: Optional[Name501] = None
    value: float


class Name502(Enum):
    total_energy_contributions = "total_energy_contributions"


class Units213(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class TotalEnergyContributionsPropertySchema(BaseModel):
    temperatureEntropy: Optional[ScalarSchema] = Field(None, title="scalar schema")
    """
    product of temperature and configurational entropy
    """
    harris_foulkes: Optional[ScalarSchema58] = Field(None, title="scalar schema")
    """
    non self-consitent energy based on an input charge density
    """
    smearing: Optional[ScalarSchema59] = Field(None, title="scalar schema")
    """
    smearing energy
    """
    one_electron: Optional[ScalarSchema60] = Field(None, title="scalar schema")
    """
    kinetic + pseudopotential energy
    """
    hartree: Optional[ScalarSchema61] = Field(None, title="scalar schema")
    """
    energy due to coulomb potential
    """
    exchange: Optional[ScalarSchema62] = Field(None, title="scalar schema")
    """
    exchange energy
    """
    exchange_correlation: Optional[ScalarSchema63] = Field(None, title="scalar schema")
    """
    exchange and correlation energy per particle
    """
    ewald: Optional[ScalarSchema64] = Field(None, title="scalar schema")
    """
    summation of interaction energies at long length scales due to coloumbic interactions
    """
    alphaZ: Optional[ScalarSchema65] = Field(None, title="scalar schema")
    """
    divergent electrostatic ion interaction in compensating electron gas
    """
    atomicEnergy: Optional[ScalarSchema66] = Field(None, title="scalar schema")
    """
    kinetic energy of wavefunctions in the atomic limit
    """
    eigenvalues: Optional[ScalarSchema67] = Field(None, title="scalar schema")
    """
    sum of one electron energies of kinetic, electrostatic, and exchange correlation
    """
    PAWDoubleCounting2: Optional[ScalarSchema68] = Field(None, title="scalar schema")
    """
    double counting correction 2
    """
    PAWDoubleCounting3: Optional[ScalarSchema69] = Field(None, title="scalar schema")
    """
    double counting correction 3
    """
    hartreeFock: Optional[ScalarSchema70] = Field(None, title="scalar schema")
    """
    hartree-fock contribution
    """
    name: Literal["13#-datamodel-code-generator-#-object-#-special-#"]
    units: Optional[Units213] = None


class Units214(Enum):
    cm_1 = "cm-1"
    THz = "THz"
    meV = "meV"


class AxisSchema15(BaseModel):
    label: Label11
    """
    label of an axis object
    """
    units: Optional[Units214] = None
    """
    units for an axis
    """


class Label13(Enum):
    Phonon_DOS = "Phonon DOS"


class Units215(Enum):
    states_cm_1 = "states/cm-1"
    states_THz = "states/THz"
    states_meV = "states/meV"


class AxisSchema16(BaseModel):
    label: Label13
    """
    label of an axis object
    """
    units: Optional[Units215] = None
    """
    units for an axis
    """


class Name503(Enum):
    phonon_dos = "phonon_dos"


class PhononDensityOfStatesPropertySchema(BaseModel):
    xAxis: AxisSchema15 = Field(..., title="axis schema")
    yAxis: AxisSchema16 = Field(..., title="axis schema")
    name: Literal["14#-datamodel-code-generator-#-object-#-special-#"]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label14(Enum):
    z_coordinate = "z coordinate"


class AxisSchema17(BaseModel):
    label: Label14
    """
    label of an axis object
    """
    units: Optional[str] = None
    """
    units for an axis
    """


class Label15(Enum):
    energy = "energy"


class Units216(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class AxisSchema18(BaseModel):
    label: Label15
    """
    label of an axis object
    """
    units: Optional[Units216] = None
    """
    units for an axis
    """


class Name504(Enum):
    potential_profile = "potential_profile"


class PotentialProfilePropertySchema(BaseModel):
    xAxis: AxisSchema17 = Field(..., title="axis schema")
    yAxis: AxisSchema18 = Field(..., title="axis schema")
    name: Literal["15#-datamodel-code-generator-#-object-#-special-#"]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label16(Enum):
    reaction_coordinate = "reaction coordinate"


class AxisSchema19(BaseModel):
    label: Label16
    """
    label of an axis object
    """
    units: Optional[str] = None
    """
    units for an axis
    """


class Label17(Enum):
    energy = "energy"


class AxisSchema20(BaseModel):
    label: Label17
    """
    label of an axis object
    """
    units: Optional[Units216] = None
    """
    units for an axis
    """


class Name505(Enum):
    reaction_energy_profile = "reaction_energy_profile"


class ReactionEnergyProfilePropertySchema(BaseModel):
    xAxis: AxisSchema19 = Field(..., title="axis schema")
    yAxis: AxisSchema20 = Field(..., title="axis schema")
    name: Literal["16#-datamodel-code-generator-#-object-#-special-#"]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class AxisSchema21(BaseModel):
    label: Label17
    """
    label of an axis object
    """
    units: Optional[Units216] = None
    """
    units for an axis
    """


class Label19(Enum):
    density_of_states = "density of states"


class Units219(Enum):
    states_unitcell = "states/unitcell"


class AxisSchema22(BaseModel):
    label: Label19
    """
    label of an axis object
    """
    units: Optional[Units219] = None
    """
    units for an axis
    """


class Name506(Enum):
    density_of_states = "density_of_states"


class Spin(Enum):
    number_0_5 = 0.5
    number__0_5 = -0.5


class LegendItem(BaseModel):
    element: Optional[str] = None
    """
    chemical element
    """
    index: Optional[int] = None
    """
    index inside sub-array of atoms of the same element type
    """
    electronicState: Optional[constr(pattern=r"^([1-5]{1})?(s|p|d|f|g).*$")] = None
    """
    electronic character and shell of PDOS, such as `1s` or `s`, or `total`
    """
    spin: Optional[Spin] = None
    """
    spin of the electronic state
    """


class DensityOfStatesPropertySchema(BaseModel):
    xAxis: AxisSchema21 = Field(..., title="axis schema")
    yAxis: AxisSchema22 = Field(..., title="axis schema")
    name: Literal["17#-datamodel-code-generator-#-object-#-special-#"]
    legend: List[LegendItem]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Name507(Enum):
    dielectric_tensor = "dielectric_tensor"


class Part(Enum):
    real = "real"
    imaginary = "imaginary"


class DielectricTensor(BaseModel):
    part: Part
    """
    Real or imaginary part of the dielectric tensor component
    """
    spin: Optional[float] = None
    frequencies: List[float]
    """
    Frequencies
    """
    components: List[List[float]]
    """
    Matrix with 3 columns, e.g. x, y, z
    """


class DielectricTensorPropertySchema(BaseModel):
    name: Literal["18#-datamodel-code-generator-#-object-#-special-#"]
    values: List[DielectricTensor]


class Name508(Enum):
    file_content = "file_content"


class Filetype(Enum):
    image = "image"
    text = "text"
    csv = "csv"


class ObjectStorageContainerData(BaseModel):
    CONTAINER: Optional[str] = None
    """
    Object storage container for the file
    """
    NAME: Optional[str] = None
    """
    Name of the file inside the object storage bucket
    """
    PROVIDER: Optional[str] = None
    """
    Object storage provider
    """
    REGION: Optional[str] = None
    """
    Region for the object container specified in Container
    """
    SIZE: Optional[int] = None
    """
    Size of the file in bytes
    """
    TIMESTAMP: Optional[str] = None
    """
    Unix timestamp showing when the file was last modified
    """


class FileContentPropertySchema(BaseModel):
    name: Literal["19#-datamodel-code-generator-#-object-#-special-#"]
    filetype: Filetype
    """
    What kind of file this is, e.g. image / text
    """
    objectData: ObjectStorageContainerData = Field(..., title="Object Storage Container Data")
    pathname: Optional[str] = None
    """
    Relative path to the directory that contains the file.
    """
    basename: Optional[str] = None
    """
    Basename of the file
    """


class Name509(Enum):
    hubbard_u = "hubbard_u"


class Units220(Enum):
    eV = "eV"


class AtomicDataPerOrbitalNumeric(BaseModel):
    id: int
    """
    Site number or index in the lattice
    """
    atomicSpecies: constr(pattern=r"^[a-zA-Z]{1,2}[\d+]?$")
    """
    Example: Co1, Mn
    """
    orbitalName: constr(pattern=r"^[1-7][sSpPdDfF]$")
    value: float
    """
    Value related to a specific property, e.g., Hubbard U, V etc.
    """


class HubbardUParametersPropertySchema(BaseModel):
    name: Literal["20#-datamodel-code-generator-#-object-#-special-#"]
    units: Units220
    values: List[AtomicDataPerOrbitalNumeric]


class Name510(Enum):
    hubbard_v = "hubbard_v"


class AtomicDataPerOrbitalPairNumeric(BaseModel):
    id: int
    """
    Site number or index in the lattice
    """
    id2: int
    """
    Site number or index in the lattice of second site
    """
    atomicSpecies: constr(pattern=r"^[a-zA-Z]{1,2}[\d+]?$")
    """
    Example: Co1, Mn
    """
    atomicSpecies2: constr(pattern=r"^[a-zA-Z]{1,2}[\d+]?$")
    """
    Example: Co2, O
    """
    orbitalName: Optional[constr(pattern=r"^[1-7][sSpPdDfF]$")] = None
    orbitalName2: Optional[constr(pattern=r"^[1-7][sSpPdDfF]$")] = None
    distance: Optional[float] = None
    """
    Distance between two sites in Bohr.
    """
    value: float
    """
    Value related to a specific property, e.g., Hubbard U, V etc.
    """


class HubbardVParametersPropertySchema(BaseModel):
    name: Literal["21#-datamodel-code-generator-#-object-#-special-#"]
    units: Units220
    values: List[AtomicDataPerOrbitalPairNumeric]


class Name511(Enum):
    hubbard_v_nn = "hubbard_v_nn"


class HubbardVNNParametersPropertySchema(BaseModel):
    name: Literal["22#-datamodel-code-generator-#-object-#-special-#"]
    units: Units220
    values: List[AtomicDataPerOrbitalPairNumeric]


class Label20(Enum):
    z_coordinate = "z coordinate"


class Units223(Enum):
    km = "km"
    m = "m"
    cm = "cm"
    mm = "mm"
    um = "um"
    nm = "nm"
    angstrom = "angstrom"
    a_u_ = "a.u."
    bohr = "bohr"
    pm = "pm"


class AxisSchema23(BaseModel):
    label: Label20
    """
    label of an axis object
    """
    units: Optional[Units223] = None
    """
    units for an axis
    """


class Label21(Enum):
    energy = "energy"


class Units224(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class AxisSchema24(BaseModel):
    label: Label21
    """
    label of an axis object
    """
    units: Optional[Units224] = None
    """
    units for an axis
    """


class Name512(Enum):
    average_potential_profile = "average_potential_profile"


class AveragePotentialProfilePropertySchema(BaseModel):
    xAxis: AxisSchema23 = Field(..., title="axis schema")
    yAxis: AxisSchema24 = Field(..., title="axis schema")
    name: Literal["23#-datamodel-code-generator-#-object-#-special-#"]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Label22(Enum):
    z_coordinate = "z coordinate"


class AxisSchema25(BaseModel):
    label: Label22
    """
    label of an axis object
    """
    units: Optional[str] = None
    """
    units for an axis
    """


class Label23(Enum):
    charge_density = "charge density"


class Units225(Enum):
    e_A = "e/A"


class AxisSchema26(BaseModel):
    label: Label23
    """
    label of an axis object
    """
    units: Optional[Units225] = None
    """
    units for an axis
    """


class Name513(Enum):
    charge_density_profile = "charge_density_profile"


class ChargeDensityProfilePropertySchema(BaseModel):
    xAxis: AxisSchema25 = Field(..., title="axis schema")
    yAxis: AxisSchema26 = Field(..., title="axis schema")
    name: Literal["24#-datamodel-code-generator-#-object-#-special-#"]
    xDataArray: List[Union[float, List[float]]]
    """
    array containing values of x Axis
    """
    yDataSeries: List[List[float]] = Field(..., title="1 dimension data series schema")


class Name514(Enum):
    workflow_pyml_predict = "workflow:pyml_predict"


class Type22(Enum):
    io = "io"


class Subtype(Enum):
    input = "input"
    output = "output"
    dataFrame = "dataFrame"


class Source(Enum):
    api = "api"
    db = "db"
    object_storage = "object_storage"


class DataIORestAPIInputSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    endpoint: str
    """
    rest API endpoint
    """
    endpoint_options: Dict[str, Any]
    """
    rest API endpoint options
    """
    name: Optional[str] = None
    """
    the name of the variable in local scope to save the data under
    """


class DataIODatabaseInputOutputSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    ids: List[str]
    """
    IDs of item to retrieve from db
    """


class DataIODatabaseInputOutputSchema3(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    collection: str
    """
    db collection name
    """
    draft: bool
    """
    whether the result should be saved as draft
    """


class ObjectStorageIoSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    objectData: ObjectStorageContainerData = Field(..., title="Object Storage Container Data")
    overwrite: Optional[bool] = None
    """
    if a file with the same filename already exists, whether to overwrite the old file
    """
    pathname: Optional[str] = None
    """
    Relative path to the directory that contains the file.
    """
    basename: Optional[str] = None
    """
    Basename of the file
    """
    filetype: Optional[str] = None
    """
    What kind of file this is, e.g. image / text
    """


class Status(Enum):
    idle = "idle"
    active = "active"
    warning = "warning"
    error = "error"
    finished = "finished"


class NameResultSchema(BaseModel):
    name: str
    """
    The name of this item. e.g. scf_accuracy
    """


class StatusTrackItem(BaseModel):
    trackedAt: float
    status: str
    repetition: Optional[float] = None


class DataIOUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["0#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    subtype: Subtype
    source: Source
    input: List[
        Union[
            DataIORestAPIInputSchema,
            Union[DataIODatabaseInputOutputSchema, DataIODatabaseInputOutputSchema3],
            ObjectStorageIoSchema,
        ]
    ]
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: Optional[str] = None
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type23(Enum):
    reduce = "reduce"


class InputItem(BaseModel):
    operation: str
    """
    reduce operation, e.g. aggregate
    """
    arguments: List[str]
    """
    arguments which are passed to reduce operation function
    """


class ReduceUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["1#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    mapFlowchartId: str
    """
    corresponding map unit flowchart ID
    """
    input: List[InputItem]
    """
    input information for reduce unit
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: Optional[str] = None
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type24(Enum):
    condition = "condition"


class WorkflowUnitInputSchema(BaseModel):
    scope: str
    """
    Scope of the variable. e.g. 'global' or 'flowchart_id_2'
    """
    name: str
    """
    Name of the input data. e.g. total_energy
    """


class ConditionUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["2#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    input: List[WorkflowUnitInputSchema]
    """
    Input information for condition.
    """
    statement: str
    """
    Condition statement. e.g. 'abs(x-total_energy) < 1e-5'
    """
    then: str
    """
    Flowchart ID reference for `then` part of the condition.
    """
    else_: str = Field(..., alias="else")
    """
    Flowchart ID reference for `else` part of the condition.
    """
    maxOccurrences: int
    """
    Maximum occurrence of the condition, usable for loops.
    """
    throwException: Optional[bool] = None
    """
    Throw exception on reaching to maximum occurence.
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: Optional[str] = None
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type25(Enum):
    assertion = "assertion"


class AssertionUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["3#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    statement: str
    """
    The statement to be evaluated
    """
    errorMessage: Optional[str] = None
    """
    The error message to be displayed if the assertion fails
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type26(Enum):
    execution = "execution"


class ApplicationSchemaBase(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    shortName: Optional[str] = None
    """
    The short name of the application. e.g. qe
    """
    summary: Optional[str] = None
    """
    Application's short description.
    """
    version: Optional[str] = None
    """
    Application version. e.g. 5.3.5
    """
    build: Optional[str] = None
    """
    Application build. e.g. VTST
    """
    hasAdvancedComputeOptions: Optional[bool] = None
    """
    Whether advanced compute options are present
    """
    isLicensed: Optional[bool] = None
    """
    Whether licensing is present
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    name: Optional[str] = None
    """
    entity name
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """


class ExecutableSchema(BaseModel):
    name: str
    """
    The name of the executable. e.g. pw.x
    """
    applicationId: Optional[List[str]] = None
    """
    _ids of the application this executable belongs to
    """
    hasAdvancedComputeOptions: Optional[bool] = None
    """
    Whether advanced compute options are present
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """


class ExecutionUnitInputIdItemSchemaForPhysicsBasedSimulationEngines(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    templateId: Optional[str] = None
    templateName: Optional[str] = None
    name: Optional[str] = None
    """
    name of the resulting input file, if different than template name
    """


class FlavorSchema(BaseModel):
    executableId: Optional[str] = None
    """
    _id of the executable this flavor belongs to
    """
    executableName: Optional[str] = None
    """
    name of the executable this flavor belongs to
    """
    applicationName: Optional[str] = None
    """
    name of the application this flavor belongs to
    """
    input: Optional[List[ExecutionUnitInputIdItemSchemaForPhysicsBasedSimulationEngines]] = Field(
        None, title="execution unit input schema"
    )
    supportedApplicationVersions: Optional[List[str]] = None
    """
    list of application versions this flavor supports
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    name: Optional[str] = None
    """
    entity name
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """


class ExecutionUnitSchemaBase(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["4#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    application: ApplicationSchemaBase = Field(..., title="application schema (base)")
    executable: Optional[ExecutableSchema] = Field(None, title="executable schema")
    flavor: Optional[FlavorSchema] = Field(None, title="flavor schema")
    input: Any
    """
    unit input (type to be specified by the application's execution unit)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type27(Enum):
    assignment = "assignment"


class AssignmentUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["5#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    input: List[WorkflowUnitInputSchema]
    """
    Input information for assignment. if omitted, means that it is an initialization unit, otherwise it is an assignment.
    """
    operand: str
    """
    Name of the global variable. e.g. 'x'
    """
    value: Union[str, bool, float]
    """
    Value of the variable. The value content could be a simple integer, string or a python expression. e.g. '0' (initialization), 'sin(x)+1' (expression)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None
    scope: Optional[str] = None


class Type28(Enum):
    processing = "processing"


class ProcessingUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["6#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    operation: str
    """
    Contains information about the operation used.
    """
    operationType: str
    """
    Contains information about the specific type of the operation used.
    """
    inputData: Any
    """
    unit input (type to be specified by the child units)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class WorkflowSubworkflowUnitSchema(
    RootModel[
        Union[
            DataIOUnitSchema,
            ReduceUnitSchema,
            ConditionUnitSchema,
            AssertionUnitSchema,
            ExecutionUnitSchemaBase,
            AssignmentUnitSchema,
            ProcessingUnitSchema,
        ]
    ]
):
    root: Union[
        DataIOUnitSchema,
        ReduceUnitSchema,
        ConditionUnitSchema,
        AssertionUnitSchema,
        ExecutionUnitSchemaBase,
        AssignmentUnitSchema,
        ProcessingUnitSchema,
    ] = Field(..., discriminator="type", title="workflow subworkflow unit schema")


class BaseMethod(BaseModel):
    type: str
    """
    general type of this method, eg. `pseudopotential`
    """
    subtype: str
    """
    general subtype of this method, eg. `ultra-soft`
    """
    precision: Optional[Dict[str, Any]] = None
    """
    Object showing the actual possible precision based on theory and implementation
    """
    data: Optional[Dict[str, Any]] = None
    """
    additional data specific to method, eg. array of pseudopotentials
    """


class BaseModelModel(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: str
    """
    general type of the model, eg. `dft`
    """
    subtype: str
    """
    general subtype of the model, eg. `lda`
    """
    method: BaseMethod = Field(..., title="base method")


class Queue(Enum):
    D = "D"
    OR = "OR"
    OF = "OF"
    OFplus = "OFplus"
    SR = "SR"
    SF = "SF"
    SFplus = "SFplus"
    GPOF = "GPOF"
    GP2OF = "GP2OF"
    GP4OF = "GP4OF"
    GPSF = "GPSF"
    GP2SF = "GP2SF"
    GP4SF = "GP4SF"
    OR4 = "OR4"
    OR8 = "OR8"
    OR16 = "OR16"
    SR4 = "SR4"
    SR8 = "SR8"
    SR16 = "SR16"
    GOF = "GOF"
    G4OF = "G4OF"
    G8OF = "G8OF"
    GSF = "GSF"
    G4SF = "G4SF"
    G8SF = "G8SF"


class TimeLimitType(Enum):
    per_single_attempt = "per single attempt"
    compound = "compound"


class QuantumEspressoArgumentsSchema(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    nimage: Optional[conint(ge=1, le=100)] = 1
    """
    Processors can be divided into different `images`, each corresponding to a different self-consistent or linear-response calculation, loosely coupled to others.
    """
    npools: Optional[conint(ge=1, le=100)] = 1
    """
    Each image can be subpartitioned into `pools`, each taking care of a group of k-points.
    """
    nband: Optional[conint(ge=1, le=100)] = 1
    """
    Each pool is subpartitioned into `band groups`, each taking care of a group of Kohn-Sham orbitals (also called bands, or wavefunctions).
    """
    ntg: Optional[conint(ge=1, le=100)] = 1
    """
    In order to allow good parallelization of the 3D FFT when the number of processors exceeds the number of FFT planes, FFTs on Kohn-Sham states are redistributed to `task` groups so that each group can process several wavefunctions at the same time.
    """
    ndiag: Optional[conint(ge=1, le=100)] = 1
    """
    A further level of parallelization, independent on PW or k-point parallelization, is the parallelization of subspace diagonalization / iterative orthonormalization. Both operations required the diagonalization of arrays whose dimension is the number of Kohn-Sham states (or a small multiple of it). All such arrays are distributed block-like across the `linear-algebra group`, a subgroup of the pool of processors, organized in a square 2D grid. As a consequence the number of processors in the linear-algebra group is given by n2, where n is an integer; n2 must be smaller than the number of processors in the PW group. The diagonalization is then performed in parallel using standard linear algebra operations.
    """


class Cluster(BaseModel):
    fqdn: Optional[str] = None
    """
    FQDN of the cluster. e.g. master-1-staging.exabyte.io
    """
    jid: Optional[str] = None
    """
    Job's identity in RMS. e.g. 1234.master-1-staging.exabyte.io
    """


class Domain(Enum):
    rupy = "rupy"
    alfred = "alfred"
    celim = "celim"
    webapp = "webapp"


class Error(BaseModel):
    domain: Optional[Domain] = None
    """
    Domain of the error appearance (internal).
    """
    reason: Optional[str] = None
    """
    Should be a short, unique, machine-readable error code string. e.g. FileNotFound
    """
    message: Optional[str] = None
    """
    Human-readable error message. e.g. 'File Not Found: /home/demo/data/project1/job-123/job-config.json'
    """
    traceback: Optional[str] = None
    """
    Full machine-readable error traceback. e.g. FileNotFound
    """


class ComputeArgumentsSchema(BaseModel):
    queue: Queue
    """
    Name of the submission queues: https://docs.mat3ra.com/infrastructure/resource/queues/. Below enums are for Azure, then AWS circa 2022-08, hence the duplication.
    """
    nodes: int
    """
    number of nodes used for the job inside the RMS.
    """
    ppn: int
    """
    number of CPUs used for the job inside the RMS.
    """
    timeLimit: str
    """
    Wallclock time limit for computing a job. Clock format: 'hh:mm:ss'
    """
    timeLimitType: Optional[TimeLimitType] = "per single attempt"
    """
    Convention to use when reasoning about time limits
    """
    isRestartable: Optional[bool] = True
    """
    Job is allowed to restart on termination.
    """
    notify: Optional[str] = None
    """
    Email notification for the job: n - never, a - job aborted, b - job begins, e - job ends. Last three could be combined.
    """
    email: Optional[str] = None
    """
    Email address to notify about job execution.
    """
    maxCPU: Optional[int] = None
    """
    Maximum CPU count per node. This parameter is used to let backend job submission infrastructure know that this job is to be charged for the maximum CPU per node instead of the actual ppn. For premium/fast queues where resources are provisioned on-demand and exclusively per user.
    """
    arguments: Optional[QuantumEspressoArgumentsSchema] = Field({}, title="quantum espresso arguments schema")
    """
    Optional arguments specific to using application - VASP, Quantum Espresso, etc. Specified elsewhere
    """
    cluster: Optional[Cluster] = None
    """
    Cluster where the job is executed. Optional on create. Required on job submission.
    """
    errors: Optional[List[Error]] = None
    """
    Computation error. Optional. Appears only if something happens on jobs execution.
    """
    excludeFilesPattern: Optional[str] = None
    """
    A Python compatible regex to exclude files from upload. e.g. ^.*.txt& excludes all files with .txt suffix
    """


class Subworkflow(BaseModel):
    units: List[WorkflowSubworkflowUnitSchema]
    """
    Contains the Units of the subworkflow
    """
    model: BaseModelModel = Field(..., title="base model")
    application: ApplicationSchemaBase = Field(..., title="application schema (base)")
    isDraft: Optional[bool] = False
    """
    Defines whether to store the results/properties extracted in this unit to properties collection
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    subworkflow identity
    """
    name: str
    """
    Human-readable name of the subworkflow. e.g. Total-energy
    """
    properties: Optional[List[str]] = None
    """
    Array of characteristic properties calculated by this subworkflow
    """
    compute: Optional[ComputeArgumentsSchema] = Field(None, title="compute arguments schema")
    """
    Custom keywords prefixed with validate correspond to custom validation methods implemented downstream
    """


class Type29(Enum):
    io = "io"


class DataIODatabaseInputOutputSchema4(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    ids: List[str]
    """
    IDs of item to retrieve from db
    """


class DataIODatabaseInputOutputSchema5(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    collection: str
    """
    db collection name
    """
    draft: bool
    """
    whether the result should be saved as draft
    """


class ObjectStorageIoSchema1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    objectData: ObjectStorageContainerData = Field(..., title="Object Storage Container Data")
    overwrite: Optional[bool] = None
    """
    if a file with the same filename already exists, whether to overwrite the old file
    """
    pathname: Optional[str] = None
    """
    Relative path to the directory that contains the file.
    """
    basename: Optional[str] = None
    """
    Basename of the file
    """
    filetype: Optional[str] = None
    """
    What kind of file this is, e.g. image / text
    """


class DataIOUnitSchema1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["0#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    subtype: Subtype
    source: Source
    input: List[
        Union[
            DataIORestAPIInputSchema,
            Union[DataIODatabaseInputOutputSchema4, DataIODatabaseInputOutputSchema5],
            ObjectStorageIoSchema1,
        ]
    ]
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: Optional[str] = None
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type30(Enum):
    reduce = "reduce"


class ReduceUnitSchema1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["1#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    mapFlowchartId: str
    """
    corresponding map unit flowchart ID
    """
    input: List[InputItem]
    """
    input information for reduce unit
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: Optional[str] = None
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type31(Enum):
    condition = "condition"


class ConditionUnitSchema2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["2#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    input: List[WorkflowUnitInputSchema]
    """
    Input information for condition.
    """
    statement: str
    """
    Condition statement. e.g. 'abs(x-total_energy) < 1e-5'
    """
    then: str
    """
    Flowchart ID reference for `then` part of the condition.
    """
    else_: str = Field(..., alias="else")
    """
    Flowchart ID reference for `else` part of the condition.
    """
    maxOccurrences: int
    """
    Maximum occurrence of the condition, usable for loops.
    """
    throwException: Optional[bool] = None
    """
    Throw exception on reaching to maximum occurence.
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: Optional[str] = None
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type32(Enum):
    assertion = "assertion"


class AssertionUnitSchema2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["3#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    statement: str
    """
    The statement to be evaluated
    """
    errorMessage: Optional[str] = None
    """
    The error message to be displayed if the assertion fails
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type33(Enum):
    execution = "execution"


class ExecutableSchema5(BaseModel):
    name: str
    """
    The name of the executable. e.g. pw.x
    """
    applicationId: Optional[List[str]] = None
    """
    _ids of the application this executable belongs to
    """
    hasAdvancedComputeOptions: Optional[bool] = None
    """
    Whether advanced compute options are present
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """


class FlavorSchema5(BaseModel):
    executableId: Optional[str] = None
    """
    _id of the executable this flavor belongs to
    """
    executableName: Optional[str] = None
    """
    name of the executable this flavor belongs to
    """
    applicationName: Optional[str] = None
    """
    name of the application this flavor belongs to
    """
    input: Optional[List[ExecutionUnitInputIdItemSchemaForPhysicsBasedSimulationEngines]] = Field(
        None, title="execution unit input schema"
    )
    supportedApplicationVersions: Optional[List[str]] = None
    """
    list of application versions this flavor supports
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    name: Optional[str] = None
    """
    entity name
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """


class ExecutionUnitSchemaBase2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["4#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    application: ApplicationSchemaBase = Field(..., title="application schema (base)")
    executable: Optional[ExecutableSchema5] = Field(None, title="executable schema")
    flavor: Optional[FlavorSchema5] = Field(None, title="flavor schema")
    input: Any
    """
    unit input (type to be specified by the application's execution unit)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type34(Enum):
    assignment = "assignment"


class AssignmentUnitSchema2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["5#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    input: List[WorkflowUnitInputSchema]
    """
    Input information for assignment. if omitted, means that it is an initialization unit, otherwise it is an assignment.
    """
    operand: str
    """
    Name of the global variable. e.g. 'x'
    """
    value: Union[str, bool, float]
    """
    Value of the variable. The value content could be a simple integer, string or a python expression. e.g. '0' (initialization), 'sin(x)+1' (expression)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None
    scope: Optional[str] = None


class Type35(Enum):
    processing = "processing"


class ProcessingUnitSchema1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["6#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    operation: str
    """
    Contains information about the operation used.
    """
    operationType: str
    """
    Contains information about the specific type of the operation used.
    """
    inputData: Any
    """
    unit input (type to be specified by the child units)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type36(Enum):
    map = "map"


class Input(BaseModel):
    target: str
    """
    Name of the target variable to substitute using the values below. e.g. K_POINTS
    """
    scope: Optional[str] = None
    """
    Scope to retrieve `values` from, global or flowchartId. Optional if `values` is given.
    """
    name: Optional[str] = None
    """
    Name of the variable inside the scope to retrieve `values` from. Optional if `values` is given.
    """
    values: Optional[List[Union[str, float, Dict[str, Any]]]] = None
    """
    Sequence of values for the target Jinja variable. Optional if `scope` and `name` are given. This can be used for map-reduce type parallel execution
    """
    useValues: Optional[bool] = None


class MapUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["7#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    workflowId: str
    """
    Id of workflow to run inside map
    """
    input: Input
    """
    Input information for map.
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class Type37(Enum):
    subworkflow = "subworkflow"


class SubworkflowUnitSchema(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: Literal["8#-datamodel-code-generator-#-object-#-special-#"]
    """
    type of the unit
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    isDraft: Optional[bool] = None
    name: str
    """
    name of the unit. e.g. pw_scf
    """
    status: Optional[Status] = None
    """
    Status of the unit.
    """
    head: Optional[bool] = None
    """
    Whether this unit is the first one to be executed.
    """
    flowchartId: str
    """
    Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
    """
    next: Optional[str] = None
    """
    Next unit's flowchartId. If empty, the current unit is the last.
    """
    enableRender: Optional[bool] = None
    """
    Whether Rupy should attempt to use Jinja templating to add context variables into the unit
    """
    context: Optional[Dict[str, Any]] = None
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    preProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the pre-processors for this calculation
    """
    postProcessors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the post-processors for this calculation
    """
    monitors: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the monitors for this calculation
    """
    results: Optional[List[Union[NameResultSchema, str]]] = None
    """
    names of the results for this calculation
    """
    tags: Optional[List[str]] = None
    """
    entity tags
    """
    statusTrack: Optional[List[StatusTrackItem]] = None


class WorkflowUnitSchema(
    RootModel[
        Union[
            DataIOUnitSchema1,
            ReduceUnitSchema1,
            ConditionUnitSchema2,
            AssertionUnitSchema2,
            ExecutionUnitSchemaBase2,
            AssignmentUnitSchema2,
            ProcessingUnitSchema1,
            MapUnitSchema,
            SubworkflowUnitSchema,
        ]
    ]
):
    root: Union[
        DataIOUnitSchema1,
        ReduceUnitSchema1,
        ConditionUnitSchema2,
        AssertionUnitSchema2,
        ExecutionUnitSchemaBase2,
        AssignmentUnitSchema2,
        ProcessingUnitSchema1,
        MapUnitSchema,
        SubworkflowUnitSchema,
    ] = Field(..., discriminator="type", title="workflow unit schema")


class WorkflowPropertySchema(BaseModel):
    name: Literal["25#-datamodel-code-generator-#-object-#-special-#"]
    """
    entity name
    """
    subworkflows: List[Subworkflow]
    """
    Array of subworkflows. Subworkflow can be an instance of workflow to allow for nesting
    """
    units: List[WorkflowUnitSchema]
    """
    Contains the Units of the Workflow
    """
    properties: Optional[List[Union[str, Dict[str, Any]]]] = None
    """
    Array of characteristic properties calculated by this workflow (TODO: add enums)
    """
    isUsingDataset: Optional[bool] = None
    """
    Whether to use the dataset tab in the job designer. Mutually exclusive with using the materials tab.
    """
    workflows: Optional[List[Dict[str, Any]]] = None
    """
    Array of workflows with the same schema as the current one.
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    metadata: Optional[Dict[str, Any]] = None


class Name515(Enum):
    magnetic_moments = "magnetic_moments"


class AtomicVectorSchema(BaseModel):
    value: List[float] = Field(..., max_length=3, min_length=3, title="vector 3d schema")
    """
    value of this entry
    """
    id: int
    """
    integer id of this entry
    """


class Units226(Enum):
    uB = "uB"


class MagneticMomentsPropertySchema(BaseModel):
    name: Literal["26#-datamodel-code-generator-#-object-#-special-#"]
    values: List[AtomicVectorSchema] = Field(..., title="atomic vectors schema")
    units: Units226


class Name516(Enum):
    atomic_forces = "atomic_forces"


class Units227(Enum):
    eV_bohr = "eV/bohr"
    eV_angstrom = "eV/angstrom"
    Ry_a_u_ = "Ry/a.u."
    newton = "newton"
    kg_m_s_2 = "kg*m/s^2"
    eV_a_u_ = "eV/a.u."


class AtomicForcesPropertySchema(BaseModel):
    name: Literal["27#-datamodel-code-generator-#-object-#-special-#"]
    values: List[AtomicVectorSchema] = Field(..., title="atomic vectors schema")
    units: Units227


class Name517(Enum):
    convergence_electronic = "convergence_electronic"


class Units228(Enum):
    eV = "eV"
    Ry = "Ry"
    hartree = "hartree"


class ConvergenceElectronicPropertySchema(BaseModel):
    name: Literal["28#-datamodel-code-generator-#-object-#-special-#"]
    units: Units228
    data: List[List[float]]


class Name518(Enum):
    convergence_ionic = "convergence_ionic"


class Units229(Enum):
    eV = "eV"


class Units230(Enum):
    eV = "eV"
    Ry = "Ry"
    hartree = "hartree"


class Electronic(BaseModel):
    units: Optional[Units230] = None
    """
    units for force tolerance
    """
    data: Optional[List[float]] = None


class Datum(BaseModel):
    energy: float
    """
    converged electronic energy for this structure (last in `electronic`)
    """
    structure: Optional[Dict[str, Any]] = None
    """
    TODO: structural information at each step to be here
    """
    electronic: Optional[Electronic] = None
    """
    data about electronic at this ionic step
    """


class ConvergenceIonicPropertySchema(BaseModel):
    name: Literal["29#-datamodel-code-generator-#-object-#-special-#"]
    tolerance: Optional[Any] = None
    """
    for ionic convergence tolerance shows force tolerance
    """
    units: Units229
    """
    units for force tolerance
    """
    data: List[Datum]
    """
    energetic and structural information
    """


class Name519(Enum):
    is_relaxed = "is_relaxed"


class IsRelaxedPropertySchema(BaseModel):
    name: Literal["30#-datamodel-code-generator-#-object-#-special-#"]
    value: bool
    materialId: str
    """
    Material's identity
    """


class Name520(Enum):
    final_structure = "final_structure"


class FinalStructurePropertySchema(BaseModel):
    name: Literal["31#-datamodel-code-generator-#-object-#-special-#"]
    isRelaxed: bool
    materialId: str
    """
    Material's identity
    """


class Name521(Enum):
    jupyter_notebook_endpoint = "jupyter_notebook_endpoint"


class JupyterNotebookEndpointPropertySchema(BaseModel):
    name: Literal["32#-datamodel-code-generator-#-object-#-special-#"]
    host: str
    port: float
    token: str


class Info(BaseModel):
    jobId: str
    """
    Job's identity
    """
    unitId: str
    """
    Id of the unit that extracted the result
    """


class Source3(BaseModel):
    type: str
    """
    Type of the material property's source.
    """
    info: Info


class Precision(BaseModel):
    value: Optional[float] = None
    metric: Optional[str] = None


class SystemTag(Enum):
    isRefined = "isRefined"
    isBest = "isBest"


class PropertyHolderSchema(BaseModel):
    group: Optional[str] = None
    """
    property group, e.g. qe:dft:gga:pbe
    """
    data: Union[
        ValenceBandOffsetPropertySchema,
        ZeroPointEnergyPropertySchema,
        PressurePropertySchema,
        ReactionEnergyBarrierPropertySchema,
        SurfaceEnergyPropertySchema,
        TotalEnergyPropertySchema,
        TotalForcesPropertySchema,
        FermiEnergyPropertySchema,
        IonizationPotentialScalarPropertySchema,
        StressTensorPropertySchema,
        BandGapsPropertySchema,
        BandStructurePropertySchema,
        PhononBandStructurePropertySchema,
        TotalEnergyContributionsPropertySchema,
        PhononDensityOfStatesPropertySchema,
        PotentialProfilePropertySchema,
        ReactionEnergyProfilePropertySchema,
        DensityOfStatesPropertySchema,
        DielectricTensorPropertySchema,
        FileContentPropertySchema,
        HubbardUParametersPropertySchema,
        HubbardVParametersPropertySchema,
        HubbardVNNParametersPropertySchema,
        AveragePotentialProfilePropertySchema,
        ChargeDensityProfilePropertySchema,
        WorkflowPropertySchema,
        MagneticMomentsPropertySchema,
        AtomicForcesPropertySchema,
        ConvergenceElectronicPropertySchema,
        ConvergenceIonicPropertySchema,
        IsRelaxedPropertySchema,
        FinalStructurePropertySchema,
        JupyterNotebookEndpointPropertySchema,
    ] = Field(..., discriminator="name")
    """
    container of the information, specific to each property
    """
    source: Source3
    exabyteId: List[str]
    """
    Id of the corresponding item in the entity bank that this property is obtained for
    """
    precision: Optional[Precision] = None
    systemTags: Optional[List[SystemTag]] = None
    """
    property system tags, marks property system characteristics, values refined or best (could be both)
    """
    repetition: float
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
