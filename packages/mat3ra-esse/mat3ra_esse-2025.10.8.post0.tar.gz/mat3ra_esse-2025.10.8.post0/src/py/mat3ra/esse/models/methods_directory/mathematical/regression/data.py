# generated by datamodel-codegen:
#   filename:  methods_directory/mathematical/regression/data.json
#   version:   0.28.5

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel


class PerFeaturePropertyUsedForTrainingTheMLMethodModelParametersSchema(BaseModel):
    coefficient: Optional[float] = None
    """
    coefficient in linear regression
    """
    name: str
    """
    feature name
    """
    importance: Optional[float] = None
    """
    pvalue: https://en.wikipedia.org/wiki/P-value
    """


class LinearRegressionParametersSchema(BaseModel):
    intercept: float
    """
    intercept (shift) from the linear or non-linear fit of data points
    """
    perFeature: List[PerFeaturePropertyUsedForTrainingTheMLMethodModelParametersSchema]
    """
    per-feature (property used for training the ML method/model) parameters
    """


class KernelRidgeRegressionParametersSchema(BaseModel):
    xFit: List
    """
    training data
    """
    dualCoefficients: List
    """
    dual coefficients
    """
    perFeature: List[PerFeaturePropertyUsedForTrainingTheMLMethodModelParametersSchema]
    """
    per-feature (property used for training the ML method/model) parameters
    """


class DataSet(BaseModel):
    exabyteIds: List[str]
    """
    array of exabyteIds for materials in dataset
    """
    extra: Optional[Any] = None
    """
    holder for any extra information, eg. coming from user-uploaded CSV file
    """


class RegressionData(BaseModel):
    perProperty: Optional[List[Union[LinearRegressionParametersSchema, KernelRidgeRegressionParametersSchema]]] = None
    dataSet: Optional[DataSet] = None
    """
    dataset for ml
    """
