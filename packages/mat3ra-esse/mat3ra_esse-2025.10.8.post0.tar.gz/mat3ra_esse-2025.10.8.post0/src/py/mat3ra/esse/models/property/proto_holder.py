# generated by datamodel-codegen:
#   filename:  property/proto_holder.json
#   version:   0.28.5

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class Name(Enum):
    atomic_constraints = "atomic_constraints"


class AtomicConstraintSchema(BaseModel):
    value: List[bool] = Field(..., title="vector boolean 3d schema")
    """
    value of this entry
    """
    id: int
    """
    integer id of this entry
    """


class AtomicConstraintsPropertySchema(BaseModel):
    name: Name
    values: List[AtomicConstraintSchema] = Field(..., title="atomic constraints schema")
    """
    atomic constraints schema
    """


class Name634(Enum):
    boundary_conditions = "boundary_conditions"


class Type(Enum):
    pbc = "pbc"
    bc1 = "bc1"
    bc2 = "bc2"
    bc3 = "bc3"


class BoundaryConditionsPropertySchema(BaseModel):
    name: Name634
    type: Optional[Type] = "pbc"
    """
    If assume_isolated = 'esm', determines the boundary conditions used for either side of the slab.
    """
    offset: float


class Info(BaseModel):
    materialId: Optional[str] = None


class Source(BaseModel):
    type: str
    """
    Type of the material property's source.
    """
    info: Info


class ProtoPropertyHolderSchema(BaseModel):
    data: Union[AtomicConstraintsPropertySchema, BoundaryConditionsPropertySchema]
    """
    container of the information, specific to each property
    """
    source: Source
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
