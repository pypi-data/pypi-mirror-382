"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz Dispatch Automation API

Copyright:
Copyright 2022 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import abc
import collections.abc
import frequenz.api.dispatch.v1.dispatch_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MicrogridDispatchServiceStub:
    """Service providing operations related to dispatching microgrid components.

    #### Overview

    The API serves to automate the process of electricity dispatches for microgrids.
    In the context of the energy industry, a 'dispatch' refers to the act of routing electrical power
    between different components within a microgrid or between a microgrid and the main grid.
    This could be for the purpose of supply (sending electricity to the grid or components within the microgrid),
    or demand (drawing electricity from the grid or from other components like batteries and solar arrays).

    #### Objective

    The primary objective of this API is to streamline and automate the complex task of electricity dispatching,
    making it easier to manage local electricity supply and demand efficiently.

    #### Key Features

    - Dispatching Electricity: Comprehensive CRUD operations for dispatching microgrid components.
    - Automation: Support for one-time as well as recurring dispatches based on flexible recurrence rules.
    - Fine-grained control: Dispatch individual microgrid components or entire component categories.

    #### Example Use Cases

    - Charging or discharging a battery based on optimal time-of-use rates.
    - Limiting the output of a Photovoltaic (PV) array during periods of low demand.
    - Invoking Frequency Containment Reserves (FCR) or Automatic Frequency Restoration Reserves (aFRR) to
       support grid operations.
    - Adjusting the output of electric vehicle charging stations to match grid availability or to avoid peak pricing.

    #### Target Audience

    This API is designed for application developers in the energy sector who focus on the tasks of optimizing microgrid
    electricity flows. Its design aims to be as developer-friendly as possible, requiring no prior knowledge in
    electrical engineering and systems.

    #### Security

    ALL requests to this service must be signed. The key and signature
    should be added to the request metadata (HTTP headers). The signature
    should be computed using the HMAC-SHA256 algorithm and the user's secret key.

    ALL requests to this service must be made over HTTPS.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListMicrogridDispatches: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.ListMicrogridDispatchesRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.ListMicrogridDispatchesResponse,
    ]
    """Returns a list of all dispatches"""

    StreamMicrogridDispatches: grpc.UnaryStreamMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.StreamMicrogridDispatchesRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.StreamMicrogridDispatchesResponse,
    ]
    """Streaming RPC for receiving dispatch updates for a given microgrid"""

    CreateMicrogridDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.CreateMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.CreateMicrogridDispatchResponse,
    ]
    """Create a new dispatch"""

    UpdateMicrogridDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.UpdateMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.UpdateMicrogridDispatchResponse,
    ]
    """Update a dispatch"""

    GetMicrogridDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.GetMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.GetMicrogridDispatchResponse,
    ]
    """Get a single dispatch"""

    DeleteMicrogridDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.DeleteMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.DeleteMicrogridDispatchResponse,
    ]
    """Delete a given dispatch"""

class MicrogridDispatchServiceAsyncStub:
    """Service providing operations related to dispatching microgrid components.

    #### Overview

    The API serves to automate the process of electricity dispatches for microgrids.
    In the context of the energy industry, a 'dispatch' refers to the act of routing electrical power
    between different components within a microgrid or between a microgrid and the main grid.
    This could be for the purpose of supply (sending electricity to the grid or components within the microgrid),
    or demand (drawing electricity from the grid or from other components like batteries and solar arrays).

    #### Objective

    The primary objective of this API is to streamline and automate the complex task of electricity dispatching,
    making it easier to manage local electricity supply and demand efficiently.

    #### Key Features

    - Dispatching Electricity: Comprehensive CRUD operations for dispatching microgrid components.
    - Automation: Support for one-time as well as recurring dispatches based on flexible recurrence rules.
    - Fine-grained control: Dispatch individual microgrid components or entire component categories.

    #### Example Use Cases

    - Charging or discharging a battery based on optimal time-of-use rates.
    - Limiting the output of a Photovoltaic (PV) array during periods of low demand.
    - Invoking Frequency Containment Reserves (FCR) or Automatic Frequency Restoration Reserves (aFRR) to
       support grid operations.
    - Adjusting the output of electric vehicle charging stations to match grid availability or to avoid peak pricing.

    #### Target Audience

    This API is designed for application developers in the energy sector who focus on the tasks of optimizing microgrid
    electricity flows. Its design aims to be as developer-friendly as possible, requiring no prior knowledge in
    electrical engineering and systems.

    #### Security

    ALL requests to this service must be signed. The key and signature
    should be added to the request metadata (HTTP headers). The signature
    should be computed using the HMAC-SHA256 algorithm and the user's secret key.

    ALL requests to this service must be made over HTTPS.
    """

    ListMicrogridDispatches: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.ListMicrogridDispatchesRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.ListMicrogridDispatchesResponse,
    ]
    """Returns a list of all dispatches"""

    StreamMicrogridDispatches: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.StreamMicrogridDispatchesRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.StreamMicrogridDispatchesResponse,
    ]
    """Streaming RPC for receiving dispatch updates for a given microgrid"""

    CreateMicrogridDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.CreateMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.CreateMicrogridDispatchResponse,
    ]
    """Create a new dispatch"""

    UpdateMicrogridDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.UpdateMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.UpdateMicrogridDispatchResponse,
    ]
    """Update a dispatch"""

    GetMicrogridDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.GetMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.GetMicrogridDispatchResponse,
    ]
    """Get a single dispatch"""

    DeleteMicrogridDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.v1.dispatch_pb2.DeleteMicrogridDispatchRequest,
        frequenz.api.dispatch.v1.dispatch_pb2.DeleteMicrogridDispatchResponse,
    ]
    """Delete a given dispatch"""

class MicrogridDispatchServiceServicer(metaclass=abc.ABCMeta):
    """Service providing operations related to dispatching microgrid components.

    #### Overview

    The API serves to automate the process of electricity dispatches for microgrids.
    In the context of the energy industry, a 'dispatch' refers to the act of routing electrical power
    between different components within a microgrid or between a microgrid and the main grid.
    This could be for the purpose of supply (sending electricity to the grid or components within the microgrid),
    or demand (drawing electricity from the grid or from other components like batteries and solar arrays).

    #### Objective

    The primary objective of this API is to streamline and automate the complex task of electricity dispatching,
    making it easier to manage local electricity supply and demand efficiently.

    #### Key Features

    - Dispatching Electricity: Comprehensive CRUD operations for dispatching microgrid components.
    - Automation: Support for one-time as well as recurring dispatches based on flexible recurrence rules.
    - Fine-grained control: Dispatch individual microgrid components or entire component categories.

    #### Example Use Cases

    - Charging or discharging a battery based on optimal time-of-use rates.
    - Limiting the output of a Photovoltaic (PV) array during periods of low demand.
    - Invoking Frequency Containment Reserves (FCR) or Automatic Frequency Restoration Reserves (aFRR) to
       support grid operations.
    - Adjusting the output of electric vehicle charging stations to match grid availability or to avoid peak pricing.

    #### Target Audience

    This API is designed for application developers in the energy sector who focus on the tasks of optimizing microgrid
    electricity flows. Its design aims to be as developer-friendly as possible, requiring no prior knowledge in
    electrical engineering and systems.

    #### Security

    ALL requests to this service must be signed. The key and signature
    should be added to the request metadata (HTTP headers). The signature
    should be computed using the HMAC-SHA256 algorithm and the user's secret key.

    ALL requests to this service must be made over HTTPS.
    """

    @abc.abstractmethod
    def ListMicrogridDispatches(
        self,
        request: frequenz.api.dispatch.v1.dispatch_pb2.ListMicrogridDispatchesRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.dispatch.v1.dispatch_pb2.ListMicrogridDispatchesResponse, collections.abc.Awaitable[frequenz.api.dispatch.v1.dispatch_pb2.ListMicrogridDispatchesResponse]]:
        """Returns a list of all dispatches"""

    @abc.abstractmethod
    def StreamMicrogridDispatches(
        self,
        request: frequenz.api.dispatch.v1.dispatch_pb2.StreamMicrogridDispatchesRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.dispatch.v1.dispatch_pb2.StreamMicrogridDispatchesResponse], collections.abc.AsyncIterator[frequenz.api.dispatch.v1.dispatch_pb2.StreamMicrogridDispatchesResponse]]:
        """Streaming RPC for receiving dispatch updates for a given microgrid"""

    @abc.abstractmethod
    def CreateMicrogridDispatch(
        self,
        request: frequenz.api.dispatch.v1.dispatch_pb2.CreateMicrogridDispatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.dispatch.v1.dispatch_pb2.CreateMicrogridDispatchResponse, collections.abc.Awaitable[frequenz.api.dispatch.v1.dispatch_pb2.CreateMicrogridDispatchResponse]]:
        """Create a new dispatch"""

    @abc.abstractmethod
    def UpdateMicrogridDispatch(
        self,
        request: frequenz.api.dispatch.v1.dispatch_pb2.UpdateMicrogridDispatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.dispatch.v1.dispatch_pb2.UpdateMicrogridDispatchResponse, collections.abc.Awaitable[frequenz.api.dispatch.v1.dispatch_pb2.UpdateMicrogridDispatchResponse]]:
        """Update a dispatch"""

    @abc.abstractmethod
    def GetMicrogridDispatch(
        self,
        request: frequenz.api.dispatch.v1.dispatch_pb2.GetMicrogridDispatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.dispatch.v1.dispatch_pb2.GetMicrogridDispatchResponse, collections.abc.Awaitable[frequenz.api.dispatch.v1.dispatch_pb2.GetMicrogridDispatchResponse]]:
        """Get a single dispatch"""

    @abc.abstractmethod
    def DeleteMicrogridDispatch(
        self,
        request: frequenz.api.dispatch.v1.dispatch_pb2.DeleteMicrogridDispatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.dispatch.v1.dispatch_pb2.DeleteMicrogridDispatchResponse, collections.abc.Awaitable[frequenz.api.dispatch.v1.dispatch_pb2.DeleteMicrogridDispatchResponse]]:
        """Delete a given dispatch"""

def add_MicrogridDispatchServiceServicer_to_server(servicer: MicrogridDispatchServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
