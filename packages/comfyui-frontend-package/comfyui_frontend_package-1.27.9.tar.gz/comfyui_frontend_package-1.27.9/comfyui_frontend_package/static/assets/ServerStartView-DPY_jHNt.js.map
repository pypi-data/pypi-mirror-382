{"version":3,"file":"ServerStartView-DPY_jHNt.js","sources":["../../src/views/ServerStartView.vue"],"sourcesContent":["<template>\n  <BaseViewTemplate dark>\n    <div class=\"relative min-h-screen\">\n      <!-- Terminal Background Layer (always visible during loading) -->\n      <div v-if=\"!isError\" class=\"fixed inset-0 overflow-hidden z-0\">\n        <div class=\"h-full w-full\">\n          <BaseTerminal @created=\"terminalCreated\" />\n        </div>\n      </div>\n\n      <!-- Semi-transparent overlay -->\n      <div v-if=\"!isError\" class=\"fixed inset-0 bg-neutral-900/80 z-5\"></div>\n\n      <!-- Smooth radial gradient overlay -->\n      <div\n        v-if=\"!isError\"\n        class=\"fixed inset-0 z-8\"\n        style=\"\n          background: radial-gradient(\n            ellipse 800px 600px at center,\n            rgba(23, 23, 23, 0.95) 0%,\n            rgba(23, 23, 23, 0.93) 10%,\n            rgba(23, 23, 23, 0.9) 20%,\n            rgba(23, 23, 23, 0.85) 30%,\n            rgba(23, 23, 23, 0.75) 40%,\n            rgba(23, 23, 23, 0.6) 50%,\n            rgba(23, 23, 23, 0.4) 60%,\n            rgba(23, 23, 23, 0.2) 70%,\n            rgba(23, 23, 23, 0.1) 80%,\n            rgba(23, 23, 23, 0.05) 90%,\n            transparent 100%\n          );\n        \"\n      ></div>\n\n      <div class=\"relative z-10\">\n        <!-- Main startup display using StartupDisplay component -->\n        <StartupDisplay\n          :title=\"displayTitle\"\n          :status-text=\"displayStatusText\"\n          :progress-percentage=\"installStageProgress\"\n          :hide-progress=\"isError\"\n        />\n\n        <!-- Error Section (positioned at bottom) -->\n        <div\n          v-if=\"isError\"\n          class=\"absolute bottom-20 left-0 right-0 flex flex-col items-center gap-4\"\n        >\n          <div class=\"flex gap-4 justify-center\">\n            <Button\n              icon=\"pi pi-flag\"\n              :label=\"$t('serverStart.reportIssue')\"\n              severity=\"secondary\"\n              @click=\"reportIssue\"\n            />\n            <Button\n              icon=\"pi pi-file\"\n              :label=\"$t('serverStart.openLogs')\"\n              severity=\"secondary\"\n              @click=\"openLogs\"\n            />\n            <Button\n              icon=\"pi pi-wrench\"\n              :label=\"$t('serverStart.troubleshoot')\"\n              @click=\"troubleshoot\"\n            />\n          </div>\n        </div>\n\n        <!-- Terminal Output (positioned at bottom when manually toggled in error state) -->\n        <div\n          v-if=\"terminalVisible && isError\"\n          class=\"absolute bottom-4 left-4 right-4 max-w-4xl mx-auto z-10\"\n        >\n          <div\n            class=\"bg-neutral-900/95 rounded-lg p-4 border border-neutral-700 h-[300px]\"\n          >\n            <BaseTerminal @created=\"terminalCreated\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </BaseViewTemplate>\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  InstallStage,\n  type InstallStageInfo,\n  type InstallStageName,\n  ProgressStatus\n} from '@comfyorg/comfyui-electron-types'\nimport { Terminal } from '@xterm/xterm'\nimport Button from 'primevue/button'\nimport { Ref, computed, onMounted, onUnmounted, ref } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nimport BaseTerminal from '@/components/bottomPanel/tabs/terminal/BaseTerminal.vue'\nimport StartupDisplay from '@/components/common/StartupDisplay.vue'\nimport type { useTerminal } from '@/composables/bottomPanelTabs/useTerminal'\nimport { electronAPI } from '@/utils/envUtil'\nimport BaseViewTemplate from '@/views/templates/BaseViewTemplate.vue'\n\nconst { t } = useI18n()\nconst electron = electronAPI()\n\nconst status = ref<ProgressStatus>(ProgressStatus.INITIAL_STATE)\nconst electronVersion = ref<string>('')\nconst terminalVisible = ref(false)\n\nconst installStage = ref<InstallStageName | null>(null)\nconst installStageMessage = ref<string>('')\nconst installStageProgress = ref<number | undefined>(undefined)\n\nlet xterm: Terminal | undefined\n\n/**\n * Handles installation stage updates from the desktop\n */\nconst updateInstallStage = (stageInfo: InstallStageInfo) => {\n  console.warn('[InstallStage.onUpdate] Received:', {\n    stage: stageInfo.stage,\n    progress: stageInfo.progress,\n    message: stageInfo.message,\n    error: stageInfo.error,\n    timestamp: stageInfo.timestamp,\n    fullInfo: stageInfo\n  })\n\n  installStage.value = stageInfo.stage\n  installStageMessage.value = stageInfo.message || ''\n  installStageProgress.value = stageInfo.progress\n}\n\nconst currentStatusLabel = computed(() => {\n  // Use the message from the Electron API if available\n  if (installStageMessage.value) {\n    return installStageMessage.value\n  }\n  return t(`serverStart.process.${status.value}`)\n})\n\nconst isError = computed(\n  () =>\n    status.value === ProgressStatus.ERROR ||\n    installStage.value === InstallStage.ERROR\n)\n\nconst isInstallationStage = computed(() => {\n  const installationStages: InstallStageName[] = [\n    InstallStage.WELCOME_SCREEN,\n    InstallStage.INSTALL_OPTIONS_SELECTION,\n    InstallStage.CREATING_DIRECTORIES,\n    InstallStage.INITIALIZING_CONFIG,\n    InstallStage.PYTHON_ENVIRONMENT_SETUP,\n    InstallStage.INSTALLING_REQUIREMENTS,\n    InstallStage.INSTALLING_PYTORCH,\n    InstallStage.INSTALLING_COMFYUI_REQUIREMENTS,\n    InstallStage.INSTALLING_MANAGER_REQUIREMENTS,\n    InstallStage.MIGRATING_CUSTOM_NODES\n  ]\n  return (\n    installStage.value !== null &&\n    installationStages.includes(installStage.value)\n  )\n})\n\nconst displayTitle = computed(() => {\n  if (isError.value) {\n    return t('serverStart.errorMessage')\n  }\n  if (isInstallationStage.value) {\n    return t('serverStart.installation.title')\n  }\n  return t('serverStart.title')\n})\n\nconst displayStatusText = computed(() => {\n  if (isError.value && electronVersion.value) {\n    return `v${electronVersion.value}`\n  }\n  return currentStatusLabel.value\n})\n\nconst updateProgress = ({ status: newStatus }: { status: ProgressStatus }) => {\n  status.value = newStatus\n\n  // Make critical error screen more obvious.\n  if (newStatus === ProgressStatus.ERROR) terminalVisible.value = false\n}\n\nconst terminalCreated = (\n  { terminal, useAutoSize }: ReturnType<typeof useTerminal>,\n  root: Ref<HTMLElement | undefined>\n) => {\n  xterm = terminal\n\n  useAutoSize({ root, autoRows: true, autoCols: true })\n  electron.onLogMessage((message: string) => {\n    terminal.write(message)\n  })\n\n  terminal.options.cursorBlink = false\n  terminal.options.disableStdin = true\n  terminal.options.cursorInactiveStyle = 'block'\n}\n\nconst troubleshoot = () => electron.startTroubleshooting()\nconst reportIssue = () => {\n  window.open('https://forum.comfy.org/c/v1-feedback/', '_blank')\n}\nconst openLogs = () => electron.openLogsFolder()\n\nlet cleanupInstallStageListener: (() => void) | undefined\n\nonMounted(async () => {\n  electron.sendReady()\n  electron.onProgressUpdate(updateProgress)\n  cleanupInstallStageListener =\n    electron.InstallStage.onUpdate(updateInstallStage)\n\n  const stageInfo = await electron.InstallStage.getCurrent()\n  updateInstallStage(stageInfo)\n  electronVersion.value = await electron.getElectronVersion()\n})\n\nonUnmounted(() => {\n  xterm?.dispose()\n  cleanupInstallStageListener?.()\n})\n</script>\n\n<style scoped>\n@reference '../assets/css/style.css';\n\n/* Hide the xterm scrollbar completely */\n:deep(.p-terminal) .xterm-viewport {\n  overflow: hidden !important;\n}\n</style>\n"],"names":[],"mappings":"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"}