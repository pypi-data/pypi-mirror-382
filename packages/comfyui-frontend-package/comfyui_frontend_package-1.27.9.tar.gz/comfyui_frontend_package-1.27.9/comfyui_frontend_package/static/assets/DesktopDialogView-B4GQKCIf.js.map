{"version":3,"file":"DesktopDialogView-B4GQKCIf.js","sources":["../../src/constants/desktopDialogs.ts","../../src/views/DesktopDialogView.vue"],"sourcesContent":["export interface DialogAction {\n  readonly label: string\n  readonly action: 'openUrl' | 'close' | 'cancel'\n  readonly url?: string\n  readonly severity?: 'danger' | 'primary' | 'secondary' | 'warn'\n  readonly returnValue: string\n}\n\ninterface DesktopDialog {\n  readonly title: string\n  readonly message: string\n  readonly buttons: DialogAction[]\n}\n\nexport const DESKTOP_DIALOGS = {\n  /** Shown when a corrupt venv is detected. */\n  reinstallVenv: {\n    title: 'Reinstall ComfyUI (Fresh Start)?',\n    message: `Sorry, we can't launch ComfyUI because some installed packages aren't compatible.\n\nClick Reinstall to restore ComfyUI and get back up and running.\n\nPlease note: if you've added custom nodes, you'll need to reinstall them after this process.`,\n    buttons: [\n      {\n        label: 'Learn More',\n        action: 'openUrl',\n        url: 'https://docs.comfy.org',\n        returnValue: 'openDocs'\n      },\n      {\n        label: 'Reinstall',\n        action: 'close',\n        severity: 'danger',\n        returnValue: 'resetVenv'\n      }\n    ]\n  },\n  /** A dialog that is shown when an invalid dialog ID is provided. */\n  invalidDialog: {\n    title: 'Invalid Dialog',\n    message: `Invalid dialog ID was provided.`,\n    buttons: [\n      {\n        label: 'Close',\n        action: 'cancel',\n        returnValue: 'cancel'\n      }\n    ]\n  }\n} as const satisfies { [K: string]: DesktopDialog }\n\n/** The ID of a desktop dialog. */\ntype DesktopDialogId = keyof typeof DESKTOP_DIALOGS\n\n/**\n * Checks if {@link id} is a valid dialog ID.\n * @param id The string to check\n * @returns `true` if the ID is a valid dialog ID, otherwise `false`\n */\nfunction isDialogId(id: unknown): id is DesktopDialogId {\n  return typeof id === 'string' && id in DESKTOP_DIALOGS\n}\n\n/**\n * Gets the dialog with the given ID.\n * @param dialogId The ID of the dialog to get\n * @returns The dialog with the given ID\n */\nexport function getDialog(\n  dialogId: string | string[]\n): DesktopDialog & { id: DesktopDialogId } {\n  const id = isDialogId(dialogId) ? dialogId : 'invalidDialog'\n  return { id, ...structuredClone(DESKTOP_DIALOGS[id]) }\n}\n","<template>\n  <div class=\"w-full h-full flex flex-col rounded-lg p-6 justify-between\">\n    <h1 class=\"font-inter font-semibold text-xl m-0 italic\">\n      {{ t(`desktopDialogs.${id}.title`, title) }}\n    </h1>\n    <p class=\"whitespace-pre-wrap\">\n      {{ t(`desktopDialogs.${id}.message`, message) }}\n    </p>\n    <div class=\"flex w-full gap-2\">\n      <Button\n        v-for=\"button in buttons\"\n        :key=\"button.label\"\n        class=\"rounded-lg first:mr-auto\"\n        :label=\"\n          t(\n            `desktopDialogs.${id}.buttons.${normalizeI18nKey(button.label)}`,\n            button.label\n          )\n        \"\n        :severity=\"button.severity ?? 'secondary'\"\n        @click=\"handleButtonClick(button)\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Button from 'primevue/button'\nimport { useRoute } from 'vue-router'\n\nimport { type DialogAction, getDialog } from '@/constants/desktopDialogs'\nimport { t } from '@/i18n'\nimport { electronAPI } from '@/utils/envUtil'\nimport { normalizeI18nKey } from '@/utils/formatUtil'\n\nconst route = useRoute()\nconst { id, title, message, buttons } = getDialog(route.params.dialogId)\n\nconst handleButtonClick = async (button: DialogAction) => {\n  await electronAPI().Dialog.clickButton(button.returnValue)\n}\n</script>\n\n<style scoped>\n@reference '../assets/css/style.css';\n\n.p-button-secondary {\n  @apply text-white border-none bg-neutral-600;\n}\n\n.p-button-secondary:hover {\n  @apply bg-neutral-550;\n}\n\n.p-button-secondary:active {\n  @apply bg-neutral-500;\n}\n\n.p-button-danger {\n  @apply bg-coral-red-600;\n}\n\n.p-button-danger:hover {\n  @apply bg-coral-red-500;\n}\n\n.p-button-danger:active {\n  @apply bg-coral-red-400;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcO,MAAM,kBAAkB;AAAA;AAAA,EAE7B,eAAe;AAAA,IACb,OAAO;AAAA,IACP,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,IAKT,SAAS;AAAA,MACP;AAAA,QACE,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,KAAK;AAAA,QACL,aAAa;AAAA,MACf;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,aAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAEA,eAAe;AAAA,IACb,OAAO;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,MACP;AAAA,QACE,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,aAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF;AACF;AAUA,SAAS,WAAW,IAAoC;AAC/C,SAAA,OAAO,OAAO,YAAY,MAAM;AACzC;AAFS;AASF,SAAS,UACd,UACyC;AACzC,QAAM,KAAK,WAAW,QAAQ,IAAI,WAAW;AAC7C,SAAO,EAAE,IAAI,GAAG,gBAAgB,gBAAgB,EAAE,CAAC;AACrD;AALgB;;;;;;;;AClChB,UAAM,QAAQ;AACR,UAAA,EAAE,IAAI,OAAO,SAAS,YAAY,UAAU,MAAM,OAAO,QAAQ;AAEjE,UAAA,oBAAoB,8BAAO,WAAyB;AACxD,YAAM,YAAY,EAAE,OAAO,YAAY,OAAO,WAAW;AAAA,IAAA,GADjC;;;;;;;;;;;;;;;;;;;;;;;;"}