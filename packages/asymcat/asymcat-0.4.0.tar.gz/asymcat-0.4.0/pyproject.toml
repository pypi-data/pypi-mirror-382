[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "asymcat"
dynamic = ["version"]
description = "A Python library for obtaining asymmetric measures of association between categorical variables in data exploration and description"
readme = "README.md"
license = "MIT"
keywords = ["categorical", "association", "asymmetric", "data-analysis", "statistics"]
authors = [
    {name = "Tiago Tresoldi", email = "tiago.tresoldi@lingfil.uu.se"}
]
maintainers = [
    {name = "Tiago Tresoldi", email = "tiago.tresoldi@lingfil.uu.se"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "freqprob>=0.4.0",
    "matplotlib",
    "numpy",
    "pandas",
    "scipy",
    "seaborn",
    "tabulate",
]

[project.optional-dependencies]
# Development dependencies (required by Makefile)
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",

    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.5.0",

    # Build and release
    "build>=0.10.0",
    "twine>=4.0.0",

    # Documentation generation (nhandu for tutorials)
    "nhandu>=0.1.0",
]

# All optional dependencies (runtime + dev)
all = [
    "asymcat[dev]",
]

[project.urls]
Homepage = "https://github.com/tresoldi/asymcat"
Documentation = "https://github.com/tresoldi/asymcat/blob/master/docs/USER_GUIDE.md"
Repository = "https://github.com/tresoldi/asymcat.git"
Issues = "https://github.com/tresoldi/asymcat/issues"
Changelog = "https://github.com/tresoldi/asymcat/blob/master/CHANGELOG.md"

[tool.setuptools.dynamic]
version = {attr = "asymcat.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["asymcat*"]

[tool.ruff]
line-length = 120
target-version = "py310"
extend-exclude = [
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "RUF",   # Ruff-specific rules
    "D",     # pydocstyle
]

ignore = [
    "E501",   # Line too long (ruff format handles this)
    "B007",   # Loop control variable not used (common in unpacking)
    "B008",   # Do not perform function calls in argument defaults
    "B904",   # Exception chaining (stylistic preference - raise from err)
    "RET504", # Unnecessary variable assignment before return
    "ARG002", # Unused method argument (common in abstract methods)
    "SIM102", # Use a single if statement (readability preference)
    "SIM118", # Use `key in dict` instead of `key in dict.keys()` (stylistic)
    "C408",   # Unnecessary dict() call (readability preference)
    "D202",   # No blank lines allowed after function docstring
    "D200",   # One-line docstring should fit on one line
    "D205",   # 1 blank line required between summary line and description
    "D301",   # Use r""" if any backslashes in docstring
    "D107",   # Missing docstring in __init__
    "D103",   # Missing docstring in public function
    "D400",   # First line should end with a period
    "D401",   # First line should be in imperative mood
    "RUF001", # String contains ambiguous unicode (phonetic symbols)
    "RUF002", # Docstring contains ambiguous unicode (phonetic symbols)
    "RUF003", # Ambiguous Greek characters (mathematical notation)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG001",  # Unused function arguments in tests
    "ARG002",  # Unused method arguments in tests
    "S101",    # Use of assert detected (pytest uses assert)
    "D",       # Disable all pydocstyle rules for tests
    "TID252",  # Allow relative imports in tests
    "PT",      # Pytest style (too strict for existing tests)
    "RUF059",  # Allow unused unpacked variables in tests
]
"docs/tutorial_*.py" = [
    "D100",   # Missing module docstring (self-documenting)
    "E402",   # Module import not at top (pedagogical)
    "T201",   # Allow print statements
]

[tool.ruff.lint.isort]
known-first-party = ["asymcat"]
known-third-party = ["numpy", "pandas", "scipy", "matplotlib", "seaborn", "freqprob"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false  # TODO: Enable after adding type hints
disallow_incomplete_defs = false  # TODO: Enable after adding type hints
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # TODO: Enable after cleaning up type ignores
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*",
    "pandas.*",
    "matplotlib.*",
    "seaborn.*",
    "pytest.*",
    "freqprob.*",
    "tabulate.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disable_error_code = ["misc", "no-untyped-def"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=asymcat",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=75",  # TODO: Increase to 80 after adding tests for correlation.py
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests that measure performance",
    "large_data: marks tests that require large datasets",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["asymcat"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "tests/htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
