.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "DEBOPS.GITLAB" "5" "Oct 09, 2025" "v3.2.5" "DebOps"
.SH NAME
debops.gitlab \- Install and manage GitLab Omnibus
.SH SYNOPSIS
.sp
\fBdebops run service/gitlab\fP [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-tags\fP \fItag1,tag2,\fP\&...] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.sp
\fBdebops check service/gitlab\fP [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-tags\fP \fItag1,tag2,\fP\&...] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.SH DESCRIPTION
.sp
\fI\%GitLab\fP <\fBhttps://about.gitlab.com/\fP> is a complete suite of tools and services needed for application
development, testing and deployment, including a software forge based on
\fBgit\fP, issue tracking, Continuous Integration and support for
Kubernetes and other popular services. GitLab is developed using an \(dqopen core\(dq
model, with essential parts of the project licensed under Open Source licenses
and ability to upgrade the service with commercial licenses.
.sp
The project can be deployed in several different ways, one of which is an
\(dqomnibus\(dq installation which consists of all of the needed services (web
server, database, various other tools) bundled together in a package and
managed as a whole using Chef. The \fBdebops.gitlab\fP Ansible role provides an
integration layer between various services managed by DebOps (firewall, PKI
infrastructure, LDAP environment) and GitLab Omnibus, and allows the system
administrator to deploy and manage GitLab Omnibus using Ansible.
.SH GETTING STARTED
.SS Default configuration
.sp
The \fBdebops.gitlab\fP role supports installation of GitLab Omnibus Community
Edition as well as the Enterprise Edition, which can be selected using the
\fI\%gitlab__edition\fP variable. Manual installation of the GitLab Omnibus
package is also supported, in which case the role can be used to configure such
installation and provide integration with the rest of the environment.
.sp
Specific version of the GitLab Omnibus package can be selected using the
\fI\%gitlab__preferred_version\fP variable (by default, role installs the
latest available version). The version number needs to be specified in the
format understood by APT, for example \fB19.9.1\-ce.0\fP\&. This functionality can
be used to in GitLab instance migrations to a new environment, where after
installing older version of the application and importing the database, normal
APT upgrades can be performed to update GitLab.
.sp
By default, the installation will be configured to publish GitLab on the
\fBcode.{{ gitlab__domain }}\fP DNS domain, to aid configuration of GitLab Runner
instances. This can be changed by overriding the \fI\%gitlab__fqdn\fP
variable via the Ansible inventory.
.sp
The initial \fBroot\fP password is randomly generated and stored in the
\fBansible/secret/gitlab/credentials/\fP directory on the Ansible Controller,
managed by the \fI\%debops.secret\fP Ansible role.
.sp
GitLab Omnibus deployed by DebOps will be configured with GitLab Container
Registry available by default on a separate TCP port. This ensures that only
one DNS domain and X.509 certificate is needed by default. Container Registry
can be deployed on a separate DNS domain if needed.
.sp
The role integrates GitLab Omnibus with the \fBferm\fP service through the
\fI\%debops.ferm\fP Ansible role. By default, the main GitLab service and
Container Registry are accessible to any hosts and networks once deployed, this
can be configured using role variables.
.sp
PKI environment managed by the \fI\%debops.pki\fP role is also integrated with
GitLab Omnibus, via the use of symlinks in \fB/etc/gitlab/ssl/\fP directory
that provide access to private keys and X.509 certificates in the
\fB/etc/pki/realms/\fP directories.
.sp
If the LDAP environment managed by the \fI\%debops.ldap\fP Ansible role is
detected, a suitable user account for GitLab instance will be created by
default. GitLab will be configured with a single LDAP server in that case.
.sp
Daily backups of GitLab Omnibus environment will be enabled by default using
the \fBcron\fP service.
.SS Example inventory
.sp
To install GitLab Omnibus service on a host, it needs to be included in the
\fB[debops_service_gitlab]\fP Ansible inventory group.
.sp
Example Ansible inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_all_hosts]
hostname

[debops_service_gitlab]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.gitlab\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-


\- name: Manage GitLab Omnibus service
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_service_gitlab\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: keyring
      tags: [ \(aqrole::keyring\(aq, \(aqskip::keyring\(aq ]
      keyring__dependent_apt_keys:
        \- \(aq{{ gitlab__keyring__dependent_apt_keys }}\(aq

    \- role: extrepo
      tags: [ \(aqrole::extrepo\(aq, \(aqskip::extrepo\(aq ]
      extrepo__dependent_sources:
        \- \(aq{{ gitlab__extrepo__dependent_sources }}\(aq

    \- role: apt_preferences
      tags: [ \(aqrole::apt_preferences\(aq, \(aqskip::apt_preferences\(aq ]
      apt_preferences__dependent_list:
        \- \(aq{{ gitlab__apt_preferences__dependent_list }}\(aq

    \- role: etc_services
      tags: [ \(aqrole::etc_services\(aq, \(aqskip::etc_services\(aq ]
      etc_services__dependent_list:
        \- \(aq{{ gitlab__etc_services__dependent_list }}\(aq

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ gitlab__ferm__dependent_rules }}\(aq

    \- role: python
      tags: [ \(aqrole::python\(aq, \(aqskip::python\(aq, \(aqrole::ldap\(aq ]
      python__dependent_packages3:
        \- \(aq{{ ldap__python__dependent_packages3 }}\(aq
      python__dependent_packages2:
        \- \(aq{{ ldap__python__dependent_packages2 }}\(aq

    \- role: ldap
      tags: [ \(aqrole::ldap\(aq, \(aqskip::ldap\(aq ]
      ldap__dependent_tasks:
        \- \(aq{{ gitlab__ldap__dependent_tasks }}\(aq

    \- role: gitlab
      tags: [ \(aqrole::gitlab\(aq, \(aqskip::gitlab\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after a host was first
configured to speed up playbook execution, when you are sure that most of the
configuration is already in the desired state.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::gitlab\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.UNINDENT
.SS Other resources
.sp
List of other useful resources related to the \fBdebops.gitlab\fP Ansible role:
.INDENT 0.0
.IP \(bu 2
Official documentation of \fI\%GitLab Omnibus\fP <\fBhttps://docs.gitlab.com/omnibus/\fP>
.IP \(bu 2
GitLab \fI\%package repository\fP <\fBhttps://packages.gitlab.com/gitlab/gitlab-ce/\fP> which contains APT packages for older releases,
not accessible through the official APT configuration
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.gitlab\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS gitlab__ssl_symlinks
.sp
GitLab Omnibus uses private keys and X.509 certificates provided in the
\fB/etc/gitlab/ssl/\fP directory to configure encrypted connection support
inside of its environment. The \fBgitlab__ssl_*_symlinks\fP variables can be used
to create symlinks to the private keys and certificates stored elsewhere in the
filesystem; this is used to integrate GitLab Omnibus with the PKI
infrastructure managed by the \fI\%debops.pki\fP Ansible role.
.SS Examples
.sp
You can see the default set of private key and X.509 certificate symlinks
defined in the \fI\%gitlab__ssl_default_symlinks\fP variable.
.SS Syntax
.sp
The variables are defined as a list of YAML dictionaries, with specific
parameters:
.INDENT 0.0
.TP
.B \fBlink\fP
Required. Name of the symlink in the \fB/etc/gitlab/ssl/\fP directory which
will point to a specific resource. GitLab Omnibus expects the \fB*.key\fP
and \fB*.crt\fP files respectively, with names based on the DNS names used
for different resources, for example the service addresses.
.TP
.B \fBsrc\fP
Required. Absolute path to a file which will be symlinked to in the
\fB/etc/gitlab/ssl/\fP directory.
.TP
.B \fBstate\fP
Optional. If not specified or \fBlink\fP, a given symlink will be created or
updated if necessary. If \fBabsent\fP, a given symlink will be removed.
.UNINDENT
.SS gitlab__configuration
.sp
The \fBgitlab__*_configuration\fP variables define the contents of the
\fB/etc/gitlab/gitlab.rb\fP configuration file, used to configure GitLab
Omnibus installation. You can find an example configuration file with complete
contents in the \fB/opt/gitlab/etc/gitlab.rb.template\fP file, which might be
useful as a reference. You can also use \fI\%online GitLab Omnibus documentation\fP <\fBhttps://docs.gitlab.com/omnibus/settings/\fP>
to find more details about configuring GitLab Omnibus.
.sp
The role uses \fI\%Universal Configuration\fP system to integrate the default
and inventory variables during configuration file generation.
.SS Examples
.sp
You can see the default configuration defined in the role in
\fI\%gitlab__default_configuration\fP variable to see examples of various
configuration options.
.SS Syntax
.sp
The variables are defined as lists of YAML dictionaries, each entry can
configure either a simple variable, a list or a \(dqsection\(dq of configuration
options. Entries are defined using specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of the variable to define in the configuration file, or
a configuration section (for example \fBgitlab_rails\fP) if the \fBoptions\fP
parameter is also included. Configuration entries with the same \fBname\fP
parameter are merged together and can affect each other.
.TP
.B \fBtitle\fP
Optional. String or YAML text block with a short \(dqtitle\(dq comment which
describes a given option.
.TP
.B \fBcomment\fP
Optional. String or YAML text block with a longer \(dqdescription\(dq comment.
.TP
.B \fBvalue\fP
The value of a given configuration option. It can be a string, a number,
a boolean variable or a YAML list (usually with strings).
.TP
.B \fBraw\fP
If the \fBraw\fP parameter is specified, the \fBname\fP and \fBvalue\fP parameters
are not included in the generated configuration file. The contents of the
\fBraw\fP parameter (string or YAML text block) will be included in the
generated configuration file as\-is. You can use Jinja inside of the \fBraw\fP
parameter to augment generated configuration as needed. This is useful with
more complex configuration options such as dictionaries or Ruby code.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given configuration option will
be included in the generated file. If \fBabsent\fP, a given configuration
option will not be included in the finished file. If \fBcomment\fP, the option
will be included but commented out. If \fBignore\fP, a given configuration
entry will not be evaluated during role execution.
.TP
.B \fBseparator\fP
Optional. Add an empty line before a given configuration option, for
aesthetic purposes.
.TP
.B \fBoptions\fP
Optional. A list of configuration options which belong to a given \(dqsection\(dq
(in Ruby terms, keys and values of a given dictionary). Each element of the
list is a YAML dictionary with the same paraneters as the main configuration;
the \fBname\fP parameter specifies the dictionary key and \fBvalue\fP or \fBraw\fP
parameters can be used to define it.
.UNINDENT
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2024, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
