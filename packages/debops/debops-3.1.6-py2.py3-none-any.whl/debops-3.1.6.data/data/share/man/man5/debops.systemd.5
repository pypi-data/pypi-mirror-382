.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "DEBOPS.SYSTEMD" "5" "Oct 09, 2025" "v3.1.6" "DebOps"
.SH NAME
debops.systemd \- Configure system and service manager using Ansible
.SH SYNOPSIS
.sp
\fBdebops run service/systemd\fP [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-tags\fP \fItag1,tag2,\fP\&...] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.SH DESCRIPTION
.sp
The \fI\%systemd\fP <\fBhttps://www.freedesktop.org/wiki/Software/systemd/\fP> project is a system and service manager, a replacement for the
traditional \fB/bin/init\fP daemon started by the kernel after the boot
process is complete. \fBsystemd\fP focuses on the intermediate layer
between the \(dqkernel space\(dq and \(dquserspace\(dq, so called \(dqsystem\(dq layer. The
project itself is composed from multiple separate services which can be enabled
or disabled as needed.
.sp
The \fI\%debops.systemd\fP Ansible role focuses on management of the
\fBsystemd\fP service itself; other Ansible roles included in the DebOps
project can be used to manage disparate components like \fBjournald\fP via
the \fI\%debops.journald\fP role. This role manages the \(dqsystem\(dq instance of
\fBsystemd\fP, as well as the global configuration of the
\fBsystemd \-\-user\fP instances and the configuration of the
\fBsystemd\-logind\fP login manager.
.SH GETTING STARTED
.SS Example inventory
.sp
The \fBdebops.systemd\fP role is included by default in the \fBcommon.yml\fP DebOps
playbook; you don\(aqt need to add hosts to any Ansible groups to enable it.
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.systemd\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage systemd service
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_all_hosts\(aq, \(aqdebops_service_systemd\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: systemd
      tags: [ \(aqrole::systemd\(aq, \(aqskip::systemd\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after a host was first
configured to speed up playbook execution, when you are sure that most of the
configuration is already in the desired state.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::systemd\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of the \fBdebops.systemd\fP default variables have more extensive
configuration than simple strings or lists, here you can find documentation and
examples for them.
.SS systemd__configuration
.sp
The \fBsystemd__*_configuration\fP default variables define the configuration of
the \fBsystemd\fP service itself. There are separate sets of variables for
the \(dqsystem\(dq instance, as well as a separate set of
\fBsystemd__user_*_configuration\fP variables for the global configuration of the
\fBsystemd \-\-user\fP instances \- both use the same configuration format.
You can find more details about \fBsystemd\fP configuration in the
\fI\%systemd\-system.conf(5)\fP <\fBhttps://manpages.debian.org/systemd-system.conf(5)\fP> manual page.
.sp
The \fBsystemd__logind_*_configuration\fP variables define the configuration of
the \fBsystemd\-logind\fP service. See \fI\%loginf.conf(5)\fP <\fBhttps://manpages.debian.org/loginf.conf(5)\fP> for more
details about its configuration options.
.sp
The generated configuration will be located in the
\fB/etc/systemd/\fP\fIsystem,user,logind\fP\fB\&.conf.d/ansible.conf\fP config files.
These files are not generated by default to fall back on the default
configuration provided in the OS packages; to generate them the
\fI\%systemd__deploy_state\fP variable needs to be set to \fBpresent\fP\&.
.SS Examples
.sp
You can check the \fI\%systemd__default_configuration\fP,
\fI\%systemd__user_default_configuration\fP and the
\fI\%systemd__logind_default_configuration\fP variables for the default
contents of the configuration files.
.SS Syntax
.sp
The role uses the \fI\%Universal Configuration\fP system to configure
\fBsystemd\fP\&. Each configuration entry in the list is a YAML dictionary.
The simple form of the configuration uses the dictionary keys as the parameter
names, and dictionary values as the parameter values. Remember that the
parameter names need to be specified in the exact case they are used in the
documentation (e.g.  \fBLogLevel\fP, \fBNUMAPolicy\fP), otherwise they will be
duplicated in the generated configuration file. It\(aqs best to use a single YAML
dictionary per configuration option.
.sp
If the YAML dictionary contains the \fBname\fP key, the configuration switches to
the complex definition mode, with configuration options defined by specific
parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Specify the name of the \fBsystemd\fP configuration file
parameter. The case is important and should be the same as specified in the
configuration file or the \fI\%systemd\-system.conf(5)\fP <\fBhttps://manpages.debian.org/systemd-system.conf(5)\fP> manual page,
otherwise the configuration entries will be duplicated.
.sp
Multiple configuration entries with the same \fBname\fP parameter are merged
together in order of appearance. This can be used to modify parameters
conditionally.
.TP
.B \fBvalue\fP
Required. The value of a given configuration option. It can be a string,
number, \fBTrue\fP/\fBFalse\fP boolean or an empty string.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given configuration parameter
will be present in the generated configuration file. If \fBabsent\fP, a given
parameter will be removed from the configuration file. If \fBcomment\fP, the
parameter will be present but commented out.
.sp
If the state is \fBinit\fP, the parameter will be \(dqprimed\(dq in the configuration
pipeline, but it will be commented out in the generated configuration file.
Any subsequent configuration entry with the same \fBname\fP will switch the
state to \fBpresent\fP \- this is used to define the default parameters in the
role which can be changed via the Ansible inventory.
.sp
If the state is \fBignore\fP, a given configuration entry will not be evaluated
during role execution. This can be used to activate configuration entries
conditionally.
.UNINDENT
.SS systemd__units
.sp
The \fBsystemd__*_units\fP default variables can be used to manage
\fBsystemd\fP units (services, timers, etc.). The role supports management
of the system\-wide units stored in the \fB/etc/systemd/system/\fP directory,
as well as the \fBsystemd \-\-user\fP instance units defined globally,
stored in the \fB/etc/systemd/user/\fP directory (using
\fBsystemd__user_*_units\fP variables). You can find more information about the
units themselves in the \fI\%systemd.unit(5)\fP <\fBhttps://manpages.debian.org/systemd.unit(5)\fP> manual page.
.SS Examples
.sp
Restart an existing service when the \fI\%debops.systemd\fP Ansible role is
applied on the host (without changing the configuration, this will be performed
on each role execution):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
systemd__units:

  \- name: \(aqsystemd\-sysctl.service\(aq
    state: \(aqrestarted\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Configure the network card on the system boot to permit Wake\-On\-LAN packets to
boot the host. The service will be created and executed on the next boot:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
systemd__units:

  \- name: \(aqwol.service\(aq
    raw: |
      [Unit]
      Description=Configure Wake on LAN

      [Service]
      Type=oneshot
      ExecStart=/sbin/ethtool \-s eth0 wol g

      [Install]
      WantedBy=basic.target
    state: \(aqpresent\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Create an example daemon which does nothing, ensure that it\(aqs started:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
systemd__units:

  \- name: \(aqsleeper.service\(aq
    raw: |
      [Unit]
      Description=An example daemonized sleep command

      [Service]
      Type=simple
      ExecStart=/usr/bin/sleep 3600

      [Install]
      WantedBy=multi\-user.target
    state: \(aqstarted\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Create an override for a specific service and change its description. Ensure
that the service is restarted when its configuration is changed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
systemd__units:

  \- name: \(aqsleeper.service.d/description.conf\(aq
    raw: |
      [Unit]
      Description=GSV Sleeper Service
    state: \(aqpresent\(aq
    restart: \(aqsleeper.service\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Remove a specific unit override file without removing the whole service. The
service will be restarted to apply the changed configuration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
systemd__units:

  \- name: \(aqsleeper.service.d/description.conf\(aq
    state: \(aqabsent\(aq
    restart: \(aqsleeper.service\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Remove a service and all of its override files. The state of the service will
not be changed (running service stays running until the next host reboot):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
systemd__units:

  \- name: \(aqwol.service\(aq
    state: \(aqabsent\(aq

  \- name: \(aqsleeper.service\(aq
    state: \(aqabsent\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax
.sp
The role uses the \fI\%Universal Configuration\fP system to manage
\fBsystemd\fP unit files. Each configuration entry in the list is a YAML
dictionary, with configuration options defined by specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of the \fBsystemd\fP unit file to manage. The name can be
in the form \fB<unit.type>\fP to denote a single \fI\%systemd.unit(5)\fP <\fBhttps://manpages.debian.org/systemd.unit(5)\fP>, as
well as \fB<unit.type>.d/<override>.conf\fP to denote a single \(dqoverride\(dq
configuration file that changes the configuration of a specific unit.
.sp
Unit files are stored either under the \fB/etc/systemd/system/\fP or the
\fB/etc/systemd/user/\fP subdirectories, depending on the default variable
used. The role will create the \fB<unit.type>.d/\fP subdirectories as needed.
.sp
The \fBname\fP parameter needs to be unique. Multiple configuration entries
with the same \fBname\fP parameter are merged together and override each other.
.TP
.B \fBraw\fP
Optional. YAML text block in the INI format, with the \fBsystemd\fP
configuration options which will be included in the generated configuration
file as\-is. The text block can contain Jinja statements to generate parts of
the configuration dynamically.
.sp
See the \fI\%systemd.unit(5)\fP <\fBhttps://manpages.debian.org/systemd.unit(5)\fP> manual page for details about the unit
configuration syntax and available options. The generated files are not
validated by Ansible before being applied in the \fBsystemd\fP
configuration at this time.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP (default), a given unit
configuration file will be generated by Ansible and placed in the
\fBsystemd\fP configuration directories. The role will ensure that the
unit is enabled in \fBsystemd\fP, but the service will not be started by
default.
.sp
If \fBstarted\fP or \fBstopped\fP, the configuration file will be generated and
the unit will be enabled. The role will then try to ensure that the unit is
in the desired state by starting or stopping it in \fBsystemd\fP\&.
Specified actions will not be performed if a given configuration entry
defines an unit override file.
.sp
If \fBrestarted\fP or \fBreloaded\fP, the configuration file will be generated
and the unit will be enabled. The role will tell \fBsystemd\fP to
restart or reload the unit. This will be repeated on each execution of the
role, unless the state parameter is updated. Specified actions will not be
performed if a given configuration entry defines an unit override file.
.sp
If \fBabsent\fP, the role will remove the specified unit configuration file as
well as the override directory if it is present (all override files will be
removed, even ones not managed by Ansible). Specific override files can be
removed as well if they are defined directly in the \fBname\fP parameter.
.sp
The role will not change the state of a running \fBsystemd\fP unit this
way. Units will report their configuration as \(dqnot found\(dq and will stay
active until the next reboot or if they are stopped manually (Ansible
currently cannot deal with such case properly via the
\fBansible.builtin.systemd\fP module).
.sp
If \fBinit\fP, the configuration entry will be prepared, but no changes will be
done on the host itself. This can be done to prepare a unit configuration and
activate it conditionally later in the universal configuration pipeline.
.sp
If \fBignore\fP, a given configuration entry will not be evaluated during role
execution.
.TP
.B \fBrestart\fP
Optional. Specify the name of a \fBsystemd\fP unit (not the override).
If a given entry generates a configuration file for a unit or its override
with a \(dqchanged\(dq state, or a given override is removed, the role will tell
\fBsystemd\fP to restart a specified unit. This can be used to
automatically restart services when their configuration is changed using unit
override files. Because the template system in Ansible is idempotent,
subsequent executions of the role should not restart the unit again when this
parameter is used. This parameter is supported only for the system\-wide unit
configuration, not the \(dqglobal\(dq user configuration.
.TP
.B \fBcomment\fP
Optional. String or YAML text block with comments included in the generated
configuration file.
.TP
.B \fBenabled\fP
Optional, boolean. If \fBTrue\fP (default), the managed unit will be enabled in
\fBsystemd\fP to be started on boot. If \fBFalse\fP, the unit will not be
started by default.
.TP
.B \fBmasked\fP
Optional, boolean. If \fBTrue\fP, the role will tell \fBsystemd\fP to
\(dqmask\(dq a unit to make it impossible to start, creating a symlink to
\fB/dev/null\fP file. If \fBFalse\fP, a given unit will be \(dqunmasked\(dq, so
that it can be managed again.
.TP
.B \fBforce\fP
Optional, boolean. If \fBTrue\fP, instruct the \fBansible.builtin.systemd\fP
module to override existing symlinks.
.UNINDENT
.SH SEE ALSO
.INDENT 0.0
.IP \(bu 2
Manual pages: \fI\%systemd(1)\fP <\fBhttps://manpages.debian.org/systemd(1)\fP>, \fI\%systemctl(1)\fP <\fBhttps://manpages.debian.org/systemctl(1)\fP>
.IP \(bu 2
\fI\%Debian Wiki: systemd\fP <\fBhttps://wiki.debian.org/systemd\fP>
.IP \(bu 2
\fI\%Arch Linux Wiki: systemd\fP <\fBhttps://wiki.archlinux.org/index.php/Systemd\fP>
.UNINDENT
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2024, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
