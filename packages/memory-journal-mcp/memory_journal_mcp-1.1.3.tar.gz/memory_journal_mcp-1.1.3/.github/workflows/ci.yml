name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip>=25.0
        pip install -r requirements.txt
        # Install optional dependencies for full testing
        pip install sentence-transformers faiss-cpu || echo "Optional ML dependencies failed, continuing..."
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test server import
      run: |
        cd src
        python -c "import server; print('✅ Server imports successfully')"
    
    - name: Test database schema
      run: |
        cd src  
        python -c "
        import sqlite3
        import server
        # Test database initialization
        conn = sqlite3.connect(':memory:')
        with open('schema.sql', 'r') as f:
            conn.executescript(f.read())
        print('✅ Database schema loads successfully')
        conn.close()
        "

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker Latest Image
      run: |
        docker build -f Dockerfile -t memory-journal-mcp:latest-test .
        
    - name: Test Docker Latest Image
      run: |
        docker run --rm memory-journal-mcp:latest-test python -c "print('✅ Alpine-based Docker image with full features works!')"