# Generated by ariadne-codegen

from typing import Any, Dict, List, Optional

from . import (
    ActivitySort,
    ActivityType,
    AiringSort,
    CharacterSort,
    ExternalLinkMediaType,
    ExternalLinkType,
    LikeableType,
    MediaFormat,
    MediaListSort,
    MediaListStatus,
    MediaSeason,
    MediaSort,
    MediaSource,
    MediaStatus,
    MediaTrendSort,
    MediaType,
    NotificationType,
    RecommendationSort,
    ReviewSort,
    StaffSort,
    StudioSort,
    ThreadCommentSort,
    ThreadSort,
    UserSort,
)
from .custom_fields import (
    ActivityReplyFields,
    AiringScheduleFields,
    AniChartUserFields,
    CharacterFields,
    MediaExternalLinkFields,
    MediaFields,
    MediaListCollectionFields,
    MediaListFields,
    MediaTagFields,
    MediaTrendFields,
    PageFields,
    ParsedMarkdownFields,
    RecommendationFields,
    ReviewFields,
    SiteStatisticsFields,
    StaffFields,
    StudioFields,
    ThreadCommentFields,
    ThreadFields,
    UserFields,
)
from .custom_typing_fields import (
    ActivityUnionUnion,
    GraphQLField,
    NotificationUnionUnion,
)


class Query:
    @classmethod
    def page(
        cls, *, page: Optional[int] = None, per_page: Optional[int] = None
    ) -> PageFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "page": {"type": "Int", "value": page},
            "perPage": {"type": "Int", "value": per_page},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PageFields(field_name="Page", arguments=cleared_arguments)

    @classmethod
    def media(
        cls,
        *,
        id: Optional[int] = None,
        id_mal: Optional[int] = None,
        start_date: Optional[Any] = None,
        end_date: Optional[Any] = None,
        season: Optional[MediaSeason] = None,
        season_year: Optional[int] = None,
        type: Optional[MediaType] = None,
        format: Optional[MediaFormat] = None,
        status: Optional[MediaStatus] = None,
        episodes: Optional[int] = None,
        duration: Optional[int] = None,
        chapters: Optional[int] = None,
        volumes: Optional[int] = None,
        is_adult: Optional[bool] = None,
        genre: Optional[str] = None,
        tag: Optional[str] = None,
        minimum_tag_rank: Optional[int] = None,
        tag_category: Optional[str] = None,
        on_list: Optional[bool] = None,
        licensed_by: Optional[str] = None,
        licensed_by_id: Optional[int] = None,
        average_score: Optional[int] = None,
        popularity: Optional[int] = None,
        source: Optional[MediaSource] = None,
        country_of_origin: Optional[Any] = None,
        is_licensed: Optional[bool] = None,
        search: Optional[str] = None,
        id_not: Optional[int] = None,
        id_in: Optional[List[int]] = None,
        id_not_in: Optional[List[int]] = None,
        id_mal_not: Optional[int] = None,
        id_mal_in: Optional[List[int]] = None,
        id_mal_not_in: Optional[List[int]] = None,
        start_date_greater: Optional[Any] = None,
        start_date_lesser: Optional[Any] = None,
        start_date_like: Optional[str] = None,
        end_date_greater: Optional[Any] = None,
        end_date_lesser: Optional[Any] = None,
        end_date_like: Optional[str] = None,
        format_in: Optional[List[MediaFormat]] = None,
        format_not: Optional[MediaFormat] = None,
        format_not_in: Optional[List[MediaFormat]] = None,
        status_in: Optional[List[MediaStatus]] = None,
        status_not: Optional[MediaStatus] = None,
        status_not_in: Optional[List[MediaStatus]] = None,
        episodes_greater: Optional[int] = None,
        episodes_lesser: Optional[int] = None,
        duration_greater: Optional[int] = None,
        duration_lesser: Optional[int] = None,
        chapters_greater: Optional[int] = None,
        chapters_lesser: Optional[int] = None,
        volumes_greater: Optional[int] = None,
        volumes_lesser: Optional[int] = None,
        genre_in: Optional[List[str]] = None,
        genre_not_in: Optional[List[str]] = None,
        tag_in: Optional[List[str]] = None,
        tag_not_in: Optional[List[str]] = None,
        tag_category_in: Optional[List[str]] = None,
        tag_category_not_in: Optional[List[str]] = None,
        licensed_by_in: Optional[List[str]] = None,
        licensed_by_id_in: Optional[List[int]] = None,
        average_score_not: Optional[int] = None,
        average_score_greater: Optional[int] = None,
        average_score_lesser: Optional[int] = None,
        popularity_not: Optional[int] = None,
        popularity_greater: Optional[int] = None,
        popularity_lesser: Optional[int] = None,
        source_in: Optional[List[MediaSource]] = None,
        sort: Optional[List[MediaSort]] = None,
    ) -> MediaFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "idMal": {"type": "Int", "value": id_mal},
            "startDate": {"type": "FuzzyDateInt", "value": start_date},
            "endDate": {"type": "FuzzyDateInt", "value": end_date},
            "season": {"type": "MediaSeason", "value": season},
            "seasonYear": {"type": "Int", "value": season_year},
            "type": {"type": "MediaType", "value": type},
            "format": {"type": "MediaFormat", "value": format},
            "status": {"type": "MediaStatus", "value": status},
            "episodes": {"type": "Int", "value": episodes},
            "duration": {"type": "Int", "value": duration},
            "chapters": {"type": "Int", "value": chapters},
            "volumes": {"type": "Int", "value": volumes},
            "isAdult": {"type": "Boolean", "value": is_adult},
            "genre": {"type": "String", "value": genre},
            "tag": {"type": "String", "value": tag},
            "minimumTagRank": {"type": "Int", "value": minimum_tag_rank},
            "tagCategory": {"type": "String", "value": tag_category},
            "onList": {"type": "Boolean", "value": on_list},
            "licensedBy": {"type": "String", "value": licensed_by},
            "licensedById": {"type": "Int", "value": licensed_by_id},
            "averageScore": {"type": "Int", "value": average_score},
            "popularity": {"type": "Int", "value": popularity},
            "source": {"type": "MediaSource", "value": source},
            "countryOfOrigin": {"type": "CountryCode", "value": country_of_origin},
            "isLicensed": {"type": "Boolean", "value": is_licensed},
            "search": {"type": "String", "value": search},
            "id_not": {"type": "Int", "value": id_not},
            "id_in": {"type": "[Int]", "value": id_in},
            "id_not_in": {"type": "[Int]", "value": id_not_in},
            "idMal_not": {"type": "Int", "value": id_mal_not},
            "idMal_in": {"type": "[Int]", "value": id_mal_in},
            "idMal_not_in": {"type": "[Int]", "value": id_mal_not_in},
            "startDate_greater": {"type": "FuzzyDateInt", "value": start_date_greater},
            "startDate_lesser": {"type": "FuzzyDateInt", "value": start_date_lesser},
            "startDate_like": {"type": "String", "value": start_date_like},
            "endDate_greater": {"type": "FuzzyDateInt", "value": end_date_greater},
            "endDate_lesser": {"type": "FuzzyDateInt", "value": end_date_lesser},
            "endDate_like": {"type": "String", "value": end_date_like},
            "format_in": {"type": "[MediaFormat]", "value": format_in},
            "format_not": {"type": "MediaFormat", "value": format_not},
            "format_not_in": {"type": "[MediaFormat]", "value": format_not_in},
            "status_in": {"type": "[MediaStatus]", "value": status_in},
            "status_not": {"type": "MediaStatus", "value": status_not},
            "status_not_in": {"type": "[MediaStatus]", "value": status_not_in},
            "episodes_greater": {"type": "Int", "value": episodes_greater},
            "episodes_lesser": {"type": "Int", "value": episodes_lesser},
            "duration_greater": {"type": "Int", "value": duration_greater},
            "duration_lesser": {"type": "Int", "value": duration_lesser},
            "chapters_greater": {"type": "Int", "value": chapters_greater},
            "chapters_lesser": {"type": "Int", "value": chapters_lesser},
            "volumes_greater": {"type": "Int", "value": volumes_greater},
            "volumes_lesser": {"type": "Int", "value": volumes_lesser},
            "genre_in": {"type": "[String]", "value": genre_in},
            "genre_not_in": {"type": "[String]", "value": genre_not_in},
            "tag_in": {"type": "[String]", "value": tag_in},
            "tag_not_in": {"type": "[String]", "value": tag_not_in},
            "tagCategory_in": {"type": "[String]", "value": tag_category_in},
            "tagCategory_not_in": {"type": "[String]", "value": tag_category_not_in},
            "licensedBy_in": {"type": "[String]", "value": licensed_by_in},
            "licensedById_in": {"type": "[Int]", "value": licensed_by_id_in},
            "averageScore_not": {"type": "Int", "value": average_score_not},
            "averageScore_greater": {"type": "Int", "value": average_score_greater},
            "averageScore_lesser": {"type": "Int", "value": average_score_lesser},
            "popularity_not": {"type": "Int", "value": popularity_not},
            "popularity_greater": {"type": "Int", "value": popularity_greater},
            "popularity_lesser": {"type": "Int", "value": popularity_lesser},
            "source_in": {"type": "[MediaSource]", "value": source_in},
            "sort": {"type": "[MediaSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaFields(field_name="Media", arguments=cleared_arguments)

    @classmethod
    def media_trend(
        cls,
        *,
        media_id: Optional[int] = None,
        date: Optional[int] = None,
        trending: Optional[int] = None,
        average_score: Optional[int] = None,
        popularity: Optional[int] = None,
        episode: Optional[int] = None,
        releasing: Optional[bool] = None,
        media_id_not: Optional[int] = None,
        media_id_in: Optional[List[int]] = None,
        media_id_not_in: Optional[List[int]] = None,
        date_greater: Optional[int] = None,
        date_lesser: Optional[int] = None,
        trending_greater: Optional[int] = None,
        trending_lesser: Optional[int] = None,
        trending_not: Optional[int] = None,
        average_score_greater: Optional[int] = None,
        average_score_lesser: Optional[int] = None,
        average_score_not: Optional[int] = None,
        popularity_greater: Optional[int] = None,
        popularity_lesser: Optional[int] = None,
        popularity_not: Optional[int] = None,
        episode_greater: Optional[int] = None,
        episode_lesser: Optional[int] = None,
        episode_not: Optional[int] = None,
        sort: Optional[List[MediaTrendSort]] = None,
    ) -> MediaTrendFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "mediaId": {"type": "Int", "value": media_id},
            "date": {"type": "Int", "value": date},
            "trending": {"type": "Int", "value": trending},
            "averageScore": {"type": "Int", "value": average_score},
            "popularity": {"type": "Int", "value": popularity},
            "episode": {"type": "Int", "value": episode},
            "releasing": {"type": "Boolean", "value": releasing},
            "mediaId_not": {"type": "Int", "value": media_id_not},
            "mediaId_in": {"type": "[Int]", "value": media_id_in},
            "mediaId_not_in": {"type": "[Int]", "value": media_id_not_in},
            "date_greater": {"type": "Int", "value": date_greater},
            "date_lesser": {"type": "Int", "value": date_lesser},
            "trending_greater": {"type": "Int", "value": trending_greater},
            "trending_lesser": {"type": "Int", "value": trending_lesser},
            "trending_not": {"type": "Int", "value": trending_not},
            "averageScore_greater": {"type": "Int", "value": average_score_greater},
            "averageScore_lesser": {"type": "Int", "value": average_score_lesser},
            "averageScore_not": {"type": "Int", "value": average_score_not},
            "popularity_greater": {"type": "Int", "value": popularity_greater},
            "popularity_lesser": {"type": "Int", "value": popularity_lesser},
            "popularity_not": {"type": "Int", "value": popularity_not},
            "episode_greater": {"type": "Int", "value": episode_greater},
            "episode_lesser": {"type": "Int", "value": episode_lesser},
            "episode_not": {"type": "Int", "value": episode_not},
            "sort": {"type": "[MediaTrendSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaTrendFields(field_name="MediaTrend", arguments=cleared_arguments)

    @classmethod
    def airing_schedule(
        cls,
        *,
        id: Optional[int] = None,
        media_id: Optional[int] = None,
        episode: Optional[int] = None,
        airing_at: Optional[int] = None,
        not_yet_aired: Optional[bool] = None,
        id_not: Optional[int] = None,
        id_in: Optional[List[int]] = None,
        id_not_in: Optional[List[int]] = None,
        media_id_not: Optional[int] = None,
        media_id_in: Optional[List[int]] = None,
        media_id_not_in: Optional[List[int]] = None,
        episode_not: Optional[int] = None,
        episode_in: Optional[List[int]] = None,
        episode_not_in: Optional[List[int]] = None,
        episode_greater: Optional[int] = None,
        episode_lesser: Optional[int] = None,
        airing_at_greater: Optional[int] = None,
        airing_at_lesser: Optional[int] = None,
        sort: Optional[List[AiringSort]] = None,
    ) -> AiringScheduleFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "mediaId": {"type": "Int", "value": media_id},
            "episode": {"type": "Int", "value": episode},
            "airingAt": {"type": "Int", "value": airing_at},
            "notYetAired": {"type": "Boolean", "value": not_yet_aired},
            "id_not": {"type": "Int", "value": id_not},
            "id_in": {"type": "[Int]", "value": id_in},
            "id_not_in": {"type": "[Int]", "value": id_not_in},
            "mediaId_not": {"type": "Int", "value": media_id_not},
            "mediaId_in": {"type": "[Int]", "value": media_id_in},
            "mediaId_not_in": {"type": "[Int]", "value": media_id_not_in},
            "episode_not": {"type": "Int", "value": episode_not},
            "episode_in": {"type": "[Int]", "value": episode_in},
            "episode_not_in": {"type": "[Int]", "value": episode_not_in},
            "episode_greater": {"type": "Int", "value": episode_greater},
            "episode_lesser": {"type": "Int", "value": episode_lesser},
            "airingAt_greater": {"type": "Int", "value": airing_at_greater},
            "airingAt_lesser": {"type": "Int", "value": airing_at_lesser},
            "sort": {"type": "[AiringSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AiringScheduleFields(
            field_name="AiringSchedule", arguments=cleared_arguments
        )

    @classmethod
    def character(
        cls,
        *,
        id: Optional[int] = None,
        is_birthday: Optional[bool] = None,
        search: Optional[str] = None,
        id_not: Optional[int] = None,
        id_in: Optional[List[int]] = None,
        id_not_in: Optional[List[int]] = None,
        sort: Optional[List[CharacterSort]] = None,
    ) -> CharacterFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "isBirthday": {"type": "Boolean", "value": is_birthday},
            "search": {"type": "String", "value": search},
            "id_not": {"type": "Int", "value": id_not},
            "id_in": {"type": "[Int]", "value": id_in},
            "id_not_in": {"type": "[Int]", "value": id_not_in},
            "sort": {"type": "[CharacterSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CharacterFields(field_name="Character", arguments=cleared_arguments)

    @classmethod
    def staff(
        cls,
        *,
        id: Optional[int] = None,
        is_birthday: Optional[bool] = None,
        search: Optional[str] = None,
        id_not: Optional[int] = None,
        id_in: Optional[List[int]] = None,
        id_not_in: Optional[List[int]] = None,
        sort: Optional[List[StaffSort]] = None,
    ) -> StaffFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "isBirthday": {"type": "Boolean", "value": is_birthday},
            "search": {"type": "String", "value": search},
            "id_not": {"type": "Int", "value": id_not},
            "id_in": {"type": "[Int]", "value": id_in},
            "id_not_in": {"type": "[Int]", "value": id_not_in},
            "sort": {"type": "[StaffSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StaffFields(field_name="Staff", arguments=cleared_arguments)

    @classmethod
    def media_list(
        cls,
        *,
        id: Optional[int] = None,
        user_id: Optional[int] = None,
        user_name: Optional[str] = None,
        type: Optional[MediaType] = None,
        status: Optional[MediaListStatus] = None,
        media_id: Optional[int] = None,
        is_following: Optional[bool] = None,
        notes: Optional[str] = None,
        started_at: Optional[Any] = None,
        completed_at: Optional[Any] = None,
        compare_with_auth_list: Optional[bool] = None,
        user_id_in: Optional[List[int]] = None,
        status_in: Optional[List[MediaListStatus]] = None,
        status_not_in: Optional[List[MediaListStatus]] = None,
        status_not: Optional[MediaListStatus] = None,
        media_id_in: Optional[List[int]] = None,
        media_id_not_in: Optional[List[int]] = None,
        notes_like: Optional[str] = None,
        started_at_greater: Optional[Any] = None,
        started_at_lesser: Optional[Any] = None,
        started_at_like: Optional[str] = None,
        completed_at_greater: Optional[Any] = None,
        completed_at_lesser: Optional[Any] = None,
        completed_at_like: Optional[str] = None,
        sort: Optional[List[MediaListSort]] = None,
    ) -> MediaListFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "userId": {"type": "Int", "value": user_id},
            "userName": {"type": "String", "value": user_name},
            "type": {"type": "MediaType", "value": type},
            "status": {"type": "MediaListStatus", "value": status},
            "mediaId": {"type": "Int", "value": media_id},
            "isFollowing": {"type": "Boolean", "value": is_following},
            "notes": {"type": "String", "value": notes},
            "startedAt": {"type": "FuzzyDateInt", "value": started_at},
            "completedAt": {"type": "FuzzyDateInt", "value": completed_at},
            "compareWithAuthList": {"type": "Boolean", "value": compare_with_auth_list},
            "userId_in": {"type": "[Int]", "value": user_id_in},
            "status_in": {"type": "[MediaListStatus]", "value": status_in},
            "status_not_in": {"type": "[MediaListStatus]", "value": status_not_in},
            "status_not": {"type": "MediaListStatus", "value": status_not},
            "mediaId_in": {"type": "[Int]", "value": media_id_in},
            "mediaId_not_in": {"type": "[Int]", "value": media_id_not_in},
            "notes_like": {"type": "String", "value": notes_like},
            "startedAt_greater": {"type": "FuzzyDateInt", "value": started_at_greater},
            "startedAt_lesser": {"type": "FuzzyDateInt", "value": started_at_lesser},
            "startedAt_like": {"type": "String", "value": started_at_like},
            "completedAt_greater": {
                "type": "FuzzyDateInt",
                "value": completed_at_greater,
            },
            "completedAt_lesser": {
                "type": "FuzzyDateInt",
                "value": completed_at_lesser,
            },
            "completedAt_like": {"type": "String", "value": completed_at_like},
            "sort": {"type": "[MediaListSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaListFields(field_name="MediaList", arguments=cleared_arguments)

    @classmethod
    def media_list_collection(
        cls,
        *,
        user_id: Optional[int] = None,
        user_name: Optional[str] = None,
        type: Optional[MediaType] = None,
        status: Optional[MediaListStatus] = None,
        notes: Optional[str] = None,
        started_at: Optional[Any] = None,
        completed_at: Optional[Any] = None,
        force_single_completed_list: Optional[bool] = None,
        chunk: Optional[int] = None,
        per_chunk: Optional[int] = None,
        status_in: Optional[List[MediaListStatus]] = None,
        status_not_in: Optional[List[MediaListStatus]] = None,
        status_not: Optional[MediaListStatus] = None,
        notes_like: Optional[str] = None,
        started_at_greater: Optional[Any] = None,
        started_at_lesser: Optional[Any] = None,
        started_at_like: Optional[str] = None,
        completed_at_greater: Optional[Any] = None,
        completed_at_lesser: Optional[Any] = None,
        completed_at_like: Optional[str] = None,
        sort: Optional[List[MediaListSort]] = None,
    ) -> MediaListCollectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "userId": {"type": "Int", "value": user_id},
            "userName": {"type": "String", "value": user_name},
            "type": {"type": "MediaType", "value": type},
            "status": {"type": "MediaListStatus", "value": status},
            "notes": {"type": "String", "value": notes},
            "startedAt": {"type": "FuzzyDateInt", "value": started_at},
            "completedAt": {"type": "FuzzyDateInt", "value": completed_at},
            "forceSingleCompletedList": {
                "type": "Boolean",
                "value": force_single_completed_list,
            },
            "chunk": {"type": "Int", "value": chunk},
            "perChunk": {"type": "Int", "value": per_chunk},
            "status_in": {"type": "[MediaListStatus]", "value": status_in},
            "status_not_in": {"type": "[MediaListStatus]", "value": status_not_in},
            "status_not": {"type": "MediaListStatus", "value": status_not},
            "notes_like": {"type": "String", "value": notes_like},
            "startedAt_greater": {"type": "FuzzyDateInt", "value": started_at_greater},
            "startedAt_lesser": {"type": "FuzzyDateInt", "value": started_at_lesser},
            "startedAt_like": {"type": "String", "value": started_at_like},
            "completedAt_greater": {
                "type": "FuzzyDateInt",
                "value": completed_at_greater,
            },
            "completedAt_lesser": {
                "type": "FuzzyDateInt",
                "value": completed_at_lesser,
            },
            "completedAt_like": {"type": "String", "value": completed_at_like},
            "sort": {"type": "[MediaListSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaListCollectionFields(
            field_name="MediaListCollection", arguments=cleared_arguments
        )

    @classmethod
    def genre_collection(cls) -> GraphQLField:
        return GraphQLField(field_name="GenreCollection")

    @classmethod
    def media_tag_collection(cls, *, status: Optional[int] = None) -> MediaTagFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "status": {"type": "Int", "value": status}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaTagFields(
            field_name="MediaTagCollection", arguments=cleared_arguments
        )

    @classmethod
    def user(
        cls,
        *,
        id: Optional[int] = None,
        name: Optional[str] = None,
        is_moderator: Optional[bool] = None,
        search: Optional[str] = None,
        sort: Optional[List[UserSort]] = None,
    ) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "name": {"type": "String", "value": name},
            "isModerator": {"type": "Boolean", "value": is_moderator},
            "search": {"type": "String", "value": search},
            "sort": {"type": "[UserSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="User", arguments=cleared_arguments)

    @classmethod
    def viewer(cls) -> UserFields:
        return UserFields(field_name="Viewer")

    @classmethod
    def notification(
        cls,
        *,
        type: Optional[NotificationType] = None,
        reset_notification_count: Optional[bool] = None,
        type_in: Optional[List[NotificationType]] = None,
    ) -> NotificationUnionUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "type": {"type": "NotificationType", "value": type},
            "resetNotificationCount": {
                "type": "Boolean",
                "value": reset_notification_count,
            },
            "type_in": {"type": "[NotificationType]", "value": type_in},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NotificationUnionUnion(
            field_name="Notification", arguments=cleared_arguments
        )

    @classmethod
    def studio(
        cls,
        *,
        id: Optional[int] = None,
        search: Optional[str] = None,
        id_not: Optional[int] = None,
        id_in: Optional[List[int]] = None,
        id_not_in: Optional[List[int]] = None,
        sort: Optional[List[StudioSort]] = None,
    ) -> StudioFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "search": {"type": "String", "value": search},
            "id_not": {"type": "Int", "value": id_not},
            "id_in": {"type": "[Int]", "value": id_in},
            "id_not_in": {"type": "[Int]", "value": id_not_in},
            "sort": {"type": "[StudioSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StudioFields(field_name="Studio", arguments=cleared_arguments)

    @classmethod
    def review(
        cls,
        *,
        id: Optional[int] = None,
        media_id: Optional[int] = None,
        user_id: Optional[int] = None,
        media_type: Optional[MediaType] = None,
        sort: Optional[List[ReviewSort]] = None,
    ) -> ReviewFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "mediaId": {"type": "Int", "value": media_id},
            "userId": {"type": "Int", "value": user_id},
            "mediaType": {"type": "MediaType", "value": media_type},
            "sort": {"type": "[ReviewSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReviewFields(field_name="Review", arguments=cleared_arguments)

    @classmethod
    def activity(
        cls,
        *,
        id: Optional[int] = None,
        user_id: Optional[int] = None,
        messenger_id: Optional[int] = None,
        media_id: Optional[int] = None,
        type: Optional[ActivityType] = None,
        is_following: Optional[bool] = None,
        has_replies: Optional[bool] = None,
        has_replies_or_type_text: Optional[bool] = None,
        created_at: Optional[int] = None,
        id_not: Optional[int] = None,
        id_in: Optional[List[int]] = None,
        id_not_in: Optional[List[int]] = None,
        user_id_not: Optional[int] = None,
        user_id_in: Optional[List[int]] = None,
        user_id_not_in: Optional[List[int]] = None,
        messenger_id_not: Optional[int] = None,
        messenger_id_in: Optional[List[int]] = None,
        messenger_id_not_in: Optional[List[int]] = None,
        media_id_not: Optional[int] = None,
        media_id_in: Optional[List[int]] = None,
        media_id_not_in: Optional[List[int]] = None,
        type_not: Optional[ActivityType] = None,
        type_in: Optional[List[ActivityType]] = None,
        type_not_in: Optional[List[ActivityType]] = None,
        created_at_greater: Optional[int] = None,
        created_at_lesser: Optional[int] = None,
        sort: Optional[List[ActivitySort]] = None,
    ) -> ActivityUnionUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "userId": {"type": "Int", "value": user_id},
            "messengerId": {"type": "Int", "value": messenger_id},
            "mediaId": {"type": "Int", "value": media_id},
            "type": {"type": "ActivityType", "value": type},
            "isFollowing": {"type": "Boolean", "value": is_following},
            "hasReplies": {"type": "Boolean", "value": has_replies},
            "hasRepliesOrTypeText": {
                "type": "Boolean",
                "value": has_replies_or_type_text,
            },
            "createdAt": {"type": "Int", "value": created_at},
            "id_not": {"type": "Int", "value": id_not},
            "id_in": {"type": "[Int]", "value": id_in},
            "id_not_in": {"type": "[Int]", "value": id_not_in},
            "userId_not": {"type": "Int", "value": user_id_not},
            "userId_in": {"type": "[Int]", "value": user_id_in},
            "userId_not_in": {"type": "[Int]", "value": user_id_not_in},
            "messengerId_not": {"type": "Int", "value": messenger_id_not},
            "messengerId_in": {"type": "[Int]", "value": messenger_id_in},
            "messengerId_not_in": {"type": "[Int]", "value": messenger_id_not_in},
            "mediaId_not": {"type": "Int", "value": media_id_not},
            "mediaId_in": {"type": "[Int]", "value": media_id_in},
            "mediaId_not_in": {"type": "[Int]", "value": media_id_not_in},
            "type_not": {"type": "ActivityType", "value": type_not},
            "type_in": {"type": "[ActivityType]", "value": type_in},
            "type_not_in": {"type": "[ActivityType]", "value": type_not_in},
            "createdAt_greater": {"type": "Int", "value": created_at_greater},
            "createdAt_lesser": {"type": "Int", "value": created_at_lesser},
            "sort": {"type": "[ActivitySort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ActivityUnionUnion(field_name="Activity", arguments=cleared_arguments)

    @classmethod
    def activity_reply(
        cls, *, id: Optional[int] = None, activity_id: Optional[int] = None
    ) -> ActivityReplyFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "activityId": {"type": "Int", "value": activity_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ActivityReplyFields(
            field_name="ActivityReply", arguments=cleared_arguments
        )

    @classmethod
    def following(
        cls, user_id: int, *, sort: Optional[List[UserSort]] = None
    ) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "userId": {"type": "Int!", "value": user_id},
            "sort": {"type": "[UserSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="Following", arguments=cleared_arguments)

    @classmethod
    def follower(
        cls, user_id: int, *, sort: Optional[List[UserSort]] = None
    ) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "userId": {"type": "Int!", "value": user_id},
            "sort": {"type": "[UserSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="Follower", arguments=cleared_arguments)

    @classmethod
    def thread(
        cls,
        *,
        id: Optional[int] = None,
        user_id: Optional[int] = None,
        reply_user_id: Optional[int] = None,
        subscribed: Optional[bool] = None,
        category_id: Optional[int] = None,
        media_category_id: Optional[int] = None,
        search: Optional[str] = None,
        id_in: Optional[List[int]] = None,
        sort: Optional[List[ThreadSort]] = None,
    ) -> ThreadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "userId": {"type": "Int", "value": user_id},
            "replyUserId": {"type": "Int", "value": reply_user_id},
            "subscribed": {"type": "Boolean", "value": subscribed},
            "categoryId": {"type": "Int", "value": category_id},
            "mediaCategoryId": {"type": "Int", "value": media_category_id},
            "search": {"type": "String", "value": search},
            "id_in": {"type": "[Int]", "value": id_in},
            "sort": {"type": "[ThreadSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadFields(field_name="Thread", arguments=cleared_arguments)

    @classmethod
    def thread_comment(
        cls,
        *,
        id: Optional[int] = None,
        thread_id: Optional[int] = None,
        user_id: Optional[int] = None,
        sort: Optional[List[ThreadCommentSort]] = None,
    ) -> ThreadCommentFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "threadId": {"type": "Int", "value": thread_id},
            "userId": {"type": "Int", "value": user_id},
            "sort": {"type": "[ThreadCommentSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadCommentFields(
            field_name="ThreadComment", arguments=cleared_arguments
        )

    @classmethod
    def recommendation(
        cls,
        *,
        id: Optional[int] = None,
        media_id: Optional[int] = None,
        media_recommendation_id: Optional[int] = None,
        user_id: Optional[int] = None,
        rating: Optional[int] = None,
        on_list: Optional[bool] = None,
        rating_greater: Optional[int] = None,
        rating_lesser: Optional[int] = None,
        sort: Optional[List[RecommendationSort]] = None,
    ) -> RecommendationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "mediaId": {"type": "Int", "value": media_id},
            "mediaRecommendationId": {"type": "Int", "value": media_recommendation_id},
            "userId": {"type": "Int", "value": user_id},
            "rating": {"type": "Int", "value": rating},
            "onList": {"type": "Boolean", "value": on_list},
            "rating_greater": {"type": "Int", "value": rating_greater},
            "rating_lesser": {"type": "Int", "value": rating_lesser},
            "sort": {"type": "[RecommendationSort]", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RecommendationFields(
            field_name="Recommendation", arguments=cleared_arguments
        )

    @classmethod
    def like(
        cls, *, likeable_id: Optional[int] = None, type: Optional[LikeableType] = None
    ) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "likeableId": {"type": "Int", "value": likeable_id},
            "type": {"type": "LikeableType", "value": type},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="Like", arguments=cleared_arguments)

    @classmethod
    def markdown(cls, markdown: str) -> ParsedMarkdownFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "markdown": {"type": "String!", "value": markdown}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParsedMarkdownFields(field_name="Markdown", arguments=cleared_arguments)

    @classmethod
    def ani_chart_user(cls) -> AniChartUserFields:
        return AniChartUserFields(field_name="AniChartUser")

    @classmethod
    def site_statistics(cls) -> SiteStatisticsFields:
        return SiteStatisticsFields(field_name="SiteStatistics")

    @classmethod
    def external_link_source_collection(
        cls,
        *,
        id: Optional[int] = None,
        type: Optional[ExternalLinkType] = None,
        media_type: Optional[ExternalLinkMediaType] = None,
    ) -> MediaExternalLinkFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "type": {"type": "ExternalLinkType", "value": type},
            "mediaType": {"type": "ExternalLinkMediaType", "value": media_type},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaExternalLinkFields(
            field_name="ExternalLinkSourceCollection", arguments=cleared_arguments
        )
