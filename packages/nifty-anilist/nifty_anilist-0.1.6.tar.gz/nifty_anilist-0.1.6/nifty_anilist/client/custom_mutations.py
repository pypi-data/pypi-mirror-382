# Generated by ariadne-codegen

from typing import Any, Dict, List, Optional

from . import (
    LikeableType,
    MediaListStatus,
    MediaType,
    RecommendationRating,
    ReviewRating,
    ScoreFormat,
    UserStaffNameLanguage,
    UserTitleLanguage,
)
from .custom_fields import (
    ActivityReplyFields,
    DeletedFields,
    FavouritesFields,
    ListActivityFields,
    MediaListFields,
    MessageActivityFields,
    RecommendationFields,
    ReviewFields,
    TextActivityFields,
    ThreadCommentFields,
    ThreadFields,
    UserFields,
)
from .custom_typing_fields import ActivityUnionUnion, GraphQLField, LikeableUnionUnion
from .input_types import (
    AniChartHighlightInput,
    FuzzyDateInput,
    ListActivityOptionInput,
    MediaListOptionsInput,
    NotificationOptionInput,
)


class Mutation:
    @classmethod
    def update_user(
        cls,
        *,
        about: Optional[str] = None,
        title_language: Optional[UserTitleLanguage] = None,
        display_adult_content: Optional[bool] = None,
        airing_notifications: Optional[bool] = None,
        score_format: Optional[ScoreFormat] = None,
        row_order: Optional[str] = None,
        profile_color: Optional[str] = None,
        donator_badge: Optional[str] = None,
        notification_options: Optional[List[NotificationOptionInput]] = None,
        timezone: Optional[str] = None,
        activity_merge_time: Optional[int] = None,
        anime_list_options: Optional[MediaListOptionsInput] = None,
        manga_list_options: Optional[MediaListOptionsInput] = None,
        staff_name_language: Optional[UserStaffNameLanguage] = None,
        restrict_messages_to_following: Optional[bool] = None,
        disabled_list_activity: Optional[List[ListActivityOptionInput]] = None,
    ) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "about": {"type": "String", "value": about},
            "titleLanguage": {"type": "UserTitleLanguage", "value": title_language},
            "displayAdultContent": {"type": "Boolean", "value": display_adult_content},
            "airingNotifications": {"type": "Boolean", "value": airing_notifications},
            "scoreFormat": {"type": "ScoreFormat", "value": score_format},
            "rowOrder": {"type": "String", "value": row_order},
            "profileColor": {"type": "String", "value": profile_color},
            "donatorBadge": {"type": "String", "value": donator_badge},
            "notificationOptions": {
                "type": "[NotificationOptionInput]",
                "value": notification_options,
            },
            "timezone": {"type": "String", "value": timezone},
            "activityMergeTime": {"type": "Int", "value": activity_merge_time},
            "animeListOptions": {
                "type": "MediaListOptionsInput",
                "value": anime_list_options,
            },
            "mangaListOptions": {
                "type": "MediaListOptionsInput",
                "value": manga_list_options,
            },
            "staffNameLanguage": {
                "type": "UserStaffNameLanguage",
                "value": staff_name_language,
            },
            "restrictMessagesToFollowing": {
                "type": "Boolean",
                "value": restrict_messages_to_following,
            },
            "disabledListActivity": {
                "type": "[ListActivityOptionInput]",
                "value": disabled_list_activity,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="UpdateUser", arguments=cleared_arguments)

    @classmethod
    def save_media_list_entry(
        cls,
        *,
        id: Optional[int] = None,
        media_id: Optional[int] = None,
        status: Optional[MediaListStatus] = None,
        score: Optional[float] = None,
        score_raw: Optional[int] = None,
        progress: Optional[int] = None,
        progress_volumes: Optional[int] = None,
        repeat: Optional[int] = None,
        priority: Optional[int] = None,
        private: Optional[bool] = None,
        notes: Optional[str] = None,
        hidden_from_status_lists: Optional[bool] = None,
        custom_lists: Optional[List[str]] = None,
        advanced_scores: Optional[List[float]] = None,
        started_at: Optional[FuzzyDateInput] = None,
        completed_at: Optional[FuzzyDateInput] = None,
    ) -> MediaListFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "mediaId": {"type": "Int", "value": media_id},
            "status": {"type": "MediaListStatus", "value": status},
            "score": {"type": "Float", "value": score},
            "scoreRaw": {"type": "Int", "value": score_raw},
            "progress": {"type": "Int", "value": progress},
            "progressVolumes": {"type": "Int", "value": progress_volumes},
            "repeat": {"type": "Int", "value": repeat},
            "priority": {"type": "Int", "value": priority},
            "private": {"type": "Boolean", "value": private},
            "notes": {"type": "String", "value": notes},
            "hiddenFromStatusLists": {
                "type": "Boolean",
                "value": hidden_from_status_lists,
            },
            "customLists": {"type": "[String]", "value": custom_lists},
            "advancedScores": {"type": "[Float]", "value": advanced_scores},
            "startedAt": {"type": "FuzzyDateInput", "value": started_at},
            "completedAt": {"type": "FuzzyDateInput", "value": completed_at},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaListFields(
            field_name="SaveMediaListEntry", arguments=cleared_arguments
        )

    @classmethod
    def update_media_list_entries(
        cls,
        *,
        status: Optional[MediaListStatus] = None,
        score: Optional[float] = None,
        score_raw: Optional[int] = None,
        progress: Optional[int] = None,
        progress_volumes: Optional[int] = None,
        repeat: Optional[int] = None,
        priority: Optional[int] = None,
        private: Optional[bool] = None,
        notes: Optional[str] = None,
        hidden_from_status_lists: Optional[bool] = None,
        advanced_scores: Optional[List[float]] = None,
        started_at: Optional[FuzzyDateInput] = None,
        completed_at: Optional[FuzzyDateInput] = None,
        ids: Optional[List[int]] = None,
    ) -> MediaListFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "status": {"type": "MediaListStatus", "value": status},
            "score": {"type": "Float", "value": score},
            "scoreRaw": {"type": "Int", "value": score_raw},
            "progress": {"type": "Int", "value": progress},
            "progressVolumes": {"type": "Int", "value": progress_volumes},
            "repeat": {"type": "Int", "value": repeat},
            "priority": {"type": "Int", "value": priority},
            "private": {"type": "Boolean", "value": private},
            "notes": {"type": "String", "value": notes},
            "hiddenFromStatusLists": {
                "type": "Boolean",
                "value": hidden_from_status_lists,
            },
            "advancedScores": {"type": "[Float]", "value": advanced_scores},
            "startedAt": {"type": "FuzzyDateInput", "value": started_at},
            "completedAt": {"type": "FuzzyDateInput", "value": completed_at},
            "ids": {"type": "[Int]", "value": ids},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MediaListFields(
            field_name="UpdateMediaListEntries", arguments=cleared_arguments
        )

    @classmethod
    def delete_media_list_entry(cls, *, id: Optional[int] = None) -> DeletedFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletedFields(
            field_name="DeleteMediaListEntry", arguments=cleared_arguments
        )

    @classmethod
    def delete_custom_list(
        cls, *, custom_list: Optional[str] = None, type: Optional[MediaType] = None
    ) -> DeletedFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "customList": {"type": "String", "value": custom_list},
            "type": {"type": "MediaType", "value": type},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletedFields(field_name="DeleteCustomList", arguments=cleared_arguments)

    @classmethod
    def save_text_activity(
        cls,
        *,
        id: Optional[int] = None,
        text: Optional[str] = None,
        locked: Optional[bool] = None,
    ) -> TextActivityFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "text": {"type": "String", "value": text},
            "locked": {"type": "Boolean", "value": locked},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TextActivityFields(
            field_name="SaveTextActivity", arguments=cleared_arguments
        )

    @classmethod
    def save_message_activity(
        cls,
        *,
        id: Optional[int] = None,
        message: Optional[str] = None,
        recipient_id: Optional[int] = None,
        private: Optional[bool] = None,
        locked: Optional[bool] = None,
        as_mod: Optional[bool] = None,
    ) -> MessageActivityFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "message": {"type": "String", "value": message},
            "recipientId": {"type": "Int", "value": recipient_id},
            "private": {"type": "Boolean", "value": private},
            "locked": {"type": "Boolean", "value": locked},
            "asMod": {"type": "Boolean", "value": as_mod},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MessageActivityFields(
            field_name="SaveMessageActivity", arguments=cleared_arguments
        )

    @classmethod
    def save_list_activity(
        cls, *, id: Optional[int] = None, locked: Optional[bool] = None
    ) -> ListActivityFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "locked": {"type": "Boolean", "value": locked},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ListActivityFields(
            field_name="SaveListActivity", arguments=cleared_arguments
        )

    @classmethod
    def delete_activity(cls, *, id: Optional[int] = None) -> DeletedFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletedFields(field_name="DeleteActivity", arguments=cleared_arguments)

    @classmethod
    def toggle_activity_pin(
        cls, *, id: Optional[int] = None, pinned: Optional[bool] = None
    ) -> ActivityUnionUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "pinned": {"type": "Boolean", "value": pinned},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ActivityUnionUnion(
            field_name="ToggleActivityPin", arguments=cleared_arguments
        )

    @classmethod
    def toggle_activity_subscription(
        cls, *, activity_id: Optional[int] = None, subscribe: Optional[bool] = None
    ) -> ActivityUnionUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "activityId": {"type": "Int", "value": activity_id},
            "subscribe": {"type": "Boolean", "value": subscribe},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ActivityUnionUnion(
            field_name="ToggleActivitySubscription", arguments=cleared_arguments
        )

    @classmethod
    def save_activity_reply(
        cls,
        *,
        id: Optional[int] = None,
        activity_id: Optional[int] = None,
        text: Optional[str] = None,
        as_mod: Optional[bool] = None,
    ) -> ActivityReplyFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "activityId": {"type": "Int", "value": activity_id},
            "text": {"type": "String", "value": text},
            "asMod": {"type": "Boolean", "value": as_mod},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ActivityReplyFields(
            field_name="SaveActivityReply", arguments=cleared_arguments
        )

    @classmethod
    def delete_activity_reply(cls, *, id: Optional[int] = None) -> DeletedFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletedFields(
            field_name="DeleteActivityReply", arguments=cleared_arguments
        )

    @classmethod
    def toggle_like(
        cls, *, id: Optional[int] = None, type: Optional[LikeableType] = None
    ) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "type": {"type": "LikeableType", "value": type},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="ToggleLike", arguments=cleared_arguments)

    @classmethod
    def toggle_like_v_2(
        cls, *, id: Optional[int] = None, type: Optional[LikeableType] = None
    ) -> LikeableUnionUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "type": {"type": "LikeableType", "value": type},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LikeableUnionUnion(
            field_name="ToggleLikeV2", arguments=cleared_arguments
        )

    @classmethod
    def toggle_follow(cls, *, user_id: Optional[int] = None) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "userId": {"type": "Int", "value": user_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="ToggleFollow", arguments=cleared_arguments)

    @classmethod
    def toggle_favourite(
        cls,
        *,
        anime_id: Optional[int] = None,
        manga_id: Optional[int] = None,
        character_id: Optional[int] = None,
        staff_id: Optional[int] = None,
        studio_id: Optional[int] = None,
    ) -> FavouritesFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "animeId": {"type": "Int", "value": anime_id},
            "mangaId": {"type": "Int", "value": manga_id},
            "characterId": {"type": "Int", "value": character_id},
            "staffId": {"type": "Int", "value": staff_id},
            "studioId": {"type": "Int", "value": studio_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FavouritesFields(
            field_name="ToggleFavourite", arguments=cleared_arguments
        )

    @classmethod
    def update_favourite_order(
        cls,
        *,
        anime_ids: Optional[List[int]] = None,
        manga_ids: Optional[List[int]] = None,
        character_ids: Optional[List[int]] = None,
        staff_ids: Optional[List[int]] = None,
        studio_ids: Optional[List[int]] = None,
        anime_order: Optional[List[int]] = None,
        manga_order: Optional[List[int]] = None,
        character_order: Optional[List[int]] = None,
        staff_order: Optional[List[int]] = None,
        studio_order: Optional[List[int]] = None,
    ) -> FavouritesFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "animeIds": {"type": "[Int]", "value": anime_ids},
            "mangaIds": {"type": "[Int]", "value": manga_ids},
            "characterIds": {"type": "[Int]", "value": character_ids},
            "staffIds": {"type": "[Int]", "value": staff_ids},
            "studioIds": {"type": "[Int]", "value": studio_ids},
            "animeOrder": {"type": "[Int]", "value": anime_order},
            "mangaOrder": {"type": "[Int]", "value": manga_order},
            "characterOrder": {"type": "[Int]", "value": character_order},
            "staffOrder": {"type": "[Int]", "value": staff_order},
            "studioOrder": {"type": "[Int]", "value": studio_order},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FavouritesFields(
            field_name="UpdateFavouriteOrder", arguments=cleared_arguments
        )

    @classmethod
    def save_review(
        cls,
        *,
        id: Optional[int] = None,
        media_id: Optional[int] = None,
        body: Optional[str] = None,
        summary: Optional[str] = None,
        score: Optional[int] = None,
        private: Optional[bool] = None,
    ) -> ReviewFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "mediaId": {"type": "Int", "value": media_id},
            "body": {"type": "String", "value": body},
            "summary": {"type": "String", "value": summary},
            "score": {"type": "Int", "value": score},
            "private": {"type": "Boolean", "value": private},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReviewFields(field_name="SaveReview", arguments=cleared_arguments)

    @classmethod
    def delete_review(cls, *, id: Optional[int] = None) -> DeletedFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletedFields(field_name="DeleteReview", arguments=cleared_arguments)

    @classmethod
    def rate_review(
        cls, *, review_id: Optional[int] = None, rating: Optional[ReviewRating] = None
    ) -> ReviewFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "reviewId": {"type": "Int", "value": review_id},
            "rating": {"type": "ReviewRating", "value": rating},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReviewFields(field_name="RateReview", arguments=cleared_arguments)

    @classmethod
    def save_recommendation(
        cls,
        *,
        media_id: Optional[int] = None,
        media_recommendation_id: Optional[int] = None,
        rating: Optional[RecommendationRating] = None,
    ) -> RecommendationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "mediaId": {"type": "Int", "value": media_id},
            "mediaRecommendationId": {"type": "Int", "value": media_recommendation_id},
            "rating": {"type": "RecommendationRating", "value": rating},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RecommendationFields(
            field_name="SaveRecommendation", arguments=cleared_arguments
        )

    @classmethod
    def save_thread(
        cls,
        *,
        id: Optional[int] = None,
        title: Optional[str] = None,
        body: Optional[str] = None,
        categories: Optional[List[int]] = None,
        media_categories: Optional[List[int]] = None,
        sticky: Optional[bool] = None,
        locked: Optional[bool] = None,
    ) -> ThreadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "title": {"type": "String", "value": title},
            "body": {"type": "String", "value": body},
            "categories": {"type": "[Int]", "value": categories},
            "mediaCategories": {"type": "[Int]", "value": media_categories},
            "sticky": {"type": "Boolean", "value": sticky},
            "locked": {"type": "Boolean", "value": locked},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadFields(field_name="SaveThread", arguments=cleared_arguments)

    @classmethod
    def delete_thread(cls, *, id: Optional[int] = None) -> DeletedFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletedFields(field_name="DeleteThread", arguments=cleared_arguments)

    @classmethod
    def toggle_thread_subscription(
        cls, *, thread_id: Optional[int] = None, subscribe: Optional[bool] = None
    ) -> ThreadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadId": {"type": "Int", "value": thread_id},
            "subscribe": {"type": "Boolean", "value": subscribe},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadFields(
            field_name="ToggleThreadSubscription", arguments=cleared_arguments
        )

    @classmethod
    def save_thread_comment(
        cls,
        *,
        id: Optional[int] = None,
        thread_id: Optional[int] = None,
        parent_comment_id: Optional[int] = None,
        comment: Optional[str] = None,
        locked: Optional[bool] = None,
    ) -> ThreadCommentFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "Int", "value": id},
            "threadId": {"type": "Int", "value": thread_id},
            "parentCommentId": {"type": "Int", "value": parent_comment_id},
            "comment": {"type": "String", "value": comment},
            "locked": {"type": "Boolean", "value": locked},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadCommentFields(
            field_name="SaveThreadComment", arguments=cleared_arguments
        )

    @classmethod
    def delete_thread_comment(cls, *, id: Optional[int] = None) -> DeletedFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "Int", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletedFields(
            field_name="DeleteThreadComment", arguments=cleared_arguments
        )

    @classmethod
    def update_ani_chart_settings(
        cls,
        *,
        title_language: Optional[str] = None,
        outgoing_link_provider: Optional[str] = None,
        theme: Optional[str] = None,
        sort: Optional[str] = None,
    ) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "titleLanguage": {"type": "String", "value": title_language},
            "outgoingLinkProvider": {"type": "String", "value": outgoing_link_provider},
            "theme": {"type": "String", "value": theme},
            "sort": {"type": "String", "value": sort},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(
            field_name="UpdateAniChartSettings", arguments=cleared_arguments
        )

    @classmethod
    def update_ani_chart_highlights(
        cls, *, highlights: Optional[List[AniChartHighlightInput]] = None
    ) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "highlights": {"type": "[AniChartHighlightInput]", "value": highlights}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(
            field_name="UpdateAniChartHighlights", arguments=cleared_arguments
        )
