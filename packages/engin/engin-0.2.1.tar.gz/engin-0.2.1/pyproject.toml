[project]
name = "engin"
version = "0.2.1"
description = "A dependency-injection powered application framework"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["Dependency Injection", "Application Framework"]
dependencies = [
    "anyio>=4",
    # backwards compatability for exception group in 3.10
    "exceptiongroup>=1",
    "typing-extensions>=4",
]

[project.optional-dependencies]
cli = ["typer>=0.15", "tomli>=2.0; python_version < '3.11'"]

[project.scripts]
engin = "engin._cli:app"

[project.urls]
Homepage = "https://github.com/invokermain/engin"
Documentation = "https://engin.readthedocs.io/en/latest/"
Repository = "https://github.com/invokermain/engin.git"
Changelog = "https://github.com/invokermain/engin/blob/main/CHANGELOG.md"


[dependency-groups]
dev = [
    "fastapi>=0.115.6",
    "httpx>=0.27.2",
    "mypy>=1",
    "poethepoet>=0.32.1",
    "pydantic-settings>=2.6.0",
    "pydantic>=2.9.2",
    "pytest-asyncio>=0.24.0",
    "pytest>=8",
    "ruff>=0",
    "starlette>=0.39.2",
    "uvicorn>=0.31.1",
    "pytest-cov>=6.0.0",
    "typer>=0.15.2",
    "pytest-mock>=3.14.0",
    "pytest-benchmark>=5.1.0",
    "websockets>=15.0.1",
    "valkey>=6.1.0",
    "tomli"
]
docs = [
    "mkdocs-material>=9.5.50",
    "mkdocstrings[python]>=0.27.0",
]

[tool.uv]
default-groups = ["dev", "docs"]

[build-system]
requires = ["uv_build"]
build-backend = "uv_build"


[tool.ruff]
line-length = 95
target-version = "py310"


[tool.ruff.lint]
select = [
    "ANN", "ASYNC", "B", "C4", "DTZ", "E", "F", "I", "INP", "LOG", "PERF", "PIE", "PT",
    "PTH", "Q", "UP", "R", "RUF", "S", "SIM", "TCH", "T20", "W"
]
ignore = [
    "ANN401",
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "RET505", # Unnecessary `else` after `return` statement
    "RET506", # Unnecessary `else` after `raise` statement
]

[tool.ruff.lint.per-file-ignores]
"**/src/*" = ["PT"]
"**/tests/*" = ["S", "ANN"]
# allow print statements in examples/scripts
"**/examples/*" = ["T201", "LOG015", "S", "SIM105"]
"**/scripts/*" = ["T201"]


[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"


[tool.coverage.run]
source = ["src"]
omit = ["src/engin/scripts/**"]

[tool.coverage.report]
precision = 1
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "abc.abstractmethod",
    "if TYPE_CHECKING.*:",
    "if _t.TYPE_CHECKING:",
    "if t.TYPE_CHECKING:",
    "@overload",
    'class .*\bProtocol\b.*\):',
    "raise NotImplementedError",
    "assert_never\\(",
]
partial_branches = [
    "pragma: no branch",
    "if not TYPE_CHECKING:",
    "if not _t.TYPE_CHECKING:",
    "if not t.TYPE_CHECKING:",
    "if .* or not TYPE_CHECKING:",
    "if .* or not _t.TYPE_CHECKING:",
    "if .* or not t.TYPE_CHECKING:",
]


[tool.mypy]
python_version = "3.10"
strict = true
disable_error_code = [
    "type-arg", # allow generic types without type arguments
]


[tool.poe.tasks]
format.default_item_type = "cmd"
format.sequence = [
    "ruff format src tests examples",
    "ruff check --select I --fix src tests examples"
]

check.default_item_type = "cmd"
check.sequence = [
    "ruff format --check src tests examples",
    "ruff check src tests examples",
    "mypy src examples",
]

fix.default_item_type = "cmd"
fix.sequence = ["ruff check src tests examples --fix"]

test = "pytest tests --benchmark-skip"
ci-test = "pytest --cov=engin --cov-branch --cov-report=xml tests --benchmark-skip"
bench = "pytest tests --benchmark-only"
docs = "mkdocs serve"
