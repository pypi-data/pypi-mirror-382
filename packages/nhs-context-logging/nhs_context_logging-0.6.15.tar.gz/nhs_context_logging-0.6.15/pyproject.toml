[tool.poetry]
name = "nhs_context_logging"
version = "0.6.15"
description = ""
authors = ["spinecore"]
license = "GPLv3"
packages = [
    { include = "nhs_context_logging" },
    { include = "tests", format = "sdist" },
]
readme = "README.md"
repository = "https://github.com/NHSDigital/nhs-context-logging"

[tool.poetry.dependencies]
# core dependencies
python = ">=3.8.1"

[tool.poetry.extras]
pytest = ["pytest", "petname"]

[tool.setuptools.package-data]
"nhs_context_logging" = ["py.typed"]

[tool.poetry.group.dev.dependencies]
# ci / testing dependencies
petname = "^2.6"
black = "^24.3.0"
mypy = "^1.13.0"
coverage = "^7.6.0"
pytest = "^8.3.5"
pytest-asyncio = "^0"
tox = "^4.25.0"
ruff = "^0"


[tool.poetry.group.local.dependencies]
ipython = "^8.12.2"


[tool.ruff]
lint.select = [
    # See https://beta.ruff.rs/docs/rules/ for a full list
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "Q", # flake8-quotes
    "YTT", # flake8-2020
    "RSE", # flake8-raise
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "EXE", # flake8-executable
    "A", # flake8-builtins
    "UP",  # pyupgrade
    "PT", # flake8-pytest-style
    "PERF", # Perflint #
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
src = ["."]
lint.ignore = [
]
exclude = [
    ".git",
    ".venv",
]
lint.unfixable = ["SIM112"]
line-length = 120
target-version = "py38"


[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
#extend-exclude = '''
#/(
#  # The following are specific to Black, you probably don't want those.
#  | blib2to3
#  | tests/data
#  | profiling
#)/
#'''



[tool.coverage.run]
branch = true
omit = [
    ".venv/*",
]
source = [
    "."
]


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    "pragma: no cover",
    "from .*",
    "import .*"
]
omit = [
    "tests/*",
]
sort = "-cover"
ignore_errors = true
precision = 2
fail_under = 70
show_missing = true

[tool.coverage.xml]
output = "reports/coverage.xml"



[tool.pytest.ini_options]
asyncio_mode = "auto"
python_classes = "NoTestClasses"
python_files = "*_tests.py test_*.py"
norecursedirs = ".git .venv .eggs build dist .tox"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
check_untyped_defs = true


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
deps =
    pytest
    pytest-asyncio
allowlist_externals =
    which
    pytest
commands = 
    python --version
    which python
    which pytest
    pytest
"""


[tool.poetry-dynamic-versioning]
enable = false
metadata = false
vcs = "git"
style = "pep440"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=timestamp) }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
folders = [
    { path = "./" }
]

[build-system]
requires = ["poetry>=1.2", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
