[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "env-scanner"
dynamic = ["version"]
description = "Automatically scan Python projects for environment variables and generate .env-example files"
readme = "README.md"
requires-python = ">=3.7"
license = {text = "MIT"}
authors = [
    {name = "Ammar Munir", email = "ammarmunir4567@gmail.com"},
]
maintainers = [
    {name = "Ammar Munir", email = "ammarmunir4567@gmail.com"},
]
keywords = ["python", "environment", "env", "dotenv", "configuration", "environment-variables", "scanner", "generator"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

dependencies = [
    # Add your runtime dependencies here
    # "requests>=2.28.0",
    # "numpy>=1.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "pre-commit>=2.20.0",
    "tox>=3.24.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "sphinxcontrib-napoleon>=0.7",
]

[project.urls]
Homepage = "https://github.com/ammarmunir4567/env_scanner"
Documentation = "https://github.com/ammarmunir4567/env_scanner#readme"
Repository = "https://github.com/ammarmunir4567/env_scanner.git"
"Bug Tracker" = "https://github.com/ammarmunir4567/env_scanner/issues"
Changelog = "https://github.com/ammarmunir4567/env_scanner/blob/main/CHANGELOG.md"

[project.scripts]
env-scanner = "env_scanner.cli:main"

[tool.setuptools]
packages = ["env_scanner"]

[tool.setuptools.dynamic]
version = {attr = "env_scanner.__version__"}

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=env_scanner --cov-report=term-missing"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["env_scanner"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
]
