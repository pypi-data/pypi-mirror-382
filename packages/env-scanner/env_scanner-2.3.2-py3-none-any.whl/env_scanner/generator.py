"""
Generator for .env-example files.

This module creates .env-example files from detected environment variables.
"""

import os
from pathlib import Path
from typing import Set, List, Dict, Optional, Union
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class EnvExampleGenerator:
    """
    Generator for creating .env-example files from environment variables.
    """
    
    DEFAULT_HEADER = """# Environment Variables Configuration
# This file was automatically generated by env-scanner
# Generated on: {timestamp}
#
# Copy this file to .env and fill in the actual values
# DO NOT commit .env file to version control
"""
    
    VARIABLE_TEMPLATES = {
        # Common variable name patterns and their descriptions
        'DATABASE': 'Database connection string',
        'DB_': 'Database configuration',
        'POSTGRES': 'PostgreSQL configuration',
        'MYSQL': 'MySQL configuration',
        'MONGODB': 'MongoDB configuration',
        'REDIS': 'Redis configuration',
        
        'API_KEY': 'API key for external service',
        'API_SECRET': 'API secret for external service',
        'SECRET': 'Secret key or token',
        'TOKEN': 'Authentication token',
        'PASSWORD': 'Password',
        'PASS': 'Password',
        
        'AWS_': 'AWS configuration',
        'AZURE_': 'Azure configuration',
        'GCP_': 'Google Cloud Platform configuration',
        
        'SMTP': 'Email/SMTP configuration',
        'EMAIL': 'Email configuration',
        'MAIL': 'Mail configuration',
        
        'PORT': 'Port number',
        'HOST': 'Host address',
        'URL': 'URL endpoint',
        'ENDPOINT': 'API endpoint',
        
        'DEBUG': 'Debug mode (true/false)',
        'ENV': 'Environment (development/staging/production)',
        'ENVIRONMENT': 'Environment name',
        
        'LOG': 'Logging configuration',
        'CACHE': 'Cache configuration',
        'SESSION': 'Session configuration',
    }
    
    def __init__(
        self,
        env_vars: Set[str],
        output_path: Optional[Union[str, Path]] = None,
        add_comments: bool = True,
        group_by_prefix: bool = True,
        include_header: bool = True,
        var_locations: Optional[Dict[str, List[Dict]]] = None
    ):
        """
        Initialize the .env-example generator.
        
        Args:
            env_vars: Set of environment variable names
            output_path: Path where to save the .env-example file (default: current directory)
            add_comments: Whether to add descriptive comments for variables
            group_by_prefix: Whether to group variables by common prefixes
            include_header: Whether to include a header in the file
            var_locations: Optional dict with variable locations for additional context
        """
        self.env_vars = sorted(list(env_vars))
        self.output_path = Path(output_path) if output_path else Path.cwd() / '.env-example'
        self.add_comments = add_comments
        self.group_by_prefix = group_by_prefix
        self.include_header = include_header
        self.var_locations = var_locations or {}
    
    def _get_variable_comment(self, var_name: str) -> Optional[str]:
        """
        Generate a descriptive comment for a variable based on its name.
        
        Args:
            var_name: Environment variable name
            
        Returns:
            Comment string or None
        """
        if not self.add_comments:
            return None
        
        # Check for exact matches or patterns
        for pattern, description in self.VARIABLE_TEMPLATES.items():
            if pattern in var_name:
                # Add location info if available
                if var_name in self.var_locations:
                    locations = self.var_locations[var_name]
                    if locations:
                        first_loc = locations[0]
                        return f"{description} (used in {first_loc['file']})"
                return description
        
        # Add location info for unknown variables
        if var_name in self.var_locations:
            locations = self.var_locations[var_name]
            if locations:
                first_loc = locations[0]
                return f"Used in {first_loc['file']}"
        
        return None
    
    def _get_variable_placeholder(self, var_name: str) -> str:
        """
        Generate a placeholder value for a variable based on its name.
        
        Args:
            var_name: Environment variable name
            
        Returns:
            Placeholder value
        """
        var_lower = var_name.lower()
        
        # Boolean values
        if 'debug' in var_lower or 'enable' in var_lower or 'disable' in var_lower:
            return 'false'
        
        # Numeric values
        if 'port' in var_lower:
            return '8000'
        if 'timeout' in var_lower:
            return '30'
        if 'max' in var_lower or 'limit' in var_lower:
            return '100'
        
        # String values
        if 'url' in var_lower or 'endpoint' in var_lower:
            return 'https://example.com'
        if 'host' in var_lower:
            return 'localhost'
        if 'email' in var_lower or 'mail' in var_lower:
            return 'user@example.com'
        if 'user' in var_lower or 'username' in var_lower:
            return 'your_username'
        if 'password' in var_lower or 'pass' in var_lower:
            return 'your_password'
        if 'key' in var_lower or 'secret' in var_lower or 'token' in var_lower:
            return 'your_secret_key_here'
        if 'database' in var_lower or 'db' in var_lower:
            return 'your_database_name'
        if 'env' in var_lower or 'environment' in var_lower:
            return 'development'
        if 'path' in var_lower or 'dir' in var_lower:
            return '/path/to/directory'
        
        # Default
        return 'your_value_here'
    
    def _group_variables(self) -> Dict[str, List[str]]:
        """
        Group environment variables by common prefixes.
        
        Returns:
            Dictionary mapping group names to lists of variables
        """
        if not self.group_by_prefix:
            return {'All Variables': self.env_vars}
        
        groups: Dict[str, List[str]] = {}
        ungrouped: List[str] = []
        
        for var in self.env_vars:
            # Try to find a common prefix (words before first underscore)
            if '_' in var:
                prefix = var.split('_')[0]
                if prefix:
                    if prefix not in groups:
                        groups[prefix] = []
                    groups[prefix].append(var)
                else:
                    ungrouped.append(var)
            else:
                ungrouped.append(var)
        
        # Add ungrouped variables
        if ungrouped:
            groups['Other'] = ungrouped
        
        return groups
    
    def generate_content(self) -> str:
        """
        Generate the content for the .env-example file.
        
        Returns:
            String content for the file
        """
        lines = []
        
        # Add header
        if self.include_header:
            header = self.DEFAULT_HEADER.format(
                timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            )
            lines.append(header)
        
        # Group variables
        groups = self._group_variables()
        
        # Generate content for each group
        for group_name, variables in sorted(groups.items()):
            if len(groups) > 1 and self.group_by_prefix:
                # Add group header
                lines.append(f"\n# {group_name} Configuration")
                lines.append("#" + "=" * 50)
            
            # Add each variable
            for var in sorted(variables):
                comment = self._get_variable_comment(var)
                placeholder = self._get_variable_placeholder(var)
                
                # Add comment if available
                if comment:
                    lines.append(f"\n# {comment}")
                
                # Add the variable with placeholder
                lines.append(f"{var}={placeholder}")
        
        return '\n'.join(lines) + '\n'
    
    def save(self, content: Optional[str] = None) -> Path:
        """
        Save the .env-example file.
        
        Args:
            content: Optional content to save (if None, generates automatically)
            
        Returns:
            Path to the saved file
        """
        if content is None:
            content = self.generate_content()
        
        # Create parent directories if needed
        self.output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Check if file exists
        if self.output_path.exists():
            logger.warning(f"File {self.output_path} already exists. It will be overwritten.")
        
        # Write the file
        with open(self.output_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"Generated .env-example file at: {self.output_path}")
        return self.output_path
    
    def preview(self) -> None:
        """Print a preview of the generated content."""
        content = self.generate_content()
        print("\n" + "="*60)
        print("Preview of .env-example file:")
        print("="*60)
        print(content)
        print("="*60 + "\n")
    
    @classmethod
    def from_scanner(
        cls,
        scanner,
        output_path: Optional[Union[str, Path]] = None,
        **kwargs
    ) -> 'EnvExampleGenerator':
        """
        Create a generator from a scanner instance.
        
        Args:
            scanner: EnvScanner instance
            output_path: Path where to save the file
            **kwargs: Additional arguments for the generator
            
        Returns:
            EnvExampleGenerator instance
        """
        return cls(
            env_vars=scanner.env_vars,
            output_path=output_path,
            var_locations=scanner.var_locations,
            **kwargs
        )


