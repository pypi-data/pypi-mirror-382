[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "fivetwenty"
version = "0.3.0"
description = "Simple, elegant Python client for OANDA's REST API v20"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "FiveTwenty Contributors"}
]
keywords = ["oanda", "trading", "forex", "api", "finance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    "httpx>=0.25.0",
    "pydantic>=2.5.0",
]



[project.urls]
Homepage = "https://nimbleox.github.io/fivetwenty/"
Repository = "https://github.com/NimbleOx/fivetwenty"
Documentation = "https://nimbleox.github.io/fivetwenty/"
"Bug Reports" = "https://github.com/NimbleOx/fivetwenty/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["fivetwenty*", "docs_validation*"]
exclude = ["tests*"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
# Be very permissive for tests since we test alias functionality
ignore_errors = true

[tool.ruff]
target-version = "py310"
line-length = 320  # Effectively no line length limit (ruff's maximum)

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "PL",   # Pylint
    "TRY",  # tryceratops
    "PERF", # Perflint
    "RUF",  # Ruff-specific rules
]
ignore = [
    # Formatter conflicts - must keep
    "E501",    # line too long - we have line-length = 320
    "COM812",  # Missing trailing comma (formatter handles this)
    "ISC001",  # Implicit string concatenation (formatter handles this)

    # API design necessities - keep these
    "PLR0912", # Too many branches (complex financial API logic)
    "PLR0913", # Too many arguments (OANDA API has many optional parameters)
    "PLR0915", # Too many statements (comprehensive validation/processing)
    "PLC0415", # Import should be at top of file (conditional imports needed)
    "SLF001",  # Private member access (needed for internal client APIs)
    "TID252",  # Relative imports (clean internal package structure)

    # Exception handling patterns - consider keeping
    "B904",    # raise without from in except (sometimes chaining obscures the real error)
    "TRY300",  # Consider else after try (explicit error handling preferred)
    "TRY301",  # Abstract raise to inner function (inline raises are clearer)

    # Code style preferences - keeping for readability/intent
    "ARG002",  # unused method argument (interface compliance)
    "N818",    # Exception naming (StreamStall is descriptive)
    "PT011",   # pytest.raises too broad (sometimes appropriate)
    "PLR2004", # Magic value comparison (acceptable in tests/examples)
    "RUF001",  # Ambiguous unicode (intentional symbols like â„¹)
    "SIM102",  # Collapsible if statements (nested can be clearer)
    "SIM105",  # Use contextlib.suppress (explicit try/except preferred)
    "SIM108",  # Ternary operator (if-else can be clearer)
    "SIM117",  # Multiple with statements (nested can be clearer)
    "TRY003",  # Long exception messages (sometimes needed for clarity)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "ARG",     # Unused arguments in tests
    "S101",    # Use of assert in tests
    "PLR2004", # Magic values in tests
    "PERF203", # Try-except in loop (necessary for robust integration tests)
    "PERF401", # Use list comprehension (explicit loops can be clearer in tests)
    "DTZ",     # Datetime timezone issues (test fixtures can use naive datetime)
]
"examples/**/*" = [
    "T201",    # Print statements in examples
    "PLC0415", # Import not at top
    "PLR0915", # Too many statements (examples can be long)
    "PERF203", # Try-except in loop is fine for examples
]
"docs/examples/**/*" = [
    "T201",    # Print statements in examples
    "PLC0415", # Import not at top
    "PLR0915", # Too many statements (examples can be long)
    "PERF203", # Try-except in loop is fine for examples
]
"**/__init__.py" = [
    "F403",    # Star imports are expected in __init__.py for re-exporting
    "F405",    # Star import undefined names are expected in __init__.py
]
"**/*.ipynb" = [
    "T201",    # Print statements are expected in notebooks
    "F401",    # Unused imports (notebooks often import for exploration)
    "F811",    # Redefinition of unused variables (common in notebook cells)
    "F841",    # Unused variables (notebooks often define variables for exploration)
    "DTZ",     # Datetime timezone issues (examples often use naive datetime)
    "PLW0603", # Global statements (notebooks often use globals for state)
    "B007",    # Unused loop variables (common in notebook examples)
    "PERF401", # Use list comprehension (explicit loops can be clearer in examples)
    "PERF203", # Try-except in loops (fine for examples)
    "RET504",  # Unnecessary assignment before return (clearer in examples)
    "PTH123",  # Use Path.open() (simple open() is fine for examples)
    "I001",    # Import sorting (notebooks have different import patterns)
    "RUF013",  # Implicit Optional (notebooks can use simpler syntax)
]

[tool.ruff.format]
# Use ruff's formatter instead of black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mdformat]
# MDFormat configuration for markdown linting
wrap = "no"
end_of_line = "lf"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "integration: mark test as an integration test (requires API credentials)",
    "core: mark test as a core functionality test",
    "streaming: mark test as a streaming-related test",
    "trading: mark test as a trading operation test",
    "edge_cases: mark test as an edge case test",
    "unit: mark test as a unit test",
    "slow: mark test as slow running",
    "compliance: mark test as a compliance test"
]

[dependency-groups]
dev = [
    # Testing dependencies
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-vcr>=1.0.2",
    "pytest-cov>=4.0.0",
    # Code quality tools (using higher version requirements)
    "mypy>=1.18.2",
    "ruff>=0.13.1",
    "yamllint>=1.35.0",
    # Task runner and environment
    "poethepoet>=0.24.0",
    "python-dotenv>=1.0.0",
    # Documentation tools
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-jupyter>=0.24.0",
    "pymdown-extensions>=10.0",
    "mdformat>=0.7.22",
    "pymarkdownlnt>=0.9.32",
    # Type stubs
    "types-requests>=2.32.4.20250913",
    # Build and publish tools
    "build>=1.3.0",
    "twine>=6.2.0",
    # Docs validation dependencies
    "click>=8.0.0",
    "rich>=10.0.0",
    "requests>=2.25.0",
    "pathspec>=0.9.0",
    "pyyaml>=6.0.2",
    "psutil>=7.1.0",
    "types-pyyaml>=6.0.12.20250915",
]

[tool.poe.tasks]
# Testing tasks
test = "python -m pytest tests/unit/"
test-integration = "python -m pytest tests/integration/"

# Code quality tasks
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "ruff format ."
typecheck = "uv run mypy fivetwenty/ docs/examples/"

# Development tasks
dev-install = "uv sync --group dev"
sync = "uv sync"
build = "python -m build"

# Documentation tasks
docs-serve = "python -m mkdocs serve"
docs-build = "python -m mkdocs build --clean"

# Documentation validation task
docs-validate = "uv run python -m docs_validation.src.cli validate --config docs_validation/config/validation-complete.yml"

# YAML tasks
yaml-lint = "yamllint mkdocs.yml docs_validation/config/ .github/workflows/ docs/api-reference/openapi.yaml"

# Workflow tasks
check-fast = ["format", "lint", "typecheck", "test"]
check-full = ["format", "lint", "typecheck", "test", "docs-validate"]

# Release tasks
clean-dist = "rm -rf dist/ build/ *.egg-info"

bump-version = "uv run python scripts/bump_version.py"

[tool.poe.tasks.publish-pypi]
shell = """
source .env
uv run python -m twine upload dist/* --username __token__ --password $PYPI_TOKEN
"""
interpreter = "bash"
# test pypi upload command for reference
# uv run python -m twine upload --repository testpypi dist/* --username __token__ --password $PYPI_TOKEN

[tool.poe.tasks.release-github]
shell = """
VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f 2)
gh release create v$VERSION dist/* --title "Release v$VERSION" --notes "Release version $VERSION"
"""
interpreter = "bash"

[tool.poe.tasks.release]
help = "Bump version interactively, then build and release"
sequence = [
    "bump-version",
    "clean-dist",
    "build",
    "publish-pypi",
    "release-github"
]
