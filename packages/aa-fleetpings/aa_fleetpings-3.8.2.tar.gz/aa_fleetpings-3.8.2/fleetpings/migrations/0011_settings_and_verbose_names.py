# Generated by Django 4.0.10 on 2023-05-13 14:52

# Django
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("fleetpings", "0010_use_ellipsis_character_in_strings"),
    ]

    operations = [
        migrations.CreateModel(
            name="Setting",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "use_default_fleet_types",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether to use default fleet types. If checked, the default fleet types (Roaming, Home Defense, StratOP, and CTA) will be added to the Fleet Type dropdown.",
                        verbose_name="Use default fleet types",
                    ),
                ),
                (
                    "use_default_ping_targets",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether to use default ping targets. If checked, the default ping targets (@everyone and @here) will be added to the Ping Target dropdown.",
                        verbose_name="Use default ping targets",
                    ),
                ),
                (
                    "use_doctrines_from_fittings_module",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether to use the doctrines from the Fittings modules in the doctrine dropdown. Note: The fittings module needs to be installed for this.",
                        verbose_name="Use Doctrines from Fittings module",
                    ),
                ),
                (
                    "webhook_verification",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether to verify Webhooks URLs or not. Note: When unchecked Webhook URLs will not be verified, so the app can be used with non-Discord Webhooks as well. When disabling webhook verification and using non-Discord webhooks, it is up to you to make sure your webhook understands a payload that is formatted for Discord webhooks.",
                        verbose_name="Verify Webhooks",
                    ),
                ),
                (
                    "default_embed_color",
                    models.CharField(
                        blank=True,
                        default="#FAA61A",
                        help_text="Default highlight color for the webhook embed.",
                        max_length=7,
                        verbose_name="Default embed color",
                    ),
                ),
            ],
            options={
                "verbose_name": "setting",
                "verbose_name_plural": "settings",
                "default_permissions": (),
            },
        ),
        migrations.AlterField(
            model_name="discordpingtargets",
            name="discord_id",
            field=models.CharField(
                blank=True,
                help_text="ID of the Discord role to ping",
                max_length=255,
                unique=True,
                verbose_name="Discord ID",
            ),
        ),
        migrations.AlterField(
            model_name="discordpingtargets",
            name="is_enabled",
            field=models.BooleanField(
                db_index=True,
                default=True,
                help_text="Whether this formup location is enabled or not",
                verbose_name="Is enabled",
            ),
        ),
        migrations.AlterField(
            model_name="discordpingtargets",
            name="name",
            field=models.OneToOneField(
                help_text="Name of the Discord role to ping. (Note: This must be an Auth group that is synced to Discord.)",
                on_delete=django.db.models.deletion.CASCADE,
                to="auth.group",
                verbose_name="Group name",
            ),
        ),
        migrations.AlterField(
            model_name="discordpingtargets",
            name="notes",
            field=models.TextField(
                blank=True,
                help_text="You can add notes about this configuration here if you want",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="discordpingtargets",
            name="restricted_to_group",
            field=models.ManyToManyField(
                blank=True,
                help_text="Restrict ping rights to the following group(s) …",
                related_name="discord_role_require_groups",
                to="auth.group",
                verbose_name="Group restrictions",
            ),
        ),
        migrations.AlterField(
            model_name="fleetcomm",
            name="is_enabled",
            field=models.BooleanField(
                db_index=True,
                default=True,
                help_text="Whether this comms is enabled or not",
                verbose_name="Is enabled",
            ),
        ),
        migrations.AlterField(
            model_name="fleetcomm",
            name="name",
            field=models.CharField(
                help_text="Short name to identify this comms",
                max_length=255,
                unique=True,
                verbose_name="Name",
            ),
        ),
        migrations.AlterField(
            model_name="fleetcomm",
            name="notes",
            field=models.TextField(
                blank=True,
                help_text="You can add notes about this configuration here if you want",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="fleetdoctrine",
            name="is_enabled",
            field=models.BooleanField(
                db_index=True,
                default=True,
                help_text="Whether this doctrine is enabled or not",
                verbose_name="Is enabled",
            ),
        ),
        migrations.AlterField(
            model_name="fleetdoctrine",
            name="link",
            field=models.CharField(
                blank=True,
                help_text="A link to a doctrine page for this doctrine if you have.",
                max_length=255,
                verbose_name="Doctrine link",
            ),
        ),
        migrations.AlterField(
            model_name="fleetdoctrine",
            name="name",
            field=models.CharField(
                help_text="Short name to identify this doctrine",
                max_length=255,
                unique=True,
                verbose_name="Name",
            ),
        ),
        migrations.AlterField(
            model_name="fleetdoctrine",
            name="notes",
            field=models.TextField(
                blank=True,
                help_text="You can add notes about this configuration here if you want",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="fleetdoctrine",
            name="restricted_to_group",
            field=models.ManyToManyField(
                blank=True,
                help_text="Restrict this doctrine to the following group(s) …",
                related_name="fleetdoctrine_require_groups",
                to="auth.group",
                verbose_name="Group restrictions",
            ),
        ),
        migrations.AlterField(
            model_name="fleettype",
            name="embed_color",
            field=models.CharField(
                blank=True,
                help_text="Highlight color for the embed",
                max_length=7,
                verbose_name="Embed color",
            ),
        ),
        migrations.AlterField(
            model_name="fleettype",
            name="is_enabled",
            field=models.BooleanField(
                db_index=True,
                default=True,
                help_text="Whether this fleet type is enabled or not",
                verbose_name="Is enabled",
            ),
        ),
        migrations.AlterField(
            model_name="fleettype",
            name="name",
            field=models.CharField(
                help_text="Short name to identify this fleet type",
                max_length=255,
                unique=True,
                verbose_name="Name",
            ),
        ),
        migrations.AlterField(
            model_name="fleettype",
            name="notes",
            field=models.TextField(
                blank=True,
                help_text="You can add notes about this configuration here if you want",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="fleettype",
            name="restricted_to_group",
            field=models.ManyToManyField(
                blank=True,
                help_text="Restrict this fleet type to the following group(s) …",
                related_name="fleettype_require_groups",
                to="auth.group",
                verbose_name="Group restrictions",
            ),
        ),
        migrations.AlterField(
            model_name="formuplocation",
            name="is_enabled",
            field=models.BooleanField(
                db_index=True,
                default=True,
                help_text="Whether this formup location is enabled or not",
                verbose_name="Is enabled",
            ),
        ),
        migrations.AlterField(
            model_name="formuplocation",
            name="name",
            field=models.CharField(
                help_text="Short name to identify this formup location",
                max_length=255,
                unique=True,
                verbose_name="Name",
            ),
        ),
        migrations.AlterField(
            model_name="formuplocation",
            name="notes",
            field=models.TextField(
                blank=True,
                help_text="You can add notes about this configuration here if you want",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="webhook",
            name="is_enabled",
            field=models.BooleanField(
                db_index=True,
                default=True,
                help_text="Whether this webhook is active or not",
                verbose_name="Is enabled",
            ),
        ),
        migrations.AlterField(
            model_name="webhook",
            name="name",
            field=models.CharField(
                help_text="Name of the channel this webhook posts to",
                max_length=255,
                unique=True,
                verbose_name="Discord channel",
            ),
        ),
        migrations.AlterField(
            model_name="webhook",
            name="notes",
            field=models.TextField(
                blank=True,
                help_text="You can add notes about this webhook here if you want",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="webhook",
            name="restricted_to_group",
            field=models.ManyToManyField(
                blank=True,
                help_text="Restrict ping rights to the following group(s) …",
                related_name="webhook_require_groups",
                to="auth.group",
                verbose_name="Group restrictions",
            ),
        ),
        migrations.AlterField(
            model_name="webhook",
            name="url",
            field=models.CharField(
                help_text="URL of this webhook, e.g. https://discord.com/api/webhooks/123456/abcdef",
                max_length=255,
                unique=True,
                verbose_name="Webhook URL",
            ),
        ),
    ]
