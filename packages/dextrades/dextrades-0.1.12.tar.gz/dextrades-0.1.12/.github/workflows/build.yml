name: Build & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write      # for trusted publishing
  contents: write      # to create releases if needed
  attestations: write  # for build provenance

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Create virtual environment
        run: python -m venv .venv
      - name: Build and install with maturin (develop)
        uses: PyO3/maturin-action@v1
        env:
          VIRTUAL_ENV: ${{ github.workspace }}/.venv
        with:
          rust-toolchain: stable
          command: develop
          args: --release
      - name: Smoke test import
        shell: bash
        run: |
          PY=.venv/bin/python
          [ -f .venv/Scripts/python.exe ] && PY=.venv/Scripts/python
          "$PY" - << 'PY'
          import dextrades
          print('dextrades imported:', dextrades.__name__)
          c = dextrades.PyConfigBuilder()
          print('builder OK')
          PY
      - name: Install pytest
        shell: bash
        run: |
          PY=".venv/bin/python"
          if [ -f ".venv/Scripts/python.exe" ]; then PY=".venv/Scripts/python.exe"; fi
          "$PY" -m pip install --upgrade pip pytest
      - name: Run tests
        shell: bash
        run: |
          PY=".venv/bin/python"
          if [ -f ".venv/Scripts/python.exe" ]; then PY=".venv/Scripts/python.exe"; fi
          "$PY" -m pytest -v
      - name: Smoke test CLI import
        shell: bash
        run: |
          PY=".venv/bin/python"
          if [ -f ".venv/Scripts/python.exe" ]; then PY=".venv/Scripts/python.exe"; fi
          "$PY" - << 'PY'
          import dextrades_cli.cli as cli
          print('cli import OK')
          PY

  build-wheels:
    name: Build wheels
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64
            platform-id: linux
          # macOS
          - os: macos-13  # Intel
            platform-id: macos-intel
          - os: macos-14  # ARM
            platform-id: macos-arm
          # Windows
          - os: windows-latest
            target: x86_64
            platform-id: windows-x64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels (Linux)
        if: matrix.platform-id == 'linux'
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: ${{ matrix.target }}
          manylinux: "off"
          command: build
          args: --release --out dist --find-interpreter
      - name: Rename Linux wheel for PyPI compatibility
        if: matrix.platform-id == 'linux'
        run: |
          cd dist
          for wheel in *-linux_*.whl; do
            new_name=$(echo "$wheel" | sed 's/linux_x86_64/manylinux_2_17_x86_64.manylinux2014_x86_64/')
            mv "$wheel" "$new_name"
            echo "Renamed $wheel to $new_name"
          done
          ls -la *.whl
      - name: Build wheels (macOS)
        if: startsWith(matrix.platform-id, 'macos')
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          command: build
          args: --release --out dist --find-interpreter
      - name: Build wheels (Windows)
        if: startsWith(matrix.platform-id, 'windows')
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: ${{ matrix.target }}-pc-windows-msvc
          command: build
          args: --release --out dist --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform-id }}-${{ matrix.target || 'default' }}
          path: dist

  build-sdist:
    name: Build source distribution
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          command: build
          args: --release --out dist --sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  publish:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test, build-wheels, build-sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: dist
          merge-multiple: true
      - name: List downloaded files
        run: find dist -type f -name "*.whl" -o -name "*.tar.gz" | head -10
      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/**/*.whl
            dist/**/*.tar.gz
      - name: Publish to PyPI with OIDC
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true