[tool.poetry]
name = "askyourdocs"
version = "1.0.0"
description = "Privacy-first, local-only CLI tool that transforms document collections into an intelligent Q&A system"
authors = ["Lincoln Simba <lincolncmba@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/lincmba/askyourdocs"
repository = "https://github.com/lincmba/askyourdocs"
documentation = "https://github.com/lincmba/askyourdocs/blob/main/README.md"
keywords = ["rag", "ai", "llm", "documents", "question-answering", "search", "privacy", "local", "cli", "llamaindex"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Office/Business :: Office Suites",
]
packages = [{ include = "askyourdocs", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"

# Core CLI and UI
click = "8.2.1"
rich = "14.1.0"
pydantic = "2.11.7"
pyyaml = "6.0.2"

# LlamaIndex core
llama-index = "0.13.3"
llama-index-core = "0.13.3"

# Vector storage
llama-index-vector-stores-chroma = "0.5.2"
chromadb = "1.0.20"

# Local LLM support (Ollama)
llama-index-llms-ollama = "0.7.1"

# Local embeddings
llama-index-embeddings-huggingface = "0.6.0"
sentence-transformers = "5.1.0"

# Remote LLM support (optional)
llama-index-llms-openai = "0.5.4"
openai = "1.102.0"
llama-index-embeddings-openai = "0.5.0"
anthropic = "0.66.0"
llama-index-llms-anthropic = "0.8.6"
llama-index-llms-azure-openai = "0.4.1"

# Document processing
pypdf = "6.0.0"
python-docx = "1.1.2"
python-pptx = "0.6.23"
markdown = "3.7"
beautifulsoup4 = "4.13.5"
lxml = "5.3.0"

# File monitoring and utilities
watchdog = "6.0.0"
tqdm = "4.67.1"
requests = "2.32.5"

# Optional: GPU acceleration
torch = { version = "2.8.0", optional = true }
transformers = { version = "4.56.0", optional = true }

[tool.poetry.extras]
# GPU acceleration
gpu = ["torch", "transformers"]

# Documentation
docs = ["mkdocs", "mkdocs-material", "mkdocs-click"]

# Development tools
dev = [
    "pytest", "pytest-cov", "pytest-mock", "pytest-asyncio",
    "black", "ruff", "mypy", "pre-commit",
    "types-pyyaml", "types-requests"
]

# All extras combined
all = [
    "pytest", "pytest-cov", "black", "ruff", "mypy"
]

[tool.poetry.group.dev.dependencies]
pytest = "7.4.4"
pytest-cov = "4.1.0"
pytest-mock = "3.15.0"
pytest-asyncio = "0.21.2"
black = "23.12.1"
ruff = "0.1.15"
mypy = "1.17.1"
pre-commit = "3.8.0"
types-pyyaml = "6.0.12.20250822"
types-requests = "2.32.4.20250809"
mkdocs = "1.6.1"
mkdocs-material = "9.5.40"
mkdocs-click = "0.8.1"

[tool.poetry.scripts]
askyourdocs = "askyourdocs.main:cli"
ayd = "askyourdocs.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = ["E", "W", "F", "I", "B", "C4", "UP", "S"]
ignore = ["E501", "B008", "S101"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "llama_index.*",
    "sentence_transformers.*",
    "transformers.*",
    "torch.*",
    "pypdf.*",
    "docx.*",
    "pptx.*",
    "watchdog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=askyourdocs --cov-report=term-missing --cov-report=html"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
