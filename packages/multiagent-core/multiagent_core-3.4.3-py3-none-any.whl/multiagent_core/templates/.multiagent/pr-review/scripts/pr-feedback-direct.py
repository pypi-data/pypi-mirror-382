#!/usr/bin/env python3
"""
Direct PR Feedback Processing using Claude Code Python SDK

This script bypasses slash commands and directly implements the task generation
logic using the SDK with explicit instructions.
"""

import asyncio
import json
import sys
import os
from pathlib import Path
from datetime import datetime
from claude_code_sdk import query, ClaudeCodeOptions
from claude_code_sdk.types import AssistantMessage, SystemMessage, ResultMessage, TextBlock

class DirectPRFeedbackProcessor:
    """Direct PR feedback processing using SDK with explicit prompts"""
    
    def __init__(self, pr_number: str):
        self.pr_number = pr_number
        self.script_dir = Path(__file__).parent
        self.project_root = self.script_dir.parent.parent
        self.logs_dir = self.project_root / ".multiagent" / "feedback" / "logs"
        
    async def generate_tasks(self):
        """Generate tasks using direct SDK prompt instead of slash commands"""
        
        print(f"🤖 Generating tasks for PR #{self.pr_number} using direct SDK approach...")
        
        # Step 1: Find session directory (wait if needed)
        session_dir = self.find_session_or_wait()
        if not session_dir:
            print(f"❌ No session directory found for PR #{self.pr_number}")
            return False
            
        print(f"📁 Session directory: {session_dir}")
        
        # Step 2: Read existing PR data files
        pr_data_file = session_dir / "pr-data.json"
        pr_diff_file = session_dir / "pr-diff.txt"
        pr_comments_file = session_dir / "pr-comments.json"
        
        if not all([pr_data_file.exists(), pr_diff_file.exists()]):
            print("❌ Required PR data files not found")
            return False
            
        # Read the data
        with open(pr_data_file, 'r') as f:
            pr_data = json.load(f)
            
        with open(pr_diff_file, 'r') as f:
            pr_diff = f.read()
            
        pr_comments = []
        if pr_comments_file.exists():
            with open(pr_comments_file, 'r') as f:
                pr_comments = json.load(f)
        
        # Step 3: Generate comprehensive prompt for task creation
        session_id = session_dir.name
        
        prompt = f"""
Analyze the following GitHub PR data and generate a comprehensive task list file.

PR Information:
- Number: #{self.pr_number}
- Title: {pr_data.get('title', 'N/A')}
- Author: {pr_data.get('author', {}).get('login', 'N/A')}
- Head Branch: {pr_data.get('headRefName', 'N/A')}
- Base Branch: {pr_data.get('baseRefName', 'N/A')}
- State: {pr_data.get('state', 'N/A')}
- URL: {pr_data.get('url', 'N/A')}

PR Diff (changes made):
{pr_diff[:2000]}...

Comments: {len(pr_comments)} review comments found

Please create a file called `generated-tasks.md` in the directory `{session_dir}` with the following structure:

```markdown
# Feedback Tasks - Session {session_id}

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
**PR**: #{self.pr_number}
**Title**: {pr_data.get('title', 'N/A')}
**Author**: {pr_data.get('author', {}).get('login', 'N/A')}
**Branch**: {pr_data.get('headRefName', 'N/A')} → {pr_data.get('baseRefName', 'N/A')}
**Session**: [{session_id}](.multiagent/feedback/logs/{session_id}/)

## Claude Code Review Summary

[Analyze the PR diff and provide 3-5 key points about the changes]

## Action Items

### Priority 1: Immediate Actions
- [ ] **T001** [Specific task based on PR content]
- [ ] **T002** [Specific task based on PR content]  
- [ ] **T003** [Specific task based on PR content]

### Priority 2: Code Quality
- [ ] **T004** [Quality improvement task]
- [ ] **T005** [Testing/documentation task]
- [ ] **T006** [Refactoring task if needed]

### Priority 3: Integration
- [ ] **T007** [Integration/deployment task]
- [ ] **T008** [Verification task]
- [ ] **T009** [Follow-up task]

## Session Details
- **Session ID**: {session_id}
- **Created**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
- **Files Changed**: [Count from diff]
- **Lines Added**: [Count from diff]
- **Lines Removed**: [Count from diff]

---
*Generated by MultiAgent Core Feedback System*
```

Create this file with specific, actionable tasks based on the actual PR content and changes shown in the diff.
"""

        # Step 4: Execute with SDK
        try:
            options = ClaudeCodeOptions(
                permission_mode='bypassPermissions',
                max_turns=3,
                allowed_tools=['Write', 'Read'],
                cwd=str(self.project_root)
            )
            
            print("🔄 Executing task generation...")
            
            async for message in query(prompt=prompt, options=options):
                if isinstance(message, AssistantMessage):
                    for block in message.content:
                        if isinstance(block, TextBlock) and len(block.text.strip()) > 0:
                            first_line = block.text.strip().split('\n')[0]
                            if len(first_line) > 100:
                                first_line = first_line[:100] + "..."
                            print(f"💬 Claude: {first_line}")
                            
                elif isinstance(message, ResultMessage):
                    print(f"✅ Generation completed - Cost: ${message.total_cost_usd:.4f}")
                    if message.is_error:
                        print(f"❌ Error: {message.result}")
                        return False
            
            # Step 5: Verify the file was created
            tasks_file = session_dir / "generated-tasks.md"
            if tasks_file.exists():
                print(f"📝 Tasks file created: {tasks_file}")
                
                # Show preview
                with open(tasks_file, 'r') as f:
                    content = f.read()
                    lines = content.split('\n')
                    print("\n📋 Generated tasks preview:")
                    for i, line in enumerate(lines[:15]):
                        print(f"   {line}")
                    if len(lines) > 15:
                        print(f"   ... ({len(lines) - 15} more lines)")
                        
                return True
            else:
                print("❌ Tasks file was not created")
                return False
                
        except Exception as e:
            print(f"❌ Error during task generation: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def find_latest_session(self) -> Path | None:
        """Find the most recent session directory for the PR"""
        
        if not self.logs_dir.exists():
            return None
            
        pattern = f"pr-{self.pr_number}-*"
        matching_dirs = list(self.logs_dir.glob(pattern))
        
        if not matching_dirs:
            return None
            
        return sorted(matching_dirs)[-1]
    
    def find_session_or_wait(self, max_wait_seconds: int = 5) -> Path | None:
        """Find session directory, waiting briefly for it to be created if needed"""
        
        import time
        
        # Try immediately first
        session_dir = self.find_latest_session()
        if session_dir:
            return session_dir
            
        # Wait briefly for session to be created (script might be running in parallel)
        print(f"🔍 Session not found yet, waiting for creation...")
        for i in range(max_wait_seconds):
            time.sleep(1)
            session_dir = self.find_latest_session()
            if session_dir:
                print(f"📁 Found session: {session_dir.name}")
                return session_dir
                
        return None

async def main():
    """Main entry point"""
    
    if len(sys.argv) != 2:
        print("Usage: python3 pr-feedback-direct.py <PR_NUMBER>")
        sys.exit(1)
    
    pr_number = sys.argv[1]
    
    processor = DirectPRFeedbackProcessor(pr_number)
    success = await processor.generate_tasks()
    
    if success:
        print(f"\n🎉 Tasks generated successfully for PR #{pr_number}!")
        sys.exit(0)
    else:
        print(f"\n❌ Task generation failed for PR #{pr_number}!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())