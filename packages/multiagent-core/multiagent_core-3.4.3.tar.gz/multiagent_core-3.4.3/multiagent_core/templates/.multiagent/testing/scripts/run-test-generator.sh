#!/bin/bash

# Script that calls the test-generator agent to intelligently analyze tasks

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Configuration
SPEC_DIR="${1:-specs/001-build-a-complete}"
AGENT_MD=".multiagent/testing/agents/test-generator.md"
MEMORY_DIR=".multiagent/testing/memory"
LOGS_DIR=".multiagent/testing/logs"

# Create directories
mkdir -p "$MEMORY_DIR"
mkdir -p "$LOGS_DIR"

# Session ID
SESSION_ID="ai-test-gen-$(date +%Y%m%d-%H%M%S)"
OUTPUT_SCRIPT="$MEMORY_DIR/generated-tests-$SESSION_ID.sh"

echo -e "${BLUE}=== AI-Powered Test Generation ===${NC}"
echo -e "${BLUE}Using test-generator agent to analyze: $SPEC_DIR${NC}"
echo ""

# Create the prompt for the test-generator agent
PROMPT="Analyze the tasks in $SPEC_DIR and generate a test structure.

1. Read the tasks file from $SPEC_DIR/tasks.md (or $SPEC_DIR/agent-tasks/layered-tasks.md if it exists)
2. Read ALL templates from .multiagent/testing/templates/
3. Understand each task - is it backend (Python/FastAPI), frontend (React/UI), integration, or e2e?
4. Generate bash commands that:
   - Create the proper directory structure under tests/
   - Use cat to read the actual template files
   - Use sed to replace {{TASK_ID}} and {{TASK_DESC}} placeholders
   - Place backend tests in tests/backend/
   - Place frontend tests in tests/frontend/
   - Create logical subdirectories based on features

Output ONLY executable bash commands starting with #!/bin/bash"

echo -e "${YELLOW}Note: In a real implementation, this would call:${NC}"
echo -e "${YELLOW}Task(subagent_type='test-generator', prompt=...)${NC}"
echo -e "${YELLOW}The agent would read tasks, analyze them, and generate the structure${NC}"
echo ""

# For demonstration, create a simple output
cat > "$OUTPUT_SCRIPT" << 'DEMO'
#!/bin/bash

# Generated by test-generator agent
echo "Test-generator agent would analyze tasks and create structure here"
echo "It would:"
echo "1. Read tasks from the spec"
echo "2. Load templates"
echo "3. Understand task types"
echo "4. Generate optimal structure"

# Example of what it would generate:
# mkdir -p tests/backend/api
# mkdir -p tests/backend/auth
# mkdir -p tests/frontend/components
# cat .multiagent/testing/templates/backend_template.test.py | \
#   sed "s/{{TASK_ID}}/T020/g" | \
#   sed "s/{{TASK_DESC}}/FastAPI endpoint/g" > \
#   tests/backend/api/test_t020_feedback.py
DEMO

chmod +x "$OUTPUT_SCRIPT"

echo -e "${GREEN}✓ Generated test structure script: $OUTPUT_SCRIPT${NC}"
echo -e "${GREEN}✓ Run it with: bash $OUTPUT_SCRIPT${NC}"
echo ""
echo -e "${BLUE}In production, the test-generator agent would:${NC}"
echo "1. Actually read and understand the tasks"
echo "2. Intelligently categorize them"
echo "3. Create optimal test organization"
echo "4. Generate all test files with proper templates"