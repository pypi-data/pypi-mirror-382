#!/bin/bash
# Template rendering and task generation
# Usage: generate-feedback-tasks.sh <session_id>

set -euo pipefail

SESSION_ID="${1:-}"

if [[ -z "$SESSION_ID" ]]; then
    echo "Usage: $0 <session_id>"
    echo "Example: $0 20250926_143022_pr123"
    exit 1
fi

SESSION_DIR=".multiagent/feedback/logs/${SESSION_ID}"

if [[ ! -d "$SESSION_DIR" ]]; then
    echo "❌ Session not found: ${SESSION_ID}"
    exit 1
fi

echo "📋 Generating feedback tasks for session: ${SESSION_ID}"

# Verify all required files exist
REQUIRED_FILES=(
    "session-metadata.json"
    "pr-details.json"
    "claude-reviews.json"
    "judge-analysis.json"
    "human-decision.json"
    "agent-analysis.json"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [[ ! -f "${SESSION_DIR}/${file}" ]]; then
        echo "❌ Required file missing: ${file}"
        exit 1
    fi
done

# Check approval status
DECISION=$(jq -r '.decision' "${SESSION_DIR}/human-decision.json")
if [[ "$DECISION" != "approved" ]]; then
    echo "❌ Cannot generate tasks: Decision is '${DECISION}' (must be 'approved')"
    exit 1
fi

# Extract data for task generation
PR_NUMBER=$(jq -r '.pr_number' "${SESSION_DIR}/session-metadata.json")
REPOSITORY=$(jq -r '.repository' "${SESSION_DIR}/session-metadata.json")
PRIMARY_AGENT=$(jq -r '.agent_attribution.recommended_assignee' "${SESSION_DIR}/agent-analysis.json")
REVIEW_CONTENT=$(jq -r '.[].body' "${SESSION_DIR}/claude-reviews.json" | head -1000)

# Generate task list using template
TEMPLATE_PATH=".multiagent-feedback/templates/feedback-tasks-template.md"

# Create task output
cat > "${SESSION_DIR}/generated-tasks.md" << EOF
# Feedback Tasks - Session ${SESSION_ID}

**Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
**PR**: #${PR_NUMBER} in ${REPOSITORY}  
**Assigned Agent**: @${PRIMARY_AGENT}  
**Session**: [${SESSION_ID}](.multiagent/feedback/logs/${SESSION_ID}/)

## Claude Code Review Summary

$(echo "$REVIEW_CONTENT" | head -20)

$(if [[ $(echo "$REVIEW_CONTENT" | wc -l) -gt 20 ]]; then echo "..."; fi)

## Action Items

### Priority 1: Immediate Actions
- [ ] **T001** @${PRIMARY_AGENT} Review Claude Code feedback in detail
- [ ] **T002** @${PRIMARY_AGENT} Address core technical concerns raised
- [ ] **T003** @${PRIMARY_AGENT} Implement suggested improvements

### Priority 2: Code Quality
- [ ] **T004** @${PRIMARY_AGENT} Update tests to cover feedback points
- [ ] **T005** @${PRIMARY_AGENT} Refactor code based on suggestions
- [ ] **T006** @${PRIMARY_AGENT} Update documentation if needed

### Priority 3: Integration
- [ ] **T007** @${PRIMARY_AGENT} Verify changes work with existing system
- [ ] **T008** @${PRIMARY_AGENT} Run full test suite
- [ ] **T009** @${PRIMARY_AGENT} Update PR based on feedback

## Quality Metrics

**Judge Analysis Score**: $(jq -r '.quality_score' "${SESSION_DIR}/judge-analysis.json")  
**Implementation Estimate**: $(jq -r '.cost_benefit_analysis.estimated_implementation_hours' "${SESSION_DIR}/judge-analysis.json") hours  
**Technical Complexity**: $(jq -r '.cost_benefit_analysis.technical_complexity' "${SESSION_DIR}/judge-analysis.json")

## Session Details

- **Session ID**: ${SESSION_ID}
- **Created**: $(jq -r '.created_at' "${SESSION_DIR}/session-metadata.json")
- **Approved**: $(jq -r '.decision_timestamp' "${SESSION_DIR}/human-decision.json")
- **Files Changed**: $(jq -r '.change_scope.total_files' "${SESSION_DIR}/agent-analysis.json")

## Next Steps

1. @${PRIMARY_AGENT} should review this task list
2. Complete Priority 1 tasks first
3. Update PR with implemented changes
4. Mark session as completed when done

---
*Generated by [MultiAgent Core Feedback System]()*
EOF

# Update session metadata
jq '.phase = "completed" | .status = "tasks-generated"' "${SESSION_DIR}/session-metadata.json" > "${SESSION_DIR}/session-metadata.tmp"
mv "${SESSION_DIR}/session-metadata.tmp" "${SESSION_DIR}/session-metadata.json"

# Create summary report
cat > "${SESSION_DIR}/session-summary.json" << EOF
{
  "session_id": "${SESSION_ID}",
  "completion_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "workflow_status": "completed",
  "pr_details": {
    "pr_number": ${PR_NUMBER},
    "repository": "${REPOSITORY}",
    "assigned_agent": "${PRIMARY_AGENT}"
  },
  "processing_results": {
    "judge_score": $(jq -r '.quality_score' "${SESSION_DIR}/judge-analysis.json"),
    "human_decision": "${DECISION}",
    "tasks_generated": 9,
    "estimated_hours": $(jq -r '.cost_benefit_analysis.estimated_implementation_hours' "${SESSION_DIR}/judge-analysis.json")
  },
  "artifacts": {
    "task_list": "generated-tasks.md",
    "session_logs": "${SESSION_DIR}/",
    "all_files": [
      $(printf '"%s",' "${REQUIRED_FILES[@]}" | sed 's/,$//')
    ]
  }
}
EOF

echo "✅ Feedback tasks generated successfully"
echo "📋 Task Count: 9 tasks assigned to @${PRIMARY_AGENT}"
echo "📂 Tasks file: ${SESSION_DIR}/generated-tasks.md"
echo "📊 Session complete: ${SESSION_DIR}/session-summary.json"
echo ""
echo "🎯 Next Steps:"
echo "   1. Review: ${SESSION_DIR}/generated-tasks.md"
echo "   2. Assign to @${PRIMARY_AGENT}"
echo "   3. Track progress in project management"