#!/usr/bin/env python3
"""
Simple PR Feedback Processing that accepts session directory as parameter

Usage: python3 pr-feedback-simple.py <session_directory>
"""

import asyncio
import json
import sys
import os
from pathlib import Path
from datetime import datetime
from claude_code_sdk import query, ClaudeCodeOptions
from claude_code_sdk.types import AssistantMessage, ResultMessage, TextBlock

async def generate_tasks_for_session(session_dir: Path):
    """Generate tasks using Claude Code SDK for the given session directory"""
    
    print(f"🤖 Generating tasks for session: {session_dir.name}")
    
    # Read existing PR data files
    pr_data_file = session_dir / "pr-data.json"
    pr_diff_file = session_dir / "pr-diff.txt"
    pr_comments_file = session_dir / "pr-comments.json"
    
    if not all([pr_data_file.exists(), pr_diff_file.exists()]):
        print("❌ Required PR data files not found")
        return False
        
    # Read the data
    with open(pr_data_file, 'r') as f:
        pr_data = json.load(f)
        
    with open(pr_diff_file, 'r') as f:
        pr_diff = f.read()
        
    pr_comments = []
    if pr_comments_file.exists():
        with open(pr_comments_file, 'r') as f:
            pr_comments = json.load(f)
    
    # Extract PR info
    pr_number = pr_data.get('number', 'N/A')
    session_id = session_dir.name
    
    # Generate comprehensive prompt for task creation
    prompt = f"""
Analyze the following GitHub PR data and generate a comprehensive task list file.

PR Information:
- Number: #{pr_number}
- Title: {pr_data.get('title', 'N/A')}
- Author: {pr_data.get('author', {}).get('login', 'N/A')}
- Head Branch: {pr_data.get('headRefName', 'N/A')}
- Base Branch: {pr_data.get('baseRefName', 'N/A')}
- State: {pr_data.get('state', 'N/A')}
- URL: {pr_data.get('url', 'N/A')}

PR Diff (changes made):
{pr_diff[:2000]}...

Comments: {len(pr_comments)} review comments found

Please create a file called `generated-tasks.md` in the directory `{session_dir}` with the following structure:

```markdown
# Feedback Tasks - Session {session_id}

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
**PR**: #{pr_number}
**Title**: {pr_data.get('title', 'N/A')}
**Author**: {pr_data.get('author', {}).get('login', 'N/A')}
**Branch**: {pr_data.get('headRefName', 'N/A')} → {pr_data.get('baseRefName', 'N/A')}
**Session**: [{session_id}](.multiagent/feedback/logs/{session_id}/)

## Claude Code Review Summary

[Analyze the PR diff and provide 3-5 key points about the changes]

## Action Items

### Priority 1: Immediate Actions
- [ ] **T001** [Specific task based on PR content]
- [ ] **T002** [Specific task based on PR content]  
- [ ] **T003** [Specific task based on PR content]

### Priority 2: Code Quality
- [ ] **T004** [Quality improvement task]
- [ ] **T005** [Testing/documentation task]
- [ ] **T006** [Refactoring task if needed]

### Priority 3: Integration
- [ ] **T007** [Integration/deployment task]
- [ ] **T008** [Verification task]
- [ ] **T009** [Follow-up task]

## Session Details
- **Session ID**: {session_id}
- **Created**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
- **Files Changed**: [Count from diff]
- **Lines Added**: [Count from diff]
- **Lines Removed**: [Count from diff]

---
*Generated by MultiAgent Core Feedback System*
```

Create this file with specific, actionable tasks based on the actual PR content and changes shown in the diff.
"""

    try:
        options = ClaudeCodeOptions(
            permission_mode='bypassPermissions',
            max_turns=3,
            allowed_tools=['Write', 'Read'],
            cwd=str(session_dir.parent.parent.parent)  # Project root
        )
        
        print("🔄 Executing task generation...")
        
        async for message in query(prompt=prompt, options=options):
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock) and len(block.text.strip()) > 0:
                        first_line = block.text.strip().split('\n')[0]
                        if len(first_line) > 100:
                            first_line = first_line[:100] + "..."
                        print(f"💬 Claude: {first_line}")
                        
            elif isinstance(message, ResultMessage):
                print(f"✅ Generation completed - Cost: ${message.total_cost_usd:.4f}")
                if message.is_error:
                    print(f"❌ Error: {message.result}")
                    return False
        
        # Verify the file was created
        tasks_file = session_dir / "generated-tasks.md"
        if tasks_file.exists():
            print(f"📝 Tasks file created: {tasks_file}")
            return True
        else:
            print("❌ Tasks file was not created")
            return False
            
    except Exception as e:
        print(f"❌ Error during task generation: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Main entry point"""
    
    if len(sys.argv) != 2:
        print("Usage: python3 pr-feedback-simple.py <session_directory>")
        print("Example: python3 pr-feedback-simple.py /path/to/.multiagent/feedback/logs/pr-8-20250926-155151")
        sys.exit(1)
    
    session_dir = Path(sys.argv[1])
    
    if not session_dir.exists():
        print(f"❌ Session directory does not exist: {session_dir}")
        sys.exit(1)
        
    if not session_dir.is_dir():
        print(f"❌ Path is not a directory: {session_dir}")
        sys.exit(1)
    
    success = await generate_tasks_for_session(session_dir)
    
    if success:
        print(f"\n🎉 Tasks generated successfully for {session_dir.name}!")
        sys.exit(0)
    else:
        print(f"\n❌ Task generation failed for {session_dir.name}!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())