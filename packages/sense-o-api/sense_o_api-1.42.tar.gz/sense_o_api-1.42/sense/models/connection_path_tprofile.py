# coding: utf-8

"""
    SENSE-O Northbound Intent API

    StackV SENSE-O Northbound REST API Documentation  # noqa: E501

    OpenAPI spec version: 2.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectionPathTprofile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inclusion_list': 'list[Path]',
        'exclusion_list': 'list[Path]'
    }

    attribute_map = {
        'inclusion_list': 'inclusion_list',
        'exclusion_list': 'exclusion_list'
    }

    def __init__(self, inclusion_list=None, exclusion_list=None):  # noqa: E501
        """ConnectionPathTprofile - a model defined in Swagger"""  # noqa: E501
        self._inclusion_list = None
        self._exclusion_list = None
        self.discriminator = None
        self.inclusion_list = inclusion_list
        self.exclusion_list = exclusion_list

    @property
    def inclusion_list(self):
        """Gets the inclusion_list of this ConnectionPathTprofile.  # noqa: E501

        List of included paths.  # noqa: E501

        :return: The inclusion_list of this ConnectionPathTprofile.  # noqa: E501
        :rtype: list[Path]
        """
        return self._inclusion_list

    @inclusion_list.setter
    def inclusion_list(self, inclusion_list):
        """Sets the inclusion_list of this ConnectionPathTprofile.

        List of included paths.  # noqa: E501

        :param inclusion_list: The inclusion_list of this ConnectionPathTprofile.  # noqa: E501
        :type: list[Path]
        """
        if inclusion_list is None:
            raise ValueError("Invalid value for `inclusion_list`, must not be `None`")  # noqa: E501

        self._inclusion_list = inclusion_list

    @property
    def exclusion_list(self):
        """Gets the exclusion_list of this ConnectionPathTprofile.  # noqa: E501

        List of excluded paths.  # noqa: E501

        :return: The exclusion_list of this ConnectionPathTprofile.  # noqa: E501
        :rtype: list[Path]
        """
        return self._exclusion_list

    @exclusion_list.setter
    def exclusion_list(self, exclusion_list):
        """Sets the exclusion_list of this ConnectionPathTprofile.

        List of excluded paths.  # noqa: E501

        :param exclusion_list: The exclusion_list of this ConnectionPathTprofile.  # noqa: E501
        :type: list[Path]
        """
        if exclusion_list is None:
            raise ValueError("Invalid value for `exclusion_list`, must not be `None`")  # noqa: E501

        self._exclusion_list = exclusion_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionPathTprofile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionPathTprofile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
