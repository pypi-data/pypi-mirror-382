# coding: utf-8

"""
    SENSE-O Northbound Intent API

    StackV SENSE-O Northbound REST API Documentation  # noqa: E501

    OpenAPI spec version: 2.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VerificationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delta_uuid': 'str',
        'creation_time': 'str',
        'verified_reduction': 'str',
        'verified_addition': 'str',
        'unverified_reduction': 'str',
        'unverified_addition': 'str',
        'reduction': 'str',
        'addition': 'str'
    }

    attribute_map = {
        'delta_uuid': 'delta_uuid',
        'creation_time': 'creation_time',
        'verified_reduction': 'verified_reduction',
        'verified_addition': 'verified_addition',
        'unverified_reduction': 'unverified_reduction',
        'unverified_addition': 'unverified_addition',
        'reduction': 'reduction',
        'addition': 'addition'
    }

    def __init__(self, delta_uuid=None, creation_time=None, verified_reduction=None, verified_addition=None, unverified_reduction=None, unverified_addition=None, reduction=None, addition=None):  # noqa: E501
        """VerificationResult - a model defined in Swagger"""  # noqa: E501
        self._delta_uuid = None
        self._creation_time = None
        self._verified_reduction = None
        self._verified_addition = None
        self._unverified_reduction = None
        self._unverified_addition = None
        self._reduction = None
        self._addition = None
        self.discriminator = None
        self.delta_uuid = delta_uuid
        self.creation_time = creation_time
        if verified_reduction is not None:
            self.verified_reduction = verified_reduction
        if verified_addition is not None:
            self.verified_addition = verified_addition
        if unverified_reduction is not None:
            self.unverified_reduction = unverified_reduction
        if unverified_addition is not None:
            self.unverified_addition = unverified_addition
        self.reduction = reduction
        self.addition = addition

    @property
    def delta_uuid(self):
        """Gets the delta_uuid of this VerificationResult.  # noqa: E501

        UUID of delta being verified.  # noqa: E501

        :return: The delta_uuid of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._delta_uuid

    @delta_uuid.setter
    def delta_uuid(self, delta_uuid):
        """Sets the delta_uuid of this VerificationResult.

        UUID of delta being verified.  # noqa: E501

        :param delta_uuid: The delta_uuid of this VerificationResult.  # noqa: E501
        :type: str
        """
        if delta_uuid is None:
            raise ValueError("Invalid value for `delta_uuid`, must not be `None`")  # noqa: E501

        self._delta_uuid = delta_uuid

    @property
    def creation_time(self):
        """Gets the creation_time of this VerificationResult.  # noqa: E501

        When this verification run started.  # noqa: E501

        :return: The creation_time of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this VerificationResult.

        When this verification run started.  # noqa: E501

        :param creation_time: The creation_time of this VerificationResult.  # noqa: E501
        :type: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def verified_reduction(self):
        """Gets the verified_reduction of this VerificationResult.  # noqa: E501

        JSON string of the verified reduction model.  # noqa: E501

        :return: The verified_reduction of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._verified_reduction

    @verified_reduction.setter
    def verified_reduction(self, verified_reduction):
        """Sets the verified_reduction of this VerificationResult.

        JSON string of the verified reduction model.  # noqa: E501

        :param verified_reduction: The verified_reduction of this VerificationResult.  # noqa: E501
        :type: str
        """

        self._verified_reduction = verified_reduction

    @property
    def verified_addition(self):
        """Gets the verified_addition of this VerificationResult.  # noqa: E501

        JSON string of the verified addition model.  # noqa: E501

        :return: The verified_addition of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._verified_addition

    @verified_addition.setter
    def verified_addition(self, verified_addition):
        """Sets the verified_addition of this VerificationResult.

        JSON string of the verified addition model.  # noqa: E501

        :param verified_addition: The verified_addition of this VerificationResult.  # noqa: E501
        :type: str
        """

        self._verified_addition = verified_addition

    @property
    def unverified_reduction(self):
        """Gets the unverified_reduction of this VerificationResult.  # noqa: E501

        JSON string of the unverified reduction model.  # noqa: E501

        :return: The unverified_reduction of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._unverified_reduction

    @unverified_reduction.setter
    def unverified_reduction(self, unverified_reduction):
        """Sets the unverified_reduction of this VerificationResult.

        JSON string of the unverified reduction model.  # noqa: E501

        :param unverified_reduction: The unverified_reduction of this VerificationResult.  # noqa: E501
        :type: str
        """

        self._unverified_reduction = unverified_reduction

    @property
    def unverified_addition(self):
        """Gets the unverified_addition of this VerificationResult.  # noqa: E501

        JSON string of the unverified addition model.  # noqa: E501

        :return: The unverified_addition of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._unverified_addition

    @unverified_addition.setter
    def unverified_addition(self, unverified_addition):
        """Sets the unverified_addition of this VerificationResult.

        JSON string of the unverified addition model.  # noqa: E501

        :param unverified_addition: The unverified_addition of this VerificationResult.  # noqa: E501
        :type: str
        """

        self._unverified_addition = unverified_addition

    @property
    def reduction(self):
        """Gets the reduction of this VerificationResult.  # noqa: E501

        String boolean of whether the reduction is present.  # noqa: E501

        :return: The reduction of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._reduction

    @reduction.setter
    def reduction(self, reduction):
        """Sets the reduction of this VerificationResult.

        String boolean of whether the reduction is present.  # noqa: E501

        :param reduction: The reduction of this VerificationResult.  # noqa: E501
        :type: str
        """
        if reduction is None:
            raise ValueError("Invalid value for `reduction`, must not be `None`")  # noqa: E501
        allowed_values = ["true", "false"]  # noqa: E501
        if reduction not in allowed_values:
            raise ValueError(
                "Invalid value for `reduction` ({0}), must be one of {1}"  # noqa: E501
                .format(reduction, allowed_values)
            )

        self._reduction = reduction

    @property
    def addition(self):
        """Gets the addition of this VerificationResult.  # noqa: E501

        String boolean of whether the addition is present.  # noqa: E501

        :return: The addition of this VerificationResult.  # noqa: E501
        :rtype: str
        """
        return self._addition

    @addition.setter
    def addition(self, addition):
        """Sets the addition of this VerificationResult.

        String boolean of whether the addition is present.  # noqa: E501

        :param addition: The addition of this VerificationResult.  # noqa: E501
        :type: str
        """
        if addition is None:
            raise ValueError("Invalid value for `addition`, must not be `None`")  # noqa: E501
        allowed_values = ["true", "false"]  # noqa: E501
        if addition not in allowed_values:
            raise ValueError(
                "Invalid value for `addition` ({0}), must be one of {1}"  # noqa: E501
                .format(addition, allowed_values)
            )

        self._addition = addition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerificationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
