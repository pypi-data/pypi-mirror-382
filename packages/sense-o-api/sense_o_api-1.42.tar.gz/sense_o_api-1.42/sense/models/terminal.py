# coding: utf-8

"""
    SENSE-O Northbound Intent API

    StackV SENSE-O Northbound REST API Documentation  # noqa: E501

    OpenAPI spec version: 2.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Terminal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'vlan_tag': 'str',
        'ipv4_prefix_list': 'str',
        'assign_ip': 'bool'
    }

    attribute_map = {
        'uri': 'uri',
        'vlan_tag': 'vlan_tag',
        'ipv4_prefix_list': 'ipv4_prefix_list',
        'assign_ip': 'assign_ip'
    }

    def __init__(self, uri=None, vlan_tag=None, ipv4_prefix_list=None, assign_ip=None):  # noqa: E501
        """Terminal - a model defined in Swagger"""  # noqa: E501
        self._uri = None
        self._vlan_tag = None
        self._ipv4_prefix_list = None
        self._assign_ip = None
        self.discriminator = None
        if uri is not None:
            self.uri = uri
        if vlan_tag is not None:
            self.vlan_tag = vlan_tag
        if ipv4_prefix_list is not None:
            self.ipv4_prefix_list = ipv4_prefix_list
        if assign_ip is not None:
            self.assign_ip = assign_ip

    @property
    def uri(self):
        """Gets the uri of this Terminal.  # noqa: E501


        :return: The uri of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Terminal.


        :param uri: The uri of this Terminal.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def vlan_tag(self):
        """Gets the vlan_tag of this Terminal.  # noqa: E501


        :return: The vlan_tag of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._vlan_tag

    @vlan_tag.setter
    def vlan_tag(self, vlan_tag):
        """Sets the vlan_tag of this Terminal.


        :param vlan_tag: The vlan_tag of this Terminal.  # noqa: E501
        :type: str
        """

        self._vlan_tag = vlan_tag

    @property
    def ipv4_prefix_list(self):
        """Gets the ipv4_prefix_list of this Terminal.  # noqa: E501


        :return: The ipv4_prefix_list of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_prefix_list

    @ipv4_prefix_list.setter
    def ipv4_prefix_list(self, ipv4_prefix_list):
        """Sets the ipv4_prefix_list of this Terminal.


        :param ipv4_prefix_list: The ipv4_prefix_list of this Terminal.  # noqa: E501
        :type: str
        """

        self._ipv4_prefix_list = ipv4_prefix_list

    @property
    def assign_ip(self):
        """Gets the assign_ip of this Terminal.  # noqa: E501


        :return: The assign_ip of this Terminal.  # noqa: E501
        :rtype: bool
        """
        return self._assign_ip

    @assign_ip.setter
    def assign_ip(self, assign_ip):
        """Sets the assign_ip of this Terminal.


        :param assign_ip: The assign_ip of this Terminal.  # noqa: E501
        :type: bool
        """

        self._assign_ip = assign_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Terminal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Terminal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
