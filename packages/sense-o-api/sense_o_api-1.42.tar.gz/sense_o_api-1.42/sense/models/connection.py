# coding: utf-8

"""
    SENSE-O Northbound Intent API

    StackV SENSE-O Northbound REST API Documentation  # noqa: E501

    OpenAPI spec version: 2.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Connection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'suggest_ip_range': 'list[ConnectionSuggestIpRange]',
        'schedule': 'ConnectionSchedule',
        'bandwidth': 'ConnectionBandwidth',
        'name': 'str',
        'terminals': 'list[ConnectionTerminals]',
        'path_tprofile': 'ConnectionPathTprofile'
    }

    attribute_map = {
        'suggest_ip_range': 'suggest_ip_range',
        'schedule': 'schedule',
        'bandwidth': 'bandwidth',
        'name': 'name',
        'terminals': 'terminals',
        'path_tprofile': 'path_tprofile'
    }

    def __init__(self, suggest_ip_range=None, schedule=None, bandwidth=None, name=None, terminals=None, path_tprofile=None):  # noqa: E501
        """Connection - a model defined in Swagger"""  # noqa: E501
        self._suggest_ip_range = None
        self._schedule = None
        self._bandwidth = None
        self._name = None
        self._terminals = None
        self._path_tprofile = None
        self.discriminator = None
        if suggest_ip_range is not None:
            self.suggest_ip_range = suggest_ip_range
        if schedule is not None:
            self.schedule = schedule
        if bandwidth is not None:
            self.bandwidth = bandwidth
        self.name = name
        self.terminals = terminals
        if path_tprofile is not None:
            self.path_tprofile = path_tprofile

    @property
    def suggest_ip_range(self):
        """Gets the suggest_ip_range of this Connection.  # noqa: E501

        List of IP Range Suggestions.  # noqa: E501

        :return: The suggest_ip_range of this Connection.  # noqa: E501
        :rtype: list[ConnectionSuggestIpRange]
        """
        return self._suggest_ip_range

    @suggest_ip_range.setter
    def suggest_ip_range(self, suggest_ip_range):
        """Sets the suggest_ip_range of this Connection.

        List of IP Range Suggestions.  # noqa: E501

        :param suggest_ip_range: The suggest_ip_range of this Connection.  # noqa: E501
        :type: list[ConnectionSuggestIpRange]
        """

        self._suggest_ip_range = suggest_ip_range

    @property
    def schedule(self):
        """Gets the schedule of this Connection.  # noqa: E501


        :return: The schedule of this Connection.  # noqa: E501
        :rtype: ConnectionSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Connection.


        :param schedule: The schedule of this Connection.  # noqa: E501
        :type: ConnectionSchedule
        """

        self._schedule = schedule

    @property
    def bandwidth(self):
        """Gets the bandwidth of this Connection.  # noqa: E501


        :return: The bandwidth of this Connection.  # noqa: E501
        :rtype: ConnectionBandwidth
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this Connection.


        :param bandwidth: The bandwidth of this Connection.  # noqa: E501
        :type: ConnectionBandwidth
        """

        self._bandwidth = bandwidth

    @property
    def name(self):
        """Gets the name of this Connection.  # noqa: E501

        Connection name, for labeling purposes.  # noqa: E501

        :return: The name of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connection.

        Connection name, for labeling purposes.  # noqa: E501

        :param name: The name of this Connection.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def terminals(self):
        """Gets the terminals of this Connection.  # noqa: E501

        The array of connection terminals.  # noqa: E501

        :return: The terminals of this Connection.  # noqa: E501
        :rtype: list[ConnectionTerminals]
        """
        return self._terminals

    @terminals.setter
    def terminals(self, terminals):
        """Sets the terminals of this Connection.

        The array of connection terminals.  # noqa: E501

        :param terminals: The terminals of this Connection.  # noqa: E501
        :type: list[ConnectionTerminals]
        """
        if terminals is None:
            raise ValueError("Invalid value for `terminals`, must not be `None`")  # noqa: E501

        self._terminals = terminals

    @property
    def path_tprofile(self):
        """Gets the path_tprofile of this Connection.  # noqa: E501


        :return: The path_tprofile of this Connection.  # noqa: E501
        :rtype: ConnectionPathTprofile
        """
        return self._path_tprofile

    @path_tprofile.setter
    def path_tprofile(self, path_tprofile):
        """Sets the path_tprofile of this Connection.


        :param path_tprofile: The path_tprofile of this Connection.  # noqa: E501
        :type: ConnectionPathTprofile
        """

        self._path_tprofile = path_tprofile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Connection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
