# coding: utf-8

"""
    SENSE-O Northbound Intent API

    StackV SENSE-O Northbound REST API Documentation  # noqa: E501

    OpenAPI spec version: 2.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainDescriptionEdgePoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stp': 'Terminal',
        'capailities': 'list[CapabilityDescription]',
        'peer_uri': 'str',
        'peer_name': 'str'
    }

    attribute_map = {
        'stp': 'stp',
        'capailities': 'capailities',
        'peer_uri': 'peer_uri',
        'peer_name': 'peer_name'
    }

    def __init__(self, stp=None, capailities=None, peer_uri=None, peer_name=None):  # noqa: E501
        """DomainDescriptionEdgePoints - a model defined in Swagger"""  # noqa: E501
        self._stp = None
        self._capailities = None
        self._peer_uri = None
        self._peer_name = None
        self.discriminator = None
        if stp is not None:
            self.stp = stp
        if capailities is not None:
            self.capailities = capailities
        if peer_uri is not None:
            self.peer_uri = peer_uri
        if peer_name is not None:
            self.peer_name = peer_name

    @property
    def stp(self):
        """Gets the stp of this DomainDescriptionEdgePoints.  # noqa: E501


        :return: The stp of this DomainDescriptionEdgePoints.  # noqa: E501
        :rtype: Terminal
        """
        return self._stp

    @stp.setter
    def stp(self, stp):
        """Sets the stp of this DomainDescriptionEdgePoints.


        :param stp: The stp of this DomainDescriptionEdgePoints.  # noqa: E501
        :type: Terminal
        """

        self._stp = stp

    @property
    def capailities(self):
        """Gets the capailities of this DomainDescriptionEdgePoints.  # noqa: E501


        :return: The capailities of this DomainDescriptionEdgePoints.  # noqa: E501
        :rtype: list[CapabilityDescription]
        """
        return self._capailities

    @capailities.setter
    def capailities(self, capailities):
        """Sets the capailities of this DomainDescriptionEdgePoints.


        :param capailities: The capailities of this DomainDescriptionEdgePoints.  # noqa: E501
        :type: list[CapabilityDescription]
        """

        self._capailities = capailities

    @property
    def peer_uri(self):
        """Gets the peer_uri of this DomainDescriptionEdgePoints.  # noqa: E501


        :return: The peer_uri of this DomainDescriptionEdgePoints.  # noqa: E501
        :rtype: str
        """
        return self._peer_uri

    @peer_uri.setter
    def peer_uri(self, peer_uri):
        """Sets the peer_uri of this DomainDescriptionEdgePoints.


        :param peer_uri: The peer_uri of this DomainDescriptionEdgePoints.  # noqa: E501
        :type: str
        """

        self._peer_uri = peer_uri

    @property
    def peer_name(self):
        """Gets the peer_name of this DomainDescriptionEdgePoints.  # noqa: E501


        :return: The peer_name of this DomainDescriptionEdgePoints.  # noqa: E501
        :rtype: str
        """
        return self._peer_name

    @peer_name.setter
    def peer_name(self, peer_name):
        """Sets the peer_name of this DomainDescriptionEdgePoints.


        :param peer_name: The peer_name of this DomainDescriptionEdgePoints.  # noqa: E501
        :type: str
        """

        self._peer_name = peer_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainDescriptionEdgePoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainDescriptionEdgePoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
