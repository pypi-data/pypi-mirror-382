# coding: utf-8

"""
    SENSE-O Northbound Intent API

    StackV SENSE-O Northbound REST API Documentation  # noqa: E501

    OpenAPI spec version: 2.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Intent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'service_instance_uuid': 'str',
        'service_delta_uuid': 'str',
        'provisioned': 'bool',
        'json': 'str',
        'creation_time': 'str'
    }

    attribute_map = {
        'id': 'id',
        'service_instance_uuid': 'serviceInstanceUUID',
        'service_delta_uuid': 'serviceDeltaUUID',
        'provisioned': 'provisioned',
        'json': 'json',
        'creation_time': 'creation_time'
    }

    def __init__(self, id=None, service_instance_uuid=None, service_delta_uuid=None, provisioned=None, json=None, creation_time=None):  # noqa: E501
        """Intent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._service_instance_uuid = None
        self._service_delta_uuid = None
        self._provisioned = None
        self._json = None
        self._creation_time = None
        self.discriminator = None
        self.id = id
        self.service_instance_uuid = service_instance_uuid
        self.service_delta_uuid = service_delta_uuid
        self.provisioned = provisioned
        self.json = json
        if creation_time is not None:
            self.creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this Intent.  # noqa: E501

        Service intent UUID.  # noqa: E501

        :return: The id of this Intent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Intent.

        Service intent UUID.  # noqa: E501

        :param id: The id of this Intent.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def service_instance_uuid(self):
        """Gets the service_instance_uuid of this Intent.  # noqa: E501

        UUID for associated service instance.  # noqa: E501

        :return: The service_instance_uuid of this Intent.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_uuid

    @service_instance_uuid.setter
    def service_instance_uuid(self, service_instance_uuid):
        """Sets the service_instance_uuid of this Intent.

        UUID for associated service instance.  # noqa: E501

        :param service_instance_uuid: The service_instance_uuid of this Intent.  # noqa: E501
        :type: str
        """
        if service_instance_uuid is None:
            raise ValueError("Invalid value for `service_instance_uuid`, must not be `None`")  # noqa: E501

        self._service_instance_uuid = service_instance_uuid

    @property
    def service_delta_uuid(self):
        """Gets the service_delta_uuid of this Intent.  # noqa: E501

        UUID for associated service delta.  # noqa: E501

        :return: The service_delta_uuid of this Intent.  # noqa: E501
        :rtype: str
        """
        return self._service_delta_uuid

    @service_delta_uuid.setter
    def service_delta_uuid(self, service_delta_uuid):
        """Sets the service_delta_uuid of this Intent.

        UUID for associated service delta.  # noqa: E501

        :param service_delta_uuid: The service_delta_uuid of this Intent.  # noqa: E501
        :type: str
        """
        if service_delta_uuid is None:
            raise ValueError("Invalid value for `service_delta_uuid`, must not be `None`")  # noqa: E501

        self._service_delta_uuid = service_delta_uuid

    @property
    def provisioned(self):
        """Gets the provisioned of this Intent.  # noqa: E501

        Whether or not the intent was or is successfully provisioned.  # noqa: E501

        :return: The provisioned of this Intent.  # noqa: E501
        :rtype: bool
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this Intent.

        Whether or not the intent was or is successfully provisioned.  # noqa: E501

        :param provisioned: The provisioned of this Intent.  # noqa: E501
        :type: bool
        """
        if provisioned is None:
            raise ValueError("Invalid value for `provisioned`, must not be `None`")  # noqa: E501

        self._provisioned = provisioned

    @property
    def json(self):
        """Gets the json of this Intent.  # noqa: E501

        The service intent itself, in JSON string format.  # noqa: E501

        :return: The json of this Intent.  # noqa: E501
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this Intent.

        The service intent itself, in JSON string format.  # noqa: E501

        :param json: The json of this Intent.  # noqa: E501
        :type: str
        """
        if json is None:
            raise ValueError("Invalid value for `json`, must not be `None`")  # noqa: E501

        self._json = json

    @property
    def creation_time(self):
        """Gets the creation_time of this Intent.  # noqa: E501

        SQL Timestamp for intent creation.  # noqa: E501

        :return: The creation_time of this Intent.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Intent.

        SQL Timestamp for intent creation.  # noqa: E501

        :param creation_time: The creation_time of this Intent.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Intent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Intent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
