# coding: utf-8

"""
    SENSE-O Northbound Intent API

    StackV SENSE-O Northbound REST API Documentation  # noqa: E501

    OpenAPI spec version: 2.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceIntentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_uuid': 'str',
        'intent_uuid': 'str',
        'queries': 'list[ServiceIntentQueries]',
        'model': 'str'
    }

    attribute_map = {
        'service_uuid': 'service_uuid',
        'intent_uuid': 'intent_uuid',
        'queries': 'queries',
        'model': 'model'
    }

    def __init__(self, service_uuid=None, intent_uuid=None, queries=None, model=None):  # noqa: E501
        """ServiceIntentResponse - a model defined in Swagger"""  # noqa: E501
        self._service_uuid = None
        self._intent_uuid = None
        self._queries = None
        self._model = None
        self.discriminator = None
        self.service_uuid = service_uuid
        self.intent_uuid = intent_uuid
        if queries is not None:
            self.queries = queries
        if model is not None:
            self.model = model

    @property
    def service_uuid(self):
        """Gets the service_uuid of this ServiceIntentResponse.  # noqa: E501


        :return: The service_uuid of this ServiceIntentResponse.  # noqa: E501
        :rtype: str
        """
        return self._service_uuid

    @service_uuid.setter
    def service_uuid(self, service_uuid):
        """Sets the service_uuid of this ServiceIntentResponse.


        :param service_uuid: The service_uuid of this ServiceIntentResponse.  # noqa: E501
        :type: str
        """
        if service_uuid is None:
            raise ValueError("Invalid value for `service_uuid`, must not be `None`")  # noqa: E501

        self._service_uuid = service_uuid

    @property
    def intent_uuid(self):
        """Gets the intent_uuid of this ServiceIntentResponse.  # noqa: E501


        :return: The intent_uuid of this ServiceIntentResponse.  # noqa: E501
        :rtype: str
        """
        return self._intent_uuid

    @intent_uuid.setter
    def intent_uuid(self, intent_uuid):
        """Sets the intent_uuid of this ServiceIntentResponse.


        :param intent_uuid: The intent_uuid of this ServiceIntentResponse.  # noqa: E501
        :type: str
        """
        if intent_uuid is None:
            raise ValueError("Invalid value for `intent_uuid`, must not be `None`")  # noqa: E501

        self._intent_uuid = intent_uuid

    @property
    def queries(self):
        """Gets the queries of this ServiceIntentResponse.  # noqa: E501


        :return: The queries of this ServiceIntentResponse.  # noqa: E501
        :rtype: list[ServiceIntentQueries]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this ServiceIntentResponse.


        :param queries: The queries of this ServiceIntentResponse.  # noqa: E501
        :type: list[ServiceIntentQueries]
        """

        self._queries = queries

    @property
    def model(self):
        """Gets the model of this ServiceIntentResponse.  # noqa: E501


        :return: The model of this ServiceIntentResponse.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ServiceIntentResponse.


        :param model: The model of this ServiceIntentResponse.  # noqa: E501
        :type: str
        """

        self._model = model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceIntentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceIntentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
