"""
BuzuAI Service - Service ƒë·ªÉ t√≠ch h·ª£p v·ªõi BuzuAI chatbot
S·ª≠ d·ª•ng SocketIO ƒë·ªÉ g·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ AI
"""

import socketio
import logging
import time
from typing import Optional, Dict, Any
from threading import Event

logger = logging.getLogger(__name__)


class BuzuAIClient:
    """
    Client ƒë·ªÉ k·∫øt n·ªëi v√† giao ti·∫øp v·ªõi BuzuAI chatbot
    S·ª≠ d·ª•ng singleton pattern ƒë·ªÉ t√°i s·ª≠ d·ª•ng k·∫øt n·ªëi
    """
    
    # Bot ID m·∫∑c ƒë·ªãnh t·ª´ h·ªá th·ªëng BuzuAI
    DEFAULT_BOT_ID = "4489b201-a08a-4d87-81e1-632bcbdb44a8"
    BUZUAI_URL = "https://api.buzuai.com/app-chat"
    NAMESPACE = "/app-chat"
    
    # Timeout cho vi·ªác ch·ªù ph·∫£n h·ªìi t·ª´ AI (seconds)
    RESPONSE_TIMEOUT = 300
    
    def __init__(self):
        self.sio = None
        self.response_data = None
        self.response_event = None
        self.is_connected = False
        self.session_id = None
        self.join_room_event = None
        
    def _create_client(self):
        """T·∫°o m·ªõi socket client v·ªõi handlers"""
        sio = socketio.Client(logger=False, engineio_logger=False)
        
        @sio.event(namespace=self.NAMESPACE)
        def connect():
            self.is_connected = True
            logger.info(f"‚úÖ Connected to BuzuAI: {sio.sid}")
        
        @sio.on("receiveMessage", namespace=self.NAMESPACE)
        def receive_message(data):
            """Nh·∫≠n ph·∫£n h·ªìi t·ª´ AI"""
            logger.info(f"üí¨ Received AI response: {data}")
            self.response_data = data
            if self.response_event:
                self.response_event.set()
        
        @sio.on("receiveNotification", namespace=self.NAMESPACE)
        def receive_notification(data):
            """Nh·∫≠n th√¥ng b√°o t·ª´ AI - bao g·ªìm sessionId khi join room"""
            logger.info(f"üîî Notification from AI: {data}")
            
            # Ki·ªÉm tra n·∫øu c√≥ sessionId trong notification (khi join room)
            if "sessionId" in data and not self.session_id:
                self.session_id = data.get("sessionId")
                logger.info(f"‚úÖ Received sessionId from notification: {self.session_id}")
                if self.join_room_event:
                    self.join_room_event.set()
        
        @sio.on("joinedRoom", namespace=self.NAMESPACE)
        def joined_room(data):
            """Nh·∫≠n sessionId sau khi join room th√†nh c√¥ng (backup handler)"""
            logger.info(f"‚úÖ Joined room successfully: {data}")
            if "sessionId" in data:
                self.session_id = data.get("sessionId")
                if self.join_room_event:
                    self.join_room_event.set()
        
        @sio.event(namespace=self.NAMESPACE)
        def disconnect():
            self.is_connected = False
            logger.info("‚ùå Disconnected from BuzuAI")
        
        return sio
    
    def connect(self) -> bool:
        """
        K·∫øt n·ªëi ƒë·∫øn BuzuAI server
        Returns: True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        """
        try:
            if self.sio and self.is_connected:
                return True
            
            self.sio = self._create_client()
            self.sio.connect(
                self.BUZUAI_URL,
                namespaces=[self.NAMESPACE],
                transports=["websocket"]
            )
            
            # ƒê·ª£i k·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p
            timeout = 5
            start_time = time.time()
            while not self.is_connected and (time.time() - start_time) < timeout:
                time.sleep(0.1)
            
            return self.is_connected
            
        except Exception as e:
            logger.error(f"Error connecting to BuzuAI: {str(e)}")
            return False
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        try:
            if self.sio and self.is_connected:
                self.sio.disconnect()
                self.is_connected = False
                self.session_id = None
        except Exception as e:
            logger.error(f"Error disconnecting from BuzuAI: {str(e)}")
    
    def join_room(self, visitor_id: str, bot_id: Optional[str] = None) -> bool:
        """
        Join v√†o room chat v·ªõi bot v√† ch·ªù nh·∫≠n sessionId
        
        Args:
            visitor_id: ID c·ªßa user trong h·ªá th·ªëng (userId)
            bot_id: ID c·ªßa bot, m·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng DEFAULT_BOT_ID
        
        Returns: True n·∫øu join th√†nh c√¥ng v√† nh·∫≠n ƒë∆∞·ª£c sessionId
        """
        try:
            if not self.is_connected:
                if not self.connect():
                    return False
            
            # N·∫øu ƒë√£ c√≥ sessionId, kh√¥ng c·∫ßn join l·∫°i
            if self.session_id:
                logger.info(f"‚úÖ Already in room with sessionId={self.session_id}")
                return True
            
            bot_id = bot_id or self.DEFAULT_BOT_ID
            
            # Reset session_id v√† t·∫°o event ƒë·ªÉ ch·ªù
            self.session_id = None
            self.join_room_event = Event()
            
            # Emit joinRoom
            self.sio.emit("joinRoom", {
                "visitorId": visitor_id,
                "botId": bot_id
            }, namespace=self.NAMESPACE)
            
            logger.info(f"üì§ Joining room with visitorId={visitor_id}, botId={bot_id}")
            
            # Ch·ªù nh·∫≠n sessionId (timeout 10s)
            joined = self.join_room_event.wait(timeout=10)
            
            if joined and self.session_id:
                logger.info(f"‚úÖ Joined room successfully with sessionId={self.session_id}")
                return True
            else:
                logger.warning(f"‚è∞ Timeout waiting for joinRoom confirmation")
                return False
            
        except Exception as e:
            logger.error(f"Error joining room: {str(e)}")
            return False
        finally:
            self.join_room_event = None
    
    def send_message(self, visitor_id: str, text: str, language_code: str = "vi") -> Optional[Dict[str, Any]]:
        """
        G·ª≠i tin nh·∫Øn ƒë·∫øn AI v√† ch·ªù ph·∫£n h·ªìi
        
        Args:
            visitor_id: ID c·ªßa user trong h·ªá th·ªëng
            text: N·ªôi dung tin nh·∫Øn
            language_code: M√£ ng√¥n ng·ªØ (vi/en)
        
        Returns: Dict ch·ª©a response t·ª´ AI ho·∫∑c None n·∫øu c√≥ l·ªói
        """
        try:
            # ƒê·∫£m b·∫£o ƒë√£ k·∫øt n·ªëi v√† join room
            if not self.is_connected:
                if not self.connect():
                    return None
            
            # Join room v√† ƒë·ª£i nh·∫≠n sessionId tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn
            if not self.join_room(visitor_id):
                logger.error("Cannot send message: Failed to join room or get sessionId")
                return None
            
            # Ki·ªÉm tra sessionId tr∆∞·ªõc khi g·ª≠i
            if not self.session_id:
                logger.error("Cannot send message: No sessionId available")
                return None
            
            # Reset response data v√† event
            self.response_data = None
            self.response_event = Event()
            
            # G·ª≠i tin nh·∫Øn v·ªõi sessionId
            self.sio.emit("sendMessageToAI", {
                "visitorId": visitor_id,
                "text": text,
                "languageCode": language_code,
                "sessionId": self.session_id
            }, namespace=self.NAMESPACE)
            
            logger.info(f"üì§ Sent message to AI: visitorId={visitor_id}, text={text}")
            
            # Ch·ªù response t·ª´ AI
            received = self.response_event.wait(timeout=self.RESPONSE_TIMEOUT)
            
            if received and self.response_data:
                logger.info(f"‚úÖ Received AI response successfully")
                return self.response_data
            else:
                logger.warning(f"‚è∞ Timeout waiting for AI response")
                return None
                
        except Exception as e:
            logger.error(f"Error sending message to AI: {str(e)}")
            return None
        finally:
            self.response_event = None


# Singleton instance
_buzuai_client = None


def get_buzuai_client() -> BuzuAIClient:
    """
    L·∫•y singleton instance c·ªßa BuzuAI client
    """
    global _buzuai_client
    if _buzuai_client is None:
        _buzuai_client = BuzuAIClient()
    return _buzuai_client


def send_message_to_buzuai(user_id: str, message_text: str, language_code: str = "vi") -> Optional[Dict[str, Any]]:
    """
    Helper function ƒë·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn BuzuAI
    
    Args:
        user_id: ID c·ªßa user trong h·ªá th·ªëng
        message_text: N·ªôi dung tin nh·∫Øn
        language_code: M√£ ng√¥n ng·ªØ (vi/en)
    
    Returns: Dict ch·ª©a response t·ª´ AI ho·∫∑c None n·∫øu c√≥ l·ªói
    """
    try:
        client = get_buzuai_client()
        response = client.send_message(user_id, message_text, language_code)
        return response
    except Exception as e:
        logger.error(f"Error in send_message_to_buzuai: {str(e)}")
        return None
