Metadata-Version: 2.4
Name: ide-context-porter
Version: 0.1.0
Summary: Universal CLI tool to import, export, and convert AI project instructions between IDEs
Author-email: IDE Context Porter Contributors <davidjmorgan26@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/djmorgan26/IDE-Context-Converter
Project-URL: Repository, https://github.com/djmorgan26/IDE-Context-Converter
Project-URL: Issues, https://github.com/djmorgan26/IDE-Context-Converter/issues
Keywords: ide,ai,context,cursor,vscode,claude,windsurf,continue
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: rich>=13.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: types-PyYAML>=6.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Requires-Dist: build>=1.0.0; extra == "dev"
Dynamic: license-file

# IDE Context Porter

**Move your project's AI prompts and context between IDEs safely and reproducibly.**

[![CI](https://github.com/djmorgan26/IDE-Context-Converter/workflows/CI/badge.svg)](https://github.com/djmorgan26/IDE-Context-Converter/actions)
[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## üéØ What It Does

IDE Context Porter is a universal CLI tool that imports, exports, and converts AI project instructions ("context") between different IDEs and AI coding environments. It enables seamless migration of your project prompts and rules between tools like:

- **Cursor** (`.cursorrules`, `.cursorignore`)
- **VS Code** (`.vscode/AI_RULES.md`, `.vscode/AI_CONTEXT.md`)
- **Continue.dev** (`.continue/config.json`)
- **Claude Code** (manual import via generated instructions)
- **Windsurf** (`.windsurf/config.yaml`)
- **Future IDEs** (extensible adapter system)

## üöÄ Quick Start

### Installation

```bash
# Using pipx (recommended)
pipx install ide-context-porter

# Using pip
pip install ide-context-porter

# From source
git clone https://github.com/djmorgan26/IDE-Context-Converter.git
cd IDE-Context-Converter
pip install -e .
```

### Basic Usage

```bash
# Initialize canonical context structure
ide-context-porter init

# Import from Cursor to canonical format
ide-context-porter import --from cursor

# Export to VS Code
ide-context-porter export --to vscode

# Convert directly from Cursor to VS Code
ide-context-porter convert --from cursor --to vscode

# Detect which IDEs are present
ide-context-porter detect

# Validate your canonical context
ide-context-porter validate
```

## üìÅ Canonical Folder Structure

IDE Context Porter maintains a single source of truth in your project:

```
ai/context/
‚îú‚îÄ‚îÄ rules.md              # Main AI project prompts/instructions
‚îú‚îÄ‚îÄ context.md            # Optional architectural/domain notes
‚îú‚îÄ‚îÄ ignore.txt            # Glob-like ignore patterns for noisy files
‚îú‚îÄ‚îÄ extensions.json       # Optional list of recommended IDE extensions
‚îî‚îÄ‚îÄ manifest.yaml         # Metadata (version, last_updated, adapters used)
```

This canonical structure is the authoritative representation of your project's AI context.

## üß© Supported IDEs

| IDE / Tool | File Formats | Import | Export | Notes |
|------------|--------------|--------|--------|-------|
| **Cursor** | `.cursorrules`, `.cursorignore` | ‚úÖ | ‚úÖ | Full bidirectional support |
| **VS Code** | `.vscode/AI_RULES.md`, `.vscode/AI_CONTEXT.md` | ‚úÖ | ‚úÖ | Safe augmentation of settings |
| **Continue** | `.continue/config.json` | ‚úÖ | ‚úÖ | Adds projectPrompts entry |
| **Claude Code** | `.claude/` | ‚ö†Ô∏è | ‚úÖ | Generates `CLAUDE_IMPORT.md` for manual paste |
| **Windsurf** | `.windsurf/config.yaml` | ‚úÖ | ‚úÖ | AI rule mappings |

## üìñ Detailed Usage

### Initialize a New Project

```bash
# Create canonical structure in current directory
ide-context-porter init

# Create in specific directory
ide-context-porter init /path/to/project
```

This creates the `ai/context/` directory with starter templates.

### Import from IDE

```bash
# Import from Cursor
ide-context-porter import --from cursor

# Import with custom path
ide-context-porter import --from vscode --path /path/to/project

# Preview without making changes
ide-context-porter import --from cursor --dry-run

# Force overwrite without backups
ide-context-porter import --from cursor --force
```

### Export to IDE

```bash
# Export to VS Code
ide-context-porter export --to vscode

# Export to multiple IDEs
ide-context-porter export --to cursor
ide-context-porter export --to vscode
ide-context-porter export --to continue

# Preview changes
ide-context-porter export --to cursor --dry-run
```

### Convert Between IDEs

```bash
# One-step conversion
ide-context-porter convert --from cursor --to vscode

# With options
ide-context-porter convert --from cursor --to windsurf --path . --dry-run
```

### Detect IDE Artifacts

```bash
# Detect in current directory
ide-context-porter detect

# JSON output for scripting
ide-context-porter detect --json
```

Output:
```json
{
  "project_path": "/path/to/project",
  "detections": {
    "cursor": true,
    "vscode": true,
    "continue": false,
    "claude": false,
    "windsurf": false
  }
}
```

### Validate Canonical Context

```bash
# Validate current project
ide-context-porter validate

# Validate specific project
ide-context-porter validate /path/to/project

# JSON output
ide-context-porter validate --json
```

## üõ°Ô∏è Safety Features

### Non-Destructive by Default

- **Automatic Backups**: Creates timestamped `.bak` files before overwriting
- **Dry-Run Mode**: Preview all operations with `--dry-run`
- **Force Mode**: Skip backups with `--force` (use with caution)

### Security

- **Ignores Sensitive Files**: Never touches `.env`, `.git`, credentials, etc.
- **Offline-First**: No network calls or telemetry
- **Cross-Platform**: Works on Windows, macOS, and Linux

### Idempotent Operations

Re-running commands without changes is a no-op. Safe to run multiple times.

## üîß Global Flags

| Flag | Description |
|------|-------------|
| `--dry-run` | Preview operations without making changes |
| `--force` | Overwrite existing files, skip backups |
| `--json` | Output structured JSON (for `detect` and `validate`) |
| `--path PATH` | Specify project path (defaults to current directory) |

## üìù Examples

### Scenario 1: Migrating from Cursor to VS Code

```bash
# You have .cursorrules in your project
cd my-project

# Convert to VS Code format
ide-context-porter convert --from cursor --to vscode

# Result: .vscode/AI_RULES.md created with your rules
```

### Scenario 2: Centralizing AI Context

```bash
# You have rules scattered across different IDE configs
cd my-project

# Import from current IDE
ide-context-porter import --from cursor

# Now edit the canonical version
vim ai/context/rules.md

# Export to all your IDEs
ide-context-porter export --to cursor
ide-context-porter export --to vscode
ide-context-porter export --to continue
```

### Scenario 3: Team Collaboration

```bash
# Commit ai/context/ to version control
git add ai/context/
git commit -m "Add canonical AI context"

# Team members can export to their preferred IDE
ide-context-porter export --to cursor  # Alice uses Cursor
ide-context-porter export --to vscode  # Bob uses VS Code
```

## üß™ Development

### Setup

```bash
# Clone repository
git clone https://github.com/djmorgan26/IDE-Context-Converter.git
cd IDE-Context-Converter

# Install with dev dependencies
pip install -e ".[dev]"

# Install pre-commit hooks
pre-commit install
```

### Running Tests

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=ideporter

# Run specific test file
pytest tests/test_adapters.py

# Run with verbose output
pytest -v
```

### Code Quality

```bash
# Format code
make format

# Run linters
make lint

# Run all checks
make test lint
```

## üèóÔ∏è Architecture

### Adapter System

Each IDE has its own adapter implementing the `BaseAdapter` interface:

```python
class BaseAdapter(ABC):
    @abstractmethod
    def detect(self) -> bool:
        """Detect if IDE artifacts exist"""
        
    @abstractmethod
    def import_context(self, canonical_dir: Path, force: bool, dry_run: bool) -> None:
        """Import from IDE to canonical format"""
        
    @abstractmethod
    def export_context(self, canonical_dir: Path, force: bool, dry_run: bool) -> None:
        """Export from canonical to IDE format"""
```

### Adding New Adapters

1. Create `ideporter/adapters/your_ide.py`
2. Implement `BaseAdapter` interface
3. Register in `ideporter/adapters/__init__.py`
4. Add tests in `tests/test_adapters.py`

## ‚ö†Ô∏è Known Limitations

### Claude Code

Claude uses an opaque internal format. The tool generates `CLAUDE_IMPORT.md` with instructions for manual import. Full automation is not currently possible.

### Windsurf

Support is based on assumed configuration format. May need updates as Windsurf evolves.

## üó∫Ô∏è Roadmap

- [ ] Plugin discovery system for community adapters
- [ ] Support for Zed, Aider, Sourcegraph Cody
- [ ] JSON Schema validation for `manifest.yaml`
- [ ] Local caching of adapter metadata
- [ ] Web UI for visual context management
- [ ] Git hooks for automatic sync
- [ ] Template library for common project types

## ü§ù Contributing

Contributions are welcome! Please:

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes with tests
4. Run `make test lint` to verify
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- Built with [Typer](https://typer.tiangolo.com/) for the CLI
- Inspired by the need for portable AI context across IDEs
- Thanks to all contributors and early adopters

## üì¨ Support

- **Issues**: [GitHub Issues](https://github.com/djmorgan26/IDE-Context-Converter/issues)
- **Discussions**: [GitHub Discussions](https://github.com/djmorgan26/IDE-Context-Converter/discussions)

---

**Made with ‚ù§Ô∏è for the AI-assisted development community**
