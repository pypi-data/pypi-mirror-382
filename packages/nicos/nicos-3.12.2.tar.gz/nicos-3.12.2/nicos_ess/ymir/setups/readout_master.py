description = 'The Read-out Master Module (RMM).'

pv_root = 'YMIR-Det1:NDet-RMM-001:'

devices = dict(
    rmm_temperature=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The temperature of the hottest FPGA temperature sensor',
        readpv='{}Temperature-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_temperature_peak=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The peak temperature of the FPGA',
        readpv='{}TempPeak-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_vccint=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The VCCINT sensor voltage',
        readpv='{}VCCINT-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_vcc1v8=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The VCC1V8 sensor voltage',
        readpv='{}VCC1V8-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_vadj1v8=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The VADJ1V8 sensor voltage',
        readpv='{}VADJ1V8-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_vccintiobram=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The VCCINTIOBRAM sensor voltage',
        readpv='{}VCCINTIOBRAM-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_vcc1v2=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The VCC1V2 sensor voltage',
        readpv='{}VCC1V2-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_mgtavcc=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The MGTAVCC sensor voltage',
        readpv='{}MGTAVCC-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_mgtavtt=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The MGTAVTT sensor voltage',
        readpv='{}MGTAVTT-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_sync_pulse_freq=device(
        'nicos.devices.epics.pva.EpicsReadable',
        description='The sync pulse frequency',
        readpv='{}SyncPulseFreq-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_status=device(
        'nicos.devices.epics.pva.EpicsMappedReadable',
        description='The embedded EVR status',
        readpv='{}MRFStatus-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_timing_mode=device(
        'nicos.devices.epics.pva.EpicsStringReadable',
        description='The RMM timing mode',
        readpv='{}TimingMode-R'.format(pv_root),
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_ttl_freq=device(
        'nicos.devices.epics.pva.EpicsAnalogMoveable',
        description='The ttl frequency',
        readpv='YMIR-ChpSy1:Chop-Drv-na02:Frq-S',
        writepv='YMIR-ChpSy1:Chop-Drv-na02:Frq-S',
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
    rmm_ttl_delay=device(
        'nicos.devices.epics.pva.EpicsAnalogMoveable',
        description='The ttl frequency',
        readpv='YMIR-ChpSy1:Chop-Drv-na02:BeamPosDly-S',
        writepv='YMIR-ChpSy1:Chop-Drv-na02:BeamPosDly-S',
        pva=True,
        monitor=True,
        pollinterval=0.5,
        maxage=None,
    ),
)
