description = 'Devices for the detectors'

pvprefix = 'SQ:SANS-LLB:rack14:'
countprefix = 'SQ:SANS-LLB:counter'

sysconfig = dict(datasinks = ['jbi_liveview'])

devices = dict(
    dthx = device('nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor',
        epicstimeout = 3.0,
        description = 'Detector x translation',
        motorpv = pvprefix + 'dthx',
        errormsgpv = pvprefix + 'dthx-MsgTxt',
        precision = 0.01,
    ),
    dthz = device('nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor',
        epicstimeout = 3.0,
        description = 'Detector z translation',
        motorpv = pvprefix + 'dthz',
        errormsgpv = pvprefix + 'dthz-MsgTxt',
        precision = 0.01,
    ),
    dtlx = device('nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor',
        epicstimeout = 3.0,
        description = 'Low Q detector x translation',
        motorpv = pvprefix + 'dtlx',
        errormsgpv = pvprefix + 'dtlx-MsgTxt',
        precision = 0.01,
    ),
    dtlz = device('nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor',
        epicstimeout = 3.0,
        description = 'Low Q detector z translation',
        motorpv = pvprefix + 'dtlz',
        errormsgpv = pvprefix + 'dtlz-MsgTxt',
        precision = 0.01,
    ),
    crashcontrol = device('nicos_sinq.sans-llb.devices.detectorcontroller.DetectorController',
        description = 'Controller preventing detector crashing into the rail',
        x = 'dtlx',
        z = 'dtlz',
        xthreshold = 20,
        zthreshold = 350,
        visibility = (),
    ),
    bsx = device('nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor',
        epicstimeout = 3.0,
        description = 'Beamstop x translation',
        motorpv = pvprefix + 'bsx',
        errormsgpv = pvprefix + 'bsx-MsgTxt',
        precision = 0.01,
    ),
    bsy = device('nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor',
        epicstimeout = 3.0,
        description = 'Beamstop y translation',
        motorpv = pvprefix + 'bsy',
        errormsgpv = pvprefix + 'bsy-MsgTxt',
        precision = 0.01,
    ),
    timepreset = device('nicos_sinq.devices.epics.detector.EpicsTimerActiveChannel',
        epicstimeout = 3.0,
        description = 'Used to set and view time preset',
        unit = 'sec',
        readpv = countprefix + '.TP',
        presetpv = countprefix + '.TP',
    ),
    elapsedtime = device('nicos_sinq.devices.epics.detector.EpicsTimerPassiveChannel',
        epicstimeout = 3.0,
        description = 'Used to view elapsed time while counting',
        unit = 'sec',
        readpv = countprefix + '.T',
    ),
    monitorpreset = device('nicos_sinq.devices.epics.detector.EpicsCounterActiveChannel',
        epicstimeout = 3.0,
        description = 'Used to set and view monitor preset',
        type = 'monitor',
        readpv = countprefix + '.PR2',
        presetpv = countprefix + '.PR2',
    ),
    monitor1 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'First scalar counter channel',
        type = 'monitor',
        readpv = countprefix + '.S2',
    ),
    monitor2 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Second scalar counter channel',
        type = 'monitor',
        readpv = countprefix + '.S3',
    ),
    c3 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Third scalar counter channel',
        type = 'monitor',
        visibility = (),
        readpv = countprefix + '.S4',
    ),
    protoncount = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Fourth scalar counter channel',
        type = 'monitor',
        readpv = countprefix + '.S5',
    ),
    det_image = device('nicos_sinq.devices.just_bin_it.JustBinItImage',
        description = 'Detector image channel',
        hist_topic = configdata('config.JUST_BIN_IT_HISTOGRAMS_TOPIC'),
        data_topic = configdata('config.JUST_BIN_IT_DATA_TOPIC'),
        command_topic = configdata('config.JUST_BIN_IT_COMMANDS_TOPIC'),
        brokers = configdata('config.KAFKA_BROKERS'),
        unit = 'evts',
        hist_type = '2-D SANSLLB',
        det_width = 512,
        det_height = 160,
        det_range = (0, 160 * 512),
    ),
    main_det = device('nicos_sinq.sans-llb.devices.detector.RotateCutImage',
        description = 'Cut main detector out of raw detector data',
        raw_image = 'det_image',
        x = 0,
        ntubes = 128,
    ),
    lower_det = device('nicos_sinq.sans-llb.devices.detector.RotateCutImage',
        description = 'Cut lower detector out of raw detector data',
        raw_image = 'det_image',
        x = 128,
        ntubes = 16,
    ),
    side_det = device('nicos_sinq.sans-llb.devices.detector.CutImage',
        description = 'Cut side detector out of raw detector data',
        raw_image = 'det_image',
        x = 144,
        ntubes = 16,
    ),
    sansllbdet = device('nicos_sinq.devices.detector.SinqDetector',
        epicstimeout = 3.0,
        description = 'SANS-LLB detector that counts neutrons and '
        'starts streaming events',
        startpv = countprefix + '.CNT',
        errormsgpv = countprefix + ':MsgTxt',
        monitorpreset = 'monitorpreset',
        timepreset = 'timepreset',
        timers = ['elapsedtime'],
        monitors = ['monitor1', 'monitor2', 'c3', 'protoncount'],
        images = ['det_image', 'main_det', 'lower_det', 'side_det'],
        others = [],
        liveinterval = 20,
        saveintervals = [120],
    ),
    jbi_liveview = device('nicos.devices.datasinks.LiveViewSink',
    ),
)

startupcode = '''
SetDetectors(sansllbdet)
'''
