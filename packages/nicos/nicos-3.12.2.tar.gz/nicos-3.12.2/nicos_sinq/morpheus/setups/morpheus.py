description = 'Standard setup for MORPHEUS'

motprefix = 'SQ:MORPHEUS:motb:'
cterprefix = 'SQ:MORPHEUS:counter'

devices = dict(
    scx = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'SCX',
        motorpv = motprefix + 'scx',
        errormsgpv = motprefix + 'scx-MsgTxt',
        precision = 0.02,
    ),
    scy = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'SCY',
        motorpv = motprefix + 'scy',
        errormsgpv = motprefix + 'scy-MsgTxt',
        precision = 0.02,
    ),
    sgx = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample goniometer X',
        motorpv = motprefix + 'sgx',
        errormsgpv = motprefix + 'sgx-MsgTxt',
        precision = 0.02,
    ),
    sgy = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample goniometer y',
        motorpv = motprefix + 'sgy',
        errormsgpv = motprefix + 'sgy-MsgTxt',
        precision = 0.02,
    ),
    sth = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample theta',
        motorpv = motprefix + 'sth',
        errormsgpv = motprefix + 'sth-MsgTxt',
        precision = 0.02,
        visibility = (),
    ),
    stt = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample two theta',
        motorpv = motprefix + 'stt',
        errormsgpv = motprefix + 'stt-MsgTxt',
        precision = 0.02,
        visibility = (),
    ),
    stx = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample x translation',
        motorpv = motprefix + 'stx',
        errormsgpv = motprefix + 'stx-MsgTxt',
        precision = 0.02,
    ),
    sty = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample y translation',
        motorpv = motprefix + 'sty',
        errormsgpv = motprefix + 'sty-MsgTxt',
        precision = 0.02,
    ),
    hv_sample = device('nicos_sinq.amor.devices.sps_switch.SpsSwitch',
        description = 'Switch for sample high voltage',
        readpv = 'SQ:MORPHEUS:SPS1:DigitalInput',
        commandpv = 'SQ:MORPHEUS:SPS1:Push',
        byte = 9,
        bit = 6,
        commandstr = 'S0011',
        mapping = {
            'ON': False,
            'OFF': True
        },
    ),
    tth_connected = device('nicos_sinq.devices.s5_switch.SpsReadable',
        description = 'Switch for two theta connected',
        readpv = 'SQ:MORPHEUS:SPS1:DigitalInput',
        byte = 3,
        bit = 2,
        mapping = {
            'Connected': True,
            'Disconnected': False
        },
    ),
    utt_active = device('nicos_sinq.devices.s5_switch.SpsReadable',
        description = 'Switch for two theta connected',
        readpv = 'SQ:MORPHEUS:SPS1:DigitalInput',
        byte = 3,
        bit = 0,
        mapping = {
            'Connected': True,
            'Disconnected': False
        },
    ),
    timepreset = device('nicos_sinq.devices.detector.EpicsTimerActiveChannel',
        epicstimeout = 3.0,
        description = 'Used to set and view time preset',
        unit = 'sec',
        readpv = cterprefix + '.TP',
        presetpv = cterprefix + '.TP',
        controlpv = cterprefix + '.T',
    ),
    elapsedtime = device('nicos_sinq.devices.epics.detector.EpicsTimerPassiveChannel',
        epicstimeout = 3.0,
        description = 'Used to view elapsed time while counting',
        unit = 'sec',
        readpv = cterprefix + '.T',
    ),
    monitorpreset = device('nicos_sinq.devices.detector.EpicsCounterActiveChannel',
        epicstimeout = 3.0,
        description = 'Used to set and view monitor preset',
        readpv = cterprefix + '.PR2',
        presetpv = cterprefix + '.PR2',
        controlpv = cterprefix + '.S2',
        type = 'other',
    ),
    ctr1 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'The real neutron counter',
        type = 'counter',
        readpv = cterprefix + '.S3',
    ),
    mon1 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'First scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S2',
    ),
    mon2 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Second scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S4',
    ),
    protoncount = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Fourth scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S5',
    ),
    counter = device('nicos_sinq.devices.detector.SinqDetector',
        epicstimeout = 3.0,
        description = 'EL737 counter box that counts neutrons and '
        'starts streaming events',
        startpv = cterprefix + '.CNT',
        pausepv = cterprefix + ':Pause',
        statuspv = cterprefix + ':Status',
        errormsgpv = cterprefix + ':MsgTxt',
        thresholdpv = cterprefix + ':Threshold',
        monitorpreset = 'monitorpreset',
        timepreset = 'timepreset',
        timers = ['elapsedtime'],
        counters = ['ctr1'],
        monitors = [
            'mon1',
            'mon2',
            'protoncount',
        ],
        liveinterval = 7,
        saveintervals = [60],
        check_overrun = True,
    ),
    som = device('nicos.devices.generic.DeviceAlias',
        alias = 'sth',
    ),
    s2t = device('nicos.devices.generic.DeviceAlias',
        alias = 'stt',
    ),
    cter1_command = device('nicos_sinq.devices.epics.extensions.EpicsCommandReply',
        description = 'Direct connection to counter box',
        commandpv = 'SQ:MORPHEUS:cter1' + '.AOUT',
        replypv = 'SQ:MORPHEUS:cter1' + '.AINP',
    ),
)
startupcode = """
SetDetectors(counter)
"""
