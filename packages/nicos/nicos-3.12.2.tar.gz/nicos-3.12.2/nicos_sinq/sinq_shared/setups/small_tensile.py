description = 'Neutron Optic Gurke with Huber motors'
# Fake limits, check real limits of HW!

pvprefix = 'SQ:SMALL-TENS:'

devices = dict(
    st_velocity = device('nicos_sinq.devices.epics.base.EpicsAnalogMoveableSinq',
        description = 'Velocity',
        readpv = pvprefix + 'VEL-RBV',
        writepv = pvprefix + 'VEL',
        abslimits = (-0.01, 2),
    ),
    st_force = device('nicos_sinq.devices.epics.base.EpicsAnalogMoveableSinq',
        description = 'Force',
        readpv = pvprefix + 'FORCE-RBV',
        writepv = pvprefix + 'FORCE',
        abslimits = (-30000, 30000),
    ),
    st_position = device('nicos_sinq.devices.epics.base.EpicsAnalogMoveableSinq',
        description = 'Position',
        readpv = pvprefix + 'POS-RBV',
        writepv = pvprefix + 'POS',
        abslimits = (-25, 25),
    ),
    st_strain = device('nicos_sinq.devices.epics.base.EpicsAnalogMoveableSinq',
        description = 'Strain',
        readpv = pvprefix + 'STRAIN-RBV',
        writepv = pvprefix + 'STRAIN',
        abslimits = (-10, 100),
    ),
    st_filename = device('nicos.devices.epics.pyepics.EpicsStringMoveable',
        description = 'Direct access to command interface',
        readpv = pvprefix + 'FILE-RBV',
        writepv = pvprefix + 'FILE',
    ),
    st_record = device('nicos_sinq.devices.epics.extensions.EpicsMappedMoveable',
        description = 'Record',
        readpv = pvprefix + 'REC-RBV',
        writepv = pvprefix + 'REC',
        mapping = {
            'off' : 0,
            'on'  : 1,
        },
    ),
    st_mode = device('nicos_sinq.devices.epics.extensions.EpicsMappedMoveable',
        description = 'Write mode',
        readpv = pvprefix + 'MODE',
        writepv = pvprefix + 'MODE',
        mapping = {
            'Off' : 0,
            'Constant Force'  : 1,
            'Driving to Position'  : 2,
            'Strain'  : 3,
        },
    ),
    st_stop = device('nicos_sinq.devices.epics.extensions.EpicsMappedMoveable',
        description = 'Stop',
        readpv = pvprefix + 'STOP',
        writepv = pvprefix + 'STOP',
        mapping = {
            'Stop'  : 1,
        },
    ),
    st_status_raw = device('nicos.devices.epics.pyepics.EpicsReadable',
        description = 'Raw status bits as is comping from Labview application',
        readpv = pvprefix + 'STATUS-RAW',
        fmtstr = '0x%02X'
    ),
    st_positive_limit = device('nicos.devices.epics.pyepics.EpicsReadable',
        description = 'Positive Limit Switch',
        readpv = pvprefix + 'POSITIVE-LIMIT-RBV',
        fmtstr = '%d'
    ),
    st_negative_limit = device('nicos.devices.epics.pyepics.EpicsReadable',
        description = 'Positive Limit Switch',
        readpv = pvprefix + 'NEGATIVE-LIMIT-RBV',
        fmtstr = '%d'
    ),
    st_error_maxforce_exceeded = device('nicos.devices.epics.pyepics.EpicsReadable',
        description = 'ERROR maximum force exceeded',
        readpv = pvprefix + 'ERR-MAX-FORCE-EXCEEDED-RBV',
        fmtstr = '%d'
    ),
    st_labview_error = device('nicos.devices.epics.pyepics.EpicsReadable',
        description = 'ERROR in LabView',
        readpv = pvprefix + 'ERR-LABVIEW-RBV',
        fmtstr = '%d'
    ),
)
