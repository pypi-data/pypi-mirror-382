description = 'Oxford vertical 8T magnet with He recondenser'

group = 'plugplay'
tango_base = f'tango://{setupname}:10000/box/'

includes = ['alias_T', 'alias_B', 'alias_sth']

devices = {
    f'sth_{setupname}': device('nicos.devices.entangle.MotorAxis',
        description = 'sample rotation motor',
        tangodevice = tango_base + 'motor/motx',
        fmtstr = '%.3f',
        precision = 0.002,
    ),
    f'sth_{setupname}_ax': device('nicos.devices.generic.Axis',
        description = 'sample rotation motor, with backlash correction',
        motor = f'sth_{setupname}',
        fmtstr = '%.3f',
        abslimits = (-360, 360),
        precision = 0.002,
        backlash = -1.0,
    ),
    f'stz_{setupname}': device('nicos.devices.entangle.MotorAxis',
        description = 'sample height motor',
        tangodevice = tango_base + 'motor/motz',
        fmtstr = '%.3f',
        precision = 0.01,
    ),
    f'T_{setupname}_vti': device('nicos.devices.entangle.TemperatureController',
        description = 'temperature control of the VTI',
        tangodevice = tango_base + 'itc2/vti_ctrl',
    ),
    f'T_{setupname}_stick': device('nicos.devices.entangle.TemperatureController',
        description = 'temperature control of the low-temperature sample stick',
        tangodevice = tango_base + 'itc2/lt_stick_ctrl',
    ),
    f'T_{setupname}_htstick': device('nicos.devices.entangle.TemperatureController',
        description = 'temperature control of the high-temperature sample stick',
        tangodevice = tango_base + 'itc2/ht_stick_ctrl',
    ),
    f'{setupname}_vti_heater': device('nicos.devices.entangle.AnalogOutput',
        description = 'heater setting for VTI',
        tangodevice = tango_base + 'itc2/vti_heater',
    ),
    f'{setupname}_vti_nv': device('nicos.devices.entangle.AnalogOutput',
        description = 'needle valve opening for VTI',
        tangodevice = tango_base + 'itc2/needlevalve',
    ),
    f'{setupname}_stick_heater': device('nicos.devices.entangle.AnalogOutput',
        description = 'heater setting for the sample stick',
        tangodevice = tango_base + 'itc2/lt_stick_heater',
    ),
    f'{setupname}_htstick_heater': device('nicos.devices.entangle.AnalogOutput',
        description = 'heater setting for the HT sample stick',
        tangodevice = tango_base + 'itc2/ht_stick_heater',
    ),
#    'T_%s_sample_vtireg' % setupname: device('nicos.devices.entangle.TemperatureController',
#        description = 'temperature control of VTI heater using stick sensor',
#        tangodevice = tango_base + 'itc2/cross_regulation',
#    ),
    f'B_{setupname}': device('nicos.devices.entangle.Actuator',
        description = 'magnetic field',
        tangodevice = tango_base + 'ips/field',
        precision = 0.001,
    ),
    f'{setupname}_Bhall': device('nicos.devices.entangle.Sensor',
        description = 'Hall probe measuring field in main coils',
        tangodevice = tango_base + 'ips/hallprobe',
    ),
    f'I_{setupname}_supply': device('nicos.devices.entangle.AnalogInput',
        description = 'actual current output of power supplies',
        tangodevice = tango_base + 'ips/current',
    ),
    f'{setupname}_vti_regulation': device('nicos.devices.entangle.NamedDigitalOutput',
        description = 'automatic regulation type for VTI temperature control',
        tangodevice = tango_base + 'itc2/vti_regulation',
        mapping = dict(none = 0, heater = 1, valve = 2, both = 3),
    ),
    f'{setupname}_pvti': device('nicos.devices.entangle.Sensor',
        description = 'He pressure in VTI',
        tangodevice = tango_base + 'itc2/vti_pressure',
    ),
    f'{setupname}_Tmag': device('nicos.devices.entangle.Sensor',
        description = 'temperature of top magnet coil',
        tangodevice = tango_base + 'ips/temp',
    ),
    f'{setupname}_pdewar': device('nicos.devices.entangle.TemperatureController',
        description = 'He pressure in dewar',
        tangodevice = tango_base + 'itc/condenser_pressure',
    ),
    f'{setupname}_Tcoldhead': device('nicos.devices.entangle.Sensor',
        description = 'temperature of recondenser coldhead',
        tangodevice = tango_base + 'itc/condenser_temp',
    ),
    f'{setupname}_Urecon': device('nicos.devices.entangle.Sensor',
        description = 'current applied at recondenser',
        tangodevice = tango_base + 'itc/u_recon',
    ),
    f'{setupname}_LHe': device('nicos.devices.entangle.Sensor',
        description = 'liquid helium level',
        tangodevice = tango_base + 'ips/level',
    ),
    f'{setupname}_LHe_fastmode': device('nicos.devices.entangle.NamedDigitalOutput',
        description = 'liquid helium level mode',
        tangodevice = tango_base + 'ips/level_fastmode',
        mapping = dict(on = 1, off = 0),
    ),
    f'{setupname}_LN2': device('nicos.devices.entangle.Sensor',
        description = 'liquid nitrogen level',
        tangodevice = tango_base + 'itc/nitrogen_level',
    ),
    f'{setupname}_gas_switch': device('nicos.devices.entangle.NamedDigitalOutput',
        description = 'Switch for the gas valve',
        tangodevice = tango_base + 'leybold/gas',
        mapping = {'on': 1, 'off': 0},
    ),
    f'{setupname}_vacuum_switch': device('nicos.devices.entangle.NamedDigitalOutput',
        description = 'Switch for the vacuum valve',
        tangodevice = tango_base + 'leybold/vacuum',
        mapping = {'on': 1, 'off': 0},
    ),
    f'{setupname}_psample': device('nicos.devices.entangle.AnalogInput',
        description = 'Pressure in sample space',
        tangodevice = tango_base + 'leybold/sensor',
        fmtstr = '%.3g',
        unit = 'mbar',
    ),
    f'{setupname}_piso': device('nicos.devices.entangle.AnalogInput',
        description = 'Pressure in isolation vacuum',
        tangodevice = tango_base + 'leybold/sensor_iso',
        fmtstr = '%.3g',
        unit = 'mbar',
    ),
    f'{setupname}_shutdown': device('nicos.devices.entangle.DigitalInput',
        description = 'Heater shutdown due to overheat',
        tangodevice = tango_base + 'heater/monitor',
    ),
}

alias_config = {
    'T': {f'T_{setupname}_vti': 220, f'T_{setupname}_stick': 210,
          f'T_{setupname}_htstick': 210},
    'Ts': {f'T_{setupname}_stick': 120, f'T_{setupname}_htstick': 120},
    'B': {f'B_{setupname}': 100},
    'sth': {f'sth_{setupname}_ax': 250, f'sth_{setupname}': 200},
}

extended = dict(
    representative = f'B_{setupname}',
)

watch_conditions = [
    dict(condition = 'ccm8v_lhe_value < 30',
         type = 'se',
         setup = 'ccm8v',
         message = '8T Magnet: He level below 30%',
        ),
    dict(condition = 'ccm8v_shutdown_value > 0',
         type = 'se',
         setup = 'ccm8v',
         message = '8T Magnet: Heaters shut down due to overheat',
        ),
]

monitor_blocks = {
    'short': Block('8T Magnet', [
        BlockRow(
            Field(dev='B'),
            Field(dev='T'),
            Field(dev='Ts'),
        ),
    ], setups='ccm8v'),
}
