name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov flake8 black isort mypy types-PyYAML types-requests

    - name: Lint with flake8
      run: |
        flake8 lzaas --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 lzaas --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: black --check lzaas || echo "Code formatting issues found - will be auto-fixed by format-fix workflow"

    - name: Check import sorting with isort
      run: isort --check-only lzaas || echo "Import sorting issues found - will be auto-fixed by format-fix workflow"

    - name: Type checking with mypy
      run: mypy lzaas --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ --cov=lzaas --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security check with bandit
      run: bandit -r lzaas -f json -o bandit-report.json --configfile .bandit || echo "Bandit found security issues - check bandit-report.json for details"

    - name: Safety check
      run: |
        # Suppress pkg_resources deprecation warning from safety tool itself
        python -W ignore::DeprecationWarning -m safety check --json > safety-report.json 2>/dev/null || echo "Safety check completed with warnings"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
