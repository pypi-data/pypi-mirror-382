"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .tweet import Tweet, TweetTypedDict
from enum import Enum
from exfunc.types import BaseModel
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class Type(str, Enum):
    r"""The type of search"""

    TOP = "top"
    PHOTOS = "photos"
    VIDEOS = "videos"
    LATEST = "latest"


class SearchTweetsRequestBodyTypedDict(TypedDict):
    query: str
    r"""The search query string"""
    type: NotRequired[Type]
    r"""The type of search"""
    count: NotRequired[int]
    r"""The number of results to retrieve"""


class SearchTweetsRequestBody(BaseModel):
    query: str
    r"""The search query string"""

    type: Optional[Type] = None
    r"""The type of search"""

    count: Optional[int] = None
    r"""The number of results to retrieve"""


class SearchTweetsResponseBodyTypedDict(TypedDict):
    r"""SearchTweets API successful response"""

    tweets: NotRequired[List[TweetTypedDict]]


class SearchTweetsResponseBody(BaseModel):
    r"""SearchTweets API successful response"""

    tweets: Optional[List[Tweet]] = None
