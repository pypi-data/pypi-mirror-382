"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from exfunc.types import BaseModel
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class SearchWebRequestBodyTypedDict(TypedDict):
    query: str
    r"""The search query"""
    count: NotRequired[int]
    r"""Number of news articles to return per page (default is 10)"""


class SearchWebRequestBody(BaseModel):
    query: str
    r"""The search query"""

    count: Optional[int] = None
    r"""Number of news articles to return per page (default is 10)"""


class ResultsTypedDict(TypedDict):
    title: NotRequired[str]
    r"""The title of the search result"""
    url: NotRequired[str]
    r"""The url of the search result"""
    domain: NotRequired[str]
    r"""The domain of the search result"""


class Results(BaseModel):
    title: Optional[str] = None
    r"""The title of the search result"""

    url: Optional[str] = None
    r"""The url of the search result"""

    domain: Optional[str] = None
    r"""The domain of the search result"""


class SearchWebResponseBodyTypedDict(TypedDict):
    r"""SearchWeb API successful response"""

    results: NotRequired[List[ResultsTypedDict]]


class SearchWebResponseBody(BaseModel):
    r"""SearchWeb API successful response"""

    results: Optional[List[Results]] = None
