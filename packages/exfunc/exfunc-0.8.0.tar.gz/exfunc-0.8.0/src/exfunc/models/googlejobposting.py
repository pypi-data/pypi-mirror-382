"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from exfunc.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class GoogleJobPostingTypedDict(TypedDict):
    id: NotRequired[str]
    r"""The ID of the job posting"""
    url: NotRequired[str]
    r"""The URL link to the Google job posting"""
    title: NotRequired[str]
    r"""The title of the job posting"""
    location: NotRequired[str]
    r"""The location of the job posting"""
    description: NotRequired[str]
    r"""Detailed description of the job posting"""
    job_type: NotRequired[Nullable[str]]
    r"""Type of job (e.g., Full-time, Part-time)"""
    date_posted: NotRequired[Nullable[datetime]]
    r"""Date when the job was posted"""
    publisher_name: NotRequired[str]
    r"""Name of the publisher of the job posting"""
    publisher_url: NotRequired[str]
    r"""URL of the publisher job posting"""
    company_name: NotRequired[str]
    r"""Name of the company offering the job"""
    company_website_url: NotRequired[Nullable[str]]
    r"""URL to the company's website"""


class GoogleJobPosting(BaseModel):
    id: Optional[str] = None
    r"""The ID of the job posting"""

    url: Optional[str] = None
    r"""The URL link to the Google job posting"""

    title: Optional[str] = None
    r"""The title of the job posting"""

    location: Optional[str] = None
    r"""The location of the job posting"""

    description: Optional[str] = None
    r"""Detailed description of the job posting"""

    job_type: OptionalNullable[str] = UNSET
    r"""Type of job (e.g., Full-time, Part-time)"""

    date_posted: OptionalNullable[datetime] = UNSET
    r"""Date when the job was posted"""

    publisher_name: Optional[str] = None
    r"""Name of the publisher of the job posting"""

    publisher_url: Optional[str] = None
    r"""URL of the publisher job posting"""

    company_name: Optional[str] = None
    r"""Name of the company offering the job"""

    company_website_url: OptionalNullable[str] = UNSET
    r"""URL to the company's website"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "url",
            "title",
            "location",
            "description",
            "job_type",
            "date_posted",
            "publisher_name",
            "publisher_url",
            "company_name",
            "company_website_url",
        ]
        nullable_fields = ["job_type", "date_posted", "company_website_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
