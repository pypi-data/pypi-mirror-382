"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from exfunc.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class IndeedJobPostingPercentilesTypedDict(TypedDict):
    p0: NotRequired[Nullable[float]]
    p100: NotRequired[Nullable[float]]


class IndeedJobPostingPercentiles(BaseModel):
    p0: OptionalNullable[float] = UNSET

    p100: OptionalNullable[float] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["p0", "p100"]
        nullable_fields = ["p0", "p100"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class IndeedJobPostingSalaryTypedDict(TypedDict):
    r"""Salary details for the job posting"""

    currency: NotRequired[Nullable[str]]
    period: NotRequired[Nullable[str]]
    percentiles: NotRequired[IndeedJobPostingPercentilesTypedDict]


class IndeedJobPostingSalary(BaseModel):
    r"""Salary details for the job posting"""

    currency: OptionalNullable[str] = UNSET

    period: OptionalNullable[str] = UNSET

    percentiles: Optional[IndeedJobPostingPercentiles] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["currency", "period", "percentiles"]
        nullable_fields = ["currency", "period"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class IndeedJobPostingTypedDict(TypedDict):
    url: NotRequired[str]
    r"""The URL link to the Indeed job posting"""
    title: NotRequired[str]
    r"""The title of the job posting"""
    location: NotRequired[str]
    r"""The location of the job posting"""
    description: NotRequired[str]
    r"""Detailed description of the job posting"""
    job_type: NotRequired[Nullable[str]]
    r"""Type of job (e.g., FULL_TIME, PART_TIME, CONTRACT)"""
    date_posted: NotRequired[datetime]
    r"""Date when the job was posted"""
    company_name: NotRequired[Nullable[str]]
    r"""Name of the company offering the job"""
    company_url: NotRequired[Nullable[str]]
    r"""URL to the company page on Indeed"""
    company_website_url: NotRequired[Nullable[str]]
    r"""URL to the company's website"""
    company_location: NotRequired[Nullable[str]]
    r"""The location of the company"""
    company_industry: NotRequired[Nullable[str]]
    r"""The industry of the company"""
    company_size: NotRequired[Nullable[str]]
    r"""The size range of the company"""
    company_revenue: NotRequired[Nullable[str]]
    r"""The revenue (ARR) of the company"""
    company_overview: NotRequired[Nullable[str]]
    r"""The overview of the company"""
    salary: NotRequired[Nullable[IndeedJobPostingSalaryTypedDict]]
    r"""Salary details for the job posting"""


class IndeedJobPosting(BaseModel):
    url: Optional[str] = None
    r"""The URL link to the Indeed job posting"""

    title: Optional[str] = None
    r"""The title of the job posting"""

    location: Optional[str] = None
    r"""The location of the job posting"""

    description: Optional[str] = None
    r"""Detailed description of the job posting"""

    job_type: OptionalNullable[str] = UNSET
    r"""Type of job (e.g., FULL_TIME, PART_TIME, CONTRACT)"""

    date_posted: Optional[datetime] = None
    r"""Date when the job was posted"""

    company_name: OptionalNullable[str] = UNSET
    r"""Name of the company offering the job"""

    company_url: OptionalNullable[str] = UNSET
    r"""URL to the company page on Indeed"""

    company_website_url: OptionalNullable[str] = UNSET
    r"""URL to the company's website"""

    company_location: OptionalNullable[str] = UNSET
    r"""The location of the company"""

    company_industry: OptionalNullable[str] = UNSET
    r"""The industry of the company"""

    company_size: OptionalNullable[str] = UNSET
    r"""The size range of the company"""

    company_revenue: OptionalNullable[str] = UNSET
    r"""The revenue (ARR) of the company"""

    company_overview: OptionalNullable[str] = UNSET
    r"""The overview of the company"""

    salary: OptionalNullable[IndeedJobPostingSalary] = UNSET
    r"""Salary details for the job posting"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "url",
            "title",
            "location",
            "description",
            "job_type",
            "date_posted",
            "company_name",
            "company_url",
            "company_website_url",
            "company_location",
            "company_industry",
            "company_size",
            "company_revenue",
            "company_overview",
            "salary",
        ]
        nullable_fields = [
            "job_type",
            "company_name",
            "company_url",
            "company_website_url",
            "company_location",
            "company_industry",
            "company_size",
            "company_revenue",
            "company_overview",
            "salary",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
