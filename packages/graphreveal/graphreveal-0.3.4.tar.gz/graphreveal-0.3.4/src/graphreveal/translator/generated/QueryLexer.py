# Generated from QueryLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,367,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,4,0,51,8,0,11,0,12,
        0,52,1,0,1,0,1,1,4,1,58,8,1,11,1,12,1,59,1,2,1,2,1,3,1,3,1,3,1,3,
        3,3,68,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,3,
        8,83,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,122,8,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,3,10,134,8,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,190,8,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,212,8,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,227,8,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,3,17,272,8,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,287,8,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,3,19,308,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,3,20,346,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        0,0,24,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,1,0,3,3,0,9,10,13,13,32,32,1,0,48,57,2,0,44,44,59,59,389,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,50,1,0,0,0,3,57,1,
        0,0,0,5,61,1,0,0,0,7,67,1,0,0,0,9,69,1,0,0,0,11,71,1,0,0,0,13,73,
        1,0,0,0,15,76,1,0,0,0,17,82,1,0,0,0,19,121,1,0,0,0,21,133,1,0,0,
        0,23,189,1,0,0,0,25,211,1,0,0,0,27,226,1,0,0,0,29,228,1,0,0,0,31,
        238,1,0,0,0,33,247,1,0,0,0,35,271,1,0,0,0,37,286,1,0,0,0,39,307,
        1,0,0,0,41,345,1,0,0,0,43,347,1,0,0,0,45,354,1,0,0,0,47,362,1,0,
        0,0,49,51,7,0,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,
        1,0,0,0,53,54,1,0,0,0,54,55,6,0,0,0,55,2,1,0,0,0,56,58,7,1,0,0,57,
        56,1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,4,1,0,0,
        0,61,62,7,2,0,0,62,6,1,0,0,0,63,64,5,110,0,0,64,65,5,111,0,0,65,
        68,5,116,0,0,66,68,5,33,0,0,67,63,1,0,0,0,67,66,1,0,0,0,68,8,1,0,
        0,0,69,70,5,60,0,0,70,10,1,0,0,0,71,72,5,62,0,0,72,12,1,0,0,0,73,
        74,5,60,0,0,74,75,5,61,0,0,75,14,1,0,0,0,76,77,5,62,0,0,77,78,5,
        61,0,0,78,16,1,0,0,0,79,80,5,46,0,0,80,83,5,46,0,0,81,83,5,45,0,
        0,82,79,1,0,0,0,82,81,1,0,0,0,83,18,1,0,0,0,84,85,5,118,0,0,85,86,
        5,101,0,0,86,87,5,114,0,0,87,88,5,116,0,0,88,89,5,101,0,0,89,122,
        5,120,0,0,90,91,5,118,0,0,91,92,5,101,0,0,92,93,5,114,0,0,93,94,
        5,116,0,0,94,95,5,105,0,0,95,96,5,99,0,0,96,97,5,101,0,0,97,122,
        5,115,0,0,98,99,5,118,0,0,99,100,5,101,0,0,100,101,5,114,0,0,101,
        102,5,116,0,0,102,103,5,101,0,0,103,104,5,120,0,0,104,105,5,101,
        0,0,105,122,5,115,0,0,106,107,5,118,0,0,107,108,5,101,0,0,108,109,
        5,114,0,0,109,110,5,116,0,0,110,122,5,115,0,0,111,122,5,86,0,0,112,
        113,5,110,0,0,113,114,5,111,0,0,114,115,5,100,0,0,115,122,5,101,
        0,0,116,117,5,110,0,0,117,118,5,111,0,0,118,119,5,100,0,0,119,120,
        5,101,0,0,120,122,5,115,0,0,121,84,1,0,0,0,121,90,1,0,0,0,121,98,
        1,0,0,0,121,106,1,0,0,0,121,111,1,0,0,0,121,112,1,0,0,0,121,116,
        1,0,0,0,122,20,1,0,0,0,123,124,5,101,0,0,124,125,5,100,0,0,125,126,
        5,103,0,0,126,134,5,101,0,0,127,128,5,101,0,0,128,129,5,100,0,0,
        129,130,5,103,0,0,130,131,5,101,0,0,131,134,5,115,0,0,132,134,5,
        69,0,0,133,123,1,0,0,0,133,127,1,0,0,0,133,132,1,0,0,0,134,22,1,
        0,0,0,135,136,5,98,0,0,136,137,5,108,0,0,137,138,5,111,0,0,138,139,
        5,99,0,0,139,190,5,107,0,0,140,141,5,98,0,0,141,142,5,108,0,0,142,
        143,5,111,0,0,143,144,5,99,0,0,144,145,5,107,0,0,145,190,5,115,0,
        0,146,147,5,98,0,0,147,148,5,105,0,0,148,149,5,99,0,0,149,150,5,
        111,0,0,150,151,5,110,0,0,151,152,5,110,0,0,152,153,5,101,0,0,153,
        154,5,99,0,0,154,155,5,116,0,0,155,156,5,101,0,0,156,157,5,100,0,
        0,157,158,5,32,0,0,158,159,5,99,0,0,159,160,5,111,0,0,160,161,5,
        109,0,0,161,162,5,112,0,0,162,163,5,111,0,0,163,164,5,110,0,0,164,
        165,5,101,0,0,165,166,5,110,0,0,166,190,5,116,0,0,167,168,5,98,0,
        0,168,169,5,105,0,0,169,170,5,99,0,0,170,171,5,111,0,0,171,172,5,
        110,0,0,172,173,5,110,0,0,173,174,5,101,0,0,174,175,5,99,0,0,175,
        176,5,116,0,0,176,177,5,101,0,0,177,178,5,100,0,0,178,179,5,32,0,
        0,179,180,5,99,0,0,180,181,5,111,0,0,181,182,5,109,0,0,182,183,5,
        112,0,0,183,184,5,111,0,0,184,185,5,110,0,0,185,186,5,101,0,0,186,
        187,5,110,0,0,187,188,5,116,0,0,188,190,5,115,0,0,189,135,1,0,0,
        0,189,140,1,0,0,0,189,146,1,0,0,0,189,167,1,0,0,0,190,24,1,0,0,0,
        191,192,5,99,0,0,192,193,5,111,0,0,193,194,5,109,0,0,194,195,5,112,
        0,0,195,196,5,111,0,0,196,197,5,110,0,0,197,198,5,101,0,0,198,199,
        5,110,0,0,199,212,5,116,0,0,200,201,5,99,0,0,201,202,5,111,0,0,202,
        203,5,109,0,0,203,204,5,112,0,0,204,205,5,111,0,0,205,206,5,110,
        0,0,206,207,5,101,0,0,207,208,5,110,0,0,208,209,5,116,0,0,209,212,
        5,115,0,0,210,212,5,67,0,0,211,191,1,0,0,0,211,200,1,0,0,0,211,210,
        1,0,0,0,212,26,1,0,0,0,213,214,5,97,0,0,214,215,5,99,0,0,215,216,
        5,121,0,0,216,217,5,99,0,0,217,218,5,108,0,0,218,219,5,105,0,0,219,
        227,5,99,0,0,220,221,5,102,0,0,221,222,5,111,0,0,222,223,5,114,0,
        0,223,224,5,101,0,0,224,225,5,115,0,0,225,227,5,116,0,0,226,213,
        1,0,0,0,226,220,1,0,0,0,227,28,1,0,0,0,228,229,5,98,0,0,229,230,
        5,105,0,0,230,231,5,112,0,0,231,232,5,97,0,0,232,233,5,114,0,0,233,
        234,5,116,0,0,234,235,5,105,0,0,235,236,5,116,0,0,236,237,5,101,
        0,0,237,30,1,0,0,0,238,239,5,99,0,0,239,240,5,111,0,0,240,241,5,
        109,0,0,241,242,5,112,0,0,242,243,5,108,0,0,243,244,5,101,0,0,244,
        245,5,116,0,0,245,246,5,101,0,0,246,32,1,0,0,0,247,248,5,99,0,0,
        248,249,5,111,0,0,249,250,5,110,0,0,250,251,5,110,0,0,251,252,5,
        101,0,0,252,253,5,99,0,0,253,254,5,116,0,0,254,255,5,101,0,0,255,
        256,5,100,0,0,256,34,1,0,0,0,257,258,5,99,0,0,258,259,5,117,0,0,
        259,260,5,98,0,0,260,261,5,105,0,0,261,272,5,99,0,0,262,263,5,116,
        0,0,263,264,5,114,0,0,264,265,5,105,0,0,265,266,5,118,0,0,266,267,
        5,97,0,0,267,268,5,108,0,0,268,269,5,101,0,0,269,270,5,110,0,0,270,
        272,5,116,0,0,271,257,1,0,0,0,271,262,1,0,0,0,272,36,1,0,0,0,273,
        274,5,101,0,0,274,275,5,117,0,0,275,276,5,108,0,0,276,277,5,101,
        0,0,277,278,5,114,0,0,278,279,5,105,0,0,279,280,5,97,0,0,280,287,
        5,110,0,0,281,282,5,101,0,0,282,283,5,117,0,0,283,284,5,108,0,0,
        284,285,5,101,0,0,285,287,5,114,0,0,286,273,1,0,0,0,286,281,1,0,
        0,0,287,38,1,0,0,0,288,289,5,104,0,0,289,290,5,97,0,0,290,291,5,
        109,0,0,291,292,5,105,0,0,292,293,5,108,0,0,293,294,5,116,0,0,294,
        295,5,111,0,0,295,296,5,110,0,0,296,297,5,105,0,0,297,298,5,97,0,
        0,298,308,5,110,0,0,299,300,5,104,0,0,300,301,5,97,0,0,301,302,5,
        109,0,0,302,303,5,105,0,0,303,304,5,108,0,0,304,305,5,116,0,0,305,
        306,5,111,0,0,306,308,5,110,0,0,307,288,1,0,0,0,307,299,1,0,0,0,
        308,40,1,0,0,0,309,310,5,110,0,0,310,311,5,111,0,0,311,312,5,32,
        0,0,312,313,5,105,0,0,313,314,5,115,0,0,314,315,5,111,0,0,315,316,
        5,108,0,0,316,317,5,97,0,0,317,318,5,116,0,0,318,319,5,101,0,0,319,
        320,5,100,0,0,320,321,5,32,0,0,321,322,5,118,0,0,322,323,5,101,0,
        0,323,324,5,114,0,0,324,325,5,116,0,0,325,326,5,105,0,0,326,327,
        5,99,0,0,327,328,5,101,0,0,328,346,5,115,0,0,329,330,5,110,0,0,330,
        331,5,111,0,0,331,332,5,32,0,0,332,333,5,105,0,0,333,334,5,115,0,
        0,334,335,5,111,0,0,335,336,5,108,0,0,336,337,5,97,0,0,337,338,5,
        116,0,0,338,339,5,101,0,0,339,340,5,100,0,0,340,341,5,32,0,0,341,
        346,5,118,0,0,342,343,5,110,0,0,343,344,5,105,0,0,344,346,5,118,
        0,0,345,309,1,0,0,0,345,329,1,0,0,0,345,342,1,0,0,0,346,42,1,0,0,
        0,347,348,5,112,0,0,348,349,5,108,0,0,349,350,5,97,0,0,350,351,5,
        110,0,0,351,352,5,97,0,0,352,353,5,114,0,0,353,44,1,0,0,0,354,355,
        5,114,0,0,355,356,5,101,0,0,356,357,5,103,0,0,357,358,5,117,0,0,
        358,359,5,108,0,0,359,360,5,97,0,0,360,361,5,114,0,0,361,46,1,0,
        0,0,362,363,5,116,0,0,363,364,5,114,0,0,364,365,5,101,0,0,365,366,
        5,101,0,0,366,48,1,0,0,0,14,0,52,59,67,82,121,133,189,211,226,271,
        286,307,345,1,6,0,0
    ]

class QueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    INTEGER = 2
    SEPERATOR = 3
    NOT = 4
    LESS = 5
    GREATER = 6
    LESS_OR_EQUAL = 7
    GREATER_OR_EQUAL = 8
    RANGE_OPERATOR = 9
    VERTEX = 10
    EDGE = 11
    BLOCK = 12
    COMPONENT = 13
    ACYCLIC = 14
    BIPARTITE = 15
    COMPLETE = 16
    CONNECTED = 17
    CUBIC = 18
    EULERIAN = 19
    HAMILTONIAN = 20
    NO_ISOLATED_V = 21
    PLANAR = 22
    REGULAR = 23
    TREE = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'>'", "'<='", "'>='", "'bipartite'", "'complete'", "'connected'", 
            "'planar'", "'regular'", "'tree'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "LESS", "GREATER", 
            "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "RANGE_OPERATOR", "VERTEX", 
            "EDGE", "BLOCK", "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", 
            "CONNECTED", "CUBIC", "EULERIAN", "HAMILTONIAN", "NO_ISOLATED_V", 
            "PLANAR", "REGULAR", "TREE" ]

    ruleNames = [ "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "LESS", "GREATER", 
                  "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "RANGE_OPERATOR", 
                  "VERTEX", "EDGE", "BLOCK", "COMPONENT", "ACYCLIC", "BIPARTITE", 
                  "COMPLETE", "CONNECTED", "CUBIC", "EULERIAN", "HAMILTONIAN", 
                  "NO_ISOLATED_V", "PLANAR", "REGULAR", "TREE" ]

    grammarFileName = "QueryLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


