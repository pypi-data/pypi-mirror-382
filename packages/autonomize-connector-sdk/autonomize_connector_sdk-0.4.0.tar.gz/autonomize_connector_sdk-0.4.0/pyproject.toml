[tool.poetry]
name = "autonomize-connector-sdk"
version = "0.4.0"
description = "Industry-leading API integration with JSON-based registration and proven Azure OpenAI support"
authors = ["Autonomize AI <team@autonomize.ai>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/autonomize-ai/autonomize-connectors"
repository = "https://github.com/autonomize-ai/autonomize-connectors"
documentation = "https://github.com/autonomize-ai/autonomize-connectors/blob/main/README.md"
keywords = ["api", "connector", "sdk", "integration", "healthcare", "jiva", "azure", "json", "openai", "oauth2"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: System :: Networking",
]
packages = [{include = "autonomize_connector", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"

# Core HTTP and async dependencies
aiohttp = "^3.9.0"

# Environment and configuration
python-dotenv = "^1.0.0"
pydantic = "^2.5.0"
typing-extensions = "^4.8.0"

# Authentication
authlib = "^1.3.0"
cryptography = ">=45.0.5,<46.0.0"

# Data serialization
pyyaml = "^6.0"
orjson = "^3.9.0"

# Optional dependencies for specific connectors
azure-identity = {version = "^1.15.0", optional = true}
simple-salesforce = {version = "^1.12.0", optional = true}
requests-oauthlib = {version = "^1.3.0", optional = true}

# OpenAI integration (based on your env vars)
openai = {version = "^1.10.0", optional = true}

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.0.0"

# Code formatting and linting
black = "^24.0.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
isort = "^5.13.0"

# Development tools
pre-commit = "^3.6.0"
bump2version = "^1.0.0"

# Documentation
sphinx = "^7.2.0"
sphinx-rtd-theme = "^2.0.0"

[tool.poetry.extras]
azure = ["azure-identity"]
salesforce = ["simple-salesforce"]
oauth1 = ["requests-oauthlib"]
openai = ["openai"]
all = ["azure-identity", "simple-salesforce", "requests-oauthlib", "openai"]

[tool.poetry.scripts]
autonomize-connector = "autonomize_connector.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["autonomize_connector"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["autonomize_connector"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 