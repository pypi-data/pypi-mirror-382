"""Code generated by fastpix (https://fastpix.io). DO NOT EDIT."""

from __future__ import annotations
from .streamalreadyenablederror import StreamAlreadyEnabledErrorData
from .trialplanrestrictionerror import TrialPlanRestrictionErrorData
from dataclasses import dataclass, field
from .fastpixerror import FastpixError
import httpx
from typing import Optional, Union
from typing_extensions import TypeAliasType


BadRequestUnion = TypeAliasType(
    "BadRequestUnion",
    Union[TrialPlanRestrictionErrorData, StreamAlreadyEnabledErrorData],
)
r"""Bad Request – Stream is either already enabled or cannot be enabled on trial plan."""


@dataclass(frozen=True)
class BadRequest(FastpixError):
    r"""Bad Request – Stream is either already enabled or cannot be enabled on trial plan."""

    data: BadRequestUnion = field(hash=False)

    def __init__(
        self,
        data: BadRequestUnion,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)
