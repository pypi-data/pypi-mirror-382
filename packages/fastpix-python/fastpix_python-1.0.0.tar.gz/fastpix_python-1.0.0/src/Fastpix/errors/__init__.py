"""Code generated by fastpix (https://fastpix.io). DO NOT EDIT."""

from .fastpixerror import FastpixError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .badrequest_error import BadRequestError, BadRequestErrorData
    from .duplicatemp4support_error import (
        DuplicateMp4SupportError,
        DuplicateMp4SupportErrorData,
    )
    from .duplicatereferenceiderrorresponse import (
        DuplicateReferenceIDErrorResponse,
        DuplicateReferenceIDErrorResponseData,
    )
    from .enable_live_streamop import BadRequest, BadRequestUnion
    from .fastpixdefaulterror import FastpixDefaultError
    from .forbidden_error import ForbiddenError, ForbiddenErrorData
    from .forbiddenresponse_error import (
        ForbiddenResponseError,
        ForbiddenResponseErrorData,
    )
    from .invalidpermission_error import (
        InvalidPermissionError,
        InvalidPermissionErrorData,
    )
    from .invalidplaylistidresponse_error import (
        InvalidPlaylistIDResponseError,
        InvalidPlaylistIDResponseErrorData,
    )
    from .livenotfounderror import LiveNotFoundError, LiveNotFoundErrorData
    from .mediaclipnotfound_error import (
        MediaClipNotFoundError,
        MediaClipNotFoundErrorData,
    )
    from .medianotfound_error import MediaNotFoundError, MediaNotFoundErrorData
    from .mediaorplaybacknotfound_error import (
        MediaOrPlaybackNotFoundError,
        MediaOrPlaybackNotFoundErrorData,
    )
    from .no_response_error import NoResponseError
    from .notfounderror import NotFoundError, NotFoundErrorData
    from .notfounderrorplaybackid import (
        NotFoundErrorPlaybackID,
        NotFoundErrorPlaybackIDData,
    )
    from .notfounderrorsimulcast import (
        NotFoundErrorSimulcast,
        NotFoundErrorSimulcastData,
    )
    from .responsevalidationerror import ResponseValidationError
    from .signingkeynotfounderror import (
        SigningKeyNotFoundError,
        SigningKeyNotFoundErrorData,
    )
    from .simulcastunavailable_error import (
        SimulcastUnavailableError,
        SimulcastUnavailableErrorData,
    )
    from .streamalreadydisablederror import (
        StreamAlreadyDisabledError,
        StreamAlreadyDisabledErrorData,
    )
    from .streamalreadyenablederror import (
        StreamAlreadyEnabledError,
        StreamAlreadyEnabledErrorData,
    )
    from .trackduplicaterequest_error import (
        TrackDuplicateRequestError,
        TrackDuplicateRequestErrorData,
    )
    from .trialplanrestrictionerror import (
        TrialPlanRestrictionError,
        TrialPlanRestrictionErrorData,
    )
    from .unauthorized_error import UnauthorizedError, UnauthorizedErrorData
    from .unauthorizedresponse_error import (
        UnAuthorizedResponseError,
        UnAuthorizedResponseErrorData,
    )
    from .validationerrorresponse import (
        ValidationErrorResponse,
        ValidationErrorResponseData,
    )
    from .viewnotfound_error import ViewNotFoundError, ViewNotFoundErrorData

__all__ = [
    "BadRequest",
    "BadRequestError",
    "BadRequestErrorData",
    "BadRequestUnion",
    "DuplicateMp4SupportError",
    "DuplicateMp4SupportErrorData",
    "DuplicateReferenceIDErrorResponse",
    "DuplicateReferenceIDErrorResponseData",
    "FastpixDefaultError",
    "FastpixError",
    "ForbiddenError",
    "ForbiddenErrorData",
    "ForbiddenResponseError",
    "ForbiddenResponseErrorData",
    "InvalidPermissionError",
    "InvalidPermissionErrorData",
    "InvalidPlaylistIDResponseError",
    "InvalidPlaylistIDResponseErrorData",
    "LiveNotFoundError",
    "LiveNotFoundErrorData",
    "MediaClipNotFoundError",
    "MediaClipNotFoundErrorData",
    "MediaNotFoundError",
    "MediaNotFoundErrorData",
    "MediaOrPlaybackNotFoundError",
    "MediaOrPlaybackNotFoundErrorData",
    "NoResponseError",
    "NotFoundError",
    "NotFoundErrorData",
    "NotFoundErrorPlaybackID",
    "NotFoundErrorPlaybackIDData",
    "NotFoundErrorSimulcast",
    "NotFoundErrorSimulcastData",
    "ResponseValidationError",
    "SigningKeyNotFoundError",
    "SigningKeyNotFoundErrorData",
    "SimulcastUnavailableError",
    "SimulcastUnavailableErrorData",
    "StreamAlreadyDisabledError",
    "StreamAlreadyDisabledErrorData",
    "StreamAlreadyEnabledError",
    "StreamAlreadyEnabledErrorData",
    "TrackDuplicateRequestError",
    "TrackDuplicateRequestErrorData",
    "TrialPlanRestrictionError",
    "TrialPlanRestrictionErrorData",
    "UnAuthorizedResponseError",
    "UnAuthorizedResponseErrorData",
    "UnauthorizedError",
    "UnauthorizedErrorData",
    "ValidationErrorResponse",
    "ValidationErrorResponseData",
    "ViewNotFoundError",
    "ViewNotFoundErrorData",
]

_dynamic_imports: dict[str, str] = {
    "BadRequestError": ".badrequest_error",
    "BadRequestErrorData": ".badrequest_error",
    "DuplicateMp4SupportError": ".duplicatemp4support_error",
    "DuplicateMp4SupportErrorData": ".duplicatemp4support_error",
    "DuplicateReferenceIDErrorResponse": ".duplicatereferenceiderrorresponse",
    "DuplicateReferenceIDErrorResponseData": ".duplicatereferenceiderrorresponse",
    "BadRequest": ".enable_live_streamop",
    "BadRequestUnion": ".enable_live_streamop",
    "FastpixDefaultError": ".fastpixdefaulterror",
    "ForbiddenError": ".forbidden_error",
    "ForbiddenErrorData": ".forbidden_error",
    "ForbiddenResponseError": ".forbiddenresponse_error",
    "ForbiddenResponseErrorData": ".forbiddenresponse_error",
    "InvalidPermissionError": ".invalidpermission_error",
    "InvalidPermissionErrorData": ".invalidpermission_error",
    "InvalidPlaylistIDResponseError": ".invalidplaylistidresponse_error",
    "InvalidPlaylistIDResponseErrorData": ".invalidplaylistidresponse_error",
    "LiveNotFoundError": ".livenotfounderror",
    "LiveNotFoundErrorData": ".livenotfounderror",
    "MediaClipNotFoundError": ".mediaclipnotfound_error",
    "MediaClipNotFoundErrorData": ".mediaclipnotfound_error",
    "MediaNotFoundError": ".medianotfound_error",
    "MediaNotFoundErrorData": ".medianotfound_error",
    "MediaOrPlaybackNotFoundError": ".mediaorplaybacknotfound_error",
    "MediaOrPlaybackNotFoundErrorData": ".mediaorplaybacknotfound_error",
    "NoResponseError": ".no_response_error",
    "NotFoundError": ".notfounderror",
    "NotFoundErrorData": ".notfounderror",
    "NotFoundErrorPlaybackID": ".notfounderrorplaybackid",
    "NotFoundErrorPlaybackIDData": ".notfounderrorplaybackid",
    "NotFoundErrorSimulcast": ".notfounderrorsimulcast",
    "NotFoundErrorSimulcastData": ".notfounderrorsimulcast",
    "ResponseValidationError": ".responsevalidationerror",
    "SigningKeyNotFoundError": ".signingkeynotfounderror",
    "SigningKeyNotFoundErrorData": ".signingkeynotfounderror",
    "SimulcastUnavailableError": ".simulcastunavailable_error",
    "SimulcastUnavailableErrorData": ".simulcastunavailable_error",
    "StreamAlreadyDisabledError": ".streamalreadydisablederror",
    "StreamAlreadyDisabledErrorData": ".streamalreadydisablederror",
    "StreamAlreadyEnabledError": ".streamalreadyenablederror",
    "StreamAlreadyEnabledErrorData": ".streamalreadyenablederror",
    "TrackDuplicateRequestError": ".trackduplicaterequest_error",
    "TrackDuplicateRequestErrorData": ".trackduplicaterequest_error",
    "TrialPlanRestrictionError": ".trialplanrestrictionerror",
    "TrialPlanRestrictionErrorData": ".trialplanrestrictionerror",
    "UnauthorizedError": ".unauthorized_error",
    "UnauthorizedErrorData": ".unauthorized_error",
    "UnAuthorizedResponseError": ".unauthorizedresponse_error",
    "UnAuthorizedResponseErrorData": ".unauthorizedresponse_error",
    "ValidationErrorResponse": ".validationerrorresponse",
    "ValidationErrorResponseData": ".validationerrorresponse",
    "ViewNotFoundError": ".viewnotfound_error",
    "ViewNotFoundErrorData": ".viewnotfound_error",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
