"""Code generated by fastpix (https://fastpix.io). DO NOT EDIT."""

from __future__ import annotations
from ..types import BaseModel
from ..utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


OrderBy = Literal[
    "asc",
    "desc",
]
r"""The list of value can be order in two ways DESC (Descending) or ASC (Ascending). In case not specified, by default it will be DESC."""


class GetAllStreamsRequestTypedDict(TypedDict):
    limit: NotRequired[int]
    r"""Limit specifies the maximum number of items to display per page."""
    offset: NotRequired[int]
    r"""Offset determines the starting point for data retrieval within a paginated list."""
    order_by: NotRequired[OrderBy]
    r"""The list of value can be order in two ways DESC (Descending) or ASC (Ascending). In case not specified, by default it will be DESC."""


class GetAllStreamsRequest(BaseModel):
    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""Limit specifies the maximum number of items to display per page."""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Offset determines the starting point for data retrieval within a paginated list."""

    order_by: Annotated[
        Optional[OrderBy],
        pydantic.Field(alias="orderBy"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "desc"
    r"""The list of value can be order in two ways DESC (Descending) or ASC (Ascending). In case not specified, by default it will be DESC."""
