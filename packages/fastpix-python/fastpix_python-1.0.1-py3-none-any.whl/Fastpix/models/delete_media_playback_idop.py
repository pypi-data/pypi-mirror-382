"""Code generated by fastpix (https://fastpix.io). DO NOT EDIT."""

from __future__ import annotations
from ..types import BaseModel
from ..utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DeleteMediaPlaybackIDRequestTypedDict(TypedDict):
    media_id: str
    r"""Return the universal unique identifier for media which can contain a maximum of 255 characters."""
    playback_id: str
    r"""Return the universal unique identifier for playbacks  which can contain a maximum of 255 characters."""


class DeleteMediaPlaybackIDRequest(BaseModel):
    media_id: Annotated[
        str,
        pydantic.Field(alias="mediaId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Return the universal unique identifier for media which can contain a maximum of 255 characters."""

    playback_id: Annotated[
        str,
        pydantic.Field(alias="playbackId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Return the universal unique identifier for playbacks  which can contain a maximum of 255 characters."""


class DeleteMediaPlaybackIDResponseTypedDict(TypedDict):
    r"""Deleted a Playback Id successfully"""

    success: NotRequired[bool]
    r"""Demonstrates whether the request is successful or not."""


class DeleteMediaPlaybackIDResponse(BaseModel):
    r"""Deleted a Playback Id successfully"""

    success: Optional[bool] = None
    r"""Demonstrates whether the request is successful or not."""
