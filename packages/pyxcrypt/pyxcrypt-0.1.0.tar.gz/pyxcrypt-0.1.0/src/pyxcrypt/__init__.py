"""
This file is part of pyxcrypt.

pyxcrypt is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License
as published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

pyxcrypt is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with pyxcrypt.
If not, see <https://www.gnu.org/licenses/>.
"""


from . import pyxcrypt

CRYPT_SALT_OK = 0
CRYPT_SALT_INVALID = 1
CRYPT_SALT_METHOD_LEGACY = 3


def crypt_gensalt(prefix=None, count=0, rbytes=None, nrbytes=0):
    """
    Compile a string for use as the setting argument to crypt.

    :param prefix: selects the hashing method to use;
    :type prefix: str, bytes-like object or None;
    :param count: controls the CPU time cost of the hash;
    :type count: int;
    :param rbytes: random bytes for use as a "salt";
    :type rbytes: str, bytes-like object or None;
    :param nrbytes: length of result;
    :type nrbytes: int;
    :return: salt;
    :rtype: str.
    """
    hashes = {"yescrypt": "$y$",
              "gost-yescrypt": "$gy$",
              "gost_yescrypt": "$gy$",
              "sm3_yescrypt": "$sm3y$",
              "scrypt": "$7$",
              "bcrypt": "$2b$",
              "bcrypt_y": "$2y$",
              "bcrypt_a": "$2a$",
              "bcrypt_x": "$2x$",
              "sm3crypt": "$sm3$",
              "sha512crypt": "$6$",
              "sha256crypt": "$5$",
              "sha1crypt": "$sha1",
              "sunmd5": "$md5",
              "md5crypt": "$1$",
              "nt": "$3$",
              "bsdicrypt": "_",
              "descrypt": ""}
    return pyxcrypt._crypt_gensalt(prefix if prefix not in hashes else
                                   hashes[prefix], count, rbytes, nrbytes)


def crypt_gensalt_default(count=0, rbytes=None, nrbytes=0):
    """
    Same as crypt_gensalt but with the default (prefered) hashing method.

    :param count: controls the CPU time cost of the hash;
    :type count: int;
    :param rbytes: random bytes for use as a "salt";
    :type rbytes: str, bytes-like object or None;
    :param nrbytes: length of result;
    :type nrbytes: int;
    :return: salt;
    :rtype: str.
    """
    return crypt_gensalt(None, count, rbytes, nrbytes)


def crypt_checksalt(salt):
    """
    Checks the setting string against the system configuration and reports
    whether the hashing method and parameters it specifies are acceptable.

    :param salt: salt generated by crypt_gensalt;
    :type salt: str, bytes-like object;
    :return: one of CRYPT_SALT_OK/CRYPT_SALT_INVALID/CRYPT_SALT_METHOD_LEGACY;
    :rtype: int.
    """
    return pyxcrypt._crypt_checksalt(salt)


def crypt_checksalt_filter(salt):
    """
    Same as pyxcrypt.crypt_checksalt but returns True for CRYPT_SALT_OK
    and False otherwise.

    :param salt: salt generated by crypt_gensalt;
    :type salt: str, bytes-like object;
    :return: True for CRYPT_SALT_OK and False otherwise;
    :rtype: bool.
    """
    return pyxcrypt._crypt_checksalt(salt) == CRYPT_SALT_OK


def crypt(phrase, salt=crypt_gensalt()):
    """
    Irreversibly "hash" phrase using a cryptographic "hashing method".
    By default parameter "salt" set to crypt_gensalt() without args, which
    generates salt with the default "hashing method" with random bytes
    obtained from the operating system.

    :param phrase: phrase to be "hashed";
    :type phrase: str, bytes-like object;
    :param salt: salt, generated by crypt_gensalt;
    :type salt: str, bytes-like object;
    :return: "hashed" phrase;
    :rtype: str.
    """
    return pyxcrypt._crypt(phrase, salt)
