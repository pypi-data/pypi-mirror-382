[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cpg-flow"
description = "CPG Flow API for Hail Batch"
requires-python = ">=3.10,<3.11"
readme = "README.md"
license-files = ["LICENSE"]
dynamic = ["version"]
dependencies = [
    "cpg-utils>=5.4.2",
    # Pin Hail at CPG"s installed version
    "hail==0.2.134",
    "grpcio>=1.53.0",
    # Avoid dependency resolution backtracking, Python 3.10 compatibility
    "grpcio-status>=1.48,<1.50",
    "loguru>0.7.0",
    "metamist>=6.9.0",
    "networkx>=3.4.2",
    "pyyaml>=6.0.2",
    "plotly>=5.24.1",
    "ipywidgets>=8.1.5",
    "pre-commit>=4.0.1",
    # Security adjustments
    "tornado>=6.5",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",

    # Indicate who your project is intended for
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Bio-Informatics",

    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX",
    "Operating System :: Unix",

    # Specify the Python versions you support here.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]
keywords = ["hail", "flow", "api", "bioinformatics", "genomics"]

[tool.uv]
dev-dependencies = [
    "black>=24.10.0",
    "build>=1.2.2.post1",
    "bump2version>=1.0.1",
    "commitizen>=3.30.0",
    "coverage>=7.6.4",
    "hail>=0.2.133",
    "pip-audit>=2.7.3",
    "pylint>=3.3.1",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "python-semantic-release>=9.4.1",
    "pyyaml>=6.0.2",
    "ruff>=0.5.2",
    "toml>=0.10.2",
    "twine>=5.1.1",
    "mkdocs-material>=9.5.50",
    "mkdocstrings[python]>=0.27.0",
    "griffe-typingdoc>=0.2.7",
    "mike>=2.1.3",
    "pyright>=1.1.400",
]

[project.urls]
Repository = "https://github.com/populationgenomics/cpg-flow"

[tool.ruff]
line-length = 120
extend-exclude = ["venv", ".mypy_cache", ".tox", ".venv", "build", "dist"]

[tool.ruff.lint]
select = ["A", "B", "C", "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TID", "UP", "YTT"]
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TID", "UP", "YTT"]
ignore = ["A001", "A002", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "ANN204", "ANN205", "ANN401", "ARG001", "ARG002", "ARG005", "B006", "B007", "B008", "B023", "B904", "BLE001", "C400", "C401", "C403", "C405", "C408", "C416", "C417", "C419", "C901", "COM812", "COM819", "DTZ002", "DTZ005", "DTZ011", "E401", "E402", "E501", "E712", "E713", "E731", "E741", "ERA001", "EXE001", "F401", "F403", "F821", "F841", "G001", "G002", "G003", "G004", "ISC001", "ISC002", "ISC003", "N802", "N803", "N805", "N806", "N818", "N999", "PD003", "PD010", "PD011", "PD901", "PGH003", "PIE790", "PIE804", "PIE808", "PIE810", "PLR0402", "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLR1711", "PLR1714", "PLR2004", "PLR5501", "PLW0603", "PLW1510", "PLW2901", "Q000", "Q001", "Q002", "Q003", "RET501", "RET503", "RET504", "RET505", "RET506", "RET507", "RUF002", "RUF005", "RUF010", "RUF012", "RUF013", "RUF015", "RUF100", "S101", "S105", "S108", "S113", "S301", "S310", "S311", "S324", "S506", "S602", "S603", "S605", "S607", "S608", "SIM102", "SIM105", "SIM108", "SIM115", "SIM117", "SIM118", "SIM201", "SIM212", "SIM300", "SLF001", "TID252", "UP007", "UP015", "UP020", "UP026", "UP030", "UP031", "UP032", "W291", "W292", "W605"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "hail", "cpg", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
hail = ["hail", "hailtop"]
cpg = ["analysis_runner", "cpg_infra", "cpg_utils", "cpg_flow", "gnomad", "hail_scripts", "metamist"]

[tool.ruff.format]
quote-style = "single"

[tool.coverage.run]
omit = ["test/*", "setup.py"]

[tool.pyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "basic"

[tool.semantic_release]
version_variables = [
    "src/cpg_flow/__init__.py:__version__",
    "Dockerfile:VERSION",
    ".github/workflows/docker.yaml:VERSION",
    ".github/workflows/test.yaml:VERSION",
]
assets = []
build_command_env = []
commit_message = "bump: {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
repo_dir = "."
no_git_verify = false
tag_format = "v{version}"
build_command = "make ci-build"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.prerelease]
match = "alpha"
prerelease_token = "alpha"
prerelease = true

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
    "chore",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
token = { env = "GITHUB_TOKEN" }
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_pypi = false
upload_to_test_pypi = true
upload_to_vcs_release = false

[tool.setuptools.dynamic.version]
attr = "cpg_flow.__version__"

[tool.setuptools.package-data]
cpg_flow = ["defaults.toml"]

[tool.setuptools.packages.find]
where = ["src"]
