"""Create initial schema

Revision ID: 3335c0eac68e
Revises: 9f06f8c8088d
Create Date: 2025-09-19 23:07:49.420156

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "3335c0eac68e"
down_revision: Union[str, Sequence[str], None] = "9f06f8c8088d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cleanup_configs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("strategy", sa.String(), nullable=False),
        sa.Column("keep_within_days", sa.Integer(), nullable=True),
        sa.Column("keep_daily", sa.Integer(), nullable=True),
        sa.Column("keep_weekly", sa.Integer(), nullable=True),
        sa.Column("keep_monthly", sa.Integer(), nullable=True),
        sa.Column("keep_yearly", sa.Integer(), nullable=True),
        sa.Column("show_list", sa.Boolean(), nullable=False),
        sa.Column("show_stats", sa.Boolean(), nullable=False),
        sa.Column("save_space", sa.Boolean(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("cleanup_configs", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_cleanup_configs_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_cleanup_configs_name"), ["name"], unique=False
        )

    op.create_table(
        "cloud_sync_configs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("provider", sa.String(), nullable=False),
        sa.Column("provider_config", sa.Text(), nullable=False),
        sa.Column("path_prefix", sa.String(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("cloud_sync_configs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_cloud_sync_configs_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_cloud_sync_configs_name"), ["name"], unique=False
        )

    op.create_table(
        "notification_configs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("provider", sa.String(), nullable=False),
        sa.Column("provider_config", sa.Text(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("notification_configs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_notification_configs_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_notification_configs_name"), ["name"], unique=False
        )

    op.create_table(
        "repositories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("encrypted_passphrase", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_repositories_id"), ["id"], unique=False)
        batch_op.create_index(batch_op.f("ix_repositories_name"), ["name"], unique=True)

    op.create_table(
        "repository_check_configs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("check_type", sa.String(), nullable=False),
        sa.Column("verify_data", sa.Boolean(), nullable=False),
        sa.Column("repair_mode", sa.Boolean(), nullable=False),
        sa.Column("save_space", sa.Boolean(), nullable=False),
        sa.Column("max_duration", sa.Integer(), nullable=True),
        sa.Column("archive_prefix", sa.String(), nullable=True),
        sa.Column("archive_glob", sa.String(), nullable=True),
        sa.Column("first_n_archives", sa.Integer(), nullable=True),
        sa.Column("last_n_archives", sa.Integer(), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("repository_check_configs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_repository_check_configs_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_repository_check_configs_name"), ["name"], unique=False
        )

    op.create_table(
        "settings",
        sa.Column("key", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("key"),
    )
    with op.batch_alter_table("settings", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_settings_key"), ["key"], unique=False)

    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_users_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_users_username"), ["username"], unique=True
        )

    op.create_table(
        "jobs",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("repository_id", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("finished_at", sa.DateTime(), nullable=True),
        sa.Column("log_output", sa.Text(), nullable=True),
        sa.Column("error", sa.Text(), nullable=True),
        sa.Column("container_id", sa.String(), nullable=True),
        sa.Column("cloud_sync_config_id", sa.Integer(), nullable=True),
        sa.Column("cleanup_config_id", sa.Integer(), nullable=True),
        sa.Column("check_config_id", sa.Integer(), nullable=True),
        sa.Column("notification_config_id", sa.Integer(), nullable=True),
        sa.Column("job_type", sa.String(), nullable=False),
        sa.Column("total_tasks", sa.Integer(), nullable=False),
        sa.Column("completed_tasks", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["check_config_id"],
            ["repository_check_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["cleanup_config_id"],
            ["cleanup_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["cloud_sync_config_id"],
            ["cloud_sync_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["notification_config_id"],
            ["notification_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"],
            ["repositories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_jobs_id"), ["id"], unique=False)

    op.create_table(
        "schedules",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("repository_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("cron_expression", sa.String(), nullable=False),
        sa.Column("source_path", sa.String(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("last_run", sa.DateTime(), nullable=True),
        sa.Column("next_run", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("cloud_sync_config_id", sa.Integer(), nullable=True),
        sa.Column("cleanup_config_id", sa.Integer(), nullable=True),
        sa.Column("check_config_id", sa.Integer(), nullable=True),
        sa.Column("notification_config_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["check_config_id"],
            ["repository_check_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["cleanup_config_id"],
            ["cleanup_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["cloud_sync_config_id"],
            ["cloud_sync_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["notification_config_id"],
            ["notification_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"],
            ["repositories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("schedules", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_schedules_id"), ["id"], unique=False)

    op.create_table(
        "user_sessions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("session_token", sa.String(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("remember_me", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("last_activity", sa.DateTime(), nullable=False),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("ip_address", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("user_sessions", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_user_sessions_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_user_sessions_session_token"), ["session_token"], unique=True
        )

    op.create_table(
        "job_tasks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("job_id", sa.String(), nullable=False),
        sa.Column("task_type", sa.String(), nullable=False),
        sa.Column("task_name", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("output", sa.Text(), nullable=True),
        sa.Column("error", sa.Text(), nullable=True),
        sa.Column("return_code", sa.Integer(), nullable=True),
        sa.Column("task_order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["jobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("job_tasks", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_job_tasks_id"), ["id"], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table("job_tasks", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_job_tasks_id"))

    op.drop_table("job_tasks")
    with op.batch_alter_table("user_sessions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_sessions_session_token"))
        batch_op.drop_index(batch_op.f("ix_user_sessions_id"))

    op.drop_table("user_sessions")
    with op.batch_alter_table("schedules", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_schedules_id"))

    op.drop_table("schedules")
    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_jobs_id"))

    op.drop_table("jobs")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_username"))
        batch_op.drop_index(batch_op.f("ix_users_id"))

    op.drop_table("users")
    with op.batch_alter_table("settings", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_settings_key"))

    op.drop_table("settings")
    with op.batch_alter_table("repository_check_configs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_repository_check_configs_name"))
        batch_op.drop_index(batch_op.f("ix_repository_check_configs_id"))

    op.drop_table("repository_check_configs")
    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_repositories_name"))
        batch_op.drop_index(batch_op.f("ix_repositories_id"))

    op.drop_table("repositories")
    with op.batch_alter_table("notification_configs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_notification_configs_name"))
        batch_op.drop_index(batch_op.f("ix_notification_configs_id"))

    op.drop_table("notification_configs")
    with op.batch_alter_table("cloud_sync_configs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_cloud_sync_configs_name"))
        batch_op.drop_index(batch_op.f("ix_cloud_sync_configs_id"))

    op.drop_table("cloud_sync_configs")
    with op.batch_alter_table("cleanup_configs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_cleanup_configs_name"))
        batch_op.drop_index(batch_op.f("ix_cleanup_configs_id"))

    op.drop_table("cleanup_configs")
    # ### end Alembic commands ###
