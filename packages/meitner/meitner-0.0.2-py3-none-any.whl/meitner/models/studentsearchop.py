"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .studentfilter import StudentFilter, StudentFilterTypedDict
from .studentsearch import StudentSearch, StudentSearchTypedDict
from meitner.types import BaseModel
from meitner.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
from typing import Awaitable, Callable, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class StudentSearchRequestTypedDict(TypedDict):
    student_filter: StudentFilterTypedDict
    r"""Request body"""
    limit: NotRequired[int]
    r"""The maximum number of Students to return (default: 50) when searching Students"""
    offset: NotRequired[int]
    r"""The number of Students to skip before starting to return results (default: 0) when searching Students"""


class StudentSearchRequest(BaseModel):
    student_filter: Annotated[
        StudentFilter,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""Request body"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""The maximum number of Students to return (default: 50) when searching Students"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""The number of Students to skip before starting to return results (default: 0) when searching Students"""


class StudentSearchResponseTypedDict(TypedDict):
    result: StudentSearchTypedDict


class StudentSearchResponse(BaseModel):
    next: Union[
        Callable[[], Optional[StudentSearchResponse]],
        Callable[[], Awaitable[Optional[StudentSearchResponse]]],
    ]

    result: StudentSearch
