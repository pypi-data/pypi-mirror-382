define parallel flow process user input
  """Run all the input rails on the user input."""
  event UtteranceUserActionFinished(final_transcript="...")
  $user_message = $event["final_transcript"]

  # If we have input rails, we run them, otherwise we just create the user message event
  if $config.rails.input.flows
    # If we have generation options, we make sure the input rails are enabled.
    if $generation_options is None or $generation_options.rails.input:
      # Create a marker event.
      create event StartInputRails
      event StartInputRails

      # Run all the input rails
      # This can potentially alter the $user_message
      do run input rails

      # Create a marker event.
      create event InputRailsFinished
      event InputRailsFinished

  create event UserMessage(text=$user_message)


define flow run dialog rails
  """Generate the user's intent based on the text."""
  event UserMessage(text="...")

  # If the dialog_rails are disabled
  if $generation_options and $generation_options.rails.dialog == False
    # If the output rails are also disabled, we just return user message.
    if $generation_options.rails.output == False
      create event StartUtteranceBotAction(script=$user_message)
    else
      # we take the $bot_message from context.
      create event BotMessage(text=$bot_message)
  else
    # If not, we continue the usual process
    do generate user intent


define subflow generate user intent
  """Generates the user intent."""
  execute generate_user_intent


define subflow run input rails
  """Runs all the input rails in a sequential order. """
  $input_flows = $config.rails.input.flows

  if $config.rails.input.parallel
    execute run_input_rails_in_parallel(flows=$input_flows)
  else
    $i = 0
    while $i < len($input_flows)
      # We set the current rail as being triggered.
      $triggered_input_rail = $input_flows[$i]

      create event StartInputRail(flow_id=$triggered_input_rail)
      event StartInputRail

      do $input_flows[$i]
      $i = $i + 1

      create event InputRailFinished(flow_id=$triggered_input_rail)
      event InputRailFinished

      # If all went smooth, we remove it.
      $triggered_input_rail = None



define flow generate next step
  """Generate the next step when there isn't any.

  We set the priority at 0.9 so it is lower than the default which is 1. So, if there
  is a flow that has a next step, it will have priority over this one.
  """
  priority 0.9

  user ...
  execute generate_next_step


define parallel extension flow generate bot message
  """Generate the bot utterance for a bot message.

  We always want to generate an utterance after a bot intent, hence the high priority.
  """
  priority 100

  bot ...
  execute retrieve_relevant_chunks

  # If we have any retrieval rails, we run them.
  if $config.rails.retrieval.flows
    # If we have generation options, we make sure the retrieval rails are enabled.
    if $generation_options is None or $generation_options.rails.retrieval:
      do run retrieval rails

  # $output_rails_enabled = True
  execute generate_bot_message


define parallel extension flow process bot tool call
  """Processes tool calls from the bot."""
  priority 100

  event BotToolCalls

  $tool_calls = $event.tool_calls

  # Run tool-specific output rails if configured (Phase 2)
  if $config.rails.tool_output.flows
    # If we have generation options, we make sure the tool output rails are enabled.
    if $generation_options is None or $generation_options.rails.tool_output:
      # Create a marker event.
      create event StartToolOutputRails
      event StartToolOutputRails

      # Run all the tool output rails
      # This can potentially alter or block the tool calls
      do run tool output rails

      # Create a marker event.
      create event ToolOutputRailsFinished
      event ToolOutputRailsFinished

  # Create the action event for tool execution
  create event StartToolCallBotAction(tool_calls=$tool_calls)


define parallel flow process user tool messages
  """Run all the tool input rails on the tool messages."""
  priority 200
  event UserToolMessages

  $tool_messages = $event["tool_messages"]

  # If we have tool input rails, we run them, otherwise we just create the user message event
  if $config.rails.tool_input.flows
    # If we have generation options, we make sure the tool input rails are enabled.
    $tool_input_enabled = True
    if $generation_options is not None
      if $generation_options.rails.tool_input == False
        $tool_input_enabled = False

    if $tool_input_enabled:
      create event StartToolInputRails
      event StartToolInputRails

      $i = 0
      while $i < len($tool_messages)
        $tool_message = $tool_messages[$i].content
        $tool_name = $tool_messages[$i].name
        if "tool_call_id" in $tool_messages[$i]
          $tool_call_id = $tool_messages[$i].tool_call_id
        else
          $tool_call_id = ""

        do run tool input rails
        $i = $i + 1

      create event ToolInputRailsFinished
      event ToolInputRailsFinished

define parallel extension flow process bot message
  """Runs the output rails on a bot message."""
  priority 100

  event BotMessage

  $bot_message = $event.text

  if $skip_output_rails
    $skip_output_rails = False
  else
    # If we have any output flows, we run them.
    if $config.rails.output.flows
      # If we have generation options, we make sure the output rails are enabled.
      if $generation_options is None or $generation_options.rails.output:
        # Create a marker event.
        create event StartOutputRails
        event StartOutputRails

        # Run all the output rails
        # This can potentially alter the $user_message
        do run output rails

        # Create a marker event.
        create event OutputRailsFinished
        event OutputRailsFinished

  create event StartUtteranceBotAction(script=$bot_message)


define subflow run output rails
  """Runs all the output rails in a sequential order. """
  $output_flows = $config.rails.output.flows

  if $config.rails.output.parallel
    execute run_output_rails_in_parallel(flows=$output_flows)
  else
    $i = 0
    while $i < len($output_flows)
      # We set the current rail as being triggered.
      $triggered_output_rail = $output_flows[$i]

      create event StartOutputRail(flow_id=$triggered_output_rail)
      event StartOutputRail

      do $output_flows[$i]
      $i = $i + 1

      create event OutputRailFinished(flow_id=$triggered_output_rail)
      event OutputRailFinished

      # If all went smooth, we remove it.
      $triggered_output_rail = None


define subflow run retrieval rails
  """Runs all the retrieval rails in a sequential order. """
  $i = 0
  $retrieval_flows = $config.rails.retrieval.flows
  while $i < len($retrieval_flows)
    do $retrieval_flows[$i]
    $i = $i + 1


define subflow run tool output rails
  """Runs all the tool output rails in a sequential order."""
  $tool_output_flows = $config.rails.tool_output.flows

  $i = 0
  while $i < len($tool_output_flows)
    # We set the current rail as being triggered.
    $triggered_tool_output_rail = $tool_output_flows[$i]

    create event StartToolOutputRail(flow_id=$triggered_tool_output_rail)
    event StartToolOutputRail

    do $tool_output_flows[$i]
    $i = $i + 1

    create event ToolOutputRailFinished(flow_id=$triggered_tool_output_rail)
    event ToolOutputRailFinished

    # If all went smooth, we remove it.
    $triggered_tool_output_rail = None

define subflow run tool input rails
  """Runs all the tool input rails in a sequential order."""
  $tool_input_flows = $config.rails.tool_input.flows

  $i = 0
  while $i < len($tool_input_flows)
    # We set the current rail as being triggered.
    $triggered_tool_input_rail = $tool_input_flows[$i]

    create event StartToolInputRail(flow_id=$triggered_tool_input_rail)
    event StartToolInputRail

    do $tool_input_flows[$i]
    $i = $i + 1

    create event ToolInputRailFinished(flow_id=$triggered_tool_input_rail)
    event ToolInputRailFinished

    # If all went smooth, we remove it.
    $triggered_tool_input_rail = None
