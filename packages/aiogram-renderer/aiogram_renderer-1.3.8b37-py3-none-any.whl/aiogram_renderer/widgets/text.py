from typing import Any
from .widget import Widget


class Text(Widget):
    __slots__ = ("content", "end", "end_count")

    def __init__(self, content: str, end: str = "\n", end_count: int = 0, show_on: str = None):
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç end_count
        self.content = content
        self.end = end
        self.end_count = end_count
        super().__init__(show_on=show_on)

    async def assemble(self, data: dict[str, Any]) -> str:
        if not (await self.is_show_on(data)):
            return ""

        text = self.content
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ data, –µ—Å–ª–∏ —Ç–∞–º –∑–∞–¥–∞–Ω—ã –∫–ª—é—á–∏ {key}
        for key, value in data.items():
            if "{" + key + "}" in text:
                text = text.replace("{" + key + "}", str(value))

        return text + "".join([self.end for _ in range(self.end_count)])


class Area(Widget):
    __slots__ = ('texts', 'sep', 'sep_count', 'end', 'end_count')

    def __init__(self, *texts: Text | str, sep: str = "\n", sep_count: int = 1, end: str = "\n",
                 end_count: int = 0, show_on: str = None):
        self.texts = list(texts)
        self.sep = sep
        self.sep_count = sep_count
        self.end = end
        self.end_count = end_count
        super().__init__(show_on=show_on)

    async def assemble(self, data: dict[str, Any]):
        if not (await self.is_show_on(data)):
            return ""

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, —É—á–∏—Ç—ã–≤–∞—è –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ—Å–ª–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        separators = "".join([self.sep for _ in range(self.sep_count)])

        texts_list = []
        for text in self.texts:
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–∂–µ—Ç
            if isinstance(text, Text):
                # –ï—Å–ª–∏ when –≤ –∫–ª—é—á–∞—Ö data, —Ç–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                if text.show_on in data.keys():
                    # –ï—Å–ª–∏ when = False, –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º text
                    if not data[text.show_on]:
                        continue
                asm_text = await text.assemble(data=data)
                texts_list.append(asm_text + separators)
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            else:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ data, –µ—Å–ª–∏ —Ç–∞–º –∑–∞–¥–∞–Ω—ã –∫–ª—é—á–∏ {key}
                for key, value in data.items():
                    if "{" + key + "}" in text:
                        text = text.replace("{" + key + "}", str(value))

                texts_list.append(text + separators)

        # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–∫—Ä—ã—Ç—ã –≤—ã–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if len(texts_list) == 0:
            return ""
        # –í –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ —Ä–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º end
        else:
            content = "".join(texts_list)[:-self.sep_count] + "".join([self.end for _ in range(self.end_count)])

        return content


class Bold(Text):
    __slots__ = ()

    def __init__(self, content: str, end: str = "\n", end_count: int = 0, show_on: str = None):
        super().__init__(content=f"<b>{content}</b>", end=end, end_count=end_count, show_on=show_on)


class Italic(Text):
    __slots__ = ()

    def __init__(self, content: str, end: str = "\n", end_count: int = 0, show_on: str = None):
        super().__init__(content=f"<i>{content}</i>", end=end, end_count=end_count, show_on=show_on)


class Code(Text):
    __slots__ = ()

    def __init__(self, content: str, end: str = "\n", end_count: int = 0, show_on: str = None):
        super().__init__(content=f"<code>{content}</code>", end=end, end_count=end_count, show_on=show_on)


class Underline(Text):
    __slots__ = ()

    def __init__(self, content: str, end: str = "\n", end_count: int = 0, show_on: str = None):
        super().__init__(content=f"<u>{content}</u>", end=end, end_count=end_count, show_on=show_on)


class Blockquote(Text):
    __slots__ = ()

    def __init__(self, content: str, end: str = "\n", end_count: int = 0, show_on: str = None):
        super().__init__(content=f"<blockquote>{content}</blockquote>", end=end, end_count=end_count, show_on=show_on)


class Progress(Widget):
    __slots__ = ('name', 'load', 'no_load', 'add_percent', 'postfix', 'prefix')

    def __init__(self, name: str, load: str = "üü•", no_load: str = "‚¨ú",
                 add_percent: bool = False, prefix: str = "", postfix: str = "", show_on: str = None):
        """
        –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        :param name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        :param load: —Å–∏–º–≤–æ–ª –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        :param no_load: —Å–∏–º–≤–æ–ª –¥–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        :param add_percent: —Ñ–ª–∞–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        :return:
        """
        assert (len(load) == 1) and (len(no_load) == 1), ValueError("–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã load –∏ no_load")
        self.name = name
        self.load = load
        self.no_load = no_load
        self.add_percent = add_percent
        self.postfix = postfix
        self.prefix = prefix
        super().__init__(show_on=show_on)

    async def assemble(self, data: dict[str, Any]):
        if not (await self.is_show_on(data)):
            return ""

        percent = data[self.name] if self.name in data else 0
        assert 0.0 <= percent <= 100.0, ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 0 –¥–æ 100")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É–±–∏—Ä–∞—è 0.0, 100.0 –∏ –¥–æ–±–∞–≤–ª—è—è –ø–æ—Å—Ç—Ñ–∏–∫—Å, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
        percent = 0 if percent == 0.0 else 100 if percent == 100.0 else percent
        percents_postfix = f" {percent}%" if self.add_percent else ""

        # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
        format_percent = 0 if percent == 0 else max(int(percent) // 10, 1)
        list_load = [self.load for i_l in range(format_percent)]
        list_no_load = [self.no_load for i_nl in range(10 - len(list_load))]
        progress_bar = "".join(list_load) + "".join(list_no_load)

        return self.prefix + progress_bar + percents_postfix + self.postfix
