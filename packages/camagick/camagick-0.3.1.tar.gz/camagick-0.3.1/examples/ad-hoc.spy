#!/usr/local/bin/caspy -y

# This demonstrates an Ad-Hoc IOC with a "busy" marker.
#
# The IOC just generates random data ( :iffy and :jiffy),
# but could just as well publis "real" data from a non-EPICS
# source.
#
# The trick here is the :mark PV, which is set to 1 as the
# data is about to be generated, and reset to 0 after the
# new data has been published.
#
# With different kind of input filters (e.g. via pipe, or
# exec/shell script), this can serve as a base for a rapid
# ad-hoc Bash-based IOC for hardware which provides simple
# shell commands for control (e.g. via netcat/telnet/curl?)

chain:

# Step 1: generating a PV for "adhoc:mark"
- from: ioc
  params:
    prefix: "EXAMPLE:"
    mark: "mark(0)"

# Step 2: generate and publish data
- from: scratch
  params:
    method: "random"
    iffy: 1
    jedda: 2048

- via: [ "only", ".*iffy", ".*jedda" ]

- to: ioc
  params:
    prefix: "EXAMPLE:"

# Step 3: "blink" the "adhoc:mark" PV. The "idle" marker will
# let be known that data has been published, while the "busy"
# marker afterwards will prepare the new round for new incoming
# data.
#
# As a cosmetic touch, we place the "pace" pipe between the markers,
# so that timestamps on the EPICS data will cluster the
# "busy-publish-idle" closer together. But this isn't strictly
# necessary, as the sequence will be retained anyway, and "pace"
# will slow down the sequence regardless of where exactly it is
# placed.

- from: scratch
  params:
    - "zeros"
    - "idle"

- to: epics
  params:
    idle: "EXAMPLE:mark"

- via: pace
  params:
    Hz: 1.0
      
- from: scratch
  params:
    - "ones"
    - "busy"
      
- to: epics
  params:
    busy: "EXAMPLE:mark"
