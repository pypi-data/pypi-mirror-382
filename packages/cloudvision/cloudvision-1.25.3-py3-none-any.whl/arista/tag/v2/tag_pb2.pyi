"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
Use of this source code is governed by the Apache License 2.0
that can be found in the COPYING file.
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ElementType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ElementTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ElementType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ELEMENT_TYPE_UNSPECIFIED: _ElementType.ValueType  # 0
    """ELEMENT_TYPE_UNSPECIFIED is the default value."""
    ELEMENT_TYPE_DEVICE: _ElementType.ValueType  # 1
    """ELEMENT_TYPE_DEVICE is used for device tags."""
    ELEMENT_TYPE_INTERFACE: _ElementType.ValueType  # 2
    """ELEMENT_TYPE_INTERFACE is used for interface tags."""
    ELEMENT_TYPE_VIRTUAL: _ElementType.ValueType  # 3
    """ELEMENT_TYPE_VIRTUAL is used for virtual entities(applications/services) tags."""

class ElementType(_ElementType, metaclass=_ElementTypeEnumTypeWrapper):
    """ElementType enumerates the types of network elements that can
    be associated with tags.
    """

ELEMENT_TYPE_UNSPECIFIED: ElementType.ValueType  # 0
"""ELEMENT_TYPE_UNSPECIFIED is the default value."""
ELEMENT_TYPE_DEVICE: ElementType.ValueType  # 1
"""ELEMENT_TYPE_DEVICE is used for device tags."""
ELEMENT_TYPE_INTERFACE: ElementType.ValueType  # 2
"""ELEMENT_TYPE_INTERFACE is used for interface tags."""
ELEMENT_TYPE_VIRTUAL: ElementType.ValueType  # 3
"""ELEMENT_TYPE_VIRTUAL is used for virtual entities(applications/services) tags."""
global___ElementType = ElementType

class _ElementSubType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ElementSubTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ElementSubType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ELEMENT_SUB_TYPE_UNSPECIFIED: _ElementSubType.ValueType  # 0
    """ELEMENT_SUB_TYPE_UNSPECIFIED is the default value."""
    ELEMENT_SUB_TYPE_DEVICE: _ElementSubType.ValueType  # 1
    """ELEMENT_SUB_TYPE_DEVICE is used for EOS or
    third-party devices discovered via LLDP/SNMP.
    """
    ELEMENT_SUB_TYPE_VDS: _ElementSubType.ValueType  # 2
    """ELEMENT_SUB_TYPE_VDS is used for VMWare vSphere Distributed Switch (VDS) tags."""
    ELEMENT_SUB_TYPE_WORKLOAD_SERVER: _ElementSubType.ValueType  # 3
    """ELEMENT_SUB_TYPE_WORKLOAD_SERVER is used for workload server
    tags (such as VMWare ESXi host).
    A workload server is a server/data storage device on which
    the hypervisor is installed.
    """
    ELEMENT_SUB_TYPE_VM: _ElementSubType.ValueType  # 4
    """ELEMENT_SUB_TYPE_VM is used for VM tags.
    A VM is a software computer that, like a physical computer,
    runs an operating system and applications.
    """
    ELEMENT_SUB_TYPE_APPLICATION: _ElementSubType.ValueType  # 5
    """ELEMENT_SUB_TYPE_APPLICATION is used for application tags.
    An application is defined as a set of services where each service provides
    a subset of the application’s functionality. An application can exist without
    a service but not vice-versa.
    """

class ElementSubType(_ElementSubType, metaclass=_ElementSubTypeEnumTypeWrapper):
    """ElementSubType enumerates the sub-types of network elements that can
    be associated with tags.
    """

ELEMENT_SUB_TYPE_UNSPECIFIED: ElementSubType.ValueType  # 0
"""ELEMENT_SUB_TYPE_UNSPECIFIED is the default value."""
ELEMENT_SUB_TYPE_DEVICE: ElementSubType.ValueType  # 1
"""ELEMENT_SUB_TYPE_DEVICE is used for EOS or
third-party devices discovered via LLDP/SNMP.
"""
ELEMENT_SUB_TYPE_VDS: ElementSubType.ValueType  # 2
"""ELEMENT_SUB_TYPE_VDS is used for VMWare vSphere Distributed Switch (VDS) tags."""
ELEMENT_SUB_TYPE_WORKLOAD_SERVER: ElementSubType.ValueType  # 3
"""ELEMENT_SUB_TYPE_WORKLOAD_SERVER is used for workload server
tags (such as VMWare ESXi host).
A workload server is a server/data storage device on which
the hypervisor is installed.
"""
ELEMENT_SUB_TYPE_VM: ElementSubType.ValueType  # 4
"""ELEMENT_SUB_TYPE_VM is used for VM tags.
A VM is a software computer that, like a physical computer,
runs an operating system and applications.
"""
ELEMENT_SUB_TYPE_APPLICATION: ElementSubType.ValueType  # 5
"""ELEMENT_SUB_TYPE_APPLICATION is used for application tags.
An application is defined as a set of services where each service provides
a subset of the application’s functionality. An application can exist without
a service but not vice-versa.
"""
global___ElementSubType = ElementSubType

class _CreatorType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CreatorTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CreatorType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    CREATOR_TYPE_UNSPECIFIED: _CreatorType.ValueType  # 0
    """CREATOR_TYPE_UNSPECIFIED is the default value."""
    CREATOR_TYPE_SYSTEM: _CreatorType.ValueType  # 1
    """CREATOR_TYPE_SYSTEM is used for system tags."""
    CREATOR_TYPE_USER: _CreatorType.ValueType  # 2
    """CREATOR_TYPE_USER is used for user tags."""
    CREATOR_TYPE_EXTERNAL: _CreatorType.ValueType  # 3
    """CREATOR_TYPE_EXTERNAL is used for tags created from external sources.
    For E.g., vCenter
    """

class CreatorType(_CreatorType, metaclass=_CreatorTypeEnumTypeWrapper):
    """CreatorType enumerates the types of entities that can create
    a tag.
    """

CREATOR_TYPE_UNSPECIFIED: CreatorType.ValueType  # 0
"""CREATOR_TYPE_UNSPECIFIED is the default value."""
CREATOR_TYPE_SYSTEM: CreatorType.ValueType  # 1
"""CREATOR_TYPE_SYSTEM is used for system tags."""
CREATOR_TYPE_USER: CreatorType.ValueType  # 2
"""CREATOR_TYPE_USER is used for user tags."""
CREATOR_TYPE_EXTERNAL: CreatorType.ValueType  # 3
"""CREATOR_TYPE_EXTERNAL is used for tags created from external sources.
For E.g., vCenter
"""
global___CreatorType = CreatorType

@typing.final
class TagKey(google.protobuf.message.Message):
    """TagKey uniquely identifies a tag."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WORKSPACE_ID_FIELD_NUMBER: builtins.int
    ELEMENT_TYPE_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    ELEMENT_SUB_TYPE_FIELD_NUMBER: builtins.int
    element_type: global___ElementType.ValueType
    """element_type is the category of network element to which
    this tag can be assigned.
    """
    element_sub_type: global___ElementSubType.ValueType
    """element_sub_type is the sub-category of network element
    to which this tag can be assigned.
    """
    @property
    def workspace_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """workspace_id is the ID of a workspace. The special ID ""
        identifies the location where merged tags reside.
        """

    @property
    def label(self) -> google.protobuf.wrappers_pb2.StringValue:
        """label is an arbitrary label."""

    @property
    def value(self) -> google.protobuf.wrappers_pb2.StringValue:
        """value is an arbitrary value."""

    def __init__(
        self,
        *,
        workspace_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        element_type: global___ElementType.ValueType = ...,
        label: google.protobuf.wrappers_pb2.StringValue | None = ...,
        value: google.protobuf.wrappers_pb2.StringValue | None = ...,
        element_sub_type: global___ElementSubType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["label", b"label", "value", b"value", "workspace_id", b"workspace_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["element_sub_type", b"element_sub_type", "element_type", b"element_type", "label", b"label", "value", b"value", "workspace_id", b"workspace_id"]) -> None: ...

global___TagKey = TagKey

@typing.final
class TagConfig(google.protobuf.message.Message):
    """TagConfig holds a configuration for a user tag.
    The tags that belong to entities other than ELEMENT_SUB_TYPE_DEVICE
    will always be present in mainline only.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    REMOVE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___TagKey:
        """key identifies a tag. The special workspace ID "" for
        merged tags should not be set here.
        """

    @property
    def remove(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """remove indicates whether to remove (true) or add (false,
        unset) the tag identified by the key if the encompassing
        workspace merges.
        """

    def __init__(
        self,
        *,
        key: global___TagKey | None = ...,
        remove: google.protobuf.wrappers_pb2.BoolValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "remove", b"remove"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "remove", b"remove"]) -> None: ...

global___TagConfig = TagConfig

@typing.final
class Tag(google.protobuf.message.Message):
    """Tag holds a merge-preview or the existing merged state (if the
    workspace ID is "") of a tag.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    CREATOR_TYPE_FIELD_NUMBER: builtins.int
    ASSIGNED_FIELD_NUMBER: builtins.int
    creator_type: global___CreatorType.ValueType
    """creator_type is the creator type of the tag."""
    @property
    def key(self) -> global___TagKey:
        """key identifies a tag."""

    @property
    def assigned(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """assigned indicates whether the tag is assigned
        (true) or not (false).
        """

    def __init__(
        self,
        *,
        key: global___TagKey | None = ...,
        creator_type: global___CreatorType.ValueType = ...,
        assigned: google.protobuf.wrappers_pb2.BoolValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["assigned", b"assigned", "key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["assigned", b"assigned", "creator_type", b"creator_type", "key", b"key"]) -> None: ...

global___Tag = Tag

@typing.final
class TagAssignmentKey(google.protobuf.message.Message):
    """TagAssignmentKey uniquely identifies an assignment between
    a tag and a network element.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WORKSPACE_ID_FIELD_NUMBER: builtins.int
    ELEMENT_TYPE_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    DEVICE_ID_FIELD_NUMBER: builtins.int
    INTERFACE_ID_FIELD_NUMBER: builtins.int
    ELEMENT_SUB_TYPE_FIELD_NUMBER: builtins.int
    PRIMARY_ENTITY_ID_FIELD_NUMBER: builtins.int
    SECONDARY_ENTITY_ID_FIELD_NUMBER: builtins.int
    element_type: global___ElementType.ValueType
    """element_type is the element type of a tag. What should
    be set per element type:

    ELEMENT_TYPE_DEVICE: device_id
    ELEMENT_TYPE_INTERFACE: device_id, interface_id
    ELEMENT_TYPE_VIRTUAL:
    		primary_entity_id -> application_id
    		secondary_entity_id -> service_id
    """
    element_sub_type: global___ElementSubType.ValueType
    """element_sub_type is the element sub-type of a tag."""
    @property
    def workspace_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """workspace_id is the ID of a workspace. The special ID ""
        identifies the location where merged assignments reside.
        """

    @property
    def label(self) -> google.protobuf.wrappers_pb2.StringValue:
        """label is the label of a tag."""

    @property
    def value(self) -> google.protobuf.wrappers_pb2.StringValue:
        """value is the value of a tag."""

    @property
    def device_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """device_id identifies a device."""

    @property
    def interface_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """interface_id identifies an interface on a device."""

    @property
    def primary_entity_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """primary_entity_id holds unique identifiers of an application/device. 
        The primary entity is the entity which can exist by itself or can be 
        associated with a secondary entity.
        """

    @property
    def secondary_entity_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """secondary_entity_id holds unique identifier of a service/interface. The secondary 
        entity is the entity which cannot exist by itself and always has to be associated 
        with a primary entity.
        """

    def __init__(
        self,
        *,
        workspace_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        element_type: global___ElementType.ValueType = ...,
        label: google.protobuf.wrappers_pb2.StringValue | None = ...,
        value: google.protobuf.wrappers_pb2.StringValue | None = ...,
        device_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        interface_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        element_sub_type: global___ElementSubType.ValueType = ...,
        primary_entity_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        secondary_entity_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["device_id", b"device_id", "interface_id", b"interface_id", "label", b"label", "primary_entity_id", b"primary_entity_id", "secondary_entity_id", b"secondary_entity_id", "value", b"value", "workspace_id", b"workspace_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["device_id", b"device_id", "element_sub_type", b"element_sub_type", "element_type", b"element_type", "interface_id", b"interface_id", "label", b"label", "primary_entity_id", b"primary_entity_id", "secondary_entity_id", b"secondary_entity_id", "value", b"value", "workspace_id", b"workspace_id"]) -> None: ...

global___TagAssignmentKey = TagAssignmentKey

@typing.final
class TagAssignmentConfig(google.protobuf.message.Message):
    """TagAssignmentConfig holds a configuration for an assignment
    between a tag and a network element.
    The tag assignments that belong to entities other than ELEMENT_SUB_TYPE_DEVICE
    will always be present in mainline only.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    REMOVE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___TagAssignmentKey:
        """key identifies an assignment. The special workspace ID ""
        for merged assignments should not be set here.
        """

    @property
    def remove(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """remove indicates whether to remove (true) or add (false,
        unset) the assignment identified by the key if the
        encompassing workspace merges.
        """

    def __init__(
        self,
        *,
        key: global___TagAssignmentKey | None = ...,
        remove: google.protobuf.wrappers_pb2.BoolValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "remove", b"remove"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "remove", b"remove"]) -> None: ...

global___TagAssignmentConfig = TagAssignmentConfig

@typing.final
class TagAssignment(google.protobuf.message.Message):
    """TagAssignment holds a merge-preview or the existing merged
    state (if the workspace ID is "") of an assignment between
    a tag and a network element.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TAG_CREATOR_TYPE_FIELD_NUMBER: builtins.int
    tag_creator_type: global___CreatorType.ValueType
    """tag_creator_type is the creator type of the tag
    involved in the assignment.
    """
    @property
    def key(self) -> global___TagAssignmentKey:
        """key identifies an assignment."""

    def __init__(
        self,
        *,
        key: global___TagAssignmentKey | None = ...,
        tag_creator_type: global___CreatorType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "tag_creator_type", b"tag_creator_type"]) -> None: ...

global___TagAssignment = TagAssignment

@typing.final
class ElementFilter(google.protobuf.message.Message):
    """ElementFilter is a custom filter for elements."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SEARCH_FIELD_NUMBER: builtins.int
    @property
    def search(self) -> global___ElementSearchFilter:
        """search can be used to search for elements via a tag query."""

    def __init__(
        self,
        *,
        search: global___ElementSearchFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["search", b"search"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["search", b"search"]) -> None: ...

global___ElementFilter = ElementFilter

@typing.final
class ElementSearchFilter(google.protobuf.message.Message):
    """ElementSearchFilter is a filter that can be used to search for a set of
    elements using a tag query.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUERY_ELEMENT_TYPE_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    WORKSPACE_ID_FIELD_NUMBER: builtins.int
    EXCLUDE_UNREGISTERED_ELEMENTS_FIELD_NUMBER: builtins.int
    IGNORE_TOPOLOGY_TAGS_FIELD_NUMBER: builtins.int
    query_element_type: global___ElementType.ValueType
    """query_element_type (required) indicates the type of element against which
    the query will be executed. To search by sub-type, use the special "type:"
    tag from within the query.
    """
    @property
    def query(self) -> google.protobuf.wrappers_pb2.StringValue:
        """query (required) is a tag query. This is a string that specifies a set of
        tag assignment conditions. For example:

        - "Campus:SF"
            Match any device that has the "Campus:SF" tag assigned to it.
            I.e., match any device in the SF campus.
        - "Campus:*"
            Match any device that has any "Campus:" tag assigned to it.
            I.e., match any device in any campus.
        - "Campus:SF AND Role:Spine"
            Match any device that has the "Campus:SF" and "Role:Spine"
            tag assigned to it.
            I.e., match any spine device in the SF campus.

        TODO: Link to grammar file.
        """

    @property
    def workspace_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """workspace_id is the ID of a workspace. If set, it indicates that the
        search space should be constrained only to the elements that are known
        or configured in the given workspace.
        """

    @property
    def exclude_unregistered_elements(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """exclude_unregistered_elements indicates whether elements that are not registered
        in the Inventory and Topology (I&T) Studio should be excluded from the results.
        """

    @property
    def ignore_topology_tags(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """ignore_topology_tags indicates whether topology_hint tags should be ignored during
        the execution of the query.
        """

    def __init__(
        self,
        *,
        query_element_type: global___ElementType.ValueType = ...,
        query: google.protobuf.wrappers_pb2.StringValue | None = ...,
        workspace_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        exclude_unregistered_elements: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        ignore_topology_tags: google.protobuf.wrappers_pb2.BoolValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exclude_unregistered_elements", b"exclude_unregistered_elements", "ignore_topology_tags", b"ignore_topology_tags", "query", b"query", "workspace_id", b"workspace_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exclude_unregistered_elements", b"exclude_unregistered_elements", "ignore_topology_tags", b"ignore_topology_tags", "query", b"query", "query_element_type", b"query_element_type", "workspace_id", b"workspace_id"]) -> None: ...

global___ElementSearchFilter = ElementSearchFilter

@typing.final
class ElementKey(google.protobuf.message.Message):
    """ElementKey uniquely identifies a tagged or untagged network element."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    SUB_TYPE_FIELD_NUMBER: builtins.int
    PRIMARY_ID_FIELD_NUMBER: builtins.int
    SECONDARY_ID_FIELD_NUMBER: builtins.int
    type: global___ElementType.ValueType
    """type is the type of the element."""
    sub_type: global___ElementSubType.ValueType
    """sub_type is the sub-type of the element."""
    @property
    def primary_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """primary_id is the device ID of the element. The value of
        this ID is based on type and sub_type:

        type: DEVICE
          sub_type: DEVICE
            id: <serial_number>
          sub_type: VDS, WORKLOAD_SERVER, VM
            id: <uuid>
        type: INTERFACE
          sub_type: DEVICE
            id: <serial_number>
          sub_type: VDS, WORKLOAD_SERVER, VM
            id: <uuid>
        type: VIRTUAL
          sub_type: APPLICATION
            id: <application_id>
        """

    @property
    def secondary_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """secondary_id is the interface ID of the element. The value of
        this ID is based on type and sub_type:

        type: DEVICE
          N/A
        type: INTERFACE
          sub_type: DEVICE
            id: <interface_name>
          sub_type: VDS, WORKLOAD_SERVER, VM
            id: <interface_name>
        type: VIRTUAL
          sub_type: APPLICATION
            id: <service_id>
        """

    def __init__(
        self,
        *,
        type: global___ElementType.ValueType = ...,
        sub_type: global___ElementSubType.ValueType = ...,
        primary_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        secondary_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["primary_id", b"primary_id", "secondary_id", b"secondary_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["primary_id", b"primary_id", "secondary_id", b"secondary_id", "sub_type", b"sub_type", "type", b"type"]) -> None: ...

global___ElementKey = ElementKey

@typing.final
class Element(google.protobuf.message.Message):
    """Element holds basic information about a tagged or untagged network
    element.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___ElementKey:
        """key uniquely identifies the element."""

    def __init__(
        self,
        *,
        key: global___ElementKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key"]) -> None: ...

global___Element = Element
