"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Code generated by boomtown. DO NOT EDIT.
"""

import arista.subscriptions.subscriptions_pb2
import arista.tag.v2.tag_pb2
import arista.time.time_pb2
import builtins
import collections.abc
import fmp.deletes_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class MetaResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of the last item included in the metadata calculation."""

    @property
    def count(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Count is the number of items present under the conditions of the request."""

    def __init__(
        self,
        *,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
        count: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["count", b"count", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["count", b"count", "time", b"time", "type", b"type"]) -> None: ...

global___MetaResponse = MetaResponse

@typing.final
class ElementRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.ElementKey:
        """Key uniquely identifies a Element instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.ElementKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___ElementRequest = ElementRequest

@typing.final
class ElementResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.Element:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        Element instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.Element | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___ElementResponse = ElementResponse

@typing.final
class ElementSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.ElementKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.tag.v2.tag_pb2.ElementKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___ElementSomeRequest = ElementSomeRequest

@typing.final
class ElementSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.Element:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        Element instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.Element | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___ElementSomeResponse = ElementSomeResponse

@typing.final
class ElementStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.Element]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def filter(self) -> arista.tag.v2.tag_pb2.ElementFilter:
        """For each Element in the list, all populated fields are considered ANDed together
        as a filtering operation. Similarly, the list itself is ORed such that any individual
        filter that matches a given Element is streamed to the user.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each Element at end.
            * Each Element response is fully-specified (all fields set).
          * start: Returns the state of each Element at start, followed by updates until now.
            * Each Element response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each Element at start, followed by updates
            until end.
            * Each Element response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.Element] | None = ...,
        filter: arista.tag.v2.tag_pb2.ElementFilter | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ElementStreamRequest = ElementStreamRequest

@typing.final
class ElementStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the Element value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.tag.v2.tag_pb2.Element:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this Element's last modification."""

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.Element | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___ElementStreamResponse = ElementStreamResponse

@typing.final
class ElementBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.Element]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def filter(self) -> arista.tag.v2.tag_pb2.ElementFilter:
        """For each Element in the list, all populated fields are considered ANDed together
        as a filtering operation. Similarly, the list itself is ORed such that any individual
        filter that matches a given Element is streamed to the user.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each Element at end.
            * Each Element response is fully-specified (all fields set).
          * start: Returns the state of each Element at start, followed by updates until now.
            * Each Element response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each Element at start, followed by updates
            until end.
            * Each Element response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.Element] | None = ...,
        filter: arista.tag.v2.tag_pb2.ElementFilter | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ElementBatchedStreamRequest = ElementBatchedStreamRequest

@typing.final
class ElementBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ElementStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___ElementStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___ElementBatchedStreamResponse = ElementBatchedStreamResponse

@typing.final
class TagRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagKey:
        """Key uniquely identifies a Tag instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___TagRequest = TagRequest

@typing.final
class TagResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.Tag:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        Tag instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.Tag | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___TagResponse = TagResponse

@typing.final
class TagSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___TagSomeRequest = TagSomeRequest

@typing.final
class TagSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.Tag:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        Tag instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.Tag | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___TagSomeResponse = TagSomeResponse

@typing.final
class TagStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.Tag]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each Tag at end.
            * Each Tag response is fully-specified (all fields set).
          * start: Returns the state of each Tag at start, followed by updates until now.
            * Each Tag response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each Tag at start, followed by updates
            until end.
            * Each Tag response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.Tag] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagStreamRequest = TagStreamRequest

@typing.final
class TagStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the Tag value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.tag.v2.tag_pb2.Tag:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this Tag's last modification."""

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.Tag | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___TagStreamResponse = TagStreamResponse

@typing.final
class TagBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.Tag]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each Tag at end.
            * Each Tag response is fully-specified (all fields set).
          * start: Returns the state of each Tag at start, followed by updates until now.
            * Each Tag response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each Tag at start, followed by updates
            until end.
            * Each Tag response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.Tag] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagBatchedStreamRequest = TagBatchedStreamRequest

@typing.final
class TagBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TagStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___TagStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___TagBatchedStreamResponse = TagBatchedStreamResponse

@typing.final
class TagAssignmentRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagAssignmentKey:
        """Key uniquely identifies a TagAssignment instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___TagAssignmentRequest = TagAssignmentRequest

@typing.final
class TagAssignmentResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignment:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        TagAssignment instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignment | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___TagAssignmentResponse = TagAssignmentResponse

@typing.final
class TagAssignmentSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignmentKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignmentKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___TagAssignmentSomeRequest = TagAssignmentSomeRequest

@typing.final
class TagAssignmentSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignment:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        TagAssignment instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignment | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___TagAssignmentSomeResponse = TagAssignmentSomeResponse

@typing.final
class TagAssignmentStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignment]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each TagAssignment at end.
            * Each TagAssignment response is fully-specified (all fields set).
          * start: Returns the state of each TagAssignment at start, followed by updates until now.
            * Each TagAssignment response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each TagAssignment at start, followed by updates
            until end.
            * Each TagAssignment response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignment] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagAssignmentStreamRequest = TagAssignmentStreamRequest

@typing.final
class TagAssignmentStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the TagAssignment value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignment:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this TagAssignment's last modification."""

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignment | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___TagAssignmentStreamResponse = TagAssignmentStreamResponse

@typing.final
class TagAssignmentBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignment]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each TagAssignment at end.
            * Each TagAssignment response is fully-specified (all fields set).
          * start: Returns the state of each TagAssignment at start, followed by updates until now.
            * Each TagAssignment response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each TagAssignment at start, followed by updates
            until end.
            * Each TagAssignment response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignment] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagAssignmentBatchedStreamRequest = TagAssignmentBatchedStreamRequest

@typing.final
class TagAssignmentBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TagAssignmentStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___TagAssignmentStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___TagAssignmentBatchedStreamResponse = TagAssignmentBatchedStreamResponse

@typing.final
class TagAssignmentConfigRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagAssignmentKey:
        """Key uniquely identifies a TagAssignmentConfig instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___TagAssignmentConfigRequest = TagAssignmentConfigRequest

@typing.final
class TagAssignmentConfigResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignmentConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        TagAssignmentConfig instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignmentConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___TagAssignmentConfigResponse = TagAssignmentConfigResponse

@typing.final
class TagAssignmentConfigSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignmentKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignmentKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___TagAssignmentConfigSomeRequest = TagAssignmentConfigSomeRequest

@typing.final
class TagAssignmentConfigSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignmentConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        TagAssignmentConfig instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignmentConfig | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___TagAssignmentConfigSomeResponse = TagAssignmentConfigSomeResponse

@typing.final
class TagAssignmentConfigStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignmentConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each TagAssignmentConfig at end.
            * Each TagAssignmentConfig response is fully-specified (all fields set).
          * start: Returns the state of each TagAssignmentConfig at start, followed by updates until now.
            * Each TagAssignmentConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each TagAssignmentConfig at start, followed by updates
            until end.
            * Each TagAssignmentConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignmentConfig] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagAssignmentConfigStreamRequest = TagAssignmentConfigStreamRequest

@typing.final
class TagAssignmentConfigStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the TagAssignmentConfig value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignmentConfig:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this TagAssignmentConfig's last modification."""

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignmentConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___TagAssignmentConfigStreamResponse = TagAssignmentConfigStreamResponse

@typing.final
class TagAssignmentConfigBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignmentConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each TagAssignmentConfig at end.
            * Each TagAssignmentConfig response is fully-specified (all fields set).
          * start: Returns the state of each TagAssignmentConfig at start, followed by updates until now.
            * Each TagAssignmentConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each TagAssignmentConfig at start, followed by updates
            until end.
            * Each TagAssignmentConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignmentConfig] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagAssignmentConfigBatchedStreamRequest = TagAssignmentConfigBatchedStreamRequest

@typing.final
class TagAssignmentConfigBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TagAssignmentConfigStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___TagAssignmentConfigStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___TagAssignmentConfigBatchedStreamResponse = TagAssignmentConfigBatchedStreamResponse

@typing.final
class TagAssignmentConfigSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignmentConfig:
        """TagAssignmentConfig carries the value to set into the datastore.
        See the documentation on the TagAssignmentConfig struct for which fields are required.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignmentConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___TagAssignmentConfigSetRequest = TagAssignmentConfigSetRequest

@typing.final
class TagAssignmentConfigSetResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagAssignmentConfig:
        """Value carries all the values given in the TagAssignmentConfigSetRequest as well
        as any server-generated values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        creation. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==CreatedAt will include this instance.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagAssignmentConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___TagAssignmentConfigSetResponse = TagAssignmentConfigSetResponse

@typing.final
class TagAssignmentConfigSetSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignmentConfig]:
        """value contains a list of TagAssignmentConfig values to write.
        It is possible to provide more values than can fit within either:
            - the maxiumum send size of the client
            - the maximum receive size of the server
        If this error occurs you must reduce the number of values sent.
        See gRPC "maximum message size" documentation for more information.
        """

    def __init__(
        self,
        *,
        values: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignmentConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___TagAssignmentConfigSetSomeRequest = TagAssignmentConfigSetSomeRequest

@typing.final
class TagAssignmentConfigSetSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagAssignmentKey: ...
    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagAssignmentKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___TagAssignmentConfigSetSomeResponse = TagAssignmentConfigSetSomeResponse

@typing.final
class TagAssignmentConfigDeleteRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagAssignmentKey:
        """Key indicates which TagAssignmentConfig instance to remove.
        This field must always be set.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagAssignmentKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key"]) -> None: ...

global___TagAssignmentConfigDeleteRequest = TagAssignmentConfigDeleteRequest

@typing.final
class TagAssignmentConfigDeleteResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagAssignmentKey:
        """Key echoes back the key of the deleted TagAssignmentConfig instance."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        deletion. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==DeletedAt will not include this instance.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___TagAssignmentConfigDeleteResponse = TagAssignmentConfigDeleteResponse

@typing.final
class TagAssignmentConfigDeleteSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignmentKey]:
        """key contains a list of TagAssignmentConfig keys to delete"""

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignmentKey] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys"]) -> None: ...

global___TagAssignmentConfigDeleteSomeRequest = TagAssignmentConfigDeleteSomeRequest

@typing.final
class TagAssignmentConfigDeleteSomeResponse(google.protobuf.message.Message):
    """TagAssignmentConfigDeleteSomeResponse is only sent when there is an error."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagAssignmentKey: ...
    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagAssignmentKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___TagAssignmentConfigDeleteSomeResponse = TagAssignmentConfigDeleteSomeResponse

@typing.final
class TagAssignmentConfigDeleteAllRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagAssignmentConfig]:
        """PartialEqFilter provides a way to server-side filter a DeleteAll.
        This requires all provided fields to be equal to the response.
        A filtered DeleteAll will use GetAll with filter to find things to delete.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagAssignmentConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter"]) -> None: ...

global___TagAssignmentConfigDeleteAllRequest = TagAssignmentConfigDeleteAllRequest

@typing.final
class TagAssignmentConfigDeleteAllResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    type: fmp.deletes_pb2.DeleteError.ValueType
    """This describes the class of delete error.
    A DeleteAllResponse is only sent when there is an error.
    """
    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """This indicates the error message from the delete failure."""

    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagAssignmentKey:
        """This is the key of the TagAssignmentConfig instance that failed to be deleted."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp when the key was being deleted."""

    def __init__(
        self,
        *,
        type: fmp.deletes_pb2.DeleteError.ValueType = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        key: arista.tag.v2.tag_pb2.TagAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time", "type", b"type"]) -> None: ...

global___TagAssignmentConfigDeleteAllResponse = TagAssignmentConfigDeleteAllResponse

@typing.final
class TagConfigRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagKey:
        """Key uniquely identifies a TagConfig instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___TagConfigRequest = TagConfigRequest

@typing.final
class TagConfigResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        TagConfig instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___TagConfigResponse = TagConfigResponse

@typing.final
class TagConfigSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___TagConfigSomeRequest = TagConfigSomeRequest

@typing.final
class TagConfigSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        TagConfig instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagConfig | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___TagConfigSomeResponse = TagConfigSomeResponse

@typing.final
class TagConfigStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each TagConfig at end.
            * Each TagConfig response is fully-specified (all fields set).
          * start: Returns the state of each TagConfig at start, followed by updates until now.
            * Each TagConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each TagConfig at start, followed by updates
            until end.
            * Each TagConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagConfig] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagConfigStreamRequest = TagConfigStreamRequest

@typing.final
class TagConfigStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the TagConfig value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagConfig:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this TagConfig's last modification."""

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___TagConfigStreamResponse = TagConfigStreamResponse

@typing.final
class TagConfigBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each TagConfig at end.
            * Each TagConfig response is fully-specified (all fields set).
          * start: Returns the state of each TagConfig at start, followed by updates until now.
            * Each TagConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each TagConfig at start, followed by updates
            until end.
            * Each TagConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagConfig] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___TagConfigBatchedStreamRequest = TagConfigBatchedStreamRequest

@typing.final
class TagConfigBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TagConfigStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___TagConfigStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___TagConfigBatchedStreamResponse = TagConfigBatchedStreamResponse

@typing.final
class TagConfigSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagConfig:
        """TagConfig carries the value to set into the datastore.
        See the documentation on the TagConfig struct for which fields are required.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___TagConfigSetRequest = TagConfigSetRequest

@typing.final
class TagConfigSetResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.tag.v2.tag_pb2.TagConfig:
        """Value carries all the values given in the TagConfigSetRequest as well
        as any server-generated values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        creation. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==CreatedAt will include this instance.
        """

    def __init__(
        self,
        *,
        value: arista.tag.v2.tag_pb2.TagConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___TagConfigSetResponse = TagConfigSetResponse

@typing.final
class TagConfigSetSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagConfig]:
        """value contains a list of TagConfig values to write.
        It is possible to provide more values than can fit within either:
            - the maxiumum send size of the client
            - the maximum receive size of the server
        If this error occurs you must reduce the number of values sent.
        See gRPC "maximum message size" documentation for more information.
        """

    def __init__(
        self,
        *,
        values: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___TagConfigSetSomeRequest = TagConfigSetSomeRequest

@typing.final
class TagConfigSetSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagKey: ...
    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___TagConfigSetSomeResponse = TagConfigSetSomeResponse

@typing.final
class TagConfigDeleteRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagKey:
        """Key indicates which TagConfig instance to remove.
        This field must always be set.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key"]) -> None: ...

global___TagConfigDeleteRequest = TagConfigDeleteRequest

@typing.final
class TagConfigDeleteResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagKey:
        """Key echoes back the key of the deleted TagConfig instance."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        deletion. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==DeletedAt will not include this instance.
        """

    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___TagConfigDeleteResponse = TagConfigDeleteResponse

@typing.final
class TagConfigDeleteSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagKey]:
        """key contains a list of TagConfig keys to delete"""

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagKey] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys"]) -> None: ...

global___TagConfigDeleteSomeRequest = TagConfigDeleteSomeRequest

@typing.final
class TagConfigDeleteSomeResponse(google.protobuf.message.Message):
    """TagConfigDeleteSomeResponse is only sent when there is an error."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagKey: ...
    def __init__(
        self,
        *,
        key: arista.tag.v2.tag_pb2.TagKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___TagConfigDeleteSomeResponse = TagConfigDeleteSomeResponse

@typing.final
class TagConfigDeleteAllRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.tag.v2.tag_pb2.TagConfig]:
        """PartialEqFilter provides a way to server-side filter a DeleteAll.
        This requires all provided fields to be equal to the response.
        A filtered DeleteAll will use GetAll with filter to find things to delete.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.tag.v2.tag_pb2.TagConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter"]) -> None: ...

global___TagConfigDeleteAllRequest = TagConfigDeleteAllRequest

@typing.final
class TagConfigDeleteAllResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    type: fmp.deletes_pb2.DeleteError.ValueType
    """This describes the class of delete error.
    A DeleteAllResponse is only sent when there is an error.
    """
    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """This indicates the error message from the delete failure."""

    @property
    def key(self) -> arista.tag.v2.tag_pb2.TagKey:
        """This is the key of the TagConfig instance that failed to be deleted."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp when the key was being deleted."""

    def __init__(
        self,
        *,
        type: fmp.deletes_pb2.DeleteError.ValueType = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        key: arista.tag.v2.tag_pb2.TagKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time", "type", b"type"]) -> None: ...

global___TagConfigDeleteAllResponse = TagConfigDeleteAllResponse
