"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
Use of this source code is governed by the Apache License 2.0
that can be found in the COPYING file.
"""

import builtins
import collections.abc
import fmp.wrappers_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _EventSeverity:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _EventSeverityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EventSeverity.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EVENT_SEVERITY_UNSPECIFIED: _EventSeverity.ValueType  # 0
    """EVENT_SEVERITY_UNSPECIFIED is the default value, if the severity is not specified."""
    EVENT_SEVERITY_INFO: _EventSeverity.ValueType  # 1
    """EVENT_SEVERITY_INFO is used for generally useful information."""
    EVENT_SEVERITY_WARNING: _EventSeverity.ValueType  # 2
    """EVENT_SEVERITY_WARNING is used for potentially harmful conditions."""
    EVENT_SEVERITY_ERROR: _EventSeverity.ValueType  # 3
    """EVENT_SEVERITY_ERROR is used for errors events that may allow for continued functioning."""
    EVENT_SEVERITY_CRITICAL: _EventSeverity.ValueType  # 4
    """EVENT_SEVERITY_CRITICAL is used to designate severe errors that impede functioning."""
    EVENT_SEVERITY_DEBUG: _EventSeverity.ValueType  # 5
    """EVENT_SEVERITY_DEBUG is used for debugging useful information."""

class EventSeverity(_EventSeverity, metaclass=_EventSeverityEnumTypeWrapper):
    """EventSeverity is the severity level of the event"""

EVENT_SEVERITY_UNSPECIFIED: EventSeverity.ValueType  # 0
"""EVENT_SEVERITY_UNSPECIFIED is the default value, if the severity is not specified."""
EVENT_SEVERITY_INFO: EventSeverity.ValueType  # 1
"""EVENT_SEVERITY_INFO is used for generally useful information."""
EVENT_SEVERITY_WARNING: EventSeverity.ValueType  # 2
"""EVENT_SEVERITY_WARNING is used for potentially harmful conditions."""
EVENT_SEVERITY_ERROR: EventSeverity.ValueType  # 3
"""EVENT_SEVERITY_ERROR is used for errors events that may allow for continued functioning."""
EVENT_SEVERITY_CRITICAL: EventSeverity.ValueType  # 4
"""EVENT_SEVERITY_CRITICAL is used to designate severe errors that impede functioning."""
EVENT_SEVERITY_DEBUG: EventSeverity.ValueType  # 5
"""EVENT_SEVERITY_DEBUG is used for debugging useful information."""
global___EventSeverity = EventSeverity

class _ComponentType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_TYPE_UNSPECIFIED: _ComponentType.ValueType  # 0
    """COMPONENT_TYPE_UNSPECIFIED is the default value, if the type is not specified."""
    COMPONENT_TYPE_DEVICE: _ComponentType.ValueType  # 1
    """COMPONENT_TYPE_DEVICE is used for device events."""
    COMPONENT_TYPE_INTERFACE: _ComponentType.ValueType  # 2
    """COMPONENT_TYPE_INTERFACE is used for device interface events."""
    COMPONENT_TYPE_TURBINE: _ComponentType.ValueType  # 3
    """COMPONENT_TYPE_TURBINE is used for events on the internal CVP turbine
    components. A turbine is an internal CV streaming analytics backend process.
    """
    COMPONENT_TYPE_VDS: _ComponentType.ValueType  # 4
    """COMPONENT_TYPE_VDS is used for VDS events.
    A vSphere Distributed Switch provides centralized management and
    monitoring of the networking configuration of all workload servers that are
    associated with the switch.
    """
    COMPONENT_TYPE_VDS_INTERFACE: _ComponentType.ValueType  # 5
    """COMPONENT_TYPE_VDS_INTERFACE is used for VDS interface events."""
    COMPONENT_TYPE_VM: _ComponentType.ValueType  # 6
    """COMPONENT_TYPE_VM is used for VM events.
    A VM is a software computer that, like a physical computer, runs an
    operating system and applications.
    """
    COMPONENT_TYPE_VM_INTERFACE: _ComponentType.ValueType  # 7
    """COMPONENT_TYPE_VM_INTERFACE is used for VM interface events."""
    COMPONENT_TYPE_WORKLOAD_SERVER: _ComponentType.ValueType  # 8
    """COMPONENT_TYPE_WORKLOAD_SERVER is used for workload server events.
    A workload server is a server/data storage device on which the hypervisor is installed.
    """
    COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE: _ComponentType.ValueType  # 9
    """COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE is used for workload server interface events."""
    COMPONENT_TYPE_APPLICATION: _ComponentType.ValueType  # 10
    """COMPONENT_TYPE_APPLICATION is used for application-service events."""
    COMPONENT_TYPE_CVP_NODE: _ComponentType.ValueType  # 11
    """COMPONENT_TYPE_CVP_NODE is used for CVP node events."""

class ComponentType(_ComponentType, metaclass=_ComponentTypeEnumTypeWrapper):
    """ComponentType describes the type of entity on which the event occurred"""

COMPONENT_TYPE_UNSPECIFIED: ComponentType.ValueType  # 0
"""COMPONENT_TYPE_UNSPECIFIED is the default value, if the type is not specified."""
COMPONENT_TYPE_DEVICE: ComponentType.ValueType  # 1
"""COMPONENT_TYPE_DEVICE is used for device events."""
COMPONENT_TYPE_INTERFACE: ComponentType.ValueType  # 2
"""COMPONENT_TYPE_INTERFACE is used for device interface events."""
COMPONENT_TYPE_TURBINE: ComponentType.ValueType  # 3
"""COMPONENT_TYPE_TURBINE is used for events on the internal CVP turbine
components. A turbine is an internal CV streaming analytics backend process.
"""
COMPONENT_TYPE_VDS: ComponentType.ValueType  # 4
"""COMPONENT_TYPE_VDS is used for VDS events.
A vSphere Distributed Switch provides centralized management and
monitoring of the networking configuration of all workload servers that are
associated with the switch.
"""
COMPONENT_TYPE_VDS_INTERFACE: ComponentType.ValueType  # 5
"""COMPONENT_TYPE_VDS_INTERFACE is used for VDS interface events."""
COMPONENT_TYPE_VM: ComponentType.ValueType  # 6
"""COMPONENT_TYPE_VM is used for VM events.
A VM is a software computer that, like a physical computer, runs an
operating system and applications.
"""
COMPONENT_TYPE_VM_INTERFACE: ComponentType.ValueType  # 7
"""COMPONENT_TYPE_VM_INTERFACE is used for VM interface events."""
COMPONENT_TYPE_WORKLOAD_SERVER: ComponentType.ValueType  # 8
"""COMPONENT_TYPE_WORKLOAD_SERVER is used for workload server events.
A workload server is a server/data storage device on which the hypervisor is installed.
"""
COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE: ComponentType.ValueType  # 9
"""COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE is used for workload server interface events."""
COMPONENT_TYPE_APPLICATION: ComponentType.ValueType  # 10
"""COMPONENT_TYPE_APPLICATION is used for application-service events."""
COMPONENT_TYPE_CVP_NODE: ComponentType.ValueType  # 11
"""COMPONENT_TYPE_CVP_NODE is used for CVP node events."""
global___ComponentType = ComponentType

class _MaintenanceModeFilter:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _MaintenanceModeFilterEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MaintenanceModeFilter.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    MAINTENANCE_MODE_FILTER_UNSPECIFIED: _MaintenanceModeFilter.ValueType  # 0
    """MAINTENANCE_MODE_FILTER_UNSPECIFIED is the default value when no filter is specified.
    This returns all events, whether they were generated during maintenance mode or not.
    """
    MAINTENANCE_MODE_FILTER_ONLY_NON_MAINTENANCE_MODE: _MaintenanceModeFilter.ValueType  # 1
    """MAINTENANCE_MODE_FILTER_ONLY_NON_MAINTENANCE_MODE is used to exclude events generated
    during maintenance mode.
    """
    MAINTENANCE_MODE_FILTER_ONLY_MAINTENANCE_MODE: _MaintenanceModeFilter.ValueType  # 2
    """MAINTENANCE_MODE_FILTER_ONLY_MAINTENANCE_MODE is used to return only events generated
    during maintenance mode.
    """

class MaintenanceModeFilter(_MaintenanceModeFilter, metaclass=_MaintenanceModeFilterEnumTypeWrapper):
    """MaintenanceModeFilter specifies filtering options for events based on whether they were
    generated while the source was in maintenance mode.
    """

MAINTENANCE_MODE_FILTER_UNSPECIFIED: MaintenanceModeFilter.ValueType  # 0
"""MAINTENANCE_MODE_FILTER_UNSPECIFIED is the default value when no filter is specified.
This returns all events, whether they were generated during maintenance mode or not.
"""
MAINTENANCE_MODE_FILTER_ONLY_NON_MAINTENANCE_MODE: MaintenanceModeFilter.ValueType  # 1
"""MAINTENANCE_MODE_FILTER_ONLY_NON_MAINTENANCE_MODE is used to exclude events generated
during maintenance mode.
"""
MAINTENANCE_MODE_FILTER_ONLY_MAINTENANCE_MODE: MaintenanceModeFilter.ValueType  # 2
"""MAINTENANCE_MODE_FILTER_ONLY_MAINTENANCE_MODE is used to return only events generated
during maintenance mode.
"""
global___MaintenanceModeFilter = MaintenanceModeFilter

@typing.final
class EventComponent(google.protobuf.message.Message):
    """EventComponent describes an entity on which the event occurred"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ComponentsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    COMPONENTS_FIELD_NUMBER: builtins.int
    type: global___ComponentType.ValueType
    """type is the type of component"""
    @property
    def components(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """components identifies the entity on which the event occurred"""

    def __init__(
        self,
        *,
        type: global___ComponentType.ValueType = ...,
        components: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["components", b"components", "type", b"type"]) -> None: ...

global___EventComponent = EventComponent

@typing.final
class EventComponents(google.protobuf.message.Message):
    """EventComponents contains entities on which an event occurred"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENTS_FIELD_NUMBER: builtins.int
    @property
    def components(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EventComponent]:
        """components describes the components on which an event occurred"""

    def __init__(
        self,
        *,
        components: collections.abc.Iterable[global___EventComponent] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["components", b"components"]) -> None: ...

global___EventComponents = EventComponents

@typing.final
class EventAck(google.protobuf.message.Message):
    """EventAck contains acknowledgement information of an event"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACK_FIELD_NUMBER: builtins.int
    ACKER_FIELD_NUMBER: builtins.int
    ACK_TIME_FIELD_NUMBER: builtins.int
    @property
    def ack(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """ack is the acknowledgement state of an event"""

    @property
    def acker(self) -> google.protobuf.wrappers_pb2.StringValue:
        """acker is the user that acknowledged the event"""

    @property
    def ack_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """ack_time is the time of acknowledgement"""

    def __init__(
        self,
        *,
        ack: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        acker: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ack_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ack", b"ack", "ack_time", b"ack_time", "acker", b"acker"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ack", b"ack", "ack_time", b"ack_time", "acker", b"acker"]) -> None: ...

global___EventAck = EventAck

@typing.final
class EventRead(google.protobuf.message.Message):
    """EventRead contains read information of an event"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    READ_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    @property
    def read(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """read is the read state of an event"""

    @property
    def reader(self) -> google.protobuf.wrappers_pb2.StringValue:
        """reader is the user that read the event"""

    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """read_time is the time of read"""

    def __init__(
        self,
        *,
        read: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        reader: google.protobuf.wrappers_pb2.StringValue | None = ...,
        read_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["read", b"read", "read_time", b"read_time", "reader", b"reader"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["read", b"read", "read_time", b"read_time", "reader", b"reader"]) -> None: ...

global___EventRead = EventRead

@typing.final
class EventNoteConfig(google.protobuf.message.Message):
    """EventNoteConfig configures a note

    NOTE: note is required when used as an argument
          to Set.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NOTE_FIELD_NUMBER: builtins.int
    @property
    def note(self) -> google.protobuf.wrappers_pb2.StringValue:
        """note is the text of the note"""

    def __init__(
        self,
        *,
        note: google.protobuf.wrappers_pb2.StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["note", b"note"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["note", b"note"]) -> None: ...

global___EventNoteConfig = EventNoteConfig

@typing.final
class EventNote(google.protobuf.message.Message):
    """EventNote is the state of a note"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NOTE_FIELD_NUMBER: builtins.int
    NOTE_CREATOR_FIELD_NUMBER: builtins.int
    @property
    def note(self) -> google.protobuf.wrappers_pb2.StringValue:
        """note is the text of the note"""

    @property
    def note_creator(self) -> google.protobuf.wrappers_pb2.StringValue:
        """note_creator is the creator of the note"""

    def __init__(
        self,
        *,
        note: google.protobuf.wrappers_pb2.StringValue | None = ...,
        note_creator: google.protobuf.wrappers_pb2.StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["note", b"note", "note_creator", b"note_creator"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["note", b"note", "note_creator", b"note_creator"]) -> None: ...

global___EventNote = EventNote

@typing.final
class EventKey(google.protobuf.message.Message):
    """EventKey uniquely identifies an event

    NOTE: All fields are required when used as an argument
          to GetOne, Set or Delete.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> google.protobuf.wrappers_pb2.StringValue:
        """key is the event data identifier"""

    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """timestamp is the time the event occurred"""

    def __init__(
        self,
        *,
        key: google.protobuf.wrappers_pb2.StringValue | None = ...,
        timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "timestamp", b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "timestamp", b"timestamp"]) -> None: ...

global___EventKey = EventKey

@typing.final
class EventData(google.protobuf.message.Message):
    """EventData is additional event data"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class DataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    DATA_FIELD_NUMBER: builtins.int
    @property
    def data(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """data is event data specific to the type of this event"""

    def __init__(
        self,
        *,
        data: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["data", b"data"]) -> None: ...

global___EventData = EventData

@typing.final
class EventNotesConfig(google.protobuf.message.Message):
    """EventNotesConfig configures the notes of an event

    NOTE: notes is required when used as an argument
          to Set.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___EventNoteConfig: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___EventNoteConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NOTES_FIELD_NUMBER: builtins.int
    @property
    def notes(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___EventNoteConfig]:
        """notes is keyed by desired note time in Unix time, in milliseconds"""

    def __init__(
        self,
        *,
        notes: collections.abc.Mapping[builtins.int, global___EventNoteConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["notes", b"notes"]) -> None: ...

global___EventNotesConfig = EventNotesConfig

@typing.final
class EventAnnotationConfig(google.protobuf.message.Message):
    """EventAnnotationConfig configures an event annotation

    NOTE: Either 1) key and ack or 2) key and notes or 3) key and read are
          required when used as an argument to Set.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ACK_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    READ_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___EventKey:
        """key is the event instance identifier"""

    @property
    def ack(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """ack is the acknowledgement state of an event"""

    @property
    def notes(self) -> global___EventNotesConfig:
        """notes is the notes on an event"""

    @property
    def read(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """read is the read state of an event. Setting this implies that an event has been read by a user"""

    def __init__(
        self,
        *,
        key: global___EventKey | None = ...,
        ack: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        notes: global___EventNotesConfig | None = ...,
        read: google.protobuf.wrappers_pb2.BoolValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ack", b"ack", "key", b"key", "notes", b"notes", "read", b"read"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ack", b"ack", "key", b"key", "notes", b"notes", "read", b"read"]) -> None: ...

global___EventAnnotationConfig = EventAnnotationConfig

@typing.final
class EventNotes(google.protobuf.message.Message):
    """EventNotes is the notes of an event state"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___EventNote: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___EventNote | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NOTES_FIELD_NUMBER: builtins.int
    @property
    def notes(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___EventNote]:
        """notes is keyed by the time desired"""

    def __init__(
        self,
        *,
        notes: collections.abc.Mapping[builtins.int, global___EventNote] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["notes", b"notes"]) -> None: ...

global___EventNotes = EventNotes

@typing.final
class EventMetadataGroup(google.protobuf.message.Message):
    """EventMetadataGroup is a single metadata tag group for an event"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> fmp.wrappers_pb2.MapStringString:
        """values contains a collection of metadata tag key and value pairs"""

    def __init__(
        self,
        *,
        values: fmp.wrappers_pb2.MapStringString | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["values", b"values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___EventMetadataGroup = EventMetadataGroup

@typing.final
class EventMetadata(google.protobuf.message.Message):
    """EventMetadata is a list of all metadata tag groups for an event"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EventMetadataGroup]:
        """values contains a list of metadata tag groups for the event"""

    def __init__(
        self,
        *,
        values: collections.abc.Iterable[global___EventMetadataGroup] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___EventMetadata = EventMetadata

@typing.final
class Event(google.protobuf.message.Message):
    """Event is a telemetry event"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    SEVERITY_FIELD_NUMBER: builtins.int
    TITLE_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    EVENT_TYPE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    COMPONENTS_FIELD_NUMBER: builtins.int
    ACK_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    LAST_UPDATED_TIME_FIELD_NUMBER: builtins.int
    READ_FIELD_NUMBER: builtins.int
    RULE_ID_FIELD_NUMBER: builtins.int
    DELETE_TIME_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    severity: global___EventSeverity.ValueType
    """severity is the severity of the event"""
    @property
    def key(self) -> global___EventKey:
        """key is the event instance identifier"""

    @property
    def title(self) -> google.protobuf.wrappers_pb2.StringValue:
        """title is the title of the event"""

    @property
    def description(self) -> google.protobuf.wrappers_pb2.StringValue:
        """description is the description of the event"""

    @property
    def event_type(self) -> google.protobuf.wrappers_pb2.StringValue:
        """event_type is the type of the event"""

    @property
    def data(self) -> global___EventData:
        """data is the data of the event"""

    @property
    def components(self) -> global___EventComponents:
        """components is the components on which the event occurred"""

    @property
    def ack(self) -> global___EventAck:
        """ack is the acknowledgement status of the event"""

    @property
    def notes(self) -> global___EventNotes:
        """notes is the notes of the event"""

    @property
    def last_updated_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """last_updated_time is the time of the most recent update to the event"""

    @property
    def read(self) -> global___EventRead:
        """read is the read status of the event"""

    @property
    def rule_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """rule_id is the label of the rule associated with the event"""

    @property
    def delete_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """delete_time is the time when the event ended.
        It is nil if event is still ongoing
        """

    @property
    def metadata(self) -> global___EventMetadata:
        """metadata is the metadata tag key and value pairs of the event"""

    def __init__(
        self,
        *,
        key: global___EventKey | None = ...,
        severity: global___EventSeverity.ValueType = ...,
        title: google.protobuf.wrappers_pb2.StringValue | None = ...,
        description: google.protobuf.wrappers_pb2.StringValue | None = ...,
        event_type: google.protobuf.wrappers_pb2.StringValue | None = ...,
        data: global___EventData | None = ...,
        components: global___EventComponents | None = ...,
        ack: global___EventAck | None = ...,
        notes: global___EventNotes | None = ...,
        last_updated_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        read: global___EventRead | None = ...,
        rule_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        delete_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        metadata: global___EventMetadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ack", b"ack", "components", b"components", "data", b"data", "delete_time", b"delete_time", "description", b"description", "event_type", b"event_type", "key", b"key", "last_updated_time", b"last_updated_time", "metadata", b"metadata", "notes", b"notes", "read", b"read", "rule_id", b"rule_id", "title", b"title"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ack", b"ack", "components", b"components", "data", b"data", "delete_time", b"delete_time", "description", b"description", "event_type", b"event_type", "key", b"key", "last_updated_time", b"last_updated_time", "metadata", b"metadata", "notes", b"notes", "read", b"read", "rule_id", b"rule_id", "severity", b"severity", "title", b"title"]) -> None: ...

global___Event = Event

@typing.final
class UserEventCreationKey(google.protobuf.message.Message):
    """UserEventCreationKey uniquely identifies a user event request."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> google.protobuf.wrappers_pb2.StringValue:
        """key is a unique string identifier"""

    def __init__(
        self,
        *,
        key: google.protobuf.wrappers_pb2.StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key"]) -> None: ...

global___UserEventCreationKey = UserEventCreationKey

@typing.final
class UserEventCreationConfig(google.protobuf.message.Message):
    """UserEventCreationConfig is the basis for the manual creation of new events.

    NOTE: Set is the only valid operation.
          Objects are immediately deleted upon event creation.
          All fields are required to create a well-formed event.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    SEVERITY_FIELD_NUMBER: builtins.int
    TITLE_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    RULE_ID_FIELD_NUMBER: builtins.int
    COMPONENTS_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    severity: global___EventSeverity.ValueType
    """severity is the severity of the event"""
    @property
    def key(self) -> global___UserEventCreationKey:
        """key is the event instance identifier"""

    @property
    def title(self) -> google.protobuf.wrappers_pb2.StringValue:
        """title is the title of the event"""

    @property
    def description(self) -> google.protobuf.wrappers_pb2.StringValue:
        """description is the description of the event"""

    @property
    def rule_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """rule_id is the label of the rule associated with the event"""

    @property
    def components(self) -> global___EventComponents:
        """components is the components on which the event occurred"""

    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """start_time is the time point at which the event occurred"""

    def __init__(
        self,
        *,
        key: global___UserEventCreationKey | None = ...,
        severity: global___EventSeverity.ValueType = ...,
        title: google.protobuf.wrappers_pb2.StringValue | None = ...,
        description: google.protobuf.wrappers_pb2.StringValue | None = ...,
        rule_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
        components: global___EventComponents | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["components", b"components", "description", b"description", "key", b"key", "rule_id", b"rule_id", "start_time", b"start_time", "title", b"title"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["components", b"components", "description", b"description", "key", b"key", "rule_id", b"rule_id", "severity", b"severity", "start_time", b"start_time", "title", b"title"]) -> None: ...

global___UserEventCreationConfig = UserEventCreationConfig

@typing.final
class EventFilter(google.protobuf.message.Message):
    """EventFilter serves as a custom filter to events."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAINTENANCE_MODE_FILTER_FIELD_NUMBER: builtins.int
    maintenance_mode_filter: global___MaintenanceModeFilter.ValueType
    """maintenance_mode_filter specifies how maintenance mode events should be filtered."""
    def __init__(
        self,
        *,
        maintenance_mode_filter: global___MaintenanceModeFilter.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["maintenance_mode_filter", b"maintenance_mode_filter"]) -> None: ...

global___EventFilter = EventFilter
