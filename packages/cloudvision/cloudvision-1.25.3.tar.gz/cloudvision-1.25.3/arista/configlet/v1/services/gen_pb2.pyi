"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Code generated by boomtown. DO NOT EDIT.
"""

import arista.configlet.v1.configlet_pb2
import arista.subscriptions.subscriptions_pb2
import arista.time.time_pb2
import builtins
import collections.abc
import fmp.deletes_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class MetaResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of the last item included in the metadata calculation."""

    @property
    def count(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Count is the number of items present under the conditions of the request."""

    def __init__(
        self,
        *,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
        count: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["count", b"count", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["count", b"count", "time", b"time", "type", b"type"]) -> None: ...

global___MetaResponse = MetaResponse

@typing.final
class ConfigletRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletKey:
        """Key uniquely identifies a Configlet instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___ConfigletRequest = ConfigletRequest

@typing.final
class ConfigletResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.Configlet:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        Configlet instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.Configlet | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___ConfigletResponse = ConfigletResponse

@typing.final
class ConfigletSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___ConfigletSomeRequest = ConfigletSomeRequest

@typing.final
class ConfigletSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.Configlet:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.Configlet | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___ConfigletSomeResponse = ConfigletSomeResponse

@typing.final
class ConfigletStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.Configlet]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def filter(self) -> arista.configlet.v1.configlet_pb2.Filter:
        """For each Configlet in the list, all populated fields are considered ANDed together
        as a filtering operation. Similarly, the list itself is ORed such that any individual
        filter that matches a given Configlet is streamed to the user.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each Configlet at end.
            * Each Configlet response is fully-specified (all fields set).
          * start: Returns the state of each Configlet at start, followed by updates until now.
            * Each Configlet response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each Configlet at start, followed by updates
            until end.
            * Each Configlet response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.Configlet] | None = ...,
        filter: arista.configlet.v1.configlet_pb2.Filter | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletStreamRequest = ConfigletStreamRequest

@typing.final
class ConfigletStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the Configlet value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.Configlet:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this Configlet's last modification."""

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.Configlet | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___ConfigletStreamResponse = ConfigletStreamResponse

@typing.final
class ConfigletBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.Configlet]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def filter(self) -> arista.configlet.v1.configlet_pb2.Filter:
        """For each Configlet in the list, all populated fields are considered ANDed together
        as a filtering operation. Similarly, the list itself is ORed such that any individual
        filter that matches a given Configlet is streamed to the user.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each Configlet at end.
            * Each Configlet response is fully-specified (all fields set).
          * start: Returns the state of each Configlet at start, followed by updates until now.
            * Each Configlet response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each Configlet at start, followed by updates
            until end.
            * Each Configlet response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.Configlet] | None = ...,
        filter: arista.configlet.v1.configlet_pb2.Filter | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletBatchedStreamRequest = ConfigletBatchedStreamRequest

@typing.final
class ConfigletBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConfigletStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and 
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___ConfigletStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___ConfigletBatchedStreamResponse = ConfigletBatchedStreamResponse

@typing.final
class ConfigletAssignmentRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey:
        """Key uniquely identifies a ConfigletAssignment instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___ConfigletAssignmentRequest = ConfigletAssignmentRequest

@typing.final
class ConfigletAssignmentResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignment:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        ConfigletAssignment instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignment | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___ConfigletAssignmentResponse = ConfigletAssignmentResponse

@typing.final
class ConfigletAssignmentSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___ConfigletAssignmentSomeRequest = ConfigletAssignmentSomeRequest

@typing.final
class ConfigletAssignmentSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignment:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignment | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___ConfigletAssignmentSomeResponse = ConfigletAssignmentSomeResponse

@typing.final
class ConfigletAssignmentStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignment]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each ConfigletAssignment at end.
            * Each ConfigletAssignment response is fully-specified (all fields set).
          * start: Returns the state of each ConfigletAssignment at start, followed by updates until now.
            * Each ConfigletAssignment response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each ConfigletAssignment at start, followed by updates
            until end.
            * Each ConfigletAssignment response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignment] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletAssignmentStreamRequest = ConfigletAssignmentStreamRequest

@typing.final
class ConfigletAssignmentStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the ConfigletAssignment value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignment:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this ConfigletAssignment's last modification."""

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignment | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___ConfigletAssignmentStreamResponse = ConfigletAssignmentStreamResponse

@typing.final
class ConfigletAssignmentBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignment]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each ConfigletAssignment at end.
            * Each ConfigletAssignment response is fully-specified (all fields set).
          * start: Returns the state of each ConfigletAssignment at start, followed by updates until now.
            * Each ConfigletAssignment response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each ConfigletAssignment at start, followed by updates
            until end.
            * Each ConfigletAssignment response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignment] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletAssignmentBatchedStreamRequest = ConfigletAssignmentBatchedStreamRequest

@typing.final
class ConfigletAssignmentBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConfigletAssignmentStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and 
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___ConfigletAssignmentStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___ConfigletAssignmentBatchedStreamResponse = ConfigletAssignmentBatchedStreamResponse

@typing.final
class ConfigletAssignmentConfigRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey:
        """Key uniquely identifies a ConfigletAssignmentConfig instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___ConfigletAssignmentConfigRequest = ConfigletAssignmentConfigRequest

@typing.final
class ConfigletAssignmentConfigResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        ConfigletAssignmentConfig instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___ConfigletAssignmentConfigResponse = ConfigletAssignmentConfigResponse

@typing.final
class ConfigletAssignmentConfigSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___ConfigletAssignmentConfigSomeRequest = ConfigletAssignmentConfigSomeRequest

@typing.final
class ConfigletAssignmentConfigSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___ConfigletAssignmentConfigSomeResponse = ConfigletAssignmentConfigSomeResponse

@typing.final
class ConfigletAssignmentConfigStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each ConfigletAssignmentConfig at end.
            * Each ConfigletAssignmentConfig response is fully-specified (all fields set).
          * start: Returns the state of each ConfigletAssignmentConfig at start, followed by updates until now.
            * Each ConfigletAssignmentConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each ConfigletAssignmentConfig at start, followed by updates
            until end.
            * Each ConfigletAssignmentConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletAssignmentConfigStreamRequest = ConfigletAssignmentConfigStreamRequest

@typing.final
class ConfigletAssignmentConfigStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the ConfigletAssignmentConfig value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this ConfigletAssignmentConfig's last modification."""

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___ConfigletAssignmentConfigStreamResponse = ConfigletAssignmentConfigStreamResponse

@typing.final
class ConfigletAssignmentConfigBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each ConfigletAssignmentConfig at end.
            * Each ConfigletAssignmentConfig response is fully-specified (all fields set).
          * start: Returns the state of each ConfigletAssignmentConfig at start, followed by updates until now.
            * Each ConfigletAssignmentConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each ConfigletAssignmentConfig at start, followed by updates
            until end.
            * Each ConfigletAssignmentConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig] | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletAssignmentConfigBatchedStreamRequest = ConfigletAssignmentConfigBatchedStreamRequest

@typing.final
class ConfigletAssignmentConfigBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConfigletAssignmentConfigStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and 
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___ConfigletAssignmentConfigStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___ConfigletAssignmentConfigBatchedStreamResponse = ConfigletAssignmentConfigBatchedStreamResponse

@typing.final
class ConfigletAssignmentConfigSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig:
        """ConfigletAssignmentConfig carries the value to set into the datastore.
        See the documentation on the ConfigletAssignmentConfig struct for which fields are required.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___ConfigletAssignmentConfigSetRequest = ConfigletAssignmentConfigSetRequest

@typing.final
class ConfigletAssignmentConfigSetResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig:
        """Value carries all the values given in the ConfigletAssignmentConfigSetRequest as well
        as any server-generated values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        creation. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==CreatedAt will include this instance.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___ConfigletAssignmentConfigSetResponse = ConfigletAssignmentConfigSetResponse

@typing.final
class ConfigletAssignmentConfigSetSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig]:
        """value contains a list of ConfigletAssignmentConfig values to write.
        It is possible to provide more values than can fit within either:
            - the maxiumum send size of the client
            - the maximum receive size of the server
        If this error occurs you must reduce the number of values sent.
        See gRPC "maximum message size" documentation for more information.
        """

    def __init__(
        self,
        *,
        values: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___ConfigletAssignmentConfigSetSomeRequest = ConfigletAssignmentConfigSetSomeRequest

@typing.final
class ConfigletAssignmentConfigSetSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey: ...
    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___ConfigletAssignmentConfigSetSomeResponse = ConfigletAssignmentConfigSetSomeResponse

@typing.final
class ConfigletAssignmentConfigDeleteRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey:
        """Key indicates which ConfigletAssignmentConfig instance to remove.
        This field must always be set.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key"]) -> None: ...

global___ConfigletAssignmentConfigDeleteRequest = ConfigletAssignmentConfigDeleteRequest

@typing.final
class ConfigletAssignmentConfigDeleteResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey:
        """Key echoes back the key of the deleted ConfigletAssignmentConfig instance."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        deletion. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==DeletedAt will not include this instance.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___ConfigletAssignmentConfigDeleteResponse = ConfigletAssignmentConfigDeleteResponse

@typing.final
class ConfigletAssignmentConfigDeleteSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey]:
        """key contains a list of ConfigletAssignmentConfig keys to delete"""

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys"]) -> None: ...

global___ConfigletAssignmentConfigDeleteSomeRequest = ConfigletAssignmentConfigDeleteSomeRequest

@typing.final
class ConfigletAssignmentConfigDeleteSomeResponse(google.protobuf.message.Message):
    """ConfigletAssignmentConfigDeleteSomeResponse is only sent when there is an error."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey: ...
    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___ConfigletAssignmentConfigDeleteSomeResponse = ConfigletAssignmentConfigDeleteSomeResponse

@typing.final
class ConfigletAssignmentConfigDeleteAllRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig]:
        """PartialEqFilter provides a way to server-side filter a DeleteAll.
        This requires all provided fields to be equal to the response.
        A filtered DeleteAll will use GetAll with filter to find things to delete.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletAssignmentConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["partial_eq_filter", b"partial_eq_filter"]) -> None: ...

global___ConfigletAssignmentConfigDeleteAllRequest = ConfigletAssignmentConfigDeleteAllRequest

@typing.final
class ConfigletAssignmentConfigDeleteAllResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    type: fmp.deletes_pb2.DeleteError.ValueType
    """This describes the class of delete error.
    A DeleteAllResponse is only sent when there is an error.
    """
    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """This indicates the error message from the delete failure."""

    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey:
        """This is the key of the ConfigletAssignmentConfig instance that failed to be deleted."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp when the key was being deleted."""

    def __init__(
        self,
        *,
        type: fmp.deletes_pb2.DeleteError.ValueType = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        key: arista.configlet.v1.configlet_pb2.ConfigletAssignmentKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time", "type", b"type"]) -> None: ...

global___ConfigletAssignmentConfigDeleteAllResponse = ConfigletAssignmentConfigDeleteAllResponse

@typing.final
class ConfigletConfigRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletKey:
        """Key uniquely identifies a ConfigletConfig instance to retrieve.
        This value must be populated.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___ConfigletConfigRequest = ConfigletConfigRequest

@typing.final
class ConfigletConfigResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        ConfigletConfig instance in this response.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___ConfigletConfigResponse = ConfigletConfigResponse

@typing.final
class ConfigletConfigSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletKey] | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys", "time", b"time"]) -> None: ...

global___ConfigletConfigSomeRequest = ConfigletConfigSomeRequest

@typing.final
class ConfigletConfigSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletConfig:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletConfig | None = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "time", b"time", "value", b"value"]) -> None: ...

global___ConfigletConfigSomeResponse = ConfigletConfigSomeResponse

@typing.final
class ConfigletConfigStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def filter(self) -> arista.configlet.v1.configlet_pb2.Filter:
        """For each ConfigletConfig in the list, all populated fields are considered ANDed together
        as a filtering operation. Similarly, the list itself is ORed such that any individual
        filter that matches a given ConfigletConfig is streamed to the user.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each ConfigletConfig at end.
            * Each ConfigletConfig response is fully-specified (all fields set).
          * start: Returns the state of each ConfigletConfig at start, followed by updates until now.
            * Each ConfigletConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each ConfigletConfig at start, followed by updates
            until end.
            * Each ConfigletConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletConfig] | None = ...,
        filter: arista.configlet.v1.configlet_pb2.Filter | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletConfigStreamRequest = ConfigletConfigStreamRequest

@typing.final
class ConfigletConfigStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the ConfigletConfig value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletConfig:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this ConfigletConfig's last modification."""

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "type", b"type", "value", b"value"]) -> None: ...

global___ConfigletConfigStreamResponse = ConfigletConfigStreamResponse

@typing.final
class ConfigletConfigBatchedStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    MAX_MESSAGES_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletConfig]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """

    @property
    def filter(self) -> arista.configlet.v1.configlet_pb2.Filter:
        """For each ConfigletConfig in the list, all populated fields are considered ANDed together
        as a filtering operation. Similarly, the list itself is ORed such that any individual
        filter that matches a given ConfigletConfig is streamed to the user.
        """

    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each ConfigletConfig at end.
            * Each ConfigletConfig response is fully-specified (all fields set).
          * start: Returns the state of each ConfigletConfig at start, followed by updates until now.
            * Each ConfigletConfig response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each ConfigletConfig at start, followed by updates
            until end.
            * Each ConfigletConfig response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """

    @property
    def max_messages(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """MaxMessages limits the maximum number of messages that can be contained in one batch.
        MaxMessages is required to be at least 1.
        The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
        INTERNAL_BATCH_LIMIT is set based on the maximum message size.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletConfig] | None = ...,
        filter: arista.configlet.v1.configlet_pb2.Filter | None = ...,
        time: arista.time.time_pb2.TimeBounds | None = ...,
        max_messages: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "max_messages", b"max_messages", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "max_messages", b"max_messages", "partial_eq_filter", b"partial_eq_filter", "time", b"time"]) -> None: ...

global___ConfigletConfigBatchedStreamRequest = ConfigletConfigBatchedStreamRequest

@typing.final
class ConfigletConfigBatchedStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSES_FIELD_NUMBER: builtins.int
    @property
    def responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConfigletConfigStreamResponse]:
        """Values are the values deemed relevant to the initiating request.
        The length of this structure is guaranteed to be between (inclusive) 1 and 
        min(req.max_messages, INTERNAL_BATCH_LIMIT).
        """

    def __init__(
        self,
        *,
        responses: collections.abc.Iterable[global___ConfigletConfigStreamResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["responses", b"responses"]) -> None: ...

global___ConfigletConfigBatchedStreamResponse = ConfigletConfigBatchedStreamResponse

@typing.final
class ConfigletConfigSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletConfig:
        """ConfigletConfig carries the value to set into the datastore.
        See the documentation on the ConfigletConfig struct for which fields are required.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___ConfigletConfigSetRequest = ConfigletConfigSetRequest

@typing.final
class ConfigletConfigSetResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.configlet.v1.configlet_pb2.ConfigletConfig:
        """Value carries all the values given in the ConfigletConfigSetRequest as well
        as any server-generated values.
        """

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        creation. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==CreatedAt will include this instance.
        """

    def __init__(
        self,
        *,
        value: arista.configlet.v1.configlet_pb2.ConfigletConfig | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time", b"time", "value", b"value"]) -> None: ...

global___ConfigletConfigSetResponse = ConfigletConfigSetResponse

@typing.final
class ConfigletConfigSetSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletConfig]:
        """value contains a list of ConfigletConfig values to write.
        It is possible to provide more values than can fit within either:
            - the maxiumum send size of the client
            - the maximum receive size of the server
        If this error occurs you must reduce the number of values sent.
        See gRPC "maximum message size" documentation for more information.
        """

    def __init__(
        self,
        *,
        values: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___ConfigletConfigSetSomeRequest = ConfigletConfigSetSomeRequest

@typing.final
class ConfigletConfigSetSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletKey: ...
    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___ConfigletConfigSetSomeResponse = ConfigletConfigSetSomeResponse

@typing.final
class ConfigletConfigDeleteRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletKey:
        """Key indicates which ConfigletConfig instance to remove.
        This field must always be set.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key"]) -> None: ...

global___ConfigletConfigDeleteRequest = ConfigletConfigDeleteRequest

@typing.final
class ConfigletConfigDeleteResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletKey:
        """Key echoes back the key of the deleted ConfigletConfig instance."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp at which the system recognizes the
        deletion. The only guarantees made about this timestamp are:

           - it is after the time the request was received
           - a time-ranged query with StartTime==DeletedAt will not include this instance.
        """

    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "time", b"time"]) -> None: ...

global___ConfigletConfigDeleteResponse = ConfigletConfigDeleteResponse

@typing.final
class ConfigletConfigDeleteSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletKey]:
        """key contains a list of ConfigletConfig keys to delete"""

    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletKey] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["keys", b"keys"]) -> None: ...

global___ConfigletConfigDeleteSomeRequest = ConfigletConfigDeleteSomeRequest

@typing.final
class ConfigletConfigDeleteSomeResponse(google.protobuf.message.Message):
    """ConfigletConfigDeleteSomeResponse is only sent when there is an error."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    error: builtins.str
    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletKey: ...
    def __init__(
        self,
        *,
        key: arista.configlet.v1.configlet_pb2.ConfigletKey | None = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key"]) -> None: ...

global___ConfigletConfigDeleteSomeResponse = ConfigletConfigDeleteSomeResponse

@typing.final
class ConfigletConfigDeleteAllRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.configlet.v1.configlet_pb2.ConfigletConfig]:
        """PartialEqFilter provides a way to server-side filter a DeleteAll.
        This requires all provided fields to be equal to the response.
        A filtered DeleteAll will use GetAll with filter to find things to delete.
        """

    @property
    def filter(self) -> arista.configlet.v1.configlet_pb2.Filter:
        """For each ConfigletConfig in the list, all populated fields are considered ANDed together
        as a filtering operation. Similarly, the list itself is ORed such that any individual
        filter that matches a given ConfigletConfig will be deleted.
        """

    def __init__(
        self,
        *,
        partial_eq_filter: collections.abc.Iterable[arista.configlet.v1.configlet_pb2.ConfigletConfig] | None = ...,
        filter: arista.configlet.v1.configlet_pb2.Filter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "partial_eq_filter", b"partial_eq_filter"]) -> None: ...

global___ConfigletConfigDeleteAllRequest = ConfigletConfigDeleteAllRequest

@typing.final
class ConfigletConfigDeleteAllResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    type: fmp.deletes_pb2.DeleteError.ValueType
    """This describes the class of delete error.
    A DeleteAllResponse is only sent when there is an error.
    """
    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """This indicates the error message from the delete failure."""

    @property
    def key(self) -> arista.configlet.v1.configlet_pb2.ConfigletKey:
        """This is the key of the ConfigletConfig instance that failed to be deleted."""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the (UTC) timestamp when the key was being deleted."""

    def __init__(
        self,
        *,
        type: fmp.deletes_pb2.DeleteError.ValueType = ...,
        error: google.protobuf.wrappers_pb2.StringValue | None = ...,
        key: arista.configlet.v1.configlet_pb2.ConfigletKey | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "key", b"key", "time", b"time", "type", b"type"]) -> None: ...

global___ConfigletConfigDeleteAllResponse = ConfigletConfigDeleteAllResponse
