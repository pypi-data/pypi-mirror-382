[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "optimal-classification-cutoffs"
version = "0.6.0"
description = "Utilities for computing optimal classification cutoffs for binary and multiclass classification"
readme = "README.md"
license = {file = "LICENSE"}
dependencies = [
    "numpy>=1.20.0",
    "scipy",
    "scikit-learn",
]
authors = [
    {name = "Gaurav Sood", email = "contact@gsood.com"}
]
requires-python = ">=3.11"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Mathematics",
]

[project.optional-dependencies]
# For examples and visualizations
examples = ["matplotlib", "pandas"]

# For performance optimization
performance = ["numba>=0.57.0"]

# For adaptive optimization methods
adaptive = ["scikit-optimize>=0.9.0"]

# For documentation generation
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "sphinx-autodoc-typehints>=1.0"
]

# For development and testing
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "ruff",
    "hypothesis>=6.0",
    "psutil>=5.0",  # For memory monitoring in tests
]

# For running all tests with full coverage
test = [
    "pytest>=6.0",
    "pytest-cov",
    "hypothesis>=6.0",
    "psutil>=5.0",
    "numba>=0.57.0",  # For performance optimization tests
    "ruff",  # For linting in CI
]

# All optional dependencies
all = [
    "matplotlib",
    "pandas",
    "numba>=0.57.0",
    "scikit-optimize>=0.9.0",
    "psutil>=5.0",
]

[tool.setuptools]
packages = ["optimal_cutoffs"]
include-package-data = true

[tool.setuptools.package-data]
optimal_cutoffs = ["py.typed"]

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "docs/",
    "*.ipynb",  # Exclude Jupyter notebooks
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line-too-long
    "W291",  # trailing-whitespace
    "W292",  # no-newline-at-end-of-file
    "W293",  # blank-line-with-whitespace
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "B007",  # unused-loop-control-variable (acceptable in test fixtures)
]

[tool.pytest.ini_options]
filterwarnings = [
    # Suppress specific expected warnings in tests
    "ignore:Multiclass probabilities don't sum to 1.0:UserWarning",
    "ignore:unique_scan with micro averaging uses independent:UserWarning",
    "ignore:invalid value encountered in divide:RuntimeWarning",
]

