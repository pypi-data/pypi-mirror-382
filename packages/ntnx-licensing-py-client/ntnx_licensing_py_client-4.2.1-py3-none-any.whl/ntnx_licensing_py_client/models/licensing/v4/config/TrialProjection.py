# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    Manage licenses for your clusters and Prism Central, get information on applied licenses, license compliance details and feature entitlements.  # noqa: E501

    OpenAPI spec version: 4.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.licensing.v4.config.Trial import Trial  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.TrialCategory import TrialCategory  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.TrialStatus import TrialStatus  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.TrialType import TrialType  # noqa: F401,E501

class TrialProjection(Trial):

    """

    :param type: (:attr:`type`) 
    :type type: required
    
    
    :param category: (:attr:`category`) 
    :type category: 
    
    
    :param start_date: (:attr:`start_date`) Start date of the trial.
    :type start_date: 
    
    
    :param end_date: (:attr:`end_date`) End date of the trial.
    :type end_date: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this ID to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'type': 'licensing.v4.config.TrialType',
        'category': 'licensing.v4.config.TrialCategory',
        'start_date': 'date',
        'end_date': 'date',
        'status': 'licensing.v4.config.TrialStatus',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'type': 'type',
        'category': 'category',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'status': 'status',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, type=None, category=None, start_date=None, end_date=None, status=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        Trial.__init__(self, type, category, start_date, end_date, status, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'licensing.v4.config.TrialProjection'

    def _initialize_object_version(self):
        return 'v4.r2'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TrialProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrialProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

