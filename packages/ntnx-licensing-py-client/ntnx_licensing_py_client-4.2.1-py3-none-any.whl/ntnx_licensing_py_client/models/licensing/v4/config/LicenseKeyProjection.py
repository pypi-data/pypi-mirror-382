# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    Manage licenses for your clusters and Prism Central, get information on applied licenses, license compliance details and feature entitlements.  # noqa: E501

    OpenAPI spec version: 4.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.licensing.v4.config.ClusterLicenseKeyMapping import ClusterLicenseKeyMapping  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.ClusterLicenseKeyMappingProjection import ClusterLicenseKeyMappingProjection  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.EnforcementPolicy import EnforcementPolicy  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseCategory import LicenseCategory  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseKey import LicenseKey  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseKeyAssociation import LicenseKeyAssociation  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseKeyAssociationProjection import LicenseKeyAssociationProjection  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseKeySubCategory import LicenseKeySubCategory  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseType import LicenseType  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.Meter import Meter  # noqa: F401,E501

class LicenseKeyProjection(LicenseKey):

    """

    :param cluster_license_key_mapping_projection: (:attr:`cluster_license_key_mapping_projection`) 
    :type cluster_license_key_mapping_projection: 
    
    
    :param license_key_association_projection: (:attr:`license_key_association_projection`) 
    :type license_key_association_projection: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_license_key_mapping_projection': 'list[licensing.v4.config.ClusterLicenseKeyMappingProjection]',
        'license_key_association_projection': 'list[licensing.v4.config.LicenseKeyAssociationProjection]',
        'key': 'str',
        'validation_detail': 'str',
        'type': 'licensing.v4.config.LicenseType',
        'category': 'licensing.v4.config.LicenseCategory',
        'sub_category': 'licensing.v4.config.LicenseKeySubCategory',
        'entitlement_expiry_date': 'date',
        'meter': 'licensing.v4.config.Meter',
        'quantity': 'float',
        'group_id': 'str',
        'enforcement_policy': 'licensing.v4.config.EnforcementPolicy',
        'assignment_details': 'list[licensing.v4.config.ClusterLicenseKeyMapping]',
        'association_details': 'list[licensing.v4.config.LicenseKeyAssociation]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_license_key_mapping_projection': 'clusterLicenseKeyMappingProjection',
        'license_key_association_projection': 'licenseKeyAssociationProjection',
        'key': 'key',
        'validation_detail': 'validationDetail',
        'type': 'type',
        'category': 'category',
        'sub_category': 'subCategory',
        'entitlement_expiry_date': 'entitlementExpiryDate',
        'meter': 'meter',
        'quantity': 'quantity',
        'group_id': 'groupId',
        'enforcement_policy': 'enforcementPolicy',
        'assignment_details': 'assignmentDetails',
        'association_details': 'associationDetails',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_license_key_mapping_projection=None, license_key_association_projection=None, key=None, validation_detail=None, type=None, category=None, sub_category=None, entitlement_expiry_date=None, meter=None, quantity=None, group_id=None, enforcement_policy=None, assignment_details=None, association_details=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        LicenseKey.__init__(self, key, validation_detail, type, category, sub_category, entitlement_expiry_date, meter, quantity, group_id, enforcement_policy, assignment_details, association_details, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_license_key_mapping_projection = None
        self.__license_key_association_projection = None
        self.discriminator = None
        if cluster_license_key_mapping_projection is not None:
            self.__cluster_license_key_mapping_projection = cluster_license_key_mapping_projection
        if license_key_association_projection is not None:
            self.__license_key_association_projection = license_key_association_projection

    def _initialize_object_type(self):
        return 'licensing.v4.config.LicenseKeyProjection'

    def _initialize_object_version(self):
        return 'v4.r2'


    @property
    def cluster_license_key_mapping_projection(self):
        """
        

        :type:
             list[ :class:`~ntnx_licensing_py_client.models.licensing.v4.config.ClusterLicenseKeyMappingProjection` ]
        """  # noqa: E501
        return self.__cluster_license_key_mapping_projection

    @cluster_license_key_mapping_projection.setter
    def cluster_license_key_mapping_projection(self, cluster_license_key_mapping_projection):

        self.__cluster_license_key_mapping_projection = cluster_license_key_mapping_projection

    @property
    def license_key_association_projection(self):
        """
        

        :type:
             list[ :class:`~ntnx_licensing_py_client.models.licensing.v4.config.LicenseKeyAssociationProjection` ]
        """  # noqa: E501
        return self.__license_key_association_projection

    @license_key_association_projection.setter
    def license_key_association_projection(self, license_key_association_projection):

        self.__license_key_association_projection = license_key_association_projection

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LicenseKeyProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseKeyProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

