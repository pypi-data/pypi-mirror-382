# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    Manage licenses for your clusters and Prism Central, get information on applied licenses, license compliance details and feature entitlements.  # noqa: E501

    OpenAPI spec version: 4.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.licensing.v4.config.AssociationType import AssociationType  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseKeyAssociation import LicenseKeyAssociation  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.ReclaimType import ReclaimType  # noqa: F401,E501

class LicenseKeyAssociationProjection(LicenseKeyAssociation):

    """

    :param base_key: (:attr:`base_key`) Attribute for capturing primary license key in the association.
    :type base_key: 
     max=100 chars
    
    :param associated_key: (:attr:`associated_key`) Attribute for capturing linked license key in the association.
    :type associated_key: required
     max=100 chars
    
    :param association_type: (:attr:`association_type`) 
    :type association_type: required
    
    
    :param reclaim_type: (:attr:`reclaim_type`) 
    :type reclaim_type: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'base_key': 'str',
        'associated_key': 'str',
        'association_type': 'licensing.v4.config.AssociationType',
        'reclaim_type': 'licensing.v4.config.ReclaimType',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'base_key': 'baseKey',
        'associated_key': 'associatedKey',
        'association_type': 'associationType',
        'reclaim_type': 'reclaimType',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, base_key=None, associated_key=None, association_type=None, reclaim_type=None, *args, **kwargs):  # noqa: E501
        LicenseKeyAssociation.__init__(self, base_key, associated_key, association_type, reclaim_type, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'licensing.v4.config.LicenseKeyAssociationProjection'

    def _initialize_object_version(self):
        return 'v4.r2'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LicenseKeyAssociationProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseKeyAssociationProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

