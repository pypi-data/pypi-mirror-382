[project]
name = "grit-guardian-cli"
version = "0.1.1a2"
description = "A CLI habit tracker"
authors = [{ name = "Patrick Weiss", email = "patrick.weiss@iu-study.org" }]
license = { text = "MIT" }
readme = "README.md"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.11",
]
keywords = ["habit-tracker", "cli", "productivity", "terminal"]
requires-python = ">=3.11"
dependencies = [
  "click (>=8.2.1,<9.0.0)",
  "sphinx (>=8.2.3,<9.0.0)",
  "sphinx-copybutton (>=0.5.2,<0.6.0)",
  "sphinxcontrib-mermaid (>=1.0.0,<2.0.0)",
  "rich (>=13.7.1,<14.0.0)",
]

[project.urls]
homepage = "https://github.com/pi-weiss/grit-guardian-cli"
repository = "https://github.com/pi-weiss/grit-guardian-cli"
documentation = "https://grit-guardian-cli.readthedocs.io"

[tool.poetry]
packages = [{ include = "grit_guardian_cli", from = "src" }]

[tool.poetry.group.dev.dependencies]
pytest = ">=8.2.1,<9.0.0"
pytest-cov = ">=6.2.1,<7.0.0"
sphinx-rtd-theme = ">=3.0.2"
sphinx-autobuild = ">=2024.10.3,<2025.0.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
grit-guardian = "grit_guardian_cli.cli.main:main"
gg = "grit_guardian_cli.cli.main:main"

[tool.pytest.ini_options]
#pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "-ra"]


markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

# Coverage configuration
[tool.coverage.run]
omit = [
  "*/tests/*",
  "*/test_*",
  "*/__pycache__/*",
  "*/.pytest_cache/*",
  "*/migrations/*",
  "*/venv/*",
  "*/virtualenv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
ignore_errors = true
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
