# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Material/timber_board.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from Utils import utils_pb2 as Utils_dot_utils__pb2

from Utils.utils_pb2 import *

DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1bMaterial/timber_board.proto\x12\x18ng.material.timber.board\x1a\x11Utils/utils.proto\"\xb3\x04\n\x12\x43haracteristicData\x12\x18\n\x10\x62\x65nding_parallel\x18\x01 \x01(\x01\x12\x1d\n\x15\x62\x65nding_perpendicular\x18\x02 \x01(\x01\x12\x18\n\x10tension_parallel\x18\x03 \x01(\x01\x12\x1d\n\x15tension_perpendicular\x18\x04 \x01(\x01\x12\x1c\n\x14\x63ompression_parallel\x18\x05 \x01(\x01\x12!\n\x19\x63ompression_perpendicular\x18\x06 \x01(\x01\x12\x13\n\x0bpanel_shear\x18\x07 \x01(\x01\x12\x14\n\x0cplanar_shear\x18\x08 \x01(\x01\x12#\n\x1b\x65lasticity_bending_parallel\x18\t \x01(\x01\x12(\n elasticity_bending_perpendicular\x18\n \x01(\x01\x12#\n\x1b\x65lasticity_tension_parallel\x18\x0b \x01(\x01\x12(\n elasticity_tension_perpendicular\x18\x0c \x01(\x01\x12\'\n\x1f\x65lasticity_compression_parallel\x18\r \x01(\x01\x12,\n$elasticity_compression_perpendicular\x18\x0e \x01(\x01\x12\x1b\n\x13panel_shear_modulus\x18\x0f \x01(\x01\x12\x1c\n\x14planar_shear_modulus\x18\x10 \x01(\x01\x12\x0f\n\x07\x64\x65nsity\x18\x11 \x01(\x01P\x00\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'Material.timber_board_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _CHARACTERISTICDATA._serialized_start=77
  _CHARACTERISTICDATA._serialized_end=640
# @@protoc_insertion_point(module_scope)
