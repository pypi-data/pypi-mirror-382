# coding: utf-8

"""
    Pingera API

     The official API for Pingera, a monitoring and status page platform. This API allows you to manage checks, organizations, incidents, and more.   Some useful links: * [Pingera website](https://pingera.ru?utm_source=api_docs) * [API documentation](https://docs.pingera.ru/api/overview) * [Application](https://app.pingera.ru) * [Status page](https://status.pingera.ru) 

    The version of the OpenAPI document: v1
    Contact: privet@pingera.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pingera.models.alert_list import AlertList

class TestAlertList(unittest.TestCase):
    """AlertList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AlertList:
        """Test AlertList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AlertList`
        """
        model = AlertList()
        if include_optional:
            return AlertList(
                pagination = {"page":1,"pages":3,"per_page":20,"total":45,"has_next":true,"has_prev":false},
                alerts = [
                    pingera.models.alert.Alert(
                        id = 'alert_abc123def456', 
                        check_id = 'check_ghi789jkl012', 
                        trigger_results = [{"result_id":"res123abc456","is_primary":true,"status":"failed","error_message":"Connection timeout","created_at":"2024-01-15T10:30:00Z"}], 
                        acknowledged_by_id = 'user_jkl012mno345', 
                        fired_at = '2024-01-15T15:30Z', 
                        notification_count = 3, 
                        rule_name = Production API Down Alert, 
                        last_notification_at = '2024-01-15T15:45Z', 
                        title = 'Production API Health Check Failed', 
                        duration = 3600, 
                        description = 'The production API health check has failed 3 consecutive times, indicating a potential service outage.', 
                        acknowledged_at = '2024-01-15T15:35Z', 
                        is_active = true, 
                        rule_id = 'rule_def456ghi789', 
                        severity = 'high', 
                        check_name = Production API Health Check, 
                        resolved_at = '2024-01-15T16:30Z', 
                        alert_metadata = {"consecutive_failures":3,"last_check_result":"timeout","response_time":5000}, 
                        status = 'firing', )
                    ]
            )
        else:
            return AlertList(
        )
        """

    def testAlertList(self):
        """Test AlertList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
