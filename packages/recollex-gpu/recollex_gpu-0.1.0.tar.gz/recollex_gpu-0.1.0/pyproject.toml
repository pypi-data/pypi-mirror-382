[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "recollex-gpu"
version = "0.1.0"
description = "RAG indexer based on Sparse Neural Embeddings."
readme = "README.md"
authors = [
  { name="Chris Bates", email="1314008+chrsbats@users.noreply.github.com" },
]
license = "MIT"
requires-python = ">=3.10"
dependencies = [
    "python-ulid>=3,<4",
    "pyroaring>=1,<2",
    "huggingface_hub>=0.23",
    "numpy>=2.0",
    "scipy>=1.14",
    "transformers>=4.36,<5",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["recollex*"]

[project.optional-dependencies]
dev = [
  "pytest>=8.0.0",
  "pytest-cov>=5.0.0",
]

nlp = [
  # torch required by sentence-transformers; cap where wheels exist
  "sentence-transformers[onnx]>=5.1,<6; python_version<'3.13' and (sys_platform!='darwin' or platform_machine=='arm64')",
]

cpu = [
  "onnxruntime>=1.17",
]

gpu = [
  # CUDA wheels exist on Linux/Windows; adjust if needed
  "onnxruntime-gpu>=1.17; sys_platform == 'linux' or sys_platform == 'win32'",
]

cuda = [
  # CUDA wheels exist on Linux/Windows; adjust if needed
  "onnxruntime-gpu>=1.17;  sys_platform == 'linux' or sys_platform == 'win32'",
]

rocm = [
  # ROCm wheels limited; avoid Py3.13; Linux only
   "onnxruntime-rocm==1.22.2.post1; sys_platform=='linux' and python_version=='3.10'",
]

directml = [
  "onnxruntime-directml>=1.17; sys_platform=='win32'",
]

silicon = [
  # Silicon wheels are macOS 14+ arm64 and â‰¤ Py3.11 for 1.16.3
  "onnxruntime-silicon==1.16.3; sys_platform=='darwin' and platform_machine=='arm64' and python_version<'3.12'",
]

[project.scripts]
recollex-prefetch = "recollex.encoder.splade:prefetch_main"
recollex-clean = "recollex.encoder.splade:clean_main"
