"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from opperai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class SaveToDatasetResponseTypedDict(TypedDict):
    dataset_id: str
    r"""The ID of the dataset"""
    dataset_entry_id: str
    r"""The ID of the dataset entry"""
    input: NotRequired[Nullable[str]]
    r"""The input of the dataset entry"""
    output: NotRequired[Nullable[str]]
    r"""The output of the dataset entry"""
    expected: NotRequired[Nullable[str]]
    r"""The expected output of the dataset entry"""
    comment: NotRequired[Nullable[str]]
    r"""The comment of the dataset entry"""


class SaveToDatasetResponse(BaseModel):
    dataset_id: str
    r"""The ID of the dataset"""

    dataset_entry_id: str
    r"""The ID of the dataset entry"""

    input: OptionalNullable[str] = UNSET
    r"""The input of the dataset entry"""

    output: OptionalNullable[str] = UNSET
    r"""The output of the dataset entry"""

    expected: OptionalNullable[str] = UNSET
    r"""The expected output of the dataset entry"""

    comment: OptionalNullable[str] = UNSET
    r"""The comment of the dataset entry"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["input", "output", "expected", "comment"]
        nullable_fields = ["input", "output", "expected", "comment"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
