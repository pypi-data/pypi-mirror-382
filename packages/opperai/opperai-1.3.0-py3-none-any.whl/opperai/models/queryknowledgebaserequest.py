"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .filter_ import Filter, FilterTypedDict
from opperai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class QueryKnowledgeBaseRequestTypedDict(TypedDict):
    query: str
    r"""Query string"""
    prefilter_limit: NotRequired[int]
    r"""Number of documents to retrieve from the knowledge base before filtering"""
    top_k: NotRequired[int]
    r"""Number of documents to return"""
    filters: NotRequired[Nullable[List[FilterTypedDict]]]
    r"""Per-field filters to apply to the query combined with AND"""
    rerank: NotRequired[bool]
    r"""Whether to rerank the results"""
    parent_span_id: NotRequired[Nullable[str]]
    r"""Parent span id"""


class QueryKnowledgeBaseRequest(BaseModel):
    query: str
    r"""Query string"""

    prefilter_limit: Optional[int] = 10
    r"""Number of documents to retrieve from the knowledge base before filtering"""

    top_k: Optional[int] = 3
    r"""Number of documents to return"""

    filters: OptionalNullable[List[Filter]] = UNSET
    r"""Per-field filters to apply to the query combined with AND"""

    rerank: Optional[bool] = True
    r"""Whether to rerank the results"""

    parent_span_id: OptionalNullable[str] = UNSET
    r"""Parent span id"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "prefilter_limit",
            "top_k",
            "filters",
            "rerank",
            "parent_span_id",
        ]
        nullable_fields = ["filters", "parent_span_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
