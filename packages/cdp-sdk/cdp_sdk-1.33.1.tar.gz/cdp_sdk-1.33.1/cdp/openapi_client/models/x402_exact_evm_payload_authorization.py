# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class X402ExactEvmPayloadAuthorization(BaseModel):
    """
    The authorization data for the ERC-3009 authorization message.
    """ # noqa: E501
    var_from: Annotated[str, Field(strict=True)] = Field(description="The 0x-prefixed, checksum EVM address of the sender of the payment.", alias="from")
    to: Annotated[str, Field(strict=True)] = Field(description="The 0x-prefixed, checksum EVM address of the recipient of the payment.")
    value: StrictStr = Field(description="The value of the payment, in atomic units of the payment asset.")
    valid_after: StrictStr = Field(description="The unix timestamp after which the payment is valid.", alias="validAfter")
    valid_before: StrictStr = Field(description="The unix timestamp before which the payment is valid.", alias="validBefore")
    nonce: StrictStr = Field(description="The hex-encoded nonce of the payment.")
    __properties: ClassVar[List[str]] = ["from", "to", "value", "validAfter", "validBefore", "nonce"]

    @field_validator('var_from')
    def var_from_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[0-9a-fA-F]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[0-9a-fA-F]{40}$/")
        return value

    @field_validator('to')
    def to_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[0-9a-fA-F]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[0-9a-fA-F]{40}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of X402ExactEvmPayloadAuthorization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of X402ExactEvmPayloadAuthorization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from": obj.get("from"),
            "to": obj.get("to"),
            "value": obj.get("value"),
            "validAfter": obj.get("validAfter"),
            "validBefore": obj.get("validBefore"),
            "nonce": obj.get("nonce")
        })
        return _obj


