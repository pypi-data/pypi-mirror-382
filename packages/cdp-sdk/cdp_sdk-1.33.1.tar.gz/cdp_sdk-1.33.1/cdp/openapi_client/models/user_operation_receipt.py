# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cdp.openapi_client.models.user_operation_receipt_revert import UserOperationReceiptRevert
from typing import Optional, Set
from typing_extensions import Self

class UserOperationReceipt(BaseModel):
    """
    The receipt that contains information about the execution of user operation.
    """ # noqa: E501
    revert: Optional[UserOperationReceiptRevert] = None
    transaction_hash: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The hash of this transaction as 0x-prefixed string.", alias="transactionHash")
    block_hash: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The block hash of the block including the transaction as 0x-prefixed string.", alias="blockHash")
    block_number: Optional[StrictInt] = Field(default=None, description="The block height (number) of the block including the transaction.", alias="blockNumber")
    gas_used: Optional[StrictStr] = Field(default=None, description="The gas used for landing this user operation.", alias="gasUsed")
    __properties: ClassVar[List[str]] = ["revert", "transactionHash", "blockHash", "blockNumber", "gasUsed"]

    @field_validator('transaction_hash')
    def transaction_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^0x[a-fA-F0-9]{64}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{64}$/")
        return value

    @field_validator('block_hash')
    def block_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^0x[0-9a-fA-F]{64}$|^$", value):
            raise ValueError(r"must validate the regular expression /^0x[0-9a-fA-F]{64}$|^$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserOperationReceipt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of revert
        if self.revert:
            _dict['revert'] = self.revert.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserOperationReceipt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "revert": UserOperationReceiptRevert.from_dict(obj["revert"]) if obj.get("revert") is not None else None,
            "transactionHash": obj.get("transactionHash"),
            "blockHash": obj.get("blockHash"),
            "blockNumber": obj.get("blockNumber"),
            "gasUsed": obj.get("gasUsed")
        })
        return _obj


