# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from cdp.openapi_client.models.x402_payment_payload_payload import X402PaymentPayloadPayload
from cdp.openapi_client.models.x402_version import X402Version
from typing import Optional, Set
from typing_extensions import Self

class X402PaymentPayload(BaseModel):
    """
    The x402 protocol payment payload that the client attaches to x402-paid API requests to the resource server in the X-PAYMENT header.
    """ # noqa: E501
    x402_version: X402Version = Field(alias="x402Version")
    scheme: StrictStr = Field(description="The scheme of the payment protocol to use. Currently, the only supported scheme is `exact`.")
    network: StrictStr = Field(description="The network of the blockchain to send payment on.")
    payload: X402PaymentPayloadPayload
    __properties: ClassVar[List[str]] = ["x402Version", "scheme", "network", "payload"]

    @field_validator('scheme')
    def scheme_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['exact']):
            raise ValueError("must be one of enum values ('exact')")
        return value

    @field_validator('network')
    def network_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['base-sepolia', 'base', 'solana-devnet', 'solana']):
            raise ValueError("must be one of enum values ('base-sepolia', 'base', 'solana-devnet', 'solana')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of X402PaymentPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of X402PaymentPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "x402Version": obj.get("x402Version"),
            "scheme": obj.get("scheme"),
            "network": obj.get("network"),
            "payload": X402PaymentPayloadPayload.from_dict(obj["payload"]) if obj.get("payload") is not None else None
        })
        return _obj


