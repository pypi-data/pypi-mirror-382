# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cdp.openapi_client.models.onramp_order_fee import OnrampOrderFee
from cdp.openapi_client.models.onramp_order_payment_method_type_id import OnrampOrderPaymentMethodTypeId
from cdp.openapi_client.models.onramp_order_status import OnrampOrderStatus
from typing import Optional, Set
from typing_extensions import Self

class OnrampOrder(BaseModel):
    """
    An Onramp order.
    """ # noqa: E501
    order_id: StrictStr = Field(description="The ID of the onramp order.", alias="orderId")
    payment_total: StrictStr = Field(description="The total amount of fiat to be paid, inclusive of any fees.", alias="paymentTotal")
    payment_subtotal: StrictStr = Field(description="The amount of fiat to be converted to crypto.", alias="paymentSubtotal")
    payment_currency: StrictStr = Field(description="The fiat currency to be converted to crypto.", alias="paymentCurrency")
    payment_method: OnrampOrderPaymentMethodTypeId = Field(alias="paymentMethod")
    purchase_amount: StrictStr = Field(description="The amount of crypto to be purchased.", alias="purchaseAmount")
    purchase_currency: StrictStr = Field(description="The crypto currency to be purchased.", alias="purchaseCurrency")
    fees: List[OnrampOrderFee] = Field(description="The fees associated with the order.")
    exchange_rate: StrictStr = Field(description="The exchange rate used to convert fiat to crypto i.e. the crypto value of one fiat.", alias="exchangeRate")
    destination_address: StrictStr = Field(description="The destination address to send the crypto to.", alias="destinationAddress")
    destination_network: StrictStr = Field(description="The network to send the crypto on.", alias="destinationNetwork")
    status: OnrampOrderStatus
    tx_hash: Optional[StrictStr] = Field(default=None, description="The transaction hash of the order (only available once crypto has been sent).", alias="txHash")
    created_at: StrictStr = Field(description="The date and time the order was created.", alias="createdAt")
    updated_at: StrictStr = Field(description="The date and time the order was last updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["orderId", "paymentTotal", "paymentSubtotal", "paymentCurrency", "paymentMethod", "purchaseAmount", "purchaseCurrency", "fees", "exchangeRate", "destinationAddress", "destinationNetwork", "status", "txHash", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnrampOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnrampOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderId": obj.get("orderId"),
            "paymentTotal": obj.get("paymentTotal"),
            "paymentSubtotal": obj.get("paymentSubtotal"),
            "paymentCurrency": obj.get("paymentCurrency"),
            "paymentMethod": obj.get("paymentMethod"),
            "purchaseAmount": obj.get("purchaseAmount"),
            "purchaseCurrency": obj.get("purchaseCurrency"),
            "fees": [OnrampOrderFee.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "exchangeRate": obj.get("exchangeRate"),
            "destinationAddress": obj.get("destinationAddress"),
            "destinationNetwork": obj.get("destinationNetwork"),
            "status": obj.get("status"),
            "txHash": obj.get("txHash"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


