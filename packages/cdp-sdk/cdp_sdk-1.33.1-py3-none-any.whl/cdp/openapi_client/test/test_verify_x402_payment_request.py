# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cdp.openapi_client.models.verify_x402_payment_request import VerifyX402PaymentRequest

class TestVerifyX402PaymentRequest(unittest.TestCase):
    """VerifyX402PaymentRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VerifyX402PaymentRequest:
        """Test VerifyX402PaymentRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VerifyX402PaymentRequest`
        """
        model = VerifyX402PaymentRequest()
        if include_optional:
            return VerifyX402PaymentRequest(
                x402_version = 1,
                payment_payload = {"x402Version":1,"scheme":"exact","network":"base","payload":{"signature":"0xf3746613c2d920b5fdabc0856f2aeb2d4f88ee6037b8cc5d04a71a4462f13480","authorization":{"from":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e","to":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e","value":"1000000000000000000","validAfter":"1716150000","validBefore":"1716150000","nonce":"0x1234567890abcdef1234567890abcdef12345678"}}},
                payment_requirements = cdp.openapi_client.models.x402_payment_requirements.x402PaymentRequirements(
                    scheme = 'exact', 
                    network = 'base', 
                    max_amount_required = '1000000', 
                    resource = 'https://api.example.com/premium/resource/123', 
                    description = 'Premium API access for data analysis', 
                    mime_type = 'application/json', 
                    output_schema = {"data":"string"}, 
                    pay_to = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', 
                    max_timeout_seconds = 10, 
                    asset = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', 
                    extra = {"gasLimit":"1000000"}, )
            )
        else:
            return VerifyX402PaymentRequest(
                x402_version = 1,
                payment_payload = {"x402Version":1,"scheme":"exact","network":"base","payload":{"signature":"0xf3746613c2d920b5fdabc0856f2aeb2d4f88ee6037b8cc5d04a71a4462f13480","authorization":{"from":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e","to":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e","value":"1000000000000000000","validAfter":"1716150000","validBefore":"1716150000","nonce":"0x1234567890abcdef1234567890abcdef12345678"}}},
                payment_requirements = cdp.openapi_client.models.x402_payment_requirements.x402PaymentRequirements(
                    scheme = 'exact', 
                    network = 'base', 
                    max_amount_required = '1000000', 
                    resource = 'https://api.example.com/premium/resource/123', 
                    description = 'Premium API access for data analysis', 
                    mime_type = 'application/json', 
                    output_schema = {"data":"string"}, 
                    pay_to = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', 
                    max_timeout_seconds = 10, 
                    asset = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', 
                    extra = {"gasLimit":"1000000"}, ),
        )
        """

    def testVerifyX402PaymentRequest(self):
        """Test VerifyX402PaymentRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
