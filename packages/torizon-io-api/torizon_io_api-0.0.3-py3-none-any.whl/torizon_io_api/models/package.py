# coding: utf-8

"""
    Torizon OTA

     This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

    The version of the OpenAPI document: 2.0-Beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Package(BaseModel):
    """
    Package
    """ # noqa: E501
    name: StrictStr
    version: StrictStr
    package_id: StrictStr = Field(alias="packageId")
    size: StrictInt
    hashes: Dict[str, StrictStr]
    package_source: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="packageSource")
    pkg_type: Optional[StrictStr] = Field(default=None, alias="pkgType")
    hardware_ids: Optional[List[StrictStr]] = Field(default=None, alias="hardwareIds")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    uri: Optional[StrictStr] = None
    proprietary_meta: Optional[Any] = Field(default=None, alias="proprietaryMeta")
    comment: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "version", "packageId", "size", "hashes", "packageSource", "pkgType", "hardwareIds", "createdAt", "uri", "proprietaryMeta", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Package from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of proprietary_meta
        if self.proprietary_meta:
            _dict['proprietaryMeta'] = self.proprietary_meta.to_dict()
        # set to None if pkg_type (nullable) is None
        # and model_fields_set contains the field
        if self.pkg_type is None and "pkg_type" in self.model_fields_set:
            _dict['pkgType'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if uri (nullable) is None
        # and model_fields_set contains the field
        if self.uri is None and "uri" in self.model_fields_set:
            _dict['uri'] = None

        # set to None if proprietary_meta (nullable) is None
        # and model_fields_set contains the field
        if self.proprietary_meta is None and "proprietary_meta" in self.model_fields_set:
            _dict['proprietaryMeta'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Package from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "packageId": obj.get("packageId"),
            "size": obj.get("size"),
            "hashes": obj.get("hashes"),
            "packageSource": obj.get("packageSource"),
            "pkgType": obj.get("pkgType"),
            "hardwareIds": obj.get("hardwareIds"),
            "createdAt": obj.get("createdAt"),
            "uri": obj.get("uri"),
            "proprietaryMeta": AnyOf.from_dict(obj["proprietaryMeta"]) if obj.get("proprietaryMeta") is not None else None,
            "comment": obj.get("comment")
        })
        return _obj


