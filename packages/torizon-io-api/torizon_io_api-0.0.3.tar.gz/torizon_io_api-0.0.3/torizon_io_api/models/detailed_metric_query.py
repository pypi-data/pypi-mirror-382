# coding: utf-8

"""
    Torizon OTA

     This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

    The version of the OpenAPI document: 2.0-Beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DetailedMetricQuery(BaseModel):
    """
    DetailedMetricQuery
    """ # noqa: E501
    metrics: Annotated[List[StrictStr], Field(min_length=1)]
    var_from: StrictInt = Field(alias="from")
    to: StrictInt
    datapoint_count: Optional[StrictInt] = Field(default=None, alias="datapointCount")
    total_buckets: Optional[StrictInt] = Field(default=None, alias="totalBuckets")
    __properties: ClassVar[List[str]] = ["metrics", "from", "to", "datapointCount", "totalBuckets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailedMetricQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if datapoint_count (nullable) is None
        # and model_fields_set contains the field
        if self.datapoint_count is None and "datapoint_count" in self.model_fields_set:
            _dict['datapointCount'] = None

        # set to None if total_buckets (nullable) is None
        # and model_fields_set contains the field
        if self.total_buckets is None and "total_buckets" in self.model_fields_set:
            _dict['totalBuckets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailedMetricQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metrics": obj.get("metrics"),
            "from": obj.get("from"),
            "to": obj.get("to"),
            "datapointCount": obj.get("datapointCount"),
            "totalBuckets": obj.get("totalBuckets")
        })
        return _obj


