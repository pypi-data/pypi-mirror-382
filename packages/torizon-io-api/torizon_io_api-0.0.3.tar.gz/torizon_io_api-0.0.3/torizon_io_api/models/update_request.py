# coding: utf-8

"""
    Torizon OTA

     This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

    The version of the OpenAPI document: 2.0-Beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from torizon_io_api.models.custom_update_data import CustomUpdateData
from typing import Optional, Set
from typing_extensions import Self

class UpdateRequest(BaseModel):
    """
    UpdateRequest
    """ # noqa: E501
    package_ids: Optional[List[StrictStr]] = Field(default=None, alias="packageIds")
    custom: Optional[Dict[str, CustomUpdateData]] = None
    devices: Optional[List[UUID]] = None
    fleets: Optional[List[UUID]] = None
    __properties: ClassVar[List[str]] = ["packageIds", "custom", "devices", "fleets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in custom (dict)
        _field_dict = {}
        if self.custom:
            for _key_custom in self.custom:
                if self.custom[_key_custom]:
                    _field_dict[_key_custom] = self.custom[_key_custom].to_dict()
            _dict['custom'] = _field_dict
        # set to None if devices (nullable) is None
        # and model_fields_set contains the field
        if self.devices is None and "devices" in self.model_fields_set:
            _dict['devices'] = None

        # set to None if fleets (nullable) is None
        # and model_fields_set contains the field
        if self.fleets is None and "fleets" in self.model_fields_set:
            _dict['fleets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "packageIds": obj.get("packageIds"),
            "custom": dict(
                (_k, CustomUpdateData.from_dict(_v))
                for _k, _v in obj["custom"].items()
            )
            if obj.get("custom") is not None
            else None,
            "devices": obj.get("devices"),
            "fleets": obj.get("fleets")
        })
        return _obj


