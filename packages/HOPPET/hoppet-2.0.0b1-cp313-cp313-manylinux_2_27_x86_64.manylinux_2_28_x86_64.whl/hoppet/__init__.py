# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""

A Higher Order Perturbative Parton Evolution Toolkit

HOPPET is a Fortran 95 package for carrying out DGLAP evolution and other 
common manipulations of parton distribution functions (PDFs).

Citation:
G.P. Salam, J. Rojo, 'A Higher Order Perturbative Parton Evolution Toolkit (HOPPET)', 
Comput. Phys. Commun. 180 (2009) 120-156, arXiv:0804.3755

and                                                       

A. Karlberg, P. Nason, G.P. Salam, G. Zanderighi & F. Dreyer (arXiv:2509.XXXXX). 

Example:

   import hoppet as hp
   import numpy as np
   
   def main():
       dy = 0.1    
       nloop = 3
       # Start hoppet
       hp.Start(dy, nloop)
       
       asQ0 = 0.35
       Q0 = np.sqrt(2.0)
       # Do the evolution. 
       hp.Evolve(asQ0, Q0, nloop, 1.0, hp.BenchmarkPDFunpol, Q0)
   
       # Evaluate the PDFs at some x values and print them
       xvals = [1e-5,1e-4,1e-3,1e-2,0.1,0.3,0.5,0.7,0.9]
       Q = 100.0
   
       print('')
       print('           Evaluating PDFs at Q =',Q, ' GeV')
       print('    x      u-ubar      d-dbar    2(ubr+dbr)    c+cbar       gluon')
       for ix in range(9):
           pdf_array = hp.Eval(xvals[ix], Q)
           print('{:7.1E} {:11.4E} {:11.4E} {:11.4E} {:11.4E} {:11.4E}'.format(
               xvals[ix],
               pdf_array[6 + 2] - pdf_array[6 - 2], 
               pdf_array[6 + 1] - pdf_array[6 - 1], 
               2 * (pdf_array[6 - 1] + pdf_array[6 - 2]),
               pdf_array[6 - 4] + pdf_array[6 + 4],
               pdf_array[6 + 0]
           ))

   
       hp.DeleteAll()
   
For more examples look at https://github.com/hoppet-code/hoppet/tree/master/example_py	

"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _hoppet_swig
else:
    import _hoppet_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



__author__ = "Frederic Dreyer, Alexander Karlberg, Paolo Nason, Juan Rojo, Gavin Salam, Giulia Zanderighi"


def SetFFN(fixed_nf):
    r"""
    Set things up to be a fixed-flavour number scheme with the given
    fixed_nf number of flavours
    """
    return _hoppet_swig.SetFFN(fixed_nf)

def SetVFN(mc, mb, mt):
    r"""
    Set things up to be a variable-flavour number scheme with the given
    quark (pole) masses. Now deprecated; use hoppetSetPoleMassVFN instead
    """
    return _hoppet_swig.SetVFN(mc, mb, mt)

def SetPoleMassVFN(mc, mb, mt):
    r"""
    Set things up to be a variable-flavour number scheme with the
    given quark (pole) masses. Thresholds are crossed at the pole
    masses, both for the coupling and the PDF evolution.
    """
    return _hoppet_swig.SetPoleMassVFN(mc, mb, mt)

def SetMSbarMassVFN(mc, mb, mt):
    r"""
    Set things up to be a variable-flavour number scheme with the given
    quark (MSbar) masses. Thresholds are crossed at the MSbar
    masses, both for the coupling and the PDF evolution.
    """
    return _hoppet_swig.SetMSbarMassVFN(mc, mb, mt)

def SetExactDGLAP(exact_nfthreshold, exact_splitting):
    r"""
    Arrange for the use of exact NNLO splitting and mass-threshold
    functions.
    """
    return _hoppet_swig.SetExactDGLAP(exact_nfthreshold, exact_splitting)

def SetApproximateDGLAPN3LO(splitting_variant):
    r"""Arrange for the use of various approximate N3LO splitting functions."""
    return _hoppet_swig.SetApproximateDGLAPN3LO(splitting_variant)

def SetSplittingNNLO(splitting_variant):
    r"""Arrange for the use of various NNLO splitting functions."""
    return _hoppet_swig.SetSplittingNNLO(splitting_variant)

def SetSplittingN3LO(splitting_variant):
    r"""Arrange for the use of various N3LO splitting functions."""
    return _hoppet_swig.SetSplittingN3LO(splitting_variant)

def SetN3LOnfthresholds(variant):
    r"""Arrange for the use of N3LO mass thresholds or not."""
    return _hoppet_swig.SetN3LOnfthresholds(variant)

def SetYLnlnQInterpOrders(yorder, lnlnQorder):
    r"""Override the default interpolation order in y and lnlnQ."""
    return _hoppet_swig.SetYLnlnQInterpOrders(yorder, lnlnQorder)

def SetCoupling(asQ0, Q0alphas, nloop):
    return _hoppet_swig.SetCoupling(asQ0, Q0alphas, nloop)

def PreEvolve(asQ0, Q0alphas, nloop, muR_Q, Q0pdf):
    r"""Prepare a cached evolution"""
    return _hoppet_swig.PreEvolve(asQ0, Q0alphas, nloop, muR_Q, Q0pdf)

def AlphaS(Q):
    r"""Return the coupling at scale Q"""
    return _hoppet_swig.AlphaS(Q)

def EvalPID(x, Q, pid):
    r"""
    Return in f the value of the internally stored pdf at the given
    x,Q, and pid with the usual LHApdf meanings for the indices
    -6:6.
    """
    return _hoppet_swig.EvalPID(x, Q, pid)

def StartStrFct(order_max):
    r"""
    ----------------------------------------------------------------------
     Setup of constants and parameters needed for structure functions
    """
    return _hoppet_swig.StartStrFct(order_max)

def StartStrFctExtended(order_max, nflav, scale_choice, constant_mu, param_coefs, wmass, zmass):
    r"""
    ----------------------------------------------------------------------
     Setup of constants and parameters needed for structure functions
    """
    return _hoppet_swig.StartStrFctExtended(order_max, nflav, scale_choice, constant_mu, param_coefs, wmass, zmass)

def WriteLHAPDFGrid(basename, pdf_index):
    r"""
    Write out the contents of tables(0) (assumed to be the PDF) in the
    LHAPDF format
    """
    return _hoppet_swig.WriteLHAPDFGrid(basename, pdf_index)

def hoppetVersionC(cchar, maxlen):
    r"""
    Take a pointer to an array of C characters and if the version
    string length is < maxlen-1, fill the C-array with a null
    terminated string with the version, and return 0. If the version
    string length is >= maxlen-1, then do not fill the C-array,
    and return the required length (including the null terminator).
    """
    return _hoppet_swig.hoppetVersionC(cchar, maxlen)

def version():
    r"""
    Return the version of hoppet as a std::string
    :rtype: string
    :return: The version string
    """
    return _hoppet_swig.version()

def init_global_pdf():
    return _hoppet_swig.init_global_pdf()

def free_global_pdf():
    return _hoppet_swig.free_global_pdf()

def init_global_str_fnc():
    return _hoppet_swig.init_global_str_fnc()

def free_global_str_fnc():
    return _hoppet_swig.free_global_str_fnc()

def pdf_to_array(pdf):
    return _hoppet_swig.pdf_to_array(pdf)

def str_fnc_to_array(str_fnc):
    return _hoppet_swig.str_fnc_to_array(str_fnc)

def SetQED(withqed, qcdqed, plq):
    return _hoppet_swig.SetQED(withqed, qcdqed, plq)

def Start(dy, nloop):
    return _hoppet_swig.Start(dy, nloop)

def StartExtended(ymax, dy, Qmin, Qmax, dlnlnQ, nloop, order, factscheme):
    return _hoppet_swig.StartExtended(ymax, dy, Qmin, Qmax, dlnlnQ, nloop, order, factscheme)

def InitStrFct(order_max, separate_orders, xR, xF):
    return _hoppet_swig.InitStrFct(order_max, separate_orders, xR, xF)

def InitStrFctFlav(order_max, separate_orders, xR, xF, flavour_decomposition):
    return _hoppet_swig.InitStrFctFlav(order_max, separate_orders, xR, xF, flavour_decomposition)

def DeleteAll():
    return _hoppet_swig.DeleteAll()

def Assign(callback):
    return _hoppet_swig.Assign(callback)

def Evolve(asQ0, Q0alphas, nloop, muR_Q, callback, Q0pdf):
    return _hoppet_swig.Evolve(asQ0, Q0alphas, nloop, muR_Q, callback, Q0pdf)

def CachedEvolve(callback):
    return _hoppet_swig.CachedEvolve(callback)

def Eval(x, Q):
    return _hoppet_swig.Eval(x, Q)

def EvalSplit(x, Q, iloop, nf):
    return _hoppet_swig.EvalSplit(x, Q, iloop, nf)

def BenchmarkPDFunpol(x, Q):
    return _hoppet_swig.BenchmarkPDFunpol(x, Q)

def StrFct(x, Q, muR_in, muF_in):
    return _hoppet_swig.StrFct(x, Q, muR_in, muF_in)

def StrFctNoMu(x, Q):
    return _hoppet_swig.StrFctNoMu(x, Q)

def StrFctLO(x, Q, muR_in, muF_in):
    return _hoppet_swig.StrFctLO(x, Q, muR_in, muF_in)

def StrFctNLO(x, Q, muR_in, muF_in):
    return _hoppet_swig.StrFctNLO(x, Q, muR_in, muF_in)

def StrFctFlav(x, Q, muR_in, muF_in, flav):
    return _hoppet_swig.StrFctFlav(x, Q, muR_in, muF_in, flav)

def StrFctNoMuFlav(x, Q, flav):
    return _hoppet_swig.StrFctNoMuFlav(x, Q, flav)

def StrFctLOFlav(x, Q, muR_in, muF_in, flav):
    return _hoppet_swig.StrFctLOFlav(x, Q, muR_in, muF_in, flav)

def StrFctNLOFlav(x, Q, muR_in, muF_in, flav):
    return _hoppet_swig.StrFctNLOFlav(x, Q, muR_in, muF_in, flav)

def StrFctNNLO(x, Q, muR_in, muF_in):
    return _hoppet_swig.StrFctNNLO(x, Q, muR_in, muF_in)

def StrFctN3LO(x, Q, muR_in, muF_in):
    return _hoppet_swig.StrFctN3LO(x, Q, muR_in, muF_in)

cvar = _hoppet_swig.cvar
iF1Wp = cvar.iF1Wp
iF2Wp = cvar.iF2Wp
iF3Wp = cvar.iF3Wp
iF1Wm = cvar.iF1Wm
iF2Wm = cvar.iF2Wm
iF3Wm = cvar.iF3Wm
iF1Z = cvar.iF1Z
iF2Z = cvar.iF2Z
iF3Z = cvar.iF3Z
iF1EM = cvar.iF1EM
iF2EM = cvar.iF2EM
iF1gZ = cvar.iF1gZ
iF2gZ = cvar.iF2gZ
iF3gZ = cvar.iF3gZ
scale_choice_fixed = cvar.scale_choice_fixed
scale_choice_Q = cvar.scale_choice_Q
scale_choice_arbitrary = cvar.scale_choice_arbitrary
nnlo_splitting_exact = cvar.nnlo_splitting_exact
nnlo_splitting_param = cvar.nnlo_splitting_param
nnlo_splitting_Nfitav = cvar.nnlo_splitting_Nfitav
nnlo_splitting_Nfiterr1 = cvar.nnlo_splitting_Nfiterr1
nnlo_splitting_Nfiterr2 = cvar.nnlo_splitting_Nfiterr2
n3lo_splitting_exact = cvar.n3lo_splitting_exact
n3lo_splitting_param = cvar.n3lo_splitting_param
n3lo_splitting_Nfitav = cvar.n3lo_splitting_Nfitav
n3lo_splitting_Nfiterr1 = cvar.n3lo_splitting_Nfiterr1
n3lo_splitting_Nfiterr2 = cvar.n3lo_splitting_Nfiterr2
n3lo_splitting_approximation_up_to_2310_05744 = cvar.n3lo_splitting_approximation_up_to_2310_05744
n3lo_splitting_approximation_up_to_2404_09701 = cvar.n3lo_splitting_approximation_up_to_2404_09701
n3lo_splitting_approximation_up_to_2410_08089 = cvar.n3lo_splitting_approximation_up_to_2410_08089
nnlo_nfthreshold_exact = cvar.nnlo_nfthreshold_exact
nnlo_nfthreshold_param = cvar.nnlo_nfthreshold_param
n3lo_nfthreshold_on = cvar.n3lo_nfthreshold_on
n3lo_nfthreshold_off = cvar.n3lo_nfthreshold_off
factscheme_MSbar = cvar.factscheme_MSbar
factscheme_DIS = cvar.factscheme_DIS
factscheme_PolMSbar = cvar.factscheme_PolMSbar
factscheme_FragMSbar = cvar.factscheme_FragMSbar

