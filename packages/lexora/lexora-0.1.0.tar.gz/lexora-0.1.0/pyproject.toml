[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lexora"
version = "0.1.0"
authors = [
    {name = "VesperAkshay", email = "vesperakshay@gmail.com"},
]
description = "A production-ready, plug-and-play Python SDK for building intelligent RAG systems"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["rag", "llm", "vector-database", "ai", "machine-learning", "nlp"]
dependencies = [
    "pydantic>=2.0.0",
    "litellm>=1.0.0",
    "numpy>=1.24.0",
    "faiss-cpu>=1.7.0",
    "pinecone>=5.0.0",
    "chromadb>=0.4.0",
    "openai>=1.0.0",
    "tiktoken>=0.5.0",
    "asyncio-throttle>=1.0.0",
    "tenacity>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
gpu = [
    "faiss-gpu>=1.7.0",
]

# [project.scripts]
# lexora = "lexora.cli:main"

[project.urls]
Homepage = "https://github.com/VesperAkshay/lexora"
Documentation = "https://vesperakshay.github.io/lexora"
Repository = "https://github.com/VesperAkshay/lexora"
"Bug Tracker" = "https://github.com/VesperAkshay/lexora/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["models*", "llm*", "vector_db*", "utils*", "tools*", "rag_agent*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["models", "llm", "vector_db", "utils", "tools", "rag_agent"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["models", "llm", "vector_db", "utils", "tools", "rag_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]