{"version":3,"file":"static/js/7459.62138214.chunk.js","mappings":"sKAOO,MAAMA,EAA0BC,IACrC,GAAKA,EAGL,OAAIA,aAAiBC,EAAAA,IACfD,EAAME,cAAcC,OAAS,EACxBH,EAAME,cAAcE,KAAKC,GAAMA,EAAEC,SAAWD,EAAEE,aAAYC,KAAK,MAItE,YAAaR,EACRA,EAAMM,QAGRN,EAAMO,UAAU,C,oSCJlB,MAAME,EAAsCA,EACjDC,aACAC,UACAC,gBACAZ,QACAa,yBACAC,yBACAC,wBASK,IAADC,EAAAC,EACJ,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,MACXC,EAA0BC,IAA+BC,EAAAA,EAAAA,WAAS,IAClEC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GAEjCG,GAAmBC,EAAAA,EAAAA,UAAQ,KAC/B,MAAMC,EAAqBjB,EAC3B,OAAKiB,EACE,IACFA,EACHC,aAAcC,OAAyB,OAAlBF,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBC,cACzCE,eAAgBD,OAAyB,OAAlBF,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBG,iBAJb,IAK/B,GACA,CAACpB,IAEEqB,EAAwC,OAAhBN,QAAgB,IAAhBA,GAAsB,QAANT,EAAhBS,EAAkBO,YAAI,IAAAhB,GAA6C,QAA7CC,EAAtBD,EAAwBiB,MAAMC,GAAQA,EAAIC,MAAQC,EAAAA,WAAiB,IAAAnB,OAAnD,EAAhBA,EAAqEoB,MAC7FC,GAAevC,EAAAA,EAAAA,GAAuBC,GAE5C,OAAIW,GACK4B,EAAAA,EAAAA,GAACC,EAAAA,EAA4B,IAGlCF,GAEAC,EAAAA,EAAAA,GAAA,OAAKE,KAAGC,EAAAA,EAAAA,IAAE,CAAEC,OAAQzB,EAAM0B,QAAQC,WAAYC,UAAW5B,EAAM6B,QAAQC,GAAIC,aAAc/B,EAAM6B,QAAQG,IAAI,IAACC,UAC1GZ,EAAAA,EAAAA,GAACa,EAAAA,MAAK,CACJC,YAAY,wCACZC,KAAK,QACLhD,SACEiC,EAAAA,EAAAA,GAACgB,EAAAA,EAAgB,CAAAC,GAAA,SACfC,eAAe,wCAEfC,OAAQ,CAAEpB,kBAGdqB,UAAU,MAMdlC,GAEAmC,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,CAAAV,SAAA,EACEZ,EAAAA,EAAAA,GAACuB,EAAAA,EAAoB,CACnBpD,WAAYe,EACZX,uBAAwBA,EACxBU,WAAYA,EACZX,uBAAwBA,EACxBE,kBAAmBA,KAErBwB,EAAAA,EAAAA,GAACwB,EAAAA,EAA8B,CAC7BrD,WAAYe,EACZJ,4BAA6BA,EAC7BE,QAASA,EACTC,WAAYA,EACZZ,cAAeA,EACfoD,aAAcjC,OAMf,IAAI,E,sGC5FiC,IAAAkC,EAAA,CAAAC,KAAA,SAAAC,OAAA,6BAEvC,MAAMC,EAA2BA,EACtCC,eACAC,gBAKA,MAAM,MAAEpD,IAAUC,EAAAA,EAAAA,KAClB,OACEoB,EAAAA,EAAAA,GAACgC,EAAAA,KAAKC,KAAI,CAACnB,YAAagB,EAAchC,MAAOiC,EAAW7B,IAAGwB,EAAqCd,UAC9FS,EAAAA,EAAAA,IAACW,EAAAA,KAAKE,KAAI,CAAAtB,SAAA,EACRZ,EAAAA,EAAAA,GAACgC,EAAAA,KAAKG,QAAO,CAACrC,MAAOsC,EAAAA,GAAsBC,eAAezB,UACxDZ,EAAAA,EAAAA,GAACsC,EAAAA,GAAI,CACHpC,KAAGC,EAAAA,EAAAA,IAAE,CAAEoC,MAAO5D,EAAM6D,OAAOC,aAAa,IACxCC,GAAIC,EAAAA,GAAOC,0BAA0Bd,EAAcM,EAAAA,GAAsBC,gBAAgBzB,UAEzFZ,EAAAA,EAAAA,GAACgB,EAAAA,EAAgB,CAAAC,GAAA,SACfC,eAAe,cAKrBlB,EAAAA,EAAAA,GAACgC,EAAAA,KAAKG,QAAO,CAACrC,MAAOsC,EAAAA,GAAsBS,SAASjC,UAClDZ,EAAAA,EAAAA,GAACsC,EAAAA,GAAI,CACHpC,KAAGC,EAAAA,EAAAA,IAAE,CAAEoC,MAAO5D,EAAM6D,OAAOC,aAAa,IACxCC,GAAIC,EAAAA,GAAOC,0BAA0Bd,EAAcM,EAAAA,GAAsBS,UAAUjC,UAEnFZ,EAAAA,EAAAA,GAACgB,EAAAA,EAAgB,CAAAC,GAAA,SACfC,eAAe,qBAMb,ECpC8B,IAAAQ,EAAA,CAAAC,KAAA,SAAAC,OAAA,6BAEvC,MAAMkB,EAAyBA,EACpChB,eACAC,gBAKA,MAAM,MAAEpD,IAAUC,EAAAA,EAAAA,KAElB,OACEoB,EAAAA,EAAAA,GAACgC,EAAAA,KAAKC,KAAI,CACRnB,YAAY,mCACZhB,MAAOiC,EACP7B,IAAGwB,EAAqCd,UAExCS,EAAAA,EAAAA,IAACW,EAAAA,KAAKE,KAAI,CAAAtB,SAAA,EACRZ,EAAAA,EAAAA,GAACgC,EAAAA,KAAKG,QAAO,CAACrC,MAAOsC,EAAAA,GAAsBW,iBAAiBnC,UAC1DZ,EAAAA,EAAAA,GAACsC,EAAAA,GAAI,CACHpC,KAAGC,EAAAA,EAAAA,IAAE,CAAEoC,MAAO5D,EAAM6D,OAAOC,aAAa,IACxCC,GAAIC,EAAAA,GAAOC,0BAA0Bd,EAAcM,EAAAA,GAAsBW,kBAAkBnC,UAE3FZ,EAAAA,EAAAA,GAACgB,EAAAA,EAAgB,CAAAC,GAAA,SACfC,eAAe,kBAKrBlB,EAAAA,EAAAA,GAACgC,EAAAA,KAAKG,QAAO,CAACrC,MAAOsC,EAAAA,GAAsBY,gBAAgBpC,UACzDZ,EAAAA,EAAAA,GAACsC,EAAAA,GAAI,CACHpC,KAAGC,EAAAA,EAAAA,IAAE,CAAEoC,MAAO5D,EAAM6D,OAAOC,aAAa,IACxCC,GAAIC,EAAAA,GAAOC,0BAA0Bd,EAAcM,EAAAA,GAAsBY,iBAAiBpC,UAE1FZ,EAAAA,EAAAA,GAACgB,EAAAA,EAAgB,CAAAC,GAAA,SACfC,eAAe,oBAMb,E,0BCpBhB,MAAM+B,EAAqBC,EAAAA,MAAW,IAAM,gQACtCC,EAAuBD,EAAAA,MAAW,IAAM,wKAExCE,EAAgCF,EAAAA,MACpC,IAAM,gLAGFG,EAA+BH,EAAAA,MACnC,IAAM,+MAGFI,EAAmCJ,EAAAA,MACvC,IAAM,8EAGFK,EAAyBA,KAC7B,MAAM,aAAEzB,EAAY,QAAE0B,IAAYC,EAAAA,EAAAA,MAC5B,MAAE9E,IAAUC,EAAAA,EAAAA,KACZ8E,GAAWC,EAAAA,EAAAA,OAETH,QAASI,IAAqBC,EAAAA,EAAAA,KAChC9B,EAA4B,OAAhB6B,QAAgB,IAAhBA,EAAAA,GAAoBE,EAAAA,EAAAA,IAAa1B,EAAAA,GAAuBoB,EAASpB,EAAAA,GAAsB2B,QAEzGC,IAAUlC,EAAc,kCACnBmC,EAAAA,EAAAA,OAGHD,IAAUR,EAAS,4BAGrB,MACEU,KAAM/F,EACNC,QAAS+F,EACTC,QAAS5F,EACT6F,SAAUC,EACVC,YAAaC,IACXC,EAAAA,EAAAA,GAAsB,CACxB3C,kBAGM4C,OAAQC,EAAsBC,UAAWC,IAC/CC,EAAAA,EAAAA,GAAwBtG,GAEpBuG,EAAoC,OAAlBT,QAAkB,IAAlBA,EAAAA,EAAsBE,EAO9C,GC/D4CpF,KAC5C,MAAM4F,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACR,MAAMpD,GAAeqD,EAAAA,EAAAA,KAAI/F,EAAoB,gBACzCA,GAAsB0C,GACxBkD,GAAS,CAACI,EAA8BC,KAAgC,IAADC,EAAAC,EAC/CC,QAA2B,QAApBF,EAACD,IAAWI,gBAAQ,IAAAH,GAAiB,QAAjBC,EAAnBD,EAAqBI,uBAAe,IAAAH,OAAjB,EAAnBA,EAAuCzD,KAEnEsD,EAAc,CACZrE,MAAM4E,EAAAA,EAAAA,IAAUC,EAAAA,IAChBC,QAAS,CAAE1H,WAAYiB,IAE3B,GAEJ,GACC,CAACA,EAAoB4F,GAAU,ED2ClCc,CAA8B3H,GAI1B4G,aAA2BgB,EAAAA,GAC7B,MAAMhB,EAGR,MAAMiB,EAAiB7H,GAAc,SAAUA,EAAuB,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAYsB,KAAO,GAGzEwG,GAAiBC,EAAAA,EAAAA,IAA0BF,IAE3C,uBACJzH,EAAsB,0BACtB4H,EACAvB,UAAWwB,EAAuB,QAClCC,IACEC,EAAAA,EAAAA,GAAuB,CACzBxE,eACAyE,oBAAqBpC,EACrBqC,SAASC,EAAAA,EAAAA,QAA0CR,EACnDD,iBACArB,0BAII,SAAE+B,IAAaC,EAAAA,EAAAA,MACfC,GAAkCpB,SAAQqB,EAAAA,EAAAA,IAAUC,EAAAA,GAAWC,eAAgBL,IAmBrF,OAjBAM,EAAAA,EAAAA,GAA+B,CAC7BR,SAASvC,EAAAA,EAAAA,OAA2C2C,GACpD9E,kBAGFoD,EAAAA,EAAAA,YAAU,KAGJiB,GACFzC,EAASf,EAAAA,GAAOC,0BAA0Bd,EAAcqE,GAA4B,CAAEc,SAAS,GACjG,GAKC,CAACnF,EAAcqE,IAGhB5H,IAA2B2I,EAAAA,GAAeC,mBAE1CV,EAAAA,EAAAA,OAGEzG,EAAAA,EAAAA,GAACoH,EAAAA,EAA+B,CAC9BC,UAAYC,IACV3C,EACE,CAAE7C,eAAcwF,QAChB,CACEC,UAAWA,KACTlB,KACIpC,EAAAA,EAAAA,OAA2CqD,IAASJ,EAAAA,GAAeM,mBAErE9D,EAASf,EAAAA,GAAOC,0BAA0Bd,EAAcM,EAAAA,GAAsBqF,QAAS,CACrFR,SAAS,GAEb,GAGL,EAEHS,UAAWrB,KAMfhF,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,CAAAV,SAAA,EACEZ,EAAAA,EAAAA,GAAC9B,EAAmC,CAClCC,WAAYA,EACZC,QAAS+F,GAAqBiC,EAC9B/H,cAAeG,EACff,MAAOsH,EACPxG,uBAAwBA,EACxBC,kBAAmBA,EACnBF,wBACE0B,EAAAA,EAAAA,GAAC2H,EAAAA,EAAgC,CAC/B7H,MAAOmG,EACP1H,uBAAwBA,EACxBqJ,SAAWN,GAAS3C,EAAqB,CAAE7C,eAAcwF,SACzDO,WAAYhD,GAA0BuB,EAEtC0B,UAAU,GADLvJ,KAKVwD,IAAcK,EAAAA,GAAsBC,gBAAkBN,IAAcK,EAAAA,GAAsBS,UACzF7C,EAAAA,EAAAA,GAAC6B,EAAwB,CAACC,aAAcA,EAAcC,UAAWA,IAC/DA,IAAcK,EAAAA,GAAsBW,kBACtChB,IAAcK,EAAAA,GAAsBY,iBACpChD,EAAAA,EAAAA,GAAC8C,EAAsB,CAAChB,aAAcA,EAAcC,UAAWA,KAE/DV,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,CAAAV,SAAA,EACEZ,EAAAA,EAAAA,GAAC+H,EAAAA,EAAM,CAACC,KAAK,KAAKC,SAAS,KAC3BjI,EAAAA,EAAAA,GAAA,OAAKE,KAAGC,EAAAA,EAAAA,IAAE,CAAE+H,MAAO,OAAQC,UAAW,aAAaxJ,EAAM6D,OAAO4F,UAAU,UAG9EpI,EAAAA,EAAAA,GAAC+H,EAAAA,EAAM,CAACC,KAAK,KAAKC,SAAS,KAC3BjI,EAAAA,EAAAA,GAACkD,EAAAA,SAAc,CACbmF,UACErI,EAAAA,EAAAA,GAAAsB,EAAAA,GAAA,CAAAV,SACG,IAAI0H,MAAM,GAAGC,QAAQ1K,KAAK2K,IACzBxI,EAAAA,EAAAA,GAACyI,EAAAA,kBAAiB,CAACC,MAAM,aAAqBC,KAAM,KAAKH,KAAdA,OAGhD5H,UAEAqD,EAAAA,EAAAA,OACCjE,EAAAA,EAAAA,GAAC4I,EAAAA,GAAM,KAEPvH,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,CAAAV,SAAA,CACGmB,IAAcK,EAAAA,GAAsBqF,SAAUzH,EAAAA,EAAAA,GAACmD,EAAoB,IACnEpB,IAAcK,EAAAA,GAAsByG,OAAQ7I,EAAAA,EAAAA,GAACiD,EAAkB,IAC/DlB,IAAcK,EAAAA,GAAsB2B,SAAU/D,EAAAA,EAAAA,GAACoD,EAA6B,IAC5ErB,IAAcK,EAAAA,GAAsBC,iBAAkBrC,EAAAA,EAAAA,GAACqD,EAA4B,IACnFtB,IAAcK,EAAAA,GAAsBS,WAAY7C,EAAAA,EAAAA,GAACsD,EAAgC,WAIvF,EAuBP,MAnB2BwF,KACzB,MAAM,MAAEnK,IAAUC,EAAAA,EAAAA,KAElB,OACEoB,EAAAA,EAAAA,GAAA,OACEE,KAAGC,EAAAA,EAAAA,IAAE,CACH4I,KAAM,EACNC,SAAU,SACVC,QAAS,OACTC,cAAe,SACfC,QAASxK,EAAM6B,QAAQG,GACvBP,OAAQ,QACT,IAACQ,UAEFZ,EAAAA,EAAAA,GAACuD,EAAsB,KACnB,C,yIE/MH,MAAMyD,EAAiCA,EAC5CR,UACA1E,mBAKA,MAAM4B,GAAWC,EAAAA,EAAAA,OAETO,KAAM/F,EAAYC,QAAS+F,IAAsBM,EAAAA,EAAAA,GAAsB,CAC7E3C,eACAsH,QAAS,CACPC,MAAO7C,KAILP,GAAiB9G,EAAAA,EAAAA,UAAQ,KAC7B,GAAIgF,IAAsBhG,EACxB,OAAO,KAET,MAAM6H,EAAiB7H,GAAc,SAAUA,EAAuB,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAYsB,KAAO,GAE/E,GAAItB,EAAY,CACd,MAAMmL,GAAyBpD,EAAAA,EAAAA,IAA0BF,GACzD,OAAOlC,EAAAA,EAAAA,IAAaoD,EAAAA,GAAgBoC,EAAwBpC,EAAAA,GAAeC,iBAC7E,CACA,OAAO,IAAI,GACV,CAAChJ,EAAYgG,IAkBhB,OAhBAe,EAAAA,EAAAA,YAAU,KACR,IAAKsB,IAAYP,EACf,OAIF,IAAIsD,EAAYnH,EAAAA,GAAsByG,KAGlC5C,IAAmBiB,EAAAA,GAAeM,oBACpC+B,EAAYnH,EAAAA,GAAsBqF,QAGpC/D,EAASf,EAAAA,GAAOC,0BAA0Bd,EAAcyH,GAAY,CAAEtC,SAAS,GAAO,GACrF,CAACvD,EAAU5B,EAAc0E,EAASP,IAE9B,CACLuD,UAAWhD,EACX5B,UAAW4B,GAAWrC,EACvB,C","sources":["graphql/get-graphql-error.ts","experiment-tracking/components/experiment-page/components/ExperimentPageHeaderWithDescription.tsx","experiment-tracking/pages/experiment-page-tabs/EvaluationSubTabSelector.tsx","experiment-tracking/pages/experiment-page-tabs/LabelingSubTabSelector.tsx","experiment-tracking/pages/experiment-page-tabs/ExperimentPageTabs.tsx","experiment-tracking/hooks/useExperimentReduxStoreCompat.ts","experiment-tracking/components/experiment-page/hooks/useNavigateToExperimentPageTab.tsx"],"sourcesContent":["import { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.message || e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","import { useMemo, useState } from 'react';\nimport type { useGetExperimentQuery } from '../../../hooks/useExperimentQuery';\nimport type { ExperimentEntity } from '../../../types';\nimport { ExperimentViewDescriptionNotes } from './ExperimentViewDescriptionNotes';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport type { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { getGraphQLErrorMessage } from '../../../../graphql/get-graphql-error';\nimport { Alert, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewHeader, ExperimentViewHeaderSkeleton } from './header/ExperimentViewHeader';\nimport type { ExperimentKind } from '../../../constants';\n\ntype GetExperimentReturnType = ReturnType<typeof useGetExperimentQuery>['data'];\n\n/**\n * Renders experiment page header with description and notes editor.\n */\nexport const ExperimentPageHeaderWithDescription = ({\n  experiment,\n  loading,\n  onNoteUpdated,\n  error,\n  experimentKindSelector,\n  inferredExperimentKind,\n  refetchExperiment,\n}: {\n  experiment: GetExperimentReturnType;\n  loading?: boolean;\n  onNoteUpdated?: () => void;\n  error: ApolloError | ReturnType<typeof useGetExperimentQuery>['apiError'];\n  experimentKindSelector?: React.ReactNode;\n  inferredExperimentKind?: ExperimentKind;\n  refetchExperiment?: () => Promise<unknown>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [showAddDescriptionButton, setShowAddDescriptionButton] = useState(true);\n  const [editing, setEditing] = useState(false);\n\n  const experimentEntity = useMemo(() => {\n    const experimentResponse = experiment as GetExperimentReturnType;\n    if (!experimentResponse) return null;\n    return {\n      ...experimentResponse,\n      creationTime: Number(experimentResponse?.creationTime),\n      lastUpdateTime: Number(experimentResponse?.lastUpdateTime),\n    } as ExperimentEntity;\n  }, [experiment]);\n\n  const experimentDescription = experimentEntity?.tags?.find((tag) => tag.key === NOTE_CONTENT_TAG)?.value;\n  const errorMessage = getGraphQLErrorMessage(error);\n\n  if (loading) {\n    return <ExperimentViewHeaderSkeleton />;\n  }\n\n  if (errorMessage) {\n    return (\n      <div css={{ height: theme.general.heightBase, marginTop: theme.spacing.sm, marginBottom: theme.spacing.md }}>\n        <Alert\n          componentId=\"mlflow.logged_model.list.header.error\"\n          type=\"error\"\n          message={\n            <FormattedMessage\n              defaultMessage=\"Experiment load error: {errorMessage}\"\n              description=\"Error message displayed on logged models page when experiment data fails to load\"\n              values={{ errorMessage }}\n            />\n          }\n          closable={false}\n        />\n      </div>\n    );\n  }\n\n  if (experimentEntity) {\n    return (\n      <>\n        <ExperimentViewHeader\n          experiment={experimentEntity}\n          inferredExperimentKind={inferredExperimentKind}\n          setEditing={setEditing}\n          experimentKindSelector={experimentKindSelector}\n          refetchExperiment={refetchExperiment}\n        />\n        <ExperimentViewDescriptionNotes\n          experiment={experimentEntity}\n          setShowAddDescriptionButton={setShowAddDescriptionButton}\n          editing={editing}\n          setEditing={setEditing}\n          onNoteUpdated={onNoteUpdated}\n          defaultValue={experimentDescription}\n        />\n      </>\n    );\n  }\n\n  return null;\n};\n","import { Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentPageTabName } from '../../constants';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { FormattedMessage } from 'react-intl';\n\nexport const EvaluationSubTabSelector = ({\n  experimentId,\n  activeTab,\n}: {\n  experimentId: string;\n  activeTab: ExperimentPageTabName;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tabs.Root componentId={experimentId} value={activeTab} css={{ '& > div': { marginBottom: 0 } }}>\n      <Tabs.List>\n        <Tabs.Trigger value={ExperimentPageTabName.EvaluationRuns}>\n          <Link\n            css={{ color: theme.colors.textPrimary }}\n            to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.EvaluationRuns)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Runs\"\n              description=\"Label for the evaluation runs sub-tab in the MLflow experiment navbar\"\n            />\n          </Link>\n        </Tabs.Trigger>\n        <Tabs.Trigger value={ExperimentPageTabName.Datasets}>\n          <Link\n            css={{ color: theme.colors.textPrimary }}\n            to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Datasets)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Datasets\"\n              description=\"Label for the evaluation datasets sub-tab in the MLflow experiment navbar\"\n            />\n          </Link>\n        </Tabs.Trigger>\n      </Tabs.List>\n    </Tabs.Root>\n  );\n};\n","import { Spacer, Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentPageTabName } from '../../constants';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { FormattedMessage } from 'react-intl';\n\nexport const LabelingSubTabSelector = ({\n  experimentId,\n  activeTab,\n}: {\n  experimentId: string;\n  activeTab: ExperimentPageTabName;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  // BEGIN-EDGE\n  return (\n    <Tabs.Root\n      componentId=\"mlflow.labeling-sub-tab-selector\"\n      value={activeTab}\n      css={{ '& > div': { marginBottom: 0 } }}\n    >\n      <Tabs.List>\n        <Tabs.Trigger value={ExperimentPageTabName.LabelingSessions}>\n          <Link\n            css={{ color: theme.colors.textPrimary }}\n            to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.LabelingSessions)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Sessions\"\n              description=\"Label for the labeling sessions sub-tab in the MLflow experiment navbar\"\n            />\n          </Link>\n        </Tabs.Trigger>\n        <Tabs.Trigger value={ExperimentPageTabName.LabelingSchemas}>\n          <Link\n            css={{ color: theme.colors.textPrimary }}\n            to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.LabelingSchemas)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Schemas\"\n              description=\"Label for the labeling schemas sub-tab in the MLflow experiment navbar\"\n            />\n          </Link>\n        </Tabs.Trigger>\n      </Tabs.List>\n    </Tabs.Root>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Button, PageWrapper, Spacer, ParagraphSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { PredefinedError } from '@databricks/web-shared/errors';\nimport invariant from 'invariant';\nimport { useNavigate, useParams, Outlet, matchPath, useLocation } from '../../../common/utils/RoutingUtils';\nimport { useGetExperimentQuery } from '../../hooks/useExperimentQuery';\nimport { useExperimentReduxStoreCompat } from '../../hooks/useExperimentReduxStoreCompat';\nimport { ExperimentPageHeaderWithDescription } from '../../components/experiment-page/components/ExperimentPageHeaderWithDescription';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { ExperimentKind, ExperimentPageTabName } from '../../constants';\nimport {\n  shouldEnableExperimentKindInference,\n  shouldEnableExperimentPageChildRoutes,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useUpdateExperimentKind } from '../../components/experiment-page/hooks/useUpdateExperimentKind';\nimport { ExperimentViewHeaderKindSelector } from '../../components/experiment-page/components/header/ExperimentViewHeaderKindSelector';\nimport { getExperimentKindFromTags } from '../../utils/ExperimentKindUtils';\nimport { useInferExperimentKind } from '../../components/experiment-page/hooks/useInferExperimentKind';\nimport { ExperimentViewInferredKindModal } from '../../components/experiment-page/components/header/ExperimentViewInferredKindModal';\nimport Routes, { RoutePaths } from '../../routes';\nimport { EvaluationSubTabSelector } from './EvaluationSubTabSelector';\nimport { LabelingSubTabSelector } from './LabelingSubTabSelector';\nimport { useGetExperimentPageActiveTabByRoute } from '../../components/experiment-page/hooks/useGetExperimentPageActiveTabByRoute';\nimport { useNavigateToExperimentPageTab } from '../../components/experiment-page/hooks/useNavigateToExperimentPageTab';\n\nconst ExperimentRunsPage = React.lazy(() => import('../experiment-runs/ExperimentRunsPage'));\nconst ExperimentTracesPage = React.lazy(() => import('../experiment-traces/ExperimentTracesPage'));\n\nconst ExperimentLoggedModelListPage = React.lazy(\n  () => import('../experiment-logged-models/ExperimentLoggedModelListPage'),\n);\n\nconst ExperimentEvaluationRunsPage = React.lazy(\n  () => import('../experiment-evaluation-runs/ExperimentEvaluationRunsPage'),\n);\n\nconst ExperimentEvaluationDatasetsPage = React.lazy(\n  () => import('../experiment-evaluation-datasets/ExperimentEvaluationDatasetsPage'),\n);\n\nconst ExperimentPageTabsImpl = () => {\n  const { experimentId, tabName } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const navigate = useNavigate();\n\n  const { tabName: activeTabByRoute } = useGetExperimentPageActiveTabByRoute();\n  const activeTab = activeTabByRoute ?? coerceToEnum(ExperimentPageTabName, tabName, ExperimentPageTabName.Models);\n\n  invariant(experimentId, 'Experiment ID must be defined');\n  if (!shouldEnableExperimentPageChildRoutes()) {\n    // When child routes mode are not enabled, we expect the `tabName` to be defined.\n    // Otherwise, this component is just an outlet for the experiment page child routes.\n    invariant(tabName, 'Tab name must be defined');\n  }\n\n  const {\n    data: experiment,\n    loading: loadingExperiment,\n    refetch: refetchExperiment,\n    apiError: experimentApiError,\n    apolloError: experimentApolloError,\n  } = useGetExperimentQuery({\n    experimentId,\n  });\n\n  const { mutate: updateExperimentKind, isLoading: updatingExperimentKind } =\n    useUpdateExperimentKind(refetchExperiment);\n\n  const experimentError = experimentApiError ?? experimentApolloError;\n\n  // Put the experiment in the redux store so that the logged models page can transition smoothly\n  useExperimentReduxStoreCompat(experiment);\n\n  // For showstopper experiment fetch errors, we want it to hit the error boundary\n  // so that the user can see the error message\n  if (experimentError instanceof PredefinedError) {\n    throw experimentError;\n  }\n\n  const experimentTags = experiment && 'tags' in experiment ? experiment?.tags : [];\n  const canUpdateExperimentKind = true;\n\n  const experimentKind = getExperimentKindFromTags(experimentTags);\n\n  const {\n    inferredExperimentKind,\n    inferredExperimentPageTab,\n    isLoading: inferringExperimentType,\n    dismiss,\n  } = useInferExperimentKind({\n    experimentId,\n    isLoadingExperiment: loadingExperiment,\n    enabled: shouldEnableExperimentKindInference() && !experimentKind,\n    experimentTags,\n    updateExperimentKind,\n  });\n\n  // Check if the user landed on the experiment page without a specific tab (sub-route)...\n  const { pathname } = useLocation();\n  const matchedExperimentPageWithoutTab = Boolean(matchPath(RoutePaths.experimentPage, pathname));\n  // ...if true, we want to navigate to the appropriate tab based on the experiment kind\n  useNavigateToExperimentPageTab({\n    enabled: shouldEnableExperimentPageChildRoutes() && matchedExperimentPageWithoutTab,\n    experimentId,\n  });\n\n  useEffect(() => {\n    // If the experiment kind is inferred, we want to navigate to the appropriate tab.\n    // Should fire once when the experiment kind is inferred.\n    if (inferredExperimentPageTab) {\n      navigate(Routes.getExperimentPageTabRoute(experimentId, inferredExperimentPageTab), { replace: true });\n    }\n    // `navigate` reference changes whenever navigate is called, causing the\n    // use to be unable to visit any tab until confirming the experiment type\n    // if it is included in the deps array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [experimentId, inferredExperimentPageTab]);\n\n  if (\n    inferredExperimentKind === ExperimentKind.NO_INFERRED_TYPE &&\n    canUpdateExperimentKind &&\n    shouldEnableExperimentKindInference()\n  ) {\n    return (\n      <ExperimentViewInferredKindModal\n        onConfirm={(kind) => {\n          updateExperimentKind(\n            { experimentId, kind },\n            {\n              onSettled: () => {\n                dismiss();\n                if (shouldEnableExperimentPageChildRoutes() && kind === ExperimentKind.GENAI_DEVELOPMENT) {\n                  // If the experiment kind is GENAI_DEVELOPMENT, we want to navigate to the Traces tab\n                  navigate(Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Traces), {\n                    replace: true,\n                  });\n                }\n              },\n            },\n          );\n        }}\n        onDismiss={dismiss}\n      />\n    );\n  }\n\n  return (\n    <>\n      <ExperimentPageHeaderWithDescription\n        experiment={experiment}\n        loading={loadingExperiment || inferringExperimentType}\n        onNoteUpdated={refetchExperiment}\n        error={experimentError}\n        inferredExperimentKind={inferredExperimentKind}\n        refetchExperiment={refetchExperiment}\n        experimentKindSelector={\n          <ExperimentViewHeaderKindSelector\n            value={experimentKind}\n            inferredExperimentKind={inferredExperimentKind}\n            onChange={(kind) => updateExperimentKind({ experimentId, kind })}\n            isUpdating={updatingExperimentKind || inferringExperimentType}\n            key={inferredExperimentKind}\n            readOnly={!canUpdateExperimentKind}\n          />\n        }\n      />\n      {activeTab === ExperimentPageTabName.EvaluationRuns || activeTab === ExperimentPageTabName.Datasets ? (\n        <EvaluationSubTabSelector experimentId={experimentId} activeTab={activeTab} />\n      ) : activeTab === ExperimentPageTabName.LabelingSessions ||\n        activeTab === ExperimentPageTabName.LabelingSchemas ? (\n        <LabelingSubTabSelector experimentId={experimentId} activeTab={activeTab} />\n      ) : (\n        <>\n          <Spacer size=\"sm\" shrinks={false} />\n          <div css={{ width: '100%', borderTop: `1px solid ${theme.colors.border}` }} />\n        </>\n      )}\n      <Spacer size=\"sm\" shrinks={false} />\n      <React.Suspense\n        fallback={\n          <>\n            {[...Array(8).keys()].map((i) => (\n              <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n            ))}\n          </>\n        }\n      >\n        {shouldEnableExperimentPageChildRoutes() ? (\n          <Outlet />\n        ) : (\n          <>\n            {activeTab === ExperimentPageTabName.Traces && <ExperimentTracesPage />}\n            {activeTab === ExperimentPageTabName.Runs && <ExperimentRunsPage />}\n            {activeTab === ExperimentPageTabName.Models && <ExperimentLoggedModelListPage />}\n            {activeTab === ExperimentPageTabName.EvaluationRuns && <ExperimentEvaluationRunsPage />}\n            {activeTab === ExperimentPageTabName.Datasets && <ExperimentEvaluationDatasetsPage />}\n          </>\n        )}\n      </React.Suspense>\n    </>\n  );\n};\n\nconst ExperimentPageTabs = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.md,\n        height: '100%',\n      }}\n    >\n      <ExperimentPageTabsImpl />\n    </div>\n  );\n};\n\nexport default ExperimentPageTabs;\n","import { useDispatch } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../redux-types';\nimport { useEffect } from 'react';\nimport { GET_EXPERIMENT_API } from '../actions';\nimport { fulfilled } from '../../common/utils/ActionUtils';\nimport type { useGetExperimentQuery } from './useExperimentQuery';\nimport { get } from 'lodash';\n\n/**\n * A small helper hook that consumes experiment from the GraphQL response and puts it in the redux store.\n * Helps to keep the redux store in sync with the GraphQL data so page transitions are smooth.\n */\nexport const useExperimentReduxStoreCompat = (experimentResponse: ReturnType<typeof useGetExperimentQuery>['data']) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  useEffect(() => {\n    const experimentId = get(experimentResponse, 'experimentId');\n    if (experimentResponse && experimentId) {\n      dispatch((thunkDispatch: ThunkDispatch, getStore: () => ReduxState) => {\n        const alreadyStored = Boolean(getStore().entities?.experimentsById?.[experimentId]);\n        if (!alreadyStored) {\n          thunkDispatch({\n            type: fulfilled(GET_EXPERIMENT_API),\n            payload: { experiment: experimentResponse },\n          });\n        }\n      });\n    }\n  }, [experimentResponse, dispatch]);\n};\n","import { useEffect, useMemo } from 'react';\nimport { useNavigate } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { ExperimentKind, ExperimentPageTabName } from '../../../constants';\nimport { useGetExperimentQuery } from '../../../hooks/useExperimentQuery';\nimport { getExperimentKindFromTags } from '../../../utils/ExperimentKindUtils';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\n\n/**\n * This hook navigates user to the appropriate tab in the experiment page based on the experiment kind.\n */\nexport const useNavigateToExperimentPageTab = ({\n  enabled,\n  experimentId,\n}: {\n  enabled?: boolean;\n  experimentId: string;\n}) => {\n  const navigate = useNavigate();\n\n  const { data: experiment, loading: loadingExperiment } = useGetExperimentQuery({\n    experimentId,\n    options: {\n      skip: !enabled,\n    },\n  });\n\n  const experimentKind = useMemo(() => {\n    if (loadingExperiment || !experiment) {\n      return null;\n    }\n    const experimentTags = experiment && 'tags' in experiment ? experiment?.tags : [];\n\n    if (experiment) {\n      const experimentKindTagValue = getExperimentKindFromTags(experimentTags);\n      return coerceToEnum(ExperimentKind, experimentKindTagValue, ExperimentKind.NO_INFERRED_TYPE);\n    }\n    return null;\n  }, [experiment, loadingExperiment]);\n\n  useEffect(() => {\n    if (!enabled || !experimentKind) {\n      return;\n    }\n\n    // By default, we navigate to the Runs tab\n    let targetTab = ExperimentPageTabName.Runs;\n\n    // For GENAI_DEVELOPMENT, we navigate to the Traces tab.\n    if (experimentKind === ExperimentKind.GENAI_DEVELOPMENT) {\n      targetTab = ExperimentPageTabName.Traces;\n    }\n\n    navigate(Routes.getExperimentPageTabRoute(experimentId, targetTab), { replace: true });\n  }, [navigate, experimentId, enabled, experimentKind]);\n\n  return {\n    isEnabled: enabled,\n    isLoading: enabled && loadingExperiment,\n  };\n};\n"],"names":["getGraphQLErrorMessage","error","ApolloError","graphQLErrors","length","map","e","message","toString","join","ExperimentPageHeaderWithDescription","experiment","loading","onNoteUpdated","experimentKindSelector","inferredExperimentKind","refetchExperiment","_experimentEntity$tag","_experimentEntity$tag2","theme","useDesignSystemTheme","showAddDescriptionButton","setShowAddDescriptionButton","useState","editing","setEditing","experimentEntity","useMemo","experimentResponse","creationTime","Number","lastUpdateTime","experimentDescription","tags","find","tag","key","NOTE_CONTENT_TAG","value","errorMessage","_jsx","ExperimentViewHeaderSkeleton","css","_css","height","general","heightBase","marginTop","spacing","sm","marginBottom","md","children","Alert","componentId","type","FormattedMessage","id","defaultMessage","values","closable","_jsxs","_Fragment","ExperimentViewHeader","ExperimentViewDescriptionNotes","defaultValue","_ref","name","styles","EvaluationSubTabSelector","experimentId","activeTab","Tabs","Root","List","Trigger","ExperimentPageTabName","EvaluationRuns","Link","color","colors","textPrimary","to","Routes","getExperimentPageTabRoute","Datasets","LabelingSubTabSelector","LabelingSessions","LabelingSchemas","ExperimentRunsPage","React","ExperimentTracesPage","ExperimentLoggedModelListPage","ExperimentEvaluationRunsPage","ExperimentEvaluationDatasetsPage","ExperimentPageTabsImpl","tabName","useParams","navigate","useNavigate","activeTabByRoute","useGetExperimentPageActiveTabByRoute","coerceToEnum","Models","invariant","shouldEnableExperimentPageChildRoutes","data","loadingExperiment","refetch","apiError","experimentApiError","apolloError","experimentApolloError","useGetExperimentQuery","mutate","updateExperimentKind","isLoading","updatingExperimentKind","useUpdateExperimentKind","experimentError","dispatch","useDispatch","useEffect","get","thunkDispatch","getStore","_getStore$entities","_getStore$entities$ex","Boolean","entities","experimentsById","fulfilled","GET_EXPERIMENT_API","payload","useExperimentReduxStoreCompat","PredefinedError","experimentTags","experimentKind","getExperimentKindFromTags","inferredExperimentPageTab","inferringExperimentType","dismiss","useInferExperimentKind","isLoadingExperiment","enabled","shouldEnableExperimentKindInference","pathname","useLocation","matchedExperimentPageWithoutTab","matchPath","RoutePaths","experimentPage","useNavigateToExperimentPageTab","replace","ExperimentKind","NO_INFERRED_TYPE","ExperimentViewInferredKindModal","onConfirm","kind","onSettled","GENAI_DEVELOPMENT","Traces","onDismiss","ExperimentViewHeaderKindSelector","onChange","isUpdating","readOnly","Spacer","size","shrinks","width","borderTop","border","fallback","Array","keys","i","ParagraphSkeleton","label","seed","Outlet","Runs","ExperimentPageTabs","flex","overflow","display","flexDirection","padding","options","skip","experimentKindTagValue","targetTab","isEnabled"],"sourceRoot":""}