{"version":3,"file":"static/js/1910.c0016a78.chunk.js","mappings":"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","sources":["experiment-tracking/components/runs-charts/components/RunsChartsGlobalChartSettingsDropdown.tsx","common/hooks/useIsTabActive.tsx","experiment-tracking/components/modals/DeleteRunModal.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFilterInput.tsx","common/components/JsonFormatting.tsx","experiment-tracking/components/modals/RenameRunModal.tsx","experiment-tracking/components/experiment-page/hooks/usePopulateImagesByRunUuid.tsx","experiment-tracking/hooks/logged-models/useGetLoggedModelsQuery.tsx"],"sourcesContent":["import { Button, CheckIcon, DropdownMenu, GearIcon, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isUndefined } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useCallback } from 'react';\nimport { LineSmoothSlider } from '../../LineSmoothSlider';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { RunsChartsUIConfigurationSetter } from '../hooks/useRunsChartsUIConfiguration';\n\nexport const RunsChartsGlobalChartSettingsDropdown = ({\n  globalLineChartConfig,\n  metricKeyList,\n  updateUIState,\n}: {\n  metricKeyList: string[];\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  updateUIState: (stateSetter: RunsChartsUIConfigurationSetter) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const { lineSmoothness, selectedXAxisMetricKey, xAxisKey } = globalLineChartConfig || {};\n\n  const updateGlobalLineChartSettings = useCallback(\n    (newSettings: Partial<RunsChartsGlobalLineChartConfig>) =>\n      updateUIState((state) => ({\n        ...state,\n        globalLineChartConfig: {\n          ...state.globalLineChartConfig,\n          ...newSettings,\n        },\n      })),\n    [updateUIState],\n  );\n\n  const isUsingGlobalMetricXaxis = xAxisKey === RunsChartsLineChartXAxisType.METRIC;\n\n  const label = intl.formatMessage({\n    defaultMessage: 'Configure charts',\n    description: 'Experiment page > view controls > global settings for line chart view > dropdown button label',\n  });\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <Tooltip\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_44\"\n        content={label}\n      >\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"mlflow.charts.controls.global_chart_setup_dropdown\"\n            icon={<GearIcon />}\n            aria-label={label}\n            css={{ flexShrink: 0 }}\n          />\n        </DropdownMenu.Trigger>\n      </Tooltip>\n      <DropdownMenu.Content align=\"end\" css={{ minWidth: 300 }}>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'X-axis',\n            description:\n              'Experiment page > view controls > global settings for line chart view > settings for x-axis section label',\n          })}\n        >\n          <DropdownMenu.Label css={{ display: 'flex', gap: 8 }}>\n            <FormattedMessage\n              defaultMessage=\"X-axis\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis section label\"\n            />\n          </DropdownMenu.Label>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_68\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.STEP}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.STEP })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Step\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use step axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_78\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (wall)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use wall time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_88\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME_RELATIVE })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (relative)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use relative time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.Sub>\n            <DropdownMenu.SubTrigger\n              css={{\n                paddingLeft: theme.spacing.xs + theme.spacing.sm,\n              }}\n            >\n              <DropdownMenu.IconWrapper>\n                <CheckIcon\n                  css={{\n                    visibility: isUsingGlobalMetricXaxis ? 'visible' : 'hidden',\n                  }}\n                />\n              </DropdownMenu.IconWrapper>\n              <FormattedMessage\n                defaultMessage=\"Metric\"\n                description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use metric axis in all charts\"\n              />\n            </DropdownMenu.SubTrigger>\n            <DropdownMenu.SubContent css={{ maxHeight: 300, overflow: 'auto' }}>\n              {metricKeyList.map((metricKey) => (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_118\"\n                  key={metricKey}\n                  checked={selectedXAxisMetricKey === metricKey && isUsingGlobalMetricXaxis}\n                  onClick={() =>\n                    updateGlobalLineChartSettings({\n                      xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n                      selectedXAxisMetricKey: metricKey,\n                    })\n                  }\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {metricKey}\n                </DropdownMenu.CheckboxItem>\n              ))}\n            </DropdownMenu.SubContent>\n          </DropdownMenu.Sub>\n        </DropdownMenu.Group>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Line smoothing',\n            description:\n              'Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.',\n          })}\n        >\n          <DropdownMenu.Label>\n            <FormattedMessage\n              defaultMessage=\"Line smoothing\"\n              description=\"Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.\"\n            />\n          </DropdownMenu.Label>\n\n          <div css={{ padding: theme.spacing.sm }}>\n            <LineSmoothSlider\n              min={0}\n              max={100}\n              onChange={(lineSmoothness) => updateGlobalLineChartSettings({ lineSmoothness })}\n              value={lineSmoothness ? lineSmoothness : 0}\n            />\n          </div>\n        </DropdownMenu.Group>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns whether the browser tab is active or not.\n * @returns true if the tab is active, false otherwise\n */\nexport const useIsTabActive = () => {\n  const [isTabActive, setIsTabActive] = useState(document.visibilityState === 'visible');\n  useEffect(() => {\n    document.addEventListener('visibilitychange', (x) => {\n      setIsTabActive(document.visibilityState === 'visible');\n    });\n  }, []);\n  return isTabActive;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport type { IntlShape } from 'react-intl';\nimport { injectIntl } from 'react-intl';\nimport { Button, Modal } from '@databricks/design-system';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\ninterface State {\n  deletingMode: null | 'selected' | 'withChildren';\n}\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  deleteRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n  intl: IntlShape;\n  childRunIdsBySelectedParent: Record<string, string[]>;\n};\n\nexport class DeleteRunModalImpl extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDeleteSelected = this.handleDeleteSelected.bind(this);\n    this.handleDeleteWithChildren = this.handleDeleteWithChildren.bind(this);\n    this.onRequestClose = this.onRequestClose.bind(this);\n  }\n\n  state: State = {\n    deletingMode: null,\n  };\n\n  getChildRunIdsToDelete() {\n    const { childRunIdsBySelectedParent, selectedRunIds } = this.props;\n    const selectedRunIdsSet = new Set(selectedRunIds);\n    const childRunIdsSet = new Set<string>();\n\n    Object.values(childRunIdsBySelectedParent).forEach((childIds = []) => {\n      childIds.forEach((childId) => {\n        if (!selectedRunIdsSet.has(childId)) {\n          childRunIdsSet.add(childId);\n        }\n      });\n    });\n\n    return Array.from(childRunIdsSet);\n  }\n\n  getRunIdsToDelete(includeDescendants: boolean) {\n    if (!includeDescendants) {\n      return this.props.selectedRunIds;\n    }\n    const childRunIds = this.getChildRunIdsToDelete();\n    return [...this.props.selectedRunIds, ...childRunIds];\n  }\n\n  handleDelete(includeDescendants: boolean) {\n    if (this.state.deletingMode) {\n      return Promise.resolve();\n    }\n    this.setState({ deletingMode: includeDescendants ? 'withChildren' : 'selected' });\n    return this.deleteRuns(includeDescendants);\n  }\n\n  handleDeleteSelected() {\n    return this.handleDelete(false);\n  }\n\n  handleDeleteWithChildren() {\n    return this.handleDelete(true);\n  }\n\n  deleteRuns(includeDescendants: boolean) {\n    const deletePromises: any = [];\n    const runIdsToDelete = this.getRunIdsToDelete(includeDescendants);\n    runIdsToDelete.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises)\n      .catch(() => {\n        const errorModalContent = `${this.props.intl.formatMessage({\n          defaultMessage: 'While deleting an experiment run, an error occurred.',\n          description: 'Experiment tracking > delete run modal > error message',\n        })}`;\n        this.props.openErrorModal(errorModalContent);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      })\n      .finally(() => {\n        this.setState({ deletingMode: null });\n        this.props.onClose();\n      });\n  }\n\n  onRequestClose() {\n    if (!this.state.deletingMode) {\n      this.props.onClose();\n    }\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    const childRunIds = this.getChildRunIdsToDelete();\n    const childRunCount = childRunIds.length;\n    const hasChildRuns = childRunCount > 0;\n    const totalRunsWithChildren = number + childRunCount;\n    const { deletingMode } = this.state;\n    const isDeletingSelected = deletingMode === 'selected';\n    const isDeletingWithChildren = deletingMode === 'withChildren';\n\n    const deleteSelectedButton = (\n      <Button\n        componentId=\"delete-selected\"\n        key=\"delete-selected\"\n        onClick={this.handleDeleteSelected}\n        disabled={isDeletingWithChildren}\n        loading={isDeletingSelected}\n        type=\"primary\"\n      >\n        Delete selected\n      </Button>\n    );\n\n    const deleteSelectedAndChildrenButton = hasChildRuns ? (\n      <Button\n        componentId=\"delete-selected-children\"\n        key=\"delete-selected-children\"\n        type=\"primary\"\n        onClick={this.handleDeleteWithChildren}\n        disabled={isDeletingSelected}\n        loading={isDeletingWithChildren}\n      >\n        Delete selected and children\n      </Button>\n    ) : null;\n\n    const footerButtons = [\n      <Button componentId=\"cancel\" key=\"cancel\" onClick={this.onRequestClose} disabled={!!deletingMode}>\n        Cancel\n      </Button>,\n      deleteSelectedButton,\n      ...(deleteSelectedAndChildrenButton ? [deleteSelectedAndChildrenButton] : []),\n    ];\n\n    return (\n      <Modal\n        componentId=\"delete-run-modal\"\n        data-testid=\"delete-run-modal\"\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        visible={this.props.isOpen}\n        onCancel={this.onRequestClose}\n        footer={footerButtons}\n      >\n        <div className=\"modal-explanatory-text\">\n          <p>\n            <b>\n              Selected {number} experiment {Utils.pluralize('run', number)}.\n            </b>\n          </p>\n          {hasChildRuns ? (\n            <p>\n              The selected run has {childRunCount} child {Utils.pluralize('run', childRunCount)}. Delete this run alone\n              or all {totalRunsWithChildren}?\n            </p>\n          ) : null}\n          {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n          {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n            <p>\n              Deleted runs are restorable for 30 days, after which they are purged along with associated metrics,\n              params, tags, and artifacts.\n            </p>\n          ) : (\n            ''\n          )}\n        </div>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: { selectedRunIds: string[] }) => {\n  const tagsByRunUuid = state.entities?.tagsByRunUuid || {};\n  const parentToChildrenMap: Record<string, string[]> = {};\n\n  Object.entries(tagsByRunUuid).forEach(([runId, tags]) => {\n    const parentTag = (tags as any)?.[EXPERIMENT_PARENT_ID_TAG];\n    const parentRunId = parentTag?.value;\n    if (parentRunId) {\n      if (!parentToChildrenMap[parentRunId]) {\n        parentToChildrenMap[parentRunId] = [];\n      }\n      parentToChildrenMap[parentRunId].push(runId);\n    }\n  });\n\n  const resolveDescendants = (runId: string) => {\n    const result: string[] = [];\n    const stack = [...(parentToChildrenMap[runId] || [])];\n    const visited = new Set<string>();\n\n    while (stack.length) {\n      const current = stack.pop();\n      if (current && !visited.has(current)) {\n        visited.add(current);\n        result.push(current);\n        const children = parentToChildrenMap[current];\n        if (children) {\n          stack.push(...children);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  const childRunIdsBySelectedParent: Record<string, string[]> = {};\n  ownProps.selectedRunIds.forEach((runId) => {\n    const descendants = resolveDescendants(runId);\n    if (descendants.length) {\n      childRunIdsBySelectedParent[runId] = descendants;\n    }\n  });\n\n  return { childRunIdsBySelectedParent };\n};\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(DeleteRunModalImpl));\n","import { useCallback, useState } from 'react';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { useIntl } from 'react-intl';\nimport { Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const RunsChartsFilterInput = ({ chartsSearchFilter }: { chartsSearchFilter?: string }) => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  const { theme } = useDesignSystemTheme();\n\n  const [inputValue, setInputValue] = useState(() => chartsSearchFilter ?? '');\n  const [searching, setSearching] = useState(false);\n\n  const { formatMessage } = useIntl();\n\n  const updateChartFilter = useCallback(\n    (value: string) => {\n      updateChartsUIState((current) => ({\n        ...current,\n        chartsSearchFilter: value,\n      }));\n      setSearching(false);\n    },\n    [updateChartsUIState],\n  );\n\n  const updateChartFilterDebounced = useDebouncedCallback(updateChartFilter, 150);\n\n  return (\n    <Input\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfilterinput.tsx_30\"\n      role=\"searchbox\"\n      prefix={\n        <div css={{ width: theme.general.iconFontSize, lineHeight: 0 }}>\n          {searching ? <Spinner size=\"small\" /> : <SearchIcon />}\n        </div>\n      }\n      value={inputValue}\n      allowClear\n      onChange={(e) => {\n        setInputValue(e.target.value);\n        setSearching(true);\n        updateChartFilterDebounced(e.target.value);\n      }}\n      placeholder={formatMessage({\n        defaultMessage: 'Search metric charts',\n        description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n      })}\n    />\n  );\n};\n","import React from 'react';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { isObject } from 'lodash';\n\ninterface JsonPreviewProps {\n  json: string;\n  wrapperStyle?: React.CSSProperties;\n  overlayStyle?: React.CSSProperties;\n  codeSnippetStyle?: React.CSSProperties;\n}\n\nexport const JsonPreview: React.FC<React.PropsWithChildren<JsonPreviewProps>> = ({\n  json,\n  wrapperStyle,\n  overlayStyle,\n  codeSnippetStyle,\n}) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  const defaultWrapperStyle: React.CSSProperties = {\n    position: 'relative',\n    maxHeight: 'calc(1.5em * 9)',\n    overflow: 'hidden',\n  };\n\n  const defaultOverlayStyle: React.CSSProperties = {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    left: 6,\n    height: '2em',\n    background: 'linear-gradient(transparent, white)',\n  };\n\n  const defaultCodeSnippetStyle: React.CSSProperties = {\n    padding: '5px',\n    overflowX: 'hidden',\n  };\n\n  return (\n    <div style={{ ...defaultWrapperStyle, ...wrapperStyle }}>\n      {isJsonContent ? (\n        <>\n          <CodeSnippet language=\"json\" style={{ ...defaultCodeSnippetStyle, ...codeSnippetStyle }}>\n            {formattedJson}\n          </CodeSnippet>\n          <div css={{ ...defaultOverlayStyle, ...overlayStyle }} />\n        </>\n      ) : (\n        <>{json}</>\n      )}\n    </div>\n  );\n};\n\nfunction useFormattedJson(json: string) {\n  return React.useMemo(() => {\n    try {\n      const parsed = JSON.parse(json);\n      const isJson = isObject(parsed) && typeof parsed !== 'function' && !(parsed instanceof Date);\n      return {\n        formattedJson: isJson ? JSON.stringify(parsed, null, 2) : json,\n        isJsonContent: isJson,\n      };\n    } catch (e) {\n      return {\n        formattedJson: json,\n        isJsonContent: false,\n      };\n    }\n  }, [json]);\n}\n\nexport const FormattedJsonDisplay: React.FC<React.PropsWithChildren<{ json: string }>> = ({ json }) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  return (\n    <div css={{ whiteSpace: 'pre-wrap' }}>\n      {isJsonContent ? (\n        <CodeSnippet language=\"json\" wrapLongLines>\n          {formattedJson}\n        </CodeSnippet>\n      ) : (\n        <span>{json}</span>\n      )}\n    </div>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport type { IntlShape } from 'react-intl';\nimport { injectIntl } from 'react-intl';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\n\nimport { updateRunApi } from '../../actions';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\ntype Props = {\n  isOpen?: boolean;\n  runUuid: string;\n  runName: string;\n  onClose: () => void;\n  updateRunApi: (runId: string, newName: string, id: string) => any;\n  intl: IntlShape;\n  onSuccess?: () => void;\n};\n\nclass RenameRunModalImpl extends Component<Props> {\n  formRef = React.createRef();\n\n  handleRenameRun = (values: Record<string, string>) => {\n    // get value of input field\n    const newRunName = values[NEW_NAME_FIELD];\n\n    const updateRunRequestId = getUUID();\n\n    return this.props\n      .updateRunApi(this.props.runUuid, newRunName, updateRunRequestId)\n      .then(() => this.props.onSuccess?.());\n  };\n\n  render() {\n    const { isOpen = false, runName } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Rename Run',\n          description: 'Modal title to rename the experiment run name',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Save',\n          description: 'Modal button text to save the changes to rename the experiment run name',\n        })}\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameRun}\n        onClose={this.props.onClose}\n      >\n        <RenameForm\n          type=\"run\"\n          name={runName}\n          innerRef={this.formRef}\n          visible={isOpen}\n          validator={async (_, value) => {\n            if (typeof value === 'string' && value.length && !value.trim()) {\n              throw new Error(\n                this.props.intl.formatMessage({\n                  defaultMessage: 'Run name cannot consist only of whitespace!',\n                  description: \"An error shown when user sets the run's name to whitespace characters only\",\n                }),\n              );\n            }\n            return true;\n          }}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateRunApi,\n};\n\nexport const RenameRunModalWithIntl = injectIntl(RenameRunModalImpl);\nexport const RenameRunModal = connect(undefined, mapDispatchToProps)(RenameRunModalWithIntl);\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { listImagesApi } from '@mlflow/mlflow/src/experiment-tracking/actions';\nimport { EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE } from '@mlflow/mlflow/src/experiment-tracking/constants';\n\nexport const usePopulateImagesByRunUuid = ({\n  runUuids,\n  runUuidsIsActive,\n  autoRefreshEnabled,\n  enabled,\n}: {\n  runUuids: string[];\n  runUuidsIsActive: boolean[];\n  autoRefreshEnabled?: boolean;\n  enabled?: boolean;\n}) => {\n  // Retrieve image keys for each run. This should only re-render when the runUuids change.\n  // This populates the imagesByRunUuid with imageKeys, which will be used elsewhere to fetch metadata.\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * The criteria to populate images for a run is\n   * 1. The run is not hidden\n   * 2. The run includes the mlflow.loggedImage tag\n   * 3. The run's image is not already populated\n   */\n  // We need to use a serialized version of runUuids to avoid re-triggering the effect when using an array.\n  const runUuidsSerialized = runUuids.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  useEffect(() => {\n    // Regular single fetch event with no auto-refresh capabilities. Used if auto-refresh is disabled.\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    runUuidsSerialized.split(',').forEach((runUuid) => {\n      if (runUuid) {\n        dispatch(listImagesApi(runUuid));\n      }\n    });\n  }, [runUuidsSerialized, dispatch, autoRefreshEnabled, enabled]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled;\n\n  const runUuidsIsActiveSerialized = runUuidsIsActive.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    const fetchImagesFn = async (autoRefresh: boolean) => {\n      const runUuids = runUuidsSerialized.split(',');\n\n      const activeRunUuids = runUuidsIsActiveSerialized.split(',');\n      // If auto-refresh is enabled, only fetch images for runs that are currently active\n      const filteredRunUuids = autoRefresh ? runUuids.filter((_, index) => activeRunUuids[index] === 'true') : runUuids;\n\n      filteredRunUuids.forEach((runUuid) => {\n        if (runUuid) {\n          dispatch(listImagesApi(runUuid, autoRefresh));\n        }\n      });\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchImagesFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchImagesFn(false).then(scheduleRefresh);\n\n    return () => {\n      fetchImagesFn(true);\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, runUuidsSerialized, runUuidsIsActiveSerialized, autoRefreshEnabled, enabled]);\n};\n","import {\n  type QueryFunctionContext,\n  useQuery,\n  type UseQueryOptions,\n} from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { LoggedModelProto } from '../../types';\nimport { chunk } from 'lodash';\nimport { fetchAPI, getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nconst LOGGED_MODEL_BY_ID_BATCH_LIMIT = 100; // API supports batch size of 100\n\ntype QueryResult = {\n  models?: LoggedModelProto[];\n};\n\ntype QueryKey = ['GET_LOGGED_MODELS', string[]];\n\nconst getQueryKey = (loggedModelIds: string[]): QueryKey => ['GET_LOGGED_MODELS', loggedModelIds] as const;\n\nconst queryFn = async ({ queryKey: [, loggedModelIds] }: QueryFunctionContext<QueryKey>): Promise<QueryResult[]> => {\n  const modelIdChunks = chunk(loggedModelIds, LOGGED_MODEL_BY_ID_BATCH_LIMIT);\n  return Promise.all<QueryResult>(\n    modelIdChunks.map((chunkedIds) => {\n      const queryParams = new URLSearchParams();\n      for (const id of chunkedIds) {\n        queryParams.append('model_ids', id);\n      }\n      return fetchAPI(getAjaxUrl(`ajax-api/2.0/mlflow/logged-models:batchGet?${queryParams.toString()}`), 'GET');\n    }),\n  );\n};\n\n/**\n * Retrieve many logged model from API based on IDs\n */\nexport const useGetLoggedModelsQuery = (\n  {\n    modelIds,\n  }: {\n    modelIds?: string[];\n  },\n  options: UseQueryOptions<QueryResult[], Error, LoggedModelProto[], QueryKey>,\n) => {\n  const { data, isLoading, isFetching, refetch, error } = useQuery<QueryResult[], Error, LoggedModelProto[], QueryKey>({\n    queryKey: getQueryKey(modelIds ?? []),\n    queryFn,\n    select: (results) => results?.flatMap((result) => result?.models || []),\n    retry: false,\n    ...options,\n  });\n\n  return {\n    isLoading,\n    isFetching,\n    data,\n    refetch,\n    error,\n  } as const;\n};\n"],"names":["_ref","name","styles","_ref2","_ref3","_ref4","RunsChartsGlobalChartSettingsDropdown","globalLineChartConfig","metricKeyList","updateUIState","theme","useDesignSystemTheme","intl","useIntl","lineSmoothness","selectedXAxisMetricKey","xAxisKey","updateGlobalLineChartSettings","useCallback","newSettings","state","isUsingGlobalMetricXaxis","RunsChartsLineChartXAxisType","METRIC","label","formatMessage","id","defaultMessage","_jsxs","DropdownMenu","Root","modal","children","_jsx","Tooltip","componentId","content","Trigger","asChild","Button","icon","GearIcon","css","Content","align","Group","role","Label","FormattedMessage","CheckboxItem","checked","STEP","onClick","ItemIndicator","TIME","TIME_RELATIVE","Sub","SubTrigger","_css","paddingLeft","spacing","xs","sm","IconWrapper","CheckIcon","visibility","SubContent","map","metricKey","padding","LineSmoothSlider","min","max","onChange","value","useIsTabActive","isTabActive","setIsTabActive","useState","document","visibilityState","useEffect","addEventListener","x","DeleteRunModalImpl","Component","constructor","props","super","deletingMode","this","handleDelete","bind","handleDeleteSelected","handleDeleteWithChildren","onRequestClose","getChildRunIdsToDelete","childRunIdsBySelectedParent","selectedRunIds","selectedRunIdsSet","Set","childRunIdsSet","Object","values","forEach","childIds","childId","has","add","Array","from","getRunIdsToDelete","includeDescendants","childRunIds","Promise","resolve","setState","deleteRuns","deletePromises","runId","push","deleteRunApi","all","catch","errorModalContent","openErrorModal","then","_this$props$onSuccess","_this$props","onSuccess","call","finally","onClose","render","number","length","childRunCount","hasChildRuns","totalRunsWithChildren","isDeletingSelected","isDeletingWithChildren","deleteSelectedButton","disabled","loading","type","deleteSelectedAndChildrenButton","footerButtons","Modal","title","Utils","pluralize","visible","isOpen","onCancel","footer","className","mapDispatchToProps","connect","mapStateToProps","ownProps","_state$entities","tagsByRunUuid","entities","parentToChildrenMap","entries","tags","parentTag","EXPERIMENT_PARENT_ID_TAG","parentRunId","descendants","result","stack","visited","current","pop","resolveDescendants","injectIntl","RunsChartsFilterInput","chartsSearchFilter","updateChartsUIState","useUpdateRunsChartsUIConfiguration","inputValue","setInputValue","searching","setSearching","updateChartFilter","updateChartFilterDebounced","useDebouncedCallback","Input","prefix","width","general","iconFontSize","lineHeight","Spinner","size","SearchIcon","allowClear","e","target","placeholder","JsonPreview","json","wrapperStyle","overlayStyle","codeSnippetStyle","formattedJson","isJsonContent","useFormattedJson","style","position","maxHeight","overflow","_Fragment","CodeSnippet","language","overflowX","bottom","right","left","height","background","React","parsed","JSON","parse","isJson","isObject","Date","stringify","FormattedJsonDisplay","wrapLongLines","RenameRunModalImpl","args","formRef","handleRenameRun","newRunName","NEW_NAME_FIELD","updateRunRequestId","getUUID","updateRunApi","runUuid","runName","GenericInputModal","okText","handleSubmit","RenameForm","innerRef","validator","async","_","trim","Error","RenameRunModalWithIntl","RenameRunModal","undefined","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","autoRefreshEnabled","enabled","dispatch","useDispatch","runUuidsSerialized","slice","NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE","join","split","listImagesApi","refreshTimeoutRef","useRef","autoRefreshEnabledRef","runUuidsIsActiveSerialized","hookUnmounted","fetchImagesFn","activeRunUuids","autoRefresh","filter","index","scheduleRefresh","logErrorAndNotifyUser","clearTimeout","window","setTimeout","EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL","queryFn","queryKey","loggedModelIds","modelIdChunks","chunk","chunkedIds","queryParams","URLSearchParams","append","fetchAPI","getAjaxUrl","toString","useGetLoggedModelsQuery","modelIds","options","data","isLoading","isFetching","refetch","error","useQuery","select","results","flatMap","models","retry"],"sourceRoot":""}