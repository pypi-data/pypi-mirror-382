{"version":3,"file":"static/js/9023.0d4a2fdf.chunk.js","mappings":"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","sources":["experiment-tracking/components/ExperimentSourceTypeIcon.tsx","experiment-tracking/components/experiment-page/components/runs/cells/SourceCellRenderer.tsx","common/utils/LocalStorageUtils.ts","experiment-tracking/pages/experiment-traces/ExperimentTracesPage.tsx"],"sourcesContent":["import { FileCodeIcon, FolderBranchIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { SourceType } from '../sdk/MlflowEnums';\n\n/**\n * Displays an icon corresponding to the source type of an experiment run.\n */\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <FileCodeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentSourceTypeIcon } from '../../../../ExperimentSourceTypeIcon';\n\nexport const SourceCellRenderer = React.memo(({ value: tags }: { value: RunRowType['tags'] }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!tags) {\n    return <>-</>;\n  }\n  const sourceType = tags[Utils.sourceTypeTag]?.value || '';\n\n  const sourceLink = Utils.renderSource(tags || {}, undefined, undefined);\n  return sourceLink ? (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      <ExperimentSourceTypeIcon sourceType={sourceType} css={{ color: theme.colors.textSecondary }} />\n      <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{sourceLink}</span>\n    </div>\n  ) : (\n    <>-</>\n  );\n});\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n/**\n * Utils for working with local storage.\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class -- TODO(FEINF-4274)\nexport default class LocalStorageUtils {\n  /**\n   * Protocol version of MLflow's local storage. Should be incremented on any breaking change in how\n   * data persisted in local storage is used, to prevent old (invalid) cached data from being loaded\n   * and breaking the application.\n   */\n  static version = '1.1';\n\n  /**\n   * Return a LocalStorageStore corresponding to the specified component and ID, where the ID\n   * can be used to disambiguate between multiple instances of cached data for the same component\n   * (e.g. cached data for multiple experiments).\n   */\n  static getStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'localStorage');\n  }\n\n  static getSessionScopedStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'sessionStorage');\n  }\n}\n\n/**\n * Interface to browser local storage that allows for setting key-value pairs under the specified\n * \"scope\".\n */\nclass LocalStorageStore {\n  constructor(scope: any, type: any) {\n    this.scope = scope;\n    if (type === 'localStorage') {\n      this.storageObj = window.localStorage;\n    } else {\n      this.storageObj = window.sessionStorage;\n    }\n  }\n  static reactComponentStateKey = 'ReactComponentState';\n\n  scope: any;\n  storageObj: any;\n\n  /**\n   * Loads React component state cached in local storage into a vanilla JS object.\n   */\n  loadComponentState() {\n    const storedVal = this.getItem(LocalStorageStore.reactComponentStateKey);\n    if (storedVal) {\n      return JSON.parse(storedVal);\n    }\n    return {};\n  }\n\n  /**\n   * Save React component state in local storage.\n   * @param stateRecord: Immutable.Record instance or plain object containing component state.\n   */\n  saveComponentState(stateRecord: any) {\n    const targetValue = typeof stateRecord.toJSON === 'function' ? stateRecord.toJSON() : stateRecord;\n    this.setItem(LocalStorageStore.reactComponentStateKey, JSON.stringify(targetValue));\n  }\n\n  /**\n   * Helper method for constructing a scoped key to use for setting/getting values in\n   * local storage.\n   */\n  withScopePrefix(key: any) {\n    return ['MLflowLocalStorage', LocalStorageUtils.version, this.scope, key].join('-');\n  }\n\n  /** Save the specified key-value pair in local storage. */\n  setItem(key: any, value: any) {\n    this.storageObj.setItem(this.withScopePrefix(key), value);\n  }\n\n  /** Fetch the value corresponding to the passed-in key from local storage. */\n  getItem(key: any) {\n    return this.storageObj.getItem(this.withScopePrefix(key));\n  }\n}\n","import { useMemo } from 'react';\nimport invariant from 'invariant';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { ExperimentViewTraces } from '../../components/experiment-page/components/ExperimentViewTraces';\n\nconst ExperimentTracesPage = () => {\n  const { experimentId } = useParams();\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const experimentIds = useMemo(() => [experimentId], [experimentId]);\n\n  return <ExperimentViewTraces experimentIds={experimentIds} />;\n};\n\nexport default ExperimentTracesPage;\n"],"names":["ExperimentSourceTypeIcon","sourceType","className","SourceType","NOTEBOOK","_jsx","NotebookIcon","LOCAL","FileCodeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","_ref","name","styles","SourceCellRenderer","React","value","tags","_tags$Utils$sourceTyp","theme","useDesignSystemTheme","_Fragment","children","Utils","sourceTypeTag","sourceLink","renderSource","undefined","_jsxs","css","_css","display","gap","spacing","xs","alignItems","color","colors","textSecondary","LocalStorageUtils","getStoreForComponent","componentName","id","LocalStorageStore","join","getSessionScopedStoreForComponent","version","constructor","scope","type","storageObj","this","window","localStorage","sessionStorage","loadComponentState","storedVal","getItem","reactComponentStateKey","JSON","parse","saveComponentState","stateRecord","targetValue","toJSON","setItem","stringify","withScopePrefix","key","ExperimentTracesPage","experimentId","useParams","invariant","experimentIds","useMemo","ExperimentViewTraces"],"sourceRoot":""}