import sys
import os
from pathlib import Path
import timeit
import re
import random
import string
import numpy as np
from matplotlib import pyplot as plt
from datetime import datetime
import importlib.util
import ctypes
import platform
import subprocess
import shutil
import statistics
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed, TimeoutError

class TimeoutException(Exception):
    pass

def run_with_timeout(func, timeout=5):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    result = [None]
    exception = [None]

    def worker():
        try:
            result[0] = func()
        except Exception as e:
            exception[0] = e

    thread = threading.Thread(target=worker)
    thread.start()
    thread.join(timeout)

    if thread.is_alive():
        raise TimeoutException(f"–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫—É–Ω–¥")
    if exception[0] is not None:
        raise exception[0]
    return result[0]

def find_dll(dll_name):
    """–ü–æ–∏—Å–∫ DLL –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö"""
    search_paths = [
        *os.environ.get('PATH', '').split(os.pathsep),
        str(Path(sys.prefix) / "bin"),
        str(Path(sys.prefix) / "Library" / "bin"),
        "C:/msys64/mingw64/bin",
        "C:/Windows/System32"
    ]

    for path in search_paths:
        dll_path = Path(path) / dll_name
        if dll_path.exists():
            return str(dll_path)
    return None

def check_dependencies(pyd_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è:")

    if shutil.which('dumpbin'):
        try:
            print("\n–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é dumpbin:")
            result = subprocess.run(
                ['dumpbin', '/dependents', str(pyd_path)],
                capture_output=True,
                text=True,
                check=True
            )
            print(result.stdout)
        except subprocess.CalledProcessError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e.stderr}")

    required_dlls = [
        f"python{sys.version_info.major}{sys.version_info.minor}.dll",
        "libstdc++-6.dll",
        "libgcc_s_seh-1.dll",
        "libwinpthread-1.dll",
        "zlib1.dll"
    ]

    missing_dlls = []
    for dll in required_dlls:
        dll_path = find_dll(dll)
        if dll_path:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞: {dll} -> {dll_path}")
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞: {dll}")
            missing_dlls.append(dll)

    return missing_dlls

def load_fastregex_module():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    print("\n" + "=" * 50)
    print("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è fastregex")
    print("=" * 50)

    build_dir = Path(__file__).parent.parent / "build"
    pyd_path = build_dir / "fastregex.pyd"

    print(f"\nüîç –ü–æ–∏—Å–∫ –º–æ–¥—É–ª—è –ø–æ –ø—É—Ç–∏: {pyd_path}")

    if not pyd_path.exists():
        print(f"\n‚ùå –§–∞–π–ª {pyd_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    print(f"‚úÖ –§–∞–π–ª –º–æ–¥—É–ª—è –Ω–∞–π–¥–µ–Ω. –†–∞–∑–º–µ—Ä: {pyd_path.stat().st_size / 1024:.2f} KB")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    print("\nüñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    print(f"–û–°: {platform.system()} {platform.release()}")
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {'x64' if sys.maxsize > 2 ** 32 else 'x86'}")
    print(f"–í–µ—Ä—Å–∏—è Python: {sys.version}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    missing_dlls = check_dependencies(pyd_path)
    if missing_dlls:
        print("\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç DLL:", missing_dlls)
        return None

    # –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ ctypes
    print("\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ ctypes:")
    try:
        ctypes.CDLL(str(pyd_path))
        print("‚úÖ –ú–æ–¥—É–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ ctypes")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

    # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    print("\nüöÄ –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è...")
    try:
        sys.path.append(str(build_dir))
        import fastregex
        print("‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        return fastregex
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return None

class RegexBenchmark:
    def __init__(self, fastregex_module):
        self.fastregex = fastregex_module
        self.results = []
        self.cache_stats = []
        self.test_cases = [
            ('–ë—É–∫–≤–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', 'abc', 1000),
            ('–¶–∏—Ñ—Ä—ã', r'\d+', 1000),
            ('Email', r'[\w.-]+@[\w.-]+\.\w+', 1000),
            ('–ì—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤', r'\b\w{4}\b', 1000),
            ('–°–ª–æ–∂–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω', r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+', 500),
            ('–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç', r'^[A-Z].*$', 5000, lambda: '\n'.join(['Test'] + ['x' * 100] * 100)),
            ('–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ', r'\b\w{10}\b', 10000,
             lambda: ' '.join([''.join(random.choices(string.ascii_letters, k=10)) for _ in range(1000)])),
            ('–ö–∏—Ä–∏–ª–ª–∏—Ü–∞', r'[–ê-–Ø–∞-—è–Å—ë]+', 1000),
            ('–•–µ—à—Ç–µ–≥–∏', r'#[A-Za-z0-9_]+', 1000),
            ('URL', r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+', 1000)
        ]

    def generate_text(self, length, pattern=None, custom_generator=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        if custom_generator:
            return custom_generator()

        chars = string.ascii_letters + string.digits + ' \t\n'
        text = ''.join(random.choices(chars, k=length))

        if pattern:
            clean_pattern = re.sub(r'[\\\[\](){}^$.*+?|]', '', pattern)
            if clean_pattern:
                for _ in range(10):
                    pos = random.randint(0, len(text) - len(clean_pattern))
                    text = text[:pos] + clean_pattern + text[pos + len(clean_pattern):]
        return text

    def run_test(self, name, pattern, text_size, text_gen=None):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        print(f"\nüîπ –¢–µ—Å—Ç: {name}")
        print(f"–ü–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        print(f"–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {text_size} —Å–∏–º–≤–æ–ª–æ–≤")

        try:
            text = run_with_timeout(
                lambda: self.generate_text(text_size, pattern, text_gen),
                timeout=3
            )
        except TimeoutException:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {name}")
            self.results.append({
                'name': name,
                'status': 'timeout',
                'stage': 'text_generation'
            })
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ regex
        try:
            re_pattern = run_with_timeout(
                lambda: re.compile(pattern),
                timeout=1
            )
            fr_pattern = run_with_timeout(
                lambda: self.fastregex.compile(pattern),
                timeout=1
            )
        except TimeoutException:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}")
            self.results.append({
                'name': name,
                'status': 'timeout',
                'stage': 'pattern_compilation'
            })
            return
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")
            self.results.append({
                'name': name,
                'status': 'error',
                'stage': 'pattern_compilation',
                'error': str(e)
            })
            return

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ re
        try:
            re_time = run_with_timeout(
                lambda: min(timeit.repeat(
                    lambda: re_pattern.search(text),
                    number=10,
                    repeat=3
                )),
                timeout=10
            )
            re_stddev = statistics.stdev(timeit.repeat(
                lambda: re_pattern.search(text),
                number=10,
                repeat=3
            )) if text_size < 10000 else 0
        except TimeoutException:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç re –¥–ª—è {name}")
            re_time = float('inf')
            re_stddev = 0
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ re: {e}")
            re_time = float('inf')
            re_stddev = 0

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fastregex
        try:
            fr_time = run_with_timeout(
                lambda: min(timeit.repeat(
                    lambda: fr_pattern.search(text),
                    number=10,
                    repeat=3
                )),
                timeout=10
            )
            fr_stddev = statistics.stdev(timeit.repeat(
                lambda: fr_pattern.search(text),
                number=10,
                repeat=3
            )) if text_size < 10000 else 0
            ratio = fr_time / re_time if re_time != float('inf') else float('inf')
            result = "‚úÖ –±—ã—Å—Ç—Ä–µ–µ" if ratio < 1 else "‚ùå –º–µ–¥–ª–µ–Ω–Ω–µ–µ"
        except TimeoutException:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç fastregex –¥–ª—è {name}")
            fr_time = float('inf')
            fr_stddev = 0
            ratio = float('inf')
            result = "‚ùå –¢–ê–ô–ú–ê–£–¢"
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ fastregex: {e}")
            fr_time = float('inf')
            fr_stddev = 0
            ratio = float('inf')
            result = "‚ùå –û–®–ò–ë–ö–ê"

        self.results.append({
            'name': name,
            'pattern': pattern,
            'text_size': len(text),
            're_time': re_time,
            're_stddev': re_stddev,
            'fr_time': fr_time,
            'fr_stddev': fr_stddev,
            'ratio': ratio,
            'result': result,
            'status': 'completed'
        })

        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
        if hasattr(self.fastregex, 'cache_size'):
            self.cache_stats.append(self.fastregex.cache_size())

    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "=" * 50)
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("=" * 50)

        completed_tests = [r for r in self.results if r['status'] == 'completed']
        other_tests = [r for r in self.results if r['status'] != 'completed']

        for result in completed_tests:
            print(f"\nüî∏ {result['name']}")
            print(f"re: {result['re_time']:.6f} sec (¬±{result['re_stddev']:.2e})")
            if result['fr_time'] == float('inf'):
                print("fastregex: ‚ùå –û–®–ò–ë–ö–ê")
            else:
                print(f"fastregex: {result['fr_time']:.6f} sec (¬±{result['fr_stddev']:.2e})")
                print(f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ: {result['ratio']:.2f}x {result['result']}")

        if other_tests:
            print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for test in other_tests:
                print(f"{test['name']}: {test['status']} –Ω–∞ —ç—Ç–∞–ø–µ {test.get('stage', '?')}")

        if self.cache_stats:
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max(self.cache_stats)}")
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {min(self.cache_stats)}")
            print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {statistics.mean(self.cache_stats):.1f}")

    def plot_results(self):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        valid_results = [r for r in self.results if r['status'] == 'completed' and r['fr_time'] != float('inf')]
        if not valid_results:
            print("\n‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return

        plt.figure(figsize=(14, 8))

        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        plt.subplot(2, 1, 1)
        labels = [r['name'] for r in valid_results]
        re_times = [r['re_time'] * 1000 for r in valid_results]
        fr_times = [r['fr_time'] * 1000 for r in valid_results]
        re_err = [r['re_stddev'] * 1000 for r in valid_results]
        fr_err = [r['fr_stddev'] * 1000 for r in valid_results]

        x = np.arange(len(labels))
        width = 0.35

        plt.bar(x - width / 2, re_times, width, label='re', color='blue', yerr=re_err, capsize=3)
        plt.bar(x + width / 2, fr_times, width, label='fastregex', color='orange', yerr=fr_err, capsize=3)

        plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
        plt.ylabel('–í—Ä–µ–º—è (–º—Å)')
        plt.xticks(x, labels, rotation=45, ha="right")
        plt.legend()
        plt.grid(True, axis='y', linestyle='--', alpha=0.7)

        # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        plt.subplot(2, 1, 2)
        ratios = [r['ratio'] for r in valid_results]
        plt.bar(x, ratios, color=['green' if r < 1 else 'red' for r in ratios])
        plt.axhline(1, color='gray', linestyle='--')
        plt.title('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (fastregex/re)')
        plt.ylabel('–û—Ç–Ω–æ—à–µ–Ω–∏–µ')
        plt.xticks(x, labels, rotation=45, ha="right")
        plt.grid(True, axis='y', linestyle='--', alpha=0.7)

        plt.tight_layout()

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"performance_results_{timestamp}.png"
        plt.savefig(filename)
        print(f"\nüìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
    fastregex_module = load_fastregex_module()
    if fastregex_module is None:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å")
        sys.exit(1)

    print("\n" + "=" * 50)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ regex")
    print("=" * 50)

    benchmark = RegexBenchmark(fastregex_module)

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
    with ThreadPoolExecutor(max_workers=4) as executor:
        futures = []
        for test_case in benchmark.test_cases:
            if len(test_case) == 3:
                name, pattern, size = test_case
                futures.append(executor.submit(
                    benchmark.run_test, name, pattern, size
                ))
            else:
                name, pattern, size, gen = test_case
                futures.append(executor.submit(
                    benchmark.run_test, name, pattern, size, gen
                ))

        for future in as_completed(futures, timeout=60):
            try:
                future.result()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")

    benchmark.print_results()
    benchmark.plot_results()

    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    if hasattr(fastregex_module, 'clear_cache'):
        fastregex_module.clear_cache()
        print("\n[LOG] –ö—ç—à –æ—á–∏—â–µ–Ω")

if __name__ == "__main__":
    main()