# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aioqzone
# This file is distributed under the same license as the aioqzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aioqzone \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-02 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/qqqr/exception.rst:2
#, fuzzy
msgid "QQQR Exceptions"
msgstr "QQQR 异常"

#: of qqqr.exception.TencentLoginError:1
#, fuzzy
msgid "This exception represents that an error occured in Qzone **login**, with at least an error code."
msgstr "这个异常表示 Qzone 登录期间发生了一个错误。此异常至少包含一个来自 Qzone 的错误码。"

#: of qqqr.exception.UnexpectedInteraction:1
msgid "Represents that user didn't interact as expected."
msgstr ""

#: of qqqr.exception.UserBreak:1
#, fuzzy
msgid "Represents that user cancels the login spontaneously."
msgstr "这个异常应当在用户主动停止 Qzone 登录时被抛出。"

#: of qqqr.exception.UserBreak:5
msgid "Inherit from :exc:`UnexpectedInteraction`."
msgstr ""

#: of qqqr.exception.UserTimeout:1
#, fuzzy
msgid "Represents that user doesn't interact as expected in a time."
msgstr "这个异常应当在用户主动停止 Qzone 登录时被抛出。"

#~ msgid ""
#~ "Once we await a hook, we expect that if "
#~ "the hook is broken, it will not mess up "
#~ "our own error handling. It is convenient to "
#~ "wrap an exception raise from hooks with this "
#~ "error."
#~ msgstr ""

#~ msgid ""
#~ "If the caller catches a `HookError`, it is "
#~ "recommended to omit the error. If something is "
#~ "broken by the hook, or something must be "
#~ "retrieved by the hook is not available, then "
#~ "it is recommended to reraise the exception."
#~ msgstr ""

#~ msgid ""
#~ "Omit the error if you can: >>> try: >>>"
#~ "     await hook_guard(inform_user)('hello') >>> except HookError"
#~ " as e: >>>     log.error(\"Hook raises an error\", "
#~ "exc_info=e.__cause__) # do not reraise"
#~ msgstr ""

#~ msgid ""
#~ "Reraise only when you have to: >>> try: >>>"
#~ "     need_input(await hook_guard(read_from_user)()) >>> except "
#~ "HookError as e: >>>     raise e"
#~ msgstr ""

#~ msgid "Do not inherit from :exc:`KeyboardInterrupt`."
#~ msgstr ""
