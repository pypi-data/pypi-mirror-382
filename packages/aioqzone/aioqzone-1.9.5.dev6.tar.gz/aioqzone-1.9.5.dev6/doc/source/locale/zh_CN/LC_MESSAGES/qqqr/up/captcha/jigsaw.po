# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aioqzone
# This file is distributed under the same license as the aioqzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aioqzone \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-04 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../source/qqqr/up/captcha/jigsaw.rst:2
msgid "Solving Slide Tcaptcha"
msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Use `.bbox` to get bounding box of the piece, and `.padding` to get padding size."
#~ msgstr ""

#~ msgid "BGR channel masked by :obj:`.mask`"
#~ msgstr ""

#~ msgid ""
#~ "This method attempts to generate a piece view "
#~ "like that on the puzzle. In order to help "
#~ "`cv2.matchTemplate` to get an accurate result."
#~ msgstr ""

#~ msgid "alpha channel"
#~ msgstr ""

#~ msgid ""
#~ "The function takes one argument, x, which is "
#~ "the number of pixels that the user drags. The"
#~ " function returns a list of lists containing "
#~ "three integers: [x_coordinate, y_coordinate, time]. Each "
#~ "coordinate and time value is randomly generated "
#~ "according to corresponding rules."
#~ msgstr ""

#~ msgid "Specify the number of pixels that the user drags."
#~ msgstr ""

#~ msgid ":py:class:`~typing.List`\\[:py:class:`~typing.List`\\[:py:class:`int`]]"
#~ msgstr ""

#~ msgid ""
#~ "A list of lists, where each sublist contains "
#~ "three elements: the x coordinate, y coordinate and"
#~ " time"
#~ msgstr ""

#~ msgid "Represents the jigsaw piece."
#~ msgstr ""

#~ msgid "The bounding box of the jigsaw piece in [x, y, w, h]"
#~ msgstr ""

#~ msgid ""
#~ "This method attempts to generate a piece view "
#~ "like that on the puzzle. In order to help "
#~ ":meth:`cv2.matchTemplate` to get an accurate result."
#~ msgstr ""

#~ msgid "It will dim the original piece and draw its contour with white lines."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "coeff to be multiplied with the image in order to dim it, default as 0.3"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ":py:class:`~numpy.ndarray`"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "generated piece image."
#~ msgstr ""

#~ msgid "The contour of the jigsaw piece in [N, 1, 2]i4, the last axis represents (x,y)."
#~ msgstr ""

#~ msgid ""
#~ "The crop method crops the image and saves the"
#~ " contour of the jigsaw piece. It also saves "
#~ "a bounding box for that contour, and calculates "
#~ "padding to be used in cropping."
#~ msgstr ""

#~ msgid "Use ::obj`.bbox` to get bounding box of the piece, and :obj:`.padding` to get padding size."
#~ msgstr ""

#~ msgid "BGR channel of the jigsaw piece, which is masked by :obj:`.mask`"
#~ msgstr ""

#~ msgid "The alpha channel of the jigsaw piece, which is used as mask."
#~ msgstr ""

#~ msgid "The padding of the jigsaw piece sprite in [left, top, right, bottom]"
#~ msgstr ""

#~ msgid "The strip method crops the image and returns exactly the piece w/o any padding."
#~ msgstr ""

#~ msgid ""
#~ "Once cropped, use `.bbox` to get bounding box "
#~ "of the piece, and use `.padding` to get "
#~ "padding size."
#~ msgstr ""

#~ msgid "Generate a mask for `cv2.matchTemplate` since the piece is in an irregular shape."
#~ msgstr ""

#~ msgid "The imitate_drag function simulates a drag event."
#~ msgstr ""

#~ msgid ""
#~ "The function takes one argument, x, which is "
#~ "the number of pixels that the user drags. The"
#~ " function returns a tuple of lists containing "
#~ "three integers: [x_coordinate, y_coordinate]. Each coordinate"
#~ " and time value is randomly generated according "
#~ "to corresponding rules."
#~ msgstr ""

#~ msgid "Specify the position that the drag starts."
#~ msgstr ""

#~ msgid "Specify the position that the drag ends."
#~ msgstr ""

#~ msgid "Specify the y-coordinate."
#~ msgstr ""

#~ msgid ""
#~ ":py:data:`~typing.Tuple`\\[:py:class:`~typing.List`\\[:py:class:`int`], "
#~ ":py:class:`~typing.List`\\[:py:class:`int`]]"
#~ msgstr ""

#~ msgid "Two lists consist of the x coordinate and y coordinate"
#~ msgstr ""

#~ msgid "Import this module needs extra ``captcha``."
#~ msgstr ""

#~ msgid ""
#~ "This method attempts to generate a piece view "
#~ "like that on the puzzle by dimming the "
#~ "original piece. In order to get an accurate "
#~ "result."
#~ msgstr ""

#~ msgid "coeff to be multiplied with the image in order to dim it, default as 0.36"
#~ msgstr ""

#~ msgid "Generate a mask for :meth:`corr_norm_mask_match` since the piece is in an irregular shape."
#~ msgstr ""

#~ msgid "f8 array, with the shape of `x.shape - (k.shape - 1)`"
#~ msgstr ""

#~ msgid "``TM_CCORR_NORMED`` mode in opecv matchTemplate."
#~ msgstr ""

#~ msgid "data mat. dtype should be int/uint."
#~ msgstr ""

#~ msgid "template mat. dtype should be the same with that of `x`."
#~ msgstr ""

#~ msgid "a binary mask mat in ``{0, 1}``. dtype should be int/uint."
#~ msgstr ""

#~ msgid ""
#~ "R(x,y)= \\frac{\\sum_{x',y'} (T(x',y') \\cdot I(x+x',y+y') "
#~ "\\cdot M(x',y')^2)}{\\sqrt{\\sum_{x',y'} \\left( T(x',y') \\cdot "
#~ "M(x',y') \\right)^2 \\cdot \\sum_{x',y'} \\left( I(x+x',y+y')"
#~ " \\cdot M(x',y') \\right)^2}}"
#~ msgstr ""

#~ msgid "Solving Jigsaw-Like Tcaptcha"
#~ msgstr ""
