# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2023, aioqzone
# This file is distributed under the same license as the aioqzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aioqzone \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-19 09:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/qqqr/jsjson.rst:2
msgid "Parsing Javascript Dictionary"
msgstr ""

#: of qqqr.utils.jsjson.AstLoader:1
msgid ":class:`AstLoader` uses standard :mod:`ast` module to parse the js/json"
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads:1
msgid ""
"The :meth:`~AstLoader.json_loads` function loads a JSON object from a js/json string. It uses "
"standard :mod:`ast` module to parse the js/json."
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads qqqr.utils.jsjson.json_loads
msgid "参数"
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads:5
msgid "Used to Pass the js/json string to be parsed."
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads:7
msgid "Used to Specify the name of the file that is being read. This is only for debug use."
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads qqqr.utils.jsjson.json_loads
msgid "返回类型"
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads:8 qqqr.utils.jsjson.json_loads:10
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`bool\\`\\, \\:py\\:class\\:\\`int\\`\\, \\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:class\\:\\`\\~typing.Dict\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`str\\`\\, \\:py\\:class\\:\\`int\\`\\]\\, "
"\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:class\\:\\`bool\\`\\, "
"\\:py\\:class\\:\\`int\\`\\, \\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:class\\:\\`\\~typing.Dict\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`str\\`\\, \\:py\\:class\\:\\`int\\`\\]\\, JsonValue\\]\\, "
"\\:py\\:class\\:\\`\\~typing.List\\`\\\\ \\\\\\[JsonValue\\]\\]\\]\\, "
"\\:py\\:class\\:\\`\\~typing.List\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`bool\\`\\, \\:py\\:class\\:\\`int\\`\\, \\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:class\\:\\`\\~typing.Dict\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`str\\`\\, \\:py\\:class\\:\\`int\\`\\]\\, JsonValue\\]\\, "
"\\:py\\:class\\:\\`\\~typing.List\\`\\\\ \\\\\\[JsonValue\\]\\]\\]\\]`"
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads qqqr.utils.jsjson.json_loads
msgid "返回"
msgstr ""

#: of qqqr.utils.jsjson.AstLoader.json_loads:9 qqqr.utils.jsjson.json_loads:11
msgid "A :obj:`JsonValue` object."
msgstr ""

#: of qqqr.utils.jsjson.json_loads:1
msgid ""
"The :meth:`json_loads` function converts a string representation of JS/JSON data into a Python "
"object. Current implementation is using :external+python:mod:`ast`."
msgstr ""

#: of qqqr.utils.jsjson.json_loads:4
msgid ":meth:`.AstLoader.json_loads`"
msgstr ""

#: of qqqr.utils.jsjson.json_loads:6
msgid "If you need more parameters or another implementation, call ``xxxLoader.json_loads`` instead."
msgstr ""

#: of qqqr.utils.jsjson.json_loads:9
msgid "Used to Pass the JS/JSON string."
msgstr ""

#~ msgid ""
#~ ":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`,"
#~ " :py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`,"
#~ " :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], JsonValue], :py:class:`~typing.List`\\[JsonValue]]], "
#~ ":py:class:`~typing.List`\\[:py:data:`~typing.Union`\\[:py:class:`bool`, "
#~ ":py:class:`int`, :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], JsonValue], :py:class:`~typing.List`\\[JsonValue]]]]"
#~ msgstr ""

#~ msgid "`AstLoader` uses standard :mod:`ast` module to parse the js/json"
#~ msgstr ""

#~ msgid ""
#~ "The json_loads function loads a JSON object from"
#~ " a js/json string. It uses standard :mod:`ast` "
#~ "module to parse the js/json."
#~ msgstr ""

#~ msgid "A jsonvalue object."
#~ msgstr ""

#~ msgid "If you need more parameters or another implementation, call `xxxLoader.json_loads` instead."
#~ msgstr ""

#~ msgid ""
#~ "The :meth:`json_loads` function loads a JSON object "
#~ "from a js/json string. It uses standard :mod:`ast`"
#~ " module to parse the js/json."
#~ msgstr ""

#~ msgid ""
#~ "The json_loads function converts a string representation"
#~ " of JS/JSON data into a Python object. Current"
#~ " implementation is using :external+python:mod:`ast`."
#~ msgstr ""
