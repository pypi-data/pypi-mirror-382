#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ Evolution OpenAI
"""

import os
import time

from evolution_openai import EvolutionOpenAI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = os.getenv("EVOLUTION_BASE_URL", "https://your-endpoint.cloud.ru/v1")
KEY_ID = os.getenv("EVOLUTION_KEY_ID", "your_key_id")
SECRET = os.getenv("EVOLUTION_SECRET", "your_secret")


def get_available_model(client):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ API"""
    try:
        models = client.models.list()
        if models and models.data and len(models.data) > 0:
            model_name = models.data[0].id
            print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            return model_name
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ /v1/models, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
            return "default"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
        return "default"


def token_info_example():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
    print("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        with EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ
            token_info = client.get_token_info()
            print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ: {token_info}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
            current_token = client.current_token
            print(f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {current_token[:20]}...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_name = get_available_model(client)

            # –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            response = client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}],
                max_tokens=16,
            )

            print(f"–û—Ç–≤–µ—Ç: {response.choices[0].message.content}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def token_refresh_example():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    print("\n=== –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        client = EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
        old_token = client.current_token
        print(f"–°—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω: {old_token[:20]}...")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...")
        new_token = client.refresh_token()
        print(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {new_token[:20]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if old_token != new_token:
            print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = get_available_model(client)

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        response = client.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": "–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"}],
            max_tokens=16,
        )

        print(f"–û—Ç–≤–µ—Ç —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º: {response.choices[0].message.content}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def automatic_token_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏"""
    print("\n=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        client = EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        print("–î–µ–ª–∞–µ–º —Å–µ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = get_available_model(client)

        for i in range(3):
            print(f"\n–ó–∞–ø—Ä–æ—Å {i + 1}:")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            token_before = client.current_token[:20]
            print(f"  –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º: {token_before}...")

            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å (—Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è)
            response = client.chat.completions.create(
                model=model_name,
                messages=[
                    {"role": "user", "content": f"–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä {i + 1}"}
                ],
                max_tokens=16,
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
            token_after = client.current_token[:20]
            print(f"  –¢–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞: {token_after}...")

            if token_before != token_after:
                print("  üîÑ –¢–æ–∫–µ–Ω –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                print("  ‚úÖ –¢–æ–∫–µ–Ω –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º")

            print(f"  –û—Ç–≤–µ—Ç: {response.choices[0].message.content}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def token_expiration_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    print("\n=== –°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        client = EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        print("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ...")
        token_info = client.get_token_info()
        print(f"–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {token_info}")

        # –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        print("\n–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω...")
        client.token_manager.invalidate_token()

        # –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        print("–î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å (—Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = get_available_model(client)

        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "user", "content": "–¢–µ—Å—Ç –ø–æ—Å–ª–µ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"}
            ],
            max_tokens=16,
        )

        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: {response.choices[0].message.content}")
        print("üîÑ –¢–æ–∫–µ–Ω –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        new_token_info = client.get_token_info()
        print(f"–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ: {new_token_info}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def multiple_clients_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    print("\n=== –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ credentials
        client1 = EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        client2 = EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        print("–°–æ–∑–¥–∞–ª–∏ –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ—Ç –æ–±–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        token1 = client1.current_token
        token2 = client2.current_token

        print(f"–¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ 1: {token1[:20]}...")
        print(f"–¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ 2: {token2[:20]}...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = get_available_model(client1)

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –æ–±–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        response1 = client1.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 1"}],
            max_tokens=16,
        )

        response2 = client2.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 2"}],
            max_tokens=16,
        )

        print(f"–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É 1: {response1.choices[0].message.content}")
        print(f"–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É 2: {response2.choices[0].message.content}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —É –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        print("\n–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —É –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        new_token1 = client1.refresh_token()
        token2_after = client2.current_token

        print(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ 1: {new_token1[:20]}...")
        print(f"–¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ 2: {token2_after[:20]}...")

        print("‚úÖ –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Evolution OpenAI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏\n")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export EVOLUTION_KEY_ID='–≤–∞—à_key_id'")
        print("export EVOLUTION_SECRET='–≤–∞—à_secret'")
        print("export EVOLUTION_BASE_URL='https://your-endpoint.cloud.ru/v1'")
        return False

    try:
        token_info_example()
        token_refresh_example()
        automatic_token_management()
        token_expiration_simulation()
        multiple_clients_example()

        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏:")
        print("- –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        print("- –ú–æ–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ refresh_token()")
        print("- –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")
        print("- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ get_token_info()")
        print("- –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        return True

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    import sys

    success = main()
    sys.exit(0 if success else 1)
