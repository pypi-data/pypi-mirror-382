#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å–æ Streaming API Evolution OpenAI
"""

import os
import time
import asyncio

from evolution_openai import EvolutionOpenAI, EvolutionAsyncOpenAI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = os.getenv("EVOLUTION_BASE_URL", "https://your-endpoint.cloud.ru/v1")
KEY_ID = os.getenv("EVOLUTION_KEY_ID", "your_key_id")
SECRET = os.getenv("EVOLUTION_SECRET", "your_secret")


def get_available_model(client):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ API"""
    try:
        models = client.models.list()
        if models and models.data and len(models.data) > 0:
            model_name = models.data[0].id
            print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            return model_name
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ /v1/models, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
            return "default"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
        return "default"


async def get_available_model_async(client):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        models = await client.models.list()
        if models and models.data and len(models.data) > 0:
            model_name = models.data[0].id
            print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            return model_name
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ /v1/models, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
            return "default"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
        return "default"


def basic_streaming_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä streaming"""
    print("=== –ë–∞–∑–æ–≤—ã–π Streaming ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        with EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_name = get_available_model(client)

            print("–í–æ–ø—Ä–æ—Å: –†–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞")
            print("–û—Ç–≤–µ—Ç: ", end="", flush=True)

            stream = client.chat.completions.create(
                model=model_name,
                messages=[
                    {
                        "role": "user",
                        "content": "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞",
                    }
                ],
                stream=True,
                max_tokens=16,
            )

            full_response = ""
            for chunk in stream:
                if chunk.choices[0].delta.content:
                    content = chunk.choices[0].delta.content
                    print(content, end="", flush=True)
                    full_response += content

            print("\n")
            response_length = len(full_response)
            preview = full_response[:100]
            print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ({response_length} —Å–∏–º–≤–æ–ª–æ–≤): {preview}...")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def streaming_with_metadata():
    """Streaming —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== Streaming —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        with EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_name = get_available_model(client)

            print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ...")
            print("-" * 50)

            stream = client.chat.completions.create(
                model=model_name,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã –ø–æ—ç—Ç. –ü–∏—à–∏ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∏—Ö–∏.",
                    },
                    {
                        "role": "user",
                        "content": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ –≤–µ—Å–Ω—É",
                    },
                ],
                stream=True,
                max_tokens=16,
                temperature=0.8,
            )

            chunk_count = 0
            total_content = ""
            start_time = time.time()

            for chunk in stream:
                chunk_count += 1

                if chunk.choices[0].delta.content:
                    content = chunk.choices[0].delta.content
                    total_content += content
                    print(content, end="", flush=True)

            end_time = time.time()
            generation_time = end_time - start_time

            print("\n" + "-" * 50)
            print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {chunk_count}")
            print(f"‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time:.2f} —Å–µ–∫")
            print(f"‚Ä¢ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(total_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            chars_per_sec = len(total_content) / generation_time
            print(f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {chars_per_sec:.1f} —Å–∏–º–≤/—Å–µ–∫")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


async def async_streaming_example():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π streaming"""
    print("\n=== –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Streaming ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        async with EvolutionAsyncOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_name = await get_available_model_async(client)

            print("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–∫–∞–∑–∞...")
            print("=" * 60)

            stream = await client.chat.completions.create(
                model=model_name,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã –ø–∏—Å–∞—Ç–µ–ª—å —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å–∫–∞–∑–æ–≤.",
                    },
                    {
                        "role": "user",
                        "content": "–ù–∞–ø–∏—à–∏ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å–∫–∞–∑–∞ –ø—Ä–æ –≤—Ä–µ–º—è",
                    },
                ],
                stream=True,
                max_tokens=16,
            )

            words_count = 0
            async for chunk in stream:
                if chunk.choices[0].delta.content:
                    content = chunk.choices[0].delta.content
                    print(content, end="", flush=True)
                    words_count += len(content.split())

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏
                    await asyncio.sleep(0.05)

            print("\n" + "=" * 60)
            print(f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤: {words_count}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def streaming_with_stop_sequence():
    """Streaming —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º stop sequences"""
    print("\n=== Streaming —Å –æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        client = EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = get_available_model(client)

        print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '–ö–û–ù–ï–¶'...")
        print()

        stream = client.chat.completions.create(
            model=model_name,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–°–æ–∑–¥–∞–≤–∞–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤. "
                        "–ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–ª–æ–≤–æ–º '–ö–û–ù–ï–¶'."
                    ),
                },
                {
                    "role": "user",
                    "content": "–î–∞–π 5 —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                },
            ],
            stream=True,
            max_tokens=16,
            stop=["–ö–û–ù–ï–¶", "–∫–æ–Ω–µ—Ü"],
        )

        for chunk in stream:
            if chunk.choices[0].delta.content:
                print(chunk.choices[0].delta.content, end="", flush=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if chunk.choices[0].finish_reason:
                reason = chunk.choices[0].finish_reason
                print(f"\n[–ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {reason}]")

        print()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


def multiple_streaming_conversations():
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ streaming –¥–∏–∞–ª–æ–≥–∏"""
    print("\n=== –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Streaming –¥–∏–∞–ª–æ–≥–∏ ===\n")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    conversations = [
        {
            "name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫",
            "system": "–¢—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.",
            "question": "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
        },
        {
            "name": "–ò—Å—Ç–æ—Ä–∏–∫",
            "system": "–¢—ã –∏—Å—Ç–æ—Ä–∏–∫. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ –≤–∞–∂–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.",
            "question": "–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ –ø–∞–¥–µ–Ω–∏–∏ –ë–µ—Ä–ª–∏–Ω—Å–∫–æ–π —Å—Ç–µ–Ω—ã",
        },
    ]

    try:
        client = EvolutionOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = get_available_model(client)

        for i, conv in enumerate(conversations, 1):
            print(f"{i}. –ë–µ—Å–µ–¥–∞ —Å {conv['name']}:")
            print(f"–í–æ–ø—Ä–æ—Å: {conv['question']}")
            print("–û—Ç–≤–µ—Ç: ", end="", flush=True)

            try:
                stream = client.chat.completions.create(
                    model=model_name,
                    messages=[
                        {"role": "system", "content": conv["system"]},
                        {"role": "user", "content": conv["question"]},
                    ],
                    stream=True,
                    max_tokens=16,
                )

                for chunk in stream:
                    if chunk.choices[0].delta.content:
                        print(
                            chunk.choices[0].delta.content, end="", flush=True
                        )

                print("\n")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

            print("-" * 60)

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Evolution OpenAI - –ü—Ä–∏–º–µ—Ä—ã Streaming\n")

    basic_streaming_example()
    streaming_with_metadata()

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    print("\n–ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä...")
    asyncio.run(async_streaming_example())

    streaming_with_stop_sequence()
    multiple_streaming_conversations()

    print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã streaming –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ Streaming:")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ stream=True –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞")
    print("- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–π chunk –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
    print("- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ finish_reason –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("- –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ stop sequences –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
    print("- –í async –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'async for chunk in stream'")


if __name__ == "__main__":
    main()
