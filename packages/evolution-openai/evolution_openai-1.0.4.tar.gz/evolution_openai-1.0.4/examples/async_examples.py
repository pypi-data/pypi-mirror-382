#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Evolution OpenAI
"""

import os
import asyncio
from typing import Any, Dict

from evolution_openai import EvolutionAsyncOpenAI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = os.getenv("EVOLUTION_BASE_URL", "https://your-endpoint.cloud.ru/v1")
KEY_ID = os.getenv("EVOLUTION_KEY_ID", "your_key_id")
SECRET = os.getenv("EVOLUTION_SECRET", "your_secret")


async def get_available_model_async(client):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        models = await client.models.list()
        if models and models.data and len(models.data) > 0:
            model_name = models.data[0].id
            print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            return model_name
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ /v1/models, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
            return "default"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'")
        return "default"


async def basic_async_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    print("=== –ë–∞–∑–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–æ–≤")
        return

    try:
        async with EvolutionAsyncOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_name = await get_available_model_async(client)

            response = await client.chat.completions.create(
                model=model_name,
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                    {
                        "role": "user",
                        "content": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?",
                    },
                ],
                max_tokens=16,
            )

            print(f"–û—Ç–≤–µ—Ç: {response.choices[0].message.content}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


async def parallel_requests_example():
    """–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n=== –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        return

    try:
        async with EvolutionAsyncOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_name = await get_available_model_async(client)

            # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            questions = [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏?",
            ]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks = []
            for _, question in enumerate(questions):
                task = client.chat.completions.create(
                    model=model_name,
                    messages=[
                        {
                            "role": "system",
                            "content": "–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                        },
                        {"role": "user", "content": question},
                    ],
                    max_tokens=16,
                )
                tasks.append(task)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            import time

            start_time = time.time()
            responses = await asyncio.gather(*tasks)
            end_time = time.time()

            elapsed = end_time - start_time
            print(
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(questions)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥"
            )
            print()

            for i, (question, response) in enumerate(
                zip(questions, responses)
            ):
                print(f"–í–æ–ø—Ä–æ—Å {i + 1}: {question}")
                print(f"–û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
                print("-" * 50)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")


async def streaming_async_example():
    """–ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ streaming"""
    print("\n=== –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Streaming ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è streaming")
        return

    try:
        client = EvolutionAsyncOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = await get_available_model_async(client)

        print("Streaming –æ—Ç–≤–µ—Ç:")

        stream = await client.chat.completions.create(
            model=model_name,
            messages=[
                {
                    "role": "user",
                    "content": "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
                }
            ],
            stream=True,
            max_tokens=16,
        )

        async for chunk in stream:
            if chunk.choices[0].delta.content:
                print(chunk.choices[0].delta.content, end="", flush=True)

        print("\n")
        await client.close()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ streaming: {e}")


async def context_manager_example():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è async context manager"""
    print("\n=== Context Manager ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è context manager")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º async with –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        async with EvolutionAsyncOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_name = await get_available_model_async(client)

            response = await client.chat.completions.create(
                model=model_name,
                messages=[
                    {
                        "role": "user",
                        "content": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è async/await",
                    }
                ],
                max_tokens=16,
            )

            content = response.choices[0].message.content
            print(f"–û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ context manager: {content}")

        # –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–ª–æ–∫–∞ with

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ context manager: {e}")


async def error_handling_example():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ"""
    print("\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===")

    try:
        client = EvolutionAsyncOpenAI(
            key_id=KEY_ID,
            secret=SECRET,
            base_url=BASE_URL,
            timeout=5.0,  # –ö–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = await get_available_model_async(client)

        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–∞–∑—É–º–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤
        response = await client.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}],
            max_tokens=16,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        )

        print(f"–û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        await client.close()

    except asyncio.TimeoutError:
        print("–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        print(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")


async def batch_processing_example():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency"""
    print("\n=== –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    try:
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞

        client = EvolutionAsyncOpenAI(
            key_id=KEY_ID, secret=SECRET, base_url=BASE_URL
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        model_name = await get_available_model_async(client)

        async def process_single_request(
            text: str, index: int
        ) -> Dict[str, Any]:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º"""
            async with semaphore:
                print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å {index}: {text[:30]}...")

                response = await client.chat.completions.create(
                    model=model_name,
                    messages=[
                        {
                            "role": "system",
                            "content": "–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ).",
                        },
                        {"role": "user", "content": f"–¢–µ–∫—Å—Ç: {text}"},
                    ],
                    max_tokens=16,
                )

                return {
                    "index": index,
                    "text": text,
                    "sentiment": response.choices[0].message.content,
                    "tokens": response.usage.total_tokens
                    if response.usage
                    else 0,
                }

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        texts = [
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å!",
            "–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ...",
            "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏!",
            "–°–∏—Ç—É–∞—Ü–∏—è –º–µ–Ω—è —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç.",
            "–í—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É.",
        ]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        tasks = [
            process_single_request(text, i) for i, text in enumerate(texts)
        ]
        results = await asyncio.gather(*tasks)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:")
        total_tokens = 0
        for result in results:
            print(
                f"{result['index'] + 1}. '{result['text']}' -> {result['sentiment']}"
            )
            total_tokens += result["tokens"]

        print(f"\n–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")

        await client.close()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Evolution OpenAI - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã\n")

    if KEY_ID == "your_key_id" or SECRET == "your_secret":
        print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export EVOLUTION_KEY_ID='–≤–∞—à_key_id'")
        print("export EVOLUTION_SECRET='–≤–∞—à_secret'")
        print("export EVOLUTION_BASE_URL='https://your-endpoint.cloud.ru/v1'")
        return False

    try:
        await basic_async_example()
        await parallel_requests_example()
        await streaming_async_example()
        await context_manager_example()
        await error_handling_example()
        await batch_processing_example()

        print("\n‚úÖ –í—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async/await –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("- –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ asyncio.gather() –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("- –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ async with")
        print("- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ concurrency —Å –ø–æ–º–æ—â—å—é —Å–µ–º–∞—Ñ–æ—Ä–æ–≤")

        return True

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    import sys

    success = asyncio.run(main())
    sys.exit(0 if success else 1)
