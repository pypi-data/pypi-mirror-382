#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ Evolution OpenAI
"""

import os
import sys
import subprocess
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    from dotenv import load_dotenv  # type: ignore

    env_file = Path(__file__).parent.parent / ".env"
    if env_file.exists():
        load_dotenv(env_file)
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {env_file}")
    else:
        print(
            "‚ÑπÔ∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        )
except ImportError:
    print(
        "‚ö†Ô∏è python-dotenv –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir.parent))


def run_example(script_name: str, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'=' * 60}")
    print(f"üîß {description}")
    print(f"–§–∞–π–ª: {script_name}")
    print("=" * 60)

    script_path = current_dir / script_name
    if not script_path.exists():
        print(f"‚ùå –§–∞–π–ª {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        timeout_seconds = 30
        result = subprocess.run(
            [sys.executable, str(script_path)],
            capture_output=True,
            text=True,
            timeout=timeout_seconds,
        )

        if result.stdout:
            print(result.stdout)

        if result.stderr:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏:\n{result.stderr}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –æ—à–∏–±–∫–∏ –≤ –≤—ã–≤–æ–¥–µ
        has_api_errors = any(
            error_pattern in result.stdout
            for error_pattern in [
                "Error code: 404",
                "Error code: 401",
                "Error code: 403",
                "Error code: 500",
                "ConnectionError",
                "TimeoutError",
            ]
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ)
        has_env_issues = any(
            env_pattern in result.stdout
            for env_pattern in [
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
                "your_key_id",
                "your_secret",
                "key_id –∏ secret –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
            ]
        )

        if result.returncode == 0:
            if has_api_errors and not has_env_issues:
                print(f"‚ö†Ô∏è {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —Å API –æ—à–∏–±–∫–∞–º–∏")
                return False
            else:
                print(f"‚úÖ {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
        else:
            print(
                f"‚ùå {script_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})"
            )
            return False

    except subprocess.TimeoutExpired:
        print(f"‚è±Ô∏è {script_name} –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name}: {e}")
        return False


def main() -> bool:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Evolution OpenAI - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = [
        "EVOLUTION_KEY_ID",
        "EVOLUTION_SECRET",
        "EVOLUTION_BASE_URL",
    ]

    optional_vars = []
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\n–ü—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("export EVOLUTION_KEY_ID='your_key_id'")
        print("export EVOLUTION_SECRET='your_secret'")
        print("export EVOLUTION_BASE_URL='https://your-endpoint.cloud.ru/v1'")
    else:
        print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("–ü—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º API")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        missing_optional = [var for var in optional_vars if not os.getenv(var)]
        if missing_optional:
            pass

    # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    examples = [
        ("basic_usage.py", "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
        ("streaming_examples.py", "–ü—Ä–∏–º–µ—Ä—ã Streaming API"),
        ("token_management.py", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏"),
        ("async_examples.py", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã"),
    ]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = 0
    total = len(examples)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä
    for script_name, description in examples:
        success = run_example(script_name, description)
        if success:
            successful += 1

    # –ò—Ç–æ–≥–∏
    print(f"\n{'=' * 60}")
    print("üìä –ò–¢–û–ì–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{total}")
    print(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {total - successful}/{total}")

    if successful == total:
        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è {total - successful} –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

    print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("- –§–∞–π–ª—ã –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ examples/")
    print("- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/README.md")
    print("- –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    return successful == total


if __name__ == "__main__":
    sys.exit(0 if main() else 1)
