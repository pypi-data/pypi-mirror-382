"""
Test the Comprehensive Retrieval Process
"""

from retrieval_system import comprehensive_retrieval_process
from dual_index_system import create_dual_index_system
from ontology_system import execute_ontology_pipeline

def test_retrieval_process():
    """Test the complete multi-stage retrieval process"""
    
    print("🧪 Testing Comprehensive Retrieval Process")
    print("=" * 70)
    
    # Setup test environment
    topic = "Financial Risk Management"
    role = "Risk Analyst"
    
    # Create test indexes
    print("🏗️ Setting up test indexes...")
    
    # Create ontology
    pipeline_result = execute_ontology_pipeline(topic, role)
    ontology = pipeline_result["refined_ontology"]
    
    # Create dual index system
    workflow_nodes = [
        "Update portfolio risk exposure in system",
        "Assess credit worthiness of loan applicant"
    ]
    
    dual_index = create_dual_index_system(topic, role, ontology, workflow_nodes)
    
    # Prepare indexes for retrieval system
    indexes = {
        "general_knowledge": dual_index["general_knowledge_index"],
        "user_workflow": dual_index["user_workflow_index"]
    }
    
    print(f"✅ Indexes ready: {list(indexes.keys())}")
    
    # Test different query types
    test_queries = [
        {
            "query": "What is Value at Risk and how is it calculated?",
            "expected_intent": "conceptual",
            "expected_primary": "general_knowledge"
        },
        {
            "query": "How do I update portfolio risk exposure in our system step by step?",
            "expected_intent": "procedural", 
            "expected_primary": "user_workflow"
        },
        {
            "query": "How does regulatory capital calculation connect to our daily risk monitoring workflow?",
            "expected_intent": "hybrid",
            "expected_primary": "both"
        }
    ]
    
    print(f"\\n🔍 Testing {len(test_queries)} different query patterns...")
    print("=" * 50)
    
    for i in range(len(test_queries)):
        test_case = test_queries[i]
        query = test_case["query"]
        expected_intent = test_case["expected_intent"]
        
        print(f"\\n📋 Test Case {i+1}: {expected_intent.upper()} Query")
        print(f"Query: {query}")
        print("-" * 40)
        
        # Execute retrieval process
        result = comprehensive_retrieval_process(query, indexes)
        
        # Analyze results
        stage1 = result["stage1_intent"]
        stage2 = result["stage2_search"]  
        stage3 = result["stage3_fusion"]
        final_answer = result["final_answer"]
        
        print(f"\\n📊 Results Analysis:")
        print(f"   🎯 Detected Intent: {stage1.get('primary_intent', 'unknown')}")
        print(f"   🔍 Search Strategy: {stage1.get('search_strategy', 'unknown')}")
        print(f"   📚 Indexes Searched: {stage2.get('searches_executed', [])}")
        
        if final_answer["primary_result"]:
            primary = final_answer["primary_result"]
            print(f"   ✅ Best Answer Type: {primary.get('result_type', 'unknown')}")
            print(f"   📈 Confidence: {primary.get('confidence', 0.0)}")
            print(f"   🏷️ Sources: {primary.get('source_indexes', [])}")
        
        # Show recommendations
        recommendations = result.get("recommendations", {})
        followups = recommendations.get("followup_questions", [])
        gaps = recommendations.get("identified_gaps", [])
        
        if followups and len(followups) > 0:
            print(f"   💡 Follow-ups: {len(followups)} suggested")
        if gaps and len(gaps) > 0:
            print(f"   ⚠️ Gaps: {len(gaps)} identified")
    
    print(f"\\n🎉 Retrieval Process Testing Complete!")
    print(f"✅ Multi-stage retrieval system validated")
    print(f"✅ Intent classification working")
    print(f"✅ Multi-index search functioning") 
    print(f"✅ Result fusion operational")
    
    # Summary statistics
    print(f"\\n📊 System Capabilities Demonstrated:")
    print(f"   🔍 Query Intent Analysis")
    print(f"   📚 Multi-Index Parallel Search")
    print(f"   🔄 Result Fusion & Re-ranking")
    print(f"   💡 Intelligent Recommendations")
    print(f"   ⚠️ Gap Identification")

# Run the test
test_retrieval_process()