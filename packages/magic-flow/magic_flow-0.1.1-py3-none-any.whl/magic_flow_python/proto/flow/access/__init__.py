# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: flow/access/access.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AccessApiStub",
    "AccountResponse",
    "BlockHeaderResponse",
    "BlockResponse",
    "CollectionResponse",
    "EventsResponse",
    "EventsResponseResult",
    "ExecuteScriptAtBlockHeightRequest",
    "ExecuteScriptAtBlockIdRequest",
    "ExecuteScriptAtLatestBlockRequest",
    "ExecuteScriptResponse",
    "GetAccountAtBlockHeightRequest",
    "GetAccountAtLatestBlockRequest",
    "GetAccountRequest",
    "GetAccountResponse",
    "GetBlockByHeightRequest",
    "GetBlockByIdRequest",
    "GetBlockHeaderByHeightRequest",
    "GetBlockHeaderByIdRequest",
    "GetCollectionByIdRequest",
    "GetEventsForBlockIDsRequest",
    "GetEventsForHeightRangeRequest",
    "GetLatestBlockHeaderRequest",
    "GetLatestBlockRequest",
    "GetNetworkParametersRequest",
    "GetNetworkParametersResponse",
    "GetTransactionRequest",
    "PingRequest",
    "PingResponse",
    "SendTransactionRequest",
    "SendTransactionResponse",
    "TransactionResponse",
    "TransactionResultResponse",
)

import datetime
from dataclasses import dataclass

import betterproto2
import grpc

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class AccountResponse(betterproto2.Message):
    account: "_entities__.Account | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("flow.access", "AccountResponse", AccountResponse)


@dataclass(eq=False, repr=False)
class BlockHeaderResponse(betterproto2.Message):
    block: "_entities__.BlockHeader | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "flow.access", "BlockHeaderResponse", BlockHeaderResponse
)


@dataclass(eq=False, repr=False)
class BlockResponse(betterproto2.Message):
    block: "_entities__.Block | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("flow.access", "BlockResponse", BlockResponse)


@dataclass(eq=False, repr=False)
class CollectionResponse(betterproto2.Message):
    collection: "_entities__.Collection | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "flow.access", "CollectionResponse", CollectionResponse
)


@dataclass(eq=False, repr=False)
class EventsResponse(betterproto2.Message):
    results: "list[EventsResponseResult]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("flow.access", "EventsResponse", EventsResponse)


@dataclass(eq=False, repr=False)
class EventsResponseResult(betterproto2.Message):
    block_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    events: "list[_entities__.Event]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )

    block_timestamp: "datetime.datetime | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.Timestamp,
        optional=True,
    )


default_message_pool.register_message(
    "flow.access", "EventsResponse.Result", EventsResponseResult
)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockHeightRequest(betterproto2.Message):
    block_height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    script: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    arguments: "list[bytes]" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "flow.access",
    "ExecuteScriptAtBlockHeightRequest",
    ExecuteScriptAtBlockHeightRequest,
)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockIdRequest(betterproto2.Message):
    block_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    script: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    arguments: "list[bytes]" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "flow.access", "ExecuteScriptAtBlockIDRequest", ExecuteScriptAtBlockIdRequest
)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtLatestBlockRequest(betterproto2.Message):
    """
    Scripts
    """

    script: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    arguments: "list[bytes]" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "flow.access",
    "ExecuteScriptAtLatestBlockRequest",
    ExecuteScriptAtLatestBlockRequest,
)


@dataclass(eq=False, repr=False)
class ExecuteScriptResponse(betterproto2.Message):
    value: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "ExecuteScriptResponse", ExecuteScriptResponse
)


@dataclass(eq=False, repr=False)
class GetAccountAtBlockHeightRequest(betterproto2.Message):
    address: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "flow.access", "GetAccountAtBlockHeightRequest", GetAccountAtBlockHeightRequest
)


@dataclass(eq=False, repr=False)
class GetAccountAtLatestBlockRequest(betterproto2.Message):
    address: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "GetAccountAtLatestBlockRequest", GetAccountAtLatestBlockRequest
)


@dataclass(eq=False, repr=False)
class GetAccountRequest(betterproto2.Message):
    """
    Accounts
    """

    address: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "GetAccountRequest", GetAccountRequest
)


@dataclass(eq=False, repr=False)
class GetAccountResponse(betterproto2.Message):
    account: "_entities__.Account | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "flow.access", "GetAccountResponse", GetAccountResponse
)


@dataclass(eq=False, repr=False)
class GetBlockByHeightRequest(betterproto2.Message):
    height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "flow.access", "GetBlockByHeightRequest", GetBlockByHeightRequest
)


@dataclass(eq=False, repr=False)
class GetBlockByIdRequest(betterproto2.Message):
    id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "GetBlockByIDRequest", GetBlockByIdRequest
)


@dataclass(eq=False, repr=False)
class GetBlockHeaderByHeightRequest(betterproto2.Message):
    height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "flow.access", "GetBlockHeaderByHeightRequest", GetBlockHeaderByHeightRequest
)


@dataclass(eq=False, repr=False)
class GetBlockHeaderByIdRequest(betterproto2.Message):
    id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "GetBlockHeaderByIDRequest", GetBlockHeaderByIdRequest
)


@dataclass(eq=False, repr=False)
class GetCollectionByIdRequest(betterproto2.Message):
    """
    Collections
    """

    id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "GetCollectionByIDRequest", GetCollectionByIdRequest
)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsRequest(betterproto2.Message):
    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    block_ids: "list[bytes]" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "flow.access", "GetEventsForBlockIDsRequest", GetEventsForBlockIDsRequest
)


@dataclass(eq=False, repr=False)
class GetEventsForHeightRangeRequest(betterproto2.Message):
    """
    Events
    """

    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    start_height: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    end_height: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)


default_message_pool.register_message(
    "flow.access", "GetEventsForHeightRangeRequest", GetEventsForHeightRangeRequest
)


@dataclass(eq=False, repr=False)
class GetLatestBlockHeaderRequest(betterproto2.Message):
    """
    Block Headers
    """

    is_sealed: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "flow.access", "GetLatestBlockHeaderRequest", GetLatestBlockHeaderRequest
)


@dataclass(eq=False, repr=False)
class GetLatestBlockRequest(betterproto2.Message):
    """
    Blocks
    """

    is_sealed: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "flow.access", "GetLatestBlockRequest", GetLatestBlockRequest
)


@dataclass(eq=False, repr=False)
class GetNetworkParametersRequest(betterproto2.Message):
    """
    Network Parameters
    """

    pass


default_message_pool.register_message(
    "flow.access", "GetNetworkParametersRequest", GetNetworkParametersRequest
)


@dataclass(eq=False, repr=False)
class GetNetworkParametersResponse(betterproto2.Message):
    chain_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "flow.access", "GetNetworkParametersResponse", GetNetworkParametersResponse
)


@dataclass(eq=False, repr=False)
class GetTransactionRequest(betterproto2.Message):
    id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "GetTransactionRequest", GetTransactionRequest
)


@dataclass(eq=False, repr=False)
class PingRequest(betterproto2.Message):
    pass


default_message_pool.register_message("flow.access", "PingRequest", PingRequest)


@dataclass(eq=False, repr=False)
class PingResponse(betterproto2.Message):
    pass


default_message_pool.register_message("flow.access", "PingResponse", PingResponse)


@dataclass(eq=False, repr=False)
class SendTransactionRequest(betterproto2.Message):
    """
    Transactions
    """

    transaction: "_entities__.Transaction | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "flow.access", "SendTransactionRequest", SendTransactionRequest
)


@dataclass(eq=False, repr=False)
class SendTransactionResponse(betterproto2.Message):
    id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.access", "SendTransactionResponse", SendTransactionResponse
)


@dataclass(eq=False, repr=False)
class TransactionResponse(betterproto2.Message):
    transaction: "_entities__.Transaction | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "flow.access", "TransactionResponse", TransactionResponse
)


@dataclass(eq=False, repr=False)
class TransactionResultResponse(betterproto2.Message):
    status: "_entities__.TransactionStatus" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: _entities__.TransactionStatus(0),
    )

    status_code: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)

    error_message: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    events: "list[_entities__.Event]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "flow.access", "TransactionResultResponse", TransactionResultResponse
)


class AccessApiStub:
    """
    AccessAPI is the public-facing API provided by access nodes.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def ping(self, message: "PingRequest | None" = None) -> "PingResponse":
        """
        Ping is used to check if the access node is alive and healthy.
        """

        if message is None:
            message = PingRequest()

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/Ping",
            PingRequest.SerializeToString,
            PingResponse.FromString,
        )(message)

    def get_latest_block_header(
        self, message: "GetLatestBlockHeaderRequest"
    ) -> "BlockHeaderResponse":
        """
        Block Headers

        GetLatestBlockHeader gets the latest sealed or unsealed block header.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetLatestBlockHeader",
            GetLatestBlockHeaderRequest.SerializeToString,
            BlockHeaderResponse.FromString,
        )(message)

    def get_block_header_by_id(
        self, message: "GetBlockHeaderByIdRequest"
    ) -> "BlockHeaderResponse":
        """
        GetBlockHeaderByID gets a block header by ID.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetBlockHeaderByID",
            GetBlockHeaderByIdRequest.SerializeToString,
            BlockHeaderResponse.FromString,
        )(message)

    def get_block_header_by_height(
        self, message: "GetBlockHeaderByHeightRequest"
    ) -> "BlockHeaderResponse":
        """
        GetBlockHeaderByHeight gets a block header by height.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetBlockHeaderByHeight",
            GetBlockHeaderByHeightRequest.SerializeToString,
            BlockHeaderResponse.FromString,
        )(message)

    def get_latest_block(self, message: "GetLatestBlockRequest") -> "BlockResponse":
        """
        Blocks

        GetLatestBlock gets the full payload of the latest sealed or unsealed block.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetLatestBlock",
            GetLatestBlockRequest.SerializeToString,
            BlockResponse.FromString,
        )(message)

    def get_block_by_id(self, message: "GetBlockByIdRequest") -> "BlockResponse":
        """
        GetBlockByID gets a full block by ID.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetBlockByID",
            GetBlockByIdRequest.SerializeToString,
            BlockResponse.FromString,
        )(message)

    def get_block_by_height(
        self, message: "GetBlockByHeightRequest"
    ) -> "BlockResponse":
        """
        GetBlockByHeight gets a full block by height.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetBlockByHeight",
            GetBlockByHeightRequest.SerializeToString,
            BlockResponse.FromString,
        )(message)

    def get_collection_by_id(
        self, message: "GetCollectionByIdRequest"
    ) -> "CollectionResponse":
        """
        Collections

        GetCollectionByID gets a collection by ID.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetCollectionByID",
            GetCollectionByIdRequest.SerializeToString,
            CollectionResponse.FromString,
        )(message)

    def send_transaction(
        self, message: "SendTransactionRequest"
    ) -> "SendTransactionResponse":
        """
        Transactions

        SendTransaction submits a transaction to the network.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/SendTransaction",
            SendTransactionRequest.SerializeToString,
            SendTransactionResponse.FromString,
        )(message)

    def get_transaction(
        self, message: "GetTransactionRequest"
    ) -> "TransactionResponse":
        """
        GetTransaction gets a transaction by ID.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetTransaction",
            GetTransactionRequest.SerializeToString,
            TransactionResponse.FromString,
        )(message)

    def get_transaction_result(
        self, message: "GetTransactionRequest"
    ) -> "TransactionResultResponse":
        """
        GetTransactionResult gets the result of a transaction.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetTransactionResult",
            GetTransactionRequest.SerializeToString,
            TransactionResultResponse.FromString,
        )(message)

    def get_account(self, message: "GetAccountRequest") -> "GetAccountResponse":
        """
        Accounts

        GetAccount is an alias for GetAccountAtLatestBlock.

        Warning: this function is deprecated. It behaves identically to GetAccountAtLatestBlock and will be removed in a future version.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetAccount",
            GetAccountRequest.SerializeToString,
            GetAccountResponse.FromString,
        )(message)

    def get_account_at_latest_block(
        self, message: "GetAccountAtLatestBlockRequest"
    ) -> "AccountResponse":
        """
        GetAccountAtLatestBlock gets an account by address from the latest sealed execution state.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetAccountAtLatestBlock",
            GetAccountAtLatestBlockRequest.SerializeToString,
            AccountResponse.FromString,
        )(message)

    def get_account_at_block_height(
        self, message: "GetAccountAtBlockHeightRequest"
    ) -> "AccountResponse":
        """
        GetAccountAtBlockHeight gets an account by address at the given block height
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetAccountAtBlockHeight",
            GetAccountAtBlockHeightRequest.SerializeToString,
            AccountResponse.FromString,
        )(message)

    def execute_script_at_latest_block(
        self, message: "ExecuteScriptAtLatestBlockRequest"
    ) -> "ExecuteScriptResponse":
        """
        Scripts

        ExecuteScriptAtLatestBlock executes a read-only Cadence script against the latest sealed execution state.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/ExecuteScriptAtLatestBlock",
            ExecuteScriptAtLatestBlockRequest.SerializeToString,
            ExecuteScriptResponse.FromString,
        )(message)

    def execute_script_at_block_id(
        self, message: "ExecuteScriptAtBlockIdRequest"
    ) -> "ExecuteScriptResponse":
        """
        ExecuteScriptAtBlockID executes a ready-only Cadence script against the execution state at the block with the given ID.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/ExecuteScriptAtBlockID",
            ExecuteScriptAtBlockIdRequest.SerializeToString,
            ExecuteScriptResponse.FromString,
        )(message)

    def execute_script_at_block_height(
        self, message: "ExecuteScriptAtBlockHeightRequest"
    ) -> "ExecuteScriptResponse":
        """
        ExecuteScriptAtBlockHeight executes a ready-only Cadence script against the execution state at the given block height.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/ExecuteScriptAtBlockHeight",
            ExecuteScriptAtBlockHeightRequest.SerializeToString,
            ExecuteScriptResponse.FromString,
        )(message)

    def get_events_for_height_range(
        self, message: "GetEventsForHeightRangeRequest"
    ) -> "EventsResponse":
        """
        Events

        GetEventsForHeightRange retrieves events emitted within the specified block range.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetEventsForHeightRange",
            GetEventsForHeightRangeRequest.SerializeToString,
            EventsResponse.FromString,
        )(message)

    def get_events_for_block_i_ds(
        self, message: "GetEventsForBlockIDsRequest"
    ) -> "EventsResponse":
        """
        GetEventsForBlockIDs retrieves events for the specified block IDs and event type.
        """

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetEventsForBlockIDs",
            GetEventsForBlockIDsRequest.SerializeToString,
            EventsResponse.FromString,
        )(message)

    def get_network_parameters(
        self, message: "GetNetworkParametersRequest | None" = None
    ) -> "GetNetworkParametersResponse":
        """
        NetworkParameters

        GetNetworkParameters retrieves the Flow network details
        """

        if message is None:
            message = GetNetworkParametersRequest()

        return self._channel.unary_unary(
            "/flow.access.AccessAPI/GetNetworkParameters",
            GetNetworkParametersRequest.SerializeToString,
            GetNetworkParametersResponse.FromString,
        )(message)


from ...google import protobuf as __google__protobuf__
from .. import entities as _entities__
