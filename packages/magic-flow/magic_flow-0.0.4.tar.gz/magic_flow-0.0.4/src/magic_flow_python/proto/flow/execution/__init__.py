# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: flow/execution/execution.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ExecuteScriptAtBlockIdRequest",
    "ExecuteScriptAtBlockIdResponse",
    "ExecutionApiStub",
    "GetAccountAtBlockIdRequest",
    "GetAccountAtBlockIdResponse",
    "GetEventsForBlockIDsRequest",
    "GetEventsForBlockIDsResponse",
    "GetEventsForBlockIDsResponseResult",
    "GetTransactionResultRequest",
    "GetTransactionResultResponse",
    "PingRequest",
    "PingResponse",
)

from dataclasses import dataclass

import betterproto2
import grpc

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockIdRequest(betterproto2.Message):
    """
    Scripts
    """

    block_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    script: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    arguments: "list[bytes]" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "flow.execution", "ExecuteScriptAtBlockIDRequest", ExecuteScriptAtBlockIdRequest
)


@dataclass(eq=False, repr=False)
class ExecuteScriptAtBlockIdResponse(betterproto2.Message):
    value: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.execution", "ExecuteScriptAtBlockIDResponse", ExecuteScriptAtBlockIdResponse
)


@dataclass(eq=False, repr=False)
class GetAccountAtBlockIdRequest(betterproto2.Message):
    """
    Accounts
    """

    block_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    address: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.execution", "GetAccountAtBlockIDRequest", GetAccountAtBlockIdRequest
)


@dataclass(eq=False, repr=False)
class GetAccountAtBlockIdResponse(betterproto2.Message):
    account: "_entities__.Account | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "flow.execution", "GetAccountAtBlockIDResponse", GetAccountAtBlockIdResponse
)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsRequest(betterproto2.Message):
    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    block_ids: "list[bytes]" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, repeated=True
    )


default_message_pool.register_message(
    "flow.execution", "GetEventsForBlockIDsRequest", GetEventsForBlockIDsRequest
)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsResponse(betterproto2.Message):
    """
    Events
    """

    results: "list[GetEventsForBlockIDsResponseResult]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "flow.execution", "GetEventsForBlockIDsResponse", GetEventsForBlockIDsResponse
)


@dataclass(eq=False, repr=False)
class GetEventsForBlockIDsResponseResult(betterproto2.Message):
    block_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    block_height: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)

    events: "list[_entities__.Event]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "flow.execution",
    "GetEventsForBlockIDsResponse.Result",
    GetEventsForBlockIDsResponseResult,
)


@dataclass(eq=False, repr=False)
class GetTransactionResultRequest(betterproto2.Message):
    """
    Transactions
    """

    block_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)

    transaction_id: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)


default_message_pool.register_message(
    "flow.execution", "GetTransactionResultRequest", GetTransactionResultRequest
)


@dataclass(eq=False, repr=False)
class GetTransactionResultResponse(betterproto2.Message):
    status_code: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    error_message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    events: "list[_entities__.Event]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "flow.execution", "GetTransactionResultResponse", GetTransactionResultResponse
)


@dataclass(eq=False, repr=False)
class PingRequest(betterproto2.Message):
    """
    Ping
    """

    pass


default_message_pool.register_message("flow.execution", "PingRequest", PingRequest)


@dataclass(eq=False, repr=False)
class PingResponse(betterproto2.Message):
    pass


default_message_pool.register_message("flow.execution", "PingResponse", PingResponse)


class ExecutionApiStub:
    """
    ExecutionAPI is the API provided by the execution nodes.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def ping(self, message: "PingRequest | None" = None) -> "PingResponse":
        """
        Ping is used to check if the access node is alive and healthy.
        """

        if message is None:
            message = PingRequest()

        return self._channel.unary_unary(
            "/flow.execution.ExecutionAPI/Ping",
            PingRequest.SerializeToString,
            PingResponse.FromString,
        )(message)

    def get_account_at_block_id(
        self, message: "GetAccountAtBlockIdRequest"
    ) -> "GetAccountAtBlockIdResponse":
        """
        Accounts

        GetAccountAtBlockID gets an account by address at the given block ID
        """

        return self._channel.unary_unary(
            "/flow.execution.ExecutionAPI/GetAccountAtBlockID",
            GetAccountAtBlockIdRequest.SerializeToString,
            GetAccountAtBlockIdResponse.FromString,
        )(message)

    def execute_script_at_block_id(
        self, message: "ExecuteScriptAtBlockIdRequest"
    ) -> "ExecuteScriptAtBlockIdResponse":
        """
        Scripts

        ExecuteScriptAtBlockID executes a ready-only Cadence script against the execution state at the block with the given ID.
        """

        return self._channel.unary_unary(
            "/flow.execution.ExecutionAPI/ExecuteScriptAtBlockID",
            ExecuteScriptAtBlockIdRequest.SerializeToString,
            ExecuteScriptAtBlockIdResponse.FromString,
        )(message)

    def get_events_for_block_i_ds(
        self, message: "GetEventsForBlockIDsRequest"
    ) -> "GetEventsForBlockIDsResponse":
        """
        Events

        GetEventsForBlockIDs retrieves events for all the specified block IDs that have the given type
        """

        return self._channel.unary_unary(
            "/flow.execution.ExecutionAPI/GetEventsForBlockIDs",
            GetEventsForBlockIDsRequest.SerializeToString,
            GetEventsForBlockIDsResponse.FromString,
        )(message)

    def get_transaction_result(
        self, message: "GetTransactionResultRequest"
    ) -> "GetTransactionResultResponse":
        """
        Transaction

        GetTransactionResult gets the result of a transaction.
        """

        return self._channel.unary_unary(
            "/flow.execution.ExecutionAPI/GetTransactionResult",
            GetTransactionResultRequest.SerializeToString,
            GetTransactionResultResponse.FromString,
        )(message)


from .. import entities as _entities__
