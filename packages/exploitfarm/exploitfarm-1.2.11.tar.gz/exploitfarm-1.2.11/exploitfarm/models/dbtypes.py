from uuid import UUID
from datetime import datetime
from hashlib import sha256
from typing import Any, Union, Annotated
from pydantic import BaseModel, BeforeValidator

EnvKey = str
ClientID = str
ExploitID = UUID
ServiceID = UUID
TeamID = int
AttackGroupID = UUID
ExploitSourceID = UUID
AttackExecutionID = int
FlagID = int
SubmitterID = int

DateTime = datetime


def extract_id_from_dict(x: Any) -> Any:
    if isinstance(x, dict):
        return x["id"]
    if isinstance(x, BaseModel):
        return x.id
    return x


def client_id_hashing(client_id: Any) -> ClientID:
    if isinstance(client_id, Union[dict, BaseModel]):
        client_id = extract_id_from_dict(client_id)
        if isinstance(client_id, dict):
            raise ValueError("Invalid client_id")
    try:
        if not isinstance(client_id, UUID):
            client_id = UUID(client_id)
    except Exception:
        return str(client_id)
    return "sha256-"+sha256(str(client_id).lower().encode()).hexdigest().lower()

def check_client_id_hashing(client_id: ClientID) -> bool:
    return client_id.startswith("sha256-")

def verify_and_parse_uuid(value: str) -> UUID:
    try:
        return client_id_hashing(UUID(value))
    except Exception:
        raise ValueError("Invalid UUID")

UnHashedClientID = Annotated[str, BeforeValidator(verify_and_parse_uuid)]