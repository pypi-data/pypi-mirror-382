from textual.app import App, ComposeResult
from textual.widgets import Button, Header, Label
from textual import on
from textual.widgets import Footer, OptionList
from textual.containers import Horizontal
from exploitfarm.utils.config import ClientConfig
from rich.markup import escape
from dateutil import parser as dtparser

class ExploitDownload(App[None|tuple[str, str]]):
    
    def __init__(self, config: ClientConfig):
        super().__init__()
        self.config = config
        self.exploits = [exp for exp in self.config.reqs.exploits()]
        self.services = self.config.status["services"]
        self.selected_exploit = None
        self.selected_exploit_sources = None
    
    BINDINGS = [
        ("ctrl+c", "cancel()", "Cancel")
    ]
    
    CSS = """
    #selector {
        margin: 2 5 0 5;
    }
    .button-box {
        margin-top: 1;
        min-height: 4;
        align: center middle;
    }
    #selector {
        height: 80%;
        align: center middle;
    }
    .max-width {
        width: 90%;
    }
    .center {
        align: center middle;
    }
    .buttons{
        margin: 0 2;
    }
    #info_text {
        text-align: center;
    }
    """

    def compose(self) -> ComposeResult:
        yield Header("xFarm - Exploit Download")
        yield OptionList(
            id="selector",
            classes="max-height"
        )
        yield Horizontal(
            Label("Loading exploits...", id="info_text", classes="max-width center"),
            classes="max-width center"
        )
        yield Horizontal(
            Button("Select", id="select", variant="success", classes="buttons"),
            Button("Cancel", id="cancel", variant="error", classes="buttons"),
            classes="max-width button-box"
        )
        yield Footer()
    
    def service_name(self, service_id: str) -> str:
        for service in self.services:
            if service["id"] == service_id:
                return service["name"]
        return "Unknown"
    
    def on_mount(self) -> None:
        option_list = self.query_one("#selector", OptionList)
        info_text = self.query_one("#info_text", Label)
        option_list.clear_options()
        if len(self.exploits) == 0:
            info_text.update("No exploits found.")
        else:
            info_text.update("Select an exploit to download")
        option_list.add_options([
            f"\n  [bold][undeline][blue]{escape(exp['name'])}[/] "
            f"\\[{escape(self.service_name(exp['service']))}][/][/] ([gray62]{escape(exp['id'])}[/])\n"
            f"  [bold]language:[/] [gray62]{escape(exp['language'])}[/]"
            f" [bold]status:[/] [gray62]{escape(exp['status'])}[/]\n"
            for exp in self.exploits
        ])
    
    def action_cancel(self):
        self.cancel()

    
    @on(Button.Pressed, "#select")
    def select(self):
        self.query_one("#selector", OptionList).action_select()
        
        
    @on(OptionList.OptionSelected, "#selector")
    def exploit_selected_event(self, message: OptionList.OptionSelected) -> None:
        option_list = self.query_one("#selector", OptionList)
        info_text = self.query_one("#info_text", Label)
        if self.selected_exploit is None:
            self.selected_exploit = self.exploits[message.option_index]
            option_list.clear_options()
            info_text.update(
                f"Selected exploit: [bold][undeline]{escape(self.selected_exploit['name'])} "
                f"\\[{escape(self.service_name(self.selected_exploit['service']))}]"
                f" ([gray62]{self.selected_exploit['id']}[/])"
            )
            self.selected_exploit_sources = self.config.reqs.exploit_source_log(self.selected_exploit["id"])
            latest = self.selected_exploit_sources[0]['id'] if len(self.selected_exploit_sources) > 0 else None
            option_list.add_option("\n  [bold undeline]..[/]\n")
            option_list.add_options([
                f"\n  [bold u]{escape(source['message'] if source['message'] else 'There is no commit message')}[/] (hash: [gray62]{source['hash']}[/])"
                f"\n  Pushed at: [blue]{escape(dtparser.parse(source['pushed_at']).astimezone().strftime('%Y-%m-%d %H:%M:%S'))}[/] {'([bold yellow]LATEST[/])' if source['id'] == latest else ''}\n"
            for source in self.selected_exploit_sources])
        else:
            if message.option_index == 0:
                self.selected_exploit = None
                self.selected_exploit_sources = None
                self.on_mount()
            else:
                self.exit((self.selected_exploit["id"], self.selected_exploit_sources[message.option_index - 1]["id"]))
            
            
    @on(Button.Pressed, "#cancel")
    def cancel(self):
        self.exit(None)

