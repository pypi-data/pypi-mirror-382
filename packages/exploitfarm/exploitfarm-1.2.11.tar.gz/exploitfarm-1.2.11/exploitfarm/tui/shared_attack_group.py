from textual.app import App, ComposeResult
from textual.widgets import Button, Header
from textual import on
from textual.widgets import Footer
from exploitfarm.utils.config import ClientConfig
from textual.widgets import Input, Label, Checkbox
from textual.containers import Horizontal
from exploitfarm.utils.config import ExploitConfig
from rich.markup import escape
from textual.validation import Length
from exploitfarm.utils.cmd import create_new_attack_group

class SharedAttackCreateGroup(App[None|dict]):
    
    def __init__(self, config: ClientConfig, exploit:ExploitConfig, name:str|None = "", use_latest:bool = True):
        super().__init__()
        self.config = config
        self.exploit = exploit
        self.sources = self.config.reqs.exploit_source_log(self.exploit.uuid)
        if len(self.sources) == 0:
            raise ValueError("No sources found")
        self.is_latest_commit =  self.exploit.hash() == self.sources[0]["hash"]
        self.use_latest = self.is_latest_commit and use_latest
        self.group_name = name if name else ""
    
    BINDINGS = [
        ("ctrl+c", "cancel()", "Cancel"),
        ("ctrl+s", "create()", "Create attack group"),
    ]
    
    CSS = """
    .button-box {
        height: 4;
        margin: 2 0;
        margin-top: 1;
    }
    .max-width {
        width: 100%;
    }
    Button {
        margin: 1 2;
    }
    #group_name {
        margin: 2;
        margin-top: 1;
        margin-bottom: 1;
    }
    .label-group-name {
        margin-top: 2;
        margin-left: 2;
    }
    .left-border {
        margin-left: 2;
    }
    """

    def compose(self) -> ComposeResult:
        yield Header("xFarm - Create Attack Group")
        yield Label(
            "[bold]Attack group name:[/]",
            classes="label-group-name"
        )
        yield Input(
            placeholder="Crypto brute chall 2",
            value=self.group_name,
            validators=[Length(minimum=1)],
            id="group_name",
        )
        
        yield Label(f"[bold]Exploit name[/]: {escape(self.exploit.name)}", classes="left-border")
        yield Label(f"[bold]Exploit commit[/]: {escape(self.exploit.hash())}", classes="left-border")
        if not self.is_latest_commit:
            yield Label("[bold red]You can't use the latest commit because the current isn't the latest commit! Pull the latest commit first or push this as the latest commit[/]:", classes="left-border")
        yield Checkbox("Use Latest Commit", id="use-latest", value=self.use_latest, classes="label-group-name", disabled=not self.is_latest_commit)
        yield Horizontal(
            Button("Create", id="create", variant="success"),
            Button("Cancel", id="cancel", variant="error"),
        )
        
        yield Footer()
    
    def action_cancel(self):
        self.cancel()
    
    def action_create(self):
        self.create()
    
    @on(Checkbox.Changed, "#use-latest")
    def https_change(self, event: Checkbox.Changed):
        self.use_latest = event.value
    
    @on(Button.Pressed, "#cancel")
    def cancel(self):
        self.exit(None)
        
    @on(Button.Pressed, "#create")
    def create(self):
        group_name = self.query_one("#group_name", Input).value
        self.exploit.publish_exploit(self.config)
        self.exit(create_new_attack_group(group_name, self.exploit, self.use_latest, self.config))

