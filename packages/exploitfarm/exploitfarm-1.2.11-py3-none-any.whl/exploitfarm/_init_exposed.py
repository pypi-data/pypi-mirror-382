import requests
import functools
import random
import os
from exploitfarm.utils.config import ClientConfig
from exploitfarm.tui.config import inital_config_setup
from exploitfarm.tui.login import login_required
from enum import Enum
import psutil
import traceback
import pickle
from exploitfarm.utils import DEV_MODE
from posixpath import join as urljoin
from exploitfarm.utils.reqs import (
    requests_check_json,
    HTTP_TIMEOUT,
    check_req,
    get_session,
)
from requests import Session
import re

os_windows = os.name == "nt"
os_unix = os.name == "posix"


def get_host():
    result = os.getenv("XFARM_HOST", None)
    if not result:
        raise ValueError("this exploit has to be run with xfarm")
    return result


class Prio(Enum):
    high = 0
    normal = 1
    low = 2


def nicenessify(priority: Prio = Prio.low, pid: int | None = None):
    try:
        pid = os.getpid() if pid is None else pid
        ps = psutil.Process(pid)
        if not isinstance(priority, Prio):
            try:
                priority = Prio(priority)
            except Exception:
                priority = Prio.low

        nice_value = None

        if os_unix:
            match priority:
                case Prio.high:
                    nice_value = -10
                case Prio.normal:
                    nice_value = 0
                case Prio.low:
                    nice_value = 15
        if os_windows:
            match priority:
                case Prio.high:
                    nice_value = psutil.HIGH_PRIORITY_CLASS
                case Prio.normal:
                    nice_value = psutil.NORMAL_PRIORITY_CLASS
                case Prio.low:
                    nice_value = psutil.BELOW_NORMAL_PRIORITY_CLASS
        ps.nice(nice_value)
    except Exception as e:
        error = traceback.format_exc() if DEV_MODE else ""
        print(f"Error setting priority: {e} {error}")
        pass


def get_config():
    config = ClientConfig.read()
    if not inital_config_setup(config):
        raise ValueError("It's required to setup the client first")
    login_required(config)
    return config


def random_str(
    length: int | None = None,
    length_range: int = (8, 12),
    numbers: bool = True,
    lower: bool = True,
    upper: bool = True,
    specials: bool = False,
    exclude: str = "",
    include: str = "",
) -> str:
    alphabet = ""
    if numbers:
        alphabet += "0123456789"
    if lower:
        alphabet += "abcdefghijklmnopqrstuvwxyz"
    if upper:
        alphabet += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if specials:
        alphabet += "!@#$%^&*()_+-=[]{}|;:,.<>?/~"
    if exclude:
        alphabet = alphabet.translate(str.maketrans("", "", exclude))
    if include:
        alphabet += include
    if not alphabet:
        raise ValueError("No alphabet selected")
    alphabet = "".join(list(set([ele for ele in alphabet])))
    if length is None:
        length = random.randint(*length_range)
    return "".join(random.choices(alphabet, k=length))


def session(
    random_agent: bool = True,
    additional_agents: list = [],
    additional_headers: dict = {},
    user_agent: str = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.3",
) -> requests.Session:
    headers = {
        "User-Agent": random.choice(
            [
                "Mozilla/5.0 (X11; Linux x86_64; rv:124.0) Gecko/20100101 Firefox/124.0",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.3",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.3",
            ]
            + additional_agents
        )
        if random_agent
        else user_agent,
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,"
        "image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-GB,en;q=0.8,it;q=0.7,en-US;q=0.6",
        **additional_headers,
    }
    s = requests.Session()
    s.headers.update(headers)
    return s


# Force flush print
print = functools.partial(print, flush=True)


class Store:
    def __init__(self):
        self.base_url = os.getenv("XFARM_REMOTE_URL", None)
        if not self.base_url:
            raise ValueError("this exploit has to be run with xfarm")
        self.exploit_id = os.getenv("XFARM_EXPLOIT_ID", None)
        if not self.exploit_id:
            raise ValueError("this exploit has to be run with xfarm")
        self.login_token = os.getenv("XFARM_LOGIN_TOKEN", None)
        self.session: Session = get_session(self.login_token)

    def _keycheck(self, key: str):
        if not isinstance(key, str):
            raise ValueError("key must be a string")
        if len(key) > 255:
            raise ValueError("key must be less than 255 characters")
        if not re.match(r"^[A-Za-z0-9\-\._~()'!*:@,;]+$", key):
            raise ValueError(r"key must match this regex: ^[A-Za-z0-9\-\._~()'!*:@,;]+$")

    def get_bytes(self, key: str, default=None, timeout: int = HTTP_TIMEOUT) -> bytes:
        self._keycheck(key)
        r = self.session.get(
            urljoin(self.base_url, f"exploits/{self.exploit_id}/store/key/{key}"),
            timeout=timeout,
        )
        if r.status_code == 404:
            return default
        return check_req(r).content

    def get(self, key: str, default=None, timeout: int = HTTP_TIMEOUT) -> bytes:
        class TmpNotFound:
            pass

        data = self.get_bytes(key, default=TmpNotFound, timeout=timeout)
        if data == TmpNotFound:
            return default
        return pickle.loads(data)

    def set_bytes(self, key: str, value: bytes, timeout: int = HTTP_TIMEOUT):
        self._keycheck(key)
        return requests_check_json(
            self.session.put(
                urljoin(self.base_url, f"exploits/{self.exploit_id}/store/key/{key}"),
                data=value,
                timeout=timeout,
                headers={"Content-Type": "application/octet-stream"},
            )
        )

    def set(self, key: str, value, timeout: int = HTTP_TIMEOUT):
        value = pickle.dumps(value)
        return self.set_bytes(key, value, timeout)

    def delete(self, key: str, timeout: int = HTTP_TIMEOUT):
        self._keycheck(key)
        return requests_check_json(
            self.session.delete(
                urljoin(self.base_url, f"exploits/{self.exploit_id}/store/key/{key}"),
                timeout=timeout,
            )
        )

    def keys(self, timeout: int = HTTP_TIMEOUT) -> list[str]:
        return requests_check_json(
            self.session.get(
                urljoin(self.base_url, f"exploits/{self.exploit_id}/store/keys"),
                timeout=timeout,
            )
        )
