Metadata-Version: 2.4
Name: sromaster
Version: 0.1.3
Summary: SRO Master API
Home-page: 
Author: Nexium
Author-email: Nexium <info@nexium.me>
License-Expression: MIT
Project-URL: Repository, https://github.com/GIT_USER_ID/GIT_REPO_ID
Keywords: OpenAPI,OpenAPI-Generator,SRO Master API
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: urllib3<3.0.0,>=2.1.0
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: aiohttp>=3.8.4
Requires-Dist: aiohttp-retry>=2.8.3
Requires-Dist: pydantic>=2
Requires-Dist: typing-extensions>=4.7.1
Dynamic: author

# sromaster
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 0.1.3
- Package version: 0.1.3
- Generator version: 7.14.0
- Build package: org.openapitools.codegen.languages.PythonClientCodegen
For more information, please visit [https://nexium.me/](https://nexium.me/)

## Requirements.

Python 3.9+

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import sromaster
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import sromaster
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import sromaster
from sromaster.rest import ApiException
from pprint import pprint

# Defining the host is optional and defaults to http://localhost
# See configuration.py for a list of all supported configuration parameters.
configuration = sromaster.Configuration(
    host = "http://localhost"
)

# The client must configure the authentication and authorization parameters
# in accordance with the API server security policy.
# Examples for each auth method are provided below, use the example that
# satisfies your auth use case.

# Configure Bearer authorization: HTTPBearer
configuration = sromaster.Configuration(
    access_token = os.environ["BEARER_TOKEN"]
)


# Enter a context with an instance of the API client
async with sromaster.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = sromaster.ParserApi(api_client)
    sro_member_upsert_request = sromaster.SROMemberUpsertRequest() # SROMemberUpsertRequest | 

    try:
        # Upsert Sro Member
        await api_instance.upsert_sro_member_parser_sro_member_post(sro_member_upsert_request)
    except ApiException as e:
        print("Exception when calling ParserApi->upsert_sro_member_parser_sro_member_post: %s\n" % e)

```

## Documentation for API Endpoints

All URIs are relative to *http://localhost*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*ParserApi* | [**upsert_sro_member_parser_sro_member_post**](docs/ParserApi.md#upsert_sro_member_parser_sro_member_post) | **POST** /parser/sro-member | Upsert Sro Member
*ParserApi* | [**upsert_sro_parser_sro_post**](docs/ParserApi.md#upsert_sro_parser_sro_post) | **POST** /parser/sro | Upsert Sro
*UsersApi* | [**get_me_users_me_get**](docs/UsersApi.md#get_me_users_me_get) | **GET** /users/me | Get Me


## Documentation For Models

 - [AccordanceStatus](docs/AccordanceStatus.md)
 - [CheckDisciplinaryAction](docs/CheckDisciplinaryAction.md)
 - [CheckResult](docs/CheckResult.md)
 - [CheckType](docs/CheckType.md)
 - [CheckUpsertRequest](docs/CheckUpsertRequest.md)
 - [HTTPValidationError](docs/HTTPValidationError.md)
 - [InsuranceUpsertRequest](docs/InsuranceUpsertRequest.md)
 - [LegalForm](docs/LegalForm.md)
 - [MemberStatus](docs/MemberStatus.md)
 - [OrganizationSchema](docs/OrganizationSchema.md)
 - [Registry](docs/Registry.md)
 - [ResponseDataUserResponse](docs/ResponseDataUserResponse.md)
 - [SROMemberUpsertRequest](docs/SROMemberUpsertRequest.md)
 - [SROUpsertRequest](docs/SROUpsertRequest.md)
 - [UserResponse](docs/UserResponse.md)
 - [ValidationError](docs/ValidationError.md)
 - [ValidationErrorLocInner](docs/ValidationErrorLocInner.md)


<a id="documentation-for-authorization"></a>
## Documentation For Authorization


Authentication schemes defined for the API:
<a id="HTTPBearer"></a>
### HTTPBearer

- **Type**: Bearer authentication


## Author

info@nexium.me


