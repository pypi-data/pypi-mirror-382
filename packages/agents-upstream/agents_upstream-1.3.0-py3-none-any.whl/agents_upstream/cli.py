#!/usr/bin/env python3
"""
CLI para Agents Upstream - Sistema de an√°lise de pesquisa com agentes especializados de IA.
"""

import os
import sys
import shutil
from pathlib import Path
from typing import Optional


class Colors:
    """Cores ANSI para terminal"""
    RESET = '\033[0m'
    BOLD = '\033[1m'
    GREEN = '\033[92m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    CYAN = '\033[96m'


def print_banner():
    """Exibe o banner do Agents Upstream"""
    banner = f"""
{Colors.CYAN}{Colors.BOLD}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë              ü§ñ  AGENTS UPSTREAM  ü§ñ                          ‚ïë
‚ïë                                                               ‚ïë
‚ïë     Sistema de An√°lise de Pesquisa com Agentes de IA         ‚ïë
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.RESET}
"""
    print(banner)


def get_template_dir() -> Path:
    """Obt√©m o diret√≥rio dos templates no pacote"""
    # O template est√° na mesma pasta do pacote
    package_dir = Path(__file__).parent
    template_dir = package_dir / "templates"
    
    if not template_dir.exists():
        print(f"{Colors.RED}‚ùå Erro: Diret√≥rio de templates n√£o encontrado!{Colors.RESET}")
        sys.exit(1)
    
    return template_dir


def copy_templates(destination: Path) -> bool:
    """
    Copia os templates para o diret√≥rio de destino
    
    Args:
        destination: Diret√≥rio de destino
        
    Returns:
        True se bem-sucedido, False caso contr√°rio
    """
    try:
        template_dir = get_template_dir()
        
        print(f"\n{Colors.BLUE}üì¶ Copiando templates e agentes...{Colors.RESET}")
        
        # Copiar estrutura de templates
        for item in template_dir.iterdir():
            dest_path = destination / item.name
            
            if item.is_dir():
                if dest_path.exists():
                    print(f"{Colors.YELLOW}‚ö†Ô∏è  Pasta {item.name} j√° existe, pulando...{Colors.RESET}")
                else:
                    shutil.copytree(item, dest_path)
                    print(f"{Colors.GREEN}‚úì{Colors.RESET} Copiado: {item.name}/")
            else:
                if dest_path.exists():
                    print(f"{Colors.YELLOW}‚ö†Ô∏è  Arquivo {item.name} j√° existe, pulando...{Colors.RESET}")
                else:
                    shutil.copy2(item, dest_path)
                    print(f"{Colors.GREEN}‚úì{Colors.RESET} Copiado: {item.name}")
        
        return True
    except Exception as e:
        print(f"{Colors.RED}‚ùå Erro ao copiar templates: {e}{Colors.RESET}")
        return False


def create_cursor_rules(destination: Path) -> bool:
    """
    Cria o diret√≥rio .cursor/rules com os agentes
    
    Args:
        destination: Diret√≥rio de destino
        
    Returns:
        True se bem-sucedido, False caso contr√°rio
    """
    try:
        cursor_dir = destination / ".cursor" / "rules"
        
        # O .cursor/rules est√° dentro do template
        template_cursor = get_template_dir() / ".cursor" / "rules"
        
        if not template_cursor.exists():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  Diret√≥rio .cursor/rules n√£o encontrado nos templates{Colors.RESET}")
            return True
        
        if cursor_dir.exists():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  .cursor/rules j√° existe, pulando...{Colors.RESET}")
            return True
        
        print(f"\n{Colors.BLUE}ü§ñ Configurando agentes de IA...{Colors.RESET}")
        shutil.copytree(template_cursor, cursor_dir)
        print(f"{Colors.GREEN}‚úì{Colors.RESET} Agentes de IA configurados em .cursor/rules/")
        
        return True
    except Exception as e:
        print(f"{Colors.RED}‚ùå Erro ao criar .cursor/rules: {e}{Colors.RESET}")
        return False


def show_next_steps():
    """Exibe os pr√≥ximos passos ap√≥s a instala√ß√£o"""
    next_steps = f"""
{Colors.GREEN}{Colors.BOLD}‚ú® Instala√ß√£o conclu√≠da com sucesso!{Colors.RESET}

{Colors.CYAN}{Colors.BOLD}üìã PR√ìXIMOS PASSOS:{Colors.RESET}

{Colors.BOLD}1. Preparar materiais de pesquisa:{Colors.RESET}
   ‚Ä¢ Coloque arquivos de entrevista em: {Colors.YELLOW}0-documentation/0b-Interviews/{Colors.RESET}
   ‚Ä¢ Atualize o contexto em: {Colors.YELLOW}0-documentation/0a-projectdocs/context.md{Colors.RESET}

{Colors.BOLD}2. Iniciar workflow no Cursor AI:{Colors.RESET}
   Digite: {Colors.YELLOW}start workflow{Colors.RESET}

{Colors.BOLD}3. Documenta√ß√£o completa:{Colors.RESET}
   Consulte: {Colors.YELLOW}README.md{Colors.RESET} no diret√≥rio atual

{Colors.CYAN}{Colors.BOLD}üìö Estrutura criada:{Colors.RESET}
   ‚Ä¢ 0-documentation/          (Contexto do projeto)
   ‚Ä¢ _output-structure/        (Templates de an√°lise)
   ‚Ä¢ .cursor/rules/            (Agentes de IA)

{Colors.GREEN}Permite que equipes de produto pensem estrategicamente sem sacrificar velocidade.{Colors.RESET}
"""
    print(next_steps)


def main():
    """Fun√ß√£o principal do CLI"""
    print_banner()
    
    # Diret√≥rio de destino √© o diret√≥rio atual
    destination = Path.cwd()
    
    print(f"{Colors.BLUE}üìÅ Diret√≥rio de instala√ß√£o: {Colors.BOLD}{destination}{Colors.RESET}\n")
    
    # Verificar se j√° existe instala√ß√£o
    if (destination / "template").exists() or (destination / ".cursor").exists():
        response = input(f"{Colors.YELLOW}‚ö†Ô∏è  J√° existe uma instala√ß√£o. Deseja continuar? (s/N): {Colors.RESET}")
        if response.lower() not in ['s', 'sim', 'y', 'yes']:
            print(f"\n{Colors.BLUE}Opera√ß√£o cancelada.{Colors.RESET}")
            sys.exit(0)
    
    # Copiar templates
    if not copy_templates(destination):
        sys.exit(1)
    
    # Criar .cursor/rules
    if not create_cursor_rules(destination):
        sys.exit(1)
    
    # Mostrar pr√≥ximos passos
    show_next_steps()
    
    sys.exit(0)


if __name__ == "__main__":
    main()

