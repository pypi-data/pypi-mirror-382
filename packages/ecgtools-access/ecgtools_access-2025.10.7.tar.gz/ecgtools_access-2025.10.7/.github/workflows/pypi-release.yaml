name: Build distribution
on:
  release:
    types:
      - published
  push:

jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    if: github.repository == 'ACCESS-NRI/ecgtools'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: prefix-dev/setup-pixi@v0.8.3
        with:
          environments: build
          frozen: true

      - name: Build tarball and wheels, check artifacts, and validate version
        run: pixi clean && pixi run -e build validate-version

      - uses: actions/upload-artifact@v4
        with:
          name: releases
          path: dist

  test-built-dist:
    needs: build-artifacts
    outputs:
      ecgtools-version: ${{ steps.verify.outputs.ecgtools-version }}
    permissions:
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout only pyproject.toml
        uses: actions/checkout@v4
        with:
          sparse-checkout: pyproject.toml
          fetch-depth: 1

      - uses: actions/download-artifact@v4
        with:
          name: releases
          path: dist

      - uses: prefix-dev/setup-pixi@v0.8.3
        with:
          environments: build
          manifest-path: pyproject.toml
          frozen: true

      - name: List contents of built dist
        run: |
          ls -ltrh
          ls -ltrh dist

      - name: Verify the built dist/wheel is valid
        if: github.event_name == 'push'
        run: pixi run test-wheel

      - name: Grab package version
        id: verify
        run: |
          echo "ecgtools-version=$(pixi run get-version)" >> $GITHUB_OUTPUT

      - name: Show package version
        run: pixi run get-version

  pypi:
    needs: [build-artifacts, test-built-dist]
    runs-on: ubuntu-latest
    if: github.repository == 'ACCESS-NRI/ecgtools' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: releases
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  conda:
    name: build and deploy to conda
    needs: [pypi, test-built-dist]
    if: always() && needs.pypi.result == 'success'
    runs-on: "ubuntu-latest"
    env:
      ECGTOOLS_VERSION: ${{ needs.test-built-dist.outputs.ecgtools-version }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v5.0.0

      - name: Setup conda environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          python-version: 3.11
          environment-file: .conda/environment.yml
          auto-update-conda: false
          auto-activate-base: false
          show-channel-urls: true

      - name: Enforce .tar.bz2 packages
        shell: bash
        run: |
          cat > ~/.condarc << EOF
          conda-build:
              pkg_format: .tar.bz2
          channels:
              - accessnri
              - conda-forge
              - nodefaults
          EOF

      - name: Build and upload the conda package
        uses: uibcdf/action-build-and-upload-conda-packages@v1.4.0
        with:
          meta_yaml_dir: .conda
          python-version: 3.11
          user: accessnri
          label: main
          token: ${{ secrets.anaconda_token }}
