# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'CloudAccountAwsArgs',
    'CloudAccountAwsArgsDict',
    'CloudAccountAzureArgs',
    'CloudAccountAzureArgsDict',
    'CloudAccountGcpArgs',
    'CloudAccountGcpArgsDict',
    'CloudAccountNgsArgs',
    'CloudAccountNgsArgsDict',
    'DomainRouteHeadersArgs',
    'DomainRouteHeadersArgsDict',
    'DomainRouteHeadersRequestArgs',
    'DomainRouteHeadersRequestArgsDict',
    'DomainSpecArgs',
    'DomainSpecArgsDict',
    'DomainSpecPortArgs',
    'DomainSpecPortArgsDict',
    'DomainSpecPortCorsArgs',
    'DomainSpecPortCorsArgsDict',
    'DomainSpecPortCorsAllowOriginArgs',
    'DomainSpecPortCorsAllowOriginArgsDict',
    'DomainSpecPortTlsArgs',
    'DomainSpecPortTlsArgsDict',
    'DomainSpecPortTlsClientCertificateArgs',
    'DomainSpecPortTlsClientCertificateArgsDict',
    'DomainSpecPortTlsServerCertificateArgs',
    'DomainSpecPortTlsServerCertificateArgsDict',
    'DomainStatusArgs',
    'DomainStatusArgsDict',
    'DomainStatusDnsConfigArgs',
    'DomainStatusDnsConfigArgsDict',
    'DomainStatusEndpointArgs',
    'DomainStatusEndpointArgsDict',
    'DomainStatusLocationArgs',
    'DomainStatusLocationArgsDict',
    'GroupIdentityMatcherArgs',
    'GroupIdentityMatcherArgsDict',
    'GroupMemberQueryArgs',
    'GroupMemberQueryArgsDict',
    'GroupMemberQuerySpecArgs',
    'GroupMemberQuerySpecArgsDict',
    'GroupMemberQuerySpecTermArgs',
    'GroupMemberQuerySpecTermArgsDict',
    'GvcControlplaneTracingArgs',
    'GvcControlplaneTracingArgsDict',
    'GvcKedaArgs',
    'GvcKedaArgsDict',
    'GvcLightstepTracingArgs',
    'GvcLightstepTracingArgsDict',
    'GvcLoadBalancerArgs',
    'GvcLoadBalancerArgsDict',
    'GvcLoadBalancerMultiZoneArgs',
    'GvcLoadBalancerMultiZoneArgsDict',
    'GvcLoadBalancerRedirectArgs',
    'GvcLoadBalancerRedirectArgsDict',
    'GvcLoadBalancerRedirectClassArgs',
    'GvcLoadBalancerRedirectClassArgsDict',
    'GvcOtelTracingArgs',
    'GvcOtelTracingArgsDict',
    'GvcSidecarArgs',
    'GvcSidecarArgsDict',
    'IdentityAwsAccessPolicyArgs',
    'IdentityAwsAccessPolicyArgsDict',
    'IdentityAwsAccessPolicyTrustPolicyArgs',
    'IdentityAwsAccessPolicyTrustPolicyArgsDict',
    'IdentityAzureAccessPolicyArgs',
    'IdentityAzureAccessPolicyArgsDict',
    'IdentityAzureAccessPolicyRoleAssignmentArgs',
    'IdentityAzureAccessPolicyRoleAssignmentArgsDict',
    'IdentityGcpAccessPolicyArgs',
    'IdentityGcpAccessPolicyArgsDict',
    'IdentityGcpAccessPolicyBindingArgs',
    'IdentityGcpAccessPolicyBindingArgsDict',
    'IdentityNativeNetworkResourceArgs',
    'IdentityNativeNetworkResourceArgsDict',
    'IdentityNativeNetworkResourceAwsPrivateLinkArgs',
    'IdentityNativeNetworkResourceAwsPrivateLinkArgsDict',
    'IdentityNativeNetworkResourceGcpServiceConnectArgs',
    'IdentityNativeNetworkResourceGcpServiceConnectArgsDict',
    'IdentityNetworkResourceArgs',
    'IdentityNetworkResourceArgsDict',
    'IdentityNgsAccessPolicyArgs',
    'IdentityNgsAccessPolicyArgsDict',
    'IdentityNgsAccessPolicyPubArgs',
    'IdentityNgsAccessPolicyPubArgsDict',
    'IdentityNgsAccessPolicyRespArgs',
    'IdentityNgsAccessPolicyRespArgsDict',
    'IdentityNgsAccessPolicySubArgs',
    'IdentityNgsAccessPolicySubArgsDict',
    'IpSetLocationArgs',
    'IpSetLocationArgsDict',
    'IpSetStatusArgs',
    'IpSetStatusArgsDict',
    'IpSetStatusIpAddressArgs',
    'IpSetStatusIpAddressArgsDict',
    'LocationGeoArgs',
    'LocationGeoArgsDict',
    'Mk8sAddOnsArgs',
    'Mk8sAddOnsArgsDict',
    'Mk8sAddOnsAwsEcrArgs',
    'Mk8sAddOnsAwsEcrArgsDict',
    'Mk8sAddOnsAwsEfsArgs',
    'Mk8sAddOnsAwsEfsArgsDict',
    'Mk8sAddOnsAwsElbArgs',
    'Mk8sAddOnsAwsElbArgsDict',
    'Mk8sAddOnsAzureAcrArgs',
    'Mk8sAddOnsAzureAcrArgsDict',
    'Mk8sAddOnsAzureWorkloadIdentityArgs',
    'Mk8sAddOnsAzureWorkloadIdentityArgsDict',
    'Mk8sAddOnsLogsArgs',
    'Mk8sAddOnsLogsArgsDict',
    'Mk8sAddOnsMetricsArgs',
    'Mk8sAddOnsMetricsArgsDict',
    'Mk8sAddOnsMetricsScrapeAnnotatedArgs',
    'Mk8sAddOnsMetricsScrapeAnnotatedArgsDict',
    'Mk8sAddOnsNvidiaArgs',
    'Mk8sAddOnsNvidiaArgsDict',
    'Mk8sAddOnsRegistryMirrorArgs',
    'Mk8sAddOnsRegistryMirrorArgsDict',
    'Mk8sAddOnsRegistryMirrorMirrorArgs',
    'Mk8sAddOnsRegistryMirrorMirrorArgsDict',
    'Mk8sAwsProviderArgs',
    'Mk8sAwsProviderArgsDict',
    'Mk8sAwsProviderAutoscalerArgs',
    'Mk8sAwsProviderAutoscalerArgsDict',
    'Mk8sAwsProviderDeployRoleChainArgs',
    'Mk8sAwsProviderDeployRoleChainArgsDict',
    'Mk8sAwsProviderImageArgs',
    'Mk8sAwsProviderImageArgsDict',
    'Mk8sAwsProviderNetworkingArgs',
    'Mk8sAwsProviderNetworkingArgsDict',
    'Mk8sAwsProviderNodePoolArgs',
    'Mk8sAwsProviderNodePoolArgsDict',
    'Mk8sAwsProviderNodePoolOverrideImageArgs',
    'Mk8sAwsProviderNodePoolOverrideImageArgsDict',
    'Mk8sAwsProviderNodePoolTaintArgs',
    'Mk8sAwsProviderNodePoolTaintArgsDict',
    'Mk8sAzureProviderArgs',
    'Mk8sAzureProviderArgsDict',
    'Mk8sAzureProviderAutoscalerArgs',
    'Mk8sAzureProviderAutoscalerArgsDict',
    'Mk8sAzureProviderImageArgs',
    'Mk8sAzureProviderImageArgsDict',
    'Mk8sAzureProviderImageReferenceArgs',
    'Mk8sAzureProviderImageReferenceArgsDict',
    'Mk8sAzureProviderNetworkingArgs',
    'Mk8sAzureProviderNetworkingArgsDict',
    'Mk8sAzureProviderNodePoolArgs',
    'Mk8sAzureProviderNodePoolArgsDict',
    'Mk8sAzureProviderNodePoolOverrideImageArgs',
    'Mk8sAzureProviderNodePoolOverrideImageArgsDict',
    'Mk8sAzureProviderNodePoolOverrideImageReferenceArgs',
    'Mk8sAzureProviderNodePoolOverrideImageReferenceArgsDict',
    'Mk8sAzureProviderNodePoolTaintArgs',
    'Mk8sAzureProviderNodePoolTaintArgsDict',
    'Mk8sDigitalOceanProviderArgs',
    'Mk8sDigitalOceanProviderArgsDict',
    'Mk8sDigitalOceanProviderAutoscalerArgs',
    'Mk8sDigitalOceanProviderAutoscalerArgsDict',
    'Mk8sDigitalOceanProviderNetworkingArgs',
    'Mk8sDigitalOceanProviderNetworkingArgsDict',
    'Mk8sDigitalOceanProviderNodePoolArgs',
    'Mk8sDigitalOceanProviderNodePoolArgsDict',
    'Mk8sDigitalOceanProviderNodePoolTaintArgs',
    'Mk8sDigitalOceanProviderNodePoolTaintArgsDict',
    'Mk8sEphemeralProviderArgs',
    'Mk8sEphemeralProviderArgsDict',
    'Mk8sEphemeralProviderNodePoolArgs',
    'Mk8sEphemeralProviderNodePoolArgsDict',
    'Mk8sEphemeralProviderNodePoolTaintArgs',
    'Mk8sEphemeralProviderNodePoolTaintArgsDict',
    'Mk8sFirewallArgs',
    'Mk8sFirewallArgsDict',
    'Mk8sGenericProviderArgs',
    'Mk8sGenericProviderArgsDict',
    'Mk8sGenericProviderNetworkingArgs',
    'Mk8sGenericProviderNetworkingArgsDict',
    'Mk8sGenericProviderNodePoolArgs',
    'Mk8sGenericProviderNodePoolArgsDict',
    'Mk8sGenericProviderNodePoolTaintArgs',
    'Mk8sGenericProviderNodePoolTaintArgsDict',
    'Mk8sHetznerProviderArgs',
    'Mk8sHetznerProviderArgsDict',
    'Mk8sHetznerProviderAutoscalerArgs',
    'Mk8sHetznerProviderAutoscalerArgsDict',
    'Mk8sHetznerProviderDedicatedServerNodePoolArgs',
    'Mk8sHetznerProviderDedicatedServerNodePoolArgsDict',
    'Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs',
    'Mk8sHetznerProviderDedicatedServerNodePoolTaintArgsDict',
    'Mk8sHetznerProviderNetworkingArgs',
    'Mk8sHetznerProviderNetworkingArgsDict',
    'Mk8sHetznerProviderNodePoolArgs',
    'Mk8sHetznerProviderNodePoolArgsDict',
    'Mk8sHetznerProviderNodePoolTaintArgs',
    'Mk8sHetznerProviderNodePoolTaintArgsDict',
    'Mk8sLambdalabsProviderArgs',
    'Mk8sLambdalabsProviderArgsDict',
    'Mk8sLambdalabsProviderAutoscalerArgs',
    'Mk8sLambdalabsProviderAutoscalerArgsDict',
    'Mk8sLambdalabsProviderNodePoolArgs',
    'Mk8sLambdalabsProviderNodePoolArgsDict',
    'Mk8sLambdalabsProviderNodePoolTaintArgs',
    'Mk8sLambdalabsProviderNodePoolTaintArgsDict',
    'Mk8sLambdalabsProviderUnmanagedNodePoolArgs',
    'Mk8sLambdalabsProviderUnmanagedNodePoolArgsDict',
    'Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs',
    'Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgsDict',
    'Mk8sLinodeProviderArgs',
    'Mk8sLinodeProviderArgsDict',
    'Mk8sLinodeProviderAutoscalerArgs',
    'Mk8sLinodeProviderAutoscalerArgsDict',
    'Mk8sLinodeProviderNetworkingArgs',
    'Mk8sLinodeProviderNetworkingArgsDict',
    'Mk8sLinodeProviderNodePoolArgs',
    'Mk8sLinodeProviderNodePoolArgsDict',
    'Mk8sLinodeProviderNodePoolTaintArgs',
    'Mk8sLinodeProviderNodePoolTaintArgsDict',
    'Mk8sOblivusProviderArgs',
    'Mk8sOblivusProviderArgsDict',
    'Mk8sOblivusProviderAutoscalerArgs',
    'Mk8sOblivusProviderAutoscalerArgsDict',
    'Mk8sOblivusProviderNodePoolArgs',
    'Mk8sOblivusProviderNodePoolArgsDict',
    'Mk8sOblivusProviderNodePoolTaintArgs',
    'Mk8sOblivusProviderNodePoolTaintArgsDict',
    'Mk8sOblivusProviderUnmanagedNodePoolArgs',
    'Mk8sOblivusProviderUnmanagedNodePoolArgsDict',
    'Mk8sOblivusProviderUnmanagedNodePoolTaintArgs',
    'Mk8sOblivusProviderUnmanagedNodePoolTaintArgsDict',
    'Mk8sPaperspaceProviderArgs',
    'Mk8sPaperspaceProviderArgsDict',
    'Mk8sPaperspaceProviderAutoscalerArgs',
    'Mk8sPaperspaceProviderAutoscalerArgsDict',
    'Mk8sPaperspaceProviderNodePoolArgs',
    'Mk8sPaperspaceProviderNodePoolArgsDict',
    'Mk8sPaperspaceProviderNodePoolTaintArgs',
    'Mk8sPaperspaceProviderNodePoolTaintArgsDict',
    'Mk8sPaperspaceProviderUnmanagedNodePoolArgs',
    'Mk8sPaperspaceProviderUnmanagedNodePoolArgsDict',
    'Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs',
    'Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgsDict',
    'Mk8sStatusArgs',
    'Mk8sStatusArgsDict',
    'Mk8sStatusAddOnArgs',
    'Mk8sStatusAddOnArgsDict',
    'Mk8sStatusAddOnAwsEcrArgs',
    'Mk8sStatusAddOnAwsEcrArgsDict',
    'Mk8sStatusAddOnAwsEfArgs',
    'Mk8sStatusAddOnAwsEfArgsDict',
    'Mk8sStatusAddOnAwsElbArgs',
    'Mk8sStatusAddOnAwsElbArgsDict',
    'Mk8sStatusAddOnAwsWorkloadIdentityArgs',
    'Mk8sStatusAddOnAwsWorkloadIdentityArgsDict',
    'Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs',
    'Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgsDict',
    'Mk8sStatusAddOnDashboardArgs',
    'Mk8sStatusAddOnDashboardArgsDict',
    'Mk8sStatusAddOnLogArgs',
    'Mk8sStatusAddOnLogArgsDict',
    'Mk8sStatusAddOnMetricArgs',
    'Mk8sStatusAddOnMetricArgsDict',
    'Mk8sTritonProviderArgs',
    'Mk8sTritonProviderArgsDict',
    'Mk8sTritonProviderAutoscalerArgs',
    'Mk8sTritonProviderAutoscalerArgsDict',
    'Mk8sTritonProviderConnectionArgs',
    'Mk8sTritonProviderConnectionArgsDict',
    'Mk8sTritonProviderLoadBalancerArgs',
    'Mk8sTritonProviderLoadBalancerArgsDict',
    'Mk8sTritonProviderLoadBalancerGatewayArgs',
    'Mk8sTritonProviderLoadBalancerGatewayArgsDict',
    'Mk8sTritonProviderLoadBalancerManualArgs',
    'Mk8sTritonProviderLoadBalancerManualArgsDict',
    'Mk8sTritonProviderLoadBalancerManualLoggingArgs',
    'Mk8sTritonProviderLoadBalancerManualLoggingArgsDict',
    'Mk8sTritonProviderNetworkingArgs',
    'Mk8sTritonProviderNetworkingArgsDict',
    'Mk8sTritonProviderNodePoolArgs',
    'Mk8sTritonProviderNodePoolArgsDict',
    'Mk8sTritonProviderNodePoolTaintArgs',
    'Mk8sTritonProviderNodePoolTaintArgsDict',
    'OrgAuthConfigArgs',
    'OrgAuthConfigArgsDict',
    'OrgLoggingCloudWatchLoggingArgs',
    'OrgLoggingCloudWatchLoggingArgsDict',
    'OrgLoggingCoralogixLoggingArgs',
    'OrgLoggingCoralogixLoggingArgsDict',
    'OrgLoggingDatadogLoggingArgs',
    'OrgLoggingDatadogLoggingArgsDict',
    'OrgLoggingElasticLoggingArgs',
    'OrgLoggingElasticLoggingArgsDict',
    'OrgLoggingElasticLoggingAwsArgs',
    'OrgLoggingElasticLoggingAwsArgsDict',
    'OrgLoggingElasticLoggingElasticCloudArgs',
    'OrgLoggingElasticLoggingElasticCloudArgsDict',
    'OrgLoggingElasticLoggingGenericArgs',
    'OrgLoggingElasticLoggingGenericArgsDict',
    'OrgLoggingFluentdLoggingArgs',
    'OrgLoggingFluentdLoggingArgsDict',
    'OrgLoggingLogzioLoggingArgs',
    'OrgLoggingLogzioLoggingArgsDict',
    'OrgLoggingS3LoggingArgs',
    'OrgLoggingS3LoggingArgsDict',
    'OrgLoggingStackdriverLoggingArgs',
    'OrgLoggingStackdriverLoggingArgsDict',
    'OrgLoggingSyslogLoggingArgs',
    'OrgLoggingSyslogLoggingArgsDict',
    'OrgObservabilityArgs',
    'OrgObservabilityArgsDict',
    'OrgSecurityArgs',
    'OrgSecurityArgsDict',
    'OrgSecurityThreatDetectionArgs',
    'OrgSecurityThreatDetectionArgsDict',
    'OrgSecurityThreatDetectionSyslogArgs',
    'OrgSecurityThreatDetectionSyslogArgsDict',
    'OrgStatusArgs',
    'OrgStatusArgsDict',
    'OrgTracingControlplaneTracingArgs',
    'OrgTracingControlplaneTracingArgsDict',
    'OrgTracingLightstepTracingArgs',
    'OrgTracingLightstepTracingArgsDict',
    'OrgTracingOtelTracingArgs',
    'OrgTracingOtelTracingArgsDict',
    'PolicyBindingArgs',
    'PolicyBindingArgsDict',
    'PolicyTargetQueryArgs',
    'PolicyTargetQueryArgsDict',
    'PolicyTargetQuerySpecArgs',
    'PolicyTargetQuerySpecArgsDict',
    'PolicyTargetQuerySpecTermArgs',
    'PolicyTargetQuerySpecTermArgsDict',
    'SecretAwsArgs',
    'SecretAwsArgsDict',
    'SecretAzureConnectorArgs',
    'SecretAzureConnectorArgsDict',
    'SecretEcrArgs',
    'SecretEcrArgsDict',
    'SecretKeypairArgs',
    'SecretKeypairArgsDict',
    'SecretNatsAccountArgs',
    'SecretNatsAccountArgsDict',
    'SecretOpaqueArgs',
    'SecretOpaqueArgsDict',
    'SecretTlsArgs',
    'SecretTlsArgsDict',
    'SecretUserpassArgs',
    'SecretUserpassArgsDict',
    'VolumeSetAutoscalingArgs',
    'VolumeSetAutoscalingArgsDict',
    'VolumeSetMountOptionsArgs',
    'VolumeSetMountOptionsArgsDict',
    'VolumeSetMountOptionsResourcesArgs',
    'VolumeSetMountOptionsResourcesArgsDict',
    'VolumeSetSnapshotsArgs',
    'VolumeSetSnapshotsArgsDict',
    'VolumeSetStatusArgs',
    'VolumeSetStatusArgsDict',
    'WorkloadContainerArgs',
    'WorkloadContainerArgsDict',
    'WorkloadContainerGpuCustomArgs',
    'WorkloadContainerGpuCustomArgsDict',
    'WorkloadContainerGpuNvidiaArgs',
    'WorkloadContainerGpuNvidiaArgsDict',
    'WorkloadContainerLifecycleArgs',
    'WorkloadContainerLifecycleArgsDict',
    'WorkloadContainerLifecyclePostStartArgs',
    'WorkloadContainerLifecyclePostStartArgsDict',
    'WorkloadContainerLifecyclePostStartExecArgs',
    'WorkloadContainerLifecyclePostStartExecArgsDict',
    'WorkloadContainerLifecyclePreStopArgs',
    'WorkloadContainerLifecyclePreStopArgsDict',
    'WorkloadContainerLifecyclePreStopExecArgs',
    'WorkloadContainerLifecyclePreStopExecArgsDict',
    'WorkloadContainerLivenessProbeArgs',
    'WorkloadContainerLivenessProbeArgsDict',
    'WorkloadContainerLivenessProbeExecArgs',
    'WorkloadContainerLivenessProbeExecArgsDict',
    'WorkloadContainerLivenessProbeGrpcArgs',
    'WorkloadContainerLivenessProbeGrpcArgsDict',
    'WorkloadContainerLivenessProbeHttpGetArgs',
    'WorkloadContainerLivenessProbeHttpGetArgsDict',
    'WorkloadContainerLivenessProbeTcpSocketArgs',
    'WorkloadContainerLivenessProbeTcpSocketArgsDict',
    'WorkloadContainerMetricsArgs',
    'WorkloadContainerMetricsArgsDict',
    'WorkloadContainerPortArgs',
    'WorkloadContainerPortArgsDict',
    'WorkloadContainerReadinessProbeArgs',
    'WorkloadContainerReadinessProbeArgsDict',
    'WorkloadContainerReadinessProbeExecArgs',
    'WorkloadContainerReadinessProbeExecArgsDict',
    'WorkloadContainerReadinessProbeGrpcArgs',
    'WorkloadContainerReadinessProbeGrpcArgsDict',
    'WorkloadContainerReadinessProbeHttpGetArgs',
    'WorkloadContainerReadinessProbeHttpGetArgsDict',
    'WorkloadContainerReadinessProbeTcpSocketArgs',
    'WorkloadContainerReadinessProbeTcpSocketArgsDict',
    'WorkloadContainerVolumeArgs',
    'WorkloadContainerVolumeArgsDict',
    'WorkloadFirewallSpecArgs',
    'WorkloadFirewallSpecArgsDict',
    'WorkloadFirewallSpecExternalArgs',
    'WorkloadFirewallSpecExternalArgsDict',
    'WorkloadFirewallSpecExternalHttpArgs',
    'WorkloadFirewallSpecExternalHttpArgsDict',
    'WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs',
    'WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgsDict',
    'WorkloadFirewallSpecExternalOutboundAllowPortArgs',
    'WorkloadFirewallSpecExternalOutboundAllowPortArgsDict',
    'WorkloadFirewallSpecInternalArgs',
    'WorkloadFirewallSpecInternalArgsDict',
    'WorkloadJobArgs',
    'WorkloadJobArgsDict',
    'WorkloadLoadBalancerArgs',
    'WorkloadLoadBalancerArgsDict',
    'WorkloadLoadBalancerDirectArgs',
    'WorkloadLoadBalancerDirectArgsDict',
    'WorkloadLoadBalancerDirectPortArgs',
    'WorkloadLoadBalancerDirectPortArgsDict',
    'WorkloadLoadBalancerGeoLocationArgs',
    'WorkloadLoadBalancerGeoLocationArgsDict',
    'WorkloadLoadBalancerGeoLocationHeadersArgs',
    'WorkloadLoadBalancerGeoLocationHeadersArgsDict',
    'WorkloadLocalOptionArgs',
    'WorkloadLocalOptionArgsDict',
    'WorkloadLocalOptionAutoscalingArgs',
    'WorkloadLocalOptionAutoscalingArgsDict',
    'WorkloadLocalOptionAutoscalingKedaArgs',
    'WorkloadLocalOptionAutoscalingKedaArgsDict',
    'WorkloadLocalOptionAutoscalingKedaAdvancedArgs',
    'WorkloadLocalOptionAutoscalingKedaAdvancedArgsDict',
    'WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgs',
    'WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgsDict',
    'WorkloadLocalOptionAutoscalingKedaTriggerArgs',
    'WorkloadLocalOptionAutoscalingKedaTriggerArgsDict',
    'WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs',
    'WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgsDict',
    'WorkloadLocalOptionAutoscalingMultiArgs',
    'WorkloadLocalOptionAutoscalingMultiArgsDict',
    'WorkloadLocalOptionMultiZoneArgs',
    'WorkloadLocalOptionMultiZoneArgsDict',
    'WorkloadOptionsArgs',
    'WorkloadOptionsArgsDict',
    'WorkloadOptionsAutoscalingArgs',
    'WorkloadOptionsAutoscalingArgsDict',
    'WorkloadOptionsAutoscalingKedaArgs',
    'WorkloadOptionsAutoscalingKedaArgsDict',
    'WorkloadOptionsAutoscalingKedaAdvancedArgs',
    'WorkloadOptionsAutoscalingKedaAdvancedArgsDict',
    'WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgs',
    'WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgsDict',
    'WorkloadOptionsAutoscalingKedaTriggerArgs',
    'WorkloadOptionsAutoscalingKedaTriggerArgsDict',
    'WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgs',
    'WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgsDict',
    'WorkloadOptionsAutoscalingMultiArgs',
    'WorkloadOptionsAutoscalingMultiArgsDict',
    'WorkloadOptionsMultiZoneArgs',
    'WorkloadOptionsMultiZoneArgsDict',
    'WorkloadRequestRetryPolicyArgs',
    'WorkloadRequestRetryPolicyArgsDict',
    'WorkloadRolloutOptionArgs',
    'WorkloadRolloutOptionArgsDict',
    'WorkloadSecurityOptionsArgs',
    'WorkloadSecurityOptionsArgsDict',
    'WorkloadSidecarArgs',
    'WorkloadSidecarArgsDict',
    'WorkloadStatusArgs',
    'WorkloadStatusArgsDict',
    'WorkloadStatusHealthCheckArgs',
    'WorkloadStatusHealthCheckArgsDict',
    'WorkloadStatusLoadBalancerArgs',
    'WorkloadStatusLoadBalancerArgsDict',
    'WorkloadStatusResolvedImageArgs',
    'WorkloadStatusResolvedImageArgsDict',
    'WorkloadStatusResolvedImageImageArgs',
    'WorkloadStatusResolvedImageImageArgsDict',
    'WorkloadStatusResolvedImageImageManifestArgs',
    'WorkloadStatusResolvedImageImageManifestArgsDict',
    'GetGvcControlplaneTracingArgs',
    'GetGvcControlplaneTracingArgsDict',
    'GetGvcKedaArgs',
    'GetGvcKedaArgsDict',
    'GetGvcLightstepTracingArgs',
    'GetGvcLightstepTracingArgsDict',
    'GetGvcLoadBalancerArgs',
    'GetGvcLoadBalancerArgsDict',
    'GetGvcLoadBalancerMultiZoneArgs',
    'GetGvcLoadBalancerMultiZoneArgsDict',
    'GetGvcLoadBalancerRedirectArgs',
    'GetGvcLoadBalancerRedirectArgsDict',
    'GetGvcLoadBalancerRedirectClassArgs',
    'GetGvcLoadBalancerRedirectClassArgsDict',
    'GetGvcOtelTracingArgs',
    'GetGvcOtelTracingArgsDict',
    'GetGvcSidecarArgs',
    'GetGvcSidecarArgsDict',
    'GetImagesQueryArgs',
    'GetImagesQueryArgsDict',
    'GetImagesQuerySpecArgs',
    'GetImagesQuerySpecArgsDict',
    'GetImagesQuerySpecTermArgs',
    'GetImagesQuerySpecTermArgsDict',
    'GetOrgAuthConfigArgs',
    'GetOrgAuthConfigArgsDict',
    'GetOrgObservabilityArgs',
    'GetOrgObservabilityArgsDict',
    'GetOrgSecurityArgs',
    'GetOrgSecurityArgsDict',
    'GetOrgSecurityThreatDetectionArgs',
    'GetOrgSecurityThreatDetectionArgsDict',
    'GetOrgSecurityThreatDetectionSyslogArgs',
    'GetOrgSecurityThreatDetectionSyslogArgsDict',
    'GetSecretAwArgs',
    'GetSecretAwArgsDict',
    'GetSecretAzureConnectorArgs',
    'GetSecretAzureConnectorArgsDict',
    'GetSecretEcrArgs',
    'GetSecretEcrArgsDict',
    'GetSecretKeypairArgs',
    'GetSecretKeypairArgsDict',
    'GetSecretNatsAccountArgs',
    'GetSecretNatsAccountArgsDict',
    'GetSecretOpaqueArgs',
    'GetSecretOpaqueArgsDict',
    'GetSecretTlArgs',
    'GetSecretTlArgsDict',
    'GetSecretUserpassArgs',
    'GetSecretUserpassArgsDict',
]

MYPY = False

if not MYPY:
    class CloudAccountAwsArgsDict(TypedDict):
        role_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        Amazon Resource Name (ARN) Role.
        """
elif False:
    CloudAccountAwsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccountAwsArgs:
    def __init__(__self__, *,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] role_arn: Amazon Resource Name (ARN) Role.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Amazon Resource Name (ARN) Role.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_arn", value)


if not MYPY:
    class CloudAccountAzureArgsDict(TypedDict):
        secret_link: NotRequired[pulumi.Input[builtins.str]]
        """
        Full link to an Azure secret. (e.g., /org/ORG_NAME/secret/AZURE_SECRET).
        """
elif False:
    CloudAccountAzureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccountAzureArgs:
    def __init__(__self__, *,
                 secret_link: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] secret_link: Full link to an Azure secret. (e.g., /org/ORG_NAME/secret/AZURE_SECRET).
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Full link to an Azure secret. (e.g., /org/ORG_NAME/secret/AZURE_SECRET).
        """
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_link", value)


if not MYPY:
    class CloudAccountGcpArgsDict(TypedDict):
        project_id: NotRequired[pulumi.Input[builtins.str]]
        """
        GCP project ID. Obtained from the GCP cloud console.
        """
elif False:
    CloudAccountGcpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccountGcpArgs:
    def __init__(__self__, *,
                 project_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] project_id: GCP project ID. Obtained from the GCP cloud console.
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        GCP project ID. Obtained from the GCP cloud console.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_id", value)


if not MYPY:
    class CloudAccountNgsArgsDict(TypedDict):
        secret_link: NotRequired[pulumi.Input[builtins.str]]
        """
        Full link to a NATS Account Secret secret. (e.g., /org/ORG_NAME/secret/NATS_ACCOUNT_SECRET).
        """
elif False:
    CloudAccountNgsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccountNgsArgs:
    def __init__(__self__, *,
                 secret_link: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] secret_link: Full link to a NATS Account Secret secret. (e.g., /org/ORG_NAME/secret/NATS_ACCOUNT_SECRET).
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Full link to a NATS Account Secret secret. (e.g., /org/ORG_NAME/secret/NATS_ACCOUNT_SECRET).
        """
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_link", value)


if not MYPY:
    class DomainRouteHeadersArgsDict(TypedDict):
        request: NotRequired[pulumi.Input['DomainRouteHeadersRequestArgsDict']]
        """
        Manipulates HTTP headers.
        """
elif False:
    DomainRouteHeadersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainRouteHeadersArgs:
    def __init__(__self__, *,
                 request: Optional[pulumi.Input['DomainRouteHeadersRequestArgs']] = None):
        """
        :param pulumi.Input['DomainRouteHeadersRequestArgs'] request: Manipulates HTTP headers.
        """
        if request is not None:
            pulumi.set(__self__, "request", request)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DomainRouteHeadersRequestArgs']]:
        """
        Manipulates HTTP headers.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DomainRouteHeadersRequestArgs']]):
        pulumi.set(self, "request", value)


if not MYPY:
    class DomainRouteHeadersRequestArgsDict(TypedDict):
        set: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Sets or overrides headers to all http requests for this route.
        """
elif False:
    DomainRouteHeadersRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainRouteHeadersRequestArgs:
    def __init__(__self__, *,
                 set: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] set: Sets or overrides headers to all http requests for this route.
        """
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Sets or overrides headers to all http requests for this route.
        """
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "set", value)


if not MYPY:
    class DomainSpecArgsDict(TypedDict):
        accept_all_hosts: NotRequired[pulumi.Input[builtins.bool]]
        """
        Allows domain to accept wildcards. The associated GVC must have dedicated load balancing enabled.
        """
        accept_all_subdomains: NotRequired[pulumi.Input[builtins.bool]]
        """
        Accept all subdomains will accept any host that is a sub domain of the domain so *.$DOMAIN
        """
        cert_challenge_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Defines the method used to prove domain ownership for certificate issuance.
        """
        dns_mode: NotRequired[pulumi.Input[builtins.str]]
        """
        In `cname` dnsMode, Control Plane will configure workloads to accept traffic for the domain but will not manage DNS records for the domain. End users must configure CNAME records in their own DNS pointed to the canonical workload endpoint. Currently `cname` dnsMode requires that a TLS server certificate be configured when subdomain based routing is used. In `ns` dnsMode, Control Plane will manage the subdomains and create all necessary DNS records. End users configure NS records to forward DNS requests to the Control Plane managed DNS servers. Valid values: `cname`, `ns`. Default: `cname`.
        """
        gvc_link: NotRequired[pulumi.Input[builtins.str]]
        """
        This value is set to a target GVC (using a full link) for use by subdomain based routing. Each workload in the GVC will receive a subdomain in the form ${workload.name}.${domain.name}. **Do not include if path based routing is used.**
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgsDict']]]]
        """
        Domain port specifications.
        """
        workload_link: NotRequired[pulumi.Input[builtins.str]]
        """
        Creates a unique subdomain for each replica of a stateful workload, enabling direct access to individual instances.
        """
elif False:
    DomainSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSpecArgs:
    def __init__(__self__, *,
                 accept_all_hosts: Optional[pulumi.Input[builtins.bool]] = None,
                 accept_all_subdomains: Optional[pulumi.Input[builtins.bool]] = None,
                 cert_challenge_type: Optional[pulumi.Input[builtins.str]] = None,
                 dns_mode: Optional[pulumi.Input[builtins.str]] = None,
                 gvc_link: Optional[pulumi.Input[builtins.str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]]] = None,
                 workload_link: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] accept_all_hosts: Allows domain to accept wildcards. The associated GVC must have dedicated load balancing enabled.
        :param pulumi.Input[builtins.bool] accept_all_subdomains: Accept all subdomains will accept any host that is a sub domain of the domain so *.$DOMAIN
        :param pulumi.Input[builtins.str] cert_challenge_type: Defines the method used to prove domain ownership for certificate issuance.
        :param pulumi.Input[builtins.str] dns_mode: In `cname` dnsMode, Control Plane will configure workloads to accept traffic for the domain but will not manage DNS records for the domain. End users must configure CNAME records in their own DNS pointed to the canonical workload endpoint. Currently `cname` dnsMode requires that a TLS server certificate be configured when subdomain based routing is used. In `ns` dnsMode, Control Plane will manage the subdomains and create all necessary DNS records. End users configure NS records to forward DNS requests to the Control Plane managed DNS servers. Valid values: `cname`, `ns`. Default: `cname`.
        :param pulumi.Input[builtins.str] gvc_link: This value is set to a target GVC (using a full link) for use by subdomain based routing. Each workload in the GVC will receive a subdomain in the form ${workload.name}.${domain.name}. **Do not include if path based routing is used.**
        :param pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]] ports: Domain port specifications.
        :param pulumi.Input[builtins.str] workload_link: Creates a unique subdomain for each replica of a stateful workload, enabling direct access to individual instances.
        """
        if accept_all_hosts is not None:
            pulumi.set(__self__, "accept_all_hosts", accept_all_hosts)
        if accept_all_subdomains is not None:
            pulumi.set(__self__, "accept_all_subdomains", accept_all_subdomains)
        if cert_challenge_type is not None:
            pulumi.set(__self__, "cert_challenge_type", cert_challenge_type)
        if dns_mode is not None:
            pulumi.set(__self__, "dns_mode", dns_mode)
        if gvc_link is not None:
            pulumi.set(__self__, "gvc_link", gvc_link)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if workload_link is not None:
            pulumi.set(__self__, "workload_link", workload_link)

    @property
    @pulumi.getter(name="acceptAllHosts")
    def accept_all_hosts(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Allows domain to accept wildcards. The associated GVC must have dedicated load balancing enabled.
        """
        return pulumi.get(self, "accept_all_hosts")

    @accept_all_hosts.setter
    def accept_all_hosts(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "accept_all_hosts", value)

    @property
    @pulumi.getter(name="acceptAllSubdomains")
    def accept_all_subdomains(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Accept all subdomains will accept any host that is a sub domain of the domain so *.$DOMAIN
        """
        return pulumi.get(self, "accept_all_subdomains")

    @accept_all_subdomains.setter
    def accept_all_subdomains(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "accept_all_subdomains", value)

    @property
    @pulumi.getter(name="certChallengeType")
    def cert_challenge_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defines the method used to prove domain ownership for certificate issuance.
        """
        return pulumi.get(self, "cert_challenge_type")

    @cert_challenge_type.setter
    def cert_challenge_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cert_challenge_type", value)

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        In `cname` dnsMode, Control Plane will configure workloads to accept traffic for the domain but will not manage DNS records for the domain. End users must configure CNAME records in their own DNS pointed to the canonical workload endpoint. Currently `cname` dnsMode requires that a TLS server certificate be configured when subdomain based routing is used. In `ns` dnsMode, Control Plane will manage the subdomains and create all necessary DNS records. End users configure NS records to forward DNS requests to the Control Plane managed DNS servers. Valid values: `cname`, `ns`. Default: `cname`.
        """
        return pulumi.get(self, "dns_mode")

    @dns_mode.setter
    def dns_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_mode", value)

    @property
    @pulumi.getter(name="gvcLink")
    def gvc_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This value is set to a target GVC (using a full link) for use by subdomain based routing. Each workload in the GVC will receive a subdomain in the form ${workload.name}.${domain.name}. **Do not include if path based routing is used.**
        """
        return pulumi.get(self, "gvc_link")

    @gvc_link.setter
    def gvc_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gvc_link", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]]]:
        """
        Domain port specifications.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="workloadLink")
    def workload_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Creates a unique subdomain for each replica of a stateful workload, enabling direct access to individual instances.
        """
        return pulumi.get(self, "workload_link")

    @workload_link.setter
    def workload_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "workload_link", value)


if not MYPY:
    class DomainSpecPortArgsDict(TypedDict):
        cors: NotRequired[pulumi.Input['DomainSpecPortCorsArgsDict']]
        """
        A security feature implemented by web browsers to allow resources on a web page to be requested from another domain outside the domain from which the resource originated.
        """
        number: NotRequired[pulumi.Input[builtins.int]]
        """
        Sets or overrides headers to all http requests for this route.
        """
        protocol: NotRequired[pulumi.Input[builtins.str]]
        """
        Allowed protocol. Valid values: `http`, `http2`, `tcp`. Default: `http2`.
        """
        tls: NotRequired[pulumi.Input['DomainSpecPortTlsArgsDict']]
        """
        Used for TLS connections for this Domain. End users are responsible for certificate updates.
        """
elif False:
    DomainSpecPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSpecPortArgs:
    def __init__(__self__, *,
                 cors: Optional[pulumi.Input['DomainSpecPortCorsArgs']] = None,
                 number: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 tls: Optional[pulumi.Input['DomainSpecPortTlsArgs']] = None):
        """
        :param pulumi.Input['DomainSpecPortCorsArgs'] cors: A security feature implemented by web browsers to allow resources on a web page to be requested from another domain outside the domain from which the resource originated.
        :param pulumi.Input[builtins.int] number: Sets or overrides headers to all http requests for this route.
        :param pulumi.Input[builtins.str] protocol: Allowed protocol. Valid values: `http`, `http2`, `tcp`. Default: `http2`.
        :param pulumi.Input['DomainSpecPortTlsArgs'] tls: Used for TLS connections for this Domain. End users are responsible for certificate updates.
        """
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['DomainSpecPortCorsArgs']]:
        """
        A security feature implemented by web browsers to allow resources on a web page to be requested from another domain outside the domain from which the resource originated.
        """
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['DomainSpecPortCorsArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Sets or overrides headers to all http requests for this route.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed protocol. Valid values: `http`, `http2`, `tcp`. Default: `http2`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['DomainSpecPortTlsArgs']]:
        """
        Used for TLS connections for this Domain. End users are responsible for certificate updates.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['DomainSpecPortTlsArgs']]):
        pulumi.set(self, "tls", value)


if not MYPY:
    class DomainSpecPortCorsArgsDict(TypedDict):
        allow_credentials: NotRequired[pulumi.Input[builtins.bool]]
        """
        Determines whether the client-side code (typically running in a web browser) is allowed to include credentials (such as cookies, HTTP authentication, or client-side SSL certificates) in cross-origin requests.
        """
        allow_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Specifies the custom HTTP headers that are allowed in a cross-origin request to a specific resource.
        """
        allow_methods: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Specifies the HTTP methods (such as `GET`, `POST`, `PUT`, `DELETE`, etc.) that are allowed for a cross-origin request to a specific resource.
        """
        allow_origins: NotRequired[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgsDict']]]]
        """
        Determines which origins are allowed to access a particular resource on a server from a web browser.
        """
        expose_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The HTTP headers that a server allows to be exposed to the client in response to a cross-origin request. These headers provide additional information about the server's capabilities or requirements, aiding in proper handling of the request by the client's browser or application.
        """
        max_age: NotRequired[pulumi.Input[builtins.str]]
        """
        Maximum amount of time that a preflight request result can be cached by the client browser. Input is expected as a duration string (i.e, 24h, 20m, etc.).
        """
elif False:
    DomainSpecPortCorsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSpecPortCorsArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[builtins.bool]] = None,
                 allow_headers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 allow_methods: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 allow_origins: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]]] = None,
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 max_age: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] allow_credentials: Determines whether the client-side code (typically running in a web browser) is allowed to include credentials (such as cookies, HTTP authentication, or client-side SSL certificates) in cross-origin requests.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allow_headers: Specifies the custom HTTP headers that are allowed in a cross-origin request to a specific resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allow_methods: Specifies the HTTP methods (such as `GET`, `POST`, `PUT`, `DELETE`, etc.) that are allowed for a cross-origin request to a specific resource.
        :param pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]] allow_origins: Determines which origins are allowed to access a particular resource on a server from a web browser.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] expose_headers: The HTTP headers that a server allows to be exposed to the client in response to a cross-origin request. These headers provide additional information about the server's capabilities or requirements, aiding in proper handling of the request by the client's browser or application.
        :param pulumi.Input[builtins.str] max_age: Maximum amount of time that a preflight request result can be cached by the client browser. Input is expected as a duration string (i.e, 24h, 20m, etc.).
        """
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allow_headers is not None:
            pulumi.set(__self__, "allow_headers", allow_headers)
        if allow_methods is not None:
            pulumi.set(__self__, "allow_methods", allow_methods)
        if allow_origins is not None:
            pulumi.set(__self__, "allow_origins", allow_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Determines whether the client-side code (typically running in a web browser) is allowed to include credentials (such as cookies, HTTP authentication, or client-side SSL certificates) in cross-origin requests.
        """
        return pulumi.get(self, "allow_credentials")

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_credentials", value)

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Specifies the custom HTTP headers that are allowed in a cross-origin request to a specific resource.
        """
        return pulumi.get(self, "allow_headers")

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allow_headers", value)

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Specifies the HTTP methods (such as `GET`, `POST`, `PUT`, `DELETE`, etc.) that are allowed for a cross-origin request to a specific resource.
        """
        return pulumi.get(self, "allow_methods")

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allow_methods", value)

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]]]:
        """
        Determines which origins are allowed to access a particular resource on a server from a web browser.
        """
        return pulumi.get(self, "allow_origins")

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]]]):
        pulumi.set(self, "allow_origins", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The HTTP headers that a server allows to be exposed to the client in response to a cross-origin request. These headers provide additional information about the server's capabilities or requirements, aiding in proper handling of the request by the client's browser or application.
        """
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Maximum amount of time that a preflight request result can be cached by the client browser. Input is expected as a duration string (i.e, 24h, 20m, etc.).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_age", value)


if not MYPY:
    class DomainSpecPortCorsAllowOriginArgsDict(TypedDict):
        exact: NotRequired[pulumi.Input[builtins.str]]
        """
        Value of allowed origin.
        """
        regex: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DomainSpecPortCorsAllowOriginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSpecPortCorsAllowOriginArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[builtins.str]] = None,
                 regex: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] exact: Value of allowed origin.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Value of allowed origin.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class DomainSpecPortTlsArgsDict(TypedDict):
        cipher_suites: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Allowed cipher suites. Refer to the [Domain Reference](https://docs.controlplane.com/reference/domain#cipher-suites) for details.
        """
        client_certificate: NotRequired[pulumi.Input['DomainSpecPortTlsClientCertificateArgsDict']]
        """
        The certificate authority PEM, stored as a TLS Secret, used to verify the authority of the client certificate. The only verification performed checks that the CN of the PEM matches the Domain (i.e., CN=*.DOMAIN).
        """
        min_protocol_version: NotRequired[pulumi.Input[builtins.str]]
        """
        Minimum TLS version to accept. Minimum is `1.0`. Default: `1.2`.
        """
        server_certificate: NotRequired[pulumi.Input['DomainSpecPortTlsServerCertificateArgsDict']]
        """
        Configure an optional custom server certificate for the domain. When the port number is 443 and this is not supplied, a certificate is provisioned automatically.
        """
elif False:
    DomainSpecPortTlsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSpecPortTlsArgs:
    def __init__(__self__, *,
                 cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 client_certificate: Optional[pulumi.Input['DomainSpecPortTlsClientCertificateArgs']] = None,
                 min_protocol_version: Optional[pulumi.Input[builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input['DomainSpecPortTlsServerCertificateArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cipher_suites: Allowed cipher suites. Refer to the [Domain Reference](https://docs.controlplane.com/reference/domain#cipher-suites) for details.
        :param pulumi.Input['DomainSpecPortTlsClientCertificateArgs'] client_certificate: The certificate authority PEM, stored as a TLS Secret, used to verify the authority of the client certificate. The only verification performed checks that the CN of the PEM matches the Domain (i.e., CN=*.DOMAIN).
        :param pulumi.Input[builtins.str] min_protocol_version: Minimum TLS version to accept. Minimum is `1.0`. Default: `1.2`.
        :param pulumi.Input['DomainSpecPortTlsServerCertificateArgs'] server_certificate: Configure an optional custom server certificate for the domain. When the port number is 443 and this is not supplied, a certificate is provisioned automatically.
        """
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if min_protocol_version is not None:
            pulumi.set(__self__, "min_protocol_version", min_protocol_version)
        if server_certificate is not None:
            pulumi.set(__self__, "server_certificate", server_certificate)

    @property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Allowed cipher suites. Refer to the [Domain Reference](https://docs.controlplane.com/reference/domain#cipher-suites) for details.
        """
        return pulumi.get(self, "cipher_suites")

    @cipher_suites.setter
    def cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "cipher_suites", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input['DomainSpecPortTlsClientCertificateArgs']]:
        """
        The certificate authority PEM, stored as a TLS Secret, used to verify the authority of the client certificate. The only verification performed checks that the CN of the PEM matches the Domain (i.e., CN=*.DOMAIN).
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input['DomainSpecPortTlsClientCertificateArgs']]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Minimum TLS version to accept. Minimum is `1.0`. Default: `1.2`.
        """
        return pulumi.get(self, "min_protocol_version")

    @min_protocol_version.setter
    def min_protocol_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_protocol_version", value)

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional[pulumi.Input['DomainSpecPortTlsServerCertificateArgs']]:
        """
        Configure an optional custom server certificate for the domain. When the port number is 443 and this is not supplied, a certificate is provisioned automatically.
        """
        return pulumi.get(self, "server_certificate")

    @server_certificate.setter
    def server_certificate(self, value: Optional[pulumi.Input['DomainSpecPortTlsServerCertificateArgs']]):
        pulumi.set(self, "server_certificate", value)


if not MYPY:
    class DomainSpecPortTlsClientCertificateArgsDict(TypedDict):
        secret_link: NotRequired[pulumi.Input[builtins.str]]
        """
        The secret will include a client certificate authority cert in PEM format used to verify requests which include client certificates. The key subject must match the domain and the key usage properties must be configured for client certificate authorization. The secret type must be keypair.
        """
elif False:
    DomainSpecPortTlsClientCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSpecPortTlsClientCertificateArgs:
    def __init__(__self__, *,
                 secret_link: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] secret_link: The secret will include a client certificate authority cert in PEM format used to verify requests which include client certificates. The key subject must match the domain and the key usage properties must be configured for client certificate authorization. The secret type must be keypair.
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The secret will include a client certificate authority cert in PEM format used to verify requests which include client certificates. The key subject must match the domain and the key usage properties must be configured for client certificate authorization. The secret type must be keypair.
        """
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_link", value)


if not MYPY:
    class DomainSpecPortTlsServerCertificateArgsDict(TypedDict):
        secret_link: NotRequired[pulumi.Input[builtins.str]]
        """
        When provided, this is used as the server certificate authority. The secret type must be keypair and the content must be PEM encoded.
        """
elif False:
    DomainSpecPortTlsServerCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSpecPortTlsServerCertificateArgs:
    def __init__(__self__, *,
                 secret_link: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] secret_link: When provided, this is used as the server certificate authority. The secret type must be keypair and the content must be PEM encoded.
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When provided, this is used as the server certificate authority. The secret type must be keypair and the content must be PEM encoded.
        """
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_link", value)


if not MYPY:
    class DomainStatusArgsDict(TypedDict):
        dns_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgsDict']]]]
        """
        List of required DNS record entries.
        """
        endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgsDict']]]]
        """
        List of configured domain endpoints.
        """
        fingerprint: NotRequired[pulumi.Input[builtins.str]]
        locations: NotRequired[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgsDict']]]]
        """
        Contains the cloud provider name, region, and certificate status.
        """
        status: NotRequired[pulumi.Input[builtins.str]]
        """
        Status of Domain. Possible values: `initializing`, `ready`, `pendingDnsConfig`, `pendingCertificate`, `usedByGvc`.
        """
        warning: NotRequired[pulumi.Input[builtins.str]]
        """
        Warning message.
        """
elif False:
    DomainStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainStatusArgs:
    def __init__(__self__, *,
                 dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]]] = None,
                 fingerprint: Optional[pulumi.Input[builtins.str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 warning: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]] dns_configs: List of required DNS record entries.
        :param pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]] endpoints: List of configured domain endpoints.
        :param pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]] locations: Contains the cloud provider name, region, and certificate status.
        :param pulumi.Input[builtins.str] status: Status of Domain. Possible values: `initializing`, `ready`, `pendingDnsConfig`, `pendingCertificate`, `usedByGvc`.
        :param pulumi.Input[builtins.str] warning: Warning message.
        """
        if dns_configs is not None:
            pulumi.set(__self__, "dns_configs", dns_configs)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]]]:
        """
        List of required DNS record entries.
        """
        return pulumi.get(self, "dns_configs")

    @dns_configs.setter
    def dns_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]]]):
        pulumi.set(self, "dns_configs", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]]]:
        """
        List of configured domain endpoints.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]]]:
        """
        Contains the cloud provider name, region, and certificate status.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Status of Domain. Possible values: `initializing`, `ready`, `pendingDnsConfig`, `pendingCertificate`, `usedByGvc`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Warning message.
        """
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "warning", value)


if not MYPY:
    class DomainStatusDnsConfigArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The host in DNS terminology refers to the domain or subdomain that the DNS record is associated with. It's essentially the name that is being queried or managed. For example, in a DNS record for `www.example.com`, `www` is a host in the domain `example.com`.
        """
        ttl: NotRequired[pulumi.Input[builtins.int]]
        """
        Time to live (TTL) is a value that signifies how long (in seconds) a DNS record should be cached by a resolver or a browser before a new request should be sent to refresh the data. Lower TTL values mean records are updated more frequently, which is beneficial for dynamic DNS configurations or during DNS migrations. Higher TTL values reduce the load on DNS servers and improve the speed of name resolution for end users by relying on cached data.
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        The DNS record type specifies the type of data the DNS record contains. Valid values: `CNAME`, `NS`, `TXT`.
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        The value of a DNS record contains the data the record is meant to convey, based on the type of the record.
        """
elif False:
    DomainStatusDnsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainStatusDnsConfigArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] host: The host in DNS terminology refers to the domain or subdomain that the DNS record is associated with. It's essentially the name that is being queried or managed. For example, in a DNS record for `www.example.com`, `www` is a host in the domain `example.com`.
        :param pulumi.Input[builtins.int] ttl: Time to live (TTL) is a value that signifies how long (in seconds) a DNS record should be cached by a resolver or a browser before a new request should be sent to refresh the data. Lower TTL values mean records are updated more frequently, which is beneficial for dynamic DNS configurations or during DNS migrations. Higher TTL values reduce the load on DNS servers and improve the speed of name resolution for end users by relying on cached data.
        :param pulumi.Input[builtins.str] type: The DNS record type specifies the type of data the DNS record contains. Valid values: `CNAME`, `NS`, `TXT`.
        :param pulumi.Input[builtins.str] value: The value of a DNS record contains the data the record is meant to convey, based on the type of the record.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The host in DNS terminology refers to the domain or subdomain that the DNS record is associated with. It's essentially the name that is being queried or managed. For example, in a DNS record for `www.example.com`, `www` is a host in the domain `example.com`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Time to live (TTL) is a value that signifies how long (in seconds) a DNS record should be cached by a resolver or a browser before a new request should be sent to refresh the data. Lower TTL values mean records are updated more frequently, which is beneficial for dynamic DNS configurations or during DNS migrations. Higher TTL values reduce the load on DNS servers and improve the speed of name resolution for end users by relying on cached data.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The DNS record type specifies the type of data the DNS record contains. Valid values: `CNAME`, `NS`, `TXT`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The value of a DNS record contains the data the record is meant to convey, based on the type of the record.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DomainStatusEndpointArgsDict(TypedDict):
        url: NotRequired[pulumi.Input[builtins.str]]
        """
        URL of endpoint.
        """
        workload_link: NotRequired[pulumi.Input[builtins.str]]
        """
        Full link to associated workload.
        """
elif False:
    DomainStatusEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainStatusEndpointArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[builtins.str]] = None,
                 workload_link: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] url: URL of endpoint.
        :param pulumi.Input[builtins.str] workload_link: Full link to associated workload.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)
        if workload_link is not None:
            pulumi.set(__self__, "workload_link", workload_link)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        URL of endpoint.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="workloadLink")
    def workload_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Full link to associated workload.
        """
        return pulumi.get(self, "workload_link")

    @workload_link.setter
    def workload_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "workload_link", value)


if not MYPY:
    class DomainStatusLocationArgsDict(TypedDict):
        certificate_status: NotRequired[pulumi.Input[builtins.str]]
        """
        The current validity or status of the SSL/TLS certificate.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the location.
        """
elif False:
    DomainStatusLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainStatusLocationArgs:
    def __init__(__self__, *,
                 certificate_status: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] certificate_status: The current validity or status of the SSL/TLS certificate.
        :param pulumi.Input[builtins.str] name: The name of the location.
        """
        if certificate_status is not None:
            pulumi.set(__self__, "certificate_status", certificate_status)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="certificateStatus")
    def certificate_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The current validity or status of the SSL/TLS certificate.
        """
        return pulumi.get(self, "certificate_status")

    @certificate_status.setter
    def certificate_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_status", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GroupIdentityMatcherArgsDict(TypedDict):
        expression: pulumi.Input[builtins.str]
        """
        Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful for managing the grouping of users logged in with SAML providers.
        """
        language: NotRequired[pulumi.Input[builtins.str]]
        """
        Language of the expression. Either `jmespath` or `javascript`. Default: `jmespath`.
        """
elif False:
    GroupIdentityMatcherArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupIdentityMatcherArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[builtins.str],
                 language: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] expression: Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful for managing the grouping of users logged in with SAML providers.
        :param pulumi.Input[builtins.str] language: Language of the expression. Either `jmespath` or `javascript`. Default: `jmespath`.
        """
        pulumi.set(__self__, "expression", expression)
        if language is not None:
            pulumi.set(__self__, "language", language)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[builtins.str]:
        """
        Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful for managing the grouping of users logged in with SAML providers.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Language of the expression. Either `jmespath` or `javascript`. Default: `jmespath`.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "language", value)


if not MYPY:
    class GroupMemberQueryArgsDict(TypedDict):
        fetch: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        spec: NotRequired[pulumi.Input['GroupMemberQuerySpecArgsDict']]
elif False:
    GroupMemberQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupMemberQueryArgs:
    def __init__(__self__, *,
                 fetch: Optional[pulumi.Input[builtins.str]] = None,
                 spec: Optional[pulumi.Input['GroupMemberQuerySpecArgs']] = None):
        """
        :param pulumi.Input[builtins.str] fetch: Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        if fetch is not None:
            pulumi.set(__self__, "fetch", fetch)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def fetch(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        return pulumi.get(self, "fetch")

    @fetch.setter
    def fetch(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fetch", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['GroupMemberQuerySpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['GroupMemberQuerySpecArgs']]):
        pulumi.set(self, "spec", value)


if not MYPY:
    class GroupMemberQuerySpecArgsDict(TypedDict):
        match: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        terms: NotRequired[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgsDict']]]]
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
elif False:
    GroupMemberQuerySpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupMemberQuerySpecArgs:
    def __init__(__self__, *,
                 match: Optional[pulumi.Input[builtins.str]] = None,
                 terms: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] match: Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        :param pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]] terms: Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        if match is not None:
            pulumi.set(__self__, "match", match)
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]]]:
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]]]):
        pulumi.set(self, "terms", value)


if not MYPY:
    class GroupMemberQuerySpecTermArgsDict(TypedDict):
        op: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        property: NotRequired[pulumi.Input[builtins.str]]
        """
        Property to use for query evaluation.
        """
        rel: NotRequired[pulumi.Input[builtins.str]]
        """
        Relation to use for query evaluation.
        """
        tag: NotRequired[pulumi.Input[builtins.str]]
        """
        Tag key to use for query evaluation.
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        Testing value for query evaluation.
        """
elif False:
    GroupMemberQuerySpecTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupMemberQuerySpecTermArgs:
    def __init__(__self__, *,
                 op: Optional[pulumi.Input[builtins.str]] = None,
                 property: Optional[pulumi.Input[builtins.str]] = None,
                 rel: Optional[pulumi.Input[builtins.str]] = None,
                 tag: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] op: Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        :param pulumi.Input[builtins.str] property: Property to use for query evaluation.
        :param pulumi.Input[builtins.str] rel: Relation to use for query evaluation.
        :param pulumi.Input[builtins.str] tag: Tag key to use for query evaluation.
        :param pulumi.Input[builtins.str] value: Testing value for query evaluation.
        """
        if op is not None:
            pulumi.set(__self__, "op", op)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def rel(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Relation to use for query evaluation.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tag key to use for query evaluation.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Testing value for query evaluation.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Property to use for query evaluation.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "property", value)


if not MYPY:
    class GvcControlplaneTracingArgsDict(TypedDict):
        sampling: pulumi.Input[builtins.float]
        """
        Determines what percentage of requests should be traced.
        """
        custom_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of custom tags.
        """
elif False:
    GvcControlplaneTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcControlplaneTracingArgs:
    def __init__(__self__, *,
                 sampling: pulumi.Input[builtins.float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.float] sampling: Determines what percentage of requests should be traced.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[builtins.float]:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class GvcKedaArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        """
        identity_link: NotRequired[pulumi.Input[builtins.str]]
        """
        A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        """
        secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
elif False:
    GvcKedaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcKedaArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 identity_link: Optional[pulumi.Input[builtins.str]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        :param pulumi.Input[builtins.str] identity_link: A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] secrets: A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if identity_link is not None:
            pulumi.set(__self__, "identity_link", identity_link)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="identityLink")
    def identity_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        """
        return pulumi.get(self, "identity_link")

    @identity_link.setter
    def identity_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "identity_link", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secrets", value)


if not MYPY:
    class GvcLightstepTracingArgsDict(TypedDict):
        endpoint: pulumi.Input[builtins.str]
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        sampling: pulumi.Input[builtins.float]
        """
        Determines what percentage of requests should be traced.
        """
        credentials: NotRequired[pulumi.Input[builtins.str]]
        """
        Full link to referenced Opaque Secret.
        """
        custom_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of custom tags.
        """
elif False:
    GvcLightstepTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcLightstepTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[builtins.str],
                 sampling: pulumi.Input[builtins.float],
                 credentials: Optional[pulumi.Input[builtins.str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param pulumi.Input[builtins.float] sampling: Determines what percentage of requests should be traced.
        :param pulumi.Input[builtins.str] credentials: Full link to referenced Opaque Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[builtins.float]:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class GvcLoadBalancerArgsDict(TypedDict):
        dedicated: NotRequired[pulumi.Input[builtins.bool]]
        """
        Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        """
        ipset: NotRequired[pulumi.Input[builtins.str]]
        """
        The link or the name of the IP Set that will be used for this load balancer.
        """
        multi_zone: NotRequired[pulumi.Input['GvcLoadBalancerMultiZoneArgsDict']]
        redirect: NotRequired[pulumi.Input['GvcLoadBalancerRedirectArgsDict']]
        """
        Specify the url to be redirected to for different http status codes.
        """
        trusted_proxies: NotRequired[pulumi.Input[builtins.int]]
        """
        Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
elif False:
    GvcLoadBalancerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcLoadBalancerArgs:
    def __init__(__self__, *,
                 dedicated: Optional[pulumi.Input[builtins.bool]] = None,
                 ipset: Optional[pulumi.Input[builtins.str]] = None,
                 multi_zone: Optional[pulumi.Input['GvcLoadBalancerMultiZoneArgs']] = None,
                 redirect: Optional[pulumi.Input['GvcLoadBalancerRedirectArgs']] = None,
                 trusted_proxies: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.bool] dedicated: Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        :param pulumi.Input[builtins.str] ipset: The link or the name of the IP Set that will be used for this load balancer.
        :param pulumi.Input['GvcLoadBalancerRedirectArgs'] redirect: Specify the url to be redirected to for different http status codes.
        :param pulumi.Input[builtins.int] trusted_proxies: Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if ipset is not None:
            pulumi.set(__self__, "ipset", ipset)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if trusted_proxies is not None:
            pulumi.set(__self__, "trusted_proxies", trusted_proxies)

    @property
    @pulumi.getter
    def dedicated(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        """
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dedicated", value)

    @property
    @pulumi.getter
    def ipset(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The link or the name of the IP Set that will be used for this load balancer.
        """
        return pulumi.get(self, "ipset")

    @ipset.setter
    def ipset(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipset", value)

    @property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional[pulumi.Input['GvcLoadBalancerMultiZoneArgs']]:
        return pulumi.get(self, "multi_zone")

    @multi_zone.setter
    def multi_zone(self, value: Optional[pulumi.Input['GvcLoadBalancerMultiZoneArgs']]):
        pulumi.set(self, "multi_zone", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['GvcLoadBalancerRedirectArgs']]:
        """
        Specify the url to be redirected to for different http status codes.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['GvcLoadBalancerRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="trustedProxies")
    def trusted_proxies(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
        return pulumi.get(self, "trusted_proxies")

    @trusted_proxies.setter
    def trusted_proxies(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "trusted_proxies", value)


if not MYPY:
    class GvcLoadBalancerMultiZoneArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    GvcLoadBalancerMultiZoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcLoadBalancerMultiZoneArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class GvcLoadBalancerRedirectArgsDict(TypedDict):
        class_: NotRequired[pulumi.Input['GvcLoadBalancerRedirectClassArgsDict']]
        """
        Specify the redirect url for all status codes in a class.
        """
elif False:
    GvcLoadBalancerRedirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcLoadBalancerRedirectArgs:
    def __init__(__self__, *,
                 class_: Optional[pulumi.Input['GvcLoadBalancerRedirectClassArgs']] = None):
        """
        :param pulumi.Input['GvcLoadBalancerRedirectClassArgs'] class_: Specify the redirect url for all status codes in a class.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input['GvcLoadBalancerRedirectClassArgs']]:
        """
        Specify the redirect url for all status codes in a class.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input['GvcLoadBalancerRedirectClassArgs']]):
        pulumi.set(self, "class_", value)


if not MYPY:
    class GvcLoadBalancerRedirectClassArgsDict(TypedDict):
        status401: NotRequired[pulumi.Input[builtins.str]]
        """
        An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        """
        status5xx: NotRequired[pulumi.Input[builtins.str]]
        """
        Specify the redirect url for any 500 level status code.
        """
elif False:
    GvcLoadBalancerRedirectClassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcLoadBalancerRedirectClassArgs:
    def __init__(__self__, *,
                 status401: Optional[pulumi.Input[builtins.str]] = None,
                 status5xx: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] status401: An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        :param pulumi.Input[builtins.str] status5xx: Specify the redirect url for any 500 level status code.
        """
        if status401 is not None:
            pulumi.set(__self__, "status401", status401)
        if status5xx is not None:
            pulumi.set(__self__, "status5xx", status5xx)

    @property
    @pulumi.getter
    def status401(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        """
        return pulumi.get(self, "status401")

    @status401.setter
    def status401(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status401", value)

    @property
    @pulumi.getter
    def status5xx(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specify the redirect url for any 500 level status code.
        """
        return pulumi.get(self, "status5xx")

    @status5xx.setter
    def status5xx(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status5xx", value)


if not MYPY:
    class GvcOtelTracingArgsDict(TypedDict):
        endpoint: pulumi.Input[builtins.str]
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        sampling: pulumi.Input[builtins.float]
        """
        Determines what percentage of requests should be traced.
        """
        custom_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of custom tags.
        """
elif False:
    GvcOtelTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcOtelTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[builtins.str],
                 sampling: pulumi.Input[builtins.float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param pulumi.Input[builtins.float] sampling: Determines what percentage of requests should be traced.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[builtins.float]:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class GvcSidecarArgsDict(TypedDict):
        envoy: pulumi.Input[builtins.str]
elif False:
    GvcSidecarArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GvcSidecarArgs:
    def __init__(__self__, *,
                 envoy: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "envoy", envoy)

    @property
    @pulumi.getter
    def envoy(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "envoy")

    @envoy.setter
    def envoy(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "envoy", value)


if not MYPY:
    class IdentityAwsAccessPolicyArgsDict(TypedDict):
        cloud_account_link: pulumi.Input[builtins.str]
        """
        Full link to referenced cloud account.
        """
        policy_refs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of policies.
        """
        role_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Role name.
        """
        trust_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['IdentityAwsAccessPolicyTrustPolicyArgsDict']]]]
        """
        The trust policy for the role.
        """
elif False:
    IdentityAwsAccessPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityAwsAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[builtins.str],
                 policy_refs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 role_name: Optional[pulumi.Input[builtins.str]] = None,
                 trust_policies: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAwsAccessPolicyTrustPolicyArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] cloud_account_link: Full link to referenced cloud account.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] policy_refs: List of policies.
        :param pulumi.Input[builtins.str] role_name: Role name.
        :param pulumi.Input[Sequence[pulumi.Input['IdentityAwsAccessPolicyTrustPolicyArgs']]] trust_policies: The trust policy for the role.
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if policy_refs is not None:
            pulumi.set(__self__, "policy_refs", policy_refs)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if trust_policies is not None:
            pulumi.set(__self__, "trust_policies", trust_policies)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter(name="policyRefs")
    def policy_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of policies.
        """
        return pulumi.get(self, "policy_refs")

    @policy_refs.setter
    def policy_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "policy_refs", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Role name.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter(name="trustPolicies")
    def trust_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAwsAccessPolicyTrustPolicyArgs']]]]:
        """
        The trust policy for the role.
        """
        return pulumi.get(self, "trust_policies")

    @trust_policies.setter
    def trust_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAwsAccessPolicyTrustPolicyArgs']]]]):
        pulumi.set(self, "trust_policies", value)


if not MYPY:
    class IdentityAwsAccessPolicyTrustPolicyArgsDict(TypedDict):
        statements: NotRequired[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]]
        """
        List of statements.
        """
        version: NotRequired[pulumi.Input[builtins.str]]
        """
        Version of the policy.
        """
elif False:
    IdentityAwsAccessPolicyTrustPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityAwsAccessPolicyTrustPolicyArgs:
    def __init__(__self__, *,
                 statements: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]] statements: List of statements.
        :param pulumi.Input[builtins.str] version: Version of the policy.
        """
        if statements is not None:
            pulumi.set(__self__, "statements", statements)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def statements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]]:
        """
        List of statements.
        """
        return pulumi.get(self, "statements")

    @statements.setter
    def statements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]]):
        pulumi.set(self, "statements", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Version of the policy.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class IdentityAzureAccessPolicyArgsDict(TypedDict):
        cloud_account_link: pulumi.Input[builtins.str]
        """
        Full link to referenced cloud account.
        """
        role_assignments: NotRequired[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgsDict']]]]
        """
        The process of assigning specific roles or permissions to an entity, such as a user or a service principal, within the system.
        """
elif False:
    IdentityAzureAccessPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityAzureAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[builtins.str],
                 role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] cloud_account_link: Full link to referenced cloud account.
        :param pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]] role_assignments: The process of assigning specific roles or permissions to an entity, such as a user or a service principal, within the system.
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if role_assignments is not None:
            pulumi.set(__self__, "role_assignments", role_assignments)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter(name="roleAssignments")
    def role_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]]]:
        """
        The process of assigning specific roles or permissions to an entity, such as a user or a service principal, within the system.
        """
        return pulumi.get(self, "role_assignments")

    @role_assignments.setter
    def role_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]]]):
        pulumi.set(self, "role_assignments", value)


if not MYPY:
    class IdentityAzureAccessPolicyRoleAssignmentArgsDict(TypedDict):
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of assigned roles.
        """
        scope: NotRequired[pulumi.Input[builtins.str]]
        """
        Scope of roles.
        """
elif False:
    IdentityAzureAccessPolicyRoleAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityAzureAccessPolicyRoleAssignmentArgs:
    def __init__(__self__, *,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] roles: List of assigned roles.
        :param pulumi.Input[builtins.str] scope: Scope of roles.
        """
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of assigned roles.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Scope of roles.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class IdentityGcpAccessPolicyArgsDict(TypedDict):
        cloud_account_link: pulumi.Input[builtins.str]
        """
        Full link to referenced cloud account.
        """
        bindings: NotRequired[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgsDict']]]]
        """
        The association or connection between a particular identity, such as a user or a group, and a set of permissions or roles within the system.
        """
        scopes: NotRequired[pulumi.Input[builtins.str]]
        """
        Comma delimited list of GCP scope URLs.
        """
        service_account: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of existing GCP service account.
        """
elif False:
    IdentityGcpAccessPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityGcpAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[builtins.str],
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]]] = None,
                 scopes: Optional[pulumi.Input[builtins.str]] = None,
                 service_account: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cloud_account_link: Full link to referenced cloud account.
        :param pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]] bindings: The association or connection between a particular identity, such as a user or a group, and a set of permissions or roles within the system.
        :param pulumi.Input[builtins.str] scopes: Comma delimited list of GCP scope URLs.
        :param pulumi.Input[builtins.str] service_account: Name of existing GCP service account.
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]]]:
        """
        The association or connection between a particular identity, such as a user or a group, and a set of permissions or roles within the system.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Comma delimited list of GCP scope URLs.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of existing GCP service account.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_account", value)


if not MYPY:
    class IdentityGcpAccessPolicyBindingArgsDict(TypedDict):
        resource: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of resource for binding.
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of allowed roles.
        """
elif False:
    IdentityGcpAccessPolicyBindingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityGcpAccessPolicyBindingArgs:
    def __init__(__self__, *,
                 resource: Optional[pulumi.Input[builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] resource: Name of resource for binding.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] roles: List of allowed roles.
        """
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of resource for binding.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of allowed roles.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "roles", value)


if not MYPY:
    class IdentityNativeNetworkResourceArgsDict(TypedDict):
        fqdn: pulumi.Input[builtins.str]
        """
        Fully qualified domain name.
        """
        name: pulumi.Input[builtins.str]
        """
        Name of the Native Network Resource.
        """
        ports: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]
        """
        Ports to expose. At least one port is required.
        """
        aws_private_link: NotRequired[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgsDict']]
        """
        A feature provided by AWS that enables private connectivity between private VPCs and compute running at Control Plane without traversing the public internet.
        """
        gcp_service_connect: NotRequired[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgsDict']]
        """
        Capability provided by GCP that allows private communication between private VPC networks and compute running at Control Plane.
        """
elif False:
    IdentityNativeNetworkResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNativeNetworkResourceArgs:
    def __init__(__self__, *,
                 fqdn: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 ports: pulumi.Input[Sequence[pulumi.Input[builtins.int]]],
                 aws_private_link: Optional[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs']] = None,
                 gcp_service_connect: Optional[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs']] = None):
        """
        :param pulumi.Input[builtins.str] fqdn: Fully qualified domain name.
        :param pulumi.Input[builtins.str] name: Name of the Native Network Resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] ports: Ports to expose. At least one port is required.
        :param pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs'] aws_private_link: A feature provided by AWS that enables private connectivity between private VPCs and compute running at Control Plane without traversing the public internet.
        :param pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs'] gcp_service_connect: Capability provided by GCP that allows private communication between private VPC networks and compute running at Control Plane.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        if aws_private_link is not None:
            pulumi.set(__self__, "aws_private_link", aws_private_link)
        if gcp_service_connect is not None:
            pulumi.set(__self__, "gcp_service_connect", gcp_service_connect)

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Input[builtins.str]:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the Native Network Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.int]]]:
        """
        Ports to expose. At least one port is required.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="awsPrivateLink")
    def aws_private_link(self) -> Optional[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs']]:
        """
        A feature provided by AWS that enables private connectivity between private VPCs and compute running at Control Plane without traversing the public internet.
        """
        return pulumi.get(self, "aws_private_link")

    @aws_private_link.setter
    def aws_private_link(self, value: Optional[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs']]):
        pulumi.set(self, "aws_private_link", value)

    @property
    @pulumi.getter(name="gcpServiceConnect")
    def gcp_service_connect(self) -> Optional[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs']]:
        """
        Capability provided by GCP that allows private communication between private VPC networks and compute running at Control Plane.
        """
        return pulumi.get(self, "gcp_service_connect")

    @gcp_service_connect.setter
    def gcp_service_connect(self, value: Optional[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs']]):
        pulumi.set(self, "gcp_service_connect", value)


if not MYPY:
    class IdentityNativeNetworkResourceAwsPrivateLinkArgsDict(TypedDict):
        endpoint_service_name: pulumi.Input[builtins.str]
        """
        Endpoint service name.
        """
elif False:
    IdentityNativeNetworkResourceAwsPrivateLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNativeNetworkResourceAwsPrivateLinkArgs:
    def __init__(__self__, *,
                 endpoint_service_name: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] endpoint_service_name: Endpoint service name.
        """
        pulumi.set(__self__, "endpoint_service_name", endpoint_service_name)

    @property
    @pulumi.getter(name="endpointServiceName")
    def endpoint_service_name(self) -> pulumi.Input[builtins.str]:
        """
        Endpoint service name.
        """
        return pulumi.get(self, "endpoint_service_name")

    @endpoint_service_name.setter
    def endpoint_service_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint_service_name", value)


if not MYPY:
    class IdentityNativeNetworkResourceGcpServiceConnectArgsDict(TypedDict):
        target_service: pulumi.Input[builtins.str]
        """
        Target service name.
        """
elif False:
    IdentityNativeNetworkResourceGcpServiceConnectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNativeNetworkResourceGcpServiceConnectArgs:
    def __init__(__self__, *,
                 target_service: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] target_service: Target service name.
        """
        pulumi.set(__self__, "target_service", target_service)

    @property
    @pulumi.getter(name="targetService")
    def target_service(self) -> pulumi.Input[builtins.str]:
        """
        Target service name.
        """
        return pulumi.get(self, "target_service")

    @target_service.setter
    def target_service(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "target_service", value)


if not MYPY:
    class IdentityNetworkResourceArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the Network Resource.
        """
        ports: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]
        """
        Ports to expose.
        """
        agent_link: NotRequired[pulumi.Input[builtins.str]]
        """
        Full link to referenced Agent.
        """
        fqdn: NotRequired[pulumi.Input[builtins.str]]
        """
        Fully qualified domain name.
        """
        ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of IP addresses.
        """
        resolver_ip: NotRequired[pulumi.Input[builtins.str]]
        """
        Resolver IP.
        """
elif False:
    IdentityNetworkResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNetworkResourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 ports: pulumi.Input[Sequence[pulumi.Input[builtins.int]]],
                 agent_link: Optional[pulumi.Input[builtins.str]] = None,
                 fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 resolver_ip: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: Name of the Network Resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] ports: Ports to expose.
        :param pulumi.Input[builtins.str] agent_link: Full link to referenced Agent.
        :param pulumi.Input[builtins.str] fqdn: Fully qualified domain name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ips: List of IP addresses.
        :param pulumi.Input[builtins.str] resolver_ip: Resolver IP.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        if agent_link is not None:
            pulumi.set(__self__, "agent_link", agent_link)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if resolver_ip is not None:
            pulumi.set(__self__, "resolver_ip", resolver_ip)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the Network Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.int]]]:
        """
        Ports to expose.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="agentLink")
    def agent_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Full link to referenced Agent.
        """
        return pulumi.get(self, "agent_link")

    @agent_link.setter
    def agent_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "agent_link", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of IP addresses.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="resolverIp")
    def resolver_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Resolver IP.
        """
        return pulumi.get(self, "resolver_ip")

    @resolver_ip.setter
    def resolver_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resolver_ip", value)


if not MYPY:
    class IdentityNgsAccessPolicyArgsDict(TypedDict):
        cloud_account_link: pulumi.Input[builtins.str]
        """
        Full link to referenced cloud account.
        """
        data: NotRequired[pulumi.Input[builtins.int]]
        """
        Max number of bytes a connection can send. Default: -1
        """
        payload: NotRequired[pulumi.Input[builtins.int]]
        """
        Max message payload. Default: -1
        """
        pub: NotRequired[pulumi.Input['IdentityNgsAccessPolicyPubArgsDict']]
        """
        Pub Permission.
        """
        resp: NotRequired[pulumi.Input['IdentityNgsAccessPolicyRespArgsDict']]
        """
        Reponses.
        """
        sub: NotRequired[pulumi.Input['IdentityNgsAccessPolicySubArgsDict']]
        """
        Sub Permission.
        """
        subs: NotRequired[pulumi.Input[builtins.int]]
        """
        Max number of subscriptions per connection. Default: -1
        """
elif False:
    IdentityNgsAccessPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNgsAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[builtins.str],
                 data: Optional[pulumi.Input[builtins.int]] = None,
                 payload: Optional[pulumi.Input[builtins.int]] = None,
                 pub: Optional[pulumi.Input['IdentityNgsAccessPolicyPubArgs']] = None,
                 resp: Optional[pulumi.Input['IdentityNgsAccessPolicyRespArgs']] = None,
                 sub: Optional[pulumi.Input['IdentityNgsAccessPolicySubArgs']] = None,
                 subs: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] cloud_account_link: Full link to referenced cloud account.
        :param pulumi.Input[builtins.int] data: Max number of bytes a connection can send. Default: -1
        :param pulumi.Input[builtins.int] payload: Max message payload. Default: -1
        :param pulumi.Input['IdentityNgsAccessPolicyPubArgs'] pub: Pub Permission.
        :param pulumi.Input['IdentityNgsAccessPolicyRespArgs'] resp: Reponses.
        :param pulumi.Input['IdentityNgsAccessPolicySubArgs'] sub: Sub Permission.
        :param pulumi.Input[builtins.int] subs: Max number of subscriptions per connection. Default: -1
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if pub is not None:
            pulumi.set(__self__, "pub", pub)
        if resp is not None:
            pulumi.set(__self__, "resp", resp)
        if sub is not None:
            pulumi.set(__self__, "sub", sub)
        if subs is not None:
            pulumi.set(__self__, "subs", subs)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Max number of bytes a connection can send. Default: -1
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Max message payload. Default: -1
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def pub(self) -> Optional[pulumi.Input['IdentityNgsAccessPolicyPubArgs']]:
        """
        Pub Permission.
        """
        return pulumi.get(self, "pub")

    @pub.setter
    def pub(self, value: Optional[pulumi.Input['IdentityNgsAccessPolicyPubArgs']]):
        pulumi.set(self, "pub", value)

    @property
    @pulumi.getter
    def resp(self) -> Optional[pulumi.Input['IdentityNgsAccessPolicyRespArgs']]:
        """
        Reponses.
        """
        return pulumi.get(self, "resp")

    @resp.setter
    def resp(self, value: Optional[pulumi.Input['IdentityNgsAccessPolicyRespArgs']]):
        pulumi.set(self, "resp", value)

    @property
    @pulumi.getter
    def sub(self) -> Optional[pulumi.Input['IdentityNgsAccessPolicySubArgs']]:
        """
        Sub Permission.
        """
        return pulumi.get(self, "sub")

    @sub.setter
    def sub(self, value: Optional[pulumi.Input['IdentityNgsAccessPolicySubArgs']]):
        pulumi.set(self, "sub", value)

    @property
    @pulumi.getter
    def subs(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Max number of subscriptions per connection. Default: -1
        """
        return pulumi.get(self, "subs")

    @subs.setter
    def subs(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "subs", value)


if not MYPY:
    class IdentityNgsAccessPolicyPubArgsDict(TypedDict):
        allows: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of allow subjects.
        """
        denies: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of deny subjects.
        """
elif False:
    IdentityNgsAccessPolicyPubArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNgsAccessPolicyPubArgs:
    def __init__(__self__, *,
                 allows: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 denies: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allows: List of allow subjects.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] denies: List of deny subjects.
        """
        if allows is not None:
            pulumi.set(__self__, "allows", allows)
        if denies is not None:
            pulumi.set(__self__, "denies", denies)

    @property
    @pulumi.getter
    def allows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of allow subjects.
        """
        return pulumi.get(self, "allows")

    @allows.setter
    def allows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allows", value)

    @property
    @pulumi.getter
    def denies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of deny subjects.
        """
        return pulumi.get(self, "denies")

    @denies.setter
    def denies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "denies", value)


if not MYPY:
    class IdentityNgsAccessPolicyRespArgsDict(TypedDict):
        max: NotRequired[pulumi.Input[builtins.int]]
        """
        Number of responses allowed on the replyTo subject, -1 means no limit. Default: -1
        """
        ttl: NotRequired[pulumi.Input[builtins.str]]
        """
        Deadline to send replies on the replyTo subject [#ms(millis) | #s(econds) | m(inutes) | h(ours)]. -1 means no restriction.
        """
elif False:
    IdentityNgsAccessPolicyRespArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNgsAccessPolicyRespArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[builtins.int]] = None,
                 ttl: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] max: Number of responses allowed on the replyTo subject, -1 means no limit. Default: -1
        :param pulumi.Input[builtins.str] ttl: Deadline to send replies on the replyTo subject [#ms(millis) | #s(econds) | m(inutes) | h(ours)]. -1 means no restriction.
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of responses allowed on the replyTo subject, -1 means no limit. Default: -1
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Deadline to send replies on the replyTo subject [#ms(millis) | #s(econds) | m(inutes) | h(ours)]. -1 means no restriction.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ttl", value)


if not MYPY:
    class IdentityNgsAccessPolicySubArgsDict(TypedDict):
        allows: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of allow subjects.
        """
        denies: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of deny subjects.
        """
elif False:
    IdentityNgsAccessPolicySubArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentityNgsAccessPolicySubArgs:
    def __init__(__self__, *,
                 allows: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 denies: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allows: List of allow subjects.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] denies: List of deny subjects.
        """
        if allows is not None:
            pulumi.set(__self__, "allows", allows)
        if denies is not None:
            pulumi.set(__self__, "denies", denies)

    @property
    @pulumi.getter
    def allows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of allow subjects.
        """
        return pulumi.get(self, "allows")

    @allows.setter
    def allows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allows", value)

    @property
    @pulumi.getter
    def denies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of deny subjects.
        """
        return pulumi.get(self, "denies")

    @denies.setter
    def denies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "denies", value)


if not MYPY:
    class IpSetLocationArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The self link of a location.
        """
        retention_policy: pulumi.Input[builtins.str]
elif False:
    IpSetLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpSetLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 retention_policy: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: The self link of a location.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "retention_policy", retention_policy)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The self link of a location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "retention_policy", value)


if not MYPY:
    class IpSetStatusArgsDict(TypedDict):
        error: NotRequired[pulumi.Input[builtins.str]]
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgsDict']]]]
        warning: NotRequired[pulumi.Input[builtins.str]]
elif False:
    IpSetStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpSetStatusArgs:
    def __init__(__self__, *,
                 error: Optional[pulumi.Input[builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgs']]]] = None,
                 warning: Optional[pulumi.Input[builtins.str]] = None):
        if error is not None:
            pulumi.set(__self__, "error", error)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgs']]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgs']]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "warning", value)


if not MYPY:
    class IpSetStatusIpAddressArgsDict(TypedDict):
        created: NotRequired[pulumi.Input[builtins.str]]
        id: NotRequired[pulumi.Input[builtins.str]]
        ip: NotRequired[pulumi.Input[builtins.str]]
        name: NotRequired[pulumi.Input[builtins.str]]
        state: NotRequired[pulumi.Input[builtins.str]]
elif False:
    IpSetStatusIpAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpSetStatusIpAddressArgs:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class LocationGeoArgsDict(TypedDict):
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        City of the location.
        """
        continent: NotRequired[pulumi.Input[builtins.str]]
        """
        Continent of the location.
        """
        country: NotRequired[pulumi.Input[builtins.str]]
        """
        Country of the location.
        """
        lat: NotRequired[pulumi.Input[builtins.float]]
        """
        Latitude of the location.
        """
        lon: NotRequired[pulumi.Input[builtins.float]]
        """
        Longitude of the location.
        """
        state: NotRequired[pulumi.Input[builtins.str]]
        """
        State of the location.
        """
elif False:
    LocationGeoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LocationGeoArgs:
    def __init__(__self__, *,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 continent: Optional[pulumi.Input[builtins.str]] = None,
                 country: Optional[pulumi.Input[builtins.str]] = None,
                 lat: Optional[pulumi.Input[builtins.float]] = None,
                 lon: Optional[pulumi.Input[builtins.float]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] city: City of the location.
        :param pulumi.Input[builtins.str] continent: Continent of the location.
        :param pulumi.Input[builtins.str] country: Country of the location.
        :param pulumi.Input[builtins.float] lat: Latitude of the location.
        :param pulumi.Input[builtins.float] lon: Longitude of the location.
        :param pulumi.Input[builtins.str] state: State of the location.
        """
        if city is not None:
            pulumi.set(__self__, "city", city)
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if lat is not None:
            pulumi.set(__self__, "lat", lat)
        if lon is not None:
            pulumi.set(__self__, "lon", lon)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        City of the location.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def continent(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Continent of the location.
        """
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "continent", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Country of the location.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def lat(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Latitude of the location.
        """
        return pulumi.get(self, "lat")

    @lat.setter
    def lat(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "lat", value)

    @property
    @pulumi.getter
    def lon(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Longitude of the location.
        """
        return pulumi.get(self, "lon")

    @lon.setter
    def lon(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "lon", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        State of the location.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class Mk8sAddOnsArgsDict(TypedDict):
        aws_ecr: NotRequired[pulumi.Input['Mk8sAddOnsAwsEcrArgsDict']]
        aws_efs: NotRequired[pulumi.Input['Mk8sAddOnsAwsEfsArgsDict']]
        aws_elb: NotRequired[pulumi.Input['Mk8sAddOnsAwsElbArgsDict']]
        aws_workload_identity: NotRequired[pulumi.Input[builtins.bool]]
        azure_acr: NotRequired[pulumi.Input['Mk8sAddOnsAzureAcrArgsDict']]
        azure_workload_identity: NotRequired[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgsDict']]
        dashboard: NotRequired[pulumi.Input[builtins.bool]]
        local_path_storage: NotRequired[pulumi.Input[builtins.bool]]
        logs: NotRequired[pulumi.Input['Mk8sAddOnsLogsArgsDict']]
        metrics: NotRequired[pulumi.Input['Mk8sAddOnsMetricsArgsDict']]
        """
        Scrape pods annotated with prometheus.io/scrape=true
        """
        nvidia: NotRequired[pulumi.Input['Mk8sAddOnsNvidiaArgsDict']]
        registry_mirror: NotRequired[pulumi.Input['Mk8sAddOnsRegistryMirrorArgsDict']]
        sysbox: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    Mk8sAddOnsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsArgs:
    def __init__(__self__, *,
                 aws_ecr: Optional[pulumi.Input['Mk8sAddOnsAwsEcrArgs']] = None,
                 aws_efs: Optional[pulumi.Input['Mk8sAddOnsAwsEfsArgs']] = None,
                 aws_elb: Optional[pulumi.Input['Mk8sAddOnsAwsElbArgs']] = None,
                 aws_workload_identity: Optional[pulumi.Input[builtins.bool]] = None,
                 azure_acr: Optional[pulumi.Input['Mk8sAddOnsAzureAcrArgs']] = None,
                 azure_workload_identity: Optional[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgs']] = None,
                 dashboard: Optional[pulumi.Input[builtins.bool]] = None,
                 local_path_storage: Optional[pulumi.Input[builtins.bool]] = None,
                 logs: Optional[pulumi.Input['Mk8sAddOnsLogsArgs']] = None,
                 metrics: Optional[pulumi.Input['Mk8sAddOnsMetricsArgs']] = None,
                 nvidia: Optional[pulumi.Input['Mk8sAddOnsNvidiaArgs']] = None,
                 registry_mirror: Optional[pulumi.Input['Mk8sAddOnsRegistryMirrorArgs']] = None,
                 sysbox: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input['Mk8sAddOnsMetricsArgs'] metrics: Scrape pods annotated with prometheus.io/scrape=true
        """
        if aws_ecr is not None:
            pulumi.set(__self__, "aws_ecr", aws_ecr)
        if aws_efs is not None:
            pulumi.set(__self__, "aws_efs", aws_efs)
        if aws_elb is not None:
            pulumi.set(__self__, "aws_elb", aws_elb)
        if aws_workload_identity is not None:
            pulumi.set(__self__, "aws_workload_identity", aws_workload_identity)
        if azure_acr is not None:
            pulumi.set(__self__, "azure_acr", azure_acr)
        if azure_workload_identity is not None:
            pulumi.set(__self__, "azure_workload_identity", azure_workload_identity)
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if local_path_storage is not None:
            pulumi.set(__self__, "local_path_storage", local_path_storage)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if nvidia is not None:
            pulumi.set(__self__, "nvidia", nvidia)
        if registry_mirror is not None:
            pulumi.set(__self__, "registry_mirror", registry_mirror)
        if sysbox is not None:
            pulumi.set(__self__, "sysbox", sysbox)

    @property
    @pulumi.getter(name="awsEcr")
    def aws_ecr(self) -> Optional[pulumi.Input['Mk8sAddOnsAwsEcrArgs']]:
        return pulumi.get(self, "aws_ecr")

    @aws_ecr.setter
    def aws_ecr(self, value: Optional[pulumi.Input['Mk8sAddOnsAwsEcrArgs']]):
        pulumi.set(self, "aws_ecr", value)

    @property
    @pulumi.getter(name="awsEfs")
    def aws_efs(self) -> Optional[pulumi.Input['Mk8sAddOnsAwsEfsArgs']]:
        return pulumi.get(self, "aws_efs")

    @aws_efs.setter
    def aws_efs(self, value: Optional[pulumi.Input['Mk8sAddOnsAwsEfsArgs']]):
        pulumi.set(self, "aws_efs", value)

    @property
    @pulumi.getter(name="awsElb")
    def aws_elb(self) -> Optional[pulumi.Input['Mk8sAddOnsAwsElbArgs']]:
        return pulumi.get(self, "aws_elb")

    @aws_elb.setter
    def aws_elb(self, value: Optional[pulumi.Input['Mk8sAddOnsAwsElbArgs']]):
        pulumi.set(self, "aws_elb", value)

    @property
    @pulumi.getter(name="awsWorkloadIdentity")
    def aws_workload_identity(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "aws_workload_identity")

    @aws_workload_identity.setter
    def aws_workload_identity(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "aws_workload_identity", value)

    @property
    @pulumi.getter(name="azureAcr")
    def azure_acr(self) -> Optional[pulumi.Input['Mk8sAddOnsAzureAcrArgs']]:
        return pulumi.get(self, "azure_acr")

    @azure_acr.setter
    def azure_acr(self, value: Optional[pulumi.Input['Mk8sAddOnsAzureAcrArgs']]):
        pulumi.set(self, "azure_acr", value)

    @property
    @pulumi.getter(name="azureWorkloadIdentity")
    def azure_workload_identity(self) -> Optional[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgs']]:
        return pulumi.get(self, "azure_workload_identity")

    @azure_workload_identity.setter
    def azure_workload_identity(self, value: Optional[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgs']]):
        pulumi.set(self, "azure_workload_identity", value)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dashboard")

    @dashboard.setter
    def dashboard(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dashboard", value)

    @property
    @pulumi.getter(name="localPathStorage")
    def local_path_storage(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "local_path_storage")

    @local_path_storage.setter
    def local_path_storage(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "local_path_storage", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input['Mk8sAddOnsLogsArgs']]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input['Mk8sAddOnsLogsArgs']]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['Mk8sAddOnsMetricsArgs']]:
        """
        Scrape pods annotated with prometheus.io/scrape=true
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['Mk8sAddOnsMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def nvidia(self) -> Optional[pulumi.Input['Mk8sAddOnsNvidiaArgs']]:
        return pulumi.get(self, "nvidia")

    @nvidia.setter
    def nvidia(self, value: Optional[pulumi.Input['Mk8sAddOnsNvidiaArgs']]):
        pulumi.set(self, "nvidia", value)

    @property
    @pulumi.getter(name="registryMirror")
    def registry_mirror(self) -> Optional[pulumi.Input['Mk8sAddOnsRegistryMirrorArgs']]:
        return pulumi.get(self, "registry_mirror")

    @registry_mirror.setter
    def registry_mirror(self, value: Optional[pulumi.Input['Mk8sAddOnsRegistryMirrorArgs']]):
        pulumi.set(self, "registry_mirror", value)

    @property
    @pulumi.getter
    def sysbox(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sysbox")

    @sysbox.setter
    def sysbox(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sysbox", value)


if not MYPY:
    class Mk8sAddOnsAwsEcrArgsDict(TypedDict):
        role_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        Role to use when authorizing ECR pulls. Optional on AWS, in which case it will use the instance role to pull.
        """
elif False:
    Mk8sAddOnsAwsEcrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsAwsEcrArgs:
    def __init__(__self__, *,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] role_arn: Role to use when authorizing ECR pulls. Optional on AWS, in which case it will use the instance role to pull.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Role to use when authorizing ECR pulls. Optional on AWS, in which case it will use the instance role to pull.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_arn", value)


if not MYPY:
    class Mk8sAddOnsAwsEfsArgsDict(TypedDict):
        role_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        Use this role for EFS interaction.
        """
elif False:
    Mk8sAddOnsAwsEfsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsAwsEfsArgs:
    def __init__(__self__, *,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] role_arn: Use this role for EFS interaction.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Use this role for EFS interaction.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_arn", value)


if not MYPY:
    class Mk8sAddOnsAwsElbArgsDict(TypedDict):
        role_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        Role to use when authorizing calls to EC2 ELB. Optional on AWS, when not provided it will create the recommended role.
        """
elif False:
    Mk8sAddOnsAwsElbArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsAwsElbArgs:
    def __init__(__self__, *,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] role_arn: Role to use when authorizing calls to EC2 ELB. Optional on AWS, when not provided it will create the recommended role.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Role to use when authorizing calls to EC2 ELB. Optional on AWS, when not provided it will create the recommended role.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_arn", value)


if not MYPY:
    class Mk8sAddOnsAzureAcrArgsDict(TypedDict):
        client_id: pulumi.Input[builtins.str]
elif False:
    Mk8sAddOnsAzureAcrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsAzureAcrArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "client_id", client_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "client_id", value)


if not MYPY:
    class Mk8sAddOnsAzureWorkloadIdentityArgsDict(TypedDict):
        tenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Tenant ID to use for workload identity.
        """
elif False:
    Mk8sAddOnsAzureWorkloadIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsAzureWorkloadIdentityArgs:
    def __init__(__self__, *,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] tenant_id: Tenant ID to use for workload identity.
        """
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tenant ID to use for workload identity.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class Mk8sAddOnsLogsArgsDict(TypedDict):
        audit_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Collect k8s audit log as log events.
        """
        docker: NotRequired[pulumi.Input[builtins.bool]]
        """
        Collect docker logs if docker is also running.
        """
        events: NotRequired[pulumi.Input[builtins.bool]]
        """
        Collect K8S events from all namespaces.
        """
        exclude_namespaces: NotRequired[pulumi.Input[builtins.str]]
        include_namespaces: NotRequired[pulumi.Input[builtins.str]]
        kernel: NotRequired[pulumi.Input[builtins.bool]]
        """
        Collect kernel logs.
        """
        kubelet: NotRequired[pulumi.Input[builtins.bool]]
        """
        Collect kubelet logs from journald.
        """
elif False:
    Mk8sAddOnsLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsLogsArgs:
    def __init__(__self__, *,
                 audit_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 docker: Optional[pulumi.Input[builtins.bool]] = None,
                 events: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_namespaces: Optional[pulumi.Input[builtins.str]] = None,
                 include_namespaces: Optional[pulumi.Input[builtins.str]] = None,
                 kernel: Optional[pulumi.Input[builtins.bool]] = None,
                 kubelet: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.bool] audit_enabled: Collect k8s audit log as log events.
        :param pulumi.Input[builtins.bool] docker: Collect docker logs if docker is also running.
        :param pulumi.Input[builtins.bool] events: Collect K8S events from all namespaces.
        :param pulumi.Input[builtins.bool] kernel: Collect kernel logs.
        :param pulumi.Input[builtins.bool] kubelet: Collect kubelet logs from journald.
        """
        if audit_enabled is not None:
            pulumi.set(__self__, "audit_enabled", audit_enabled)
        if docker is not None:
            pulumi.set(__self__, "docker", docker)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if exclude_namespaces is not None:
            pulumi.set(__self__, "exclude_namespaces", exclude_namespaces)
        if include_namespaces is not None:
            pulumi.set(__self__, "include_namespaces", include_namespaces)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if kubelet is not None:
            pulumi.set(__self__, "kubelet", kubelet)

    @property
    @pulumi.getter(name="auditEnabled")
    def audit_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Collect k8s audit log as log events.
        """
        return pulumi.get(self, "audit_enabled")

    @audit_enabled.setter
    def audit_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "audit_enabled", value)

    @property
    @pulumi.getter
    def docker(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Collect docker logs if docker is also running.
        """
        return pulumi.get(self, "docker")

    @docker.setter
    def docker(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "docker", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Collect K8S events from all namespaces.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="excludeNamespaces")
    def exclude_namespaces(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "exclude_namespaces")

    @exclude_namespaces.setter
    def exclude_namespaces(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exclude_namespaces", value)

    @property
    @pulumi.getter(name="includeNamespaces")
    def include_namespaces(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "include_namespaces")

    @include_namespaces.setter
    def include_namespaces(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "include_namespaces", value)

    @property
    @pulumi.getter
    def kernel(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Collect kernel logs.
        """
        return pulumi.get(self, "kernel")

    @kernel.setter
    def kernel(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "kernel", value)

    @property
    @pulumi.getter
    def kubelet(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Collect kubelet logs from journald.
        """
        return pulumi.get(self, "kubelet")

    @kubelet.setter
    def kubelet(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "kubelet", value)


if not MYPY:
    class Mk8sAddOnsMetricsArgsDict(TypedDict):
        api_server: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable scraping apiserver stats.
        """
        cadvisor: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable CNI-level container stats.
        """
        core_dns: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable scraping of core-dns service.
        """
        kube_state: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable kube-state metrics.
        """
        kubelet: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable scraping kubelet stats.
        """
        node_exporter: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable collecting node-level stats (disk, network, filesystem, etc).
        """
        scrape_annotated: NotRequired[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgsDict']]
elif False:
    Mk8sAddOnsMetricsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsMetricsArgs:
    def __init__(__self__, *,
                 api_server: Optional[pulumi.Input[builtins.bool]] = None,
                 cadvisor: Optional[pulumi.Input[builtins.bool]] = None,
                 core_dns: Optional[pulumi.Input[builtins.bool]] = None,
                 kube_state: Optional[pulumi.Input[builtins.bool]] = None,
                 kubelet: Optional[pulumi.Input[builtins.bool]] = None,
                 node_exporter: Optional[pulumi.Input[builtins.bool]] = None,
                 scrape_annotated: Optional[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgs']] = None):
        """
        :param pulumi.Input[builtins.bool] api_server: Enable scraping apiserver stats.
        :param pulumi.Input[builtins.bool] cadvisor: Enable CNI-level container stats.
        :param pulumi.Input[builtins.bool] core_dns: Enable scraping of core-dns service.
        :param pulumi.Input[builtins.bool] kube_state: Enable kube-state metrics.
        :param pulumi.Input[builtins.bool] kubelet: Enable scraping kubelet stats.
        :param pulumi.Input[builtins.bool] node_exporter: Enable collecting node-level stats (disk, network, filesystem, etc).
        """
        if api_server is not None:
            pulumi.set(__self__, "api_server", api_server)
        if cadvisor is not None:
            pulumi.set(__self__, "cadvisor", cadvisor)
        if core_dns is not None:
            pulumi.set(__self__, "core_dns", core_dns)
        if kube_state is not None:
            pulumi.set(__self__, "kube_state", kube_state)
        if kubelet is not None:
            pulumi.set(__self__, "kubelet", kubelet)
        if node_exporter is not None:
            pulumi.set(__self__, "node_exporter", node_exporter)
        if scrape_annotated is not None:
            pulumi.set(__self__, "scrape_annotated", scrape_annotated)

    @property
    @pulumi.getter(name="apiServer")
    def api_server(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable scraping apiserver stats.
        """
        return pulumi.get(self, "api_server")

    @api_server.setter
    def api_server(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "api_server", value)

    @property
    @pulumi.getter
    def cadvisor(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable CNI-level container stats.
        """
        return pulumi.get(self, "cadvisor")

    @cadvisor.setter
    def cadvisor(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cadvisor", value)

    @property
    @pulumi.getter(name="coreDns")
    def core_dns(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable scraping of core-dns service.
        """
        return pulumi.get(self, "core_dns")

    @core_dns.setter
    def core_dns(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "core_dns", value)

    @property
    @pulumi.getter(name="kubeState")
    def kube_state(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable kube-state metrics.
        """
        return pulumi.get(self, "kube_state")

    @kube_state.setter
    def kube_state(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "kube_state", value)

    @property
    @pulumi.getter
    def kubelet(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable scraping kubelet stats.
        """
        return pulumi.get(self, "kubelet")

    @kubelet.setter
    def kubelet(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "kubelet", value)

    @property
    @pulumi.getter(name="nodeExporter")
    def node_exporter(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable collecting node-level stats (disk, network, filesystem, etc).
        """
        return pulumi.get(self, "node_exporter")

    @node_exporter.setter
    def node_exporter(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "node_exporter", value)

    @property
    @pulumi.getter(name="scrapeAnnotated")
    def scrape_annotated(self) -> Optional[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgs']]:
        return pulumi.get(self, "scrape_annotated")

    @scrape_annotated.setter
    def scrape_annotated(self, value: Optional[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgs']]):
        pulumi.set(self, "scrape_annotated", value)


if not MYPY:
    class Mk8sAddOnsMetricsScrapeAnnotatedArgsDict(TypedDict):
        exclude_namespaces: NotRequired[pulumi.Input[builtins.str]]
        include_namespaces: NotRequired[pulumi.Input[builtins.str]]
        interval_seconds: NotRequired[pulumi.Input[builtins.int]]
        retain_labels: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sAddOnsMetricsScrapeAnnotatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsMetricsScrapeAnnotatedArgs:
    def __init__(__self__, *,
                 exclude_namespaces: Optional[pulumi.Input[builtins.str]] = None,
                 include_namespaces: Optional[pulumi.Input[builtins.str]] = None,
                 interval_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 retain_labels: Optional[pulumi.Input[builtins.str]] = None):
        if exclude_namespaces is not None:
            pulumi.set(__self__, "exclude_namespaces", exclude_namespaces)
        if include_namespaces is not None:
            pulumi.set(__self__, "include_namespaces", include_namespaces)
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if retain_labels is not None:
            pulumi.set(__self__, "retain_labels", retain_labels)

    @property
    @pulumi.getter(name="excludeNamespaces")
    def exclude_namespaces(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "exclude_namespaces")

    @exclude_namespaces.setter
    def exclude_namespaces(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exclude_namespaces", value)

    @property
    @pulumi.getter(name="includeNamespaces")
    def include_namespaces(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "include_namespaces")

    @include_namespaces.setter
    def include_namespaces(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "include_namespaces", value)

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "interval_seconds")

    @interval_seconds.setter
    def interval_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interval_seconds", value)

    @property
    @pulumi.getter(name="retainLabels")
    def retain_labels(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "retain_labels")

    @retain_labels.setter
    def retain_labels(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "retain_labels", value)


if not MYPY:
    class Mk8sAddOnsNvidiaArgsDict(TypedDict):
        taint_gpu_nodes: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    Mk8sAddOnsNvidiaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsNvidiaArgs:
    def __init__(__self__, *,
                 taint_gpu_nodes: Optional[pulumi.Input[builtins.bool]] = None):
        if taint_gpu_nodes is not None:
            pulumi.set(__self__, "taint_gpu_nodes", taint_gpu_nodes)

    @property
    @pulumi.getter(name="taintGpuNodes")
    def taint_gpu_nodes(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "taint_gpu_nodes")

    @taint_gpu_nodes.setter
    def taint_gpu_nodes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "taint_gpu_nodes", value)


if not MYPY:
    class Mk8sAddOnsRegistryMirrorArgsDict(TypedDict):
        mirrors: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sAddOnsRegistryMirrorMirrorArgsDict']]]]
elif False:
    Mk8sAddOnsRegistryMirrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsRegistryMirrorArgs:
    def __init__(__self__, *,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAddOnsRegistryMirrorMirrorArgs']]]] = None):
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAddOnsRegistryMirrorMirrorArgs']]]]:
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAddOnsRegistryMirrorMirrorArgs']]]]):
        pulumi.set(self, "mirrors", value)


if not MYPY:
    class Mk8sAddOnsRegistryMirrorMirrorArgsDict(TypedDict):
        registry: pulumi.Input[builtins.str]
        mirrors: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    Mk8sAddOnsRegistryMirrorMirrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAddOnsRegistryMirrorMirrorArgs:
    def __init__(__self__, *,
                 registry: pulumi.Input[builtins.str],
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        pulumi.set(__self__, "registry", registry)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "mirrors", value)


if not MYPY:
    class Mk8sAwsProviderArgsDict(TypedDict):
        deploy_role_arn: pulumi.Input[builtins.str]
        """
        Control Plane will set up the cluster by assuming this role.
        """
        region: pulumi.Input[builtins.str]
        """
        Region where the cluster nodes will live.
        """
        vpc_id: pulumi.Input[builtins.str]
        """
        The vpc where nodes will be deployed. Supports SSM.
        """
        autoscaler: NotRequired[pulumi.Input['Mk8sAwsProviderAutoscalerArgsDict']]
        aws_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Extra tags to attach to all created objects.
        """
        deploy_role_chains: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgsDict']]]]
        disk_encryption_key_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        KMS key used to encrypt volumes. Supports SSM.
        """
        extra_node_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        image: NotRequired[pulumi.Input['Mk8sAwsProviderImageArgsDict']]
        """
        Default image for all nodes.
        """
        key_pair: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of keyPair. Supports SSM
        """
        networking: NotRequired[pulumi.Input['Mk8sAwsProviderNetworkingArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        security_group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        """
        skip_create_roles: NotRequired[pulumi.Input[builtins.bool]]
        """
        If true, Control Plane will not create any roles.
        """
elif False:
    Mk8sAwsProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderArgs:
    def __init__(__self__, *,
                 deploy_role_arn: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sAwsProviderAutoscalerArgs']] = None,
                 aws_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 deploy_role_chains: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgs']]]] = None,
                 disk_encryption_key_arn: Optional[pulumi.Input[builtins.str]] = None,
                 extra_node_policies: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 image: Optional[pulumi.Input['Mk8sAwsProviderImageArgs']] = None,
                 key_pair: Optional[pulumi.Input[builtins.str]] = None,
                 networking: Optional[pulumi.Input['Mk8sAwsProviderNetworkingArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 skip_create_roles: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] deploy_role_arn: Control Plane will set up the cluster by assuming this role.
        :param pulumi.Input[builtins.str] region: Region where the cluster nodes will live.
        :param pulumi.Input[builtins.str] vpc_id: The vpc where nodes will be deployed. Supports SSM.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] aws_tags: Extra tags to attach to all created objects.
        :param pulumi.Input[builtins.str] disk_encryption_key_arn: KMS key used to encrypt volumes. Supports SSM.
        :param pulumi.Input['Mk8sAwsProviderImageArgs'] image: Default image for all nodes.
        :param pulumi.Input[builtins.str] key_pair: Name of keyPair. Supports SSM
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]] node_pools: List of node pools.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        :param pulumi.Input[builtins.bool] skip_create_roles: If true, Control Plane will not create any roles.
        """
        pulumi.set(__self__, "deploy_role_arn", deploy_role_arn)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if aws_tags is not None:
            pulumi.set(__self__, "aws_tags", aws_tags)
        if deploy_role_chains is not None:
            pulumi.set(__self__, "deploy_role_chains", deploy_role_chains)
        if disk_encryption_key_arn is not None:
            pulumi.set(__self__, "disk_encryption_key_arn", disk_encryption_key_arn)
        if extra_node_policies is not None:
            pulumi.set(__self__, "extra_node_policies", extra_node_policies)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if key_pair is not None:
            pulumi.set(__self__, "key_pair", key_pair)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if skip_create_roles is not None:
            pulumi.set(__self__, "skip_create_roles", skip_create_roles)

    @property
    @pulumi.getter(name="deployRoleArn")
    def deploy_role_arn(self) -> pulumi.Input[builtins.str]:
        """
        Control Plane will set up the cluster by assuming this role.
        """
        return pulumi.get(self, "deploy_role_arn")

    @deploy_role_arn.setter
    def deploy_role_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "deploy_role_arn", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        """
        The vpc where nodes will be deployed. Supports SSM.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sAwsProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sAwsProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="awsTags")
    def aws_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Extra tags to attach to all created objects.
        """
        return pulumi.get(self, "aws_tags")

    @aws_tags.setter
    def aws_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "aws_tags", value)

    @property
    @pulumi.getter(name="deployRoleChains")
    def deploy_role_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgs']]]]:
        return pulumi.get(self, "deploy_role_chains")

    @deploy_role_chains.setter
    def deploy_role_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgs']]]]):
        pulumi.set(self, "deploy_role_chains", value)

    @property
    @pulumi.getter(name="diskEncryptionKeyArn")
    def disk_encryption_key_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        KMS key used to encrypt volumes. Supports SSM.
        """
        return pulumi.get(self, "disk_encryption_key_arn")

    @disk_encryption_key_arn.setter
    def disk_encryption_key_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "disk_encryption_key_arn", value)

    @property
    @pulumi.getter(name="extraNodePolicies")
    def extra_node_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "extra_node_policies")

    @extra_node_policies.setter
    def extra_node_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "extra_node_policies", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['Mk8sAwsProviderImageArgs']]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['Mk8sAwsProviderImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of keyPair. Supports SSM
        """
        return pulumi.get(self, "key_pair")

    @key_pair.setter
    def key_pair(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_pair", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['Mk8sAwsProviderNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['Mk8sAwsProviderNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="skipCreateRoles")
    def skip_create_roles(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If true, Control Plane will not create any roles.
        """
        return pulumi.get(self, "skip_create_roles")

    @skip_create_roles.setter
    def skip_create_roles(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "skip_create_roles", value)


if not MYPY:
    class Mk8sAwsProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sAwsProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sAwsProviderDeployRoleChainArgsDict(TypedDict):
        role_arn: pulumi.Input[builtins.str]
        external_id: NotRequired[pulumi.Input[builtins.str]]
        session_name_prefix: NotRequired[pulumi.Input[builtins.str]]
        """
        Control Plane will set up the cluster by assuming this role.
        """
elif False:
    Mk8sAwsProviderDeployRoleChainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderDeployRoleChainArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[builtins.str],
                 external_id: Optional[pulumi.Input[builtins.str]] = None,
                 session_name_prefix: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] session_name_prefix: Control Plane will set up the cluster by assuming this role.
        """
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if session_name_prefix is not None:
            pulumi.set(__self__, "session_name_prefix", session_name_prefix)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="sessionNamePrefix")
    def session_name_prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Control Plane will set up the cluster by assuming this role.
        """
        return pulumi.get(self, "session_name_prefix")

    @session_name_prefix.setter
    def session_name_prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "session_name_prefix", value)


if not MYPY:
    class Mk8sAwsProviderImageArgsDict(TypedDict):
        exact: NotRequired[pulumi.Input[builtins.str]]
        """
        Support SSM.
        """
        recommended: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sAwsProviderImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderImageArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[builtins.str]] = None,
                 recommended: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] exact: Support SSM.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Support SSM.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def recommended(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "recommended")

    @recommended.setter
    def recommended(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "recommended", value)


if not MYPY:
    class Mk8sAwsProviderNetworkingArgsDict(TypedDict):
        dns_forwarder: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        pod_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the pod network.
        """
        service_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the service network.
        """
elif False:
    Mk8sAwsProviderNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderNetworkingArgs:
    def __init__(__self__, *,
                 dns_forwarder: Optional[pulumi.Input[builtins.str]] = None,
                 pod_network: Optional[pulumi.Input[builtins.str]] = None,
                 service_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param pulumi.Input[builtins.str] pod_network: The CIDR of the pod network.
        :param pulumi.Input[builtins.str] service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @dns_forwarder.setter
    def dns_forwarder(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_forwarder", value)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network", value)


if not MYPY:
    class Mk8sAwsProviderNodePoolArgsDict(TypedDict):
        instance_types: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        name: pulumi.Input[builtins.str]
        subnet_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        boot_disk_size: NotRequired[pulumi.Input[builtins.int]]
        """
        Size in GB.
        """
        extra_security_group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        on_demand_base_capacity: NotRequired[pulumi.Input[builtins.int]]
        on_demand_percentage_above_base_capacity: NotRequired[pulumi.Input[builtins.int]]
        override_image: NotRequired[pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgsDict']]
        """
        Default image for all nodes.
        """
        spot_allocation_strategy: NotRequired[pulumi.Input[builtins.str]]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sAwsProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderNodePoolArgs:
    def __init__(__self__, *,
                 instance_types: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 name: pulumi.Input[builtins.str],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 boot_disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 extra_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 on_demand_base_capacity: Optional[pulumi.Input[builtins.int]] = None,
                 on_demand_percentage_above_base_capacity: Optional[pulumi.Input[builtins.int]] = None,
                 override_image: Optional[pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs']] = None,
                 spot_allocation_strategy: Optional[pulumi.Input[builtins.str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[builtins.int] boot_disk_size: Size in GB.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] extra_security_group_ids: Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs'] override_image: Default image for all nodes.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if boot_disk_size is not None:
            pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        if extra_security_group_ids is not None:
            pulumi.set(__self__, "extra_security_group_ids", extra_security_group_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if on_demand_base_capacity is not None:
            pulumi.set(__self__, "on_demand_base_capacity", on_demand_base_capacity)
        if on_demand_percentage_above_base_capacity is not None:
            pulumi.set(__self__, "on_demand_percentage_above_base_capacity", on_demand_percentage_above_base_capacity)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if spot_allocation_strategy is not None:
            pulumi.set(__self__, "spot_allocation_strategy", spot_allocation_strategy)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "instance_types", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Size in GB.
        """
        return pulumi.get(self, "boot_disk_size")

    @boot_disk_size.setter
    def boot_disk_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "boot_disk_size", value)

    @property
    @pulumi.getter(name="extraSecurityGroupIds")
    def extra_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        """
        return pulumi.get(self, "extra_security_group_ids")

    @extra_security_group_ids.setter
    def extra_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "extra_security_group_ids", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="onDemandBaseCapacity")
    def on_demand_base_capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "on_demand_base_capacity")

    @on_demand_base_capacity.setter
    def on_demand_base_capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "on_demand_base_capacity", value)

    @property
    @pulumi.getter(name="onDemandPercentageAboveBaseCapacity")
    def on_demand_percentage_above_base_capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "on_demand_percentage_above_base_capacity")

    @on_demand_percentage_above_base_capacity.setter
    def on_demand_percentage_above_base_capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "on_demand_percentage_above_base_capacity", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs']]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs']]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter(name="spotAllocationStrategy")
    def spot_allocation_strategy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "spot_allocation_strategy")

    @spot_allocation_strategy.setter
    def spot_allocation_strategy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "spot_allocation_strategy", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sAwsProviderNodePoolOverrideImageArgsDict(TypedDict):
        exact: NotRequired[pulumi.Input[builtins.str]]
        """
        Support SSM.
        """
        recommended: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sAwsProviderNodePoolOverrideImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderNodePoolOverrideImageArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[builtins.str]] = None,
                 recommended: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] exact: Support SSM.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Support SSM.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def recommended(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "recommended")

    @recommended.setter
    def recommended(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "recommended", value)


if not MYPY:
    class Mk8sAwsProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sAwsProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAwsProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sAzureProviderArgsDict(TypedDict):
        location: pulumi.Input[builtins.str]
        """
        Region where the cluster nodes will live.
        """
        network_id: pulumi.Input[builtins.str]
        """
        The vpc where nodes will be deployed.
        """
        resource_group: pulumi.Input[builtins.str]
        sdk_secret_link: pulumi.Input[builtins.str]
        ssh_keys: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        SSH keys to install for "azureuser" linux user
        """
        subscription_id: pulumi.Input[builtins.str]
        autoscaler: NotRequired[pulumi.Input['Mk8sAzureProviderAutoscalerArgsDict']]
        image: NotRequired[pulumi.Input['Mk8sAzureProviderImageArgsDict']]
        """
        Default image for all nodes.
        """
        networking: NotRequired[pulumi.Input['Mk8sAzureProviderNetworkingArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolArgsDict']]]]
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Extra tags to attach to all created objects.
        """
elif False:
    Mk8sAzureProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[builtins.str],
                 network_id: pulumi.Input[builtins.str],
                 resource_group: pulumi.Input[builtins.str],
                 sdk_secret_link: pulumi.Input[builtins.str],
                 ssh_keys: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 subscription_id: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sAzureProviderAutoscalerArgs']] = None,
                 image: Optional[pulumi.Input['Mk8sAzureProviderImageArgs']] = None,
                 networking: Optional[pulumi.Input['Mk8sAzureProviderNetworkingArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] location: Region where the cluster nodes will live.
        :param pulumi.Input[builtins.str] network_id: The vpc where nodes will be deployed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ssh_keys: SSH keys to install for "azureuser" linux user
        :param pulumi.Input['Mk8sAzureProviderImageArgs'] image: Default image for all nodes.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Extra tags to attach to all created objects.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "sdk_secret_link", sdk_secret_link)
        pulumi.set(__self__, "ssh_keys", ssh_keys)
        pulumi.set(__self__, "subscription_id", subscription_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[builtins.str]:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[builtins.str]:
        """
        The vpc where nodes will be deployed.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="sdkSecretLink")
    def sdk_secret_link(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "sdk_secret_link")

    @sdk_secret_link.setter
    def sdk_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sdk_secret_link", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        SSH keys to install for "azureuser" linux user
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sAzureProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sAzureProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['Mk8sAzureProviderImageArgs']]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['Mk8sAzureProviderImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['Mk8sAzureProviderNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['Mk8sAzureProviderNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Extra tags to attach to all created objects.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class Mk8sAzureProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sAzureProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sAzureProviderImageArgsDict(TypedDict):
        recommended: NotRequired[pulumi.Input[builtins.str]]
        reference: NotRequired[pulumi.Input['Mk8sAzureProviderImageReferenceArgsDict']]
elif False:
    Mk8sAzureProviderImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderImageArgs:
    def __init__(__self__, *,
                 recommended: Optional[pulumi.Input[builtins.str]] = None,
                 reference: Optional[pulumi.Input['Mk8sAzureProviderImageReferenceArgs']] = None):
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)

    @property
    @pulumi.getter
    def recommended(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "recommended")

    @recommended.setter
    def recommended(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "recommended", value)

    @property
    @pulumi.getter
    def reference(self) -> Optional[pulumi.Input['Mk8sAzureProviderImageReferenceArgs']]:
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: Optional[pulumi.Input['Mk8sAzureProviderImageReferenceArgs']]):
        pulumi.set(self, "reference", value)


if not MYPY:
    class Mk8sAzureProviderImageReferenceArgsDict(TypedDict):
        offer: pulumi.Input[builtins.str]
        publisher: pulumi.Input[builtins.str]
        sku: pulumi.Input[builtins.str]
        version: pulumi.Input[builtins.str]
elif False:
    Mk8sAzureProviderImageReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderImageReferenceArgs:
    def __init__(__self__, *,
                 offer: pulumi.Input[builtins.str],
                 publisher: pulumi.Input[builtins.str],
                 sku: pulumi.Input[builtins.str],
                 version: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def offer(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "offer", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class Mk8sAzureProviderNetworkingArgsDict(TypedDict):
        dns_forwarder: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        pod_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the pod network.
        """
        service_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the service network.
        """
elif False:
    Mk8sAzureProviderNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderNetworkingArgs:
    def __init__(__self__, *,
                 dns_forwarder: Optional[pulumi.Input[builtins.str]] = None,
                 pod_network: Optional[pulumi.Input[builtins.str]] = None,
                 service_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param pulumi.Input[builtins.str] pod_network: The CIDR of the pod network.
        :param pulumi.Input[builtins.str] service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @dns_forwarder.setter
    def dns_forwarder(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_forwarder", value)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network", value)


if not MYPY:
    class Mk8sAzureProviderNodePoolArgsDict(TypedDict):
        boot_disk_size: pulumi.Input[builtins.int]
        name: pulumi.Input[builtins.str]
        size: pulumi.Input[builtins.str]
        subnet_id: pulumi.Input[builtins.str]
        zones: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        override_image: NotRequired[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageArgsDict']]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sAzureProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderNodePoolArgs:
    def __init__(__self__, *,
                 boot_disk_size: pulumi.Input[builtins.int],
                 name: pulumi.Input[builtins.str],
                 size: pulumi.Input[builtins.str],
                 subnet_id: pulumi.Input[builtins.str],
                 zones: pulumi.Input[Sequence[pulumi.Input[builtins.int]]],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 override_image: Optional[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageArgs']] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zones", zones)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "boot_disk_size")

    @boot_disk_size.setter
    def boot_disk_size(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "boot_disk_size", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.int]]]:
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]):
        pulumi.set(self, "zones", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageArgs']]:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageArgs']]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAzureProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sAzureProviderNodePoolOverrideImageArgsDict(TypedDict):
        recommended: NotRequired[pulumi.Input[builtins.str]]
        reference: NotRequired[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageReferenceArgsDict']]
elif False:
    Mk8sAzureProviderNodePoolOverrideImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderNodePoolOverrideImageArgs:
    def __init__(__self__, *,
                 recommended: Optional[pulumi.Input[builtins.str]] = None,
                 reference: Optional[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageReferenceArgs']] = None):
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)

    @property
    @pulumi.getter
    def recommended(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "recommended")

    @recommended.setter
    def recommended(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "recommended", value)

    @property
    @pulumi.getter
    def reference(self) -> Optional[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageReferenceArgs']]:
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: Optional[pulumi.Input['Mk8sAzureProviderNodePoolOverrideImageReferenceArgs']]):
        pulumi.set(self, "reference", value)


if not MYPY:
    class Mk8sAzureProviderNodePoolOverrideImageReferenceArgsDict(TypedDict):
        offer: pulumi.Input[builtins.str]
        publisher: pulumi.Input[builtins.str]
        sku: pulumi.Input[builtins.str]
        version: pulumi.Input[builtins.str]
elif False:
    Mk8sAzureProviderNodePoolOverrideImageReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderNodePoolOverrideImageReferenceArgs:
    def __init__(__self__, *,
                 offer: pulumi.Input[builtins.str],
                 publisher: pulumi.Input[builtins.str],
                 sku: pulumi.Input[builtins.str],
                 version: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def offer(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "offer", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class Mk8sAzureProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sAzureProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sAzureProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sDigitalOceanProviderArgsDict(TypedDict):
        image: pulumi.Input[builtins.str]
        """
        Default image for all nodes.
        """
        region: pulumi.Input[builtins.str]
        """
        Region to deploy nodes to.
        """
        ssh_keys: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        SSH key name for accessing deployed nodes.
        """
        token_secret_link: pulumi.Input[builtins.str]
        """
        Link to a secret holding personal access token.
        """
        vpc_id: pulumi.Input[builtins.str]
        """
        ID of the Hetzner network to deploy nodes to.
        """
        autoscaler: NotRequired[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgsDict']]
        digital_ocean_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Extra tags to attach to droplets.
        """
        extra_ssh_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Extra SSH keys to provision for user root that are not registered in the DigitalOcean.
        """
        networking: NotRequired[pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgsDict']]]]
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        reserved_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Optional set of IPs to assign as extra IPs for nodes of the cluster.
        """
elif False:
    Mk8sDigitalOceanProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sDigitalOceanProviderArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 ssh_keys: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 token_secret_link: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgs']] = None,
                 digital_ocean_tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 extra_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 networking: Optional[pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 reserved_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] image: Default image for all nodes.
        :param pulumi.Input[builtins.str] region: Region to deploy nodes to.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ssh_keys: SSH key name for accessing deployed nodes.
        :param pulumi.Input[builtins.str] token_secret_link: Link to a secret holding personal access token.
        :param pulumi.Input[builtins.str] vpc_id: ID of the Hetzner network to deploy nodes to.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digital_ocean_tags: Extra tags to attach to droplets.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] extra_ssh_keys: Extra SSH keys to provision for user root that are not registered in the DigitalOcean.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] reserved_ips: Optional set of IPs to assign as extra IPs for nodes of the cluster.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "ssh_keys", ssh_keys)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if digital_ocean_tags is not None:
            pulumi.set(__self__, "digital_ocean_tags", digital_ocean_tags)
        if extra_ssh_keys is not None:
            pulumi.set(__self__, "extra_ssh_keys", extra_ssh_keys)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if reserved_ips is not None:
            pulumi.set(__self__, "reserved_ips", reserved_ips)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[builtins.str]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Region to deploy nodes to.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        SSH key name for accessing deployed nodes.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[builtins.str]:
        """
        Link to a secret holding personal access token.
        """
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        """
        ID of the Hetzner network to deploy nodes to.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="digitalOceanTags")
    def digital_ocean_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Extra tags to attach to droplets.
        """
        return pulumi.get(self, "digital_ocean_tags")

    @digital_ocean_tags.setter
    def digital_ocean_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "digital_ocean_tags", value)

    @property
    @pulumi.getter(name="extraSshKeys")
    def extra_ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Extra SSH keys to provision for user root that are not registered in the DigitalOcean.
        """
        return pulumi.get(self, "extra_ssh_keys")

    @extra_ssh_keys.setter
    def extra_ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "extra_ssh_keys", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional set of IPs to assign as extra IPs for nodes of the cluster.
        """
        return pulumi.get(self, "reserved_ips")

    @reserved_ips.setter
    def reserved_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "reserved_ips", value)


if not MYPY:
    class Mk8sDigitalOceanProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sDigitalOceanProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sDigitalOceanProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sDigitalOceanProviderNetworkingArgsDict(TypedDict):
        dns_forwarder: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        pod_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the pod network.
        """
        service_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the service network.
        """
elif False:
    Mk8sDigitalOceanProviderNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sDigitalOceanProviderNetworkingArgs:
    def __init__(__self__, *,
                 dns_forwarder: Optional[pulumi.Input[builtins.str]] = None,
                 pod_network: Optional[pulumi.Input[builtins.str]] = None,
                 service_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param pulumi.Input[builtins.str] pod_network: The CIDR of the pod network.
        :param pulumi.Input[builtins.str] service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @dns_forwarder.setter
    def dns_forwarder(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_forwarder", value)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network", value)


if not MYPY:
    class Mk8sDigitalOceanProviderNodePoolArgsDict(TypedDict):
        droplet_size: pulumi.Input[builtins.str]
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        override_image: NotRequired[pulumi.Input[builtins.str]]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sDigitalOceanProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sDigitalOceanProviderNodePoolArgs:
    def __init__(__self__, *,
                 droplet_size: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 override_image: Optional[pulumi.Input[builtins.str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "droplet_size", droplet_size)
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="dropletSize")
    def droplet_size(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "droplet_size")

    @droplet_size.setter
    def droplet_size(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "droplet_size", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sDigitalOceanProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sDigitalOceanProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sDigitalOceanProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sEphemeralProviderArgsDict(TypedDict):
        location: pulumi.Input[builtins.str]
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        """
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
elif False:
    Mk8sEphemeralProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sEphemeralProviderArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[builtins.str],
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] location: Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]] node_pools: List of node pools.
        """
        pulumi.set(__self__, "location", location)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[builtins.str]:
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)


if not MYPY:
    class Mk8sEphemeralProviderNodePoolArgsDict(TypedDict):
        arch: pulumi.Input[builtins.str]
        """
        CPU architecture of the nodes.
        """
        count: pulumi.Input[builtins.int]
        """
        Number of nodes to deploy.
        """
        cpu: pulumi.Input[builtins.str]
        """
        Allocated CPU.
        """
        memory: pulumi.Input[builtins.str]
        """
        Allocated memory.
        """
        name: pulumi.Input[builtins.str]
        flavor: NotRequired[pulumi.Input[builtins.str]]
        """
        Linux distro to use for ephemeral nodes.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sEphemeralProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sEphemeralProviderNodePoolArgs:
    def __init__(__self__, *,
                 arch: pulumi.Input[builtins.str],
                 count: pulumi.Input[builtins.int],
                 cpu: pulumi.Input[builtins.str],
                 memory: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 flavor: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] arch: CPU architecture of the nodes.
        :param pulumi.Input[builtins.int] count: Number of nodes to deploy.
        :param pulumi.Input[builtins.str] cpu: Allocated CPU.
        :param pulumi.Input[builtins.str] memory: Allocated memory.
        :param pulumi.Input[builtins.str] flavor: Linux distro to use for ephemeral nodes.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def arch(self) -> pulumi.Input[builtins.str]:
        """
        CPU architecture of the nodes.
        """
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[builtins.int]:
        """
        Number of nodes to deploy.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[builtins.str]:
        """
        Allocated CPU.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[builtins.str]:
        """
        Allocated memory.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Linux distro to use for ephemeral nodes.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "flavor", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sEphemeralProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sEphemeralProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sEphemeralProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sFirewallArgsDict(TypedDict):
        source_cidr: pulumi.Input[builtins.str]
        description: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sFirewallArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sFirewallArgs:
    def __init__(__self__, *,
                 source_cidr: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "source_cidr", source_cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "source_cidr")

    @source_cidr.setter
    def source_cidr(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source_cidr", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class Mk8sGenericProviderArgsDict(TypedDict):
        location: pulumi.Input[builtins.str]
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        """
        networking: NotRequired[pulumi.Input['Mk8sGenericProviderNetworkingArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
elif False:
    Mk8sGenericProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sGenericProviderArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[builtins.str],
                 networking: Optional[pulumi.Input['Mk8sGenericProviderNetworkingArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] location: Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]] node_pools: List of node pools.
        """
        pulumi.set(__self__, "location", location)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[builtins.str]:
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['Mk8sGenericProviderNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['Mk8sGenericProviderNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)


if not MYPY:
    class Mk8sGenericProviderNetworkingArgsDict(TypedDict):
        dns_forwarder: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        pod_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the pod network.
        """
        service_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the service network.
        """
elif False:
    Mk8sGenericProviderNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sGenericProviderNetworkingArgs:
    def __init__(__self__, *,
                 dns_forwarder: Optional[pulumi.Input[builtins.str]] = None,
                 pod_network: Optional[pulumi.Input[builtins.str]] = None,
                 service_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param pulumi.Input[builtins.str] pod_network: The CIDR of the pod network.
        :param pulumi.Input[builtins.str] service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @dns_forwarder.setter
    def dns_forwarder(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_forwarder", value)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network", value)


if not MYPY:
    class Mk8sGenericProviderNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sGenericProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sGenericProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sGenericProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sGenericProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sGenericProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sHetznerProviderArgsDict(TypedDict):
        network_id: pulumi.Input[builtins.str]
        """
        ID of the Hetzner network to deploy nodes to.
        """
        region: pulumi.Input[builtins.str]
        """
        Hetzner region to deploy nodes to.
        """
        token_secret_link: pulumi.Input[builtins.str]
        """
        Link to a secret holding Hetzner access key.
        """
        autoscaler: NotRequired[pulumi.Input['Mk8sHetznerProviderAutoscalerArgsDict']]
        dedicated_server_node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgsDict']]]]
        """
        Node pools that can configure dedicated Hetzner servers.
        """
        firewall_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional firewall rule to attach to all nodes.
        """
        floating_ip_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        If supplied, nodes will get assigned a random floating ip matching the selector.
        """
        hetzner_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Extra labels to attach to servers.
        """
        image: NotRequired[pulumi.Input[builtins.str]]
        """
        Default image for all nodes.
        """
        networking: NotRequired[pulumi.Input['Mk8sHetznerProviderNetworkingArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgsDict']]]]
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        ssh_key: NotRequired[pulumi.Input[builtins.str]]
        """
        SSH key name for accessing deployed nodes.
        """
elif False:
    Mk8sHetznerProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sHetznerProviderArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 token_secret_link: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sHetznerProviderAutoscalerArgs']] = None,
                 dedicated_server_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]]] = None,
                 firewall_id: Optional[pulumi.Input[builtins.str]] = None,
                 floating_ip_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 hetzner_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 image: Optional[pulumi.Input[builtins.str]] = None,
                 networking: Optional[pulumi.Input['Mk8sHetznerProviderNetworkingArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] network_id: ID of the Hetzner network to deploy nodes to.
        :param pulumi.Input[builtins.str] region: Hetzner region to deploy nodes to.
        :param pulumi.Input[builtins.str] token_secret_link: Link to a secret holding Hetzner access key.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]] dedicated_server_node_pools: Node pools that can configure dedicated Hetzner servers.
        :param pulumi.Input[builtins.str] firewall_id: Optional firewall rule to attach to all nodes.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] floating_ip_selector: If supplied, nodes will get assigned a random floating ip matching the selector.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] hetzner_labels: Extra labels to attach to servers.
        :param pulumi.Input[builtins.str] image: Default image for all nodes.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param pulumi.Input[builtins.str] ssh_key: SSH key name for accessing deployed nodes.
        """
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if dedicated_server_node_pools is not None:
            pulumi.set(__self__, "dedicated_server_node_pools", dedicated_server_node_pools)
        if firewall_id is not None:
            pulumi.set(__self__, "firewall_id", firewall_id)
        if floating_ip_selector is not None:
            pulumi.set(__self__, "floating_ip_selector", floating_ip_selector)
        if hetzner_labels is not None:
            pulumi.set(__self__, "hetzner_labels", hetzner_labels)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if ssh_key is not None:
            pulumi.set(__self__, "ssh_key", ssh_key)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[builtins.str]:
        """
        ID of the Hetzner network to deploy nodes to.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Hetzner region to deploy nodes to.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[builtins.str]:
        """
        Link to a secret holding Hetzner access key.
        """
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sHetznerProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sHetznerProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="dedicatedServerNodePools")
    def dedicated_server_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]]]:
        """
        Node pools that can configure dedicated Hetzner servers.
        """
        return pulumi.get(self, "dedicated_server_node_pools")

    @dedicated_server_node_pools.setter
    def dedicated_server_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]]]):
        pulumi.set(self, "dedicated_server_node_pools", value)

    @property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional firewall rule to attach to all nodes.
        """
        return pulumi.get(self, "firewall_id")

    @firewall_id.setter
    def firewall_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "firewall_id", value)

    @property
    @pulumi.getter(name="floatingIpSelector")
    def floating_ip_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        If supplied, nodes will get assigned a random floating ip matching the selector.
        """
        return pulumi.get(self, "floating_ip_selector")

    @floating_ip_selector.setter
    def floating_ip_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "floating_ip_selector", value)

    @property
    @pulumi.getter(name="hetznerLabels")
    def hetzner_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Extra labels to attach to servers.
        """
        return pulumi.get(self, "hetzner_labels")

    @hetzner_labels.setter
    def hetzner_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "hetzner_labels", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['Mk8sHetznerProviderNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['Mk8sHetznerProviderNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        SSH key name for accessing deployed nodes.
        """
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssh_key", value)


if not MYPY:
    class Mk8sHetznerProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sHetznerProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sHetznerProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sHetznerProviderDedicatedServerNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sHetznerProviderDedicatedServerNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sHetznerProviderDedicatedServerNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sHetznerProviderDedicatedServerNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sHetznerProviderDedicatedServerNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sHetznerProviderNetworkingArgsDict(TypedDict):
        dns_forwarder: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        pod_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the pod network.
        """
        service_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the service network.
        """
elif False:
    Mk8sHetznerProviderNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sHetznerProviderNetworkingArgs:
    def __init__(__self__, *,
                 dns_forwarder: Optional[pulumi.Input[builtins.str]] = None,
                 pod_network: Optional[pulumi.Input[builtins.str]] = None,
                 service_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param pulumi.Input[builtins.str] pod_network: The CIDR of the pod network.
        :param pulumi.Input[builtins.str] service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @dns_forwarder.setter
    def dns_forwarder(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_forwarder", value)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network", value)


if not MYPY:
    class Mk8sHetznerProviderNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        server_type: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        override_image: NotRequired[pulumi.Input[builtins.str]]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sHetznerProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sHetznerProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 server_type: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 override_image: Optional[pulumi.Input[builtins.str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_type", server_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sHetznerProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sHetznerProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sHetznerProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sLambdalabsProviderArgsDict(TypedDict):
        region: pulumi.Input[builtins.str]
        """
        Region where the cluster nodes will live.
        """
        ssh_key: pulumi.Input[builtins.str]
        """
        SSH key name for accessing deployed nodes.
        """
        token_secret_link: pulumi.Input[builtins.str]
        """
        Link to a secret holding Lambdalabs access key.
        """
        autoscaler: NotRequired[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgsDict']]
        file_systems: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        unmanaged_node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgsDict']]]]
elif False:
    Mk8sLambdalabsProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLambdalabsProviderArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[builtins.str],
                 ssh_key: pulumi.Input[builtins.str],
                 token_secret_link: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgs']] = None,
                 file_systems: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] region: Region where the cluster nodes will live.
        :param pulumi.Input[builtins.str] ssh_key: SSH key name for accessing deployed nodes.
        :param pulumi.Input[builtins.str] token_secret_link: Link to a secret holding Lambdalabs access key.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]] node_pools: List of node pools.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if file_systems is not None:
            pulumi.set(__self__, "file_systems", file_systems)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if unmanaged_node_pools is not None:
            pulumi.set(__self__, "unmanaged_node_pools", unmanaged_node_pools)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[builtins.str]:
        """
        SSH key name for accessing deployed nodes.
        """
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[builtins.str]:
        """
        Link to a secret holding Lambdalabs access key.
        """
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="fileSystems")
    def file_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "file_systems")

    @file_systems.setter
    def file_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "file_systems", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgs']]]]:
        return pulumi.get(self, "unmanaged_node_pools")

    @unmanaged_node_pools.setter
    def unmanaged_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgs']]]]):
        pulumi.set(self, "unmanaged_node_pools", value)


if not MYPY:
    class Mk8sLambdalabsProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sLambdalabsProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLambdalabsProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sLambdalabsProviderNodePoolArgsDict(TypedDict):
        instance_type: pulumi.Input[builtins.str]
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sLambdalabsProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLambdalabsProviderNodePoolArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sLambdalabsProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sLambdalabsProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLambdalabsProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sLambdalabsProviderUnmanagedNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sLambdalabsProviderUnmanagedNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLambdalabsProviderUnmanagedNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sLinodeProviderArgsDict(TypedDict):
        image: pulumi.Input[builtins.str]
        """
        Default image for all nodes.
        """
        region: pulumi.Input[builtins.str]
        """
        Region where the cluster nodes will live.
        """
        token_secret_link: pulumi.Input[builtins.str]
        """
        Link to a secret holding Linode access key.
        """
        vpc_id: pulumi.Input[builtins.str]
        """
        The vpc where nodes will be deployed. Supports SSM.
        """
        authorized_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        authorized_users: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        autoscaler: NotRequired[pulumi.Input['Mk8sLinodeProviderAutoscalerArgsDict']]
        firewall_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional firewall rule to attach to all nodes.
        """
        networking: NotRequired[pulumi.Input['Mk8sLinodeProviderNetworkingArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
elif False:
    Mk8sLinodeProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLinodeProviderArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 token_secret_link: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 authorized_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 authorized_users: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 autoscaler: Optional[pulumi.Input['Mk8sLinodeProviderAutoscalerArgs']] = None,
                 firewall_id: Optional[pulumi.Input[builtins.str]] = None,
                 networking: Optional[pulumi.Input['Mk8sLinodeProviderNetworkingArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] image: Default image for all nodes.
        :param pulumi.Input[builtins.str] region: Region where the cluster nodes will live.
        :param pulumi.Input[builtins.str] token_secret_link: Link to a secret holding Linode access key.
        :param pulumi.Input[builtins.str] vpc_id: The vpc where nodes will be deployed. Supports SSM.
        :param pulumi.Input[builtins.str] firewall_id: Optional firewall rule to attach to all nodes.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]] node_pools: List of node pools.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if authorized_keys is not None:
            pulumi.set(__self__, "authorized_keys", authorized_keys)
        if authorized_users is not None:
            pulumi.set(__self__, "authorized_users", authorized_users)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if firewall_id is not None:
            pulumi.set(__self__, "firewall_id", firewall_id)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[builtins.str]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[builtins.str]:
        """
        Link to a secret holding Linode access key.
        """
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        """
        The vpc where nodes will be deployed. Supports SSM.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="authorizedKeys")
    def authorized_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "authorized_keys")

    @authorized_keys.setter
    def authorized_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "authorized_keys", value)

    @property
    @pulumi.getter(name="authorizedUsers")
    def authorized_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "authorized_users")

    @authorized_users.setter
    def authorized_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "authorized_users", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sLinodeProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sLinodeProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional firewall rule to attach to all nodes.
        """
        return pulumi.get(self, "firewall_id")

    @firewall_id.setter
    def firewall_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "firewall_id", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['Mk8sLinodeProviderNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['Mk8sLinodeProviderNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)


if not MYPY:
    class Mk8sLinodeProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sLinodeProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLinodeProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sLinodeProviderNetworkingArgsDict(TypedDict):
        dns_forwarder: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        pod_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the pod network.
        """
        service_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the service network.
        """
elif False:
    Mk8sLinodeProviderNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLinodeProviderNetworkingArgs:
    def __init__(__self__, *,
                 dns_forwarder: Optional[pulumi.Input[builtins.str]] = None,
                 pod_network: Optional[pulumi.Input[builtins.str]] = None,
                 service_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param pulumi.Input[builtins.str] pod_network: The CIDR of the pod network.
        :param pulumi.Input[builtins.str] service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @dns_forwarder.setter
    def dns_forwarder(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_forwarder", value)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network", value)


if not MYPY:
    class Mk8sLinodeProviderNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        server_type: pulumi.Input[builtins.str]
        subnet_id: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        override_image: NotRequired[pulumi.Input[builtins.str]]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sLinodeProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLinodeProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 server_type: pulumi.Input[builtins.str],
                 subnet_id: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 override_image: Optional[pulumi.Input[builtins.str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sLinodeProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sLinodeProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sLinodeProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sOblivusProviderArgsDict(TypedDict):
        datacenter: pulumi.Input[builtins.str]
        token_secret_link: pulumi.Input[builtins.str]
        """
        Link to a secret holding Oblivus access key.
        """
        autoscaler: NotRequired[pulumi.Input['Mk8sOblivusProviderAutoscalerArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        ssh_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unmanaged_node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgsDict']]]]
elif False:
    Mk8sOblivusProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sOblivusProviderArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[builtins.str],
                 token_secret_link: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sOblivusProviderAutoscalerArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] token_secret_link: Link to a secret holding Oblivus access key.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]] node_pools: List of node pools.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if unmanaged_node_pools is not None:
            pulumi.set(__self__, "unmanaged_node_pools", unmanaged_node_pools)

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[builtins.str]:
        """
        Link to a secret holding Oblivus access key.
        """
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sOblivusProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sOblivusProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgs']]]]:
        return pulumi.get(self, "unmanaged_node_pools")

    @unmanaged_node_pools.setter
    def unmanaged_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgs']]]]):
        pulumi.set(self, "unmanaged_node_pools", value)


if not MYPY:
    class Mk8sOblivusProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sOblivusProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sOblivusProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sOblivusProviderNodePoolArgsDict(TypedDict):
        flavor: pulumi.Input[builtins.str]
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sOblivusProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sOblivusProviderNodePoolArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "flavor", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sOblivusProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sOblivusProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sOblivusProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sOblivusProviderUnmanagedNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sOblivusProviderUnmanagedNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sOblivusProviderUnmanagedNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sOblivusProviderUnmanagedNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sOblivusProviderUnmanagedNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sOblivusProviderUnmanagedNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sPaperspaceProviderArgsDict(TypedDict):
        network_id: pulumi.Input[builtins.str]
        region: pulumi.Input[builtins.str]
        """
        Region where the cluster nodes will live.
        """
        token_secret_link: pulumi.Input[builtins.str]
        """
        Link to a secret holding Paperspace access key.
        """
        autoscaler: NotRequired[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        shared_drives: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unmanaged_node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgsDict']]]]
        user_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    Mk8sPaperspaceProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sPaperspaceProviderArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 token_secret_link: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 shared_drives: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgs']]]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] region: Region where the cluster nodes will live.
        :param pulumi.Input[builtins.str] token_secret_link: Link to a secret holding Paperspace access key.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]] node_pools: List of node pools.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if shared_drives is not None:
            pulumi.set(__self__, "shared_drives", shared_drives)
        if unmanaged_node_pools is not None:
            pulumi.set(__self__, "unmanaged_node_pools", unmanaged_node_pools)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[builtins.str]:
        """
        Link to a secret holding Paperspace access key.
        """
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sharedDrives")
    def shared_drives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "shared_drives")

    @shared_drives.setter
    def shared_drives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "shared_drives", value)

    @property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgs']]]]:
        return pulumi.get(self, "unmanaged_node_pools")

    @unmanaged_node_pools.setter
    def unmanaged_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgs']]]]):
        pulumi.set(self, "unmanaged_node_pools", value)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_ids", value)


if not MYPY:
    class Mk8sPaperspaceProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sPaperspaceProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sPaperspaceProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sPaperspaceProviderNodePoolArgsDict(TypedDict):
        machine_type: pulumi.Input[builtins.str]
        name: pulumi.Input[builtins.str]
        public_ip_type: pulumi.Input[builtins.str]
        boot_disk_size: NotRequired[pulumi.Input[builtins.int]]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sPaperspaceProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sPaperspaceProviderNodePoolArgs:
    def __init__(__self__, *,
                 machine_type: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 public_ip_type: pulumi.Input[builtins.str],
                 boot_disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip_type", public_ip_type)
        if boot_disk_size is not None:
            pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIpType")
    def public_ip_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "public_ip_type")

    @public_ip_type.setter
    def public_ip_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "public_ip_type", value)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "boot_disk_size")

    @boot_disk_size.setter
    def boot_disk_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "boot_disk_size", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sPaperspaceProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sPaperspaceProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sPaperspaceProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sPaperspaceProviderUnmanagedNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
elif False:
    Mk8sPaperspaceProviderUnmanagedNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sPaperspaceProviderUnmanagedNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


if not MYPY:
    class Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class Mk8sStatusArgsDict(TypedDict):
        add_ons: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgsDict']]]]
        home_location: NotRequired[pulumi.Input[builtins.str]]
        oidc_provider_url: NotRequired[pulumi.Input[builtins.str]]
        server_url: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusArgs:
    def __init__(__self__, *,
                 add_ons: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgs']]]] = None,
                 home_location: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_provider_url: Optional[pulumi.Input[builtins.str]] = None,
                 server_url: Optional[pulumi.Input[builtins.str]] = None):
        if add_ons is not None:
            pulumi.set(__self__, "add_ons", add_ons)
        if home_location is not None:
            pulumi.set(__self__, "home_location", home_location)
        if oidc_provider_url is not None:
            pulumi.set(__self__, "oidc_provider_url", oidc_provider_url)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)

    @property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgs']]]]:
        return pulumi.get(self, "add_ons")

    @add_ons.setter
    def add_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgs']]]]):
        pulumi.set(self, "add_ons", value)

    @property
    @pulumi.getter(name="homeLocation")
    def home_location(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "home_location")

    @home_location.setter
    def home_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "home_location", value)

    @property
    @pulumi.getter(name="oidcProviderUrl")
    def oidc_provider_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "oidc_provider_url")

    @oidc_provider_url.setter
    def oidc_provider_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oidc_provider_url", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_url", value)


if not MYPY:
    class Mk8sStatusAddOnArgsDict(TypedDict):
        aws_ecrs: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgsDict']]]]
        aws_efs: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgsDict']]]]
        aws_elbs: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgsDict']]]]
        aws_workload_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgsDict']]]]
        dashboards: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgsDict']]]]
        logs: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgsDict']]]]
        metrics: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgsDict']]]]
elif False:
    Mk8sStatusAddOnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnArgs:
    def __init__(__self__, *,
                 aws_ecrs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgs']]]] = None,
                 aws_efs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgs']]]] = None,
                 aws_elbs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgs']]]] = None,
                 aws_workload_identities: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgs']]]] = None,
                 dashboards: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgs']]]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgs']]]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgs']]]] = None):
        if aws_ecrs is not None:
            pulumi.set(__self__, "aws_ecrs", aws_ecrs)
        if aws_efs is not None:
            pulumi.set(__self__, "aws_efs", aws_efs)
        if aws_elbs is not None:
            pulumi.set(__self__, "aws_elbs", aws_elbs)
        if aws_workload_identities is not None:
            pulumi.set(__self__, "aws_workload_identities", aws_workload_identities)
        if dashboards is not None:
            pulumi.set(__self__, "dashboards", dashboards)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter(name="awsEcrs")
    def aws_ecrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgs']]]]:
        return pulumi.get(self, "aws_ecrs")

    @aws_ecrs.setter
    def aws_ecrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgs']]]]):
        pulumi.set(self, "aws_ecrs", value)

    @property
    @pulumi.getter(name="awsEfs")
    def aws_efs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgs']]]]:
        return pulumi.get(self, "aws_efs")

    @aws_efs.setter
    def aws_efs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgs']]]]):
        pulumi.set(self, "aws_efs", value)

    @property
    @pulumi.getter(name="awsElbs")
    def aws_elbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgs']]]]:
        return pulumi.get(self, "aws_elbs")

    @aws_elbs.setter
    def aws_elbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgs']]]]):
        pulumi.set(self, "aws_elbs", value)

    @property
    @pulumi.getter(name="awsWorkloadIdentities")
    def aws_workload_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgs']]]]:
        return pulumi.get(self, "aws_workload_identities")

    @aws_workload_identities.setter
    def aws_workload_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgs']]]]):
        pulumi.set(self, "aws_workload_identities", value)

    @property
    @pulumi.getter
    def dashboards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgs']]]]:
        return pulumi.get(self, "dashboards")

    @dashboards.setter
    def dashboards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgs']]]]):
        pulumi.set(self, "dashboards", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgs']]]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgs']]]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgs']]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgs']]]]):
        pulumi.set(self, "metrics", value)


if not MYPY:
    class Mk8sStatusAddOnAwsEcrArgsDict(TypedDict):
        trust_policy: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sStatusAddOnAwsEcrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnAwsEcrArgs:
    def __init__(__self__, *,
                 trust_policy: Optional[pulumi.Input[builtins.str]] = None):
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trust_policy", value)


if not MYPY:
    class Mk8sStatusAddOnAwsEfArgsDict(TypedDict):
        trust_policy: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sStatusAddOnAwsEfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnAwsEfArgs:
    def __init__(__self__, *,
                 trust_policy: Optional[pulumi.Input[builtins.str]] = None):
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trust_policy", value)


if not MYPY:
    class Mk8sStatusAddOnAwsElbArgsDict(TypedDict):
        trust_policy: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sStatusAddOnAwsElbArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnAwsElbArgs:
    def __init__(__self__, *,
                 trust_policy: Optional[pulumi.Input[builtins.str]] = None):
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trust_policy", value)


if not MYPY:
    class Mk8sStatusAddOnAwsWorkloadIdentityArgsDict(TypedDict):
        oidc_provider_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgsDict']]]]
        trust_policy: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sStatusAddOnAwsWorkloadIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnAwsWorkloadIdentityArgs:
    def __init__(__self__, *,
                 oidc_provider_configs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs']]]] = None,
                 trust_policy: Optional[pulumi.Input[builtins.str]] = None):
        if oidc_provider_configs is not None:
            pulumi.set(__self__, "oidc_provider_configs", oidc_provider_configs)
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @property
    @pulumi.getter(name="oidcProviderConfigs")
    def oidc_provider_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs']]]]:
        return pulumi.get(self, "oidc_provider_configs")

    @oidc_provider_configs.setter
    def oidc_provider_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs']]]]):
        pulumi.set(self, "oidc_provider_configs", value)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trust_policy", value)


if not MYPY:
    class Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgsDict(TypedDict):
        audience: NotRequired[pulumi.Input[builtins.str]]
        provider_url: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[builtins.str]] = None,
                 provider_url: Optional[pulumi.Input[builtins.str]] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if provider_url is not None:
            pulumi.set(__self__, "provider_url", provider_url)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="providerUrl")
    def provider_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "provider_url")

    @provider_url.setter
    def provider_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_url", value)


if not MYPY:
    class Mk8sStatusAddOnDashboardArgsDict(TypedDict):
        url: NotRequired[pulumi.Input[builtins.str]]
        """
        Access to dashboard.
        """
elif False:
    Mk8sStatusAddOnDashboardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnDashboardArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] url: Access to dashboard.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Access to dashboard.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class Mk8sStatusAddOnLogArgsDict(TypedDict):
        loki_address: NotRequired[pulumi.Input[builtins.str]]
        """
        Loki endpoint to query logs from.
        """
elif False:
    Mk8sStatusAddOnLogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnLogArgs:
    def __init__(__self__, *,
                 loki_address: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] loki_address: Loki endpoint to query logs from.
        """
        if loki_address is not None:
            pulumi.set(__self__, "loki_address", loki_address)

    @property
    @pulumi.getter(name="lokiAddress")
    def loki_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Loki endpoint to query logs from.
        """
        return pulumi.get(self, "loki_address")

    @loki_address.setter
    def loki_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "loki_address", value)


if not MYPY:
    class Mk8sStatusAddOnMetricArgsDict(TypedDict):
        prometheus_endpoint: NotRequired[pulumi.Input[builtins.str]]
        remote_write_config: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sStatusAddOnMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sStatusAddOnMetricArgs:
    def __init__(__self__, *,
                 prometheus_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 remote_write_config: Optional[pulumi.Input[builtins.str]] = None):
        if prometheus_endpoint is not None:
            pulumi.set(__self__, "prometheus_endpoint", prometheus_endpoint)
        if remote_write_config is not None:
            pulumi.set(__self__, "remote_write_config", remote_write_config)

    @property
    @pulumi.getter(name="prometheusEndpoint")
    def prometheus_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "prometheus_endpoint")

    @prometheus_endpoint.setter
    def prometheus_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "prometheus_endpoint", value)

    @property
    @pulumi.getter(name="remoteWriteConfig")
    def remote_write_config(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "remote_write_config")

    @remote_write_config.setter
    def remote_write_config(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_write_config", value)


if not MYPY:
    class Mk8sTritonProviderArgsDict(TypedDict):
        image_id: pulumi.Input[builtins.str]
        """
        Default image for all nodes.
        """
        location: pulumi.Input[builtins.str]
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to the Triton datacenter.
        """
        private_network_id: pulumi.Input[builtins.str]
        """
        ID of the private Fabric/Network.
        """
        autoscaler: NotRequired[pulumi.Input['Mk8sTritonProviderAutoscalerArgsDict']]
        connection: NotRequired[pulumi.Input['Mk8sTritonProviderConnectionArgsDict']]
        firewall_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable firewall for the instances deployed.
        """
        load_balancer: NotRequired[pulumi.Input['Mk8sTritonProviderLoadBalancerArgsDict']]
        networking: NotRequired[pulumi.Input['Mk8sTritonProviderNetworkingArgsDict']]
        node_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgsDict']]]]
        """
        List of node pools.
        """
        pre_install_script: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        ssh_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Extra SSH keys to provision for user root.
        """
elif False:
    Mk8sTritonProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[builtins.str],
                 location: pulumi.Input[builtins.str],
                 private_network_id: pulumi.Input[builtins.str],
                 autoscaler: Optional[pulumi.Input['Mk8sTritonProviderAutoscalerArgs']] = None,
                 connection: Optional[pulumi.Input['Mk8sTritonProviderConnectionArgs']] = None,
                 firewall_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 load_balancer: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerArgs']] = None,
                 networking: Optional[pulumi.Input['Mk8sTritonProviderNetworkingArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] image_id: Default image for all nodes.
        :param pulumi.Input[builtins.str] location: Control Plane location that will host the K8s components. Prefer one that is closest to the Triton datacenter.
        :param pulumi.Input[builtins.str] private_network_id: ID of the private Fabric/Network.
        :param pulumi.Input[builtins.bool] firewall_enabled: Enable firewall for the instances deployed.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]] node_pools: List of node pools.
        :param pulumi.Input[builtins.str] pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ssh_keys: Extra SSH keys to provision for user root.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "private_network_id", private_network_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if firewall_enabled is not None:
            pulumi.set(__self__, "firewall_enabled", firewall_enabled)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[builtins.str]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[builtins.str]:
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to the Triton datacenter.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="privateNetworkId")
    def private_network_id(self) -> pulumi.Input[builtins.str]:
        """
        ID of the private Fabric/Network.
        """
        return pulumi.get(self, "private_network_id")

    @private_network_id.setter
    def private_network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "private_network_id", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sTritonProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sTritonProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input['Mk8sTritonProviderConnectionArgs']]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input['Mk8sTritonProviderConnectionArgs']]):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="firewallEnabled")
    def firewall_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable firewall for the instances deployed.
        """
        return pulumi.get(self, "firewall_enabled")

    @firewall_enabled.setter
    def firewall_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "firewall_enabled", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerArgs']]:
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerArgs']]):
        pulumi.set(self, "load_balancer", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['Mk8sTritonProviderNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['Mk8sTritonProviderNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]]]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Extra SSH keys to provision for user root.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ssh_keys", value)


if not MYPY:
    class Mk8sTritonProviderAutoscalerArgsDict(TypedDict):
        expanders: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        unneeded_time: NotRequired[pulumi.Input[builtins.str]]
        unready_time: NotRequired[pulumi.Input[builtins.str]]
        utilization_threshold: NotRequired[pulumi.Input[builtins.float]]
elif False:
    Mk8sTritonProviderAutoscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 unneeded_time: Optional[pulumi.Input[builtins.str]] = None,
                 unready_time: Optional[pulumi.Input[builtins.str]] = None,
                 utilization_threshold: Optional[pulumi.Input[builtins.float]] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "utilization_threshold", value)


if not MYPY:
    class Mk8sTritonProviderConnectionArgsDict(TypedDict):
        account: pulumi.Input[builtins.str]
        private_key_secret_link: pulumi.Input[builtins.str]
        """
        Link to a SSH or opaque secret.
        """
        url: pulumi.Input[builtins.str]
        user: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sTritonProviderConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderConnectionArgs:
    def __init__(__self__, *,
                 account: pulumi.Input[builtins.str],
                 private_key_secret_link: pulumi.Input[builtins.str],
                 url: pulumi.Input[builtins.str],
                 user: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] private_key_secret_link: Link to a SSH or opaque secret.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "private_key_secret_link", private_key_secret_link)
        pulumi.set(__self__, "url", url)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="privateKeySecretLink")
    def private_key_secret_link(self) -> pulumi.Input[builtins.str]:
        """
        Link to a SSH or opaque secret.
        """
        return pulumi.get(self, "private_key_secret_link")

    @private_key_secret_link.setter
    def private_key_secret_link(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "private_key_secret_link", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class Mk8sTritonProviderLoadBalancerArgsDict(TypedDict):
        gateway: NotRequired[pulumi.Input['Mk8sTritonProviderLoadBalancerGatewayArgsDict']]
        manual: NotRequired[pulumi.Input['Mk8sTritonProviderLoadBalancerManualArgsDict']]
elif False:
    Mk8sTritonProviderLoadBalancerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderLoadBalancerArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerGatewayArgs']] = None,
                 manual: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerManualArgs']] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerGatewayArgs']]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerGatewayArgs']]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerManualArgs']]:
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerManualArgs']]):
        pulumi.set(self, "manual", value)


if not MYPY:
    class Mk8sTritonProviderLoadBalancerGatewayArgsDict(TypedDict):
        pass
elif False:
    Mk8sTritonProviderLoadBalancerGatewayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderLoadBalancerGatewayArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class Mk8sTritonProviderLoadBalancerManualArgsDict(TypedDict):
        cns_internal_domain: pulumi.Input[builtins.str]
        cns_public_domain: pulumi.Input[builtins.str]
        image_id: pulumi.Input[builtins.str]
        package_id: pulumi.Input[builtins.str]
        private_network_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        If set, machine will also get a public IP.
        """
        public_network_id: pulumi.Input[builtins.str]
        """
        If set, machine will also get a public IP.
        """
        count: NotRequired[pulumi.Input[builtins.int]]
        logging: NotRequired[pulumi.Input['Mk8sTritonProviderLoadBalancerManualLoggingArgsDict']]
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Extra tags to attach to instances from a node pool.
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Extra tags to attach to instances from a node pool.
        """
elif False:
    Mk8sTritonProviderLoadBalancerManualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderLoadBalancerManualArgs:
    def __init__(__self__, *,
                 cns_internal_domain: pulumi.Input[builtins.str],
                 cns_public_domain: pulumi.Input[builtins.str],
                 image_id: pulumi.Input[builtins.str],
                 package_id: pulumi.Input[builtins.str],
                 private_network_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 public_network_id: pulumi.Input[builtins.str],
                 count: Optional[pulumi.Input[builtins.int]] = None,
                 logging: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerManualLoggingArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] private_network_ids: If set, machine will also get a public IP.
        :param pulumi.Input[builtins.str] public_network_id: If set, machine will also get a public IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: Extra tags to attach to instances from a node pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Extra tags to attach to instances from a node pool.
        """
        pulumi.set(__self__, "cns_internal_domain", cns_internal_domain)
        pulumi.set(__self__, "cns_public_domain", cns_public_domain)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "package_id", package_id)
        pulumi.set(__self__, "private_network_ids", private_network_ids)
        pulumi.set(__self__, "public_network_id", public_network_id)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="cnsInternalDomain")
    def cns_internal_domain(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cns_internal_domain")

    @cns_internal_domain.setter
    def cns_internal_domain(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cns_internal_domain", value)

    @property
    @pulumi.getter(name="cnsPublicDomain")
    def cns_public_domain(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cns_public_domain")

    @cns_public_domain.setter
    def cns_public_domain(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cns_public_domain", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        If set, machine will also get a public IP.
        """
        return pulumi.get(self, "private_network_ids")

    @private_network_ids.setter
    def private_network_ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "private_network_ids", value)

    @property
    @pulumi.getter(name="publicNetworkId")
    def public_network_id(self) -> pulumi.Input[builtins.str]:
        """
        If set, machine will also get a public IP.
        """
        return pulumi.get(self, "public_network_id")

    @public_network_id.setter
    def public_network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "public_network_id", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerManualLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['Mk8sTritonProviderLoadBalancerManualLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Extra tags to attach to instances from a node pool.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Extra tags to attach to instances from a node pool.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class Mk8sTritonProviderLoadBalancerManualLoggingArgsDict(TypedDict):
        external_syslog: NotRequired[pulumi.Input[builtins.str]]
        node_port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    Mk8sTritonProviderLoadBalancerManualLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderLoadBalancerManualLoggingArgs:
    def __init__(__self__, *,
                 external_syslog: Optional[pulumi.Input[builtins.str]] = None,
                 node_port: Optional[pulumi.Input[builtins.int]] = None):
        if external_syslog is not None:
            pulumi.set(__self__, "external_syslog", external_syslog)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter(name="externalSyslog")
    def external_syslog(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "external_syslog")

    @external_syslog.setter
    def external_syslog(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_syslog", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "node_port", value)


if not MYPY:
    class Mk8sTritonProviderNetworkingArgsDict(TypedDict):
        dns_forwarder: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        pod_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the pod network.
        """
        service_network: NotRequired[pulumi.Input[builtins.str]]
        """
        The CIDR of the service network.
        """
elif False:
    Mk8sTritonProviderNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderNetworkingArgs:
    def __init__(__self__, *,
                 dns_forwarder: Optional[pulumi.Input[builtins.str]] = None,
                 pod_network: Optional[pulumi.Input[builtins.str]] = None,
                 service_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param pulumi.Input[builtins.str] pod_network: The CIDR of the pod network.
        :param pulumi.Input[builtins.str] service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @dns_forwarder.setter
    def dns_forwarder(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_forwarder", value)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_network", value)


if not MYPY:
    class Mk8sTritonProviderNodePoolArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        package_id: pulumi.Input[builtins.str]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Labels to attach to nodes of a node pool.
        """
        max_size: NotRequired[pulumi.Input[builtins.int]]
        min_size: NotRequired[pulumi.Input[builtins.int]]
        override_image_id: NotRequired[pulumi.Input[builtins.str]]
        private_network_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        More private networks to join.
        """
        public_network_id: NotRequired[pulumi.Input[builtins.str]]
        """
        If set, machine will also get a public IP.
        """
        taints: NotRequired[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgsDict']]]]
        """
        Taint for the nodes of a pool.
        """
        triton_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Extra tags to attach to instances from a node pool.
        """
elif False:
    Mk8sTritonProviderNodePoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 package_id: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 override_image_id: Optional[pulumi.Input[builtins.str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 public_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]]] = None,
                 triton_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels to attach to nodes of a node pool.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] private_network_ids: More private networks to join.
        :param pulumi.Input[builtins.str] public_network_id: If set, machine will also get a public IP.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]] taints: Taint for the nodes of a pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] triton_tags: Extra tags to attach to instances from a node pool.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image_id is not None:
            pulumi.set(__self__, "override_image_id", override_image_id)
        if private_network_ids is not None:
            pulumi.set(__self__, "private_network_ids", private_network_ids)
        if public_network_id is not None:
            pulumi.set(__self__, "public_network_id", public_network_id)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if triton_tags is not None:
            pulumi.set(__self__, "triton_tags", triton_tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImageId")
    def override_image_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "override_image_id")

    @override_image_id.setter
    def override_image_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "override_image_id", value)

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        More private networks to join.
        """
        return pulumi.get(self, "private_network_ids")

    @private_network_ids.setter
    def private_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "private_network_ids", value)

    @property
    @pulumi.getter(name="publicNetworkId")
    def public_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        If set, machine will also get a public IP.
        """
        return pulumi.get(self, "public_network_id")

    @public_network_id.setter
    def public_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_network_id", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]]]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="tritonTags")
    def triton_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Extra tags to attach to instances from a node pool.
        """
        return pulumi.get(self, "triton_tags")

    @triton_tags.setter
    def triton_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "triton_tags", value)


if not MYPY:
    class Mk8sTritonProviderNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[builtins.str]]
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Mk8sTritonProviderNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Mk8sTritonProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OrgAuthConfigArgsDict(TypedDict):
        domain_auto_members: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        List of domains which will auto-provision users when authenticating using SAML.
        """
        saml_only: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enforce SAML only authentication.
        """
elif False:
    OrgAuthConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgAuthConfigArgs:
    def __init__(__self__, *,
                 domain_auto_members: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 saml_only: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domain_auto_members: List of domains which will auto-provision users when authenticating using SAML.
        :param pulumi.Input[builtins.bool] saml_only: Enforce SAML only authentication.
        """
        pulumi.set(__self__, "domain_auto_members", domain_auto_members)
        if saml_only is not None:
            pulumi.set(__self__, "saml_only", saml_only)

    @property
    @pulumi.getter(name="domainAutoMembers")
    def domain_auto_members(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        List of domains which will auto-provision users when authenticating using SAML.
        """
        return pulumi.get(self, "domain_auto_members")

    @domain_auto_members.setter
    def domain_auto_members(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "domain_auto_members", value)

    @property
    @pulumi.getter(name="samlOnly")
    def saml_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enforce SAML only authentication.
        """
        return pulumi.get(self, "saml_only")

    @saml_only.setter
    def saml_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "saml_only", value)


if not MYPY:
    class OrgLoggingCloudWatchLoggingArgsDict(TypedDict):
        credentials: pulumi.Input[builtins.str]
        """
        Full Link to a secret of type `opaque`.
        """
        group_name: pulumi.Input[builtins.str]
        """
        A container for log streams with common settings like retention. Used to categorize logs by application or service type.
        """
        region: pulumi.Input[builtins.str]
        """
        Valid AWS region.
        """
        stream_name: pulumi.Input[builtins.str]
        """
        A sequence of log events from the same source within a log group. Typically represents individual instances of services or applications.
        """
        extract_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Enable custom data extraction from log entries for enhanced querying and analysis.
        """
        retention_days: NotRequired[pulumi.Input[builtins.int]]
        """
        Length, in days, for how log data is kept before it is automatically deleted.
        """
elif False:
    OrgLoggingCloudWatchLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingCloudWatchLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[builtins.str],
                 group_name: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 stream_name: pulumi.Input[builtins.str],
                 extract_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 retention_days: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] credentials: Full Link to a secret of type `opaque`.
        :param pulumi.Input[builtins.str] group_name: A container for log streams with common settings like retention. Used to categorize logs by application or service type.
        :param pulumi.Input[builtins.str] region: Valid AWS region.
        :param pulumi.Input[builtins.str] stream_name: A sequence of log events from the same source within a log group. Typically represents individual instances of services or applications.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] extract_fields: Enable custom data extraction from log entries for enhanced querying and analysis.
        :param pulumi.Input[builtins.int] retention_days: Length, in days, for how log data is kept before it is automatically deleted.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "stream_name", stream_name)
        if extract_fields is not None:
            pulumi.set(__self__, "extract_fields", extract_fields)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full Link to a secret of type `opaque`.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[builtins.str]:
        """
        A container for log streams with common settings like retention. Used to categorize logs by application or service type.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Valid AWS region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[builtins.str]:
        """
        A sequence of log events from the same source within a log group. Typically represents individual instances of services or applications.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="extractFields")
    def extract_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Enable custom data extraction from log entries for enhanced querying and analysis.
        """
        return pulumi.get(self, "extract_fields")

    @extract_fields.setter
    def extract_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "extract_fields", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Length, in days, for how log data is kept before it is automatically deleted.
        """
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "retention_days", value)


if not MYPY:
    class OrgLoggingCoralogixLoggingArgsDict(TypedDict):
        cluster: pulumi.Input[builtins.str]
        """
        Coralogix cluster URI.
        """
        credentials: pulumi.Input[builtins.str]
        """
        Full link to referenced Opaque Secret.
        """
        app: NotRequired[pulumi.Input[builtins.str]]
        """
        App name to be displayed in Coralogix dashboard.
        """
        subsystem: NotRequired[pulumi.Input[builtins.str]]
        """
        Subsystem name to be displayed in Coralogix dashboard.
        """
elif False:
    OrgLoggingCoralogixLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingCoralogixLoggingArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[builtins.str],
                 credentials: pulumi.Input[builtins.str],
                 app: Optional[pulumi.Input[builtins.str]] = None,
                 subsystem: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cluster: Coralogix cluster URI.
        :param pulumi.Input[builtins.str] credentials: Full link to referenced Opaque Secret.
        :param pulumi.Input[builtins.str] app: App name to be displayed in Coralogix dashboard.
        :param pulumi.Input[builtins.str] subsystem: Subsystem name to be displayed in Coralogix dashboard.
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "credentials", credentials)
        if app is not None:
            pulumi.set(__self__, "app", app)
        if subsystem is not None:
            pulumi.set(__self__, "subsystem", subsystem)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[builtins.str]:
        """
        Coralogix cluster URI.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        App name to be displayed in Coralogix dashboard.
        """
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter
    def subsystem(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Subsystem name to be displayed in Coralogix dashboard.
        """
        return pulumi.get(self, "subsystem")

    @subsystem.setter
    def subsystem(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subsystem", value)


if not MYPY:
    class OrgLoggingDatadogLoggingArgsDict(TypedDict):
        credentials: pulumi.Input[builtins.str]
        """
        Full link to referenced Opaque Secret.
        """
        host: pulumi.Input[builtins.str]
        """
        Datadog host URI.
        """
elif False:
    OrgLoggingDatadogLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingDatadogLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[builtins.str],
                 host: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] credentials: Full link to referenced Opaque Secret.
        :param pulumi.Input[builtins.str] host: Datadog host URI.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        """
        Datadog host URI.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)


if not MYPY:
    class OrgLoggingElasticLoggingArgsDict(TypedDict):
        aws: NotRequired[pulumi.Input['OrgLoggingElasticLoggingAwsArgsDict']]
        """
        For targeting Amazon Web Services (AWS) ElasticSearch.
        """
        elastic_cloud: NotRequired[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgsDict']]
        """
        For targeting Elastic Cloud.
        """
        generic: NotRequired[pulumi.Input['OrgLoggingElasticLoggingGenericArgsDict']]
        """
        For targeting generic Elastic Search providers.
        """
elif False:
    OrgLoggingElasticLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingElasticLoggingArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['OrgLoggingElasticLoggingAwsArgs']] = None,
                 elastic_cloud: Optional[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs']] = None,
                 generic: Optional[pulumi.Input['OrgLoggingElasticLoggingGenericArgs']] = None):
        """
        :param pulumi.Input['OrgLoggingElasticLoggingAwsArgs'] aws: For targeting Amazon Web Services (AWS) ElasticSearch.
        :param pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs'] elastic_cloud: For targeting Elastic Cloud.
        :param pulumi.Input['OrgLoggingElasticLoggingGenericArgs'] generic: For targeting generic Elastic Search providers.
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if elastic_cloud is not None:
            pulumi.set(__self__, "elastic_cloud", elastic_cloud)
        if generic is not None:
            pulumi.set(__self__, "generic", generic)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['OrgLoggingElasticLoggingAwsArgs']]:
        """
        For targeting Amazon Web Services (AWS) ElasticSearch.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['OrgLoggingElasticLoggingAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="elasticCloud")
    def elastic_cloud(self) -> Optional[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs']]:
        """
        For targeting Elastic Cloud.
        """
        return pulumi.get(self, "elastic_cloud")

    @elastic_cloud.setter
    def elastic_cloud(self, value: Optional[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs']]):
        pulumi.set(self, "elastic_cloud", value)

    @property
    @pulumi.getter
    def generic(self) -> Optional[pulumi.Input['OrgLoggingElasticLoggingGenericArgs']]:
        """
        For targeting generic Elastic Search providers.
        """
        return pulumi.get(self, "generic")

    @generic.setter
    def generic(self, value: Optional[pulumi.Input['OrgLoggingElasticLoggingGenericArgs']]):
        pulumi.set(self, "generic", value)


if not MYPY:
    class OrgLoggingElasticLoggingAwsArgsDict(TypedDict):
        credentials: pulumi.Input[builtins.str]
        """
        Full Link to a secret of type `aws`.
        """
        host: pulumi.Input[builtins.str]
        """
        A valid AWS ElasticSearch hostname (must end with es.amazonaws.com).
        """
        index: pulumi.Input[builtins.str]
        """
        Logging Index.
        """
        port: pulumi.Input[builtins.int]
        """
        Port. Default: 443
        """
        region: pulumi.Input[builtins.str]
        """
        Valid AWS region.
        """
        type: pulumi.Input[builtins.str]
        """
        Logging Type.
        """
elif False:
    OrgLoggingElasticLoggingAwsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingElasticLoggingAwsArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[builtins.str],
                 host: pulumi.Input[builtins.str],
                 index: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int],
                 region: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] credentials: Full Link to a secret of type `aws`.
        :param pulumi.Input[builtins.str] host: A valid AWS ElasticSearch hostname (must end with es.amazonaws.com).
        :param pulumi.Input[builtins.str] index: Logging Index.
        :param pulumi.Input[builtins.int] port: Port. Default: 443
        :param pulumi.Input[builtins.str] region: Valid AWS region.
        :param pulumi.Input[builtins.str] type: Logging Type.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full Link to a secret of type `aws`.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        """
        A valid AWS ElasticSearch hostname (must end with es.amazonaws.com).
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[builtins.str]:
        """
        Logging Index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        Port. Default: 443
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        Valid AWS region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Logging Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class OrgLoggingElasticLoggingElasticCloudArgsDict(TypedDict):
        cloud_id: pulumi.Input[builtins.str]
        """
        [Cloud ID](https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html)
        """
        credentials: pulumi.Input[builtins.str]
        """
        Full Link to a secret of type `userpass`.
        """
        index: pulumi.Input[builtins.str]
        """
        Logging Index.
        """
        type: pulumi.Input[builtins.str]
        """
        Logging Type.
        """
elif False:
    OrgLoggingElasticLoggingElasticCloudArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingElasticLoggingElasticCloudArgs:
    def __init__(__self__, *,
                 cloud_id: pulumi.Input[builtins.str],
                 credentials: pulumi.Input[builtins.str],
                 index: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] cloud_id: [Cloud ID](https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html)
        :param pulumi.Input[builtins.str] credentials: Full Link to a secret of type `userpass`.
        :param pulumi.Input[builtins.str] index: Logging Index.
        :param pulumi.Input[builtins.str] type: Logging Type.
        """
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> pulumi.Input[builtins.str]:
        """
        [Cloud ID](https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html)
        """
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full Link to a secret of type `userpass`.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[builtins.str]:
        """
        Logging Index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Logging Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class OrgLoggingElasticLoggingGenericArgsDict(TypedDict):
        credentials: pulumi.Input[builtins.str]
        """
        Full Link to a secret of type `userpass`.
        """
        host: pulumi.Input[builtins.str]
        """
        A valid Elastic Search provider hostname.
        """
        index: pulumi.Input[builtins.str]
        """
        Logging Index.
        """
        path: pulumi.Input[builtins.str]
        """
        Logging path.
        """
        port: pulumi.Input[builtins.int]
        """
        Port. Default: 443
        """
        type: pulumi.Input[builtins.str]
        """
        Logging Type.
        """
elif False:
    OrgLoggingElasticLoggingGenericArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingElasticLoggingGenericArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[builtins.str],
                 host: pulumi.Input[builtins.str],
                 index: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int],
                 type: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] credentials: Full Link to a secret of type `userpass`.
        :param pulumi.Input[builtins.str] host: A valid Elastic Search provider hostname.
        :param pulumi.Input[builtins.str] index: Logging Index.
        :param pulumi.Input[builtins.str] path: Logging path.
        :param pulumi.Input[builtins.int] port: Port. Default: 443
        :param pulumi.Input[builtins.str] type: Logging Type.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full Link to a secret of type `userpass`.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        """
        A valid Elastic Search provider hostname.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[builtins.str]:
        """
        Logging Index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        Logging path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        Port. Default: 443
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Logging Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class OrgLoggingFluentdLoggingArgsDict(TypedDict):
        host: pulumi.Input[builtins.str]
        """
        The hostname or IP address of a remote log storage system.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        Port. Default: 24224
        """
elif False:
    OrgLoggingFluentdLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingFluentdLoggingArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[builtins.str],
                 port: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] host: The hostname or IP address of a remote log storage system.
        :param pulumi.Input[builtins.int] port: Port. Default: 24224
        """
        pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        """
        The hostname or IP address of a remote log storage system.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Port. Default: 24224
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class OrgLoggingLogzioLoggingArgsDict(TypedDict):
        credentials: pulumi.Input[builtins.str]
        """
        Full link to referenced Opaque Secret.
        """
        listener_host: pulumi.Input[builtins.str]
        """
        Logzio listener host URI.
        """
elif False:
    OrgLoggingLogzioLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingLogzioLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[builtins.str],
                 listener_host: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] credentials: Full link to referenced Opaque Secret.
        :param pulumi.Input[builtins.str] listener_host: Logzio listener host URI.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "listener_host", listener_host)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="listenerHost")
    def listener_host(self) -> pulumi.Input[builtins.str]:
        """
        Logzio listener host URI.
        """
        return pulumi.get(self, "listener_host")

    @listener_host.setter
    def listener_host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "listener_host", value)


if not MYPY:
    class OrgLoggingS3LoggingArgsDict(TypedDict):
        bucket: pulumi.Input[builtins.str]
        """
        Name of S3 bucket.
        """
        credentials: pulumi.Input[builtins.str]
        """
        Full link to referenced AWS Secret.
        """
        region: pulumi.Input[builtins.str]
        """
        AWS region where bucket is located.
        """
        prefix: NotRequired[pulumi.Input[builtins.str]]
        """
        Bucket path prefix. Default: "/".
        """
elif False:
    OrgLoggingS3LoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingS3LoggingArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[builtins.str],
                 credentials: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 prefix: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] bucket: Name of S3 bucket.
        :param pulumi.Input[builtins.str] credentials: Full link to referenced AWS Secret.
        :param pulumi.Input[builtins.str] region: AWS region where bucket is located.
        :param pulumi.Input[builtins.str] prefix: Bucket path prefix. Default: "/".
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "region", region)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[builtins.str]:
        """
        Name of S3 bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full link to referenced AWS Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        AWS region where bucket is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Bucket path prefix. Default: "/".
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class OrgLoggingStackdriverLoggingArgsDict(TypedDict):
        credentials: pulumi.Input[builtins.str]
        """
        Full Link to a secret of type `opaque`.
        """
        location: pulumi.Input[builtins.str]
        """
        A Google Cloud Provider region.
        """
elif False:
    OrgLoggingStackdriverLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingStackdriverLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[builtins.str],
                 location: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] credentials: Full Link to a secret of type `opaque`.
        :param pulumi.Input[builtins.str] location: A Google Cloud Provider region.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[builtins.str]:
        """
        Full Link to a secret of type `opaque`.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[builtins.str]:
        """
        A Google Cloud Provider region.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "location", value)


if not MYPY:
    class OrgLoggingSyslogLoggingArgsDict(TypedDict):
        host: pulumi.Input[builtins.str]
        """
        Hostname of Syslog Endpoint.
        """
        port: pulumi.Input[builtins.int]
        """
        Port of Syslog Endpoint.
        """
        format: NotRequired[pulumi.Input[builtins.str]]
        """
        Log Format. Valid values: RFC3164 or RFC5424.
        """
        mode: NotRequired[pulumi.Input[builtins.str]]
        """
        Log Mode. Valid values: TCP, TLS, or UDP.
        """
        severity: NotRequired[pulumi.Input[builtins.int]]
        """
        Severity Level. See documentation for details. Valid values: 0 to 7.
        """
elif False:
    OrgLoggingSyslogLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgLoggingSyslogLoggingArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int],
                 format: Optional[pulumi.Input[builtins.str]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 severity: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] host: Hostname of Syslog Endpoint.
        :param pulumi.Input[builtins.int] port: Port of Syslog Endpoint.
        :param pulumi.Input[builtins.str] format: Log Format. Valid values: RFC3164 or RFC5424.
        :param pulumi.Input[builtins.str] mode: Log Mode. Valid values: TCP, TLS, or UDP.
        :param pulumi.Input[builtins.int] severity: Severity Level. See documentation for details. Valid values: 0 to 7.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        """
        Hostname of Syslog Endpoint.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        Port of Syslog Endpoint.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Log Format. Valid values: RFC3164 or RFC5424.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Log Mode. Valid values: TCP, TLS, or UDP.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Severity Level. See documentation for details. Valid values: 0 to 7.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class OrgObservabilityArgsDict(TypedDict):
        default_alert_emails: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        """
        logs_retention_days: NotRequired[pulumi.Input[builtins.int]]
        """
        Log retention days. Default: 30
        """
        metrics_retention_days: NotRequired[pulumi.Input[builtins.int]]
        """
        Metrics retention days. Default: 30
        """
        traces_retention_days: NotRequired[pulumi.Input[builtins.int]]
        """
        Traces retention days. Default: 30
        """
elif False:
    OrgObservabilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgObservabilityArgs:
    def __init__(__self__, *,
                 default_alert_emails: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 logs_retention_days: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_retention_days: Optional[pulumi.Input[builtins.int]] = None,
                 traces_retention_days: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] default_alert_emails: These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        :param pulumi.Input[builtins.int] logs_retention_days: Log retention days. Default: 30
        :param pulumi.Input[builtins.int] metrics_retention_days: Metrics retention days. Default: 30
        :param pulumi.Input[builtins.int] traces_retention_days: Traces retention days. Default: 30
        """
        if default_alert_emails is not None:
            pulumi.set(__self__, "default_alert_emails", default_alert_emails)
        if logs_retention_days is not None:
            pulumi.set(__self__, "logs_retention_days", logs_retention_days)
        if metrics_retention_days is not None:
            pulumi.set(__self__, "metrics_retention_days", metrics_retention_days)
        if traces_retention_days is not None:
            pulumi.set(__self__, "traces_retention_days", traces_retention_days)

    @property
    @pulumi.getter(name="defaultAlertEmails")
    def default_alert_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        """
        return pulumi.get(self, "default_alert_emails")

    @default_alert_emails.setter
    def default_alert_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "default_alert_emails", value)

    @property
    @pulumi.getter(name="logsRetentionDays")
    def logs_retention_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Log retention days. Default: 30
        """
        return pulumi.get(self, "logs_retention_days")

    @logs_retention_days.setter
    def logs_retention_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "logs_retention_days", value)

    @property
    @pulumi.getter(name="metricsRetentionDays")
    def metrics_retention_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Metrics retention days. Default: 30
        """
        return pulumi.get(self, "metrics_retention_days")

    @metrics_retention_days.setter
    def metrics_retention_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "metrics_retention_days", value)

    @property
    @pulumi.getter(name="tracesRetentionDays")
    def traces_retention_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Traces retention days. Default: 30
        """
        return pulumi.get(self, "traces_retention_days")

    @traces_retention_days.setter
    def traces_retention_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "traces_retention_days", value)


if not MYPY:
    class OrgSecurityArgsDict(TypedDict):
        threat_detection: NotRequired[pulumi.Input['OrgSecurityThreatDetectionArgsDict']]
elif False:
    OrgSecurityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgSecurityArgs:
    def __init__(__self__, *,
                 threat_detection: Optional[pulumi.Input['OrgSecurityThreatDetectionArgs']] = None):
        if threat_detection is not None:
            pulumi.set(__self__, "threat_detection", threat_detection)

    @property
    @pulumi.getter(name="threatDetection")
    def threat_detection(self) -> Optional[pulumi.Input['OrgSecurityThreatDetectionArgs']]:
        return pulumi.get(self, "threat_detection")

    @threat_detection.setter
    def threat_detection(self, value: Optional[pulumi.Input['OrgSecurityThreatDetectionArgs']]):
        pulumi.set(self, "threat_detection", value)


if not MYPY:
    class OrgSecurityThreatDetectionArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Indicates whether threat detection should be forwarded or not.
        """
        minimum_severity: NotRequired[pulumi.Input[builtins.str]]
        """
        Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        """
        syslog: NotRequired[pulumi.Input['OrgSecurityThreatDetectionSyslogArgsDict']]
        """
        Configuration for syslog forwarding.
        """
elif False:
    OrgSecurityThreatDetectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgSecurityThreatDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 minimum_severity: Optional[pulumi.Input[builtins.str]] = None,
                 syslog: Optional[pulumi.Input['OrgSecurityThreatDetectionSyslogArgs']] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Indicates whether threat detection should be forwarded or not.
        :param pulumi.Input[builtins.str] minimum_severity: Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        :param pulumi.Input['OrgSecurityThreatDetectionSyslogArgs'] syslog: Configuration for syslog forwarding.
        """
        pulumi.set(__self__, "enabled", enabled)
        if minimum_severity is not None:
            pulumi.set(__self__, "minimum_severity", minimum_severity)
        if syslog is not None:
            pulumi.set(__self__, "syslog", syslog)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Indicates whether threat detection should be forwarded or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="minimumSeverity")
    def minimum_severity(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        """
        return pulumi.get(self, "minimum_severity")

    @minimum_severity.setter
    def minimum_severity(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "minimum_severity", value)

    @property
    @pulumi.getter
    def syslog(self) -> Optional[pulumi.Input['OrgSecurityThreatDetectionSyslogArgs']]:
        """
        Configuration for syslog forwarding.
        """
        return pulumi.get(self, "syslog")

    @syslog.setter
    def syslog(self, value: Optional[pulumi.Input['OrgSecurityThreatDetectionSyslogArgs']]):
        pulumi.set(self, "syslog", value)


if not MYPY:
    class OrgSecurityThreatDetectionSyslogArgsDict(TypedDict):
        host: pulumi.Input[builtins.str]
        """
        The hostname to send syslog messages to.
        """
        port: pulumi.Input[builtins.int]
        """
        The port to send syslog messages to.
        """
        transport: NotRequired[pulumi.Input[builtins.str]]
        """
        The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
elif False:
    OrgSecurityThreatDetectionSyslogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgSecurityThreatDetectionSyslogArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int],
                 transport: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] host: The hostname to send syslog messages to.
        :param pulumi.Input[builtins.int] port: The port to send syslog messages to.
        :param pulumi.Input[builtins.str] transport: The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        """
        The hostname to send syslog messages to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        The port to send syslog messages to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "transport", value)


if not MYPY:
    class OrgStatusArgsDict(TypedDict):
        account_link: NotRequired[pulumi.Input[builtins.str]]
        """
        The link of the account the org belongs to.
        """
        active: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the org is active or not.
        """
elif False:
    OrgStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgStatusArgs:
    def __init__(__self__, *,
                 account_link: Optional[pulumi.Input[builtins.str]] = None,
                 active: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] account_link: The link of the account the org belongs to.
        :param pulumi.Input[builtins.bool] active: Indicates whether the org is active or not.
        """
        if account_link is not None:
            pulumi.set(__self__, "account_link", account_link)
        if active is not None:
            pulumi.set(__self__, "active", active)

    @property
    @pulumi.getter(name="accountLink")
    def account_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The link of the account the org belongs to.
        """
        return pulumi.get(self, "account_link")

    @account_link.setter
    def account_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_link", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the org is active or not.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "active", value)


if not MYPY:
    class OrgTracingControlplaneTracingArgsDict(TypedDict):
        sampling: pulumi.Input[builtins.float]
        """
        Determines what percentage of requests should be traced.
        """
        custom_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of custom tags.
        """
elif False:
    OrgTracingControlplaneTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgTracingControlplaneTracingArgs:
    def __init__(__self__, *,
                 sampling: pulumi.Input[builtins.float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.float] sampling: Determines what percentage of requests should be traced.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[builtins.float]:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class OrgTracingLightstepTracingArgsDict(TypedDict):
        endpoint: pulumi.Input[builtins.str]
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        sampling: pulumi.Input[builtins.float]
        """
        Determines what percentage of requests should be traced.
        """
        credentials: NotRequired[pulumi.Input[builtins.str]]
        """
        Full link to referenced Opaque Secret.
        """
        custom_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of custom tags.
        """
elif False:
    OrgTracingLightstepTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgTracingLightstepTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[builtins.str],
                 sampling: pulumi.Input[builtins.float],
                 credentials: Optional[pulumi.Input[builtins.str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param pulumi.Input[builtins.float] sampling: Determines what percentage of requests should be traced.
        :param pulumi.Input[builtins.str] credentials: Full link to referenced Opaque Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[builtins.float]:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class OrgTracingOtelTracingArgsDict(TypedDict):
        endpoint: pulumi.Input[builtins.str]
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        sampling: pulumi.Input[builtins.float]
        """
        Determines what percentage of requests should be traced.
        """
        custom_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of custom tags.
        """
elif False:
    OrgTracingOtelTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgTracingOtelTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[builtins.str],
                 sampling: pulumi.Input[builtins.float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param pulumi.Input[builtins.float] sampling: Determines what percentage of requests should be traced.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[builtins.float]:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class PolicyBindingArgsDict(TypedDict):
        permissions: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        List of permissions to allow.
        """
        principal_links: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        List of the principals this binding will be applied to. Principal links format: `group/GROUP_NAME`, `user/USER_EMAIL`, `gvc/GVC_NAME/identity/IDENTITY_NAME`, `serviceaccount/SERVICE_ACCOUNT_NAME`.
        """
elif False:
    PolicyBindingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyBindingArgs:
    def __init__(__self__, *,
                 permissions: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 principal_links: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] permissions: List of permissions to allow.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] principal_links: List of the principals this binding will be applied to. Principal links format: `group/GROUP_NAME`, `user/USER_EMAIL`, `gvc/GVC_NAME/identity/IDENTITY_NAME`, `serviceaccount/SERVICE_ACCOUNT_NAME`.
        """
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "principal_links", principal_links)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        List of permissions to allow.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="principalLinks")
    def principal_links(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        List of the principals this binding will be applied to. Principal links format: `group/GROUP_NAME`, `user/USER_EMAIL`, `gvc/GVC_NAME/identity/IDENTITY_NAME`, `serviceaccount/SERVICE_ACCOUNT_NAME`.
        """
        return pulumi.get(self, "principal_links")

    @principal_links.setter
    def principal_links(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "principal_links", value)


if not MYPY:
    class PolicyTargetQueryArgsDict(TypedDict):
        fetch: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        spec: NotRequired[pulumi.Input['PolicyTargetQuerySpecArgsDict']]
elif False:
    PolicyTargetQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyTargetQueryArgs:
    def __init__(__self__, *,
                 fetch: Optional[pulumi.Input[builtins.str]] = None,
                 spec: Optional[pulumi.Input['PolicyTargetQuerySpecArgs']] = None):
        """
        :param pulumi.Input[builtins.str] fetch: Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        if fetch is not None:
            pulumi.set(__self__, "fetch", fetch)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def fetch(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        return pulumi.get(self, "fetch")

    @fetch.setter
    def fetch(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fetch", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['PolicyTargetQuerySpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['PolicyTargetQuerySpecArgs']]):
        pulumi.set(self, "spec", value)


if not MYPY:
    class PolicyTargetQuerySpecArgsDict(TypedDict):
        match: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        terms: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgsDict']]]]
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
elif False:
    PolicyTargetQuerySpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyTargetQuerySpecArgs:
    def __init__(__self__, *,
                 match: Optional[pulumi.Input[builtins.str]] = None,
                 terms: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] match: Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]] terms: Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        if match is not None:
            pulumi.set(__self__, "match", match)
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]]]:
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]]]):
        pulumi.set(self, "terms", value)


if not MYPY:
    class PolicyTargetQuerySpecTermArgsDict(TypedDict):
        op: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        property: NotRequired[pulumi.Input[builtins.str]]
        """
        Property to use for query evaluation.
        """
        rel: NotRequired[pulumi.Input[builtins.str]]
        """
        Relation to use for query evaluation.
        """
        tag: NotRequired[pulumi.Input[builtins.str]]
        """
        Tag key to use for query evaluation.
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        Testing value for query evaluation.
        """
elif False:
    PolicyTargetQuerySpecTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyTargetQuerySpecTermArgs:
    def __init__(__self__, *,
                 op: Optional[pulumi.Input[builtins.str]] = None,
                 property: Optional[pulumi.Input[builtins.str]] = None,
                 rel: Optional[pulumi.Input[builtins.str]] = None,
                 tag: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] op: Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        :param pulumi.Input[builtins.str] property: Property to use for query evaluation.
        :param pulumi.Input[builtins.str] rel: Relation to use for query evaluation.
        :param pulumi.Input[builtins.str] tag: Tag key to use for query evaluation.
        :param pulumi.Input[builtins.str] value: Testing value for query evaluation.
        """
        if op is not None:
            pulumi.set(__self__, "op", op)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def rel(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Relation to use for query evaluation.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tag key to use for query evaluation.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Testing value for query evaluation.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Property to use for query evaluation.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "property", value)


if not MYPY:
    class SecretAwsArgsDict(TypedDict):
        access_key: pulumi.Input[builtins.str]
        """
        Access Key provided by AWS.
        """
        secret_key: pulumi.Input[builtins.str]
        """
        Secret Key provided by AWS.
        """
        external_id: NotRequired[pulumi.Input[builtins.str]]
        """
        AWS IAM Role External ID.
        """
        role_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        Role ARN provided by AWS.
        """
elif False:
    SecretAwsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretAwsArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[builtins.str],
                 secret_key: pulumi.Input[builtins.str],
                 external_id: Optional[pulumi.Input[builtins.str]] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] access_key: Access Key provided by AWS.
        :param pulumi.Input[builtins.str] secret_key: Secret Key provided by AWS.
        :param pulumi.Input[builtins.str] external_id: AWS IAM Role External ID.
        :param pulumi.Input[builtins.str] role_arn: Role ARN provided by AWS.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "secret_key", secret_key)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[builtins.str]:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[builtins.str]:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        AWS IAM Role External ID.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_arn", value)


if not MYPY:
    class SecretAzureConnectorArgsDict(TypedDict):
        code: pulumi.Input[builtins.str]
        """
        Code/Key to authenticate to deployment URL.
        """
        url: pulumi.Input[builtins.str]
        """
        Deployment URL.
        """
elif False:
    SecretAzureConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretAzureConnectorArgs:
    def __init__(__self__, *,
                 code: pulumi.Input[builtins.str],
                 url: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] code: Code/Key to authenticate to deployment URL.
        :param pulumi.Input[builtins.str] url: Deployment URL.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> pulumi.Input[builtins.str]:
        """
        Code/Key to authenticate to deployment URL.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[builtins.str]:
        """
        Deployment URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "url", value)


if not MYPY:
    class SecretEcrArgsDict(TypedDict):
        access_key: pulumi.Input[builtins.str]
        """
        Access Key provided by AWS.
        """
        repos: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        List of ECR repositories.
        """
        secret_key: pulumi.Input[builtins.str]
        """
        Secret Key provided by AWS.
        """
        external_id: NotRequired[pulumi.Input[builtins.str]]
        """
        AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
        role_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        Role ARN provided by AWS.
        """
elif False:
    SecretEcrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretEcrArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[builtins.str],
                 repos: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 secret_key: pulumi.Input[builtins.str],
                 external_id: Optional[pulumi.Input[builtins.str]] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] access_key: Access Key provided by AWS.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] repos: List of ECR repositories.
        :param pulumi.Input[builtins.str] secret_key: Secret Key provided by AWS.
        :param pulumi.Input[builtins.str] external_id: AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        :param pulumi.Input[builtins.str] role_arn: Role ARN provided by AWS.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "repos", repos)
        pulumi.set(__self__, "secret_key", secret_key)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[builtins.str]:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def repos(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        List of ECR repositories.
        """
        return pulumi.get(self, "repos")

    @repos.setter
    def repos(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "repos", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[builtins.str]:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_arn", value)


if not MYPY:
    class SecretKeypairArgsDict(TypedDict):
        secret_key: pulumi.Input[builtins.str]
        """
        Secret/Private Key.
        """
        passphrase: NotRequired[pulumi.Input[builtins.str]]
        """
        Passphrase for private key.
        """
        public_key: NotRequired[pulumi.Input[builtins.str]]
        """
        Public Key.
        """
elif False:
    SecretKeypairArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretKeypairArgs:
    def __init__(__self__, *,
                 secret_key: pulumi.Input[builtins.str],
                 passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 public_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] secret_key: Secret/Private Key.
        :param pulumi.Input[builtins.str] passphrase: Passphrase for private key.
        :param pulumi.Input[builtins.str] public_key: Public Key.
        """
        pulumi.set(__self__, "secret_key", secret_key)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[builtins.str]:
        """
        Secret/Private Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Passphrase for private key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Public Key.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_key", value)


if not MYPY:
    class SecretNatsAccountArgsDict(TypedDict):
        account_id: pulumi.Input[builtins.str]
        """
        Account ID.
        """
        private_key: pulumi.Input[builtins.str]
        """
        Private Key.
        """
elif False:
    SecretNatsAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretNatsAccountArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[builtins.str],
                 private_key: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] account_id: Account ID.
        :param pulumi.Input[builtins.str] private_key: Private Key.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[builtins.str]:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[builtins.str]:
        """
        Private Key.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "private_key", value)


if not MYPY:
    class SecretOpaqueArgsDict(TypedDict):
        payload: pulumi.Input[builtins.str]
        """
        Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
        encoding: NotRequired[pulumi.Input[builtins.str]]
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
elif False:
    SecretOpaqueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretOpaqueArgs:
    def __init__(__self__, *,
                 payload: pulumi.Input[builtins.str],
                 encoding: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] payload: Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        :param pulumi.Input[builtins.str] encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        """
        pulumi.set(__self__, "payload", payload)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Input[builtins.str]:
        """
        Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "encoding", value)


if not MYPY:
    class SecretTlsArgsDict(TypedDict):
        cert: pulumi.Input[builtins.str]
        """
        Public Certificate.
        """
        key: pulumi.Input[builtins.str]
        """
        Private Certificate.
        """
        chain: NotRequired[pulumi.Input[builtins.str]]
        """
        Chain Certificate.
        """
elif False:
    SecretTlsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretTlsArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input[builtins.str],
                 key: pulumi.Input[builtins.str],
                 chain: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cert: Public Certificate.
        :param pulumi.Input[builtins.str] key: Private Certificate.
        :param pulumi.Input[builtins.str] chain: Chain Certificate.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)
        if chain is not None:
            pulumi.set(__self__, "chain", chain)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input[builtins.str]:
        """
        Public Certificate.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        Private Certificate.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def chain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Chain Certificate.
        """
        return pulumi.get(self, "chain")

    @chain.setter
    def chain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "chain", value)


if not MYPY:
    class SecretUserpassArgsDict(TypedDict):
        password: pulumi.Input[builtins.str]
        """
        Password.
        """
        username: pulumi.Input[builtins.str]
        """
        Username.
        """
        encoding: NotRequired[pulumi.Input[builtins.str]]
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
elif False:
    SecretUserpassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretUserpassArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[builtins.str],
                 username: pulumi.Input[builtins.str],
                 encoding: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] password: Password.
        :param pulumi.Input[builtins.str] username: Username.
        :param pulumi.Input[builtins.str] encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[builtins.str]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[builtins.str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "encoding", value)


if not MYPY:
    class VolumeSetAutoscalingArgsDict(TypedDict):
        max_capacity: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum size in GB for a volume in this set. A volume cannot grow to be bigger than this value. Minimum value: `10`.
        """
        min_free_percentage: NotRequired[pulumi.Input[builtins.int]]
        """
        The guaranteed free space on the volume as a percentage of the volume's total size. Control Plane will try to maintain at least that many percent free by scaling up the total size. Minimum percentage: `1`. Maximum Percentage: `100`.
        """
        scaling_factor: NotRequired[pulumi.Input[builtins.float]]
        """
        When scaling is necessary, then `new_capacity = current_capacity * storageScalingFactor`. Minimum value: `1.1`.
        """
elif False:
    VolumeSetAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeSetAutoscalingArgs:
    def __init__(__self__, *,
                 max_capacity: Optional[pulumi.Input[builtins.int]] = None,
                 min_free_percentage: Optional[pulumi.Input[builtins.int]] = None,
                 scaling_factor: Optional[pulumi.Input[builtins.float]] = None):
        """
        :param pulumi.Input[builtins.int] max_capacity: The maximum size in GB for a volume in this set. A volume cannot grow to be bigger than this value. Minimum value: `10`.
        :param pulumi.Input[builtins.int] min_free_percentage: The guaranteed free space on the volume as a percentage of the volume's total size. Control Plane will try to maintain at least that many percent free by scaling up the total size. Minimum percentage: `1`. Maximum Percentage: `100`.
        :param pulumi.Input[builtins.float] scaling_factor: When scaling is necessary, then `new_capacity = current_capacity * storageScalingFactor`. Minimum value: `1.1`.
        """
        if max_capacity is not None:
            pulumi.set(__self__, "max_capacity", max_capacity)
        if min_free_percentage is not None:
            pulumi.set(__self__, "min_free_percentage", min_free_percentage)
        if scaling_factor is not None:
            pulumi.set(__self__, "scaling_factor", scaling_factor)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum size in GB for a volume in this set. A volume cannot grow to be bigger than this value. Minimum value: `10`.
        """
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_capacity", value)

    @property
    @pulumi.getter(name="minFreePercentage")
    def min_free_percentage(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The guaranteed free space on the volume as a percentage of the volume's total size. Control Plane will try to maintain at least that many percent free by scaling up the total size. Minimum percentage: `1`. Maximum Percentage: `100`.
        """
        return pulumi.get(self, "min_free_percentage")

    @min_free_percentage.setter
    def min_free_percentage(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_free_percentage", value)

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        When scaling is necessary, then `new_capacity = current_capacity * storageScalingFactor`. Minimum value: `1.1`.
        """
        return pulumi.get(self, "scaling_factor")

    @scaling_factor.setter
    def scaling_factor(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "scaling_factor", value)


if not MYPY:
    class VolumeSetMountOptionsArgsDict(TypedDict):
        resources: NotRequired[pulumi.Input['VolumeSetMountOptionsResourcesArgsDict']]
        """
        For volume sets using the shared file system, this object specifies the CPU and memory resources allotted to each mount point.
        """
elif False:
    VolumeSetMountOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeSetMountOptionsArgs:
    def __init__(__self__, *,
                 resources: Optional[pulumi.Input['VolumeSetMountOptionsResourcesArgs']] = None):
        """
        :param pulumi.Input['VolumeSetMountOptionsResourcesArgs'] resources: For volume sets using the shared file system, this object specifies the CPU and memory resources allotted to each mount point.
        """
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['VolumeSetMountOptionsResourcesArgs']]:
        """
        For volume sets using the shared file system, this object specifies the CPU and memory resources allotted to each mount point.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['VolumeSetMountOptionsResourcesArgs']]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class VolumeSetMountOptionsResourcesArgsDict(TypedDict):
        max_cpu: NotRequired[pulumi.Input[builtins.str]]
        max_memory: NotRequired[pulumi.Input[builtins.str]]
        min_cpu: NotRequired[pulumi.Input[builtins.str]]
        min_memory: NotRequired[pulumi.Input[builtins.str]]
elif False:
    VolumeSetMountOptionsResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeSetMountOptionsResourcesArgs:
    def __init__(__self__, *,
                 max_cpu: Optional[pulumi.Input[builtins.str]] = None,
                 max_memory: Optional[pulumi.Input[builtins.str]] = None,
                 min_cpu: Optional[pulumi.Input[builtins.str]] = None,
                 min_memory: Optional[pulumi.Input[builtins.str]] = None):
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)

    @property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_cpu")

    @max_cpu.setter
    def max_cpu(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_cpu", value)

    @property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_memory")

    @max_memory.setter
    def max_memory(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_memory", value)

    @property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "min_cpu")

    @min_cpu.setter
    def min_cpu(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_cpu", value)

    @property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "min_memory")

    @min_memory.setter
    def min_memory(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_memory", value)


if not MYPY:
    class VolumeSetSnapshotsArgsDict(TypedDict):
        create_final_snapshot: NotRequired[pulumi.Input[builtins.bool]]
        """
        If true, a volume snapshot will be created immediately before deletion of any volume in this set. Default: `true`
        """
        retention_duration: NotRequired[pulumi.Input[builtins.str]]
        """
        The default retention period for volume snapshots. This string should contain a floating point number followed by either d, h, or m. For example, "10d" would retain snapshots for 10 days.
        """
        schedule: NotRequired[pulumi.Input[builtins.str]]
        """
        A standard cron schedule expression used to determine when a snapshot will be taken. (i.e., `0 * * * *` Every hour). Note: snapshots cannot be scheduled more often than once per hour.
        """
elif False:
    VolumeSetSnapshotsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeSetSnapshotsArgs:
    def __init__(__self__, *,
                 create_final_snapshot: Optional[pulumi.Input[builtins.bool]] = None,
                 retention_duration: Optional[pulumi.Input[builtins.str]] = None,
                 schedule: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] create_final_snapshot: If true, a volume snapshot will be created immediately before deletion of any volume in this set. Default: `true`
        :param pulumi.Input[builtins.str] retention_duration: The default retention period for volume snapshots. This string should contain a floating point number followed by either d, h, or m. For example, "10d" would retain snapshots for 10 days.
        :param pulumi.Input[builtins.str] schedule: A standard cron schedule expression used to determine when a snapshot will be taken. (i.e., `0 * * * *` Every hour). Note: snapshots cannot be scheduled more often than once per hour.
        """
        if create_final_snapshot is not None:
            pulumi.set(__self__, "create_final_snapshot", create_final_snapshot)
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter(name="createFinalSnapshot")
    def create_final_snapshot(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If true, a volume snapshot will be created immediately before deletion of any volume in this set. Default: `true`
        """
        return pulumi.get(self, "create_final_snapshot")

    @create_final_snapshot.setter
    def create_final_snapshot(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "create_final_snapshot", value)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default retention period for volume snapshots. This string should contain a floating point number followed by either d, h, or m. For example, "10d" would retain snapshots for 10 days.
        """
        return pulumi.get(self, "retention_duration")

    @retention_duration.setter
    def retention_duration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "retention_duration", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A standard cron schedule expression used to determine when a snapshot will be taken. (i.e., `0 * * * *` Every hour). Note: snapshots cannot be scheduled more often than once per hour.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schedule", value)


if not MYPY:
    class VolumeSetStatusArgsDict(TypedDict):
        binding_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Uniquely identifies the connection between the volume set and its workload. Every time a new connection is made, a new id is generated (e.g., If a workload is updated to remove the volume set, then updated again to reattach it, the volume set will have a new binding id).
        """
        locations: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Contains a list of actual volumes grouped by location.
        """
        parent_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The GVC ID.
        """
        used_by_workload: NotRequired[pulumi.Input[builtins.str]]
        """
        The url of the workload currently using this volume set (if any).
        """
elif False:
    VolumeSetStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeSetStatusArgs:
    def __init__(__self__, *,
                 binding_id: Optional[pulumi.Input[builtins.str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 parent_id: Optional[pulumi.Input[builtins.str]] = None,
                 used_by_workload: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] binding_id: Uniquely identifies the connection between the volume set and its workload. Every time a new connection is made, a new id is generated (e.g., If a workload is updated to remove the volume set, then updated again to reattach it, the volume set will have a new binding id).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] locations: Contains a list of actual volumes grouped by location.
        :param pulumi.Input[builtins.str] parent_id: The GVC ID.
        :param pulumi.Input[builtins.str] used_by_workload: The url of the workload currently using this volume set (if any).
        """
        if binding_id is not None:
            pulumi.set(__self__, "binding_id", binding_id)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if used_by_workload is not None:
            pulumi.set(__self__, "used_by_workload", used_by_workload)

    @property
    @pulumi.getter(name="bindingId")
    def binding_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Uniquely identifies the connection between the volume set and its workload. Every time a new connection is made, a new id is generated (e.g., If a workload is updated to remove the volume set, then updated again to reattach it, the volume set will have a new binding id).
        """
        return pulumi.get(self, "binding_id")

    @binding_id.setter
    def binding_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "binding_id", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Contains a list of actual volumes grouped by location.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The GVC ID.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="usedByWorkload")
    def used_by_workload(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The url of the workload currently using this volume set (if any).
        """
        return pulumi.get(self, "used_by_workload")

    @used_by_workload.setter
    def used_by_workload(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "used_by_workload", value)


if not MYPY:
    class WorkloadContainerArgsDict(TypedDict):
        image: pulumi.Input[builtins.str]
        """
        The full image and tag path.
        """
        name: pulumi.Input[builtins.str]
        """
        Name of the container.
        """
        args: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        """
        command: NotRequired[pulumi.Input[builtins.str]]
        """
        Override the entry point.
        """
        cpu: NotRequired[pulumi.Input[builtins.str]]
        """
        Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        """
        env: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Name-Value list of environment variables.
        """
        gpu_custom: NotRequired[pulumi.Input['WorkloadContainerGpuCustomArgsDict']]
        gpu_nvidia: NotRequired[pulumi.Input['WorkloadContainerGpuNvidiaArgsDict']]
        """
        GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        """
        inherit_env: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        """
        lifecycle: NotRequired[pulumi.Input['WorkloadContainerLifecycleArgsDict']]
        """
        Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        """
        liveness_probe: NotRequired[pulumi.Input['WorkloadContainerLivenessProbeArgsDict']]
        """
        Liveness Probe
        """
        memory: NotRequired[pulumi.Input[builtins.str]]
        """
        Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        """
        metrics: NotRequired[pulumi.Input['WorkloadContainerMetricsArgsDict']]
        """
        [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        """
        min_cpu: NotRequired[pulumi.Input[builtins.str]]
        """
        Minimum CPU when capacity AI is enabled.
        """
        min_memory: NotRequired[pulumi.Input[builtins.str]]
        """
        Minimum memory when capacity AI is enabled.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgsDict']]]]
        """
        Communication endpoints used by the workload to send and receive network traffic.
        """
        readiness_probe: NotRequired[pulumi.Input['WorkloadContainerReadinessProbeArgsDict']]
        """
        Readiness Probe
        """
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgsDict']]]]
        """
        Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        """
        working_directory: NotRequired[pulumi.Input[builtins.str]]
        """
        Override the working directory. Must be an absolute path.
        """
elif False:
    WorkloadContainerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 command: Optional[pulumi.Input[builtins.str]] = None,
                 cpu: Optional[pulumi.Input[builtins.str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 gpu_custom: Optional[pulumi.Input['WorkloadContainerGpuCustomArgs']] = None,
                 gpu_nvidia: Optional[pulumi.Input['WorkloadContainerGpuNvidiaArgs']] = None,
                 inherit_env: Optional[pulumi.Input[builtins.bool]] = None,
                 lifecycle: Optional[pulumi.Input['WorkloadContainerLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']] = None,
                 memory: Optional[pulumi.Input[builtins.str]] = None,
                 metrics: Optional[pulumi.Input['WorkloadContainerMetricsArgs']] = None,
                 min_cpu: Optional[pulumi.Input[builtins.str]] = None,
                 min_memory: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]]] = None,
                 working_directory: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] image: The full image and tag path.
        :param pulumi.Input[builtins.str] name: Name of the container.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] args: Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        :param pulumi.Input[builtins.str] command: Override the entry point.
        :param pulumi.Input[builtins.str] cpu: Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] env: Name-Value list of environment variables.
        :param pulumi.Input['WorkloadContainerGpuNvidiaArgs'] gpu_nvidia: GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        :param pulumi.Input[builtins.bool] inherit_env: Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        :param pulumi.Input['WorkloadContainerLifecycleArgs'] lifecycle: Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        :param pulumi.Input['WorkloadContainerLivenessProbeArgs'] liveness_probe: Liveness Probe
        :param pulumi.Input[builtins.str] memory: Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        :param pulumi.Input['WorkloadContainerMetricsArgs'] metrics: [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        :param pulumi.Input[builtins.str] min_cpu: Minimum CPU when capacity AI is enabled.
        :param pulumi.Input[builtins.str] min_memory: Minimum memory when capacity AI is enabled.
        :param pulumi.Input[builtins.int] port: The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]] ports: Communication endpoints used by the workload to send and receive network traffic.
        :param pulumi.Input['WorkloadContainerReadinessProbeArgs'] readiness_probe: Readiness Probe
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]] volumes: Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        :param pulumi.Input[builtins.str] working_directory: Override the working directory. Must be an absolute path.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if gpu_custom is not None:
            pulumi.set(__self__, "gpu_custom", gpu_custom)
        if gpu_nvidia is not None:
            pulumi.set(__self__, "gpu_nvidia", gpu_nvidia)
        if inherit_env is not None:
            pulumi.set(__self__, "inherit_env", inherit_env)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if port is not None:
            warnings.warn("""The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""", DeprecationWarning)
            pulumi.log.warn("""port is deprecated: The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""")
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[builtins.str]:
        """
        The full image and tag path.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the container.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Override the entry point.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Name-Value list of environment variables.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="gpuCustom")
    def gpu_custom(self) -> Optional[pulumi.Input['WorkloadContainerGpuCustomArgs']]:
        return pulumi.get(self, "gpu_custom")

    @gpu_custom.setter
    def gpu_custom(self, value: Optional[pulumi.Input['WorkloadContainerGpuCustomArgs']]):
        pulumi.set(self, "gpu_custom", value)

    @property
    @pulumi.getter(name="gpuNvidia")
    def gpu_nvidia(self) -> Optional[pulumi.Input['WorkloadContainerGpuNvidiaArgs']]:
        """
        GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        """
        return pulumi.get(self, "gpu_nvidia")

    @gpu_nvidia.setter
    def gpu_nvidia(self, value: Optional[pulumi.Input['WorkloadContainerGpuNvidiaArgs']]):
        pulumi.set(self, "gpu_nvidia", value)

    @property
    @pulumi.getter(name="inheritEnv")
    def inherit_env(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        """
        return pulumi.get(self, "inherit_env")

    @inherit_env.setter
    def inherit_env(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inherit_env", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['WorkloadContainerLifecycleArgs']]:
        """
        Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['WorkloadContainerLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']]:
        """
        Liveness Probe
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['WorkloadContainerMetricsArgs']]:
        """
        [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['WorkloadContainerMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Minimum CPU when capacity AI is enabled.
        """
        return pulumi.get(self, "min_cpu")

    @min_cpu.setter
    def min_cpu(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_cpu", value)

    @property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Minimum memory when capacity AI is enabled.
        """
        return pulumi.get(self, "min_memory")

    @min_memory.setter
    def min_memory(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_memory", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""")
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]]:
        """
        Communication endpoints used by the workload to send and receive network traffic.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']]:
        """
        Readiness Probe
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]]]:
        """
        Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Override the working directory. Must be an absolute path.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "working_directory", value)


if not MYPY:
    class WorkloadContainerGpuCustomArgsDict(TypedDict):
        quantity: pulumi.Input[builtins.int]
        """
        Number of GPUs.
        """
        resource: pulumi.Input[builtins.str]
        runtime_class: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkloadContainerGpuCustomArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerGpuCustomArgs:
    def __init__(__self__, *,
                 quantity: pulumi.Input[builtins.int],
                 resource: pulumi.Input[builtins.str],
                 runtime_class: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] quantity: Number of GPUs.
        """
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "resource", resource)
        if runtime_class is not None:
            pulumi.set(__self__, "runtime_class", runtime_class)

    @property
    @pulumi.getter
    def quantity(self) -> pulumi.Input[builtins.int]:
        """
        Number of GPUs.
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "quantity", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="runtimeClass")
    def runtime_class(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "runtime_class")

    @runtime_class.setter
    def runtime_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "runtime_class", value)


if not MYPY:
    class WorkloadContainerGpuNvidiaArgsDict(TypedDict):
        model: pulumi.Input[builtins.str]
        """
        GPU Model (i.e.: t4)
        """
        quantity: pulumi.Input[builtins.int]
        """
        Number of GPUs.
        """
elif False:
    WorkloadContainerGpuNvidiaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerGpuNvidiaArgs:
    def __init__(__self__, *,
                 model: pulumi.Input[builtins.str],
                 quantity: pulumi.Input[builtins.int]):
        """
        :param pulumi.Input[builtins.str] model: GPU Model (i.e.: t4)
        :param pulumi.Input[builtins.int] quantity: Number of GPUs.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input[builtins.str]:
        """
        GPU Model (i.e.: t4)
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def quantity(self) -> pulumi.Input[builtins.int]:
        """
        Number of GPUs.
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "quantity", value)


if not MYPY:
    class WorkloadContainerLifecycleArgsDict(TypedDict):
        post_start: NotRequired[pulumi.Input['WorkloadContainerLifecyclePostStartArgsDict']]
        pre_stop: NotRequired[pulumi.Input['WorkloadContainerLifecyclePreStopArgsDict']]
elif False:
    WorkloadContainerLifecycleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLifecycleArgs:
    def __init__(__self__, *,
                 post_start: Optional[pulumi.Input['WorkloadContainerLifecyclePostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['WorkloadContainerLifecyclePreStopArgs']] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['WorkloadContainerLifecyclePostStartArgs']]:
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['WorkloadContainerLifecyclePostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['WorkloadContainerLifecyclePreStopArgs']]:
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['WorkloadContainerLifecyclePreStopArgs']]):
        pulumi.set(self, "pre_stop", value)


if not MYPY:
    class WorkloadContainerLifecyclePostStartArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['WorkloadContainerLifecyclePostStartExecArgsDict']]
elif False:
    WorkloadContainerLifecyclePostStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['WorkloadContainerLifecyclePostStartExecArgs']] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['WorkloadContainerLifecyclePostStartExecArgs']]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['WorkloadContainerLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)


if not MYPY:
    class WorkloadContainerLifecyclePostStartExecArgsDict(TypedDict):
        commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        Command and arguments executed immediately after the container is created.
        """
elif False:
    WorkloadContainerLifecyclePostStartExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] commands: Command and arguments executed immediately after the container is created.
        """
        pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Command and arguments executed immediately after the container is created.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class WorkloadContainerLifecyclePreStopArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['WorkloadContainerLifecyclePreStopExecArgsDict']]
elif False:
    WorkloadContainerLifecyclePreStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['WorkloadContainerLifecyclePreStopExecArgs']] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['WorkloadContainerLifecyclePreStopExecArgs']]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['WorkloadContainerLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)


if not MYPY:
    class WorkloadContainerLifecyclePreStopExecArgsDict(TypedDict):
        commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        Command and arguments executed immediately before the container is stopped.
        """
elif False:
    WorkloadContainerLifecyclePreStopExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] commands: Command and arguments executed immediately before the container is stopped.
        """
        pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Command and arguments executed immediately before the container is stopped.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class WorkloadContainerLivenessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['WorkloadContainerLivenessProbeExecArgsDict']]
        failure_threshold: NotRequired[pulumi.Input[builtins.int]]
        grpc: NotRequired[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgsDict']]
        http_get: NotRequired[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgsDict']]
        initial_delay_seconds: NotRequired[pulumi.Input[builtins.int]]
        period_seconds: NotRequired[pulumi.Input[builtins.int]]
        success_threshold: NotRequired[pulumi.Input[builtins.int]]
        tcp_socket: NotRequired[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgsDict']]
        timeout_seconds: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WorkloadContainerLivenessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['WorkloadContainerLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 grpc: Optional[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgs']] = None,
                 http_get: Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 period_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 success_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[builtins.int]] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeExecArgs']]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class WorkloadContainerLivenessProbeExecArgsDict(TypedDict):
        commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    WorkloadContainerLivenessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLivenessProbeExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class WorkloadContainerLivenessProbeGrpcArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WorkloadContainerLivenessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLivenessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[builtins.int]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WorkloadContainerLivenessProbeHttpGetArgsDict(TypedDict):
        http_headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        path: NotRequired[pulumi.Input[builtins.str]]
        port: NotRequired[pulumi.Input[builtins.int]]
        scheme: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkloadContainerLivenessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 scheme: Optional[pulumi.Input[builtins.str]] = None):
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class WorkloadContainerLivenessProbeTcpSocketArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WorkloadContainerLivenessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[builtins.int]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WorkloadContainerMetricsArgsDict(TypedDict):
        path: pulumi.Input[builtins.str]
        """
        Path from container emitting custom metrics.
        """
        port: pulumi.Input[builtins.int]
        """
        Port from container emitting custom metrics.
        """
elif False:
    WorkloadContainerMetricsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerMetricsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int]):
        """
        :param pulumi.Input[builtins.str] path: Path from container emitting custom metrics.
        :param pulumi.Input[builtins.int] port: Port from container emitting custom metrics.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        Path from container emitting custom metrics.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        Port from container emitting custom metrics.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WorkloadContainerPortArgsDict(TypedDict):
        number: pulumi.Input[builtins.int]
        """
        Port to expose.
        """
        protocol: NotRequired[pulumi.Input[builtins.str]]
        """
        Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.
        """
elif False:
    WorkloadContainerPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerPortArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[builtins.int],
                 protocol: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] number: Port to expose.
        :param pulumi.Input[builtins.str] protocol: Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.
        """
        pulumi.set(__self__, "number", number)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[builtins.int]:
        """
        Port to expose.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class WorkloadContainerReadinessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['WorkloadContainerReadinessProbeExecArgsDict']]
        failure_threshold: NotRequired[pulumi.Input[builtins.int]]
        grpc: NotRequired[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgsDict']]
        http_get: NotRequired[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgsDict']]
        initial_delay_seconds: NotRequired[pulumi.Input[builtins.int]]
        period_seconds: NotRequired[pulumi.Input[builtins.int]]
        success_threshold: NotRequired[pulumi.Input[builtins.int]]
        tcp_socket: NotRequired[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgsDict']]
        timeout_seconds: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WorkloadContainerReadinessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['WorkloadContainerReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 grpc: Optional[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgs']] = None,
                 http_get: Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 period_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 success_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[builtins.int]] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeExecArgs']]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class WorkloadContainerReadinessProbeExecArgsDict(TypedDict):
        commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    WorkloadContainerReadinessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerReadinessProbeExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class WorkloadContainerReadinessProbeGrpcArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WorkloadContainerReadinessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerReadinessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[builtins.int]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WorkloadContainerReadinessProbeHttpGetArgsDict(TypedDict):
        http_headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        path: NotRequired[pulumi.Input[builtins.str]]
        port: NotRequired[pulumi.Input[builtins.int]]
        scheme: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkloadContainerReadinessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 scheme: Optional[pulumi.Input[builtins.str]] = None):
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class WorkloadContainerReadinessProbeTcpSocketArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WorkloadContainerReadinessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[builtins.int]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WorkloadContainerVolumeArgsDict(TypedDict):
        path: pulumi.Input[builtins.str]
        """
        File path added to workload pointing to the volume.
        """
        uri: pulumi.Input[builtins.str]
        """
        URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).
        """
        recovery_policy: NotRequired[pulumi.Input[builtins.str]]
        """
        Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**
        """
elif False:
    WorkloadContainerVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadContainerVolumeArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[builtins.str],
                 uri: pulumi.Input[builtins.str],
                 recovery_policy: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] path: File path added to workload pointing to the volume.
        :param pulumi.Input[builtins.str] uri: URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).
        :param pulumi.Input[builtins.str] recovery_policy: Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "uri", uri)
        if recovery_policy is not None:
            pulumi.set(__self__, "recovery_policy", recovery_policy)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        File path added to workload pointing to the volume.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[builtins.str]:
        """
        URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="recoveryPolicy")
    def recovery_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**
        """
        return pulumi.get(self, "recovery_policy")

    @recovery_policy.setter
    def recovery_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "recovery_policy", value)


if not MYPY:
    class WorkloadFirewallSpecArgsDict(TypedDict):
        external: NotRequired[pulumi.Input['WorkloadFirewallSpecExternalArgsDict']]
        """
        The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.
        """
        internal: NotRequired[pulumi.Input['WorkloadFirewallSpecInternalArgsDict']]
        """
        The internal firewall is used to control access between workloads.
        """
elif False:
    WorkloadFirewallSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadFirewallSpecArgs:
    def __init__(__self__, *,
                 external: Optional[pulumi.Input['WorkloadFirewallSpecExternalArgs']] = None,
                 internal: Optional[pulumi.Input['WorkloadFirewallSpecInternalArgs']] = None):
        """
        :param pulumi.Input['WorkloadFirewallSpecExternalArgs'] external: The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.
        :param pulumi.Input['WorkloadFirewallSpecInternalArgs'] internal: The internal firewall is used to control access between workloads.
        """
        if external is not None:
            pulumi.set(__self__, "external", external)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input['WorkloadFirewallSpecExternalArgs']]:
        """
        The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input['WorkloadFirewallSpecExternalArgs']]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input['WorkloadFirewallSpecInternalArgs']]:
        """
        The internal firewall is used to control access between workloads.
        """
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input['WorkloadFirewallSpecInternalArgs']]):
        pulumi.set(self, "internal", value)


if not MYPY:
    class WorkloadFirewallSpecExternalArgsDict(TypedDict):
        http: NotRequired[pulumi.Input['WorkloadFirewallSpecExternalHttpArgsDict']]
        """
        Firewall options for HTTP workloads.
        """
        inbound_allow_cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.
        """
        inbound_blocked_cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are NOT allowed to access this workload. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        outbound_allow_cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.
        """
        outbound_allow_hostnames: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.
        """
        outbound_allow_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgsDict']]]]
        """
        Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.
        """
        outbound_blocked_cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is NOT allowed to reach. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
elif False:
    WorkloadFirewallSpecExternalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadFirewallSpecExternalArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['WorkloadFirewallSpecExternalHttpArgs']] = None,
                 inbound_allow_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 inbound_blocked_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 outbound_allow_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 outbound_allow_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 outbound_allow_ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]]] = None,
                 outbound_blocked_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input['WorkloadFirewallSpecExternalHttpArgs'] http: Firewall options for HTTP workloads.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] inbound_allow_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] inbound_blocked_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that are NOT allowed to access this workload. Addresses in the allow list will only be allowed if they do not exist in this list.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] outbound_allow_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] outbound_allow_hostnames: The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]] outbound_allow_ports: Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] outbound_blocked_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that this workload is NOT allowed to reach. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if inbound_allow_cidrs is not None:
            pulumi.set(__self__, "inbound_allow_cidrs", inbound_allow_cidrs)
        if inbound_blocked_cidrs is not None:
            pulumi.set(__self__, "inbound_blocked_cidrs", inbound_blocked_cidrs)
        if outbound_allow_cidrs is not None:
            pulumi.set(__self__, "outbound_allow_cidrs", outbound_allow_cidrs)
        if outbound_allow_hostnames is not None:
            pulumi.set(__self__, "outbound_allow_hostnames", outbound_allow_hostnames)
        if outbound_allow_ports is not None:
            pulumi.set(__self__, "outbound_allow_ports", outbound_allow_ports)
        if outbound_blocked_cidrs is not None:
            pulumi.set(__self__, "outbound_blocked_cidrs", outbound_blocked_cidrs)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['WorkloadFirewallSpecExternalHttpArgs']]:
        """
        Firewall options for HTTP workloads.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['WorkloadFirewallSpecExternalHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter(name="inboundAllowCidrs")
    def inbound_allow_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.
        """
        return pulumi.get(self, "inbound_allow_cidrs")

    @inbound_allow_cidrs.setter
    def inbound_allow_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "inbound_allow_cidrs", value)

    @property
    @pulumi.getter(name="inboundBlockedCidrs")
    def inbound_blocked_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are NOT allowed to access this workload. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        return pulumi.get(self, "inbound_blocked_cidrs")

    @inbound_blocked_cidrs.setter
    def inbound_blocked_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "inbound_blocked_cidrs", value)

    @property
    @pulumi.getter(name="outboundAllowCidrs")
    def outbound_allow_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.
        """
        return pulumi.get(self, "outbound_allow_cidrs")

    @outbound_allow_cidrs.setter
    def outbound_allow_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "outbound_allow_cidrs", value)

    @property
    @pulumi.getter(name="outboundAllowHostnames")
    def outbound_allow_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.
        """
        return pulumi.get(self, "outbound_allow_hostnames")

    @outbound_allow_hostnames.setter
    def outbound_allow_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "outbound_allow_hostnames", value)

    @property
    @pulumi.getter(name="outboundAllowPorts")
    def outbound_allow_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]]]:
        """
        Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.
        """
        return pulumi.get(self, "outbound_allow_ports")

    @outbound_allow_ports.setter
    def outbound_allow_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]]]):
        pulumi.set(self, "outbound_allow_ports", value)

    @property
    @pulumi.getter(name="outboundBlockedCidrs")
    def outbound_blocked_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is NOT allowed to reach. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        return pulumi.get(self, "outbound_blocked_cidrs")

    @outbound_blocked_cidrs.setter
    def outbound_blocked_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "outbound_blocked_cidrs", value)


if not MYPY:
    class WorkloadFirewallSpecExternalHttpArgsDict(TypedDict):
        inbound_header_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgsDict']]]]
        """
        A list of header filters for HTTP workloads.
        """
elif False:
    WorkloadFirewallSpecExternalHttpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadFirewallSpecExternalHttpArgs:
    def __init__(__self__, *,
                 inbound_header_filters: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs']]] inbound_header_filters: A list of header filters for HTTP workloads.
        """
        if inbound_header_filters is not None:
            pulumi.set(__self__, "inbound_header_filters", inbound_header_filters)

    @property
    @pulumi.getter(name="inboundHeaderFilters")
    def inbound_header_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs']]]]:
        """
        A list of header filters for HTTP workloads.
        """
        return pulumi.get(self, "inbound_header_filters")

    @inbound_header_filters.setter
    def inbound_header_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs']]]]):
        pulumi.set(self, "inbound_header_filters", value)


if not MYPY:
    class WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgsDict(TypedDict):
        key: pulumi.Input[builtins.str]
        """
        The header to match for.
        """
        allowed_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        A list of regular expressions to match for allowed header values. Headers that do not match ANY of these values will be filtered and will not reach the workload.
        """
        blocked_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        A list of regular expressions to match for blocked header values. Headers that match ANY of these values will be filtered and will not reach the workload.
        """
elif False:
    WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] key: The header to match for.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allowed_values: A list of regular expressions to match for allowed header values. Headers that do not match ANY of these values will be filtered and will not reach the workload.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_values: A list of regular expressions to match for blocked header values. Headers that match ANY of these values will be filtered and will not reach the workload.
        """
        pulumi.set(__self__, "key", key)
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if blocked_values is not None:
            pulumi.set(__self__, "blocked_values", blocked_values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The header to match for.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of regular expressions to match for allowed header values. Headers that do not match ANY of these values will be filtered and will not reach the workload.
        """
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter(name="blockedValues")
    def blocked_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of regular expressions to match for blocked header values. Headers that match ANY of these values will be filtered and will not reach the workload.
        """
        return pulumi.get(self, "blocked_values")

    @blocked_values.setter
    def blocked_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_values", value)


if not MYPY:
    class WorkloadFirewallSpecExternalOutboundAllowPortArgsDict(TypedDict):
        number: pulumi.Input[builtins.int]
        """
        Port number. Max: 65000
        """
        protocol: pulumi.Input[builtins.str]
        """
        Either `http`, `https` or `tcp`.
        """
elif False:
    WorkloadFirewallSpecExternalOutboundAllowPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadFirewallSpecExternalOutboundAllowPortArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[builtins.int],
                 protocol: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.int] number: Port number. Max: 65000
        :param pulumi.Input[builtins.str] protocol: Either `http`, `https` or `tcp`.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[builtins.int]:
        """
        Port number. Max: 65000
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        """
        Either `http`, `https` or `tcp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class WorkloadFirewallSpecInternalArgsDict(TypedDict):
        inbound_allow_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Used to control the internal firewall configuration and mutual tls. Allowed Values: "none", "same-gvc", "same-org", "workload-list".
        """
        inbound_allow_workloads: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.
        """
elif False:
    WorkloadFirewallSpecInternalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadFirewallSpecInternalArgs:
    def __init__(__self__, *,
                 inbound_allow_type: Optional[pulumi.Input[builtins.str]] = None,
                 inbound_allow_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] inbound_allow_type: Used to control the internal firewall configuration and mutual tls. Allowed Values: "none", "same-gvc", "same-org", "workload-list".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] inbound_allow_workloads: A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.
        """
        if inbound_allow_type is not None:
            pulumi.set(__self__, "inbound_allow_type", inbound_allow_type)
        if inbound_allow_workloads is not None:
            pulumi.set(__self__, "inbound_allow_workloads", inbound_allow_workloads)

    @property
    @pulumi.getter(name="inboundAllowType")
    def inbound_allow_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Used to control the internal firewall configuration and mutual tls. Allowed Values: "none", "same-gvc", "same-org", "workload-list".
        """
        return pulumi.get(self, "inbound_allow_type")

    @inbound_allow_type.setter
    def inbound_allow_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "inbound_allow_type", value)

    @property
    @pulumi.getter(name="inboundAllowWorkloads")
    def inbound_allow_workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.
        """
        return pulumi.get(self, "inbound_allow_workloads")

    @inbound_allow_workloads.setter
    def inbound_allow_workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "inbound_allow_workloads", value)


if not MYPY:
    class WorkloadJobArgsDict(TypedDict):
        schedule: pulumi.Input[builtins.str]
        """
        A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        """
        active_deadline_seconds: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        """
        concurrency_policy: NotRequired[pulumi.Input[builtins.str]]
        """
        Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        """
        history_limit: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        """
        restart_policy: NotRequired[pulumi.Input[builtins.str]]
        """
        Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        """
elif False:
    WorkloadJobArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadJobArgs:
    def __init__(__self__, *,
                 schedule: pulumi.Input[builtins.str],
                 active_deadline_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 concurrency_policy: Optional[pulumi.Input[builtins.str]] = None,
                 history_limit: Optional[pulumi.Input[builtins.int]] = None,
                 restart_policy: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] schedule: A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        :param pulumi.Input[builtins.int] active_deadline_seconds: The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        :param pulumi.Input[builtins.str] concurrency_policy: Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        :param pulumi.Input[builtins.int] history_limit: The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        :param pulumi.Input[builtins.str] restart_policy: Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        """
        pulumi.set(__self__, "schedule", schedule)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if concurrency_policy is not None:
            pulumi.set(__self__, "concurrency_policy", concurrency_policy)
        if history_limit is not None:
            pulumi.set(__self__, "history_limit", history_limit)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[builtins.str]:
        """
        A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter(name="concurrencyPolicy")
    def concurrency_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        """
        return pulumi.get(self, "concurrency_policy")

    @concurrency_policy.setter
    def concurrency_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "concurrency_policy", value)

    @property
    @pulumi.getter(name="historyLimit")
    def history_limit(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        """
        return pulumi.get(self, "history_limit")

    @history_limit.setter
    def history_limit(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "history_limit", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "restart_policy", value)


if not MYPY:
    class WorkloadLoadBalancerArgsDict(TypedDict):
        direct: NotRequired[pulumi.Input['WorkloadLoadBalancerDirectArgsDict']]
        """
        Direct load balancers are created in each location that a workload is running in and are configured for the standard endpoints of the workload. Customers are responsible for configuring the workload with certificates if TLS is required.
        """
        geo_location: NotRequired[pulumi.Input['WorkloadLoadBalancerGeoLocationArgsDict']]
        replica_direct: NotRequired[pulumi.Input[builtins.bool]]
        """
        When enabled, individual replicas of the workload can be reached directly using the subdomain prefix replica-<index>. For example, replica-0.my-workload.my-gvc.cpln.local or replica-0.my-workload-<gvc-alias>.cpln.app - Can only be used with stateful workloads.
        """
elif False:
    WorkloadLoadBalancerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLoadBalancerArgs:
    def __init__(__self__, *,
                 direct: Optional[pulumi.Input['WorkloadLoadBalancerDirectArgs']] = None,
                 geo_location: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationArgs']] = None,
                 replica_direct: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input['WorkloadLoadBalancerDirectArgs'] direct: Direct load balancers are created in each location that a workload is running in and are configured for the standard endpoints of the workload. Customers are responsible for configuring the workload with certificates if TLS is required.
        :param pulumi.Input[builtins.bool] replica_direct: When enabled, individual replicas of the workload can be reached directly using the subdomain prefix replica-<index>. For example, replica-0.my-workload.my-gvc.cpln.local or replica-0.my-workload-<gvc-alias>.cpln.app - Can only be used with stateful workloads.
        """
        if direct is not None:
            pulumi.set(__self__, "direct", direct)
        if geo_location is not None:
            pulumi.set(__self__, "geo_location", geo_location)
        if replica_direct is not None:
            pulumi.set(__self__, "replica_direct", replica_direct)

    @property
    @pulumi.getter
    def direct(self) -> Optional[pulumi.Input['WorkloadLoadBalancerDirectArgs']]:
        """
        Direct load balancers are created in each location that a workload is running in and are configured for the standard endpoints of the workload. Customers are responsible for configuring the workload with certificates if TLS is required.
        """
        return pulumi.get(self, "direct")

    @direct.setter
    def direct(self, value: Optional[pulumi.Input['WorkloadLoadBalancerDirectArgs']]):
        pulumi.set(self, "direct", value)

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationArgs']]:
        return pulumi.get(self, "geo_location")

    @geo_location.setter
    def geo_location(self, value: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationArgs']]):
        pulumi.set(self, "geo_location", value)

    @property
    @pulumi.getter(name="replicaDirect")
    def replica_direct(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When enabled, individual replicas of the workload can be reached directly using the subdomain prefix replica-<index>. For example, replica-0.my-workload.my-gvc.cpln.local or replica-0.my-workload-<gvc-alias>.cpln.app - Can only be used with stateful workloads.
        """
        return pulumi.get(self, "replica_direct")

    @replica_direct.setter
    def replica_direct(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "replica_direct", value)


if not MYPY:
    class WorkloadLoadBalancerDirectArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        When disabled, this load balancer will be stopped.
        """
        ipset: NotRequired[pulumi.Input[builtins.str]]
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgsDict']]]]
        """
        List of ports that will be exposed by this load balancer.
        """
elif False:
    WorkloadLoadBalancerDirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLoadBalancerDirectArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 ipset: Optional[pulumi.Input[builtins.str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: When disabled, this load balancer will be stopped.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]] ports: List of ports that will be exposed by this load balancer.
        """
        pulumi.set(__self__, "enabled", enabled)
        if ipset is not None:
            pulumi.set(__self__, "ipset", ipset)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        When disabled, this load balancer will be stopped.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ipset(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipset")

    @ipset.setter
    def ipset(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipset", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]]]:
        """
        List of ports that will be exposed by this load balancer.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]]]):
        pulumi.set(self, "ports", value)


if not MYPY:
    class WorkloadLoadBalancerDirectPortArgsDict(TypedDict):
        external_port: pulumi.Input[builtins.int]
        """
        The port that is available publicly.
        """
        protocol: pulumi.Input[builtins.str]
        """
        The protocol that is exposed publicly.
        """
        container_port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on the container tha will receive this traffic.
        """
        scheme: NotRequired[pulumi.Input[builtins.str]]
        """
        Overrides the default `https` url scheme that will be used for links in the UI and status.
        """
elif False:
    WorkloadLoadBalancerDirectPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLoadBalancerDirectPortArgs:
    def __init__(__self__, *,
                 external_port: pulumi.Input[builtins.int],
                 protocol: pulumi.Input[builtins.str],
                 container_port: Optional[pulumi.Input[builtins.int]] = None,
                 scheme: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] external_port: The port that is available publicly.
        :param pulumi.Input[builtins.str] protocol: The protocol that is exposed publicly.
        :param pulumi.Input[builtins.int] container_port: The port on the container tha will receive this traffic.
        :param pulumi.Input[builtins.str] scheme: Overrides the default `https` url scheme that will be used for links in the UI and status.
        """
        pulumi.set(__self__, "external_port", external_port)
        pulumi.set(__self__, "protocol", protocol)
        if container_port is not None:
            pulumi.set(__self__, "container_port", container_port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> pulumi.Input[builtins.int]:
        """
        The port that is available publicly.
        """
        return pulumi.get(self, "external_port")

    @external_port.setter
    def external_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "external_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        """
        The protocol that is exposed publicly.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on the container tha will receive this traffic.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Overrides the default `https` url scheme that will be used for links in the UI and status.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class WorkloadLoadBalancerGeoLocationArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.
        """
        headers: NotRequired[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgsDict']]
elif False:
    WorkloadLoadBalancerGeoLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLoadBalancerGeoLocationArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 headers: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgs']] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgs']]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgs']]):
        pulumi.set(self, "headers", value)


if not MYPY:
    class WorkloadLoadBalancerGeoLocationHeadersArgsDict(TypedDict):
        asn: NotRequired[pulumi.Input[builtins.str]]
        """
        The geo asn header.
        """
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        The geo city header.
        """
        country: NotRequired[pulumi.Input[builtins.str]]
        """
        The geo country header.
        """
        region: NotRequired[pulumi.Input[builtins.str]]
        """
        The geo region header.
        """
elif False:
    WorkloadLoadBalancerGeoLocationHeadersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLoadBalancerGeoLocationHeadersArgs:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[builtins.str]] = None,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 country: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] asn: The geo asn header.
        :param pulumi.Input[builtins.str] city: The geo city header.
        :param pulumi.Input[builtins.str] country: The geo country header.
        :param pulumi.Input[builtins.str] region: The geo region header.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo asn header.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo city header.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo country header.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The geo region header.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class WorkloadLocalOptionArgsDict(TypedDict):
        location: pulumi.Input[builtins.str]
        """
        Valid only for `local_options`. Override options for a specific location.
        """
        autoscaling: NotRequired[pulumi.Input['WorkloadLocalOptionAutoscalingArgsDict']]
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        capacity_ai: NotRequired[pulumi.Input[builtins.bool]]
        """
        Capacity AI. Default: `true`.
        """
        debug: NotRequired[pulumi.Input[builtins.bool]]
        """
        Debug mode. Default: `false`.
        """
        multi_zone: NotRequired[pulumi.Input['WorkloadLocalOptionMultiZoneArgsDict']]
        suspend: NotRequired[pulumi.Input[builtins.bool]]
        """
        Workload suspend. Default: `false`.
        """
        timeout_seconds: NotRequired[pulumi.Input[builtins.int]]
        """
        Timeout in seconds. Default: `5`.
        """
elif False:
    WorkloadLocalOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[builtins.str],
                 autoscaling: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingArgs']] = None,
                 capacity_ai: Optional[pulumi.Input[builtins.bool]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 multi_zone: Optional[pulumi.Input['WorkloadLocalOptionMultiZoneArgs']] = None,
                 suspend: Optional[pulumi.Input[builtins.bool]] = None,
                 timeout_seconds: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] location: Valid only for `local_options`. Override options for a specific location.
        :param pulumi.Input['WorkloadLocalOptionAutoscalingArgs'] autoscaling: Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        :param pulumi.Input[builtins.bool] capacity_ai: Capacity AI. Default: `true`.
        :param pulumi.Input[builtins.bool] debug: Debug mode. Default: `false`.
        :param pulumi.Input[builtins.bool] suspend: Workload suspend. Default: `false`.
        :param pulumi.Input[builtins.int] timeout_seconds: Timeout in seconds. Default: `5`.
        """
        pulumi.set(__self__, "location", location)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if capacity_ai is not None:
            pulumi.set(__self__, "capacity_ai", capacity_ai)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if suspend is not None:
            pulumi.set(__self__, "suspend", suspend)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[builtins.str]:
        """
        Valid only for `local_options`. Override options for a specific location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['WorkloadLocalOptionAutoscalingArgs']]:
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Capacity AI. Default: `true`.
        """
        return pulumi.get(self, "capacity_ai")

    @capacity_ai.setter
    def capacity_ai(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "capacity_ai", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Debug mode. Default: `false`.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional[pulumi.Input['WorkloadLocalOptionMultiZoneArgs']]:
        return pulumi.get(self, "multi_zone")

    @multi_zone.setter
    def multi_zone(self, value: Optional[pulumi.Input['WorkloadLocalOptionMultiZoneArgs']]):
        pulumi.set(self, "multi_zone", value)

    @property
    @pulumi.getter
    def suspend(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Workload suspend. Default: `false`.
        """
        return pulumi.get(self, "suspend")

    @suspend.setter
    def suspend(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspend", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Timeout in seconds. Default: `5`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class WorkloadLocalOptionAutoscalingArgsDict(TypedDict):
        keda: NotRequired[pulumi.Input['WorkloadLocalOptionAutoscalingKedaArgsDict']]
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        max_concurrency: NotRequired[pulumi.Input[builtins.int]]
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        max_scale: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        metric: NotRequired[pulumi.Input[builtins.str]]
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        metric_percentile: NotRequired[pulumi.Input[builtins.str]]
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        min_scale: NotRequired[pulumi.Input[builtins.int]]
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        multis: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgsDict']]]]
        scale_to_zero_delay: NotRequired[pulumi.Input[builtins.int]]
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        target: NotRequired[pulumi.Input[builtins.int]]
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
elif False:
    WorkloadLocalOptionAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionAutoscalingArgs:
    def __init__(__self__, *,
                 keda: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaArgs']] = None,
                 max_concurrency: Optional[pulumi.Input[builtins.int]] = None,
                 max_scale: Optional[pulumi.Input[builtins.int]] = None,
                 metric: Optional[pulumi.Input[builtins.str]] = None,
                 metric_percentile: Optional[pulumi.Input[builtins.str]] = None,
                 min_scale: Optional[pulumi.Input[builtins.int]] = None,
                 multis: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgs']]]] = None,
                 scale_to_zero_delay: Optional[pulumi.Input[builtins.int]] = None,
                 target: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input['WorkloadLocalOptionAutoscalingKedaArgs'] keda: KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        :param pulumi.Input[builtins.int] max_concurrency: A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        :param pulumi.Input[builtins.int] max_scale: The maximum allowed number of replicas. Min: `0`. Default `5`.
        :param pulumi.Input[builtins.str] metric: Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        :param pulumi.Input[builtins.str] metric_percentile: For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        :param pulumi.Input[builtins.int] min_scale: The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        :param pulumi.Input[builtins.int] scale_to_zero_delay: The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        :param pulumi.Input[builtins.int] target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        if keda is not None:
            pulumi.set(__self__, "keda", keda)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if max_scale is not None:
            pulumi.set(__self__, "max_scale", max_scale)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_percentile is not None:
            pulumi.set(__self__, "metric_percentile", metric_percentile)
        if min_scale is not None:
            pulumi.set(__self__, "min_scale", min_scale)
        if multis is not None:
            pulumi.set(__self__, "multis", multis)
        if scale_to_zero_delay is not None:
            pulumi.set(__self__, "scale_to_zero_delay", scale_to_zero_delay)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def keda(self) -> Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaArgs']]:
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        return pulumi.get(self, "keda")

    @keda.setter
    def keda(self, value: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaArgs']]):
        pulumi.set(self, "keda", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        return pulumi.get(self, "max_scale")

    @max_scale.setter
    def max_scale(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_scale", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        return pulumi.get(self, "metric_percentile")

    @metric_percentile.setter
    def metric_percentile(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_percentile", value)

    @property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        return pulumi.get(self, "min_scale")

    @min_scale.setter
    def min_scale(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_scale", value)

    @property
    @pulumi.getter
    def multis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgs']]]]:
        return pulumi.get(self, "multis")

    @multis.setter
    def multis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgs']]]]):
        pulumi.set(self, "multis", value)

    @property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        return pulumi.get(self, "scale_to_zero_delay")

    @scale_to_zero_delay.setter
    def scale_to_zero_delay(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "scale_to_zero_delay", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class WorkloadLocalOptionAutoscalingKedaArgsDict(TypedDict):
        advanced: NotRequired[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedArgsDict']]
        """
        Advanced configuration options for KEDA.
        """
        cooldown_period: NotRequired[pulumi.Input[builtins.int]]
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        initial_cooldown_period: NotRequired[pulumi.Input[builtins.int]]
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        polling_interval: NotRequired[pulumi.Input[builtins.int]]
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        triggers: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerArgsDict']]]]
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
elif False:
    WorkloadLocalOptionAutoscalingKedaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionAutoscalingKedaArgs:
    def __init__(__self__, *,
                 advanced: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedArgs']] = None,
                 cooldown_period: Optional[pulumi.Input[builtins.int]] = None,
                 initial_cooldown_period: Optional[pulumi.Input[builtins.int]] = None,
                 polling_interval: Optional[pulumi.Input[builtins.int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerArgs']]]] = None):
        """
        :param pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedArgs'] advanced: Advanced configuration options for KEDA.
        :param pulumi.Input[builtins.int] cooldown_period: The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param pulumi.Input[builtins.int] initial_cooldown_period: The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param pulumi.Input[builtins.int] polling_interval: The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerArgs']]] triggers: An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cooldown_period is not None:
            pulumi.set(__self__, "cooldown_period", cooldown_period)
        if initial_cooldown_period is not None:
            pulumi.set(__self__, "initial_cooldown_period", initial_cooldown_period)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedArgs']]:
        """
        Advanced configuration options for KEDA.
        """
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedArgs']]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "cooldown_period")

    @cooldown_period.setter
    def cooldown_period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cooldown_period", value)

    @property
    @pulumi.getter(name="initialCooldownPeriod")
    def initial_cooldown_period(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "initial_cooldown_period")

    @initial_cooldown_period.setter
    def initial_cooldown_period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "initial_cooldown_period", value)

    @property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        return pulumi.get(self, "polling_interval")

    @polling_interval.setter
    def polling_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "polling_interval", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerArgs']]]]:
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


if not MYPY:
    class WorkloadLocalOptionAutoscalingKedaAdvancedArgsDict(TypedDict):
        scaling_modifiers: NotRequired[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgsDict']]
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
elif False:
    WorkloadLocalOptionAutoscalingKedaAdvancedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionAutoscalingKedaAdvancedArgs:
    def __init__(__self__, *,
                 scaling_modifiers: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgs']] = None):
        """
        :param pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgs'] scaling_modifiers: Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        if scaling_modifiers is not None:
            pulumi.set(__self__, "scaling_modifiers", scaling_modifiers)

    @property
    @pulumi.getter(name="scalingModifiers")
    def scaling_modifiers(self) -> Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgs']]:
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        return pulumi.get(self, "scaling_modifiers")

    @scaling_modifiers.setter
    def scaling_modifiers(self, value: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgs']]):
        pulumi.set(self, "scaling_modifiers", value)


if not MYPY:
    class WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgsDict(TypedDict):
        activation_target: NotRequired[pulumi.Input[builtins.str]]
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        formula: NotRequired[pulumi.Input[builtins.str]]
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        metric_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Defines metric type used for this new composite-metric.
        """
        target: NotRequired[pulumi.Input[builtins.str]]
        """
        Defines new target value to scale on for the composed metric.
        """
elif False:
    WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgs:
    def __init__(__self__, *,
                 activation_target: Optional[pulumi.Input[builtins.str]] = None,
                 formula: Optional[pulumi.Input[builtins.str]] = None,
                 metric_type: Optional[pulumi.Input[builtins.str]] = None,
                 target: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] activation_target: Defines the new activation target value to scale on for the composed metric.
        :param pulumi.Input[builtins.str] formula: Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        :param pulumi.Input[builtins.str] metric_type: Defines metric type used for this new composite-metric.
        :param pulumi.Input[builtins.str] target: Defines new target value to scale on for the composed metric.
        """
        if activation_target is not None:
            pulumi.set(__self__, "activation_target", activation_target)
        if formula is not None:
            pulumi.set(__self__, "formula", formula)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="activationTarget")
    def activation_target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        return pulumi.get(self, "activation_target")

    @activation_target.setter
    def activation_target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "activation_target", value)

    @property
    @pulumi.getter
    def formula(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        return pulumi.get(self, "formula")

    @formula.setter
    def formula(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "formula", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defines metric type used for this new composite-metric.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defines new target value to scale on for the composed metric.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class WorkloadLocalOptionAutoscalingKedaTriggerArgsDict(TypedDict):
        type: pulumi.Input[builtins.str]
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        authentication_ref: NotRequired[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgsDict']]
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        The configuration parameters that the trigger requires.
        """
        metric_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of metric to be used for scaling.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        use_cached_metrics: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enables caching of metric values during polling interval.
        """
elif False:
    WorkloadLocalOptionAutoscalingKedaTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionAutoscalingKedaTriggerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[builtins.str],
                 authentication_ref: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metric_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 use_cached_metrics: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] type: The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        :param pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs'] authentication_ref: Reference to a KEDA authentication object for secure access to external systems.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: The configuration parameters that the trigger requires.
        :param pulumi.Input[builtins.str] metric_type: The type of metric to be used for scaling.
        :param pulumi.Input[builtins.str] name: An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        :param pulumi.Input[builtins.bool] use_cached_metrics: Enables caching of metric values during polling interval.
        """
        pulumi.set(__self__, "type", type)
        if authentication_ref is not None:
            pulumi.set(__self__, "authentication_ref", authentication_ref)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_cached_metrics is not None:
            pulumi.set(__self__, "use_cached_metrics", use_cached_metrics)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="authenticationRef")
    def authentication_ref(self) -> Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs']]:
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        return pulumi.get(self, "authentication_ref")

    @authentication_ref.setter
    def authentication_ref(self, value: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs']]):
        pulumi.set(self, "authentication_ref", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The configuration parameters that the trigger requires.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of metric to be used for scaling.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useCachedMetrics")
    def use_cached_metrics(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables caching of metric values during polling interval.
        """
        return pulumi.get(self, "use_cached_metrics")

    @use_cached_metrics.setter
    def use_cached_metrics(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_cached_metrics", value)


if not MYPY:
    class WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
elif False:
    WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: The name of secret listed in the GVC spec.keda.secrets.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkloadLocalOptionAutoscalingMultiArgsDict(TypedDict):
        metric: NotRequired[pulumi.Input[builtins.str]]
        """
        Valid values: `cpu` or `memory`.
        """
        target: NotRequired[pulumi.Input[builtins.int]]
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
elif False:
    WorkloadLocalOptionAutoscalingMultiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionAutoscalingMultiArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[builtins.str]] = None,
                 target: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] metric: Valid values: `cpu` or `memory`.
        :param pulumi.Input[builtins.int] target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Valid values: `cpu` or `memory`.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class WorkloadLocalOptionMultiZoneArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    WorkloadLocalOptionMultiZoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadLocalOptionMultiZoneArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WorkloadOptionsArgsDict(TypedDict):
        autoscaling: NotRequired[pulumi.Input['WorkloadOptionsAutoscalingArgsDict']]
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        capacity_ai: NotRequired[pulumi.Input[builtins.bool]]
        """
        Capacity AI. Default: `true`.
        """
        debug: NotRequired[pulumi.Input[builtins.bool]]
        """
        Debug mode. Default: `false`.
        """
        multi_zone: NotRequired[pulumi.Input['WorkloadOptionsMultiZoneArgsDict']]
        suspend: NotRequired[pulumi.Input[builtins.bool]]
        """
        Workload suspend. Default: `false`.
        """
        timeout_seconds: NotRequired[pulumi.Input[builtins.int]]
        """
        Timeout in seconds. Default: `5`.
        """
elif False:
    WorkloadOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsArgs:
    def __init__(__self__, *,
                 autoscaling: Optional[pulumi.Input['WorkloadOptionsAutoscalingArgs']] = None,
                 capacity_ai: Optional[pulumi.Input[builtins.bool]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 multi_zone: Optional[pulumi.Input['WorkloadOptionsMultiZoneArgs']] = None,
                 suspend: Optional[pulumi.Input[builtins.bool]] = None,
                 timeout_seconds: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input['WorkloadOptionsAutoscalingArgs'] autoscaling: Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        :param pulumi.Input[builtins.bool] capacity_ai: Capacity AI. Default: `true`.
        :param pulumi.Input[builtins.bool] debug: Debug mode. Default: `false`.
        :param pulumi.Input[builtins.bool] suspend: Workload suspend. Default: `false`.
        :param pulumi.Input[builtins.int] timeout_seconds: Timeout in seconds. Default: `5`.
        """
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if capacity_ai is not None:
            pulumi.set(__self__, "capacity_ai", capacity_ai)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if suspend is not None:
            pulumi.set(__self__, "suspend", suspend)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['WorkloadOptionsAutoscalingArgs']]:
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['WorkloadOptionsAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Capacity AI. Default: `true`.
        """
        return pulumi.get(self, "capacity_ai")

    @capacity_ai.setter
    def capacity_ai(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "capacity_ai", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Debug mode. Default: `false`.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional[pulumi.Input['WorkloadOptionsMultiZoneArgs']]:
        return pulumi.get(self, "multi_zone")

    @multi_zone.setter
    def multi_zone(self, value: Optional[pulumi.Input['WorkloadOptionsMultiZoneArgs']]):
        pulumi.set(self, "multi_zone", value)

    @property
    @pulumi.getter
    def suspend(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Workload suspend. Default: `false`.
        """
        return pulumi.get(self, "suspend")

    @suspend.setter
    def suspend(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspend", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Timeout in seconds. Default: `5`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class WorkloadOptionsAutoscalingArgsDict(TypedDict):
        keda: NotRequired[pulumi.Input['WorkloadOptionsAutoscalingKedaArgsDict']]
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        max_concurrency: NotRequired[pulumi.Input[builtins.int]]
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        max_scale: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        metric: NotRequired[pulumi.Input[builtins.str]]
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        metric_percentile: NotRequired[pulumi.Input[builtins.str]]
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        min_scale: NotRequired[pulumi.Input[builtins.int]]
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        multis: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgsDict']]]]
        scale_to_zero_delay: NotRequired[pulumi.Input[builtins.int]]
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        target: NotRequired[pulumi.Input[builtins.int]]
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
elif False:
    WorkloadOptionsAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsAutoscalingArgs:
    def __init__(__self__, *,
                 keda: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaArgs']] = None,
                 max_concurrency: Optional[pulumi.Input[builtins.int]] = None,
                 max_scale: Optional[pulumi.Input[builtins.int]] = None,
                 metric: Optional[pulumi.Input[builtins.str]] = None,
                 metric_percentile: Optional[pulumi.Input[builtins.str]] = None,
                 min_scale: Optional[pulumi.Input[builtins.int]] = None,
                 multis: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgs']]]] = None,
                 scale_to_zero_delay: Optional[pulumi.Input[builtins.int]] = None,
                 target: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input['WorkloadOptionsAutoscalingKedaArgs'] keda: KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        :param pulumi.Input[builtins.int] max_concurrency: A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        :param pulumi.Input[builtins.int] max_scale: The maximum allowed number of replicas. Min: `0`. Default `5`.
        :param pulumi.Input[builtins.str] metric: Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        :param pulumi.Input[builtins.str] metric_percentile: For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        :param pulumi.Input[builtins.int] min_scale: The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        :param pulumi.Input[builtins.int] scale_to_zero_delay: The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        :param pulumi.Input[builtins.int] target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        if keda is not None:
            pulumi.set(__self__, "keda", keda)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if max_scale is not None:
            pulumi.set(__self__, "max_scale", max_scale)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_percentile is not None:
            pulumi.set(__self__, "metric_percentile", metric_percentile)
        if min_scale is not None:
            pulumi.set(__self__, "min_scale", min_scale)
        if multis is not None:
            pulumi.set(__self__, "multis", multis)
        if scale_to_zero_delay is not None:
            pulumi.set(__self__, "scale_to_zero_delay", scale_to_zero_delay)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def keda(self) -> Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaArgs']]:
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        return pulumi.get(self, "keda")

    @keda.setter
    def keda(self, value: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaArgs']]):
        pulumi.set(self, "keda", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        return pulumi.get(self, "max_scale")

    @max_scale.setter
    def max_scale(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_scale", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        return pulumi.get(self, "metric_percentile")

    @metric_percentile.setter
    def metric_percentile(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_percentile", value)

    @property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        return pulumi.get(self, "min_scale")

    @min_scale.setter
    def min_scale(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_scale", value)

    @property
    @pulumi.getter
    def multis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgs']]]]:
        return pulumi.get(self, "multis")

    @multis.setter
    def multis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgs']]]]):
        pulumi.set(self, "multis", value)

    @property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        return pulumi.get(self, "scale_to_zero_delay")

    @scale_to_zero_delay.setter
    def scale_to_zero_delay(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "scale_to_zero_delay", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class WorkloadOptionsAutoscalingKedaArgsDict(TypedDict):
        advanced: NotRequired[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedArgsDict']]
        """
        Advanced configuration options for KEDA.
        """
        cooldown_period: NotRequired[pulumi.Input[builtins.int]]
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        initial_cooldown_period: NotRequired[pulumi.Input[builtins.int]]
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        polling_interval: NotRequired[pulumi.Input[builtins.int]]
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        triggers: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerArgsDict']]]]
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
elif False:
    WorkloadOptionsAutoscalingKedaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsAutoscalingKedaArgs:
    def __init__(__self__, *,
                 advanced: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedArgs']] = None,
                 cooldown_period: Optional[pulumi.Input[builtins.int]] = None,
                 initial_cooldown_period: Optional[pulumi.Input[builtins.int]] = None,
                 polling_interval: Optional[pulumi.Input[builtins.int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerArgs']]]] = None):
        """
        :param pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedArgs'] advanced: Advanced configuration options for KEDA.
        :param pulumi.Input[builtins.int] cooldown_period: The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param pulumi.Input[builtins.int] initial_cooldown_period: The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param pulumi.Input[builtins.int] polling_interval: The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerArgs']]] triggers: An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cooldown_period is not None:
            pulumi.set(__self__, "cooldown_period", cooldown_period)
        if initial_cooldown_period is not None:
            pulumi.set(__self__, "initial_cooldown_period", initial_cooldown_period)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedArgs']]:
        """
        Advanced configuration options for KEDA.
        """
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedArgs']]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "cooldown_period")

    @cooldown_period.setter
    def cooldown_period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cooldown_period", value)

    @property
    @pulumi.getter(name="initialCooldownPeriod")
    def initial_cooldown_period(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "initial_cooldown_period")

    @initial_cooldown_period.setter
    def initial_cooldown_period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "initial_cooldown_period", value)

    @property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        return pulumi.get(self, "polling_interval")

    @polling_interval.setter
    def polling_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "polling_interval", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerArgs']]]]:
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


if not MYPY:
    class WorkloadOptionsAutoscalingKedaAdvancedArgsDict(TypedDict):
        scaling_modifiers: NotRequired[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgsDict']]
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
elif False:
    WorkloadOptionsAutoscalingKedaAdvancedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsAutoscalingKedaAdvancedArgs:
    def __init__(__self__, *,
                 scaling_modifiers: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgs']] = None):
        """
        :param pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgs'] scaling_modifiers: Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        if scaling_modifiers is not None:
            pulumi.set(__self__, "scaling_modifiers", scaling_modifiers)

    @property
    @pulumi.getter(name="scalingModifiers")
    def scaling_modifiers(self) -> Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgs']]:
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        return pulumi.get(self, "scaling_modifiers")

    @scaling_modifiers.setter
    def scaling_modifiers(self, value: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgs']]):
        pulumi.set(self, "scaling_modifiers", value)


if not MYPY:
    class WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgsDict(TypedDict):
        activation_target: NotRequired[pulumi.Input[builtins.str]]
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        formula: NotRequired[pulumi.Input[builtins.str]]
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        metric_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Defines metric type used for this new composite-metric.
        """
        target: NotRequired[pulumi.Input[builtins.str]]
        """
        Defines new target value to scale on for the composed metric.
        """
elif False:
    WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgs:
    def __init__(__self__, *,
                 activation_target: Optional[pulumi.Input[builtins.str]] = None,
                 formula: Optional[pulumi.Input[builtins.str]] = None,
                 metric_type: Optional[pulumi.Input[builtins.str]] = None,
                 target: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] activation_target: Defines the new activation target value to scale on for the composed metric.
        :param pulumi.Input[builtins.str] formula: Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        :param pulumi.Input[builtins.str] metric_type: Defines metric type used for this new composite-metric.
        :param pulumi.Input[builtins.str] target: Defines new target value to scale on for the composed metric.
        """
        if activation_target is not None:
            pulumi.set(__self__, "activation_target", activation_target)
        if formula is not None:
            pulumi.set(__self__, "formula", formula)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="activationTarget")
    def activation_target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        return pulumi.get(self, "activation_target")

    @activation_target.setter
    def activation_target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "activation_target", value)

    @property
    @pulumi.getter
    def formula(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        return pulumi.get(self, "formula")

    @formula.setter
    def formula(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "formula", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defines metric type used for this new composite-metric.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defines new target value to scale on for the composed metric.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class WorkloadOptionsAutoscalingKedaTriggerArgsDict(TypedDict):
        type: pulumi.Input[builtins.str]
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        authentication_ref: NotRequired[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgsDict']]
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        The configuration parameters that the trigger requires.
        """
        metric_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of metric to be used for scaling.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        use_cached_metrics: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enables caching of metric values during polling interval.
        """
elif False:
    WorkloadOptionsAutoscalingKedaTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsAutoscalingKedaTriggerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[builtins.str],
                 authentication_ref: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metric_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 use_cached_metrics: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] type: The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        :param pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgs'] authentication_ref: Reference to a KEDA authentication object for secure access to external systems.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: The configuration parameters that the trigger requires.
        :param pulumi.Input[builtins.str] metric_type: The type of metric to be used for scaling.
        :param pulumi.Input[builtins.str] name: An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        :param pulumi.Input[builtins.bool] use_cached_metrics: Enables caching of metric values during polling interval.
        """
        pulumi.set(__self__, "type", type)
        if authentication_ref is not None:
            pulumi.set(__self__, "authentication_ref", authentication_ref)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_cached_metrics is not None:
            pulumi.set(__self__, "use_cached_metrics", use_cached_metrics)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="authenticationRef")
    def authentication_ref(self) -> Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgs']]:
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        return pulumi.get(self, "authentication_ref")

    @authentication_ref.setter
    def authentication_ref(self, value: Optional[pulumi.Input['WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgs']]):
        pulumi.set(self, "authentication_ref", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The configuration parameters that the trigger requires.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of metric to be used for scaling.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useCachedMetrics")
    def use_cached_metrics(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables caching of metric values during polling interval.
        """
        return pulumi.get(self, "use_cached_metrics")

    @use_cached_metrics.setter
    def use_cached_metrics(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_cached_metrics", value)


if not MYPY:
    class WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
elif False:
    WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: The name of secret listed in the GVC spec.keda.secrets.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkloadOptionsAutoscalingMultiArgsDict(TypedDict):
        metric: NotRequired[pulumi.Input[builtins.str]]
        """
        Valid values: `cpu` or `memory`.
        """
        target: NotRequired[pulumi.Input[builtins.int]]
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
elif False:
    WorkloadOptionsAutoscalingMultiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsAutoscalingMultiArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[builtins.str]] = None,
                 target: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] metric: Valid values: `cpu` or `memory`.
        :param pulumi.Input[builtins.int] target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Valid values: `cpu` or `memory`.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class WorkloadOptionsMultiZoneArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    WorkloadOptionsMultiZoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadOptionsMultiZoneArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WorkloadRequestRetryPolicyArgsDict(TypedDict):
        attempts: NotRequired[pulumi.Input[builtins.int]]
        retry_ons: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    WorkloadRequestRetryPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadRequestRetryPolicyArgs:
    def __init__(__self__, *,
                 attempts: Optional[pulumi.Input[builtins.int]] = None,
                 retry_ons: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if attempts is not None:
            pulumi.set(__self__, "attempts", attempts)
        if retry_ons is not None:
            pulumi.set(__self__, "retry_ons", retry_ons)

    @property
    @pulumi.getter
    def attempts(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "attempts")

    @attempts.setter
    def attempts(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "attempts", value)

    @property
    @pulumi.getter(name="retryOns")
    def retry_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "retry_ons")

    @retry_ons.setter
    def retry_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "retry_ons", value)


if not MYPY:
    class WorkloadRolloutOptionArgsDict(TypedDict):
        max_surge_replicas: NotRequired[pulumi.Input[builtins.str]]
        """
        The number of replicas that can be created above the desired amount of replicas during an update.
        """
        max_unavailable_replicas: NotRequired[pulumi.Input[builtins.str]]
        """
        The number of replicas that can be unavailable during the update process.
        """
        min_ready_seconds: NotRequired[pulumi.Input[builtins.int]]
        """
        The minimum number of seconds a container must run without crashing to be considered available.
        """
        scaling_policy: NotRequired[pulumi.Input[builtins.str]]
        """
        The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        """
        termination_grace_period_seconds: NotRequired[pulumi.Input[builtins.int]]
        """
        The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        """
elif False:
    WorkloadRolloutOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadRolloutOptionArgs:
    def __init__(__self__, *,
                 max_surge_replicas: Optional[pulumi.Input[builtins.str]] = None,
                 max_unavailable_replicas: Optional[pulumi.Input[builtins.str]] = None,
                 min_ready_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 scaling_policy: Optional[pulumi.Input[builtins.str]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] max_surge_replicas: The number of replicas that can be created above the desired amount of replicas during an update.
        :param pulumi.Input[builtins.str] max_unavailable_replicas: The number of replicas that can be unavailable during the update process.
        :param pulumi.Input[builtins.int] min_ready_seconds: The minimum number of seconds a container must run without crashing to be considered available.
        :param pulumi.Input[builtins.str] scaling_policy: The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        :param pulumi.Input[builtins.int] termination_grace_period_seconds: The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        """
        if max_surge_replicas is not None:
            pulumi.set(__self__, "max_surge_replicas", max_surge_replicas)
        if max_unavailable_replicas is not None:
            pulumi.set(__self__, "max_unavailable_replicas", max_unavailable_replicas)
        if min_ready_seconds is not None:
            pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @property
    @pulumi.getter(name="maxSurgeReplicas")
    def max_surge_replicas(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The number of replicas that can be created above the desired amount of replicas during an update.
        """
        return pulumi.get(self, "max_surge_replicas")

    @max_surge_replicas.setter
    def max_surge_replicas(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_surge_replicas", value)

    @property
    @pulumi.getter(name="maxUnavailableReplicas")
    def max_unavailable_replicas(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The number of replicas that can be unavailable during the update process.
        """
        return pulumi.get(self, "max_unavailable_replicas")

    @max_unavailable_replicas.setter
    def max_unavailable_replicas(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_unavailable_replicas", value)

    @property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The minimum number of seconds a container must run without crashing to be considered available.
        """
        return pulumi.get(self, "min_ready_seconds")

    @min_ready_seconds.setter
    def min_ready_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_ready_seconds", value)

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        """
        return pulumi.get(self, "scaling_policy")

    @scaling_policy.setter
    def scaling_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scaling_policy", value)

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "termination_grace_period_seconds", value)


if not MYPY:
    class WorkloadSecurityOptionsArgsDict(TypedDict):
        file_system_group_id: NotRequired[pulumi.Input[builtins.int]]
        """
        The group id assigned to any mounted volume.
        """
elif False:
    WorkloadSecurityOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadSecurityOptionsArgs:
    def __init__(__self__, *,
                 file_system_group_id: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.int] file_system_group_id: The group id assigned to any mounted volume.
        """
        if file_system_group_id is not None:
            pulumi.set(__self__, "file_system_group_id", file_system_group_id)

    @property
    @pulumi.getter(name="fileSystemGroupId")
    def file_system_group_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The group id assigned to any mounted volume.
        """
        return pulumi.get(self, "file_system_group_id")

    @file_system_group_id.setter
    def file_system_group_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "file_system_group_id", value)


if not MYPY:
    class WorkloadSidecarArgsDict(TypedDict):
        envoy: pulumi.Input[builtins.str]
elif False:
    WorkloadSidecarArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadSidecarArgs:
    def __init__(__self__, *,
                 envoy: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "envoy", envoy)

    @property
    @pulumi.getter
    def envoy(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "envoy")

    @envoy.setter
    def envoy(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "envoy", value)


if not MYPY:
    class WorkloadStatusArgsDict(TypedDict):
        canonical_endpoint: NotRequired[pulumi.Input[builtins.str]]
        """
        Canonical endpoint for the workload.
        """
        current_replica_count: NotRequired[pulumi.Input[builtins.int]]
        """
        Current amount of replicas deployed.
        """
        endpoint: NotRequired[pulumi.Input[builtins.str]]
        """
        Endpoint for the workload.
        """
        health_checks: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgsDict']]]]
        """
        Current health status.
        """
        internal_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Internal hostname for the workload. Used for service-to-service requests.
        """
        load_balancers: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgsDict']]]]
        parent_id: NotRequired[pulumi.Input[builtins.str]]
        """
        ID of the parent object.
        """
        resolved_images: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgsDict']]]]
        """
        Resolved images for workloads with dynamic tags enabled.
        """
elif False:
    WorkloadStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadStatusArgs:
    def __init__(__self__, *,
                 canonical_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 current_replica_count: Optional[pulumi.Input[builtins.int]] = None,
                 endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]]] = None,
                 internal_name: Optional[pulumi.Input[builtins.str]] = None,
                 load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgs']]]] = None,
                 parent_id: Optional[pulumi.Input[builtins.str]] = None,
                 resolved_images: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] canonical_endpoint: Canonical endpoint for the workload.
        :param pulumi.Input[builtins.int] current_replica_count: Current amount of replicas deployed.
        :param pulumi.Input[builtins.str] endpoint: Endpoint for the workload.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]] health_checks: Current health status.
        :param pulumi.Input[builtins.str] internal_name: Internal hostname for the workload. Used for service-to-service requests.
        :param pulumi.Input[builtins.str] parent_id: ID of the parent object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]] resolved_images: Resolved images for workloads with dynamic tags enabled.
        """
        if canonical_endpoint is not None:
            pulumi.set(__self__, "canonical_endpoint", canonical_endpoint)
        if current_replica_count is not None:
            pulumi.set(__self__, "current_replica_count", current_replica_count)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if internal_name is not None:
            pulumi.set(__self__, "internal_name", internal_name)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if resolved_images is not None:
            pulumi.set(__self__, "resolved_images", resolved_images)

    @property
    @pulumi.getter(name="canonicalEndpoint")
    def canonical_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Canonical endpoint for the workload.
        """
        return pulumi.get(self, "canonical_endpoint")

    @canonical_endpoint.setter
    def canonical_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "canonical_endpoint", value)

    @property
    @pulumi.getter(name="currentReplicaCount")
    def current_replica_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Current amount of replicas deployed.
        """
        return pulumi.get(self, "current_replica_count")

    @current_replica_count.setter
    def current_replica_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "current_replica_count", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Endpoint for the workload.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]]]:
        """
        Current health status.
        """
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="internalName")
    def internal_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Internal hostname for the workload. Used for service-to-service requests.
        """
        return pulumi.get(self, "internal_name")

    @internal_name.setter
    def internal_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "internal_name", value)

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgs']]]]:
        return pulumi.get(self, "load_balancers")

    @load_balancers.setter
    def load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgs']]]]):
        pulumi.set(self, "load_balancers", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ID of the parent object.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="resolvedImages")
    def resolved_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]]]:
        """
        Resolved images for workloads with dynamic tags enabled.
        """
        return pulumi.get(self, "resolved_images")

    @resolved_images.setter
    def resolved_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]]]):
        pulumi.set(self, "resolved_images", value)


if not MYPY:
    class WorkloadStatusHealthCheckArgsDict(TypedDict):
        active: NotRequired[pulumi.Input[builtins.bool]]
        """
        Active boolean for the associated workload.
        """
        code: NotRequired[pulumi.Input[builtins.int]]
        """
        Current output code for the associated workload.
        """
        failures: NotRequired[pulumi.Input[builtins.int]]
        """
        Failure integer for the associated workload.
        """
        last_checked: NotRequired[pulumi.Input[builtins.str]]
        """
        Timestamp in UTC of the last health check.
        """
        message: NotRequired[pulumi.Input[builtins.str]]
        """
        Current health status for the associated workload.
        """
        success: NotRequired[pulumi.Input[builtins.bool]]
        """
        Success boolean for the associated workload.
        """
        successes: NotRequired[pulumi.Input[builtins.int]]
        """
        Success integer for the associated workload.
        """
elif False:
    WorkloadStatusHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadStatusHealthCheckArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[builtins.bool]] = None,
                 code: Optional[pulumi.Input[builtins.int]] = None,
                 failures: Optional[pulumi.Input[builtins.int]] = None,
                 last_checked: Optional[pulumi.Input[builtins.str]] = None,
                 message: Optional[pulumi.Input[builtins.str]] = None,
                 success: Optional[pulumi.Input[builtins.bool]] = None,
                 successes: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.bool] active: Active boolean for the associated workload.
        :param pulumi.Input[builtins.int] code: Current output code for the associated workload.
        :param pulumi.Input[builtins.int] failures: Failure integer for the associated workload.
        :param pulumi.Input[builtins.str] last_checked: Timestamp in UTC of the last health check.
        :param pulumi.Input[builtins.str] message: Current health status for the associated workload.
        :param pulumi.Input[builtins.bool] success: Success boolean for the associated workload.
        :param pulumi.Input[builtins.int] successes: Success integer for the associated workload.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if failures is not None:
            pulumi.set(__self__, "failures", failures)
        if last_checked is not None:
            pulumi.set(__self__, "last_checked", last_checked)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if success is not None:
            pulumi.set(__self__, "success", success)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Active boolean for the associated workload.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Current output code for the associated workload.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def failures(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Failure integer for the associated workload.
        """
        return pulumi.get(self, "failures")

    @failures.setter
    def failures(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "failures", value)

    @property
    @pulumi.getter(name="lastChecked")
    def last_checked(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timestamp in UTC of the last health check.
        """
        return pulumi.get(self, "last_checked")

    @last_checked.setter
    def last_checked(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_checked", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Current health status for the associated workload.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def success(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Success boolean for the associated workload.
        """
        return pulumi.get(self, "success")

    @success.setter
    def success(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "success", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Success integer for the associated workload.
        """
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "successes", value)


if not MYPY:
    class WorkloadStatusLoadBalancerArgsDict(TypedDict):
        origin: NotRequired[pulumi.Input[builtins.str]]
        url: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkloadStatusLoadBalancerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadStatusLoadBalancerArgs:
    def __init__(__self__, *,
                 origin: Optional[pulumi.Input[builtins.str]] = None,
                 url: Optional[pulumi.Input[builtins.str]] = None):
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class WorkloadStatusResolvedImageArgsDict(TypedDict):
        error_messages: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        images: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgsDict']]]]
        """
        A list of images that were resolved.
        """
        resolved_at: NotRequired[pulumi.Input[builtins.str]]
        """
        UTC Time when the images were resolved.
        """
        resolved_for_version: NotRequired[pulumi.Input[builtins.int]]
        """
        Workload version the images were resolved for.
        """
elif False:
    WorkloadStatusResolvedImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadStatusResolvedImageArgs:
    def __init__(__self__, *,
                 error_messages: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]]] = None,
                 resolved_at: Optional[pulumi.Input[builtins.str]] = None,
                 resolved_for_version: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]] images: A list of images that were resolved.
        :param pulumi.Input[builtins.str] resolved_at: UTC Time when the images were resolved.
        :param pulumi.Input[builtins.int] resolved_for_version: Workload version the images were resolved for.
        """
        if error_messages is not None:
            pulumi.set(__self__, "error_messages", error_messages)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if resolved_at is not None:
            pulumi.set(__self__, "resolved_at", resolved_at)
        if resolved_for_version is not None:
            pulumi.set(__self__, "resolved_for_version", resolved_for_version)

    @property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "error_messages")

    @error_messages.setter
    def error_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "error_messages", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]]]:
        """
        A list of images that were resolved.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="resolvedAt")
    def resolved_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UTC Time when the images were resolved.
        """
        return pulumi.get(self, "resolved_at")

    @resolved_at.setter
    def resolved_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resolved_at", value)

    @property
    @pulumi.getter(name="resolvedForVersion")
    def resolved_for_version(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Workload version the images were resolved for.
        """
        return pulumi.get(self, "resolved_for_version")

    @resolved_for_version.setter
    def resolved_for_version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "resolved_for_version", value)


if not MYPY:
    class WorkloadStatusResolvedImageImageArgsDict(TypedDict):
        digest: NotRequired[pulumi.Input[builtins.str]]
        """
        A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.
        """
        manifests: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgsDict']]]]
elif False:
    WorkloadStatusResolvedImageImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadStatusResolvedImageImageArgs:
    def __init__(__self__, *,
                 digest: Optional[pulumi.Input[builtins.str]] = None,
                 manifests: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] digest: A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.
        """
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def manifests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgs']]]]:
        return pulumi.get(self, "manifests")

    @manifests.setter
    def manifests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgs']]]]):
        pulumi.set(self, "manifests", value)


if not MYPY:
    class WorkloadStatusResolvedImageImageManifestArgsDict(TypedDict):
        digest: NotRequired[pulumi.Input[builtins.str]]
        """
        A SHA256 hash that uniquely identifies the specific image manifest.
        """
        image: NotRequired[pulumi.Input[builtins.str]]
        """
        The name and tag of the resolved image.
        """
        media_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        """
        platform: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        """
elif False:
    WorkloadStatusResolvedImageImageManifestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkloadStatusResolvedImageImageManifestArgs:
    def __init__(__self__, *,
                 digest: Optional[pulumi.Input[builtins.str]] = None,
                 image: Optional[pulumi.Input[builtins.str]] = None,
                 media_type: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] digest: A SHA256 hash that uniquely identifies the specific image manifest.
        :param pulumi.Input[builtins.str] image: The name and tag of the resolved image.
        :param pulumi.Input[builtins.str] media_type: The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] platform: Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        """
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A SHA256 hash that uniquely identifies the specific image manifest.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name and tag of the resolved image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "platform", value)


if not MYPY:
    class GetGvcControlplaneTracingArgsDict(TypedDict):
        sampling: builtins.float
        """
        Determines what percentage of requests should be traced.
        """
        custom_tags: NotRequired[Mapping[str, builtins.str]]
        """
        Key-value map of custom tags.
        """
elif False:
    GetGvcControlplaneTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcControlplaneTracingArgs:
    def __init__(__self__, *,
                 sampling: builtins.float,
                 custom_tags: Optional[Mapping[str, builtins.str]] = None):
        """
        :param builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def sampling(self) -> builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: builtins.float):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[Mapping[str, builtins.str]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class GetGvcKedaArgsDict(TypedDict):
        enabled: builtins.bool
        """
        Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        """
        identity_link: NotRequired[builtins.str]
        """
        A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        """
        secrets: NotRequired[Sequence[builtins.str]]
        """
        A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
elif False:
    GetGvcKedaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcKedaArgs:
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 identity_link: Optional[builtins.str] = None,
                 secrets: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool enabled: Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        :param builtins.str identity_link: A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        :param Sequence[builtins.str] secrets: A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        pulumi.set(__self__, "enabled", enabled)
        if identity_link is not None:
            pulumi.set(__self__, "identity_link", identity_link)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="identityLink")
    def identity_link(self) -> Optional[builtins.str]:
        """
        A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        """
        return pulumi.get(self, "identity_link")

    @identity_link.setter
    def identity_link(self, value: Optional[builtins.str]):
        pulumi.set(self, "identity_link", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "secrets", value)


if not MYPY:
    class GetGvcLightstepTracingArgsDict(TypedDict):
        endpoint: builtins.str
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        sampling: builtins.float
        """
        Determines what percentage of requests should be traced.
        """
        credentials: NotRequired[builtins.str]
        """
        Full link to referenced Opaque Secret.
        """
        custom_tags: NotRequired[Mapping[str, builtins.str]]
        """
        Key-value map of custom tags.
        """
elif False:
    GetGvcLightstepTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcLightstepTracingArgs:
    def __init__(__self__, *,
                 endpoint: builtins.str,
                 sampling: builtins.float,
                 credentials: Optional[builtins.str] = None,
                 custom_tags: Optional[Mapping[str, builtins.str]] = None):
        """
        :param builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param builtins.float sampling: Determines what percentage of requests should be traced.
        :param builtins.str credentials: Full link to referenced Opaque Secret.
        :param Mapping[str, builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: builtins.str):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: builtins.float):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[builtins.str]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[builtins.str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[Mapping[str, builtins.str]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class GetGvcLoadBalancerArgsDict(TypedDict):
        trusted_proxies: builtins.int
        """
        Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
        dedicated: NotRequired[builtins.bool]
        """
        Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        """
        ipset: NotRequired[builtins.str]
        """
        The link or the name of the IP Set that will be used for this load balancer.
        """
        multi_zone: NotRequired['GetGvcLoadBalancerMultiZoneArgsDict']
        redirect: NotRequired['GetGvcLoadBalancerRedirectArgsDict']
        """
        Specify the url to be redirected to for different http status codes.
        """
elif False:
    GetGvcLoadBalancerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcLoadBalancerArgs:
    def __init__(__self__, *,
                 trusted_proxies: builtins.int,
                 dedicated: Optional[builtins.bool] = None,
                 ipset: Optional[builtins.str] = None,
                 multi_zone: Optional['GetGvcLoadBalancerMultiZoneArgs'] = None,
                 redirect: Optional['GetGvcLoadBalancerRedirectArgs'] = None):
        """
        :param builtins.int trusted_proxies: Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        :param builtins.bool dedicated: Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        :param builtins.str ipset: The link or the name of the IP Set that will be used for this load balancer.
        :param 'GetGvcLoadBalancerRedirectArgs' redirect: Specify the url to be redirected to for different http status codes.
        """
        pulumi.set(__self__, "trusted_proxies", trusted_proxies)
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if ipset is not None:
            pulumi.set(__self__, "ipset", ipset)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)

    @property
    @pulumi.getter(name="trustedProxies")
    def trusted_proxies(self) -> builtins.int:
        """
        Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
        return pulumi.get(self, "trusted_proxies")

    @trusted_proxies.setter
    def trusted_proxies(self, value: builtins.int):
        pulumi.set(self, "trusted_proxies", value)

    @property
    @pulumi.getter
    def dedicated(self) -> Optional[builtins.bool]:
        """
        Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        """
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[builtins.bool]):
        pulumi.set(self, "dedicated", value)

    @property
    @pulumi.getter
    def ipset(self) -> Optional[builtins.str]:
        """
        The link or the name of the IP Set that will be used for this load balancer.
        """
        return pulumi.get(self, "ipset")

    @ipset.setter
    def ipset(self, value: Optional[builtins.str]):
        pulumi.set(self, "ipset", value)

    @property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional['GetGvcLoadBalancerMultiZoneArgs']:
        return pulumi.get(self, "multi_zone")

    @multi_zone.setter
    def multi_zone(self, value: Optional['GetGvcLoadBalancerMultiZoneArgs']):
        pulumi.set(self, "multi_zone", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional['GetGvcLoadBalancerRedirectArgs']:
        """
        Specify the url to be redirected to for different http status codes.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional['GetGvcLoadBalancerRedirectArgs']):
        pulumi.set(self, "redirect", value)


if not MYPY:
    class GetGvcLoadBalancerMultiZoneArgsDict(TypedDict):
        enabled: builtins.bool
elif False:
    GetGvcLoadBalancerMultiZoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcLoadBalancerMultiZoneArgs:
    def __init__(__self__, *,
                 enabled: builtins.bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class GetGvcLoadBalancerRedirectArgsDict(TypedDict):
        class_: NotRequired['GetGvcLoadBalancerRedirectClassArgsDict']
        """
        Specify the redirect url for all status codes in a class.
        """
elif False:
    GetGvcLoadBalancerRedirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcLoadBalancerRedirectArgs:
    def __init__(__self__, *,
                 class_: Optional['GetGvcLoadBalancerRedirectClassArgs'] = None):
        """
        :param 'GetGvcLoadBalancerRedirectClassArgs' class_: Specify the redirect url for all status codes in a class.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional['GetGvcLoadBalancerRedirectClassArgs']:
        """
        Specify the redirect url for all status codes in a class.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional['GetGvcLoadBalancerRedirectClassArgs']):
        pulumi.set(self, "class_", value)


if not MYPY:
    class GetGvcLoadBalancerRedirectClassArgsDict(TypedDict):
        status401: NotRequired[builtins.str]
        """
        An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        """
        status5xx: NotRequired[builtins.str]
        """
        Specify the redirect url for any 500 level status code.
        """
elif False:
    GetGvcLoadBalancerRedirectClassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcLoadBalancerRedirectClassArgs:
    def __init__(__self__, *,
                 status401: Optional[builtins.str] = None,
                 status5xx: Optional[builtins.str] = None):
        """
        :param builtins.str status401: An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        :param builtins.str status5xx: Specify the redirect url for any 500 level status code.
        """
        if status401 is not None:
            pulumi.set(__self__, "status401", status401)
        if status5xx is not None:
            pulumi.set(__self__, "status5xx", status5xx)

    @property
    @pulumi.getter
    def status401(self) -> Optional[builtins.str]:
        """
        An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        """
        return pulumi.get(self, "status401")

    @status401.setter
    def status401(self, value: Optional[builtins.str]):
        pulumi.set(self, "status401", value)

    @property
    @pulumi.getter
    def status5xx(self) -> Optional[builtins.str]:
        """
        Specify the redirect url for any 500 level status code.
        """
        return pulumi.get(self, "status5xx")

    @status5xx.setter
    def status5xx(self, value: Optional[builtins.str]):
        pulumi.set(self, "status5xx", value)


if not MYPY:
    class GetGvcOtelTracingArgsDict(TypedDict):
        endpoint: builtins.str
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        sampling: builtins.float
        """
        Determines what percentage of requests should be traced.
        """
        custom_tags: NotRequired[Mapping[str, builtins.str]]
        """
        Key-value map of custom tags.
        """
elif False:
    GetGvcOtelTracingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcOtelTracingArgs:
    def __init__(__self__, *,
                 endpoint: builtins.str,
                 sampling: builtins.float,
                 custom_tags: Optional[Mapping[str, builtins.str]] = None):
        """
        :param builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: builtins.str):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: builtins.float):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[Mapping[str, builtins.str]]):
        pulumi.set(self, "custom_tags", value)


if not MYPY:
    class GetGvcSidecarArgsDict(TypedDict):
        envoy: builtins.str
elif False:
    GetGvcSidecarArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGvcSidecarArgs:
    def __init__(__self__, *,
                 envoy: builtins.str):
        pulumi.set(__self__, "envoy", envoy)

    @property
    @pulumi.getter
    def envoy(self) -> builtins.str:
        return pulumi.get(self, "envoy")

    @envoy.setter
    def envoy(self, value: builtins.str):
        pulumi.set(self, "envoy", value)


if not MYPY:
    class GetImagesQueryArgsDict(TypedDict):
        fetch: builtins.str
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        spec: NotRequired['GetImagesQuerySpecArgsDict']
        """
        The specification of the query.
        """
elif False:
    GetImagesQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagesQueryArgs:
    def __init__(__self__, *,
                 fetch: builtins.str,
                 spec: Optional['GetImagesQuerySpecArgs'] = None):
        """
        :param builtins.str fetch: Type of fetch. Specify either: `links` or `items`. Default: `items`.
        :param 'GetImagesQuerySpecArgs' spec: The specification of the query.
        """
        pulumi.set(__self__, "fetch", fetch)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def fetch(self) -> builtins.str:
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        return pulumi.get(self, "fetch")

    @fetch.setter
    def fetch(self, value: builtins.str):
        pulumi.set(self, "fetch", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional['GetImagesQuerySpecArgs']:
        """
        The specification of the query.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional['GetImagesQuerySpecArgs']):
        pulumi.set(self, "spec", value)


if not MYPY:
    class GetImagesQuerySpecArgsDict(TypedDict):
        match: builtins.str
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        terms: NotRequired[Sequence['GetImagesQuerySpecTermArgsDict']]
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
elif False:
    GetImagesQuerySpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagesQuerySpecArgs:
    def __init__(__self__, *,
                 match: builtins.str,
                 terms: Optional[Sequence['GetImagesQuerySpecTermArgs']] = None):
        """
        :param builtins.str match: Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        :param Sequence['GetImagesQuerySpecTermArgs'] terms: Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        pulumi.set(__self__, "match", match)
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def match(self) -> builtins.str:
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: builtins.str):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['GetImagesQuerySpecTermArgs']]:
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[Sequence['GetImagesQuerySpecTermArgs']]):
        pulumi.set(self, "terms", value)


if not MYPY:
    class GetImagesQuerySpecTermArgsDict(TypedDict):
        op: builtins.str
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        property: NotRequired[builtins.str]
        """
        Property to use for query evaluation.
        """
        rel: NotRequired[builtins.str]
        """
        Relation to use for query evaluation.
        """
        tag: NotRequired[builtins.str]
        """
        Tag key to use for query evaluation.
        """
        value: NotRequired[builtins.str]
        """
        Testing value for query evaluation.
        """
elif False:
    GetImagesQuerySpecTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagesQuerySpecTermArgs:
    def __init__(__self__, *,
                 op: builtins.str,
                 property: Optional[builtins.str] = None,
                 rel: Optional[builtins.str] = None,
                 tag: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str op: Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        :param builtins.str property: Property to use for query evaluation.
        :param builtins.str rel: Relation to use for query evaluation.
        :param builtins.str tag: Tag key to use for query evaluation.
        :param builtins.str value: Testing value for query evaluation.
        """
        pulumi.set(__self__, "op", op)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> builtins.str:
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: builtins.str):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def rel(self) -> Optional[builtins.str]:
        """
        Relation to use for query evaluation.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: Optional[builtins.str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[builtins.str]:
        """
        Tag key to use for query evaluation.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[builtins.str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        Testing value for query evaluation.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[builtins.str]:
        """
        Property to use for query evaluation.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[builtins.str]):
        pulumi.set(self, "property", value)


if not MYPY:
    class GetOrgAuthConfigArgsDict(TypedDict):
        domain_auto_members: Sequence[builtins.str]
        """
        List of domains which will auto-provision users when authenticating using SAML.
        """
        saml_only: builtins.bool
        """
        Enforce SAML only authentication.
        """
elif False:
    GetOrgAuthConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOrgAuthConfigArgs:
    def __init__(__self__, *,
                 domain_auto_members: Sequence[builtins.str],
                 saml_only: builtins.bool):
        """
        :param Sequence[builtins.str] domain_auto_members: List of domains which will auto-provision users when authenticating using SAML.
        :param builtins.bool saml_only: Enforce SAML only authentication.
        """
        pulumi.set(__self__, "domain_auto_members", domain_auto_members)
        pulumi.set(__self__, "saml_only", saml_only)

    @property
    @pulumi.getter(name="domainAutoMembers")
    def domain_auto_members(self) -> Sequence[builtins.str]:
        """
        List of domains which will auto-provision users when authenticating using SAML.
        """
        return pulumi.get(self, "domain_auto_members")

    @domain_auto_members.setter
    def domain_auto_members(self, value: Sequence[builtins.str]):
        pulumi.set(self, "domain_auto_members", value)

    @property
    @pulumi.getter(name="samlOnly")
    def saml_only(self) -> builtins.bool:
        """
        Enforce SAML only authentication.
        """
        return pulumi.get(self, "saml_only")

    @saml_only.setter
    def saml_only(self, value: builtins.bool):
        pulumi.set(self, "saml_only", value)


if not MYPY:
    class GetOrgObservabilityArgsDict(TypedDict):
        default_alert_emails: Sequence[builtins.str]
        """
        These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        """
        logs_retention_days: builtins.int
        """
        Log retention days. Default: 30
        """
        metrics_retention_days: builtins.int
        """
        Metrics retention days. Default: 30
        """
        traces_retention_days: builtins.int
        """
        Traces retention days. Default: 30
        """
elif False:
    GetOrgObservabilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOrgObservabilityArgs:
    def __init__(__self__, *,
                 default_alert_emails: Sequence[builtins.str],
                 logs_retention_days: builtins.int,
                 metrics_retention_days: builtins.int,
                 traces_retention_days: builtins.int):
        """
        :param Sequence[builtins.str] default_alert_emails: These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        :param builtins.int logs_retention_days: Log retention days. Default: 30
        :param builtins.int metrics_retention_days: Metrics retention days. Default: 30
        :param builtins.int traces_retention_days: Traces retention days. Default: 30
        """
        pulumi.set(__self__, "default_alert_emails", default_alert_emails)
        pulumi.set(__self__, "logs_retention_days", logs_retention_days)
        pulumi.set(__self__, "metrics_retention_days", metrics_retention_days)
        pulumi.set(__self__, "traces_retention_days", traces_retention_days)

    @property
    @pulumi.getter(name="defaultAlertEmails")
    def default_alert_emails(self) -> Sequence[builtins.str]:
        """
        These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        """
        return pulumi.get(self, "default_alert_emails")

    @default_alert_emails.setter
    def default_alert_emails(self, value: Sequence[builtins.str]):
        pulumi.set(self, "default_alert_emails", value)

    @property
    @pulumi.getter(name="logsRetentionDays")
    def logs_retention_days(self) -> builtins.int:
        """
        Log retention days. Default: 30
        """
        return pulumi.get(self, "logs_retention_days")

    @logs_retention_days.setter
    def logs_retention_days(self, value: builtins.int):
        pulumi.set(self, "logs_retention_days", value)

    @property
    @pulumi.getter(name="metricsRetentionDays")
    def metrics_retention_days(self) -> builtins.int:
        """
        Metrics retention days. Default: 30
        """
        return pulumi.get(self, "metrics_retention_days")

    @metrics_retention_days.setter
    def metrics_retention_days(self, value: builtins.int):
        pulumi.set(self, "metrics_retention_days", value)

    @property
    @pulumi.getter(name="tracesRetentionDays")
    def traces_retention_days(self) -> builtins.int:
        """
        Traces retention days. Default: 30
        """
        return pulumi.get(self, "traces_retention_days")

    @traces_retention_days.setter
    def traces_retention_days(self, value: builtins.int):
        pulumi.set(self, "traces_retention_days", value)


if not MYPY:
    class GetOrgSecurityArgsDict(TypedDict):
        threat_detection: NotRequired['GetOrgSecurityThreatDetectionArgsDict']
elif False:
    GetOrgSecurityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOrgSecurityArgs:
    def __init__(__self__, *,
                 threat_detection: Optional['GetOrgSecurityThreatDetectionArgs'] = None):
        if threat_detection is not None:
            pulumi.set(__self__, "threat_detection", threat_detection)

    @property
    @pulumi.getter(name="threatDetection")
    def threat_detection(self) -> Optional['GetOrgSecurityThreatDetectionArgs']:
        return pulumi.get(self, "threat_detection")

    @threat_detection.setter
    def threat_detection(self, value: Optional['GetOrgSecurityThreatDetectionArgs']):
        pulumi.set(self, "threat_detection", value)


if not MYPY:
    class GetOrgSecurityThreatDetectionArgsDict(TypedDict):
        enabled: builtins.bool
        """
        Indicates whether threat detection should be forwarded or not.
        """
        minimum_severity: NotRequired[builtins.str]
        """
        Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        """
        syslog: NotRequired['GetOrgSecurityThreatDetectionSyslogArgsDict']
        """
        Configuration for syslog forwarding.
        """
elif False:
    GetOrgSecurityThreatDetectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOrgSecurityThreatDetectionArgs:
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 minimum_severity: Optional[builtins.str] = None,
                 syslog: Optional['GetOrgSecurityThreatDetectionSyslogArgs'] = None):
        """
        :param builtins.bool enabled: Indicates whether threat detection should be forwarded or not.
        :param builtins.str minimum_severity: Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        :param 'GetOrgSecurityThreatDetectionSyslogArgs' syslog: Configuration for syslog forwarding.
        """
        pulumi.set(__self__, "enabled", enabled)
        if minimum_severity is not None:
            pulumi.set(__self__, "minimum_severity", minimum_severity)
        if syslog is not None:
            pulumi.set(__self__, "syslog", syslog)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Indicates whether threat detection should be forwarded or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="minimumSeverity")
    def minimum_severity(self) -> Optional[builtins.str]:
        """
        Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        """
        return pulumi.get(self, "minimum_severity")

    @minimum_severity.setter
    def minimum_severity(self, value: Optional[builtins.str]):
        pulumi.set(self, "minimum_severity", value)

    @property
    @pulumi.getter
    def syslog(self) -> Optional['GetOrgSecurityThreatDetectionSyslogArgs']:
        """
        Configuration for syslog forwarding.
        """
        return pulumi.get(self, "syslog")

    @syslog.setter
    def syslog(self, value: Optional['GetOrgSecurityThreatDetectionSyslogArgs']):
        pulumi.set(self, "syslog", value)


if not MYPY:
    class GetOrgSecurityThreatDetectionSyslogArgsDict(TypedDict):
        host: builtins.str
        """
        The hostname to send syslog messages to.
        """
        port: builtins.int
        """
        The port to send syslog messages to.
        """
        transport: builtins.str
        """
        The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
elif False:
    GetOrgSecurityThreatDetectionSyslogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOrgSecurityThreatDetectionSyslogArgs:
    def __init__(__self__, *,
                 host: builtins.str,
                 port: builtins.int,
                 transport: builtins.str):
        """
        :param builtins.str host: The hostname to send syslog messages to.
        :param builtins.int port: The port to send syslog messages to.
        :param builtins.str transport: The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "transport", transport)

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The hostname to send syslog messages to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: builtins.str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The port to send syslog messages to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: builtins.int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def transport(self) -> builtins.str:
        """
        The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: builtins.str):
        pulumi.set(self, "transport", value)


if not MYPY:
    class GetSecretAwArgsDict(TypedDict):
        access_key: builtins.str
        """
        Access Key provided by AWS.
        """
        external_id: builtins.str
        """
        AWS IAM Role External ID.
        """
        role_arn: builtins.str
        """
        Role ARN provided by AWS.
        """
        secret_key: builtins.str
        """
        Secret Key provided by AWS.
        """
elif False:
    GetSecretAwArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretAwArgs:
    def __init__(__self__, *,
                 access_key: builtins.str,
                 external_id: builtins.str,
                 role_arn: builtins.str,
                 secret_key: builtins.str):
        """
        :param builtins.str access_key: Access Key provided by AWS.
        :param builtins.str external_id: AWS IAM Role External ID.
        :param builtins.str role_arn: Role ARN provided by AWS.
        :param builtins.str secret_key: Secret Key provided by AWS.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> builtins.str:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: builtins.str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        AWS IAM Role External ID.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: builtins.str):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> builtins.str:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: builtins.str):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> builtins.str:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: builtins.str):
        pulumi.set(self, "secret_key", value)


if not MYPY:
    class GetSecretAzureConnectorArgsDict(TypedDict):
        code: builtins.str
        """
        Code/Key to authenticate to deployment URL.
        """
        url: builtins.str
        """
        Deployment URL.
        """
elif False:
    GetSecretAzureConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretAzureConnectorArgs:
    def __init__(__self__, *,
                 code: builtins.str,
                 url: builtins.str):
        """
        :param builtins.str code: Code/Key to authenticate to deployment URL.
        :param builtins.str url: Deployment URL.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> builtins.str:
        """
        Code/Key to authenticate to deployment URL.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: builtins.str):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        Deployment URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: builtins.str):
        pulumi.set(self, "url", value)


if not MYPY:
    class GetSecretEcrArgsDict(TypedDict):
        access_key: builtins.str
        """
        Access Key provided by AWS.
        """
        repos: Sequence[builtins.str]
        """
        List of ECR repositories.
        """
        role_arn: builtins.str
        """
        Role ARN provided by AWS.
        """
        secret_key: builtins.str
        """
        Secret Key provided by AWS.
        """
        external_id: NotRequired[builtins.str]
        """
        AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
elif False:
    GetSecretEcrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretEcrArgs:
    def __init__(__self__, *,
                 access_key: builtins.str,
                 repos: Sequence[builtins.str],
                 role_arn: builtins.str,
                 secret_key: builtins.str,
                 external_id: Optional[builtins.str] = None):
        """
        :param builtins.str access_key: Access Key provided by AWS.
        :param Sequence[builtins.str] repos: List of ECR repositories.
        :param builtins.str role_arn: Role ARN provided by AWS.
        :param builtins.str secret_key: Secret Key provided by AWS.
        :param builtins.str external_id: AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "repos", repos)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_key", secret_key)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> builtins.str:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: builtins.str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def repos(self) -> Sequence[builtins.str]:
        """
        List of ECR repositories.
        """
        return pulumi.get(self, "repos")

    @repos.setter
    def repos(self, value: Sequence[builtins.str]):
        pulumi.set(self, "repos", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> builtins.str:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: builtins.str):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> builtins.str:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: builtins.str):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[builtins.str]:
        """
        AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[builtins.str]):
        pulumi.set(self, "external_id", value)


if not MYPY:
    class GetSecretKeypairArgsDict(TypedDict):
        passphrase: builtins.str
        """
        Passphrase for private key.
        """
        public_key: builtins.str
        """
        Public Key.
        """
        secret_key: builtins.str
        """
        Secret/Private Key.
        """
elif False:
    GetSecretKeypairArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretKeypairArgs:
    def __init__(__self__, *,
                 passphrase: builtins.str,
                 public_key: builtins.str,
                 secret_key: builtins.str):
        """
        :param builtins.str passphrase: Passphrase for private key.
        :param builtins.str public_key: Public Key.
        :param builtins.str secret_key: Secret/Private Key.
        """
        pulumi.set(__self__, "passphrase", passphrase)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def passphrase(self) -> builtins.str:
        """
        Passphrase for private key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: builtins.str):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> builtins.str:
        """
        Public Key.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: builtins.str):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> builtins.str:
        """
        Secret/Private Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: builtins.str):
        pulumi.set(self, "secret_key", value)


if not MYPY:
    class GetSecretNatsAccountArgsDict(TypedDict):
        account_id: builtins.str
        """
        Account ID.
        """
        private_key: builtins.str
        """
        Private Key.
        """
elif False:
    GetSecretNatsAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretNatsAccountArgs:
    def __init__(__self__, *,
                 account_id: builtins.str,
                 private_key: builtins.str):
        """
        :param builtins.str account_id: Account ID.
        :param builtins.str private_key: Private Key.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: builtins.str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> builtins.str:
        """
        Private Key.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: builtins.str):
        pulumi.set(self, "private_key", value)


if not MYPY:
    class GetSecretOpaqueArgsDict(TypedDict):
        encoding: builtins.str
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        payload: builtins.str
        """
        Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
elif False:
    GetSecretOpaqueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretOpaqueArgs:
    def __init__(__self__, *,
                 encoding: builtins.str,
                 payload: builtins.str):
        """
        :param builtins.str encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        :param builtins.str payload: Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
        pulumi.set(__self__, "encoding", encoding)
        pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def encoding(self) -> builtins.str:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: builtins.str):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def payload(self) -> builtins.str:
        """
        Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: builtins.str):
        pulumi.set(self, "payload", value)


if not MYPY:
    class GetSecretTlArgsDict(TypedDict):
        cert: builtins.str
        """
        Public Certificate.
        """
        chain: builtins.str
        """
        Chain Certificate.
        """
        key: builtins.str
        """
        Private Certificate.
        """
elif False:
    GetSecretTlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretTlArgs:
    def __init__(__self__, *,
                 cert: builtins.str,
                 chain: builtins.str,
                 key: builtins.str):
        """
        :param builtins.str cert: Public Certificate.
        :param builtins.str chain: Chain Certificate.
        :param builtins.str key: Private Certificate.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> builtins.str:
        """
        Public Certificate.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: builtins.str):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def chain(self) -> builtins.str:
        """
        Chain Certificate.
        """
        return pulumi.get(self, "chain")

    @chain.setter
    def chain(self, value: builtins.str):
        pulumi.set(self, "chain", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Private Certificate.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: builtins.str):
        pulumi.set(self, "key", value)


if not MYPY:
    class GetSecretUserpassArgsDict(TypedDict):
        encoding: builtins.str
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        password: builtins.str
        """
        Password.
        """
        username: builtins.str
        """
        Username.
        """
elif False:
    GetSecretUserpassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecretUserpassArgs:
    def __init__(__self__, *,
                 encoding: builtins.str,
                 password: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        :param builtins.str password: Password.
        :param builtins.str username: Username.
        """
        pulumi.set(__self__, "encoding", encoding)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def encoding(self) -> builtins.str:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: builtins.str):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: builtins.str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: builtins.str):
        pulumi.set(self, "username", value)


