from _typeshed import OpenTextMode
from socket import socket
from typing import Any

class NoFDError(RuntimeError): ...

class FileDescriptor:
    def __init__(self, fd: int) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> FileDescriptor: ...
    def __exit__(self, exc_type: object, exc_val: object, exc_tb: object) -> None: ...
    def __del__(self) -> None: ...
    def fileno(self) -> int: ...
    def to_raw_fd(self) -> int: ...
    def to_file(
        self,
        mode: OpenTextMode,
        buffering: int = -1,
        encoding: str | None = None,
        errors: str | None = None,
        newline: str | None = None,
    ) -> int: ...
    def to_socket(self) -> socket: ...
    @classmethod
    def from_ancdata(
        cls, ancdata: list[tuple[bytes, list[tuple[int, int, bytes]], Any]]
    ) -> list[FileDescriptor]: ...

def fds_buf_size() -> int: ...
